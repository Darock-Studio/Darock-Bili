//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.101.0.0
//
#ifndef TUIKeyplaneView_h
#define TUIKeyplaneView_h
@import Foundation;

#include "UIView.h"
#include "TUIKey.h"
#include "TUIKeyplane.h"
#include "TUIVariantSelectorDelegate-Protocol.h"

@class NSLayoutConstraint, NSMutableArray, NSMutableDictionary, NSString, UIButton, UIKBRenderConfig, UIKBRenderFactory, UIKBRenderingContext, UIKBScreenTraits, UIKBTree, UILayoutGuide, UIPinchGestureRecognizer, UIView;

@interface TUIKeyplaneView : UIView<TUIVariantSelectorDelegate>

@property (retain, nonatomic) TUIKeyplane *currentKeyplane;
@property (retain, nonatomic) NSMutableDictionary *storedKeyViews;
@property (retain, nonatomic) NSMutableDictionary *storedVariantViews;
@property (retain, nonatomic) NSMutableArray *activeVariantViews;
@property (nonatomic) BOOL layoutReadyForTreeUpdate;
@property (nonatomic) BOOL dismissingKeyboardMenu;
@property (retain, nonatomic) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (retain, nonatomic) NSLayoutConstraint *sizeRatioConstraint;
@property (retain, nonatomic) NSLayoutConstraint *heightConstraint;
@property (retain, nonatomic) NSLayoutConstraint *preferredWidthConstraint;
@property (retain, nonatomic) NSLayoutConstraint *trailingTieConstraint;
@property (retain, nonatomic) NSLayoutConstraint *scalingConstraint;
@property (retain, nonatomic) NSLayoutConstraint *topSpacing;
@property (retain, nonatomic) NSLayoutConstraint *leadingSpacing;
@property (retain, nonatomic) NSLayoutConstraint *trailingSpacing;
@property (retain, nonatomic) NSLayoutConstraint *bottomSpacing;
@property (retain, nonatomic) NSLayoutConstraint *splitSpacing;
@property (retain, nonatomic) NSLayoutConstraint *keySizeSpacer;
@property (retain, nonatomic) NSLayoutConstraint *leftSplitWidth;
@property (retain, nonatomic) NSLayoutConstraint *rightSplitWidth;
@property (retain, nonatomic) UIView *keyboardContentView;
@property (retain, nonatomic) UILayoutGuide *keySizeReferenceGuide;
@property (retain, nonatomic) UILayoutGuide *bottomRowSizingGuide;
@property (retain, nonatomic) NSLayoutConstraint *bottomRowSizingConstraint;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } standardKeyInsets;
@property (retain, nonatomic) NSString *displayedType;
@property (retain, nonatomic) NSString *keyLayout;
@property (nonatomic) double startingWidthConstant;
@property (nonatomic) double maximumWidth;
@property (nonatomic) double previousWidth;
@property (nonatomic) struct CGSize { double x0; double x1; } preferredSize;
@property (nonatomic) struct CGSize { double x0; double x1; } preferredFloatingSize;
@property (nonatomic) struct CGSize { double x0; double x1; } unsplitSize;
@property (nonatomic) long long currentHandBias;
@property (retain, nonatomic) UIButton *biasEscapeButton;
@property (retain, nonatomic) NSLayoutConstraint *horizontalBiasButtonConstraint;
@property (nonatomic) BOOL allowsPaddles;
@property (nonatomic) BOOL movingFromFloating;
@property (nonatomic) BOOL movingToFloating;
@property (nonatomic) BOOL isFloating;
@property (nonatomic) BOOL isCurrentlySplit;
@property (nonatomic) BOOL isInSplitTransition;
@property (nonatomic) double transitionProgress;
@property (nonatomic) long long fullControlKeyType;
@property (nonatomic) long long floatingControlKeyType;
@property (retain, nonatomic) UIKBRenderingContext *renderingContext;
@property (retain, nonatomic) UIKBRenderConfig *renderConfig;
@property (retain, nonatomic) NSMutableDictionary *keyRowViews;
@property (retain, nonatomic) NSMutableDictionary *delayedDeactivationKeys;
@property (retain, nonatomic) NSMutableDictionary *splitTransitionLayoutGuides;
@property (retain, nonatomic) UIKBScreenTraits *screenTraits;
@property (retain, nonatomic) TUIKey *activeKey;
@property (retain, nonatomic) UIKBTree *keyplane;
@property (retain, nonatomic) UIKBRenderFactory *factory;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)keyplaneViewForKeyboard:(id)keyboard size:(struct CGSize { double x0; double x1; })size isLandscape:(BOOL)landscape displayKeyplane:(unsigned long long)keyplane;
+ (id)keyplaneViewForKeyboard:(id)keyboard size:(struct CGSize { double x0; double x1; })size isLandscape:(BOOL)landscape;
+ (id)keyplaneViewForLayout:(id)layout size:(struct CGSize { double x0; double x1; })size isLandscape:(BOOL)landscape;
+ (id)dynamicKeyboardForName:(id)name size:(struct CGSize { double x0; double x1; })size isLandscape:(BOOL)landscape;
+ (id)updateDynamicKeyboard:(id)keyboard usingSize:(struct CGSize { double x0; double x1; })size isLandscape:(BOOL)landscape;
+ (id)updateDynamicKeyplane:(id)keyplane usingSize:(struct CGSize { double x0; double x1; })size isLandscape:(BOOL)landscape;

/* instance methods */
- (void)updateVariantSelectorFramesForKey:(id)key;
- (void)updateToSpecifiedSize:(struct CGSize { double x0; double x1; })size;
- (void)generateFactoryForKeyplane:(id)keyplane landscape:(BOOL)landscape;
- (void)updateTreeForAutomation;
- (id)keyViewForKey:(id)key;
- (id)cacheIdentifierForKey:(id)key withState:(int)state;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame keyplane:(id)keyplane;
- (id)keyplaneFromTree:(id)tree size:(struct CGSize { double x0; double x1; })size controlKeyType:(long long)type;
- (id)actualView;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (void)removeFromSuperview;
- (void)createContentViewsIfNeeded;
- (long long)keyLayoutStyle;
- (void)prepareForDisplay;
- (void)traitCollectionDidChange:(id)change;
- (void)compareKeyplane:(id)keyplane toKeyplane:(id)keyplane;
- (void)resetLayoutAndApplyKeyplane:(id)keyplane;
- (void)updateRowsForKeyplane:(id)keyplane;
- (void)updateKeysForRow:(unsigned long long)row withKeys:(id)keys;
- (void)setKeyplaneForAutomation:(id)automation;
- (void)transitionToKeyplane:(id)keyplane;
- (void)updateKeysForFloating:(BOOL)floating;
- (void)updateKeyplaneSpacing;
- (void)setKeyboardBias:(long long)bias;
- (void)updateBiasEscapeButtonVisbility:(BOOL)visbility;
- (void)updateBottomRowSizingGuide;
- (void)didTapBiasEscapeButton;
- (void)updateAllTrees;
- (void)layoutRows:(unsigned long long)rows;
- (void)layoutKeysInRows:(id)rows;
- (void)layoutSubviews;
- (void)setState:(int)state forKey:(id)key;
- (void)deactivateKey:(id)key previousState:(int)state;
- (void)presentSelectorView:(id)view fromBaseKey:(id)key;
- (void)tappedToDismissSelector;
- (void)changingSelectedVariantForKey:(id)key atPoint:(struct CGPoint { double x0; double x1; })point;
- (void)finishedSelectingVariantForKey:(id)key atPoint:(struct CGPoint { double x0; double x1; })point;
- (void)dimKeys:(id)keys;
- (void)deactivateKeys;
- (void)deactivateAdaptiveKey:(id)key;
- (void)addKeyToDelayedDeactivationSet:(id)set;
- (void)removeKeyFromDelayedDeactivationSet:(id)set;
- (int)stateForKey:(id)key;
- (BOOL)_shouldAllowKey:(id)key;
- (id)variantViewForKey:(id)key cacheID:(id)id;
- (id)cachedVariantViewForTree:(id)tree;
- (id)cachedVariantViewForTree:(id)tree state:(int)state;
- (id)viewForKey:(id)key;
- (id)keyViewForTree:(id)tree;
- (id)viewForBaseKey:(id)key;
- (id)renderConfigForCurrentTraitCollection;
- (id)keyplaneRenderConfig;
- (void)_updateRenderingContext;
- (void)_generateRenderingContextIfNeeded;
- (void)_generateFactoryIfNeeded;
- (void)_regenerateFactoryPreservingUpdates:(BOOL)updates;
- (void)setOverrideScreenTraits:(id)traits;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keycapInsets;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keyplaneInsets;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })updateFrameForKey:(id)key;
- (BOOL)supportsSplit;
- (BOOL)isSplit;
- (void)createSplitLayoutIfNeeded;
- (void)prepareForSplitTransition;
- (void)updateSplitProgress:(double)progress;
- (void)transitionWillFinishWithProgress:(double)progress completion:(id /* block */)completion;
- (void)finishSplitTransition;
- (void)finalLayoutForSplit:(BOOL)split;
- (struct CGSize { double x0; double x1; })leftSplitSize;
- (struct CGSize { double x0; double x1; })rightSplitSize;
- (struct CGSize { double x0; double x1; })splitSizeForRightSide:(BOOL)side;
- (struct CGSize { double x0; double x1; })sizeFromScreenTraitsAndClass;
- (double)fullHeightForDockedKeyboard;
- (void)updateToSize:(struct CGSize { double x0; double x1; })size;
@end

#endif /* TUIKeyplaneView_h */
