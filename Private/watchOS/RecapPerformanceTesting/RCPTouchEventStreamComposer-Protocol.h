//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 47.1.0.0.0
//
#ifndef RCPTouchEventStreamComposer_Protocol_h
#define RCPTouchEventStreamComposer_Protocol_h
@import Foundation;

@protocol RCPTouchEventStreamComposer <RCPBaseEventStreamComposer>

@property (nonatomic) long long touchFrequency;
@property (retain, nonatomic) CAMediaTimingFunction *touchCurveFunction;
@property (readonly, nonatomic) double defaultPressure;
@property (readonly, nonatomic) double defaultRadius;

/* instance methods */
- (void)touchDownAtPoints:(struct CGPoint { double x0; double x1; } *)points touchCount:(unsigned long long)count pressure:(double)pressure radius:(double)radius;
- (void)touchDownAtPoints:(struct CGPoint { double x0; double x1; } *)points touchCount:(unsigned long long)count pressure:(double)pressure;
- (void)touchDownAtPoints:(struct CGPoint { double x0; double x1; } *)points touchCount:(unsigned long long)count radius:(double)radius;
- (void)touchDownAtPoints:(struct CGPoint { double x0; double x1; } *)points touchCount:(unsigned long long)count;
- (void)touchDown:(struct CGPoint { double x0; double x1; })down touchCount:(unsigned long long)count;
- (void)touchDown:(struct CGPoint { double x0; double x1; })down;
- (void)touchTapDown:(struct CGPoint { double x0; double x1; })down;
- (void)edgeOrb:(struct CGPoint { double x0; double x1; })orb;
- (void)edgeOrbSwipe:(struct CGPoint { double x0; double x1; })swipe withEndLocation:(struct CGPoint { double x0; double x1; })location withDuration:(double)duration;
- (void)liftUpActivePointsByIndex:(id)index;
- (void)liftUpAtAllActivePoints;
- (void)liftUpAtAllActivePointsWithEventType:(long long)type;
- (void)liftUpAtPoints:(struct CGPoint { double x0; double x1; } *)points touchCount:(unsigned long long)count;
- (void)liftUp:(struct CGPoint { double x0; double x1; })up touchCount:(unsigned long long)count;
- (void)liftUp:(struct CGPoint { double x0; double x1; })up;
- (void)moveToPoints:(struct CGPoint { double x0; double x1; } *)points touchCount:(unsigned long long)count pressure:(double)pressure duration:(double)duration radius:(double)radius;
- (void)moveToPoints:(struct CGPoint { double x0; double x1; } *)points touchCount:(unsigned long long)count pressure:(double)pressure duration:(double)duration;
- (void)moveToPoints:(struct CGPoint { double x0; double x1; } *)points touchCount:(unsigned long long)count duration:(double)duration;
- (void)moveToPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration;
- (void)tap:(struct CGPoint { double x0; double x1; })tap pressure:(double)pressure radius:(double)radius;
- (void)tap:(struct CGPoint { double x0; double x1; })tap pressure:(double)pressure;
- (void)tap:(struct CGPoint { double x0; double x1; })tap radius:(double)radius;
- (void)tap:(struct CGPoint { double x0; double x1; })tap;
- (void)doubleTap:(struct CGPoint { double x0; double x1; })tap;
- (void)doubleFingerTap:(struct CGPoint { double x0; double x1; })tap;
- (void)tapToWakeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration tapAndWait:(double)wait lift:(BOOL)lift pressure:(double)pressure radius:(double)radius;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration tapAndWait:(double)wait lift:(BOOL)lift pressure:(double)pressure;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration tapAndWait:(double)wait lift:(BOOL)lift radius:(double)radius;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration tapAndWait:(double)wait lift:(BOOL)lift;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration pressure:(double)pressure radius:(double)radius;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration pressure:(double)pressure;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration radius:(double)radius;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration;
- (void)dragWithStartPoint:(struct CGPoint { double x0; double x1; })point mask:(unsigned long long)mask endPoint:(struct CGPoint { double x0; double x1; })point mask:(unsigned long long)mask duration:(double)duration;
- (void)multifingerDragWithPointArray:(struct CGPoint { double x0; double x1; } *)array numPoints:(unsigned long long)points duration:(double)duration numFingers:(unsigned long long)fingers;
- (void)sendFlickWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration pressure:(double)pressure radius:(double)radius;
- (void)sendFlickWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration pressure:(double)pressure;
- (void)sendFlickWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration radius:(double)radius;
- (void)sendFlickWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration;
- (void)pinchCloseWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration pressure:(double)pressure radius:(double)radius;
- (void)pinchCloseWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration pressure:(double)pressure;
- (void)pinchCloseWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration radius:(double)radius;
- (void)pinchCloseWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration;
- (void)pinchOpenWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration pressure:(double)pressure radius:(double)radius;
- (void)pinchOpenWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration pressure:(double)pressure;
- (void)pinchOpenWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration radius:(double)radius;
- (void)pinchOpenWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration;
- (void)rotate:(struct CGPoint { double x0; double x1; })rotate withRadius:(double)radius rotation:(double)rotation duration:(double)duration touchCount:(unsigned long long)count;
- (void)peekAndPop:(struct CGPoint { double x0; double x1; })pop commit:(BOOL)commit duration:(double)duration pressure:(double)pressure radius:(double)radius;
- (void)peekAndPop:(struct CGPoint { double x0; double x1; })pop commit:(BOOL)commit duration:(double)duration pressure:(double)pressure;
- (void)peekAndPop:(struct CGPoint { double x0; double x1; })pop commit:(BOOL)commit duration:(double)duration radius:(double)radius;
- (void)peekAndPop:(struct CGPoint { double x0; double x1; })pop commit:(BOOL)commit duration:(double)duration;
@end

#endif /* RCPTouchEventStreamComposer_Protocol_h */
