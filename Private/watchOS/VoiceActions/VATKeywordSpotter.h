//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 18.0.0.0.0
//
#ifndef VATKeywordSpotter_h
#define VATKeywordSpotter_h
@import Foundation;

#include "VATSpeechRecognizer.h"

@class FeatureExtractObjc, NSArray, NSString, VATConfiguration;
@protocol VATKeywordSpotterDelegate, {unordered_map<std::string, float, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, float>>>="__table_"{__hash_table<std::__hash_value_type<std::string, float>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, float>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, float>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, float>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, float>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, float>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, float>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}}, {vector<voiceactions::FstSpotterResults, std::allocator<voiceactions::FstSpotterResults>>="__begin_"^{FstSpotterResults}"__end_"^{FstSpotterResults}"__end_cap_"{__compressed_pair<voiceactions::FstSpotterResults *, std::allocator<voiceactions::FstSpotterResults>>="__value_"^{FstSpotterResults}}};

@interface VATKeywordSpotter : NSObject {
  /* instance variables */
  NSArray *_keywordsWithPhonemes;
  FeatureExtractObjc *fe;
  NSObject<VATKeywordSpotterDelegate> *_delegate;
  BOOL _started;
  void * _floatFstDecoder;
  struct unordered_map<std::string, float, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, float>>> { struct __hash_table<std::__hash_value_type<std::string, float>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, float>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, float>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, float>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, float>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, float>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, float>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, float>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } _phraseThresholds;
  int _processedFrameCount;
  NSString *_filePath;
  double _fileCurrentDuration;
  double _startTime;
  long long _fileByteCount;
  BOOL _isRunning;
  struct vector<voiceactions::FstSpotterResults, std::allocator<voiceactions::FstSpotterResults>> { struct FstSpotterResults *__begin_; struct FstSpotterResults *__end_; struct __compressed_pair<voiceactions::FstSpotterResults *, std::allocator<voiceactions::FstSpotterResults>> { struct FstSpotterResults *__value_; } __end_cap_; } _keywordResults;
  int _frameCountSinceKeywordDetected;
}

@property (nonatomic) VATConfiguration *configuration;
@property (nonatomic) BOOL audioDebuggingEnabled;
@property (nonatomic) BOOL batchDecodeEnabled;
@property (nonatomic) VATSpeechRecognizer *recognizer;
@property (nonatomic) BOOL secondPassEnabled;
@property (copy, nonatomic) NSString *customSecondPassModelPath;
@property (nonatomic) BOOL preKeywordSilenceCheckEnabled;
@property (nonatomic) BOOL duringKeywordSilenceCheckEnabled;
@property (nonatomic) BOOL postKeywordSilenceCheckEnabled;

/* class methods */
+ (id)pronounciationsFor:(id)for wordSeparator:(id)separator;

/* instance methods */
- (id)_handleSecondPass:(id)pass expectedKeyword:(id)keyword duration:(double *)duration secondPassAudio:(id *)audio;
- (BOOL)isValidRecognizer;
- (void)setSecondPassEnabled:(BOOL)enabled customAssetPath:(id)path;
- (void)_categoryDealloc;
- (void)dealloc;
- (id)initWithConfig:(id)config keywordsWithPhonemes:(id)phonemes delegate:(id)delegate silenceLookback:(int)lookback silenceExpect:(int)expect batchDecode:(BOOL)decode enableAudioDebugging:(BOOL)debugging;
- (id)init:(id)init delegate:(id)delegate silenceLookback:(int)lookback silenceExpect:(int)expect batchDecode:(BOOL)decode enableAudioDebugging:(BOOL)debugging;
- (id)initWithKeywords:(id)keywords delegate:(id)delegate;
- (id)initWithKeywordsWithPhonemes:(id)phonemes delegate:(id)delegate;
- (void)updateWithKeywords:(id)keywords;
- (void)updateWithKeywordsWithPhonemes:(id)phonemes;
- (id)initWithConfig:(id)config keywords:(id)keywords delegate:(id)delegate;
- (id)initWithConfig:(id)config keywordsWithPhonemes:(id)phonemes delegate:(id)delegate;
- (void)start;
- (void)setStreamingMode:(BOOL)mode;
- (void)addAudioSamples:(const void *)samples count:(int)count;
- (void)addAudioSamples:(const void *)samples length:(int)length;
- (void)addAudioSamples:(const void *)samples count:(int)count isFloat:(BOOL)float;
- (void)addAudioSamples:(const void *)samples count:(int)count isFloat:(BOOL)float filePath:(id)path byteCount:(long long)count currentDuration:(double)duration;
- (void)stop;
- (void)_initializeDecoderForKeywordsWithPhonemes:(id)phonemes;
- (void)_acousticCallback:(id)callback rows:(long long)rows cols:(long long)cols;
- (void)_postKeywordSilenceProcessingWithResults:(id)results rows:(long long)rows cols:(long long)cols;
- (BOOL)_isDetectionValidForResult:(void *)result reason:(id *)reason;
- (void)_handleValidResult:(void *)result;
- (id)_handleAudioDebuggingForKeyword:(id)keyword result:(void *)result buffer:(id)buffer;
- (id)_replaceModelPathWithAbsolutePathForTest:(id)test;
- (id)_thresholdsForAllPhrases;
@end

#endif /* VATKeywordSpotter_h */
