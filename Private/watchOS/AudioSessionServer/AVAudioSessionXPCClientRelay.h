//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 263.3.7.0.0
//
#ifndef AVAudioSessionXPCClientRelay_h
#define AVAudioSessionXPCClientRelay_h
@import Foundation;

@class NSXPCConnection;
@protocol {synchronized<as::server::DeferredMessageState, caulk::mach::unfair_lock, caulk::empty_atomic_interface<as::server::DeferredMessageState>>="mMutex"{unfair_lock="m_lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}}"mObject"{DeferredMessageState="mMessagePending"B"mDeferredMessageCount"I"proxy"@"<SessionManagerXPCServerCallbackProtocol>""mToken"{ProcessToken="mValue"I}"mFIFO"{vector<as::server::DeferredMessageState::EventType, std::allocator<as::server::DeferredMessageState::EventType>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<as::server::DeferredMessageState::EventType *, std::allocator<as::server::DeferredMessageState::EventType>>="__value_"^i}}"mDeferredConfigChange"{optional<as::server::ConfigChangeSummary>=""(?="__null_state_"c"__val_"{ConfigChangeSummary="_vptr$Base"^^?"_sessionChanges"{vector<std::unique_ptr<as::server::SessionUpdateSummary>, std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::unique_ptr<as::server::SessionUpdateSummary> *, std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>>="__value_"^v}}"_hardwareSystemChange"{unique_ptr<as::server::ChangedObject, std::default_delete<as::server::ChangedObject>>="__ptr_"{__compressed_pair<as::server::ChangedObject *, std::default_delete<as::server::ChangedObject>>="__value_"^{ChangedObject}}}})"__engaged_"B}"mDeferredDefaultRouteChanges"{vector<as::RouteIdentifier, std::allocator<as::RouteIdentifier>>="__begin_"^{RouteIdentifier}"__end_"^{RouteIdentifier}"__end_cap_"{__compressed_pair<as::RouteIdentifier *, std::allocator<as::RouteIdentifier>>="__value_"^{RouteIdentifier}}}"mDeferredStopForAppStateChange"{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}"mDeferredNeedsStateSync"{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}"mDeferredInterruptions"{vector<std::pair<unsigned int, NSDictionary *>, std::allocator<std::pair<unsigned int, NSDictionary *>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned int, NSDictionary *> *, std::allocator<std::pair<unsigned int, NSDictionary *>>>="__value_"^v}}"mDeferredHasProxies"{vector<std::pair<unsigned int, bool>, std::allocator<std::pair<unsigned int, bool>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned int, bool> *, std::allocator<std::pair<unsigned int, bool>>>="__value_"^v}}"mDeferredControlValueChanges"{vector<as::server::ControlValue, std::allocator<as::server::ControlValue>>="__begin_"^{ControlValue}"__end_"^{ControlValue}"__end_cap_"{__compressed_pair<as::server::ControlValue *, std::allocator<as::server::ControlValue>>="__value_"^{ControlValue}}}}};

@interface AVAudioSessionXPCClientRelay : NSObject {
  /* instance variables */
  struct synchronized<as::server::DeferredMessageState, caulk::mach::unfair_lock, caulk::empty_atomic_interface<as::server::DeferredMessageState>> { struct unfair_lock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } m_lock; } mMutex; struct DeferredMessageState { BOOL mMessagePending; unsigned int mDeferredMessageCount; <SessionManagerXPCServerCallbackProtocol> *proxy; struct ProcessToken { unsigned int mValue; } mToken; struct vector<as::server::DeferredMessageState::EventType, std::allocator<as::server::DeferredMessageState::EventType>> { int *__begin_; int *__end_; struct __compressed_pair<as::server::DeferredMessageState::EventType *, std::allocator<as::server::DeferredMessageState::EventType>> { int *__value_; } __end_cap_; } mFIFO; struct optional<as::server::ConfigChangeSummary> { union { char __null_state_; struct ConfigChangeSummary { undefined * *_vptr$Base; struct vector<std::unique_ptr<as::server::SessionUpdateSummary>, std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>> { void *__begin_; void *__end_; struct __compressed_pair<std::unique_ptr<as::server::SessionUpdateSummary> *, std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>> { void *__value_; } __end_cap_; } _sessionChanges; struct unique_ptr<as::server::ChangedObject, std::default_delete<as::server::ChangedObject>> { struct __compressed_pair<as::server::ChangedObject *, std::default_delete<as::server::ChangedObject>> { struct ChangedObject *__value_; } __ptr_; } _hardwareSystemChange; } __val_; } x0; BOOL __engaged_; } mDeferredConfigChange; struct vector<as::RouteIdentifier, std::allocator<as::RouteIdentifier>> { struct RouteIdentifier *__begin_; struct RouteIdentifier *__end_; struct __compressed_pair<as::RouteIdentifier *, std::allocator<as::RouteIdentifier>> { struct RouteIdentifier *__value_; } __end_cap_; } mDeferredDefaultRouteChanges; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } mDeferredStopForAppStateChange; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } mDeferredNeedsStateSync; struct vector<std::pair<unsigned int, NSDictionary *>, std::allocator<std::pair<unsigned int, NSDictionary *>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned int, NSDictionary *> *, std::allocator<std::pair<unsigned int, NSDictionary *>>> { void *__value_; } __end_cap_; } mDeferredInterruptions; struct vector<std::pair<unsigned int, bool>, std::allocator<std::pair<unsigned int, bool>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned int, bool> *, std::allocator<std::pair<unsigned int, bool>>> { void *__value_; } __end_cap_; } mDeferredHasProxies; struct vector<as::server::ControlValue, std::allocator<as::server::ControlValue>> { struct ControlValue *__begin_; struct ControlValue *__end_; struct __compressed_pair<as::server::ControlValue *, std::allocator<as::server::ControlValue>> { struct ControlValue *__value_; } __end_cap_; } mDeferredControlValueChanges; } mObject; } guarded_impl;
  NSXPCConnection *connection;
  struct ProcessToken { unsigned int mValue; } token;
}

/* instance methods */
- (id)initWithConnection:(id)connection token:(struct ProcessToken { unsigned int x0; })token;
- (void)sendDeferredMessages;
- (void)setBarrierBlock;
- (void)sendServerDefaultRouteChange:(const void *)change;
- (void)sendInterruptionMessageForSession:(unsigned int)session userInfo:(id)info;
- (void)sendSessionStoppedForAppStateChange:(unsigned int)change;
- (void)sendSession:(unsigned int)session hasProxies:(BOOL)proxies;
- (void)sendSessionNeedsStateSync:(unsigned int)sync;
- (void)sendServerConfigurationChange:(const void *)change;
- (void)sendControlValueChanged:(const void *)changed;
@end

#endif /* AVAudioSessionXPCClientRelay_h */
