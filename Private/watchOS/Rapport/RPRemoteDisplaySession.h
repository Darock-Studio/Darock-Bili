//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 524.1.0.0.0
//
#ifndef RPRemoteDisplaySession_h
#define RPRemoteDisplaySession_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"
#include "RPAuthenticatable-Protocol.h"
#include "RPMessageable-Protocol.h"
#include "RPRemoteDisplayDevice.h"
#include "RPRemoteDisplayServer.h"
#include "RPRemoteDisplayXPCClientInterface-Protocol.h"

@class CUBonjourDevice, NSArray, NSData, NSMutableDictionary, NSNumber, NSString, NSXPCConnection;
@protocol OS_dispatch_queue;

@interface RPRemoteDisplaySession : NSObject<NSSecureCoding, RPRemoteDisplayXPCClientInterface, RPAuthenticatable, RPMessageable> {
  /* instance variables */
  BOOL _activateCalled;
  NSMutableDictionary *_eventRegistrations;
  BOOL _invalidateCalled;
  BOOL _invalidateDone;
  NSMutableDictionary *_requestRegistrations;
}

@property (retain, nonatomic) CUBonjourDevice *bonjourDevice;
@property (retain, nonatomic) RPRemoteDisplayDevice *daemonDevice;
@property (readonly, nonatomic) unsigned int internalAuthFlags;
@property (nonatomic) BOOL needsAWDL;
@property (retain, nonatomic) RPRemoteDisplayServer *server;
@property (copy, nonatomic) NSNumber *sessionID;
@property (retain, nonatomic) NSXPCConnection *xpcCnx;
@property (nonatomic) unsigned long long controlFlags;
@property (retain, nonatomic) RPRemoteDisplayDevice *destinationDevice;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (copy, nonatomic) id /* block */ errorHandler;
@property (copy, nonatomic) id /* block */ interruptionHandler;
@property (copy, nonatomic) id /* block */ invalidationHandler;
@property (retain, nonatomic) NSArray *allowedMACAddresses;
@property (copy, nonatomic) NSData *pairingInfo;
@property (retain, nonatomic) NSArray *pairSetupACL;
@property (nonatomic) unsigned int pairSetupFlags;
@property (nonatomic) unsigned int pairVerifyFlags;
@property (copy, nonatomic) NSString *password;
@property (nonatomic) int passwordType;
@property (readonly, nonatomic) int passwordTypeActual;
@property (copy, nonatomic) id /* block */ authCompletionHandler;
@property (copy, nonatomic) id /* block */ showPasswordHandler;
@property (copy, nonatomic) id /* block */ hidePasswordHandler;
@property (copy, nonatomic) id /* block */ promptForPasswordHandler;
@property (retain, nonatomic) NSString *serviceType;

/* class methods */
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)description;
- (void)activateWithCompletion:(id /* block */)completion;
- (void)_activateWithCompletion:(id /* block */)completion reactivate:(BOOL)reactivate;
- (void)_ensureXPCStarted;
- (void)_interrupted;
- (void)invalidate;
- (void)_invalidated;
- (void)tryPassword:(id)password;
- (void)remoteDisplayPromptForPasswordWithFlags:(unsigned int)flags throttleSeconds:(int)seconds;
- (void)remoteDisplayAuthCompleted:(id)completed;
- (void)registerEventID:(id)id options:(id)options handler:(id /* block */)handler;
- (void)deregisterEventID:(id)id;
- (void)sendEventID:(id)id event:(id)event options:(id)options completion:(id /* block */)completion;
- (void)sendEventID:(id)id event:(id)event destinationID:(id)id options:(id)options completion:(id /* block */)completion;
- (void)_sendEventID:(id)id event:(id)event destinationID:(id)id options:(id)options completion:(id /* block */)completion;
- (void)remoteDisplayReceivedEventID:(id)id event:(id)event options:(id)options;
- (void)remoteDisplaySessionError:(id)error;
- (void)registerRequestID:(id)id options:(id)options handler:(id /* block */)handler;
- (void)deregisterRequestID:(id)id;
- (void)sendRequestID:(id)id request:(id)request options:(id)options responseHandler:(id /* block */)handler;
- (void)sendRequestID:(id)id request:(id)request destinationID:(id)id options:(id)options responseHandler:(id /* block */)handler;
- (void)_sendRequestID:(id)id request:(id)request destinationID:(id)id options:(id)options responseHandler:(id /* block */)handler;
- (void)remoteDisplayReceivedRequestID:(id)id request:(id)request options:(id)options responseHandler:(id /* block */)handler;
@end

#endif /* RPRemoteDisplaySession_h */
