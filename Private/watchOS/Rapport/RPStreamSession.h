//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 524.1.0.0.0
//
#ifndef RPStreamSession_h
#define RPStreamSession_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"
#include "RPConnection.h"
#include "RPMessageable-Protocol.h"

@class CUTCPServer, CUWiFiManager, NSData, NSString, NSUUID;
@protocol OS_dispatch_queue, OS_nw_listener, OS_nw_path_evaluator;

@interface RPStreamSession : NSObject<NSSecureCoding> {
  /* instance variables */
  BOOL _invalidateCalled;
  BOOL _invalidateDone;
  NSObject<OS_nw_listener> *_nwListener;
  NSObject<OS_nw_path_evaluator> *_nwPathEvaluator;
  unsigned char _ourCurveSK[32];
  union { struct sockaddr { unsigned char sa_len; unsigned char sa_family; char x[14] sa_data; } sa; struct sockaddr_in { unsigned char sin_len; unsigned char sin_family; unsigned short sin_port; struct in_addr { unsigned int s_addr; } sin_addr; char x[8] sin_zero; } v4; struct sockaddr_in6 { unsigned char sin6_len; unsigned char sin6_family; unsigned short sin6_port; unsigned int sin6_flowinfo; struct in6_addr { union { unsigned char x[16] __u6_addr8; unsigned short x[8] __u6_addr16; unsigned int x[4] __u6_addr32; } __u6_addr; } sin6_addr; unsigned int sin6_scope_id; } v6; } _peerIP;
  int _peerPort;
  BOOL _prepareOnly;
  RPConnection *_rpCnx;
  CUTCPServer *_tcpServer;
  BOOL _trafficRegistrationCalled;
  CUWiFiManager *_wifiManager;
}

@property (copy, nonatomic) NSString *destinationString;
@property (copy, nonatomic) NSUUID *nwClientID;
@property (copy, nonatomic) NSData *pskData;
@property (nonatomic) BOOL serverMode;
@property (copy, nonatomic) id /* block */ streamAcceptHandler;
@property (copy, nonatomic) NSData *streamKey;
@property (nonatomic) int streamSocket;
@property (nonatomic) unsigned long long delegatedProcessUPID;
@property (copy, nonatomic) id /* block */ disconnectHandler;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (copy, nonatomic) id /* block */ flowControlWriteChangedHandler;
@property (readonly, nonatomic) int flowControlWriteState;
@property (copy, nonatomic) id /* block */ invalidationHandler;
@property (retain, nonatomic) NSObject<RPMessageable> *messenger;
@property (copy, nonatomic) id /* block */ receivedEventHandler;
@property (copy, nonatomic) id /* block */ receivedRequestHandler;
@property (copy, nonatomic) id /* block */ connectionReadyHandler;
@property (copy, nonatomic) NSString *serviceType;
@property (copy, nonatomic) id /* block */ statusChangedHandler;
@property (readonly, nonatomic) unsigned long long statusFlags;
@property (nonatomic) unsigned int streamFlags;
@property (copy, nonatomic) NSString *streamID;
@property (nonatomic) int streamType;
@property (nonatomic) int streamQoS;
@property (nonatomic) unsigned int trafficFlags;
@property (copy, nonatomic) NSString *trafficSessionID;

/* class methods */
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)dealloc;
- (id)description;
- (id)descriptionWithLevel:(int)level;
- (void)setStreamQoSOnSocket:(int)socket;
- (void)acceptedByServer;
- (void)activateWithCompletion:(id /* block */)completion;
- (void)activateForServerRequest:(id)request options:(id)options responseHandler:(id /* block */)handler;
- (void)prepareWithCompletion:(id /* block */)completion;
- (void)startServerConnectionWithCompletion:(id /* block */)completion;
- (BOOL)_startServerConnectionAndReturnError:(id *)error;
- (void)invalidate;
- (void)_invalidate;
- (void)_invalidated;
- (void)_clientUDPNWPathStartWithCompletion:(id /* block */)completion;
- (void)_clientUDPNWPathNextWithEndpoint:(id)endpoint nwInterface:(id)interface selfMACData:(id)macdata usb:(BOOL)usb completion:(id /* block */)completion;
- (void)_clientUDPNWPathStartResponse:(id)response options:(id)options localEndpoint:(id)endpoint nwInterface:(id)interface selfIPString:(id)ipstring usb:(BOOL)usb completion:(id /* block */)completion;
- (void)_serverUDPNWPathStartRequest:(id)request options:(id)options responseHandler:(id /* block */)handler;
- (void)_serverUDPNWPathNextWithEndpoint:(id)endpoint nwInterface:(id)interface selfMACData:(id)macdata peerIP:(union { struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } x0; struct sockaddr_in { unsigned char x0; unsigned char x1; unsigned short x2; struct in_addr { unsigned int x0; } x3; char x4[8] } x1; struct sockaddr_in6 { unsigned char x0; unsigned char x1; unsigned short x2; unsigned int x3; struct in6_addr { union { unsigned char x0[16] unsigned short x1[8] unsigned int x2[4] } x0; } x4; unsigned int x5; } x2; })ip peerMACData:(id)macdata usb:(BOOL)usb responseHandler:(id /* block */)handler;
- (void)_clientUDPSocketStartWithCompletion:(id /* block */)completion;
- (void)_clientUDPSocketStartResponse:(id)response options:(id)options completion:(id /* block */)completion;
- (void)_serverUDPSocketStartRequest:(id)request options:(id)options responseHandler:(id /* block */)handler;
- (void)_clientRPConnectionPrepareWithCompletion:(id /* block */)completion;
- (void)_clientRPConnectionPrepareResponse:(id)response options:(id)options completion:(id /* block */)completion;
- (void)_clientRPConnectionStartWithCompletion:(id /* block */)completion;
- (void)_serverRPConnectionStartRequest:(id)request options:(id)options responseHandler:(id /* block */)handler;
- (void)_serverRPConnectionHandleConnectionAccepted:(int)accepted;
- (void)_serverRPConnectionHandleConnectionStarted:(id)started;
- (unsigned int)_getSockAddrInterfaceType:(const void *)type;
- (id)_lowLatencySelfAddressString:(id *)string;
- (void)sendEventID:(id)id event:(id)event options:(id)options completion:(id /* block */)completion;
- (void)sendRequestID:(id)id request:(id)request options:(id)options responseHandler:(id /* block */)handler;
- (void)_updateTrafficRegistration;
- (void)_updateTrafficRegistrationForIP:(const union { struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } x0; struct sockaddr_in { unsigned char x0; unsigned char x1; unsigned short x2; struct in_addr { unsigned int x0; } x3; char x4[8] } x1; struct sockaddr_in6 { unsigned char x0; unsigned char x1; unsigned short x2; unsigned int x3; struct in6_addr { union { unsigned char x0[16] unsigned short x1[8] unsigned int x2[4] } x0; } x4; unsigned int x5; } x2; } *)ip;
- (void)_updateTrafficRegistrationForDestination:(id)destination;
@end

#endif /* RPStreamSession_h */
