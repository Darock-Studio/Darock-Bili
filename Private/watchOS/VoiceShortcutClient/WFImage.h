//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2206.0.5.0.0
//
#ifndef WFImage_h
#define WFImage_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "WFColor.h"
#include "WFImageSymbolConfiguration.h"

@class NSBundle, NSData, NSImage, NSString, NSURL, UIImage;

@interface WFImage : NSObject<NSCopying, NSSecureCoding>

@property (readonly, nonatomic) NSData *PNGRepresentation;
@property (readonly, nonatomic) struct CGImageSource * internalImageSource;
@property (readonly, nonatomic) struct CGImage * internalCGImage;
@property (readonly, nonatomic) long long representationType;
@property (readonly, copy, nonatomic) NSURL *URL;
@property (readonly, copy, nonatomic) NSData *data;
@property (readonly, copy, nonatomic) NSString *name;
@property (readonly, copy, nonatomic) NSBundle *bundle;
@property (readonly, copy, nonatomic) NSString *symbolName;
@property (readonly, nonatomic) WFImageSymbolConfiguration *symbolConfiguration;
@property (readonly, nonatomic) BOOL allowsAnimated;
@property (readonly, nonatomic) BOOL hasValidImage;
@property (copy, nonatomic) WFColor *tintColor;
@property (readonly, nonatomic) struct CGImage * CGImage;
@property (readonly, nonatomic) double scale;
@property (readonly, nonatomic) unsigned int orientation;
@property (readonly, nonatomic) unsigned long long renderingMode;
@property (readonly, nonatomic) unsigned long long displayStyle;
@property (readonly, nonatomic) UIImage *platformImage;
@property (readonly, nonatomic) UIImage *untintedPlatformImage;
@property (readonly, nonatomic) UIImage *UIImage;
@property (readonly, nonatomic) UIImage *untintedUIImage;
@property (readonly, weak, nonatomic) NSImage *NSImage;
@property (readonly, nonatomic) NSImage *untintedNSImage;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } CGImageSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } sizeInPixels;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } sizeInPoints;

/* class methods */
+ (id)glyphNamed:(id)named pointSize:(double)size;
+ (id)glyphNamed:(id)named pointSize:(double)size symbolWeight:(long long)weight scaleFactor:(double)factor;
+ (id)glyphNamed:(id)named pointSize:(double)size symbolSize:(unsigned long long)size;
+ (id)glyphNamed:(id)named pointSize:(double)size inCatalogs:(id)catalogs;
+ (id)glyphNamed:(id)named pointSize:(double)size symbolWeight:(long long)weight scaleFactor:(double)factor inCatalogs:(id)catalogs;
+ (id)glyphNamed:(id)named pointSize:(double)size symbolSize:(unsigned long long)size scaleFactor:(double)factor;
+ (id)glyphNamed:(id)named pointSize:(double)size symbolSize:(unsigned long long)size scaleFactor:(double)factor rightToLeft:(BOOL)left appearanceName:(id)name;
+ (id)glyphNamed:(id)named pointSize:(double)size symbolSize:(unsigned long long)size symbolWeight:(long long)weight scaleFactor:(double)factor rightToLeft:(BOOL)left appearanceName:(id)name inCatalogs:(id)catalogs;
+ (id)systemImageNamed:(id)named configuration:(id)configuration renderingMode:(unsigned long long)mode;
+ (id)applicationIconImageForBundleIdentifier:(id)identifier;
+ (id)applicationIconImageForBundleIdentifier:(id)identifier format:(unsigned long long)format;
+ (id)documentIconImageForFileType:(id)type;
+ (id)applicationIconImageForCalendarDate:(id)date format:(unsigned long long)format;
+ (id)imageWithData:(id)data scale:(double)scale;
+ (id)imageWithData:(id)data;
+ (id)imageWithDeviceScreenScaleImageData:(id)data;
+ (id)imageWithCGImage:(struct CGImage *)cgimage;
+ (id)imageWithContentsOfURL:(id)url;
+ (id)imageWithData:(id)data scale:(double)scale allowAnimated:(BOOL)animated;
+ (id)imageWithCGImage:(struct CGImage *)cgimage scale:(double)scale orientation:(unsigned int)orientation;
+ (id)imageNamed:(id)named inBundle:(id)bundle;
+ (id)imageNamed:(id)named inBundle:(id)bundle scale:(double)scale;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)resizedImageWithSizeInPoints:(struct CGSize { double x0; double x1; })points;
- (id)resizedImageWithSizeInPoints:(struct CGSize { double x0; double x1; })points scale:(double)scale;
- (id)applicationIconImageWithFormat:(unsigned long long)format;
- (struct CGImage *)createNonRotatedCGImageRepresentation;
- (void)drawInContext:(id)context inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)tintedImageWithColor:(id)color;
- (id)initWithRepresentationType:(long long)type;
- (void)dealloc;
- (id)initWithCGImage:(struct CGImage *)cgimage scale:(double)scale orientation:(unsigned int)orientation;
- (id)initWithCGImage:(struct CGImage *)cgimage scale:(double)scale orientation:(unsigned int)orientation renderingMode:(unsigned long long)mode;
- (id)initWithSymbolName:(id)name configuration:(id)configuration renderingMode:(unsigned long long)mode;
- (id)init;
- (id)initWithContentsOfURL:(id)url;
- (id)initWithData:(id)data scale:(double)scale allowAnimated:(BOOL)animated;
- (id)initWithName:(id)name bundle:(id)bundle scale:(double)scale;
- (id)initWithPlatformImage:(id)image;
- (id)initWithPlatformImage:(id)image scale:(double)scale;
- (void)drawInContext:(id)context inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect blendMode:(int)mode alpha:(double)alpha;
- (id)imageByTintingBitmapWithTintColor:(id)color;
- (id)imageWithTintColor:(id)color;
- (id)imageWithRenderingMode:(unsigned long long)mode;
- (id)imageWithDisplayStyle:(unsigned long long)style;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })contentsTransformForDrawingWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
@end

#endif /* WFImage_h */
