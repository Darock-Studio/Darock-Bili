//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef MSPublisher_h
#define MSPublisher_h
@import Foundation;

#include "MSCupidStateMachine.h"
#include "MSMediaStreamDaemon.h"
#include "MSObjectQueue.h"
#include "MSPublishStorageProtocol-Protocol.h"
#include "MSPublishStorageProtocolDelegate-Protocol.h"
#include "MSPublishStreamsProtocol.h"
#include "MSPublishStreamsProtocolDelegate-Protocol.h"
#include "MSPublisher-Protocol.h"

@class BOOL *, NSArray, NSMutableArray, NSMutableDictionary, NSString, NSURL;
@protocol MSPublisherDelegate;

@interface MSPublisher : MSCupidStateMachine<MSPublisher, MSPublishStreamsProtocolDelegate, MSPublishStorageProtocolDelegate> {
  /* instance variables */
  int _state;
  MSObjectQueue *_uploadQueue;
  MSObjectQueue *_derivativesQueue;
  MSObjectQueue *_quarantinedQueue;
  NSArray *_pendingDerivativesQueue;
  NSMutableArray *_requestAuthQueue;
  unsigned long long _sendingQueueCount;
  NSMutableArray *_sendingQueue;
  NSMutableDictionary *_fileHashToAssetMap;
  MSPublishStreamsProtocol *_protocol;
  NSObject<MSPublishStorageProtocol> *_storageProtocol;
  NSMutableArray *_tempFiles;
  NSMutableDictionary *_maxSizeByUTI;
  int _maxErrorCount;
}

@property (nonatomic) MSMediaStreamDaemon *daemon;
@property (retain, nonatomic) NSURL *storageProtocolURL;
@property (nonatomic) long long publishTargetByteCount;
@property (nonatomic) int publishBatchSize;
@property (nonatomic) NSObject<MSPublisherDelegate> *delegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)publisherForPersonID:(id)id;
+ (id)existingPublisherForPersonID:(id)id;
+ (id)_clearInstantiatedPublishersByPersonID;
+ (void)forgetPersonID:(id)id;
+ (void)_setMasterNextActivityDate:(id)date forPersonID:(id)id;
+ (id)nextActivityDate;
+ (id)nextActivityDateForPersonID:(id)id;
+ (id)personIDsWithOutstandingActivities;
+ (void)stopAllActivities;
+ (BOOL)isInRetryState;

/* instance methods */
- (id)initWithPersonID:(id)id baseURL:(id)url;
- (void)deactivate;
- (void)dealloc;
- (void)_updateMasterManifest;
- (BOOL)enqueueAssetCollections:(id)collections outError:(id *)error;
- (BOOL)dequeueAssetCollectionWithGUIDs:(id)guids outError:(id *)error;
- (void)computeHashForAsset:(id)asset;
- (void)_refreshServerSideConfiguredParameters;
- (void)_serverSideConfigurationDidChange:(id)change;
- (void)_registerAsset:(id)asset;
- (void)_registerAllAssetsForWrapper:(id)wrapper;
- (void)_quarantineOrDiscardWrappers:(id)wrappers withError:(id)error;
- (BOOL)_verifyAssetFile:(id)file;
- (id)_collectionWithNoDerivatives:(id)derivatives;
- (id)_checkAssetCollectionFiles:(id)files;
- (id)_checkObjectWrappers:(id)wrappers;
- (void)reenqueueQuarantinedAssetCollections;
- (BOOL)_isAllowedToUpload;
- (void)publish;
- (void)_requestDerivatives;
- (void)_addAssetToFileHashMap:(id)map;
- (void)_removeAssetFromFileHashMap:(id)map;
- (void)_removeAssetsInAssetCollectionWrappersFromAssetMap:(id)map;
- (void)_didFinishUsingAssetCollections:(id)collections;
- (void)submitAssetCollectionsForPublication:(id)publication skipAssetCollections:(id)collections;
- (void)_sendMetadataToStreams;
- (id)_invalidStreamsResponseErrorUnderlyingError:(id)error;
- (void)publishStreamsProtocol:(id)protocol didFinishUploadingMetadataResponse:(id)response error:(id)error;
- (void)publishStreamsProtocol:(id)protocol didReceiveAuthenticationError:(id)error;
- (void)_sendFilesToMMCS;
- (void)publishStorageProtocol:(id)protocol didFinishUploadingAsset:(id)asset error:(id)error;
- (int)publishStorageProtocol:(id)protocol didRequestFDForAsset:(id)asset;
- (void)publishStorageProtocol:(id)protocol didFinishUsingFD:(int)fd forAsset:(id)asset;
- (void)_categorizeError:(id)error setOutIsIgnorable:(BOOL *)ignorable setOutIsCounted:(BOOL *)counted setOutIsFatal:(BOOL *)fatal setOutNeedsBackoff:(BOOL *)backoff setOutIsTemporary:(BOOL *)temporary setOutIsTokenAuth:(BOOL *)auth setOutIsAuthError:(BOOL *)error;
- (void)publishStorageProtocolDidFinishPublishingAllAssets:(id)assets;
- (void)_sendUploadComplete;
- (void)publishStreamsProtocol:(id)protocol didFinishSendingUploadCompleteError:(id)error;
- (int)_stop;
- (id)_abortedError;
- (void)_abort;
- (void)_forget;
- (void)abort;
- (void)stop;
- (BOOL)_isInRetryState;
@end

#endif /* MSPublisher_h */
