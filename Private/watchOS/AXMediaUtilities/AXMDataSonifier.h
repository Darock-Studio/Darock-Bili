//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 127.1.3.0.0
//
#ifndef AXMDataSonifier_h
#define AXMDataSonifier_h
@import Foundation;

#include "AXMAudioDataSource.h"
#include "AXMAudioDataSourceMixer.h"
#include "AXMChartDescriptor.h"
#include "AXMDataSeriesDescriptor.h"
#include "AXMLiveContinuousTone.h"
#include "AXMSynthPatch.h"

@class NSMutableOrderedSet, NSPointerArray, NSTimer;

@interface AXMDataSonifier : NSObject {
  /* instance variables */
  struct OpaqueAudioComponentInstance * _audioUnit;
  double _userDefinedPlaybackDuration;
  BOOL _playing;
  BOOL _paused;
  BOOL _scrubbing;
}

@property (retain, nonatomic) NSTimer *playbackObserverUpdateTimer;
@property (retain, nonatomic) AXMAudioDataSourceMixer *playbackMixerDataSource;
@property (retain, nonatomic) AXMAudioDataSource *playbackChartDataAudioDataSource;
@property (retain, nonatomic) AXMAudioDataSource *playbackTrendlineAudioDataSource;
@property (retain, nonatomic) AXMAudioDataSourceMixer *scrubbingMixerDataSource;
@property (retain, nonatomic) AXMAudioDataSource *scrubbingDiscreteAudioDataSource;
@property (retain, nonatomic) AXMAudioDataSource *scrubbingContinuousAudioDataSource;
@property (retain, nonatomic) AXMAudioDataSource *scrubbingTrendlineAudioDataSource;
@property (retain, nonatomic) AXMAudioDataSourceMixer *liveContinuousMixerDataSource;
@property (retain, nonatomic) AXMAudioDataSource *liveContinuousAudioDataSource;
@property (retain, nonatomic) NSPointerArray *playbackObservers;
@property (readonly, nonatomic) int interpolationMode;
@property (readonly, nonatomic) AXMLiveContinuousTone *continuousScrubbingTone;
@property (readonly, nonatomic) AXMLiveContinuousTone *trendlineScrubbingTone;
@property (readonly, nonatomic) AXMLiveContinuousTone *liveContinuousDataTone;
@property (copy, nonatomic) id /* block */ trendlineFunction;
@property (readonly, nonatomic) void * scrubbingDiscreteDataRenderingContext;
@property (readonly, nonatomic) void * scrubbingPlaybackCallbackRenderingContext;
@property (readonly, nonatomic) void * liveTonePlaybackCallbackRenderingContext;
@property (readonly, nonatomic) unsigned long long playbackSampleCount;
@property (readonly, nonatomic) NSMutableOrderedSet *dataCategories;
@property (nonatomic) double minimumDiscreteToneLength;
@property (nonatomic) double maximumDiscreteToneLength;
@property (nonatomic) double minimumToneVolume;
@property (nonatomic) double maximumToneVolume;
@property (nonatomic) double masterVolume;
@property (readonly, nonatomic) BOOL isPlaying;
@property (readonly, nonatomic) BOOL isPaused;
@property (readonly, nonatomic) BOOL isScrubbing;
@property (readonly, nonatomic) BOOL isEndingScrubbing;
@property (readonly, nonatomic) BOOL isInLiveContinuousToneSession;
@property (readonly, nonatomic) double currentPlaybackPosition;
@property (nonatomic) double minimumPlaybackFrequency;
@property (nonatomic) double maximumPlaybackFrequency;
@property (nonatomic) double playbackDuration;
@property (nonatomic) BOOL usesBinauralPanning;
@property (readonly, nonatomic) int dataMode;
@property (readonly, nonatomic) id /* block */ function;
@property (retain, nonatomic) AXMSynthPatch *patch;
@property (retain, nonatomic) AXMChartDescriptor *currentChartDescriptor;
@property (nonatomic) long long currentSeriesIndex;
@property (readonly, nonatomic) AXMDataSeriesDescriptor *currentSeries;

/* class methods */
+ (id)sharedInstance;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)_initializeAXMAudioDataSources;
- (void)_initializeLiveToneDataSource;
- (void)setMasterVolume:(double)volume fadeDuration:(double)duration;
- (void)play;
- (void)pause;
- (void)stopPlaying;
- (void)addPlaybackObserver:(id)observer;
- (void)removePlaybackObserver:(id)observer;
- (void)setPlaybackPosition:(double)position;
- (void)beginScrubbing;
- (void)endScrubbing;
- (void)stopScrubbing;
- (void)scrubToPlaybackFrame:(unsigned long long)frame;
- (void)renderSonification;
- (void)_renderSeries:(id)series;
- (void)_renderDiscreteAudioForSeries:(id)series;
- (void)_renderContinuousAudioForSeries:(id)series;
- (void)_renderUnivariateFunctionAudio;
- (BOOL)_initializeAudioUnit;
- (BOOL)_uninitializeAudioUnit;
- (BOOL)_initializeAudioComponent;
- (BOOL)_setAudioFormat;
- (BOOL)_setOutputCallback;
- (double)normalizedTimeEncodingValueForValue:(id)value;
- (double)normalizedValueForValue:(double)value min:(double)min max:(double)max;
- (double)valueFromNormalizedValue:(double)value min:(double)min max:(double)max;
- (double)interpolatedPitchValueForNormalizedTimePosition:(double)position inSeries:(id)series;
- (double)timeOffsetForTimeEncodingValue:(id)value;
- (unsigned long long)sampleIndexForTimeOffset:(double)offset;
- (double)frequencyForPitchEncodingValue:(double)value;
- (double)volumeForVolumeEncodingValue:(double)value;
- (double)durationForDurationEncodingValue:(double)value;
- (BOOL)series:(id)series hasContinuousPitchDataForTimePosition:(double)position;
- (void)beginLiveContinuousToneSession;
- (void)endLiveContinuousToneSession;
- (void)setLiveContinuousToneNormalizedFrequency:(double)frequency;
- (void)_peakNormalizeBuffer:(void *)buffer length:(unsigned long long)length level:(double)level;
- (id)_newContinuousToneEnvelope;
- (void)_regenerateTimeEncodingValuesForDataPoints;
@end

#endif /* AXMDataSonifier_h */
