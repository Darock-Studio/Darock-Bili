//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 127.1.3.0.0
//
#ifndef AXShotflowNetwork_h
#define AXShotflowNetwork_h
@import Foundation;

@class NSArray;
@protocol {vector<NSString *, std::allocator<NSString *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<NSString *__strong *, std::allocator<NSString *>>="__value_"^@}}, {vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}}, {vector<int, std::allocator<int>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::allocator<int>>="__value_"^i}}, {vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<espresso_buffer_t> *, std::allocator<std::shared_ptr<espresso_buffer_t>>>="__value_"^v}};

@interface AXShotflowNetwork : NSObject {
  /* instance variables */
  void * _espressoPlan;
  void * _espressoContext;
  struct { void *plan; int network_index; } _espressoNetwork;
  struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<espresso_buffer_t> *, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__value_; } __end_cap_; } _logitsPosOutputs;
  struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<espresso_buffer_t> *, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__value_; } __end_cap_; } _logitsNegOutputs;
  struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<espresso_buffer_t> *, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__value_; } __end_cap_; } _offsetsOutputs;
  struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<espresso_buffer_t> *, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__value_; } __end_cap_; } _rollOutputs;
  struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<espresso_buffer_t> *, std::allocator<std::shared_ptr<espresso_buffer_t>>> { void *__value_; } __end_cap_; } _yawOutputs;
  unsigned long long _currentNetworkWidth;
  unsigned long long _currentNetworkHeight;
  int _maxout_layers;
  int _bins_neg_maxout;
  BOOL _has_pose;
  BOOL _pose_square;
  BOOL _extra_default_boxes;
  int _num_pos_classes;
  struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; struct __compressed_pair<int *, std::allocator<int>> { int *__value_; } __end_cap_; } _important_classes;
  struct vector<NSString *, std::allocator<NSString *>> { __end_ * *__begin_; __end_cap_ * * x0; struct __compressed_pair<NSString *__strong *, std::allocator<NSString *>> { id *__value_; } x1; } _model_labels;
  int _num_ratios;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _ratios;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _default_boxes_sides;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _default_boxes_sides_normalized;
  NSArray *_filterThreshold;
  f]] x[6[20[2] _defaultBoxSizes;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _cell_starts_x;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _cell_starts_y;
  float _input_aspect_ratio;
  BOOL _keep_aspect_ratio;
  BOOL _can_rotate;
  float _input_height;
}

@property (readonly, nonatomic) unsigned long long preferredSmallSide;
@property (nonatomic) float threshold;
@property (nonatomic) int version;
@property (nonatomic) long long modelType;

/* class methods */
+ (id)cpuNetworkWithModelPath:(id)path configuration:(id)configuration version:(int)version modelType:(long long)type;
+ (id)gpuNetworkWithModelPath:(id)path configuration:(id)configuration preferredMetalDeviceID:(int)id version:(int)version modelType:(long long)type;

/* instance methods */
- (id)initWithModelPath:(id)path espressoEngineID:(int)id espressoDeviceID:(int)id configuration:(id)configuration version:(int)version modelType:(long long)type;
- (void)dealloc;
- (int)setInputShape:(unsigned long long)shape height:(unsigned long long)height;
- (void)runNetwork:(struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })network inputIsBGR:(BOOL)bgr;
- (id)processVImage:(struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })vimage inputIsBGR:(BOOL)bgr;
- (id)resizeAndProcessVImage:(struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })vimage inputIsBGR:(BOOL)bgr;
- (id)processCIImage:(id)ciimage;
@end

#endif /* AXShotflowNetwork_h */
