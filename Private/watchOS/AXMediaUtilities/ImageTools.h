//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 127.1.3.0.0
//
#ifndef ImageTools_h
#define ImageTools_h
@import Foundation;

@interface ImageTools : NSObject
/* class methods */
+ (struct __CFString *)guessType:(id)type;
+ (id)getValueForTag:(id)tag inObject:(id)object;
+ (id)getValueForTag:(id)tag inObject:(id)object depth:(int)depth parent:(id)parent;
+ (struct CGImage *)rotateImage:(struct CGImage *)image withAngle:(float)angle andXFlip:(BOOL)xflip andYFlip:(BOOL)yflip;
+ (struct CGImage *)rotateImage:(struct CGImage *)image accordingToEXIFOrientation:(int)exiforientation;
+ (struct CGContext *)createARGBBitmapContextWithImage:(struct CGImage *)image;
+ (struct CGImage *)loadCGImageFromURL:(id)url error:(id *)error;
+ (struct CGImage *)loadCGImageEXIFRotatedFromSource:(struct CGImageSource *)source error:(id *)error;
+ (struct CGImage *)loadCGImageEXIFRotatedFromURL:(id)url error:(id *)error;
+ (struct CGImage *)loadCGImageEXIFRotatedFromData:(id)data error:(id *)error;
+ (void *)loadRawBufferFromData:(id)data width:(unsigned int *)width height:(unsigned int *)height rowBytes:(unsigned int *)bytes error:(id *)error;
+ (void *)loadRawBufferFromURL:(id)url width:(unsigned int *)width height:(unsigned int *)height rowBytes:(unsigned int *)bytes error:(id *)error;
+ (id)numberOfChannelsInImageData:(id)data error:(id *)error;
+ (struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)loadVImageBufferFromData:(id)data isRaw:(BOOL)raw lumaOnly:(BOOL)only error:(id *)error;
+ (struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)loadVImageBufferFromURL:(id)url lumaOnly:(BOOL)only error:(id *)error;
+ (struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)loadVImageBufferEXIFRotatedFromURL:(id)url error:(id *)error;
+ (struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)loadVImageBufferEXIFRotatedFromData:(id)data error:(id *)error;
+ (struct __CVBuffer *)loadCVPixelBufferARGB8FromURL:(id)url error:(id *)error;
+ (struct __CVBuffer *)loadCVPixelBuffer420YpCbCr8FromURL:(id)url error:(id *)error;
+ (id)saveCVPixelBufferPlane8:(int)plane8 from:(struct __CVBuffer *)from withName:(id)name inFolder:(id)folder error:(id *)error;
+ (id)saveCVPixelBufferRGBA8:(struct __CVBuffer *)rgba8 withName:(id)name inFolder:(id)folder error:(id *)error;
+ (id)saveCVPixelBuffer420YpCbCr8:(struct __CVBuffer *)cr8 withName:(id)name inFolder:(id)folder error:(id *)error;
+ (struct CGImage *)newCGImageFromPlanar8VImageBuffer:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)buffer error:(id *)error;
+ (id)saveVImageBufferPlanar8ToJPEGData:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)jpegdata withCompressionQuality:(float)quality error:(id *)error;
+ (id)saveVImageBufferPlanar8ToData:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)data deriveTypeFromFileName:(id)name error:(id *)error;
+ (id)saveVImageBufferPlanar8:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)planar8 withName:(id)name inFolder:(id)folder error:(id *)error;
+ (struct CGImage *)newCGImageFromRGBA8VImageBuffer:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)buffer error:(id *)error;
+ (id)writeImageToData:(struct CGImage *)data type:(struct __CFString *)type error:(id *)error;
+ (id)saveVImageBufferRGBA8ToJPEGData:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)jpegdata withCompressionQuality:(float)quality error:(id *)error;
+ (id)saveVImageBufferRGBA8ToData:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)data deriveTypeFromFileName:(id)name error:(id *)error;
+ (BOOL)writeImage:(struct CGImage *)image toFile:(id)file error:(id *)error;
+ (id)saveVImageBufferRGBA8:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)rgba8 withName:(id)name inFolder:(id)folder error:(id *)error;
+ (id)saveCGImage:(const struct CGImage *)cgimage withName:(id)name inFolder:(id)folder error:(id *)error;
+ (id)saveRawBuffer:(void *)buffer withWidth:(unsigned int)width andHeight:(unsigned int)height andRowBytes:(unsigned int)bytes withName:(id)name inFolder:(id)folder error:(id *)error;
+ (struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })getVImageBufferFromCVPixelBuffer:(struct __CVBuffer *)buffer channel:(int)channel error:(id *)error;
+ (struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })getVImageBufferFromCGImageLuma:(struct CGImage *)luma error:(id *)error;
+ (struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })getVImageBufferFromCGImage:(struct CGImage *)cgimage error:(id *)error;
+ (long long)extractLumaFromBGRA8Buffer:(void *)buffer withWidth:(int)width andWithHeight:(int)height andWithBytesPerRow:(unsigned long long)row toBuffer:(void *)buffer withBytesPerRow:(unsigned long long)row;
+ (long long)create420YCbCr8BufferFromPlanar8Buffer:(void *)buffer withWidth:(int)width andWithHeight:(int)height andWithBytesPerRow:(unsigned long long)row toLumaBuffer:(void *)buffer withBytesPerRowLuma:(unsigned long long)luma andToChromaBuffer:(void *)buffer withBytesPerRowChroma:(unsigned long long)chroma;
+ (long long)create420YCbCr8BufferFromRGB8Buffer:(void *)buffer withWidth:(int)width andWithHeight:(int)height andWithBytesPerRow:(unsigned long long)row andAlphaFirst:(BOOL)first toLumaBuffer:(void *)buffer withBytesPerRowLuma:(unsigned long long)luma andToChromaBuffer:(void *)buffer withBytesPerRowChroma:(unsigned long long)chroma;
+ (long long)createRGB8BufferFrom420Y8PlanarBuffer:(void *)buffer withBytesPerRowY:(unsigned long long)y andFrom420Cb8Buffer:(void *)buffer withBytesPerRowCb:(unsigned long long)cb andFrom420Cr8Buffer:(void *)buffer withBytesPerRowCr:(unsigned long long)cr andWithWidth:(int)width andWithHeight:(int)height andAlphaFirst:(BOOL)first toRGB8Buffer:(void *)buffer withBytesPerRowDst:(unsigned long long)dst;
+ (long long)createRGB8BufferFrom420Y8BiPlanarBuffer:(void *)buffer withBytesPerRowLuma:(unsigned long long)luma andFrom420CbCr8Buffer:(void *)buffer withBytesPerRowChroma:(unsigned long long)chroma andWithWidth:(int)width andWithHeight:(int)height andAlphaFirst:(BOOL)first toRGB8Buffer:(void *)buffer withBytesPerRowDst:(unsigned long long)dst;
@end

#endif /* ImageTools_h */
