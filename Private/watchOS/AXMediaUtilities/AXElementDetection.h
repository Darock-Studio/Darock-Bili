//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 127.1.3.0.0
//
#ifndef AXElementDetection_h
#define AXElementDetection_h
@import Foundation;

@class NSString;

@interface AXElementDetection : NSObject {
  /* instance variables */
  float _area;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } box;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } defaultBox;
@property (nonatomic) float confidence;
@property (nonatomic) int scale;
@property (nonatomic) int mergesCount;
@property (nonatomic) BOOL hasLabel;
@property (nonatomic) int label;
@property (retain, nonatomic) NSString *labelName;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } boxCenter;
@property (readonly, nonatomic) float distanceToDefaultBox;
@property (readonly, nonatomic) float smartDistance;

/* instance methods */
- (id)initWithBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box defaultBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box confidence:(float)confidence scale:(int)scale;
- (id)initWithBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box defaultBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box confidence:(float)confidence scale:(int)scale mergesCount:(int)count;
- (id)initWithBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box defaultBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box confidence:(float)confidence scale:(int)scale hasLabel:(BOOL)label label:(int)label;
- (id)initWithBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box defaultBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box confidence:(float)confidence scale:(int)scale hasLabel:(BOOL)label label:(int)label labelName:(id)name;
- (id)initWithBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box defaultBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box confidence:(float)confidence scale:(int)scale mergesCount:(int)count hasLabel:(BOOL)label label:(int)label;
- (id)initWithBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box defaultBox:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })box confidence:(float)confidence scale:(int)scale mergesCount:(int)count hasLabel:(BOOL)label label:(int)label labelName:(id)name;
- (float)overlap:(id)overlap;
- (float)iOa:(id)oa;
- (BOOL)isOverlappingSmallFace:(id)face withOverlapThreshold:(float)threshold withSizeRatio:(float)ratio;
- (BOOL)isOverlappingLowMergeDet:(id)det withOverlapThreshold:(float)threshold withMergeCountDelta:(int)delta;
- (id)description;
@end

#endif /* AXElementDetection_h */
