//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKBuildingGroup_h
#define VKBuildingGroup_h
@import Foundation;

#include "VKPolygonalItemGroup.h"

@protocol {array<std::vector<std::vector<FeatureRange>>, 16UL>="__elems_"[16{vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>>="__value_"^v}}]}, {optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>>="_hasValue"B"_value"(ValueUnion="data"[184C]"type"{MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>="_vertexAndIndexCounts"{vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>>="__value_"^v}}"_meshes"{vector<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>>="__value_"^v}}"_vertexDataWrite"{DataWrite<ggl::BuildingFlatStroke::DefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I"_storage"^{MeshSetStorage}"_internalStorage"{unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>>="__ptr_"{__compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>>="__value_"^{MeshSetStorage}}}"_storageClient"{shared_ptr<md::MeshSetStorageClient>="__ptr_"^{MeshSetStorageClient}"__cntrl_"^{__shared_weak_count}}})}, {optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>>="_hasValue"B"_value"(ValueUnion="data"[184C]"type"{MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>="_vertexAndIndexCounts"{vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>>="__value_"^v}}"_meshes"{vector<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>>="__value_"^v}}"_vertexDataWrite"{DataWrite<ggl::PolygonBase::CompressedVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I"_storage"^{MeshSetStorage}"_internalStorage"{unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>>="__ptr_"{__compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>>="__value_"^{MeshSetStorage}}}"_storageClient"{shared_ptr<md::MeshSetStorageClient>="__ptr_"^{MeshSetStorageClient}"__cntrl_"^{__shared_weak_count}}})}, {unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>>="__ptr_"{__compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> *, std::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>>="__value_"^v}}, {unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>>="__ptr_"{__compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>>="__value_"^v}}, {unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>>="__ptr_"{__compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>>="__value_"^v}}, {vector<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>>="__value_"^v}}, {vector<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>>="__value_"^v}}, {vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> *, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>="__value_"^v}};

@interface VKBuildingGroup : VKPolygonalItemGroup {
  /* instance variables */
  struct optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>> { BOOL _hasValue; union ValueUnion { unsigned char x[184] data; struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> { struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> { void *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; struct MeshSetStorage *_storage; struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> { struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> { struct MeshSetStorage *__value_; } __ptr_; } _internalStorage; struct shared_ptr<md::MeshSetStorageClient> { struct MeshSetStorageClient *__ptr_; struct __shared_weak_count *__cntrl_; } _storageClient; } type; } _value; } _strokeMeshInfo;
  struct optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>> { BOOL _hasValue; union ValueUnion { unsigned char x[184] data; struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> { struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> { void *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::PolygonBase::CompressedVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; struct MeshSetStorage *_storage; struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> { struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> { struct MeshSetStorage *__value_; } __ptr_; } _internalStorage; struct shared_ptr<md::MeshSetStorageClient> { struct MeshSetStorageClient *__ptr_; struct __shared_weak_count *__cntrl_; } _storageClient; } type; } _value; } _fillMeshInfoForPointyRoofs;
  struct vector<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> { void *__value_; } __end_cap_; } _strokeMeshes;
  struct vector<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> { void *__value_; } __end_cap_; } _fillMeshesForPointyRoofs;
  struct unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> { struct __compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> *, std::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> { void *__value_; } __ptr_; } _extrusionFillMeshVendor;
  struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> { struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> { void *__value_; } __ptr_; } _extrusionStrokeMeshVendor;
  struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> { struct __compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> { void *__value_; } __ptr_; } _pointyRoofFillMeshVendor;
  struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> { struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> { void *__value_; } __ptr_; } _pointyRoofStrokeMeshVendor;
  struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } x[16] __elems_; } _extrusionFillCullingGroups;
  struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } x[16] __elems_; } _extrusionStrokeCullingGroups;
  struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } x[16] __elems_; } _fillCullingGroupsForPointyRoofs;
  struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } x[16] __elems_; } _pointyRoofFillCullingGroups;
  struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } x[16] __elems_; } _pointyRoofStrokeCullingGroups;
  struct vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> *, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> { void *__value_; } __end_cap_; } _styleQueries;
  struct vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> *, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> { void *__value_; } __end_cap_; } _flatRoofStyleQueries;
  struct vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> *, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> { void *__value_; } __end_cap_; } _selectedStyleQueries;
  struct vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> *, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> { void *__value_; } __end_cap_; } _selectedFlatRoofStyleQueries;
}

/* instance methods */
- (id)initWithStyleQuery:(void *)query tileZoom:(float)zoom fixedAroundCentroid:(const void *)centroid contentScale:(float)scale;
- (void *)strokeMeshes;
- (const void *)extrusionFillMeshVendor;
- (const void *)extrusionStrokeMeshVendor;
- (void *)fillMeshesForPointyRoofs;
- (const void *)pointyRoofFillMeshVendor;
- (const void *)pointyRoofStrokeMeshVendor;
- (unsigned char)maxAttributeSetsPerGroup;
- (void *)styleQueriesForPointyRoofs:(BOOL)roofs selected:(BOOL)selected;
- (const void *)commitRangesToExtrusionFillRenderItemBatcher:(void *)batcher forMeshAtIndex:(unsigned long long)index cullingMask:(unsigned int)mask featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })predicate;
- (const void *)commitRangesToExtrusionStrokeRenderItemBatcher:(void *)batcher forMeshAtIndex:(unsigned long long)index cullingMask:(unsigned int)mask featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })predicate;
- (const void *)commitRangesToPointyRoofTopRenderItemBatcher:(void *)batcher forMeshAtIndex:(unsigned long long)index cullingMask:(unsigned int)mask featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })predicate;
- (const void *)commitRangesToPointyRoofFillRenderItemBatcher:(void *)batcher forMeshAtIndex:(unsigned long long)index cullingMask:(unsigned int)mask featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })predicate;
- (const void *)commitRangesToPointyRoofStrokeRenderItemBatcher:(void *)batcher forMeshAtIndex:(unsigned long long)index cullingMask:(unsigned int)mask featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })predicate;
- (void)prepareForBuilding:(void *)building forRoofStyle:(unsigned char)style scaleThreshold:(float)threshold;
- (void)willAddDataWithAccessor:(struct ResourceAccessor { undefined * * x0; } *)accessor;
- (void)didFinishAddingData;
- (void)addBuilding:(void *)building index:(unsigned long long)index ofTotal:(unsigned long long)total accessor:(struct ResourceAccessor { undefined * * x0; } *)accessor triangulator:(void *)triangulator prepareExtrusion:(BOOL)extrusion forRoofStyle:(unsigned char)style scaleThreshold:(float)threshold;
- (void)addExtrusionForBuilding:(void *)building index:(unsigned long long)index ofTotal:(unsigned long long)total;
- (BOOL)canConstructPointyRoofForPolygon:(void *)polygon building:(void *)building buildingModel:(unsigned char)model scaleThreshold:(float)threshold;
- (BOOL)addPointyRoofForBuilding:(void *)building buildingModel:(unsigned char)model scaleThreshold:(float)threshold styleIndex:(float)index;
- (void)updateWithStyleManager:(const void *)manager;
@end

#endif /* VKBuildingGroup_h */
