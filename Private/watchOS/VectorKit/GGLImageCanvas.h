//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef GGLImageCanvas_h
#define GGLImageCanvas_h
@import Foundation;

#include "GGLRenderQueueSource-Protocol.h"
#include "MDRenderTarget-Protocol.h"

@class NSString;
@protocol {array<std::shared_ptr<ggl::RenderBuffer>, 3UL>="__elems_"[3{shared_ptr<ggl::RenderBuffer>="__ptr_"^{RenderBuffer}"__cntrl_"^{__shared_weak_count}}]}, {shared_ptr<ggl::Device>="__ptr_"^{Device}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<ggl::Texture2DAbstract>="__ptr_"^{Texture2DAbstract}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<ggl::Texture>="__ptr_"^{Texture}"__cntrl_"^{__shared_weak_count}}, {unique_ptr<ggl::IOSurfaceTexture, std::default_delete<ggl::IOSurfaceTexture>>="__ptr_"{__compressed_pair<ggl::IOSurfaceTexture *, std::default_delete<ggl::IOSurfaceTexture>>="__value_"^{IOSurfaceTexture}}}, {unique_ptr<ggl::RenderBuffer, std::default_delete<ggl::RenderBuffer>>="__ptr_"{__compressed_pair<ggl::RenderBuffer *, std::default_delete<ggl::RenderBuffer>>="__value_"^{RenderBuffer}}}, {unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>>="__ptr_"{__compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>>="__value_"^{RenderTarget}}}, {unique_ptr<ggl::Renderer, std::default_delete<ggl::Renderer>>="__ptr_"{__compressed_pair<ggl::Renderer *, std::default_delete<ggl::Renderer>>="__value_"^{Renderer}}}, {unique_ptr<md::DebugConsoleManager, std::default_delete<md::DebugConsoleManager>>="__ptr_"{__compressed_pair<md::DebugConsoleManager *, std::default_delete<md::DebugConsoleManager>>="__value_"^{DebugConsoleManager}}}, {unique_ptr<md::YFlipPass, std::default_delete<md::YFlipPass>>="__ptr_"{__compressed_pair<md::YFlipPass *, std::default_delete<md::YFlipPass>>="__value_"^{YFlipPass}}};

@interface GGLImageCanvas : NSObject<MDRenderTarget> {
  /* instance variables */
  struct shared_ptr<ggl::Device> { struct Device *__ptr_; struct __shared_weak_count *__cntrl_; } _device;
  BOOL _canMakeImage;
  BOOL _recreateRenderTarget;
  struct unique_ptr<ggl::IOSurfaceTexture, std::default_delete<ggl::IOSurfaceTexture>> { struct __compressed_pair<ggl::IOSurfaceTexture *, std::default_delete<ggl::IOSurfaceTexture>> { struct IOSurfaceTexture *__value_; } __ptr_; } _flippedSurfaceTexture;
  struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> { struct __compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>> { struct RenderTarget *__value_; } __ptr_; } _flippedRenderTarget;
  struct unique_ptr<md::YFlipPass, std::default_delete<md::YFlipPass>> { struct __compressed_pair<md::YFlipPass *, std::default_delete<md::YFlipPass>> { struct YFlipPass *__value_; } __ptr_; } _yFlipPass;
  struct RenderTargetFormat { int x[4] colorFormats; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _sRGBFormat;
  struct RenderTargetFormat { int x[4] colorFormats; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _resolvedRenderTargetFormat;
  struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> { struct __compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>> { struct RenderTarget *__value_; } __ptr_; } _sRGBRenderTarget;
  struct shared_ptr<ggl::Texture2DAbstract> { struct Texture2DAbstract *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBColorBuffer;
  struct unique_ptr<ggl::RenderBuffer, std::default_delete<ggl::RenderBuffer>> { struct __compressed_pair<ggl::RenderBuffer *, std::default_delete<ggl::RenderBuffer>> { struct RenderBuffer *__value_; } __ptr_; } _depthStencilBuffer;
  struct array<std::shared_ptr<ggl::RenderBuffer>, 3UL> { struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } x[3] __elems_; } _sRGBColorTextures;
  struct shared_ptr<ggl::Texture2DAbstract> { struct Texture2DAbstract *__ptr_; struct __shared_weak_count *__cntrl_; } _linearColorBuffer;
  struct array<std::shared_ptr<ggl::RenderBuffer>, 3UL> { struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } x[3] __elems_; } _linearColorTextures;
  BOOL _useMultisampling;
  struct shared_ptr<ggl::Texture> { struct Texture *__ptr_; struct __shared_weak_count *__cntrl_; } _msaaResolveBuffer;
  unsigned long long _signpostId;
  void * _mdDevice;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _debugConsoleManagerCreationLock;
  struct unique_ptr<md::DebugConsoleManager, std::default_delete<md::DebugConsoleManager>> { struct __compressed_pair<md::DebugConsoleManager *, std::default_delete<md::DebugConsoleManager>> { struct DebugConsoleManager *__value_; } __ptr_; } _debugConsoleManager;
  void * _services;
}

@property (nonatomic) BOOL allowAlpha;
@property (readonly, nonatomic) void * renderTarget;
@property (readonly, nonatomic) void * finalRenderTarget;
@property (readonly, nonatomic) void * linearRenderTarget;
@property (readonly, nonatomic) void * imageTexture;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property (nonatomic) double contentScale;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (weak, nonatomic) NSObject<GGLRenderQueueSource> *renderSource;
@property (readonly, nonatomic) BOOL multiSample;
@property (readonly, nonatomic) BOOL supportsFramebufferFetch;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4] unsigned long long x1; unsigned int x2; int x3; } * format;
@property (readonly, nonatomic) void * renderer;
@property (readonly, nonatomic) BOOL shouldRasterize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } sizeInPixels;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4] unsigned long long x1; unsigned int x2; int x3; } * linearFormat;
@property (readonly, nonatomic) float averageFPS;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void *)finalSurface;
- (void)willDealloc;
- (void *)_internalRenderTarget;
- (id)initWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale useMultisampling:(BOOL)multisampling extraColorFormats:(const void *)formats taskContext:(const void *)context device:(void *)device services:(void *)services signpostId:(unsigned long long)id;
- (void)dealloc;
- (struct shared_ptr<ggl::BitmapDataBase> { struct BitmapDataBase * x0; struct __shared_weak_count * x1; })bitmapData;
- (struct __IOSurface *)flipImage;
- (void)createRenderTarget;
- (void)destroyRenderTarget;
- (BOOL)hasRenderTarget;
- (struct function<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)> { struct __value_func<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })prepareRenderTask:(double)task presentAtTime:(double)time didPresentDelegate:(struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })delegate taskModule:(struct LayoutSceneTaskModule { struct function<ggl::RenderQueue *()> { struct __value_func<ggl::RenderQueue *()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x0; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x1; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x2; })module;
- (void)willDrawView;
- (void)didDrawView;
- (void *)debugConsoleForId:(int)id;
@end

#endif /* GGLImageCanvas_h */
