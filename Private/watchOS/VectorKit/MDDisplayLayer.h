//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef MDDisplayLayer_h
#define MDDisplayLayer_h
@import Foundation;

#include "GGLRenderQueueSource-Protocol.h"
#include "MDRenderTarget-Protocol.h"

@class CALayer, NSHashTable, NSString;
@protocol [3{shared_ptr<ggl::RenderBuffer>="__ptr_"^{RenderBuffer}"__cntrl_"^{__shared_weak_count}}], {_retain_ptr<VKSharedResources *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKSharedResources""_retain"{_retain_objc_arc=}"_release"{_release_objc_arc=}}, {shared_ptr<ggl::RenderBuffer>="__ptr_"^{RenderBuffer}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<ggl::Surface>="__ptr_"^{Surface}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<ggl::Swapchain>="__ptr_"^{Swapchain}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<ggl::Texture2D>="__ptr_"^{Texture2D}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<ggl::Texture2DAbstract>="__ptr_"^{Texture2DAbstract}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<md::TaskContext>="__ptr_"^{TaskContext}"__cntrl_"^{__shared_weak_count}}, {unique_ptr<BlitPass, std::default_delete<BlitPass>>="__ptr_"{__compressed_pair<BlitPass *, std::default_delete<BlitPass>>="__value_"^{BlitPass}}}, {unique_ptr<ggl::RenderBuffer, std::default_delete<ggl::RenderBuffer>>="__ptr_"{__compressed_pair<ggl::RenderBuffer *, std::default_delete<ggl::RenderBuffer>>="__value_"^{RenderBuffer}}}, {unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>>="__ptr_"{__compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>>="__value_"^{RenderTarget}}}, {unique_ptr<md::DebugConsoleManager, std::default_delete<md::DebugConsoleManager>>="__ptr_"{__compressed_pair<md::DebugConsoleManager *, std::default_delete<md::DebugConsoleManager>>="__value_"^{DebugConsoleManager}}};

@interface MDDisplayLayer : NSObject<MDRenderTarget> {
  /* instance variables */
  struct shared_ptr<ggl::Surface> { struct Surface *__ptr_; struct __shared_weak_count *__cntrl_; } _surface;
  struct shared_ptr<ggl::Swapchain> { struct Swapchain *__ptr_; struct __shared_weak_count *__cntrl_; } _swapchain;
  struct shared_ptr<ggl::Texture2D> { struct Texture2D *__ptr_; struct __shared_weak_count *__cntrl_; } _texture;
  struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
  void * _activeRenderQueue;
  struct _retain_ptr<VKSharedResources *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { undefined * *_vptr$_retain_ptr; VKSharedResources *_obj; struct _retain_objc_arc _retain; struct _release_objc_arc _release; } _sharedResources;
  struct RenderTargetFormat { int x[4] colorFormats; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _sRGBFormat;
  void * _device;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _debugConsoleManagerCreationLock;
  struct unique_ptr<md::DebugConsoleManager, std::default_delete<md::DebugConsoleManager>> { struct __compressed_pair<md::DebugConsoleManager *, std::default_delete<md::DebugConsoleManager>> { struct DebugConsoleManager *__value_; } __ptr_; } _debugConsoleManager;
  struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> { struct __compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>> { struct RenderTarget *__value_; } __ptr_; } _sRGBRenderTarget;
  struct unique_ptr<ggl::RenderBuffer, std::default_delete<ggl::RenderBuffer>> { struct __compressed_pair<ggl::RenderBuffer *, std::default_delete<ggl::RenderBuffer>> { struct RenderBuffer *__value_; } __ptr_; } _depthStencil;
  struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBMsaaTexture;
  struct shared_ptr<ggl::Texture2DAbstract> { struct Texture2DAbstract *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBTexture;
  struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBColorTextures[3];
  struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> { struct __compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>> { struct RenderTarget *__value_; } __ptr_; } _blitRenderTarget;
  struct RenderTargetFormat { int x[4] colorFormats; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _blitFormat;
  struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _linearTexture;
  struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _linearColorTextures[3];
  struct unique_ptr<BlitPass, std::default_delete<BlitPass>> { struct __compressed_pair<BlitPass *, std::default_delete<BlitPass>> { struct BlitPass *__value_; } __ptr_; } _blitPass;
  void * _services;
  BOOL _useMultisampling;
  BOOL _requiresMultisampling;
  struct CGContext * _snapshotContext;
  BOOL _readPixels;
  BOOL _allowBlitToDrawable;
  double _contentsScale;
  unsigned long long _signpostId;
  id _enableEnhancedCommandBufferErrorsConfigListener;
  id _enableCommandQueueResetOnErrorConfigListener;
  id _commandQueueResetMaxAttemptsCountConfigListener;
  NSHashTable *_observers;
}

@property (readonly, nonatomic) CALayer *layer;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property (nonatomic) double contentScale;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (weak, nonatomic) NSObject<GGLRenderQueueSource> *renderSource;
@property (readonly, nonatomic) BOOL multiSample;
@property (readonly, nonatomic) BOOL supportsFramebufferFetch;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4] unsigned long long x1; unsigned int x2; int x3; } * format;
@property (readonly, nonatomic) void * renderer;
@property (readonly, nonatomic) BOOL shouldRasterize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } sizeInPixels;
@property (readonly, nonatomic) void * finalRenderTarget;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4] unsigned long long x1; unsigned int x2; int x3; } * linearFormat;
@property (readonly, nonatomic) void * linearRenderTarget;
@property (readonly, nonatomic) float averageFPS;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithContentScale:(double)scale useMultisampling:(BOOL)multisampling extraColorFormats:(const void *)formats shouldRasterize:(BOOL)rasterize allowBlitToDrawable:(BOOL)drawable taskContext:(const void *)context device:(void *)device sharedResources:(id)resources services:(void *)services signpostId:(unsigned long long)id;
- (void)_notifyObserversSizeChanged:(struct CGSize { double x0; double x1; })changed;
- (void)addSizeObserver:(id)observer;
- (void)removeSizeObserver:(id)observer;
- (void)dealloc;
- (void)prepareTexture:(const void *)texture;
- (void)_prepareTexture:(const void *)texture isDrawable:(BOOL)drawable;
- (void)prepareTargetsForPlatormsWithFramebufferFetch:(const void *)fetch;
- (void)prepareTargetsForPlatormsWithoutFramebufferFetch:(const void *)fetch isDrawable:(BOOL)drawable;
- (BOOL)isDelayedRenderQueueConsumptionSupported;
- (void)willUpdateFrameTexture;
- (void)didUpdateFrameTexture;
- (void)willPresent;
- (void)enablePerformanceHUD:(id)hud;
- (void)disablePerformanceHUD:(id)hud;
- (void)expandedPerformanceHUD:(id)hud;
- (void)setNeedsDisplayOnBoundsChange:(BOOL)change;
- (void)setOpaque:(BOOL)opaque;
- (void)setContentsGravity:(id)gravity;
- (void)setBackgroundColor:(struct CGColor *)color;
- (struct function<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)> { struct __value_func<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })snapshotTask:(struct shared_ptr<ggl::Texture2D> { struct Texture2D * x0; struct __shared_weak_count * x1; })task timestamp:(double)timestamp taskModule:(struct LayoutSceneTaskModule { struct function<ggl::RenderQueue *()> { struct __value_func<ggl::RenderQueue *()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x0; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x1; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x2; })module semaphore:(id)semaphore;
- (void)drawInContext:(struct CGContext *)context taskModule:(struct LayoutSceneTaskModule { struct function<ggl::RenderQueue *()> { struct __value_func<ggl::RenderQueue *()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x0; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x1; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x2; })module;
- (void)_didReadPixels:(void *)pixels;
- (struct shared_ptr<ggl::BitmapDataBase> { struct BitmapDataBase * x0; struct __shared_weak_count * x1; })bitmapData;
- (void)didReceiveMemoryWarning;
- (void)didEnterBackground;
- (BOOL)insertDisplayLayer:(id)layer;
- (void)createRenderTarget;
- (void)destroyRenderTarget;
- (BOOL)hasRenderTarget;
- (struct function<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)> { struct __value_func<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })prepareRenderTask:(double)task presentAtTime:(double)time didPresentDelegate:(struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })delegate taskModule:(struct LayoutSceneTaskModule { struct function<ggl::RenderQueue *()> { struct __value_func<ggl::RenderQueue *()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x0; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x1; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24] } x0; void * x1; } x0; } x2; })module;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toLayer:(id)layer;
- (void *)debugConsoleForId:(int)id;
- (struct __IOSurface *)flipImage;
@end

#endif /* MDDisplayLayer_h */
