//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKVenueGroup_h
#define VKVenueGroup_h
@import Foundation;

#include "VKPolygonGroup.h"

@protocol {optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>>="_hasValue"B"_value"(ValueUnion="data"[184C]"type"{MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>="_vertexAndIndexCounts"{vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>>="__value_"^v}}"_meshes"{vector<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>>="__value_"^v}}"_vertexDataWrite"{DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I"_storage"^{MeshSetStorage}"_internalStorage"{unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>>="__ptr_"{__compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>>="__value_"^{MeshSetStorage}}}"_storageClient"{shared_ptr<md::MeshSetStorageClient>="__ptr_"^{MeshSetStorageClient}"__cntrl_"^{__shared_weak_count}}})}, {optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>>="_hasValue"B"_value"(ValueUnion="data"[184C]"type"{MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>="_vertexAndIndexCounts"{vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>>="__value_"^v}}"_meshes"{vector<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>>="__value_"^v}}"_vertexDataWrite"{DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I"_storage"^{MeshSetStorage}"_internalStorage"{unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>>="__ptr_"{__compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>>="__value_"^{MeshSetStorage}}}"_storageClient"{shared_ptr<md::MeshSetStorageClient>="__ptr_"^{MeshSetStorageClient}"__cntrl_"^{__shared_weak_count}}})}, {optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>>="_hasValue"B"_value"(ValueUnion="data"[184C]"type"{MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>="_vertexAndIndexCounts"{vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>>="__value_"^v}}"_meshes"{vector<std::shared_ptr<ggl::VenueWall::EndCapMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>>="__value_"^v}}"_vertexDataWrite"{DataWrite<ggl::VenueWall::EndCapVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I"_storage"^{MeshSetStorage}"_internalStorage"{unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>>="__ptr_"{__compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>>="__value_"^{MeshSetStorage}}}"_storageClient"{shared_ptr<md::MeshSetStorageClient>="__ptr_"^{MeshSetStorageClient}"__cntrl_"^{__shared_weak_count}}})}, {optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>>="_hasValue"B"_value"(ValueUnion="data"[184C]"type"{MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>="_vertexAndIndexCounts"{vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>>="__value_"^v}}"_meshes"{vector<std::shared_ptr<ggl::VenueWall::MeshMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::VenueWall::MeshMesh> *, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>>="__value_"^v}}"_vertexDataWrite"{DataWrite<ggl::VenueWall::DefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I"_storage"^{MeshSetStorage}"_internalStorage"{unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>>="__ptr_"{__compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>>="__value_"^{MeshSetStorage}}}"_storageClient"{shared_ptr<md::MeshSetStorageClient>="__ptr_"^{MeshSetStorageClient}"__cntrl_"^{__shared_weak_count}}})}, {shared_ptr<ggl::Texture2D>="__ptr_"^{Texture2D}"__cntrl_"^{__shared_weak_count}}, {unordered_map<std::pair<const void *, unsigned long>, std::vector<md::Edge>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>, std::allocator<std::pair<const std::pair<const void *, unsigned long>, std::vector<md::Edge>>>>="__table_"{__hash_table<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::__unordered_map_hasher<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>>, std::__unordered_map_equal<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::equal_to<std::pair<const void *, unsigned long>>, std::hash<md::SectionKey>>, std::allocator<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::equal_to<std::pair<const void *, unsigned long>>, std::hash<md::SectionKey>>>="__value_"f}}}, {vector<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>>="__value_"^v}}, {vector<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>>="__value_"^v}}, {vector<std::shared_ptr<ggl::VenueWall::EndCapMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>>="__value_"^v}}, {vector<std::shared_ptr<ggl::VenueWall::MeshMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::VenueWall::MeshMesh> *, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>>="__value_"^v}};

@interface VKVenueGroup : VKPolygonGroup {
  /* instance variables */
  struct optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>> { BOOL _hasValue; union ValueUnion { unsigned char x[184] data; struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> { struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::shared_ptr<ggl::VenueWall::MeshMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::VenueWall::MeshMesh> *, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>> { void *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::VenueWall::DefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; struct MeshSetStorage *_storage; struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> { struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> { struct MeshSetStorage *__value_; } __ptr_; } _internalStorage; struct shared_ptr<md::MeshSetStorageClient> { struct MeshSetStorageClient *__ptr_; struct __shared_weak_count *__cntrl_; } _storageClient; } type; } _value; } _venueWallMeshInfo;
  struct optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>> { BOOL _hasValue; union ValueUnion { unsigned char x[184] data; struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> { struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::shared_ptr<ggl::VenueWall::EndCapMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>> { void *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::VenueWall::EndCapVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; struct MeshSetStorage *_storage; struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> { struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> { struct MeshSetStorage *__value_; } __ptr_; } _internalStorage; struct shared_ptr<md::MeshSetStorageClient> { struct MeshSetStorageClient *__ptr_; struct __shared_weak_count *__cntrl_; } _storageClient; } type; } _value; } _venueWallEndCapMeshInfo;
  struct optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>> { BOOL _hasValue; union ValueUnion { unsigned char x[184] data; struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> { struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> { void *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; struct MeshSetStorage *_storage; struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> { struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> { struct MeshSetStorage *__value_; } __ptr_; } _internalStorage; struct shared_ptr<md::MeshSetStorageClient> { struct MeshSetStorageClient *__ptr_; struct __shared_weak_count *__cntrl_; } _storageClient; } type; } _value; } _venueWallHorizontalStrokeMeshInfo;
  struct optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>> { BOOL _hasValue; union ValueUnion { unsigned char x[184] data; struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> { struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> { void *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; struct MeshSetStorage *_storage; struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> { struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> { struct MeshSetStorage *__value_; } __ptr_; } _internalStorage; struct shared_ptr<md::MeshSetStorageClient> { struct MeshSetStorageClient *__ptr_; struct __shared_weak_count *__cntrl_; } _storageClient; } type; } _value; } _venueWallVerticalStrokeMeshInfo;
  struct unordered_map<std::pair<const void *, unsigned long>, std::vector<md::Edge>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>, std::allocator<std::pair<const std::pair<const void *, unsigned long>, std::vector<md::Edge>>>> { struct __hash_table<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::__unordered_map_hasher<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>>, std::__unordered_map_equal<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::equal_to<std::pair<const void *, unsigned long>>, std::hash<md::SectionKey>>, std::allocator<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::equal_to<std::pair<const void *, unsigned long>>, std::hash<md::SectionKey>>> { float __value_; } __p3_; } __table_; } _venueWalls;
}

@property (readonly, nonatomic) int layer;
@property (readonly, nonatomic) unsigned long long buildingId;
@property (readonly, nonatomic) float maximumSectionLength;
@property (readonly, nonatomic) void * wallTexture;
@property (readonly, nonatomic) const void * venueWallMeshes;
@property (readonly, nonatomic) const void * venueWallEndMeshes;
@property (readonly, nonatomic) const void * venueWallHorizontalStrokeMeshes;
@property (readonly, nonatomic) const void * venueWallVerticalStrokeMeshes;

/* instance methods */
- (id)initWithStyleQuery:(void *)query tileZoom:(float)zoom layer:(int)layer buildingId:(unsigned long long)id contentScale:(float)scale storage:(struct shared_ptr<md::MeshSetStorage> { struct MeshSetStorage * x0; struct __shared_weak_count * x1; })storage;
- (id)initWithStyleQuery:(void *)query tileZoom:(float)zoom layer:(int)layer buildingId:(unsigned long long)id contentScale:(float)scale;
- (const void *)generateEdgeListForPolygonSection:(const void *)section key:(const void *)key;
- (unsigned long long)verticalStrokeCountForSection:(const void *)section styles:(const void *)styles edges:(const void *)edges;
- (struct StrokeBufferSizing { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })bufferSizingForStrokesOnSection:(const void *)section styles:(const void *)styles edges:(const void *)edges;
- (void)prepareToGenerateWallsForSection:(const void *)section styles:(void *)styles edges:(const void *)edges;
- (void)prepareToGenerateWallStrokesForSection:(const void *)section styles:(const void *)styles edges:(const void *)edges;
- (void)prepareToStrokeSection:(const void *)section key:(const void *)key styles:(void *)styles paddedCount:(unsigned int)count;
- (void)willAddDataWithAccessor:(struct ResourceAccessor { undefined * * x0; } *)accessor;
- (void)didFinishAddingData;
- (void)addWallsForSection:(const void *)section edges:(const void *)edges attributes:(const void *)attributes styles:(void *)styles cullingMask:(unsigned int)mask accessor:(struct ResourceAccessor { undefined * * x0; } *)accessor;
- (void)addWallStrokesForSection:(const void *)section edges:(const void *)edges attributes:(const void *)attributes styles:(void *)styles cullingMask:(unsigned int)mask accessor:(struct ResourceAccessor { undefined * * x0; } *)accessor;
- (void)addStrokeForSection:(const void *)section paddedCount:(unsigned int)count key:(struct pair<const void *, unsigned long> { void * x0; unsigned long long x1; })key attributes:(const void *)attributes styles:(void *)styles cullingMask:(unsigned int)mask accessor:(struct ResourceAccessor { undefined * * x0; } *)accessor;
- (void)updateTextures:(unsigned char)textures textureManager:(void *)manager;
@end

#endif /* VKVenueGroup_h */
