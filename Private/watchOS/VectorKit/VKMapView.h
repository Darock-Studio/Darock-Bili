//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKMapView_h
#define VKMapView_h
@import Foundation;

#include "CALayer.h"
#include "MDARController.h"
#include "VKClassicGlobeCanvas.h"
#include "VKDaVinciCameraController.h"
#include "VKLabelMarker.h"
#include "VKMapCameraController.h"
#include "VKMapCanvas.h"
#include "VKMapViewCameraDelegate-Protocol.h"
#include "VKMetrics.h"
#include "VKNavCameraController.h"
#include "VKNavContext.h"
#include "VKNotificationObserver.h"
#include "VKPolylineOverlay.h"
#include "VKPuckAnimator.h"
#include "VKRouteContext.h"
#include "VKSceneConfiguration.h"
#include "VKTimedAnimation.h"

@class CADisplay, GEOMapRegion, GEOPOICategoryFilter, NSArray, NSMutableArray, NSString;
@protocol VKLabelSelectionFilter, VKMapViewDelegate, {_retain_ptr<NSSet<NSNumber *> *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"NSSet""_retain"{_retain_objc_arc=}"_release"{_release_objc_arc=}}, {_retain_ptr<VKARWalkingCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKARWalkingCameraController""_retain"{_retain_objc_arc=}"_release"{_release_objc_arc=}}, {_retain_ptr<VKCamera *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKCamera""_retain"{_retain_objc_arc=}"_release"{_release_objc_arc=}}, {_retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKManifestTileGroupObserverProxy""_retain"{_retain_objc_arc=}"_release"{_release_objc_arc=}}, {_retain_ptr<VKStateCaptureHandler *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKStateCaptureHandler""_retain"{_retain_objc_arc=}"_release"{_release_objc_arc=}}, {optional<VKMapType>="_hasValue"B"_value"(ValueUnion="data"[4C]"type"i)}, {optional<geo::Coordinate3D<geo::Radians, double>>=""(?="__null_state_"c"__val_"{Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}})"__engaged_"B}, {optional<geo::Unit<geo::RadianUnitDescription, double>>=""(?="__null_state_"c"__val_"{Unit<geo::RadianUnitDescription, double>="_value"d})"__engaged_"B}, {unique_ptr<md::DisplayOptions, std::default_delete<md::DisplayOptions>>="__ptr_"{__compressed_pair<md::DisplayOptions *, std::default_delete<md::DisplayOptions>>="__value_"^{DisplayOptions}}}, {unique_ptr<md::MapEngine, md::MapEngineDeleter>="__ptr_"{__compressed_pair<md::MapEngine *, md::MapEngineDeleter>="__value_"^{MapEngine}}};

@interface VKMapView : CALayer {
  /* instance variables */
  VKMapCanvas *_canvas;
  VKClassicGlobeCanvas *_globe;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _mapDelegateMutex;
  BOOL _loaderOpen;
  NSString *_tileLoaderClientID;
  unsigned char _emphasis;
  VKTimedAnimation *_edgeInsetAnimation;
  struct VKEdgeInsets { float top; float left; float bottom; float right; } _animatingToEdgeInsets;
  BOOL _isChangingMapType;
  BOOL _isChangingCenterPointWithoutAnimating;
  double _verticalYaw;
  unsigned char _usage;
  VKNotificationObserver *_notificationObserver;
  BOOL _isInBackground;
  VKMapCameraController *_mapCameraController;
  VKDaVinciCameraController *_davinciMapCameraController;
  VKNavCameraController *_navigationCameraController;
  struct _retain_ptr<VKARWalkingCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { undefined * *_vptr$_retain_ptr; VKARWalkingCameraController *_obj; struct _retain_objc_arc _retain; struct _release_objc_arc _release; } _arWalkingCameraController;
  VKNavContext *_navContext;
  struct optional<geo::Coordinate3D<geo::Radians, double>> { union { char __null_state_; struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } __val_; } x0; BOOL __engaged_; } _lastAnimatedUserCoordinate;
  struct optional<geo::Unit<geo::RadianUnitDescription, double>> { union { char __null_state_; struct Unit<geo::RadianUnitDescription, double> { double _value; } __val_; } x0; BOOL __engaged_; } _lastAnimatedCourse;
  BOOL _didFinishSnapshotting;
  MDARController *_arController;
  struct _retain_ptr<VKStateCaptureHandler *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { undefined * *_vptr$_retain_ptr; VKStateCaptureHandler *_obj; struct _retain_objc_arc _retain; struct _release_objc_arc _release; } _stateCaptureHandler;
  struct _retain_ptr<VKCamera *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { undefined * *_vptr$_retain_ptr; VKCamera *_obj; struct _retain_objc_arc _retain; struct _release_objc_arc _release; } _vkCamera;
  VKRouteContext *_routeContext;
  struct _retain_ptr<NSSet<NSNumber *> *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { undefined * *_vptr$_retain_ptr; NSSet *_obj; struct _retain_objc_arc _retain; struct _release_objc_arc _release; } _selectedBuildingFeatureIds;
  struct unique_ptr<md::DisplayOptions, std::default_delete<md::DisplayOptions>> { struct __compressed_pair<md::DisplayOptions *, std::default_delete<md::DisplayOptions>> { struct DisplayOptions *__value_; } __ptr_; } _displayOptions;
  unsigned char _thermalLevel;
  int _thermalNotificationToken;
  unsigned long long _thermalPressureLevel;
  struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { undefined * *_vptr$_retain_ptr; VKManifestTileGroupObserverProxy *_obj; struct _retain_objc_arc _retain; struct _release_objc_arc _release; } _manifestTileGroupObserverProxy;
  long long _lastTerrainMode;
  BOOL _lastEnableGlobe;
  BOOL _lastEnableRoundedBuildings;
  BOOL _lastEnableColorizedBuildings;
  BOOL _lastEnableBuildingHeights;
  BOOL _lastEnableAdvancedLighting;
  BOOL _lastEnableAdvancedWater;
  NSMutableArray *_mapsFeatureListeners;
  BOOL _displayStyleOverrideEnabled;
}

@property (readonly, nonatomic) VKMapCanvas *mapCanvas;
@property (readonly, nonatomic) const void * mapEngine;
@property (nonatomic) BOOL shouldLoadFallbackTiles;
@property (nonatomic) BOOL shouldLoadMapMargin;
@property (weak, nonatomic) NSObject<VKMapViewDelegate> *mapDelegate;
@property (weak, nonatomic) NSObject<VKMapViewCameraDelegate> *cameraDelegate;
@property (weak, nonatomic) NSObject<VKLabelSelectionFilter> *labelSelectionFilter;
@property (nonatomic) BOOL staysCenteredDuringPinch;
@property (nonatomic) BOOL staysCenteredDuringRotation;
@property (retain, nonatomic) CADisplay *hostDisplay;
@property (nonatomic) BOOL isPitchable;
@property (readonly, nonatomic) BOOL pitched;
@property (readonly, nonatomic) BOOL fullyPitched;
@property (readonly, nonatomic) double minPitch;
@property (readonly, nonatomic) double maxPitch;
@property (readonly, nonatomic) BOOL canEnter3DMode;
@property (readonly, nonatomic) BOOL supportsGPUFrameCaptureToDestination;
@property (readonly, nonatomic) BOOL showingFlyover;
@property (readonly, nonatomic) BOOL canShowFlyover;
@property (nonatomic) BOOL trafficEnabled;
@property (nonatomic) BOOL trafficIncidentsEnabled;
@property (readonly, nonatomic) BOOL hasTraffic;
@property (nonatomic) BOOL compressedBuildingsEnabled;
@property (nonatomic) long long displayRate;
@property (nonatomic) long long navigationDisplayRate;
@property (nonatomic) BOOL localizeLabels;
@property (nonatomic) long long labelScaleFactor;
@property (readonly, nonatomic) int flyoverMode;
@property (nonatomic) int mapType;
@property (nonatomic) struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; } mapDisplayStyle;
@property (nonatomic) unsigned long long navCameraMode;
@property (nonatomic) float styleZOffsetScale;
@property (nonatomic) long long targetDisplay;
@property (nonatomic) struct { BOOL x0; } vehicleState;
@property (nonatomic) long long applicationUILayout;
@property (nonatomic) unsigned char mapKitUsage;
@property (readonly, nonatomic) unsigned char mapsUsage;
@property (nonatomic) unsigned char mapKitClientMode;
@property (readonly, nonatomic) VKMetrics *metrics;
@property (nonatomic) BOOL offlineRegionSelector;
@property (nonatomic) BOOL labelMarkerSelectionEnabled;
@property (nonatomic) long long shieldSize;
@property (nonatomic) long long navigationShieldSize;
@property (nonatomic) long long shieldIdiom;
@property (nonatomic) BOOL showsRoadLabels;
@property (nonatomic) BOOL showsRoadShields;
@property (nonatomic) BOOL showsPointLabels;
@property (nonatomic) BOOL showsPointsOfInterest;
@property (nonatomic) BOOL showsBuildings;
@property (nonatomic) BOOL showsVenues;
@property (nonatomic) BOOL showsHiking;
@property (nonatomic) BOOL showsHillshade;
@property (nonatomic) BOOL showsLiveEVData;
@property (nonatomic) long long terrainMode;
@property (nonatomic) BOOL enableGlobe;
@property (nonatomic) BOOL enableRoundedBuildings;
@property (nonatomic) BOOL enableColorizedBuildings;
@property (nonatomic) BOOL enableBuildingHeights;
@property (nonatomic) BOOL enableAdvancedLighting;
@property (nonatomic) BOOL enableAdvancedWater;
@property (nonatomic) BOOL renderOverlayPolygons;
@property (nonatomic) BOOL renderInverseFills;
@property (readonly, nonatomic) BOOL isShowingCuratedElevatedGround;
@property (retain, nonatomic) GEOPOICategoryFilter *pointsOfInterestFilter;
@property (readonly, nonatomic) BOOL isCameraInHikingBoundary;
@property (readonly, nonatomic) BOOL isCameraInHikingBufferRegion;
@property (readonly, nonatomic) VKPuckAnimator *userLocationAnimator;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } edgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } fullyOccludedEdgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } labelEdgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } labelEdgeWidths;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (readonly, nonatomic) double yaw;
@property (readonly, nonatomic) double presentationYaw;
@property (readonly, nonatomic) double pitch;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) struct { double x0; double x1; double x2; } centerCoordinate;
@property (nonatomic) BOOL gesturing;
@property (nonatomic) BOOL iconsShouldAlignToPixels;
@property (readonly, nonatomic) BOOL fullyDrawn;
@property (readonly, nonatomic) unsigned long long sceneState;
@property (nonatomic) BOOL trackingCameraShouldHandleGestures;
@property (nonatomic) double trackingZoomScale;
@property (nonatomic) struct { BOOL x0; double x1; BOOL x2; BOOL x3; } annotationTrackingBehavior;
@property (readonly, nonatomic) BOOL animatingToTrackAnnotation;
@property (readonly, nonatomic) BOOL canShowFlyoverAnimation;
@property (readonly, nonatomic) VKLabelMarker *selectedLabelMarker;
@property (nonatomic) BOOL isMKRenderingSelectionBalloon;
@property (readonly, nonatomic) NSArray *labelMarkers;
@property (retain, nonatomic) VKPolylineOverlay *focusedLabelsPolyline;
@property (nonatomic) BOOL rendersInBackground;
@property (nonatomic) BOOL debugLayoutContinuously;
@property (readonly, nonatomic) BOOL enableDebugLabelHighlighting;
@property (readonly, nonatomic) NSArray *visibleTileSets;
@property (nonatomic) unsigned char applicationState;
@property (nonatomic) unsigned char displayedSearchResultsType;
@property (readonly, nonatomic) VKSceneConfiguration *sceneConfiguration;

/* class methods */
+ (BOOL)_elevatedGroundIsAvailable;
+ (BOOL)_elevatedGroundIsEnabled;
+ (BOOL)_globeIsAvailable;
+ (BOOL)_globeIsEnabled;
+ (void)updateUserLocationAnnotationStateForNavigationPuck:(id)puck isPuckEnabled:(BOOL)enabled synchronizedState:(void *)state;

/* instance methods */
- (void)enterARModeAtCoordinate:(struct { double x0; double x1; })coordinate;
- (void)exitARMode;
- (void)map:(id)map didEnterARMode:(BOOL)armode;
- (void)arController:(id)controller didEncounterError:(id)error;
- (void)arController:(id)controller arSessionWasInterrupted:(unsigned long long)interrupted;
- (void)arControllerSessionInterruptionEnded:(id)ended;
- (void)arController:(id)controller didChangeTrackingState:(unsigned long long)state reason:(unsigned long long)reason;
- (void)setARInterfaceOrientation:(long long)orientation;
- (long long)getCurrentSetARInterfaceOrientation;
- (id)roadLabelTilesInScene;
- (void)_setThermalPressureLevel:(unsigned long long)level;
- (void)_updateCameraThermalOptions;
- (void)_updateThermalPressureLevel;
- (void)_setupThermalMonitor;
- (void)_shutdownThermalMonitor;
- (id)iconForStyleAttributes:(id)attributes contentScale:(double)scale size:(long long)size transparent:(BOOL)transparent;
- (id)currentCanvas;
- (void)debugHighlightFeatureMarker:(const void *)marker;
- (void)performStylesheetDidChange;
- (long long)currentMapMode;
- (void)populateDebugNode:(void *)node withOptions:(const void *)options;
- (id)_mapDelegateQueue;
- (void)_postDelegateCallbackBlock:(id /* block */)block;
- (id)buildingMarkerAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)markerAtPoint:(struct CGPoint { double x0; double x1; })point;
- (struct unordered_map<unsigned int, unsigned long long, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long long>>> { struct __hash_table<std::__hash_value_type<unsigned int, unsigned long long>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, unsigned long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned long long>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned long long>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float x0; } x3; } x0; })clientStyleAttributes;
- (float)currentZoomLevel;
- (void)setApplicationState:(unsigned char)state displayedSearchResultsType:(unsigned char)type;
- (void *)_labelSettings;
- (BOOL)isLabelMarkerSelectionEnabled;
- (BOOL)isOfflineRegionSelector;
- (void)openLoaderConnection;
- (void)closeLoaderConnection;
- (void)_closeLoaderConnection:(BOOL)connection;
- (id)secondaryCanvas;
- (void)_forceLayoutForSuspensionSnapShot;
- (void)forceFrame;
- (void)forceLayout;
- (void)forceCameraUpdateForFrameResize;
- (id)attributionsForCurrentRegion;
- (BOOL)stylesheetIsDevResource;
- (void)reloadStylesheet;
- (long long)carDisplayConfig;
- (void)setCarDisplayConfig:(long long)config animated:(BOOL)animated;
- (long long)carDisplayType;
- (unsigned char)emphasis;
- (void)setEmphasis:(unsigned char)emphasis animated:(BOOL)animated;
- (void)_updateOnlyShowRoadClosures;
- (void)_updateBuildingCompressionSetting;
- (BOOL)_createDisplayLayer;
- (void)willEnterForeground;
- (void)didEnterBackground;
- (void)didFinishSnapshotting;
- (void)flushTileLoads;
- (BOOL)canRotate;
- (void)setNeedsLayout;
- (void)clearScene;
- (void)setHidden:(BOOL)hidden;
- (void)didReceiveMemoryWarning;
- (void)updateLightingLogic;
- (void)didReceiveThermalStateChanged;
- (void)didReceivePowerStateChanged;
- (void)didReceiveFlushTileCaches;
- (void)didReceiveLocalChanged;
- (BOOL)isEffectivelyHidden;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)debugLabelString:(BOOL)string;
- (id)detailedDescription;
- (id)detailedDescriptionDictionaryRepresentation;
- (void)enableMapDisplayStyleDebugOverride:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })override;
- (void)disableMapDisplayStyleDebugOverride;
- (BOOL)isGesturing;
- (BOOL)canZoomInForTileSize:(long long)size;
- (BOOL)canZoomOutForTileSize:(long long)size;
- (double)minimumZoomLevelForTileSize:(long long)size;
- (double)topDownMinimumZoomLevelForTileSize:(long long)size;
- (double)maximumZoomLevelForTileSize:(long long)size;
- (double)currentZoomLevelForTileSize:(long long)size;
- (double)zoomLevelAdjustmentForTileSize:(long long)size;
- (void)setSupportedEVConnectorTypes:(id)types;
- (BOOL)_modernMapAllowed;
- (BOOL)_realTimeEVChargerIsEnabled;
- (BOOL)_maritimeHikingOverrideIsEnabled;
- (BOOL)_hillshadeIsAvailable;
- (BOOL)_hikingIsAvailable;
- (void)setModernMapEnabled:(BOOL)enabled;
- (BOOL)_daVinciDataAvailable;
- (BOOL)_roundedBuildingsAllowed;
- (BOOL)_colorizedBuildingsAllowed;
- (BOOL)_buildingHeightsAllowed;
- (BOOL)_advancedLightingAllowed;
- (BOOL)_advancedWaterAllowed;
- (void)requestHikingToolTipRegionIDForLocation:(struct { double x0; double x1; })location;
- (void)_reconfigurePermissions;
- (void)tileGroupWillChange;
- (void)tileGroupDidChange;
- (float)worldSpaceWidthOfView;
- (void)setDimmingBaseMap:(BOOL)map;
- (void)setDimmingBaseMap:(BOOL)map animated:(BOOL)animated duration:(double)duration;
- (BOOL)isDimmingBaseMap;
- (id)venueWithFocus;
- (id)venueBuildingWithFocus;
- (id)venueAtLocation:(struct { double x0; double x1; })location;
- (id)venueAtLocation:(struct { double x0; double x1; })location withMarginForError:(BOOL)error;
- (id)venueAtLocation:(struct { double x0; double x1; })location withMarginForError:(BOOL)error includeNonRevealedVenues:(BOOL)venues;
- (id)venueWithID:(unsigned long long)id;
- (BOOL)displayedFloorIsDefaultForVenueBuilding:(id)building;
- (short)defaultFloorOrdinalForVenueBuilding:(id)building;
- (short)displayedFloorOrdinalForVenueBuilding:(id)building;
- (void)setDisplayedFloorOrdinal:(short)ordinal forVenueBuilding:(id)building;
- (id)clearVenueBuildingFloorSelections;
- (float)zoomToRevealVenueFloorplan:(id)floorplan;
- (float)zoomToRevealVenueBuildingFloorplan:(id)floorplan;
- (void)_setFloorSwitcherZoomPadding:(float)padding;
- (void)nearestVenueDidChange:(const void *)change building:(const void *)building;
- (void)locationInHikingToolTipRegion:(unsigned long long)region;
- (void)setClientLocalizedStrings:(id)strings;
- (void)setDesiredMapMode:(long long)mode;
- (void)setCanonicalSkyHeight:(double)height;
- (void)_createGlobe;
- (BOOL)supportsMapType:(int)type;
- (BOOL)supportsNightMode;
- (void)setMapType:(int)type animated:(BOOL)animated;
- (void)_updateBackgroundColor;
- (void)setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })style animated:(BOOL)animated;
- (void)setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })style animated:(BOOL)animated duration:(double)duration;
- (void)_applyMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })style animated:(BOOL)animated duration:(double)duration;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })mapRegionBounds;
- (id)consoleString:(BOOL)string;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)activateInternalSettings;
- (id)initShouldRasterize:(BOOL)rasterize inBackground:(BOOL)background contentScale:(double)scale auditToken:(id)token mapViewPurpose:(long long)purpose;
- (id)initShouldRasterize:(BOOL)rasterize inBackground:(BOOL)background contentScale:(double)scale auditToken:(id)token mapViewPurpose:(long long)purpose allowsAntialiasing:(BOOL)antialiasing;
- (id)initWithDescriptor:(id)descriptor;
- (void)dealloc;
- (void)_configureDefaultSettings;
- (id)activeLogics;
- (void)setContentsScale:(double)scale;
- (void)renderInContext:(struct CGContext *)context;
- (void)runAnimation:(id)animation;
- (void)setYaw:(double)yaw animated:(BOOL)animated;
- (void)setMapRegion:(id)region pitch:(double)pitch yaw:(double)yaw;
- (void)setMapRegion:(id)region pitch:(double)pitch yaw:(double)yaw duration:(double)duration completion:(id /* block */)completion;
- (void)setMapRegion:(id)region pitch:(double)pitch yaw:(double)yaw duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (double)durationToAnimateToMapRegion:(id)region;
- (struct { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toCoordinateFromLayer:(id)layer;
- (struct { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toMapPointFromLayer:(id)layer;
- (struct CGPoint { double x0; double x1; })convertMapPoint:(struct { double x0; double x1; })point toPointToLayer:(id)layer;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct { double x0; double x1; })coordinate toPointToLayer:(id)layer;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct { double x0; double x1; })coordinate toCameraModelPointToLayer:(id)layer;
- (double)distanceFromPoint:(struct CGPoint { double x0; double x1; })point toPoint:(struct CGPoint { double x0; double x1; })point fromLayer:(id)layer withPrecision:(long long)precision;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })insets duration:(double)duration timingFunction:(id)function completionHandler:(id /* block */)handler;
- (void)setCameraFramingInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })insets;
- (void)prepareFlyoverAnimation:(id)animation completion:(id /* block */)completion;
- (void)_runFlyoverTourStateChange:(int)change completion:(id /* block */)completion;
- (void)_notifyDelegateFlyoverTourLabelChanged:(id)changed;
- (void)startFlyoverAnimation:(id)animation animateToStart:(BOOL)start completion:(id /* block */)completion;
- (void)moveToFlyoverTourStartPosition:(id)position duration:(double)duration completion:(id /* block */)completion;
- (void)startFlyoverTourAnimation:(unsigned long long)animation animateToStart:(BOOL)start completion:(id /* block */)completion;
- (void)stopFlyoverAnimation;
- (void)pauseFlyoverTourAnimation;
- (void)resumeFlyoverTourAnimation;
- (void)enableTestStatistics;
- (void)disableTestStatistics;
- (void)resetTestStatistics;
- (id)testStatistics;
- (void)enableTileStatistics;
- (void)disableTileStatistics;
- (void)resetTileStatistics;
- (id)tileStatistics;
- (void)stopTracking;
- (void)pauseTracking;
- (void)navigationCameraReturnToPuck;
- (void)transitionToTracking:(BOOL)tracking mapMode:(long long)mode startLocation:(struct { double x0; double x1; })location startCourse:(double)course pounceCompletionHandler:(id /* block */)handler;
- (void)setHiddenTrafficIncidentFeatures:(id)features;
- (void)setExternalTrafficFeatures:(id)features areRouteTrafficFeaturesActive:(BOOL)active;
- (void)addCustomFeatureDataSource:(id)source;
- (void)removeCustomFeatureDataSource:(id)source;
- (void)setLabelExclusionRegions:(id)regions;
- (void)setScreenLabelFeatures:(id)features;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { double x0; double x1; })point selectableLabelsOnly:(BOOL)only;
- (id)labelMarkerForCustomFeatureAnnotation:(id)annotation dataSource:(id)source;
- (id)labelMarkerForCustomFeatureAnnotation:(id)annotation;
- (id)rapMarkerAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)selectLabelMarker:(id)marker;
- (void)selectLabelMarker:(id)marker completion:(id /* block */)completion;
- (void)deselectLabelMarker;
- (void)clearPreviouslySelectedLabelMarker;
- (BOOL)transitLinesDisabled;
- (void)setDisableTransitLines:(BOOL)lines;
- (id)transitLineMarkersInCurrentViewport;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)selectedTransitLineIDs;
- (void)selectTransitLineMarker:(id)marker;
- (void)deselectTransitLineMarker;
- (void)setPreferredUnits:(unsigned long long)units;
- (void)setSelectedTrailId:(unsigned long long)id;
- (void)setSelectedTrailWithId:(unsigned long long)id name:(id)name locale:(id)locale;
- (void)deselectTrails;
- (void)setSelectedFeatureId:(unsigned long long)id;
- (void)deselectFeatureId;
- (void)setSelectedVenuePoiFeatureId:(unsigned long long)id;
- (void)deselectVenuePoiFeatureId;
- (void)setSelectedBuildingFeatureIds:(id)ids;
- (void)enter3DMode;
- (void)exit3DMode;
- (BOOL)canEnter3DModeFlyoverForTileSize:(long long)size;
- (BOOL)isPitched;
- (BOOL)isFullyPitched;
- (BOOL)isShowingFlyover;
- (void)panWithOffset:(struct CGPoint { double x0; double x1; })offset relativeToScreenPoint:(struct CGPoint { double x0; double x1; })point animated:(BOOL)animated duration:(double)duration completionHandler:(id /* block */)handler;
- (id /* block */)annotationRectTest;
- (id /* block */)annotationCoordinateTest;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)setHasVehicleHeading:(BOOL)heading;
- (void)startTrackingAnnotation:(id)annotation trackHeading:(BOOL)heading animated:(BOOL)animated duration:(double)duration timingFunction:(id /* block */)function;
- (void)stopTrackingAnnotation;
- (BOOL)isAnimatingToTrackAnnotation;
- (void)addRouteOverlay:(id)overlay;
- (void)removeRouteOverlay:(id)overlay;
- (void)addPersistentRouteOverlay:(id)overlay;
- (void)removePersistentRouteOverlay:(id)overlay;
- (void)addOverlay:(id)overlay;
- (void)removeOverlay:(id)overlay;
- (void)insertOverlay:(id)overlay aboveOverlay:(id)overlay;
- (void)insertOverlay:(id)overlay belowOverlay:(id)overlay;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })offset;
- (void)setCurrentLocationText:(id)text;
- (void)setRouteContext:(id)context;
- (id)routeContext;
- (void)setNavContext:(id)context;
- (void)activeARWalkingFeatureDidUpdate:(id)update;
- (void)arWalkingFeatureSetStateDidUpdate:(id)update;
- (void)arWalkingElevationRequestFailure:(id)failure;
- (void)injectDebugARFeatures:(id)arfeatures;
- (void)injectDebugARUserRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (void)puckLocationTracingEvent:(id)event;
- (void)didStartLoadingData;
- (void)didFinishLoadingData;
- (void)didFinishLoadingDataWithError:(id)error;
- (void)mapDidReloadStylesheet:(id)stylesheet;
- (void)willBecomeFullyDrawn;
- (void)didUpdateSceneStatus:(unsigned char)status;
- (BOOL)isChangingRegionWithoutAnimating;
- (void)didFinishDaVinciTransition;
- (void)labelManagerDidLayout;
- (void)selectedLabelMarkerWillDisappear:(const void *)disappear;
- (void)labelMarkerDidChangeState:(const void *)state;
- (void)map:(id)map canShowFlyoverDidChange:(BOOL)change;
- (void)mapDidFinishChangingMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })style;
- (void)map:(id)map selectedLabelMarkerWillDisappear:(const void *)disappear;
- (void)map:(id)map labelMarkerDidChangeState:(const void *)state;
- (void)mapLabelsDidLayout:(id)layout;
- (void)_updateMapDisplayStyle;
- (void)mapController:(id)controller requestsDisplayRate:(long long)rate;
- (void)setCenterCoordinateDistanceRange:(struct { double x0; double x1; BOOL x2; })range duration:(double)duration timingFunction:(id /* block */)function;
- (void)setRegionRestriction:(id)restriction duration:(double)duration timingFunction:(id /* block */)function;
- (void)willLayoutWithTimestamp:(double)timestamp withContext:(void *)context;
- (void)didPresent;
- (BOOL)wantsTimerTick;
- (void)zoomToLevel:(double)level withFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)zoom:(double)zoom withFocusPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })point oldFactor:(double)factor newFactor:(double)factor;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })point panAtStartPoint:(BOOL)point;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })translation;
- (void)willStopPanningAtPoint:(struct CGPoint { double x0; double x1; })point withVelocity:(struct CGPoint { double x0; double x1; })velocity;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })point newValue:(double)value;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })point translation:(double)translation;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })point degrees:(double)degrees;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)isPointValidForGesturing:(struct CGPoint { double x0; double x1; })gesturing;
- (void)stopSnappingAnimations;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setDisableRoads:(BOOL)roads;
- (void)setDisableLabels:(BOOL)labels;
- (void)setDisablePolygons:(BOOL)polygons;
- (void)setDisableBuildingFootprints:(BOOL)footprints;
- (void)setDisableRasters:(BOOL)rasters;
- (void)setDisableGrid:(BOOL)grid;
- (void)setDisableShadows:(BOOL)shadows;
- (BOOL)isFullyDrawn;
- (unsigned long long)getSceneState;
- (BOOL)roadsDisabled;
- (BOOL)labelsDisabled;
- (BOOL)polygonsDisabled;
- (BOOL)buildingFootprintsDisabled;
- (BOOL)rastersDisabled;
- (BOOL)gridDisabled;
- (void)goToTileX:(int)x Y:(int)y Z:(int)z tileSize:(int)size;
- (void)setRouteLineSplitAnnotation:(id)annotation;
- (id)pptTileStatisticsForMapType:(int)type latitude:(double)latitude longitude:(double)longitude zoom:(float)zoom width:(double)width height:(double)height rect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect;
- (void)forceResolveCameraController;
- (void)setUseSmallCache:(BOOL)cache;
- (void)setCameraHorizontalOffset:(double)offset duration:(double)duration timingFunction:(id)function;
- (void)addExternalAnchor:(id)anchor;
- (void)removeExternalAnchor:(id)anchor;
- (void)didUpdateVerticalYawTo:(double)to;
- (void)puckAnimator:(id)animator runAnimation:(id)animation;
- (void)puckAnimator:(id)animator updatedPosition:(const void *)position course:(const void *)course;
- (struct optional<double> { union { char x0; double x1; } x0; BOOL x1; })puckAnimator:(id)animator getElevationWithCoordinate:(const void *)coordinate;
- (void)projectCoordinate:(struct { double x0; double x1; })coordinate toPoint:(struct CGPoint { double x0; double x1; } *)point;
- (void)puckAnimatorDidStop:(id)stop;
- (id)navigationPuck;
- (id)resolveMapCameraController;
@end

#endif /* VKMapView_h */
