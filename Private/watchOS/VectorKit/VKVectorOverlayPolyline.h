//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKVectorOverlayPolyline_h
#define VKVectorOverlayPolyline_h
@import Foundation;

@protocol struct Range<signed char> { char x0; char x1; }, {Range<signed char>="_min"c"_max"c}, {unique_ptr<geo::Cache<unsigned char, PolylineWithElevation, std::hash<unsigned char>, geo::LRUPolicy>, std::default_delete<geo::Cache<unsigned char, PolylineWithElevation, std::hash<unsigned char>, geo::LRUPolicy>>>="__ptr_"{__compressed_pair<geo::Cache<unsigned char, PolylineWithElevation, std::hash<unsigned char>, geo::LRUPolicy> *, std::default_delete<geo::Cache<unsigned char, PolylineWithElevation, std::hash<unsigned char>, geo::LRUPolicy>>>="__value_"^v}}, {vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}, {vector<geo::Mercator2<double>, std::allocator<geo::Mercator2<double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<geo::Mercator2<double> *, std::allocator<geo::Mercator2<double>>>="__value_"^v}};

@interface VKVectorOverlayPolyline : NSObject {
  /* instance variables */
  struct vector<geo::Mercator2<double>, std::allocator<geo::Mercator2<double>>> { void *__begin_; void *__end_; struct __compressed_pair<geo::Mercator2<double> *, std::allocator<geo::Mercator2<double>>> { void *__value_; } __end_cap_; } _points;
  struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } _elevations;
  struct unique_ptr<geo::Cache<unsigned char, PolylineWithElevation, std::hash<unsigned char>, geo::LRUPolicy>, std::default_delete<geo::Cache<unsigned char, PolylineWithElevation, std::hash<unsigned char>, geo::LRUPolicy>>> { struct __compressed_pair<geo::Cache<unsigned char, PolylineWithElevation, std::hash<unsigned char>, geo::LRUPolicy> *, std::default_delete<geo::Cache<unsigned char, PolylineWithElevation, std::hash<unsigned char>, geo::LRUPolicy>>> { void *__value_; } __ptr_; } _simplifiedGeometryCache;
  struct unfair_lock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock; } _simplifiedGeometryCacheLock;
}

@property (readonly, nonatomic) struct Range<signed char> { char x0; char x1; } worldIndexes;

/* instance methods */
- (id)initWithMapPoints:(const struct { double x0; double x1; } *)points elevations:(const double *)elevations count:(unsigned long long)count;
- (struct PolylineWithElevation { struct shared_ptr<std::vector<geo::Mercator2<double>>> { void * x0; struct __shared_weak_count * x1; } x0; struct shared_ptr<std::vector<double>> { void * x0; struct __shared_weak_count * x1; } x1; })simplifiedGeometryAtZoomLevel:(unsigned char)level;
@end

#endif /* VKVectorOverlayPolyline_h */
