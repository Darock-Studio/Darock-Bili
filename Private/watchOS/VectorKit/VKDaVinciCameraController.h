//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKDaVinciCameraController_h
#define VKDaVinciCameraController_h
@import Foundation;

#include "VKScreenCameraController.h"
#include "VKGesturingCameraController-Protocol.h"

@class NSString;

@interface VKDaVinciCameraController : VKScreenCameraController<VKGesturingCameraController> {
  /* instance variables */
  void * _mapEngine;
  void * _cameraManager;
  double _currentDoublePanPitch;
  BOOL _isPitching;
  BOOL _isRotating;
  BOOL _wasPitched;
  BOOL _couldEnter3DMode;
  double _lastRotation;
  struct CGPoint { double x; double y; } _panStartScreenPoint;
  struct CGPoint { double x; double y; } _panLastScreenPoint;
  double _beganDoublePanPitch;
  BOOL _updateHeight;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithMapDataAccess:(void *)access animationRunner:(struct AnimationRunner { struct MapEngine * x0; } *)runner runLoopController:(struct RunLoopController { struct MapEngine * x0; long long x1; } *)controller cameraDelegate:(id)delegate mapEngine:(void *)engine;
- (void)dealloc;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (void)rotate:(double)rotate atScreenPoint:(struct CGPoint { double x0; double x1; })point;
- (void)pitch:(struct CGPoint { double x0; double x1; })pitch translation:(double)translation;
- (void)zoom:(double)zoom withFocusPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })point oldFactor:(double)factor newFactor:(double)factor;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration animationStyle:(long long)style timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)setCenterCoordinate3D:(struct { double x0; double x1; double x2; })d altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration animationStyle:(long long)style timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (BOOL)snapMapIfNecessary:(BOOL)necessary;
- (void)rotateTo:(double)to animated:(BOOL)animated;
- (void)tiltTo:(double)to animated:(BOOL)animated exaggerate:(BOOL)exaggerate;
- (void)tapZoom:(struct CGPoint { double x0; double x1; })zoom levels:(double)levels completionHandler:(id /* block */)handler;
- (void)zoomToDistance:(struct CGPoint { double x0; double x1; })distance distance:(double)distance time:(double)time completionHandler:(id /* block */)handler;
- (void)zoomToDistance:(struct CGPoint { double x0; double x1; })distance distance:(double)distance time:(double)time;
- (void)panWithOffset:(struct CGPoint { double x0; double x1; })offset relativeToScreenPoint:(struct CGPoint { double x0; double x1; })point animated:(BOOL)animated duration:(double)duration completionHandler:(id /* block */)handler;
- (void)moveTo:(struct Coordinate2D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; })to zoom:(double)zoom rotation:(double)rotation tilt:(double)tilt duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)moveTo:(struct Coordinate2D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; })to height:(double)height useHeight:(BOOL)height zoom:(double)zoom rotation:(double)rotation tilt:(double)tilt duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (id /* block */)createMoveToZoomOutZoomInFrameFunction:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })function toLatLon:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })lon;
- (void)moveToZoomOutZoomInTransition:(struct Coordinate2D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; })transition height:(double)height useHeight:(BOOL)height zoom:(double)zoom rotation:(double)rotation tilt:(double)tilt duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)stopGlobeAnimations;
- (void)enter3DMode;
- (void)exit3DMode;
- (BOOL)canEnter3DMode;
- (BOOL)isPitched;
- (BOOL)isFullyPitched;
- (double)minPitch;
- (double)maxPitch;
- (void)_updateIsPitched;
- (void)_updateCanEnter3DMode;
- (void)updateState;
- (void)setGesturing:(BOOL)gesturing;
- (void)startTrackingAnnotation:(id)annotation trackHeading:(BOOL)heading animated:(BOOL)animated duration:(double)duration timingFunction:(id /* block */)function;
- (void)updateCameraManager;
- (double)presentationYaw;
- (void)setYaw:(double)yaw animated:(BOOL)animated;
- (struct vector<geo::Coordinate2D<geo::Radians, double>, std::allocator<geo::Coordinate2D<geo::Radians, double>>> { void * x0; void * x1; struct __compressed_pair<geo::Coordinate2D<geo::Radians, double> *, std::allocator<geo::Coordinate2D<geo::Radians, double>>> { void * x0; } x2; })_getVisibleArea;
- (id)mapRegion;
- (id)mapRegionIgnoringEdgeInsets;
- (double)geocAngleBetween:(struct Coordinate2D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; })between andCoordinate:(struct Coordinate2D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; })coordinate;
- (double)earthRadiusAt:(struct Unit<geo::RadianUnitDescription, double> { double x0; })at;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })greatCircleMidPointLatitude:(struct Unit<geo::RadianUnitDescription, double> { double x0; })latitude fromLongitude:(struct Unit<geo::RadianUnitDescription, double> { double x0; })longitude toLongitude:(struct Unit<geo::RadianUnitDescription, double> { double x0; })longitude;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })widestLatitudeForMapRegion:(id)region;
- (double)zoomForMapRegion:(id)region;
- (double)durationToAnimateToMapRegion:(id)region;
- (void)setMapRegion:(id)region pitch:(double)pitch yaw:(double)yaw duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (struct Coordinate2D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; })_centerCoordinateForMapRegion:(id)region;
- (struct Coordinate2D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; })centerCoordinateRad;
- (struct { double x0; double x1; })centerCoordinate;
- (double)distanceFromCenterCoordinate;
- (double)altitude;
- (double)heading;
- (double)pitch;
- (void)setCenterCoordinateDistanceRange:(struct { double x0; double x1; BOOL x2; })range duration:(double)duration timingFunction:(id /* block */)function;
- (void)animateRegionWithDuration:(double)duration timingFunction:(id /* block */)function stepHandler:(id /* block */)handler completionHandler:(id /* block */)handler;
- (void)setRegionRestriction:(id)restriction duration:(double)duration timingFunction:(id /* block */)function;
- (void)animateToRestriction:(id)restriction duration:(double)duration timingFunction:(id /* block */)function;
- (BOOL)usesVKCamera;
- (void)updateWithTimestamp:(double)timestamp withContext:(void *)context;
- (float)maximumNormalizedZoomLevel;
- (float)minimumNormalizedZoomLevel;
- (long long)tileSize;
- (void)updateCameraLimits;
- (double)minimumZoomLevel;
- (double)maximumZoomLevel;
- (double)currentZoomLevel;
- (double)topDownMinimumZoomLevel;
- (float)minPitchForNormalizedZoomLevel:(float)level;
- (float)idealPitchForNormalizedZoomLevel:(float)level;
- (float)maxPitchForNormalizedZoomLevel:(float)level;
@end

#endif /* VKDaVinciCameraController_h */
