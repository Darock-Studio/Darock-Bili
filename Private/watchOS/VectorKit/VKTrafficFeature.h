//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKTrafficFeature_h
#define VKTrafficFeature_h
@import Foundation;

#include "NSCopying-Protocol.h"

@class GEOFeatureStyleAttributes, NSString;
@protocol struct Mercator3<double> { double x0[3] }, struct optional<gss::RouteLegWhen> { BOOL x0; union ValueUnion { unsigned char x0[1] unsigned char x1; } x1; }, struct vector<GeoCodecsFeatureStylePair, geo::StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator>> { struct GeoCodecsFeatureStylePair * x0; struct GeoCodecsFeatureStylePair * x1; struct __compressed_pair<GeoCodecsFeatureStylePair *, geo::StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator>> { struct GeoCodecsFeatureStylePair * x0; struct StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator> { struct Allocator * x0; } x1; } x2; }, {optional<gss::RouteLegWhen>="_hasValue"B"_value"(ValueUnion="data"[1C]"type"C)};

@interface VKTrafficFeature : NSObject<NSCopying> {
  /* instance variables */
  struct { double x; double y; double z; } _worldPoint;
  double _approachingDistanceInMeters;
  long long _state;
}

@property (readonly, nonatomic) struct Mercator3<double> { double x0[3] } mercatorPoint;
@property (readonly, nonatomic) float minZoom;
@property (readonly, nonatomic) float maxZoom;
@property (readonly, nonatomic) int groupIdentifier;
@property (readonly, nonatomic) unsigned int groupItemVerticalDisplayOrder;
@property (readonly, nonatomic) unsigned int groupItemHorizontalDisplayOrder;
@property (readonly, nonatomic) unsigned char collisionPriority;
@property (readonly, nonatomic) double routeOffsetInMeters;
@property (readonly, nonatomic) double facingAzimuth;
@property (nonatomic) BOOL shouldUpdateStyle;
@property (nonatomic) long long navigationState;
@property (nonatomic) struct optional<gss::RouteLegWhen> { BOOL x0; union ValueUnion { unsigned char x0[1] unsigned char x1; } x1; } routeLegWhen;
@property (readonly, nonatomic) struct vector<GeoCodecsFeatureStylePair, geo::StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator>> { struct GeoCodecsFeatureStylePair * x0; struct GeoCodecsFeatureStylePair * x1; struct __compressed_pair<GeoCodecsFeatureStylePair *, geo::StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator>> { struct GeoCodecsFeatureStylePair * x0; struct StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator> { struct Allocator * x0; } x1; } x2; } attributes;
@property (readonly, nonatomic) NSString *uniqueIdentifier;
@property (readonly, nonatomic) long long trafficFeatureType;
@property (readonly, nonatomic) struct PolylineCoordinate { unsigned int x0; float x1; } routeOffset;
@property (readonly, nonatomic) struct PolylineCoordinate { unsigned int x0; float x1; } approachingRouteOffset;
@property (readonly, nonatomic) struct { double x0; double x1; double x2; } position;
@property (readonly, nonatomic) GEOFeatureStyleAttributes *styleAttributes;

/* class methods */
+ (id)newTrafficFeatureForEnrouteNotice:(id)notice onRoute:(id)route;
+ (id)stringForFeatureType:(long long)type;
+ (id)stringForNavState:(long long)state;

/* instance methods */
- (id)initWithEnrouteNotice:(id)notice onRoute:(id)route;
- (id)initWithFeatureType:(long long)type uniqueIdentifier:(id)identifier position:(struct { double x0; double x1; double x2; })position onRoute:(id)route;
- (id)initWithFeatureType:(long long)type uniqueIdentifier:(id)identifier routeOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })offset onRoute:(id)route;
- (id)initWithFeatureType:(long long)type uniqueIdentifier:(id)identifier position:(struct { double x0; double x1; double x2; })position direction:(double)direction routeOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })offset routeOffsetInMeters:(double)meters;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isEqual:(id)equal;
- (BOOL)isSignal;
- (BOOL)isCamera;
- (BOOL)isIncident;
- (BOOL)isRouteAnnotation;
- (BOOL)isUserReportedIncident;
- (BOOL)isAheadButNotApproaching;
- (BOOL)isApproaching;
- (BOOL)isBehind;
- (BOOL)isGrouped;
- (void)updateNavigationStateForRouteUserOffset:(const struct PolylineCoordinate { unsigned int x0; float x1; } *)offset;
- (void)populateDebugNode:(void *)node;
@end

#endif /* VKTrafficFeature_h */
