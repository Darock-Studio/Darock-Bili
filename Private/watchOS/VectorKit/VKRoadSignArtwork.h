//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKRoadSignArtwork_h
#define VKRoadSignArtwork_h
@import Foundation;

@protocol {RoadSignColoring="_hasFillColor"B"_hasGradientFillColors"B"_hasGradientFillAngle"B"_hasStrokeColor"B"_hasInnerStrokeColor"B"_hasShadowColor"B"_hasTextColor"B"_hasSecondaryTextColor"B"_fillColor"{Color<double, 4, geo::ColorSpace::Linear>="_backing"{Matrix<double, 4, 1>="_e"[4d]}}"_gradientFillColors"{array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2UL>="__elems_"[2{Color<double, 4, geo::ColorSpace::Linear>="_backing"{Matrix<double, 4, 1>="_e"[4d]}}]}"_strokeColor"{Color<double, 4, geo::ColorSpace::Linear>="_backing"{Matrix<double, 4, 1>="_e"[4d]}}"_innerStrokeColor"{Color<double, 4, geo::ColorSpace::Linear>="_backing"{Matrix<double, 4, 1>="_e"[4d]}}"_shadowColor"{Color<double, 4, geo::ColorSpace::Linear>="_backing"{Matrix<double, 4, 1>="_e"[4d]}}"_textColor"{Color<double, 4, geo::ColorSpace::Linear>="_backing"{Matrix<double, 4, 1>="_e"[4d]}}"_secondaryTextColor"{Color<double, 4, geo::ColorSpace::Linear>="_backing"{Matrix<double, 4, 1>="_e"[4d]}}"_gradientFillAngle"d}, {RoadSignTextMetrics="_scale"d"_contentScale"d"_horizontalMargin"d"_verticalMargin"d"_verticalOffset"d"_textSize"d"_secondaryTextSize"d"_fontFamily"{basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>="__r_"{__compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}"__value_"{StdAllocator<char, mdm::Allocator>="_allocator"^{Allocator}}}}"_secondaryFontFamily"{basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>="__r_"{__compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}"__value_"{StdAllocator<char, mdm::Allocator>="_allocator"^{Allocator}}}}"_textDrawWidth"d"_textWrapWidth"d"_maxLineCount"C"_isRTL"B}, {_retain_ptr<VKImage *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKImage""_retain"{_retain_objc_arc=}"_release"{_release_objc_arc=}}, {shared_ptr<md::LabelIcon>="__ptr_"^{LabelIcon}"__cntrl_"^{__shared_weak_count}}, {vector<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>, std::allocator<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>> *, std::allocator<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>>>="__value_"^v}}, {vector<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>, std::allocator<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>> *, std::allocator<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>>>="__value_"^v}};

@interface VKRoadSignArtwork : NSObject {
  /* instance variables */
  struct __CTLine * _line;
  struct __CTFrame * _frame;
  struct __CTFramesetter * _framesetter;
  struct RoadSignMetrics { unsigned char _orientation; double _scale; double _contentScale; double _arrowWeight; double _arrowLength; double _arrowTipCornerRadius; double _arrowJoinCornerRadius; struct CGSize { double width; double height; } _shadowOffset; double _shadowRadius; double _strokeWeight; double _innerStrokeWeight; double _signHeight; double _signMargin; double _horizontalMargin; double _verticalMargin; double _cornerRadius; struct CGSize { double width; double height; } _glyphSize; double _glyphVerticalOffset; } _signMetrics;
  struct RoadSignTextMetrics { double _scale; double _contentScale; double _horizontalMargin; double _verticalMargin; double _verticalOffset; double _textSize; double _secondaryTextSize; struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> { struct __compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; struct StdAllocator<char, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __r_; } _fontFamily; struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> { struct __compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; struct StdAllocator<char, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __r_; } _secondaryFontFamily; double _textDrawWidth; double _textWrapWidth; unsigned char _maxLineCount; BOOL _isRTL; } _textMetrics;
  struct RoadSignGeneratedMetrics { struct RoadSignPartMetrics { unsigned char _type; struct CGSize { double width; double height; } _imageSize; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _signBaseRect; double _topEmptySpaceHeight; double _bottomEmptySpaceHeight; double _leftEmptySpaceWidth; double _rightEmptySpaceWidth; double _outsideImagePathExtension; BOOL _hasArrows; struct CGPoint { double x; double y; } _arrowWingMin; struct CGPoint { double x; double y; } _arrowWingMax; struct CGPoint { double x; double y; } _arrowTip; struct CGPoint { double x; double y; } _arrowAnchor; } _leftRoadSignPartMetrics; struct RoadSignPartMetrics { unsigned char _type; struct CGSize { double width; double height; } _imageSize; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _signBaseRect; double _topEmptySpaceHeight; double _bottomEmptySpaceHeight; double _leftEmptySpaceWidth; double _rightEmptySpaceWidth; double _outsideImagePathExtension; BOOL _hasArrows; struct CGPoint { double x; double y; } _arrowWingMin; struct CGPoint { double x; double y; } _arrowWingMax; struct CGPoint { double x; double y; } _arrowTip; struct CGPoint { double x; double y; } _arrowAnchor; } _rightRoadSignPartMetrics; struct RoadSignPartMetrics { unsigned char _type; struct CGSize { double width; double height; } _imageSize; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _signBaseRect; double _topEmptySpaceHeight; double _bottomEmptySpaceHeight; double _leftEmptySpaceWidth; double _rightEmptySpaceWidth; double _outsideImagePathExtension; BOOL _hasArrows; struct CGPoint { double x; double y; } _arrowWingMin; struct CGPoint { double x; double y; } _arrowWingMax; struct CGPoint { double x; double y; } _arrowTip; struct CGPoint { double x; double y; } _arrowAnchor; } _stretchedRoadSignPartMetrics; struct RoadSignPartMetrics { unsigned char _type; struct CGSize { double width; double height; } _imageSize; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _signBaseRect; double _topEmptySpaceHeight; double _bottomEmptySpaceHeight; double _leftEmptySpaceWidth; double _rightEmptySpaceWidth; double _outsideImagePathExtension; BOOL _hasArrows; struct CGPoint { double x; double y; } _arrowWingMin; struct CGPoint { double x; double y; } _arrowWingMax; struct CGPoint { double x; double y; } _arrowTip; struct CGPoint { double x; double y; } _arrowAnchor; } _middleRoadSignPartMetrics; BOOL _hasMiddleSignPart; struct CGSize { double width; double height; } _imageSize; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _signBaseRect; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _glyphRect; double _stretchedRoadSignPartWidth; struct CGPoint { double x; double y; } _arrowTipPosition; struct CGPoint { double x; double y; } _arrowAnchorPosition; struct CGPoint { double x; double y; } _textPosition; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _textBounds; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _leftPartRect; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _rightPartRect; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _stretchedPartRect; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _middlePartRect; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _middleLeftStretchedPartRect; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _middleRightStretchedPartRect; } _generatedMetrics;
  struct RoadSignColoring { BOOL _hasFillColor; BOOL _hasGradientFillColors; BOOL _hasGradientFillAngle; BOOL _hasStrokeColor; BOOL _hasInnerStrokeColor; BOOL _hasShadowColor; BOOL _hasTextColor; BOOL _hasSecondaryTextColor; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x[4] _e; } _backing; } _fillColor; struct array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2UL> { d]}} x[2{Color<double, 4, geo::ColorSpace::Linear>="_backing"{Matrix<double, 4, 1>="_e"[4] __elems_; } _gradientFillColors; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x[4] _e; } _backing; } _strokeColor; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x[4] _e; } _backing; } _innerStrokeColor; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x[4] _e; } _backing; } _shadowColor; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x[4] _e; } _backing; } _textColor; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x[4] _e; } _backing; } _secondaryTextColor; double _gradientFillAngle; } _signColoring;
  struct shared_ptr<md::LabelIcon> { struct LabelIcon *__ptr_; struct __shared_weak_count *__cntrl_; } _glyph;
  struct CGImage * _cgGlyph;
  struct vector<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>, std::allocator<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>> *, std::allocator<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>>> { void *__value_; } __end_cap_; } _debugPoints;
  struct vector<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>, std::allocator<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>> *, std::allocator<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>>> { void *__value_; } __end_cap_; } _debugRects;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _imageLock;
  struct _retain_ptr<VKImage *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> { undefined * *_vptr$_retain_ptr; VKImage *_obj; struct _retain_objc_arc _retain; struct _release_objc_arc _release; } _image;
}

/* instance methods */
- (id)initWithFramesetter:(struct __CTFramesetter *)framesetter signMetrics:(struct RoadSignMetrics { unsigned char x0; double x1; double x2; double x3; double x4; double x5; double x6; struct CGSize { double x0; double x1; } x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; struct CGSize { double x0; double x1; } x16; double x17; })metrics textMetrics:(struct RoadSignTextMetrics { double x0; double x1; double x2; double x3; double x4; double x5; double x6; struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> { struct __compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; struct StdAllocator<char, mdm::Allocator> { struct Allocator * x0; } x1; } x0; } x7; struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> { struct __compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; struct StdAllocator<char, mdm::Allocator> { struct Allocator * x0; } x1; } x0; } x8; double x9; double x10; unsigned char x11; BOOL x12; })metrics signColoring:(struct RoadSignColoring { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x8; struct array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2UL> { d]}} x0[2{Color<double, 4, geo::ColorSpace::Linear>={Matrix<double, 4, 1>=[4] } x9; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x10; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x11; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x12; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x13; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x14; double x15; })coloring glyph:(const void *)glyph cgGlyph:(struct CGImage *)glyph;
- (id)initWithLine:(struct __CTLine *)line signMetrics:(struct RoadSignMetrics { unsigned char x0; double x1; double x2; double x3; double x4; double x5; double x6; struct CGSize { double x0; double x1; } x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; struct CGSize { double x0; double x1; } x16; double x17; })metrics textMetrics:(struct RoadSignTextMetrics { double x0; double x1; double x2; double x3; double x4; double x5; double x6; struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> { struct __compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; struct StdAllocator<char, mdm::Allocator> { struct Allocator * x0; } x1; } x0; } x7; struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> { struct __compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; struct StdAllocator<char, mdm::Allocator> { struct Allocator * x0; } x1; } x0; } x8; double x9; double x10; unsigned char x11; BOOL x12; })metrics signColoring:(struct RoadSignColoring { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x8; struct array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2UL> { d]}} x0[2{Color<double, 4, geo::ColorSpace::Linear>={Matrix<double, 4, 1>=[4] } x9; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x10; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x11; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x12; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x13; struct Color<double, 4, geo::ColorSpace::Linear> { struct Matrix<double, 4, 1> { double x0[4] } x0; } x14; double x15; })coloring glyph:(const void *)glyph cgGlyph:(struct CGImage *)glyph;
- (void)dealloc;
- (id)image;
- (const void *)glyph;
- (struct Matrix<float, 2, 1> { float x0[2] })offsetPixelForPixel:(struct Matrix<float, 2, 1> { float x0[2] })pixel;
- (struct Box<float, 2> { struct Matrix<float, 2, 1> { float x0[2] } x0; struct Matrix<float, 2, 1> { float x0[2] } x1; })localRenderBounds;
- (struct Box<float, 2> { struct Matrix<float, 2, 1> { float x0[2] } x0; struct Matrix<float, 2, 1> { float x0[2] } x1; })localSignBounds;
- (struct Box<float, 2> { struct Matrix<float, 2, 1> { float x0[2] } x0; struct Matrix<float, 2, 1> { float x0[2] } x1; })localCollisionBounds;
- (const struct RoadSignGeneratedMetrics { struct RoadSignPartMetrics { unsigned char x0; struct CGSize { double x0; double x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; struct CGPoint { double x0; double x1; } x9; struct CGPoint { double x0; double x1; } x10; struct CGPoint { double x0; double x1; } x11; struct CGPoint { double x0; double x1; } x12; } x0; struct RoadSignPartMetrics { unsigned char x0; struct CGSize { double x0; double x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; struct CGPoint { double x0; double x1; } x9; struct CGPoint { double x0; double x1; } x10; struct CGPoint { double x0; double x1; } x11; struct CGPoint { double x0; double x1; } x12; } x1; struct RoadSignPartMetrics { unsigned char x0; struct CGSize { double x0; double x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; struct CGPoint { double x0; double x1; } x9; struct CGPoint { double x0; double x1; } x10; struct CGPoint { double x0; double x1; } x11; struct CGPoint { double x0; double x1; } x12; } x2; struct RoadSignPartMetrics { unsigned char x0; struct CGSize { double x0; double x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; struct CGPoint { double x0; double x1; } x9; struct CGPoint { double x0; double x1; } x10; struct CGPoint { double x0; double x1; } x11; struct CGPoint { double x0; double x1; } x12; } x3; BOOL x4; struct CGSize { double x0; double x1; } x5; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; double x8; struct CGPoint { double x0; double x1; } x9; struct CGPoint { double x0; double x1; } x10; struct CGPoint { double x0; double x1; } x11; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x12; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x13; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x14; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x15; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x16; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x17; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x18; } *)generatedMetrics;
- (const void *)textMetrics;
- (void)addDebugPoint:(struct CGPoint { double x0; double x1; })point color:(struct Color<float, 4, geo::ColorSpace::Linear> { struct Matrix<float, 4, 1> { float x0[4] } x0; })color;
- (void)addDebugRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect color:(struct Color<float, 4, geo::ColorSpace::Linear> { struct Matrix<float, 4, 1> { float x0[4] } x0; })color;
@end

#endif /* VKRoadSignArtwork_h */
