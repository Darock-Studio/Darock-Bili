//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKPolygonGroup_h
#define VKPolygonGroup_h
@import Foundation;

#include "VKPolygonalItemGroup.h"

@protocol struct FeatureAttributeSet { struct vector<std::pair<gss::StyleAttribute, unsigned short>, geo::StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator>> { void * x0; void * x1; struct __compressed_pair<std::pair<gss::StyleAttribute, unsigned short> *, geo::StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator>> { void * x0; struct StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator> { struct Allocator * x0; } x1; } x2; } x0; }, {optional<md::MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>>="_hasValue"B"_value"(ValueUnion="data"[184C]"type"{MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>="_vertexAndIndexCounts"{vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>>="__value_"^v}}"_meshes"{vector<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>>="__value_"^v}}"_vertexDataWrite"{DataWrite<ggl::PolygonCommonStroke::DefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"Q"_max"Q}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I"_storage"^{MeshSetStorage}"_internalStorage"{unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>>="__ptr_"{__compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>>="__value_"^{MeshSetStorage}}}"_storageClient"{shared_ptr<md::MeshSetStorageClient>="__ptr_"^{MeshSetStorageClient}"__cntrl_"^{__shared_weak_count}}})}, {shared_ptr<ggl::Texture2D>="__ptr_"^{Texture2D}"__cntrl_"^{__shared_weak_count}}, {vector<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>>="__value_"^v}};

@interface VKPolygonGroup : VKPolygonalItemGroup {
  /* instance variables */
  struct optional<md::MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>> { BOOL _hasValue; union ValueUnion { unsigned char x[184] data; struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> { struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> { void *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; struct MeshSetStorage *_storage; struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> { struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> { struct MeshSetStorage *__value_; } __ptr_; } _internalStorage; struct shared_ptr<md::MeshSetStorageClient> { struct MeshSetStorageClient *__ptr_; struct __shared_weak_count *__cntrl_; } _storageClient; } type; } _value; } _strokeMeshInfo;
  unsigned char _lastResolvedZoom;
}

@property (readonly, nonatomic) struct FeatureAttributeSet { struct vector<std::pair<gss::StyleAttribute, unsigned short>, geo::StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator>> { void * x0; void * x1; struct __compressed_pair<std::pair<gss::StyleAttribute, unsigned short> *, geo::StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator>> { void * x0; struct StdAllocator<std::pair<gss::StyleAttribute, unsigned short>, gss::Allocator> { struct Allocator * x0; } x1; } x2; } x0; } styleAttributes;
@property (readonly, nonatomic) void * strokeMeshes;
@property (readonly, nonatomic) void * sourceTexture;
@property (readonly, nonatomic) void * targetTexture;
@property (readonly, nonatomic) void * sourceRoofTexture;
@property (readonly, nonatomic) void * targetRoofTexture;

/* instance methods */
- (id)initWithStyleQuery:(void *)query tileZoom:(float)zoom fixedAroundCentroid:(const void *)centroid contentScale:(float)scale;
- (id)initWithStyleQuery:(void *)query tileZoom:(float)zoom fixedAroundCentroid:(const void *)centroid contentScale:(float)scale storage:(struct shared_ptr<md::MeshSetStorage> { struct MeshSetStorage * x0; struct __shared_weak_count * x1; })storage;
- (struct shared_ptr<ggl::Texture2D> { struct Texture2D * x0; struct __shared_weak_count * x1; })_textureForName:(const void *)name textureManager:(void *)manager;
- (void)setNeedsTextureUpdate;
- (void)updateTexturesIfNecessary:(float)necessary textureManager:(void *)manager;
- (unsigned int)createStrokePointStyleList:(void *)list section:(unsigned long long)section outPointStyles:(void *)styles withRounder:(struct PolygonRound { float x0; float x1; float x2; float x3; float x4; } *)rounder;
- (void)prepareForPolygon:(void *)polygon withRounder:(struct PolygonRound { float x0; float x1; float x2; float x3; float x4; } *)rounder;
- (void)enclosePointsInBoundingBox:(const void *)box count:(unsigned long long)count;
- (void)prepareToFillSection:(const void *)section;
- (void)prepareToStrokeSection:(const void *)section key:(const void *)key styles:(void *)styles paddedCount:(unsigned int)count;
- (void)willAddDataWithAccessor:(struct ResourceAccessor { undefined * * x0; } *)accessor;
- (void)didFinishAddingData;
- (void)addPolygon:(void *)polygon accessor:(struct ResourceAccessor { undefined * * x0; } *)accessor triangulator:(void *)triangulator withRounder:(struct PolygonRound { float x0; float x1; float x2; float x3; float x4; } *)rounder;
- (BOOL)addFillForSection:(const void *)section precision:(unsigned char)precision styleIndex:(unsigned int)index cullingMask:(unsigned int)mask accessor:(struct ResourceAccessor { undefined * * x0; } *)accessor triangulator:(void *)triangulator;
- (unsigned char)styleIndexForAttributes:(const void *)attributes edgePair:(const struct GeoCodecsFeatureStylePair { unsigned int x0; int x1; } *)pair;
- (unsigned char)initialStyleIndexForSection:(const void *)section attributes:(const void *)attributes styles:(const void *)styles;
- (void)addStrokeForSection:(const void *)section paddedCount:(unsigned int)count key:(struct pair<const void *, unsigned long> { void * x0; unsigned long long x1; })key attributes:(const void *)attributes styles:(void *)styles cullingMask:(unsigned int)mask accessor:(struct ResourceAccessor { undefined * * x0; } *)accessor;
- (void)updateTextures:(unsigned char)textures textureManager:(void *)manager;
@end

#endif /* VKPolygonGroup_h */
