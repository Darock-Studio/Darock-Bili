//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKMapSnapshotCreator_h
#define VKMapSnapshotCreator_h
@import Foundation;

#include "MapEngineDelegate-Protocol.h"
#include "VKGlobeImageCanvas.h"
#include "VKManifestTileGroupObserverProxy.h"
#include "VKMapImageCanvas.h"
#include "VKNotificationObserver.h"
#include "VKNotificationObserverDelegate-Protocol.h"
#include "VKRouteContext.h"
#include "VKRouteOverlay-Protocol.h"

@class GEOPOICategoryFilter, NSString;
@protocol {Stopwatch="_startTime"{time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>="__d_"{duration<long long, std::ratio<1, 1000000000>>="__rep_"q}}}, {shared_ptr<md::TaskContext>="__ptr_"^{TaskContext}"__cntrl_"^{__shared_weak_count}}, {unique_ptr<gdc::Timer, std::default_delete<gdc::Timer>>="__ptr_"{__compressed_pair<gdc::Timer *, std::default_delete<gdc::Timer>>="__value_"^{Timer}}}, {unique_ptr<md::MapEngine, md::MapEngineDeleter>="__ptr_"{__compressed_pair<md::MapEngine *, md::MapEngineDeleter>="__value_"^{MapEngine}}}, {vector<CGImage *, std::allocator<CGImage *>>="__begin_"^^{CGImage}"__end_"^^{CGImage}"__end_cap_"{__compressed_pair<CGImage **, std::allocator<CGImage *>>="__value_"^^{CGImage}}}, {vector<__IOSurface *, std::allocator<__IOSurface *>>="__begin_"^^{__IOSurface}"__end_"^^{__IOSurface}"__end_cap_"{__compressed_pair<__IOSurface **, std::allocator<__IOSurface *>>="__value_"^^{__IOSurface}}};

@interface VKMapSnapshotCreator : NSObject<MapEngineDelegate, VKNotificationObserverDelegate> {
  /* instance variables */
  VKMapImageCanvas *_mapCanvas;
  VKGlobeImageCanvas *_globeCanvas;
  BOOL _didBecomeFullyDrawn;
  BOOL _hasFailedTiles;
  id /* block */ _completion;
  struct unique_ptr<md::MapEngine, md::MapEngineDeleter> { struct __compressed_pair<md::MapEngine *, md::MapEngineDeleter> { struct MapEngine *__value_; } __ptr_; } _mapEngine;
  struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
  BOOL _didSoftDealloc;
  VKNotificationObserver *_notificationObserver;
  unsigned long long _signpostId;
  unsigned char _usage;
  struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; } * _displayStyles;
  unsigned long long _displayStylesCount;
  unsigned long long _nextDisplayStyleIndex;
  struct vector<CGImage *, std::allocator<CGImage *>> { struct CGImage * *__begin_; struct CGImage * *__end_; struct __compressed_pair<CGImage **, std::allocator<CGImage *>> { struct CGImage * *__value_; } __end_cap_; } _images;
  struct vector<__IOSurface *, std::allocator<__IOSurface *>> { struct __IOSurface * *__begin_; struct __IOSurface * *__end_; struct __compressed_pair<__IOSurface **, std::allocator<__IOSurface *>> { struct __IOSurface * *__value_; } __end_cap_; } _ioSurfaces;
  struct Stopwatch { struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> { struct duration<long long, std::ratio<1, 1000000000>> { long long __rep_; } __d_; } _startTime; } _timer;
  struct unique_ptr<gdc::Timer, std::default_delete<gdc::Timer>> { struct __compressed_pair<gdc::Timer *, std::default_delete<gdc::Timer>> { struct Timer *__value_; } __ptr_; } _expirationTimer;
  VKManifestTileGroupObserverProxy *_manifestTileGroupObserverProxy;
}

@property (readonly) struct CGSize { double x0; double x1; } size;
@property (nonatomic) int mapType;
@property (nonatomic) unsigned char emphasis;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } edgeInsets;
@property (nonatomic) BOOL localizeLabels;
@property (nonatomic) long long labelScaleFactor;
@property (nonatomic) BOOL showsPointsOfInterest;
@property (retain, nonatomic) GEOPOICategoryFilter *pointsOfInterestFilter;
@property (nonatomic) BOOL showsRoadLabels;
@property (nonatomic) BOOL showsRoadShields;
@property (nonatomic) BOOL showsPointLabels;
@property (nonatomic) BOOL showsBuildings;
@property (nonatomic) BOOL showsTintBands;
@property (nonatomic) BOOL showsHillshade;
@property (nonatomic) BOOL showsHiking;
@property (nonatomic) BOOL showsVenues;
@property (nonatomic) BOOL showsGlobe;
@property (nonatomic) BOOL showsTraffic;
@property (nonatomic) long long terrainMode;
@property (nonatomic) unsigned char mapKitUsage;
@property (nonatomic) unsigned char mapKitClientMode;
@property (retain, nonatomic) NSObject<VKRouteOverlay> *routeOverlay;
@property (retain, nonatomic) VKRouteContext *routeContext;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)supportsSharingThumbnails;

/* instance methods */
- (id)initWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale homeQueue:(id)queue signpostId:(unsigned long long)id mapType:(int)type mapDisplayStyles:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; } *)styles mapDisplayStylesCount:(unsigned long long)count auditToken:(id)token;
- (id)initWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale homeQueue:(id)queue signpostId:(unsigned long long)id mapType:(int)type mapDisplayStyles:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; } *)styles mapDisplayStylesCount:(unsigned long long)count auditToken:(id)token useMultisampling:(BOOL)multisampling withError:(out id *)error;
- (void)dealloc;
- (void)softDealloc;
- (void)tileGroupWillChange;
- (void)tileGroupDidChange;
- (void)clearResources;
- (id)activeCanvas;
- (void)addOverlay:(id)overlay;
- (void)_transferSettingsFrom:(id)from to:(id)to;
- (void *)_labelSettings;
- (void)setLabelExclusionRegions:(id)regions;
- (void)setSelectedTrailId:(unsigned long long)id;
- (void)setSelectedTrailWithId:(unsigned long long)id name:(id)name locale:(id)locale;
- (void)addCustomFeatureDataSource:(id)source;
- (void)removeCustomFeatureDataSource:(id)source;
- (void)setMapRegion:(id)region pitch:(double)pitch yaw:(double)yaw;
- (void)setClearFontCache:(BOOL)cache;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch;
- (void)renderSnapshot:(id /* block */)snapshot;
- (void)cancel;
- (void)timeout;
- (void)cancelFlushingTileDecodes:(BOOL)decodes;
- (void)renderNextSnapshot;
- (void)willBecomeFullyDrawn;
- (void)didUpdateSceneStatus:(unsigned char)status;
- (BOOL)isChangingRegionWithoutAnimating;
- (void)didFinishDaVinciTransition;
- (void)didReceiveMemoryWarning;
- (void)willLayoutWithTimestamp:(double)timestamp withContext:(void *)context;
- (void)didPresent;
- (BOOL)wantsTimerTick;
- (void)nearestVenueDidChange:(const void *)change building:(const void *)building;
- (void)locationInHikingToolTipRegion:(unsigned long long)region;
- (BOOL)canChangeVenueFocus;
- (void)didFinishLoadingData;
- (void)didFinishLoadingDataWithError:(id)error;
- (void)didStartLoadingData;
- (void)labelManagerDidLayout;
- (void)labelMarkerDidChangeState:(const void *)state;
- (void)selectedLabelMarkerWillDisappear:(const void *)disappear;
- (void)didUpdateVerticalYawTo:(double)to;
- (BOOL)_daVinciDataAvailable;
- (BOOL)_globeIsEnabled;
- (BOOL)_elevatedGroundIsEnabled;
- (BOOL)_hillshadeIsAvailable;
- (BOOL)_hikingIsAvailable;
@end

#endif /* VKMapSnapshotCreator_h */
