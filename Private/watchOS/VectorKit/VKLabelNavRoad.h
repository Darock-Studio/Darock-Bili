//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKLabelNavRoad_h
#define VKLabelNavRoad_h
@import Foundation;

#include "VKLabelNavFeature-Protocol.h"
#include "VKLabelNavJunction.h"
#include "VKLabelNavRoadLabel.h"

@class NSString;
@protocol struct Matrix<float, 2, 1> { float x0[2] }, struct Matrix<float, 3, 1> { float x0[3] }, {Matrix<float, 2, 1>="_e"[2f]}, {Matrix<float, 3, 1>="_e"[3f]}, {optional<gss::LineType>="_hasValue"B"_value"(ValueUnion="data"[1C]"type"C)}, {shared_ptr<md::LabelTile>="__ptr_"^{LabelTile}"__cntrl_"^{__shared_weak_count}}, {vector<float, geo::StdAllocator<float, mdm::Allocator>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, geo::StdAllocator<float, mdm::Allocator>>="__value_"^f"__value_"{StdAllocator<float, mdm::Allocator>="_allocator"^{Allocator}}}}, {vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>>="__value_"^v"__value_"{StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>="_allocator"^{Allocator}}}};

@interface VKLabelNavRoad : NSObject<VKLabelNavFeature> {
  /* instance variables */
  void * _data;
  struct optional<gss::LineType> { BOOL _hasValue; union ValueUnion { unsigned char x[1] data; unsigned char type; } _value; } _lineType;
  unsigned long long _vertexIndexA;
  unsigned long long _vertexIndexB;
  struct GeoCodecsConnectivityJunction { unsigned int x0; unsigned int x1; struct GeoCodecsPointFeature * x2; unsigned long long x3; unsigned long long x4; } * _junctionA;
  struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>> { void *__begin_; void *__end_; struct __compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>> { void *__value_; struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __end_cap_; } _simplifiedPoints;
  struct vector<float, geo::StdAllocator<float, mdm::Allocator>> { float *__begin_; float *__end_; struct __compressed_pair<float *, geo::StdAllocator<float, mdm::Allocator>> { float *__value_; struct StdAllocator<float, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __end_cap_; } _simplifiedPointElevations;
  double _length;
  VKLabelNavRoadLabel *_roadSign;
  VKLabelNavRoadLabel *_roadShield;
  BOOL _isVisibilityCached[8];
  BOOL _cachedSignVisibility[8];
  BOOL _cachedShieldVisibility[8];
  BOOL _hasVisibleSigns;
  BOOL _hasVisibleShields;
}

@property (readonly, nonatomic) const void * tile;
@property (readonly, nonatomic) NSString *name;
@property (readonly, nonatomic) const char * cstrName;
@property (readonly, nonatomic) NSString *shieldDisplayGroup;
@property (readonly, nonatomic) NSString *shieldGroup;
@property (readonly, nonatomic) struct GeoCodecsConnectivityJunction { unsigned int x0; unsigned int x1; struct GeoCodecsPointFeature * x2; unsigned long long x3; unsigned long long x4; } * junctionB;
@property (readonly, weak, nonatomic) VKLabelNavJunction *navJunctionA;
@property (readonly, nonatomic) struct Matrix<float, 2, 1> { float x0[2] } direction2D;
@property (readonly, nonatomic) struct Matrix<float, 3, 1> { float x0[3] } direction3D;
@property (nonatomic) BOOL isOnRoute;
@property (nonatomic) BOOL isStartOfRoadName;
@property (nonatomic) BOOL isInGuidance;
@property (nonatomic) BOOL isGuidanceStepStart;
@property (nonatomic) BOOL areLabelsDisabled;
@property (nonatomic) struct PolylineCoordinate { unsigned int x0; float x1; } routeOffset;
@property (nonatomic) float routeCrossProduct;
@property (nonatomic) long long intraRoadPriorityForRoadLabel;
@property (nonatomic) long long intraRoadPriorityForShieldLabel;
@property (nonatomic) BOOL isRoadLabelUnique;
@property (readonly, nonatomic) BOOL isAwayFromRoute;
@property (readonly, nonatomic) BOOL suppressRoadSignIfShieldPresent;
@property (nonatomic) BOOL suppressRoadSignIfDeduped;
@property (readonly, nonatomic) BOOL isRamp;
@property (readonly, nonatomic) BOOL isOnewayToJunction;
@property (readonly, nonatomic) int roadClass;
@property (readonly, nonatomic) unsigned char roadSignAlignment;
@property (nonatomic) unsigned long long labelVertexIndexA;
@property (nonatomic) unsigned long long labelVertexIndexB;
@property (readonly, nonatomic) BOOL isEtaFeature;
@property (readonly, nonatomic) BOOL isTrafficCameraFeature;
@property (nonatomic) BOOL isPicked;
@property (readonly, nonatomic) BOOL isValid;

/* instance methods */
- (id)initWithRoadEdge:(const struct GeoCodecsRoadEdge { struct GeoCodecsMultiSectionFeature * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct GeoCodecsConnectivityJunction * x5; struct GeoCodecsConnectivityJunction * x6; } *)edge navJunctionA:(id)a routeOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })offset tile:(const void *)tile;
- (void)dealloc;
- (void)clearRoadSign;
- (void)clearRoadShield;
- (void)_updateWithNavContext:(struct NavContext { undefined * * x0; struct LabelManager * x1; struct MapNavLabeler * x2; struct LabelLayoutContext * x3; struct LabelNavLayoutContext * x4; } *)context threshold:(double)threshold;
- (void)_updateWithNavContext:(struct NavContext { undefined * * x0; struct LabelManager * x1; struct MapNavLabeler * x2; struct LabelLayoutContext * x3; struct LabelNavLayoutContext * x4; } *)context;
- (void)layoutWithNavContext:(struct NavContext { undefined * * x0; struct LabelManager * x1; struct MapNavLabeler * x2; struct LabelLayoutContext * x3; struct LabelNavLayoutContext * x4; } *)context;
- (void)prepareStyleVarsWithContext:(struct NavContext { undefined * * x0; struct LabelManager * x1; struct MapNavLabeler * x2; struct LabelLayoutContext * x3; struct LabelNavLayoutContext * x4; } *)context;
- (id)description;
- (void)getRoadEdge:(struct GeoCodecsRoadEdge { struct GeoCodecsMultiSectionFeature * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct GeoCodecsConnectivityJunction * x5; struct GeoCodecsConnectivityJunction * x6; } *)edge;
- (BOOL)matchesRoadEdge:(const struct GeoCodecsRoadEdge { struct GeoCodecsMultiSectionFeature * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct GeoCodecsConnectivityJunction * x5; struct GeoCodecsConnectivityJunction * x6; } *)edge;
- (BOOL)matchesRoad:(id)road;
- (BOOL)hasVisibleSigns;
- (BOOL)hasVisibleShields;
- (BOOL)hasShield;
- (id)labelWithType:(BOOL)type;
- (float)_findRoadOffsetForDistanceToRay:(float)ray rayStart:(struct Matrix<double, 3, 1> { double x0[3] })start rayVector:(struct Matrix<float, 2, 1> { float x0[2] })vector roadGraph:(id)graph;
- (BOOL)_findLabelAnchorPoint:(void *)point isShieldLabel:(BOOL)label desiredOffsetDistance:(float)distance maxOffsetDistance:(float)distance minJunctionDistance:(float)distance roadGraph:(id)graph;
- (void)createLabelWithNavContext:(struct NavContext { undefined * * x0; struct LabelManager * x1; struct MapNavLabeler * x2; struct LabelLayoutContext * x3; struct LabelNavLayoutContext * x4; } *)context isShieldLabel:(BOOL)label desiredOffsetDistance:(float)distance maxOffsetDistance:(float)distance minJunctionDistance:(float)distance minRouteDistance:(float)distance roadGraph:(id)graph artworkCache:(void *)cache;
- (void)recreateRoadSignWithAlignment:(unsigned char)alignment navContext:(struct NavContext { undefined * * x0; struct LabelManager * x1; struct MapNavLabeler * x2; struct LabelLayoutContext * x3; struct LabelNavLayoutContext * x4; } *)context artworkCache:(void *)cache;
- (void)recreateRoadShieldWithNavContext:(struct NavContext { undefined * * x0; struct LabelManager * x1; struct MapNavLabeler * x2; struct LabelLayoutContext * x3; struct LabelNavLayoutContext * x4; } *)context artworkCache:(void *)cache;
- (void)appendSimplifiedWorldRoadPoints:(void *)points pointElevations:(void *)elevations;
- (void)_worldRoadPoints:(void *)points elevations:(void *)elevations;
- (BOOL)_worldPointForRoadOffset:(float)offset worldPoint:(void *)point;
- (id)_newLabelWithNavContext:(struct NavContext { undefined * * x0; struct LabelManager * x1; struct MapNavLabeler * x2; struct LabelLayoutContext * x3; struct LabelNavLayoutContext * x4; } *)context isShieldLabel:(BOOL)label worldPoint:(struct Mercator3<double> { double x0[3] })point alignment:(unsigned char)alignment artworkCache:(void *)cache;
- (double)length;
- (BOOL)roadHasName;
@end

#endif /* VKLabelNavRoad_h */
