//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKMapCameraController_h
#define VKMapCameraController_h
@import Foundation;

#include "VKScreenCameraController.h"
#include "VKGesturingCameraController-Protocol.h"
#include "VKTimedAnimation.h"

@class NSString;

@interface VKMapCameraController : VKScreenCameraController<VKGesturingCameraController> {
  /* instance variables */
  VKTimedAnimation *_horizontalOffsetAnimation;
  double _minDistanceToGroundAlongForwardVector;
  double _maxDistanceToGroundAlongForwardVector;
  double _finalYaw;
  double _finalPitch;
}

@property (nonatomic) void * mapEngine;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithMapDataAccess:(void *)access animationRunner:(struct AnimationRunner { struct MapEngine * x0; } *)runner runLoopController:(struct RunLoopController { struct MapEngine * x0; long long x1; } *)controller cameraDelegate:(id)delegate;
- (void)dealloc;
- (void)canvasDidLayout;
- (long long)tileSize;
- (float)currentDisplayZoomLevel;
- (float)currentNormalizedZoomLevel;
- (float)currentStyleZoomLevel;
- (float)minimumNormalizedZoomLevel;
- (float)maximumNormalizedZoomLevel;
- (float)currentMaximumNormalizedZoomLevel;
- (float)currentMinimumNormalizedZoomLevel;
- (float)currentTopDownMinimumNormalizedZoomLevel;
- (float)normalizedZoomLevelAdjustmentForTileSize:(long long)size;
- (float)minimumPitchForNormalizedZoomLevel:(float)level;
- (float)idealPitchForNormalizedZoomLevel:(float)level;
- (float)maxPitchForNormalizedZoomLevel:(float)level;
- (void)rotateToPitch:(double)pitch withPoint:(const void *)point preserveAltitude:(BOOL)altitude animated:(BOOL)animated exaggerate:(BOOL)exaggerate;
- (void)rotateToYaw:(double)yaw withPoint:(const void *)point animated:(BOOL)animated;
- (void)zoom:(double)zoom withFocusPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)tapZoom:(struct CGPoint { double x0; double x1; })zoom levels:(double)levels completionHandler:(id /* block */)handler;
- (void)zoom:(double)zoom withPoint:(struct Matrix<double, 3, 1> { double x0[3] })point completionHandler:(id /* block */)handler;
- (void)zoomToLevel:(double)level withPoint:(struct Matrix<double, 3, 1> { double x0[3] })point;
- (void)startTrackingAnnotation:(id)annotation trackHeading:(BOOL)heading animated:(BOOL)animated duration:(double)duration timingFunction:(id /* block */)function;
- (BOOL)snapMapIfNecessary:(BOOL)necessary;
- (void)clampPitch:(double *)pitch yaw:(double *)yaw atTargetPositionZ:(double)z;
- (void)zoomToLevel:(double)level withFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)enter3DMode;
- (void)exit3DMode;
- (BOOL)isPitched;
- (BOOL)isFullyPitched;
- (double)minPitch;
- (double)maxPitch;
- (BOOL)canEnter3DMode;
- (void)panWithOffset:(struct CGPoint { double x0; double x1; })offset relativeToScreenPoint:(struct CGPoint { double x0; double x1; })point animated:(BOOL)animated duration:(double)duration completionHandler:(id /* block */)handler;
- (void)setGesturing:(BOOL)gesturing;
- (void)clampZoomLevelIfNecessaryAnimated:(BOOL)animated;
- (BOOL)canRotate;
- (void)updateCameraToPositionOrientationLimits;
- (void)updateCameraZBounds;
- (double)presentationYaw;
- (double)yaw;
- (void)setYaw:(double)yaw animated:(BOOL)animated;
- (struct { double x0; double x1; })_mercatorCenterCoordinateForMapRegion:(id)region;
- (double)durationToAnimateToMapRegion:(id)region;
- (void)setMapRegion:(id)region pitch:(double)pitch yaw:(double)yaw duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (struct Matrix<double, 3, 1> { double x0[3] })positionClampedToCameraRestriction:(struct Matrix<double, 3, 1> { double x0[3] })restriction;
- (void)_animateToPosition:(struct Matrix<double, 3, 1> { double x0[3] })position pitch:(double)pitch yaw:(double)yaw duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)_animateToPosition:(struct Matrix<double, 3, 1> { double x0[3] })position pitch:(double)pitch yaw:(double)yaw duration:(double)duration timingCurve:(id /* block */)curve forceDestination:(BOOL)destination completion:(id /* block */)completion;
- (void)_jumpToCenterPoint:(struct Matrix<double, 3, 1> { double x0[3] })point pitchRadians:(double)radians yawRadians:(double)radians;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration animationStyle:(long long)style timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration animationStyle:(long long)style timingCurve:(id /* block */)curve forceDestination:(BOOL)destination completion:(id /* block */)completion;
- (void)setCenterCoordinate3D:(struct { double x0; double x1; double x2; })d altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration animationStyle:(long long)style timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (struct { double x0; double x1; })centerCoordinate;
- (double)distanceFromCenterCoordinate;
- (double)altitude;
- (double)heading;
- (double)pitch;
- (void)setCenterCoordinateDistanceRange:(struct { double x0; double x1; BOOL x2; })range duration:(double)duration timingFunction:(id /* block */)function;
- (void)animateRegionWithDuration:(double)duration timingFunction:(id /* block */)function stepHandler:(id /* block */)handler completionHandler:(id /* block */)handler;
- (void)setRegionRestriction:(id)restriction duration:(double)duration timingFunction:(id /* block */)function;
- (double)minimumZoomLevel;
- (double)maximumZoomLevel;
- (double)currentZoomLevel;
- (double)topDownMinimumZoomLevel;
- (double)zoomLevelAdjustmentForTileSize:(long long)size;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (void)updateWithTimestamp:(double)timestamp withContext:(void *)context;
@end

#endif /* VKMapCameraController_h */
