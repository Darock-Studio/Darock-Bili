//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKCamera_h
#define VKCamera_h
@import Foundation;

#include "VKCameraRegionRestriction.h"
#include "VKFootprint.h"
#include "VKViewVolume.h"

@protocol struct Matrix<double, 3, 1> { double x0[3] }, struct Unit<geo::RadianUnitDescription, double> { double x0; }, struct VKCameraState { struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3] } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3] } x0; double x1; } x1; } x0; double x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; double x3; }, struct optional<double> { BOOL x0; union ValueUnion { unsigned char x0[8] double x1; } x1; }, {Matrix<double, 3, 1>="_e"[3d]}, {Matrix<double, 4, 4>="_e"[16d]}, {RigidTransform<double, double>="_translation"{Matrix<double, 3, 1>="_e"[3d]}"_rotation"{Quaternion<double>="_imaginary"{Matrix<double, 3, 1>="_e"[3d]}"_scalar"d}}, {Unit<geo::RadianUnitDescription, double>="_value"d}, {optional<double>="_hasValue"B"_value"(ValueUnion="data"[8C]"type"d)};

@interface VKCamera : NSObject {
  /* instance variables */
  struct RunLoopController { struct MapEngine * x0; long long x1; } * _runLoopController;
  double _maxFarClipDistance;
  BOOL _needsUpdate;
  BOOL _updating;
  struct Matrix<double, 3, 1> { double x[3] _e; } _forward;
  struct Matrix<double, 3, 1> { double x[3] _e; } _right;
  struct Matrix<double, 3, 1> { double x[3] _e; } _up;
  double _near;
  double _far;
  double _width;
  double _height;
  struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x[3] _e; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x[3] _e; } _imaginary; double _scalar; } _rotation; } _transform;
  struct Matrix<double, 4, 4> { double x[16] _e; } _worldMatrix;
}

@property (readonly, nonatomic) struct { BOOL x0; double x1; double x2; double x3; double x4; double x5; } frustum;
@property (nonatomic) const void * position;
@property (nonatomic) const void * orientation;
@property (nonatomic) double aspectRatio;
@property (readonly, nonatomic) struct Unit<geo::RadianUnitDescription, double> { double x0; } horizontalFieldOfView;
@property (nonatomic) struct Unit<geo::RadianUnitDescription, double> { double x0; } verticalFieldOfView;
@property (readonly, nonatomic) double farClipDistance;
@property (readonly, nonatomic) double nearClipDistance;
@property (nonatomic) double ndcZNear;
@property (nonatomic) struct VKCameraState { struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3] } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3] } x0; double x1; } x1; } x0; double x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; double x3; } cameraState;
@property (nonatomic) double minHeight;
@property (nonatomic) double maxHeight;
@property (nonatomic) double maxHeightNoPitch;
@property (nonatomic) double maxPitch;
@property (nonatomic) struct optional<double> { BOOL x0; union ValueUnion { unsigned char x0[8] double x1; } x1; } minDistanceToGroundRestriction;
@property (nonatomic) struct optional<double> { BOOL x0; union ValueUnion { unsigned char x0[8] double x1; } x1; } maxDistanceToGroundRestriction;
@property (retain, nonatomic) VKCameraRegionRestriction *regionRestriction;
@property (nonatomic) double terrainHeight;
@property (readonly, nonatomic) VKViewVolume *viewVolume;
@property (readonly, nonatomic) VKFootprint *footprint;
@property (readonly, nonatomic) struct Matrix<double, 3, 1> { double x0[3] } upVector;
@property (readonly, nonatomic) struct Matrix<double, 3, 1> { double x0[3] } rightVector;
@property (readonly, nonatomic) struct Matrix<double, 3, 1> { double x0[3] } forwardVector;
@property (readonly, nonatomic) struct Matrix<double, 3, 1> { double x0[3] } groundPoint;
@property (readonly, nonatomic) double pitch;
@property (readonly, nonatomic) double yaw;
@property (readonly, nonatomic) double tanHalfHorizFOV;
@property (readonly, nonatomic) double tanHalfVerticalFOV;
@property (readonly, nonatomic) double distanceToGroundAndFarClipPlaneIntersection;
@property (readonly, nonatomic) double screenHeightOfGroundAndFarClipPlaneIntersection;
@property (nonatomic) double fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;
@property (nonatomic) double canonicalPitch;
@property (nonatomic) double horizontalOffset;
@property (readonly, nonatomic) const void * scaledViewMatrix;
@property (readonly, nonatomic) const void * scaledProjectionMatrix;
@property (readonly, nonatomic) const void * scaledViewProjectionMatrix;
@property (readonly, nonatomic) const void * unscaledViewMatrix;
@property (readonly, nonatomic) const void * unscaledProjectionMatrix;

/* instance methods */
- (id)initWithRunLoopController:(struct RunLoopController { struct MapEngine * x0; long long x1; } *)controller;
- (id)detailedDescription;
- (id)description;
- (id)descriptionDictionaryRepresentation;
- (void)_setPosition:(const void *)position;
- (void)setMercatorPosition:(const void *)position;
- (struct Mercator3<double> { double x0[3] })mercatorPosition;
- (double)displayZoomLevel;
- (struct Matrix<double, 3, 1> { double x0[3] })groundPlaneIntersectionPoint;
- (id /* block */)annotationRectTest;
- (id /* block */)annotationCoordinateTest;
- (void)setNeedsUpdate;
- (void)updateIfNeeded;
- (struct optional<gm::Matrix<double, 3, 1>> { BOOL x0; union ValueUnion { unsigned char x0[24] struct Matrix<double, 3, 1> { double x0[3] } x1; } x1; })groundPointFromScreenPoint:(struct CGPoint { double x0; double x1; })point;
- (struct optional<gm::Matrix<double, 3, 1>> { BOOL x0; union ValueUnion { unsigned char x0[24] struct Matrix<double, 3, 1> { double x0[3] } x1; } x1; })groundPointFromScreenPoint:(struct CGPoint { double x0; double x1; })point atGroundLevel:(double)level;
- (struct CGPoint { double x0; double x1; })screenPointFromGroundPoint:(const void *)point;
- (double)widthOfViewAtDepth:(double)depth;
- (double)depthForViewWidth:(double)width;
- (float)zoomAtPoint:(struct CGPoint { double x0; double x1; })point;
- (float)zoomAtCentrePoint;
- (void)adjustClipPlanes;
- (struct View<double> { struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3] } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3] } x0; double x1; } x1; } x0; struct Matrix<double, 4, 4> { double x0[16] } x1; struct Matrix<double, 4, 4> { double x0[16] } x2; struct Matrix<double, 4, 4> { double x0[16] } x3; double x4; double x5; struct ViewSize { unsigned short x0; unsigned short x1; } x6; int x7; })view:(struct ViewSize { unsigned short x0; unsigned short x1; })view;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })cameraFrame:(BOOL)frame;
- (void)updateCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
@end

#endif /* VKCamera_h */
