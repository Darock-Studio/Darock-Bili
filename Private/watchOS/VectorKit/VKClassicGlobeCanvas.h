//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKClassicGlobeCanvas_h
#define VKClassicGlobeCanvas_h
@import Foundation;

#include "VKScreenCanvas.h"
#include "GEOResourceManifestTileGroupObserver-Protocol.h"
#include "VKARCameraController.h"
#include "VKGlobeCameraController.h"
#include "VKInteractiveMap-Protocol.h"

@class NSArray, NSString;
@protocol VKInteractiveMapDelegate, {shared_ptr<bool>="__ptr_"^B"__cntrl_"^{__shared_weak_count}}, {shared_ptr<ggl::FlyoverLibrary>="__ptr_"^{FlyoverLibrary}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<md::GlobeOverlayContainer>="__ptr_"^{GlobeOverlayContainer}"__cntrl_"^{__shared_weak_count}}, {unique_ptr<md::GlobeAdapter, std::default_delete<md::GlobeAdapter>>="__ptr_"{__compressed_pair<md::GlobeAdapter *, std::default_delete<md::GlobeAdapter>>="__value_"^{GlobeAdapter}}};

@interface VKClassicGlobeCanvas : VKScreenCanvas<GEOResourceManifestTileGroupObserver, VKInteractiveMap> {
  /* instance variables */
  double _contentScale;
  struct AltitudeDebugSettings { BOOL altitudePauseLoading; BOOL altitudeFreezeViewNode; BOOL altitudeTexturePaging; BOOL altitudeShowTileBounds; BOOL altitudeThreadDrawing; BOOL altitudeMipmapSatellite; BOOL altitudeMipmapFlyover; BOOL altitudeMipmapObjectTree; BOOL altitudeShowNightLight; float lodScale; float tileQualityThreshold; float hideMeshTime; float fadeSpeed; BOOL tourSpeedup; float tourSpeedupFactor; } _debugSettings;
  struct unique_ptr<md::GlobeAdapter, std::default_delete<md::GlobeAdapter>> { struct __compressed_pair<md::GlobeAdapter *, std::default_delete<md::GlobeAdapter>> { struct GlobeAdapter *__value_; } __ptr_; } _globeAdapter;
  void * _globe;
  void * _engine;
  struct shared_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer *__ptr_; struct __shared_weak_count *__cntrl_; } _overlayContainer;
  struct shared_ptr<ggl::FlyoverLibrary> { struct FlyoverLibrary *__ptr_; struct __shared_weak_count *__cntrl_; } _flyoverLibrary;
  BOOL _initialized;
  BOOL _canShowFlyover;
  struct shared_ptr<bool> { BOOL *__ptr_; struct __shared_weak_count *__cntrl_; } _isDead;
  BOOL _isLoading;
  BOOL _isDownloading;
  BOOL _coarseLoading;
  BOOL _tourIsDownloading;
  void * _loadingStatusTracker;
  double _currentZoomLevel;
  BOOL _arRoadDisabledState;
  struct CGSize { double width; double height; } _lastCanvasSize;
}

@property (copy, nonatomic) id /* block */ sceneDidLoadCallback;
@property (weak, nonatomic) NSObject<VKInteractiveMapDelegate> *delegate;
@property (nonatomic) int mapType;
@property (nonatomic) BOOL trafficEnabled;
@property (readonly, nonatomic) int flyoverMode;
@property (readonly, nonatomic) VKGlobeCameraController *globeCameraController;
@property (readonly, nonatomic) VKARCameraController *arCameraController;
@property (readonly, nonatomic) BOOL flyoverAvailable;
@property (nonatomic) BOOL disableRoads;
@property (nonatomic) BOOL disableLabels;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *overlays;
@property (readonly, nonatomic) NSArray *visibleTileSets;

/* class methods */
+ (BOOL)supportsMapType:(int)type scale:(int)scale;

/* instance methods */
- (BOOL)useNewRenderPath;
- (BOOL)isPointValidForGesturing:(struct CGPoint { double x0; double x1; })gesturing;
- (void)setMapType:(int)type animated:(BOOL)animated;
- (void)stopLoading;
- (id)initWithMapEngine:(void *)engine inBackground:(BOOL)background;
- (void)willDealloc;
- (void)dealloc;
- (id)consoleString:(BOOL)string;
- (void)_reloadStylesheet;
- (const void *)_styleManager;
- (const void *)_clientStyleState;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (void)setContentsScale:(double)scale;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)group;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)group;
- (id)detailedDescription;
- (void)stopSnappingAnimations;
- (struct CGPoint { double x0; double x1; })_centerScreenPoint;
- (void)transferStateFromCanvas:(id)canvas;
- (id)createFlyoverPreTourAnimation:(id)animation duration:(double)duration;
- (void)prepareFlyoverAnimation:(id)animation completion:(id /* block */)completion;
- (void)startFlyoverAnimation:(id)animation animateToStart:(BOOL)start labelChanged:(id /* block */)changed stateChange:(id /* block */)change;
- (void)stopFlyoverAnimation;
- (void)startFlyoverTourAnimation:(unsigned long long)animation animateToStart:(BOOL)start labelChanged:(id /* block */)changed stateChange:(id /* block */)change;
- (void)pauseFlyoverTourAnimation;
- (void)resumeFlyoverTourAnimation;
- (void)stopAnimations;
- (struct { double x0; double x1; })convertPointToMapPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGPoint { double x0; double x1; })convertMapPointToPoint:(struct { double x0; double x1; })point;
- (struct { double x0; double x1; })convertPointToCoordinate:(struct CGPoint { double x0; double x1; })coordinate;
- (struct { double x0; double x1; })convertPointToCoordinateOnSphere:(struct CGPoint { double x0; double x1; })sphere;
- (struct CGPoint { double x0; double x1; })convertCoordinateToPoint:(struct { double x0; double x1; })point;
- (struct CGPoint { double x0; double x1; })convertCoordinateToCameraModelPoint:(struct { double x0; double x1; })point;
- (void)updateWithTimestamp:(double)timestamp withContext:(void *)context;
- (void)_update;
- (void)updateCameraForFrameResize;
- (void)didPresent;
- (void)debugHighlightObjectAtPoint:(struct CGPoint { double x0; double x1; })point highlightTarget:(unsigned char)target;
- (id)attributionsForCurrentRegion;
- (id /* block */)annotationRectTest;
- (id /* block */)annotationCoordinateTest;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)addOverlay:(id)overlay;
- (void)removeOverlay:(id)overlay;
- (void)insertOverlay:(id)overlay belowOverlay:(id)overlay;
- (void)insertOverlay:(id)overlay aboveOverlay:(id)overlay;
- (void)didReceiveMemoryWarning:(BOOL)warning beAggressive:(BOOL)aggressive;
- (void)_updateDebugSettings;
- (void)waitForLoading;
- (void)setupMapScene;
- (void)enableFlyoverStatistics;
- (void)disableFlyoverStatistics;
- (void)resetFlyoverStatistics;
- (id)flyoverStatistics;
- (void)enableTileAnalytics;
- (void)disableTileAnalytics;
- (void)_setDefaultFov:(float)fov;
- (struct GlobeOverlayContainer { struct GlobeView * x0; id x1; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x0; } x2; double x3; } *)overlayContainer;
- (void)transitionToTracking:(BOOL)tracking mapMode:(long long)mode startLocation:(struct { double x0; double x1; })location startCourse:(double)course cameraController:(id)controller pounceCompletionHandler:(id /* block */)handler;
- (void)didBecomeActive;
- (void)didBecomeInActive;
@end

#endif /* VKClassicGlobeCanvas_h */
