//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKARWalkingCameraController_h
#define VKARWalkingCameraController_h
@import Foundation;

#include "VKScreenCameraController.h"
#include "VKGesturingCameraController-Protocol.h"

@class NSString;
@protocol {Coordinate3D<geo::Degrees, double>="latitude"{Unit<geo::DegreeUnitDescription, double>="_value"d}"longitude"{Unit<geo::DegreeUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}, {EulerAngles="pitch"{Unit<geo::RadianUnitDescription, double>="_value"d}"yaw"{Unit<geo::RadianUnitDescription, double>="_value"d}"roll"{Unit<geo::RadianUnitDescription, double>="_value"d}}, {Monitorable<md::ConfigValue<GEOConfigKeyDouble, double>>="_key"{?="key"{?="identifier"I"metadata"^v}}"_value"d"_listener"@"_delegate"{function<void (double)>="__f_"{__value_func<void (double)>="__buf_"{type="__lx"[24C]}"__f_"^v}}}, {Quaternion<double>="_imaginary"{Matrix<double, 3, 1>="_e"[3d]}"_scalar"d}, {Unit<geo::DegreeUnitDescription, double>="_value"d}, {vector<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>, std::allocator<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent> *, std::allocator<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>>>="__value_"^v}};

@interface VKARWalkingCameraController : VKScreenCameraController<VKGesturingCameraController> {
  /* instance variables */
  void * _arLogic;
  void * _elevationLogic;
  struct Quaternion<double> { struct Matrix<double, 3, 1> { double x[3] _e; } _imaginary; double _scalar; } _rotationCorrectionQuaternion;
  struct Coordinate3D<geo::Degrees, double> { struct Unit<geo::DegreeUnitDescription, double> { double _value; } latitude; struct Unit<geo::DegreeUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _coordinate;
  struct EulerAngles { struct Unit<geo::RadianUnitDescription, double> { double _value; } pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } yaw; struct Unit<geo::RadianUnitDescription, double> { double _value; } roll; } _eulerAngles;
  struct Unit<geo::DegreeUnitDescription, double> { double _value; } _heading;
  struct vector<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>, std::allocator<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>>> { void *__begin_; void *__end_; struct __compressed_pair<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent> *, std::allocator<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>>> { void *__value_; } __end_cap_; } _gestures;
  struct Monitorable<md::ConfigValue<GEOConfigKeyDouble, double>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; double _value; _delegate *_listener; struct function<void (double)> { struct __value_func<void (double)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } x0; } _maxClipDistance;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext * x0; struct __shared_weak_count * x1; })context mapDataAccess:(void *)access animationRunner:(struct AnimationRunner { struct MapEngine * x0; } *)runner runLoopController:(struct RunLoopController { struct MapEngine * x0; long long x1; } *)controller cameraDelegate:(id)delegate arLogic:(void *)logic elevationLogic:(void *)logic;
- (void)pushGesture:(void *)gesture;
- (void *)_locationProvider;
- (void)_updateClipPlanes;
- (void)updateWithTimestamp:(double)timestamp withContext:(void *)context;
- (id)_buildDebugString:(void *)string;
- (void)_updateDebugOverlay:(void *)overlay;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration animationStyle:(long long)style timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)setVkCamera:(id)camera;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate;
- (struct { double x0; double x1; })centerCoordinate;
- (void)setDistanceFromCenterCoordinate:(double)coordinate;
- (double)distanceFromCenterCoordinate;
- (double)altitude;
- (void)setAltitude:(double)altitude;
- (void)setHeading:(double)heading;
- (double)heading;
- (double)presentationHeading;
- (void)setPitch:(double)pitch;
- (double)pitch;
- (BOOL)usesVKCamera;
- (double)minimumZoomLevel;
- (double)maximumZoomLevel;
- (double)currentZoomLevel;
- (double)topDownMinimumZoomLevel;
- (double)minPitch;
- (double)maxPitch;
- (void)startTrackingAnnotation:(id)annotation trackHeading:(BOOL)heading animated:(BOOL)animated duration:(double)duration timingFunction:(id /* block */)function;
- (void)stopTrackingAnnotation;
@end

#endif /* VKARWalkingCameraController_h */
