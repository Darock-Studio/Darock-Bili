//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKGlobeCameraController_h
#define VKGlobeCameraController_h
@import Foundation;

#include "VKScreenCameraController.h"
#include "VKGesturingCameraController-Protocol.h"

@class NSString;
@protocol {CameraManager="_vptr$CameraManager"^^?"_panBegin"B"_panInProgress"B"_panEnd"B"_panCurrentCursor"{Matrix<int, 2, 1>="_e"[2i]}"_panPreviousCursor"{Matrix<int, 2, 1>="_e"[2i]}"_panStartCursor"{Matrix<int, 2, 1>="_e"[2i]}"_panStartPosition"{Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}"_panDistance"d"_panAtStartPosition"B"_rotateBegin"B"_rotateInProgress"B"_rotateEnd"B"_rotateStartPosition"{Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}"_rotateCurrentCursor"{Matrix<int, 2, 1>="_e"[2i]}"_rotateAngle"d"_tiltBegin"B"_tiltInProgress"B"_tiltEnd"B"_tiltStartPosition"{Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}"_tiltCurrentCursor"{Matrix<int, 2, 1>="_e"[2i]}"_tiltPreviousCursor"{Matrix<int, 2, 1>="_e"[2i]}"_tiltAngle"d"_zoomBegin"B"_zoomInProgress"B"_zoomEnd"B"_zoomStartPosition"{Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}"_zoomCurrentCursor"{Matrix<int, 2, 1>="_e"[2i]}"_zoomFactor"d"_zoomStartDistance"d"_zoomRotateToNorth"B"_useTiltLimit"B"_tiltLimitMode"i"_tiltLimitPushDownEnabled"B"_tiltLimitTransferInProgress"B"_tiltLimitPushDown"B"_startPushDownTilt"d"_tiltLimitTransferFraction"d"_startTiltLimitTilt"d"_startTiltLimitPosition"{Geocentric<double>="_e"[3d]}"_startTiltLimitDirection"{Matrix<double, 3, 1>="_e"[3d]}"_fullZoomTiltLimitFactor"d"_singleRestriction"{Box<double, 2>="_minimum"{Matrix<double, 2, 1>="_e"[2d]}"_maximum"{Matrix<double, 2, 1>="_e"[2d]}}"_westOfDatelineRestriction"{Box<double, 2>="_minimum"{Matrix<double, 2, 1>="_e"[2d]}"_maximum"{Matrix<double, 2, 1>="_e"[2d]}}"_eastOfDatelineRestriction"{Box<double, 2>="_minimum"{Matrix<double, 2, 1>="_e"[2d]}"_maximum"{Matrix<double, 2, 1>="_e"[2d]}}}, {shared_ptr<md::TaskContext>="__ptr_"^{TaskContext}"__cntrl_"^{__shared_weak_count}};

@interface VKGlobeCameraController : VKScreenCameraController<VKGesturingCameraController> {
  /* instance variables */
  struct CameraManager { undefined * *_vptr$CameraManager; BOOL _panBegin; BOOL _panInProgress; BOOL _panEnd; struct Matrix<int, 2, 1> { int x[2] _e; } _panCurrentCursor; struct Matrix<int, 2, 1> { int x[2] _e; } _panPreviousCursor; struct Matrix<int, 2, 1> { int x[2] _e; } _panStartCursor; struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _panStartPosition; double _panDistance; BOOL _panAtStartPosition; BOOL _rotateBegin; BOOL _rotateInProgress; BOOL _rotateEnd; struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _rotateStartPosition; struct Matrix<int, 2, 1> { int x[2] _e; } _rotateCurrentCursor; double _rotateAngle; BOOL _tiltBegin; BOOL _tiltInProgress; BOOL _tiltEnd; struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _tiltStartPosition; struct Matrix<int, 2, 1> { int x[2] _e; } _tiltCurrentCursor; struct Matrix<int, 2, 1> { int x[2] _e; } _tiltPreviousCursor; double _tiltAngle; BOOL _zoomBegin; BOOL _zoomInProgress; BOOL _zoomEnd; struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _zoomStartPosition; struct Matrix<int, 2, 1> { int x[2] _e; } _zoomCurrentCursor; double _zoomFactor; double _zoomStartDistance; BOOL _zoomRotateToNorth; BOOL _useTiltLimit; int _tiltLimitMode; BOOL _tiltLimitPushDownEnabled; BOOL _tiltLimitTransferInProgress; BOOL _tiltLimitPushDown; double _startPushDownTilt; double _tiltLimitTransferFraction; double _startTiltLimitTilt; struct Geocentric<double> { double x[3] _e; } _startTiltLimitPosition; struct Matrix<double, 3, 1> { double x[3] _e; } _startTiltLimitDirection; double _fullZoomTiltLimitFactor; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x[2] _e; } _minimum; struct Matrix<double, 2, 1> { double x[2] _e; } _maximum; } _singleRestriction; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x[2] _e; } _minimum; struct Matrix<double, 2, 1> { double x[2] _e; } _maximum; } _westOfDatelineRestriction; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x[2] _e; } _minimum; struct Matrix<double, 2, 1> { double x[2] _e; } _maximum; } _eastOfDatelineRestriction; } _cameraManager;
  double _currentDoublePanPitch;
  BOOL _isPitching;
  BOOL _isRotating;
  BOOL _wasPitched;
  BOOL _couldEnter3DMode;
  double _currentZoomLevel;
  double _maxZoomLevel;
  double _minZoomLevel;
  double _lastRotation;
  struct CGPoint { double x; double y; } _panStartScreenPoint;
  struct CGPoint { double x; double y; } _panLastScreenPoint;
  double _beganDoublePanPitch;
  struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
}

@property (nonatomic) void * globeView;
@property (nonatomic) BOOL tourShouldResumeWhenDoneGesturing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext * x0; struct __shared_weak_count * x1; })context mapDataAccess:(void *)access animationRunner:(struct AnimationRunner { struct MapEngine * x0; } *)runner runLoopController:(struct RunLoopController { struct MapEngine * x0; long long x1; } *)controller cameraDelegate:(id)delegate;
- (long long)tileSize;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (void)rotate:(double)rotate atScreenPoint:(struct CGPoint { double x0; double x1; })point;
- (void)pitch:(struct CGPoint { double x0; double x1; })pitch translation:(double)translation;
- (void)zoom:(double)zoom withFocusPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })point oldFactor:(double)factor newFactor:(double)factor;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration animationStyle:(long long)style timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)setCenterCoordinate3D:(struct { double x0; double x1; double x2; })d altitude:(double)altitude yaw:(double)yaw pitch:(double)pitch duration:(double)duration animationStyle:(long long)style timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (BOOL)snapMapIfNecessary:(BOOL)necessary;
- (void)rotateTo:(double)to animated:(BOOL)animated;
- (void)tiltTo:(double)to animated:(BOOL)animated exaggerate:(BOOL)exaggerate;
- (void)tapZoom:(struct CGPoint { double x0; double x1; })zoom levels:(double)levels completionHandler:(id /* block */)handler;
- (void)zoomToDistance:(struct CGPoint { double x0; double x1; })distance distance:(double)distance time:(double)time completionHandler:(id /* block */)handler;
- (void)zoomToDistance:(struct CGPoint { double x0; double x1; })distance distance:(double)distance time:(double)time;
- (void)panWithOffset:(struct CGPoint { double x0; double x1; })offset relativeToScreenPoint:(struct CGPoint { double x0; double x1; })point animated:(BOOL)animated duration:(double)duration completionHandler:(id /* block */)handler;
- (void)moveTo:(struct { double x0; double x1; })to zoom:(double)zoom rotation:(double)rotation tilt:(double)tilt duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)moveTo:(struct { double x0; double x1; })to height:(double)height useHeight:(BOOL)height zoom:(double)zoom rotation:(double)rotation tilt:(double)tilt duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (id /* block */)createMoveToZoomOutZoomInFrameFunction:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })function toLatLon:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })lon;
- (void)moveToZoomOutZoomInTransition:(struct { double x0; double x1; })transition height:(double)height useHeight:(BOOL)height zoom:(double)zoom rotation:(double)rotation tilt:(double)tilt duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (void)flyoverTourAnimation:(id)animation animateToStart:(BOOL)start labelChanged:(id /* block */)changed stateChange:(id /* block */)change;
- (void)pauseFlyoverTourAnimation;
- (void)resumeFlyoverTourAnimation;
- (void)stopFlyoverTourAnimation;
- (void)interruptFlyoverTourAnimation;
- (BOOL)isFlyoverTourStarted;
- (float)slowDownFactorFromLoadProgress;
- (void)adjustLoadingForAnimation:(float)animation progressFactor:(float)factor;
- (struct Geocentric<double> { double x0[3] })cameraPosition;
- (void)stopGlobeAnimations;
- (void)enter3DMode;
- (void)exit3DMode;
- (BOOL)canEnter3DMode;
- (BOOL)isPitched;
- (BOOL)isFullyPitched;
- (double)minPitch;
- (double)maxPitch;
- (void)_updateIsPitched;
- (void)_updateCanEnter3DMode;
- (void)updateState;
- (void)setGesturing:(BOOL)gesturing;
- (void)startTrackingAnnotation:(id)annotation trackHeading:(BOOL)heading animated:(BOOL)animated duration:(double)duration timingFunction:(id /* block */)function;
- (void)updateCameraManager;
- (double)presentationYaw;
- (void)setYaw:(double)yaw animated:(BOOL)animated;
- (id)mapRegion;
- (id)mapRegionIgnoringEdgeInsets;
- (double)geocAngleBetween:(struct { double x0; double x1; })between andCoordinate:(struct { double x0; double x1; })coordinate;
- (double)earthRadiusAt:(double)at;
- (double)greatCircleMidPointLatitude:(double)latitude fromLongitude:(double)longitude toLongitude:(double)longitude;
- (double)widestLatitudeForMapRegion:(id)region;
- (double)zoomForMapRegion:(id)region;
- (double)durationToAnimateToMapRegion:(id)region;
- (void)setMapRegion:(id)region pitch:(double)pitch yaw:(double)yaw duration:(double)duration timingCurve:(id /* block */)curve completion:(id /* block */)completion;
- (struct { double x0; double x1; })_centerCoordinateForMapRegion:(id)region;
- (struct { double x0; double x1; })centerCoordinate;
- (double)distanceFromCenterCoordinate;
- (double)altitude;
- (double)heading;
- (double)pitch;
- (double)_fovAdjustment;
- (double)minimumZoomLevel;
- (double)maximumZoomLevel;
- (double)currentZoomLevel;
- (double)topDownMinimumZoomLevel;
- (void)setCurrentZoomLevel:(double)level;
- (void)setMaxZoomLevel:(double)level;
- (void)setMinZoomLevel:(double)level;
- (void)setCenterCoordinateDistanceRange:(struct { double x0; double x1; BOOL x2; })range duration:(double)duration timingFunction:(id /* block */)function;
- (void)animateRegionWithDuration:(double)duration timingFunction:(id /* block */)function cursor:(struct Matrix<int, 2, 1> { int x0[2] })cursor stepHandler:(id /* block */)handler completionHandler:(id /* block */)handler;
- (void)setRegionRestriction:(id)restriction duration:(double)duration timingFunction:(id /* block */)function;
- (void)animateToRestriction:(id)restriction duration:(double)duration timingFunction:(id /* block */)function;
@end

#endif /* VKGlobeCameraController_h */
