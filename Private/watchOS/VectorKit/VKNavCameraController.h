//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKNavCameraController_h
#define VKNavCameraController_h
@import Foundation;

#include "VKCameraController.h"
#include "VKAttachedNavGestureCameraBehavior.h"
#include "VKDaVinciGestureCameraController.h"
#include "VKDetachedNavGestureCameraBehavior.h"
#include "VKGestureCameraBehavior.h"
#include "VKGesturingCameraController-Protocol.h"
#include "VKNavContext.h"
#include "VKNavContextObserver-Protocol.h"
#include "VKNavigationCameraController-Protocol.h"
#include "VKSceneConfiguration.h"
#include "VKTimedAnimation.h"

@class GEOMapRegion, NSString;
@protocol VKScreenCanvas<VKInteractiveMap, [4{Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}], {Box<double, 2>="_minimum"{Matrix<double, 2, 1>="_e"[2d]}"_maximum"{Matrix<double, 2, 1>="_e"[2d]}}, {CameraFrame<geo::Radians, double>="_target"{Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}"_distanceFromTarget"{Unit<geo::MeterUnitDescription, double>="_value"d}"_pitch"{Unit<geo::RadianUnitDescription, double>="_value"d}"_heading"{Unit<geo::RadianUnitDescription, double>="_value"d}"_roll"{Unit<geo::RadianUnitDescription, double>="_value"d}}, {Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}, {Matrix<double, 3, 1>="_e"[3d]}, {Matrix<float, 2, 1>="_e"[2f]}, {Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>>="_key"{?="key"{?="identifier"I"metadata"^v}}"_value"B"_listener"@"_delegate"{function<void (bool)>="__f_"{__value_func<void (bool)>="__buf_"{type="__lx"[24C]}"__f_"^v}}}, {Spring<double, 1, gdc::SpringType::Angular>="_position"d"_velocity"d"_restingPosition"d"_kSpring"d"_kDamper"d}, {Spring<double, 1, gdc::SpringType::Linear>="_position"d"_velocity"d"_restingPosition"d"_kSpring"d"_kDamper"d}, {Spring<double, 2, gdc::SpringType::Linear>="_position"{Matrix<double, 2, 1>="_e"[2d]}"_velocity"{Matrix<double, 2, 1>="_e"[2d]}"_restingPosition"{Matrix<double, 2, 1>="_e"[2d]}"_kSpring"d"_kDamper"d}, {Unit<geo::MeterUnitDescription, double>="_value"d}, {Unit<geo::RadianUnitDescription, double>="_value"d}, {WindowedSampler<60UL>="_min"d"_max"d"_avg"d"_sum"d"_idx"{optional<unsigned long>="_hasValue"B"_value"(ValueUnion="data"[8C]"type"Q)}"_samples"{array<double, 60UL>="__elems_"[60d]}}, {basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}, {shared_ptr<gss::StylesheetQuery<gss::ScenePropertyID>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}, {shared_ptr<md::TaskContext>="__ptr_"^{TaskContext}"__cntrl_"^{__shared_weak_count}}, {unique_ptr<md::LabelMetrics, std::default_delete<md::LabelMetrics>>="__ptr_"{__compressed_pair<md::LabelMetrics *, std::default_delete<md::LabelMetrics>>="__value_"^{LabelMetrics}}}, {vector<NavCameraPixelFrameRate, std::allocator<NavCameraPixelFrameRate>>="__begin_"^{NavCameraPixelFrameRate}"__end_"^{NavCameraPixelFrameRate}"__end_cap_"{__compressed_pair<NavCameraPixelFrameRate *, std::allocator<NavCameraPixelFrameRate>>="__value_"^{NavCameraPixelFrameRate}}}, {vector<geo::Coordinate3D<geo::Radians, double>, std::allocator<geo::Coordinate3D<geo::Radians, double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<geo::Coordinate3D<geo::Radians, double> *, std::allocator<geo::Coordinate3D<geo::Radians, double>>>="__value_"^v}};

@interface VKNavCameraController : VKCameraController<VKNavigationCameraController, VKGesturingCameraController, VKNavContextObserver> {
  /* instance variables */
  unsigned char _cameraType;
  unsigned char _headingType;
  struct Unit<geo::RadianUnitDescription, double> { double _value; } _puckCourse;
  struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _puckCoordinate;
  struct Unit<geo::RadianUnitDescription, double> { double _value; } _headingDelta;
  struct Unit<geo::RadianUnitDescription, double> { double _value; } _headingMinDelta;
  struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _lastCalculatedCameraFrame;
  struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _cameraFrame;
  BOOL _needsUpdate;
  struct Spring<double, 1, gdc::SpringType::Linear> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _pitchSpring;
  struct Spring<double, 1, gdc::SpringType::Angular> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _headingSpring;
  struct Spring<double, 1, gdc::SpringType::Linear> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _distanceFromTargetSpring;
  struct Spring<double, 2, gdc::SpringType::Linear> { struct Matrix<double, 2, 1> { double x[2] _e; } _position; struct Matrix<double, 2, 1> { double x[2] _e; } _velocity; struct Matrix<double, 2, 1> { double x[2] _e; } _restingPosition; double _kSpring; double _kDamper; } _screenPositionSpring;
  struct Unit<geo::MeterUnitDescription, double> { double _value; } _cameraDistanceFromTarget;
  struct Unit<geo::RadianUnitDescription, double> { double _value; } _cameraPitch;
  double _previousUpdateTime;
  double _ignoreStyleChangeStartTime;
  double _lastSARUpdateTime;
  double _maxZoomScale;
  double _minZoomScale;
  VKGestureCameraBehavior *_gestureBehavior;
  VKAttachedNavGestureCameraBehavior *_attachedGestureBehavior;
  VKDetachedNavGestureCameraBehavior *_detachedGestureBehavior;
  VKDaVinciGestureCameraController *_davinciGestureCameraController;
  BOOL _isDetached;
  BOOL _isIgnoringStyleChange;
  BOOL _panning;
  BOOL _rotating;
  BOOL _pitching;
  BOOL _zooming;
  VKTimedAnimation *_transitionAnimation;
  VKTimedAnimation *_snapPitchAnimation;
  VKTimedAnimation *_snapHeadingAnimation;
  struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _transitionFrame;
  struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } _currentStyleName;
  struct vector<geo::Coordinate3D<geo::Radians, double>, std::allocator<geo::Coordinate3D<geo::Radians, double>>> { void *__begin_; void *__end_; struct __compressed_pair<geo::Coordinate3D<geo::Radians, double> *, std::allocator<geo::Coordinate3D<geo::Radians, double>>> { void *__value_; } __end_cap_; } _coordinatesToFrame;
  unsigned char _styleManeuversToFrame;
  unsigned char _maneuversToFrame;
  unsigned char _styleLegsToFrame;
  unsigned char _segmentsToFrame;
  double _minCameraHeight;
  double _maxCameraHeight;
  struct Unit<geo::RadianUnitDescription, double> { double _value; } _minCameraPitch;
  struct Unit<geo::RadianUnitDescription, double> { double _value; } _maxCameraPitch;
  struct VKEdgeInsets { float top; float left; float bottom; float right; } _previousMapEdgeInsets;
  struct VKEdgeInsets { float top; float left; float bottom; float right; } _framingEdgeInset;
  struct VKEdgeInsets { float top; float left; float bottom; float right; } _framingEdgeInsetProportional;
  struct Matrix<float, 2, 1> { float x[2] _e; } _puckMovementBoundsMin;
  struct Matrix<float, 2, 1> { float x[2] _e; } _puckMovementBoundsMax;
  struct Matrix<float, 2, 1> { float x[2] _e; } _idealPuckScreenPosition;
  double _minHeightDeltaChangeHorizontal;
  double _maxHeightDeltaChangeHorizontal;
  double _minHeightDeltaChangeVertical;
  double _maxHeightDeltaChangeVertical;
  double _halfPuckSize;
  struct Box<double, 2> { struct Matrix<double, 2, 1> { double x[2] _e; } _minimum; struct Matrix<double, 2, 1> { double x[2] _e; } _maximum; } _viewableScreenRect;
  struct Box<double, 2> { struct Matrix<double, 2, 1> { double x[2] _e; } _minimum; struct Matrix<double, 2, 1> { double x[2] _e; } _maximum; } _framingScreenRect;
  BOOL _enablePan;
  BOOL _enableZoom;
  BOOL _enablePitch;
  BOOL _enableRotate;
  float _panReturnDelayTime;
  unsigned char _alternateFramingSource;
  unsigned char _secondaryAlternateFramingSource;
  double _maxFramingDistance;
  double _framingDistanceAfterManeuver;
  VKNavContext *_navContext;
  struct { double latitude; double longitude; } _locationCoordinate;
  struct PolylineCoordinate { unsigned int index; float offset; } _routeCoordinate;
  BOOL _frameAllGroupedManeuvers;
  unsigned char _maxManeuversToFrame;
  BOOL _ignorePointsBehind;
  struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _routeFocusCoordinate;
  unsigned long long _lastTargetStyleIdentifier;
  unsigned long long _previousSearchItemCount;
  double _desiredZoomScale;
  float _animationTime;
  BOOL _isTracking;
  struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
  double _depthNear;
  BOOL _leftHanded;
  BOOL _sentZoomNotification;
  BOOL _enableDynamicFrameRate;
  D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}} x[4{Coordinate3] _cornerCoordinates;
  struct WindowedSampler<60UL> { double _min; double _max; double _avg; double _sum; struct optional<unsigned long> { BOOL _hasValue; union ValueUnion { unsigned char x[8] data; unsigned long long type; } _value; } _idx; struct array<double, 60UL> { double x[60] __elems_; } _samples; } _pixelSamples;
  struct Sampler { double _min; double _max; double _avg; double _sum; unsigned long long _count; } _requesteDisplayRateSampler;
  long long _requestedDisplayRate;
  BOOL _isElevatedRoute;
  void * _cameraManager;
  struct unique_ptr<md::LabelMetrics, std::default_delete<md::LabelMetrics>> { struct __compressed_pair<md::LabelMetrics *, std::default_delete<md::LabelMetrics>> { struct LabelMetrics *__value_; } __ptr_; } _labelMetrics;
  struct vector<NavCameraPixelFrameRate, std::allocator<NavCameraPixelFrameRate>> { struct NavCameraPixelFrameRate *__begin_; struct NavCameraPixelFrameRate *__end_; struct __compressed_pair<NavCameraPixelFrameRate *, std::allocator<NavCameraPixelFrameRate>> { struct NavCameraPixelFrameRate *__value_; } __end_cap_; } _pixelChangeFrameRate;
  struct Matrix<double, 3, 1> { double x[3] _e; } _lastProjectedPosition;
  double _farClipPlaneFactor;
  struct shared_ptr<gss::StylesheetQuery<gss::ScenePropertyID>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _sceneQuery;
  unsigned long long _cameraMode;
  BOOL _didNavCameraTransition;
  struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _delegate *_listener; struct function<void (bool)> { struct __value_func<void (bool)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } x0; } _showConsole;
  struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _delegate *_listener; struct function<void (bool)> { struct __value_func<void (bool)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } x0; } _showOverlay;
  struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _delegate *_listener; struct function<void (bool)> { struct __value_func<void (bool)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } x0; } _showAttributes;
  struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _delegate *_listener; struct function<void (bool)> { struct __value_func<void (bool)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } x0; } _showProperties;
  struct Monitorable<md::ConfigValue<GEOConfigKeyBOOL, bool>> { struct { struct { unsigned int identifier; void *metadata; } key; } _key; BOOL _value; _delegate *_listener; struct function<void (bool)> { struct __value_func<void (bool)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } x0; } _showLegend;
}

@property (weak, nonatomic) VKScreenCanvas<VKInteractiveMap> *screenCanvas;
@property (weak, nonatomic) VKSceneConfiguration *sceneConfiguration;
@property (nonatomic) double zoomScale;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } clientFramingInsets;
@property (nonatomic) struct { double x0; double x1; } centerCoordinate;
@property (nonatomic) double distanceFromCenterCoordinate;
@property (nonatomic) double heading;
@property (nonatomic) double pitch;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) double minPitch;
@property (readonly, nonatomic) double maxPitch;
@property (readonly, nonatomic) BOOL isPitched;
@property (readonly, nonatomic) BOOL isRotated;
@property (readonly, nonatomic) BOOL isFullyPitched;
@property (readonly, nonatomic) void * mapDataAccess;
@property (readonly, nonatomic) struct AnimationRunner { struct MapEngine * x0; } * animationRunner;
@property (readonly, nonatomic) struct RunLoopController { struct MapEngine * x0; long long x1; } * runLoopController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext * x0; struct __shared_weak_count * x1; })context device:(void *)device mapDataAccess:(void *)access animationRunner:(struct AnimationRunner { struct MapEngine * x0; } *)runner runLoopController:(struct RunLoopController { struct MapEngine * x0; long long x1; } *)controller cameraDelegate:(id)delegate;
- (void)dealloc;
- (void)startWithPounce:(BOOL)pounce startLocation:(struct { double x0; double x1; })location startCourse:(double)course pounceCompletionHandler:(id /* block */)handler;
- (id)_detachedGestureController;
- (void)_setDetached:(BOOL)detached;
- (void)zoom:(double)zoom withFocusPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)startIgnoreStyleChangeTimer;
- (void)stopIgnoreStyleChange;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })point oldFactor:(double)factor newFactor:(double)factor;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_updateObserverCouldZoomIn:(BOOL)in couldZoomOut:(BOOL)out;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })point panAtStartPoint:(BOOL)point;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })translation;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })point newValue:(double)value;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })point translation:(double)translation;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })point degrees:(double)degrees;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)transferGestureState:(id)state;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)isGesturing;
- (void)puckAnimator:(id)animator runAnimation:(id)animation;
- (void)puckAnimator:(id)animator updatedPosition:(const void *)position course:(const void *)course;
- (struct optional<double> { union { char x0; double x1; } x0; BOOL x1; })puckAnimator:(id)animator getElevationWithCoordinate:(const void *)coordinate;
- (void)updateLocation:(const void *)location andCourse:(const void *)course;
- (void)projectCoordinate:(struct { double x0; double x1; })coordinate toPoint:(struct CGPoint { double x0; double x1; } *)point;
- (void)puckAnimatorDidStop:(id)stop;
- (BOOL)wantsTimerTick;
- (void)updateCameraState;
- (void)resetSpringsToResting;
- (void)_updateClipPlanes;
- (long long)defaultDisplayRate;
- (long long)displayRate;
- (void)updateWithTimestamp:(double)timestamp withContext:(void *)context;
- (double)_calculateMaxPixelChangeAndUpdateCorners;
- (BOOL)_hasRunningAnimation;
- (id)detailedDescription;
- (id)_debugText:(BOOL)text showNavCameraDebugConsoleAttributes:(BOOL)attributes includeSensitiveAttributes:(BOOL)attributes;
- (struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> { void * x0; struct __shared_weak_count * x1; })_getActiveSceneManager;
- (void)_updateDebugText;
- (void)_updateDebugOverlay;
- (struct Matrix<double, 2, 1> { double x0[2] })puckScreenPoint;
- (void)_updateSprings:(double)springs;
- (BOOL)_springsNeedUpdate;
- (void)stylesheetDidChange;
- (void)stylesheetDidReload;
- (void)_updateSceneQuery;
- (void)_updateSceneStyles:(BOOL)styles updatePitchLimitOnly:(BOOL)only;
- (void)_updateStyles;
- (void)_updateLabelMetrics;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })currentCameraFrame;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })restingCameraFrame;
- (void)animateCameraWithDuration:(float)duration fromFrame:(const void *)frame completionHandler:(id /* block */)handler;
- (void)returnToTrackingWithDelay:(double)delay resetZoom:(BOOL)zoom;
- (void)returnToPuck;
- (void)setNavContext:(id)context;
- (BOOL)canEnter3DMode;
- (double)_normalizedZoomLevelForDisplayZoomLevel:(double)level;
- (double)minimumZoomLevel;
- (double)maximumZoomLevel;
- (double)currentZoomLevel;
- (double)topDownMinimumZoomLevel;
- (BOOL)canZoomInForTileSize:(long long)size;
- (BOOL)_canZoomIn;
- (BOOL)canZoomOutForTileSize:(long long)size;
- (BOOL)_canZoomOut;
- (void)stopSnappingAnimations;
- (BOOL)isPitchEnabled;
- (BOOL)isRotateEnabled;
- (void)stop;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })calculateHeading;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2] } x0; struct Matrix<double, 2, 1> { double x0[2] } x1; })calculateViewableScreenRectForEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })insets;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2] } x0; struct Matrix<double, 2, 1> { double x0[2] } x1; })calculateViewableScreenRect;
- (void)updateSpringsForTrackingCamera;
- (double)distanceToManeuver:(unsigned long long)maneuver;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })routeLocationAtDistance:(double)distance fromManeuver:(unsigned long long)maneuver;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })routeCoordinateAtDistance:(double)distance;
- (void)updateManeuversToFrame;
- (BOOL)_addStepToFraming:(unsigned long long)framing forRoute:(id)route;
- (void)_addWaypointToFraming:(id)framing forRoute:(id)route;
- (void)updatePointsToFrame;
- (struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; })_coordinateForGeoLocation:(struct { double x0; double x1; double x2; })location;
- (void)_addAdditionalRoutePointsToFrameToList:(void *)list;
- (void)_updateRouteSinuosity;
- (void)updateSpringsForFramingCamera;
- (void)_updateForAnimatedEdgeInsets;
- (void)navContextStateDidChange:(id)change;
- (void)navContextCameraHeadingOverrideDidChange:(id)change;
- (void)_setNeedsUpdate;
- (void)_updateZoomScaleLimts;
- (void)_updateDidNavCameraTransition;
- (void)updateState;
- (double)minZoomScale;
- (double)maxZoomScale;
- (double)minZoomHeight;
- (double)maxZoomHeight;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })minCameraPitch;
- (struct Unit<geo::RadianUnitDescription, double> { double x0; })maxCameraPitch;
- (void)setEdgeInsetsAnimating:(BOOL)animating;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })insets;
- (void)_snapPitch;
- (void)_snapHeading;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })cameraFrame;
- (void)setCameraFrame:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })frame;
- (void)stopAnimations;
- (void)setVkCamera:(id)camera;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (void)canvasDidLayout;
- (unsigned char)cameraHeadingType;
- (void)_setNavCameraIsDetached:(BOOL)detached;
- (void)_setNavCameraTransitionComplete:(BOOL)complete;
- (float)_currentRoadSignOffset;
- (BOOL)usesVKCamera;
- (BOOL)snapMapIfNecessary:(BOOL)necessary;
- (void)rotateTo:(double)to animated:(BOOL)animated;
- (void)pitchTo:(double)to animated:(BOOL)animated;
- (void)_updateCameraLimits;
- (long long)tileSize;
- (float)maximumNormalizedZoomLevel;
- (float)minimumNormalizedZoomLevel;
- (float)minPitchForNormalizedZoomLevel:(float)level;
- (float)idealPitchForNormalizedZoomLevel:(float)level;
- (float)maxPitchForNormalizedZoomLevel:(float)level;
@end

#endif /* VKNavCameraController_h */
