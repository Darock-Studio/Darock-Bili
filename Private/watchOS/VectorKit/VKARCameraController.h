//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKARCameraController_h
#define VKARCameraController_h
@import Foundation;

#include "VKScreenCameraController.h"
#include "VKGesturingCameraController-Protocol.h"
#include "VKTimedAnimation.h"

@class NSString;
@protocol struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3] } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3] } x0; double x1; } x1; }, struct Unit<geo::DegreeUnitDescription, double> { double x0; }, {CameraFrame<geo::Radians, double>="_target"{Coordinate3D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"altitude"{Unit<geo::MeterUnitDescription, double>="_value"d}}"_distanceFromTarget"{Unit<geo::MeterUnitDescription, double>="_value"d}"_pitch"{Unit<geo::RadianUnitDescription, double>="_value"d}"_heading"{Unit<geo::RadianUnitDescription, double>="_value"d}"_roll"{Unit<geo::RadianUnitDescription, double>="_value"d}}, {Coordinate2D<geo::Radians, double>="latitude"{Unit<geo::RadianUnitDescription, double>="_value"d}"longitude"{Unit<geo::RadianUnitDescription, double>="_value"d}}, {Quaternion<double>="_imaginary"{Matrix<double, 3, 1>="_e"[3d]}"_scalar"d}, {RigidTransform<double, double>="_translation"{Matrix<double, 3, 1>="_e"[3d]}"_rotation"{Quaternion<double>="_imaginary"{Matrix<double, 3, 1>="_e"[3d]}"_scalar"d}}, {Unit<geo::DegreeUnitDescription, double>="_value"d}, {Unit<geo::RadianUnitDescription, double>="_value"d}, {shared_ptr<md::TaskContext>="__ptr_"^{TaskContext}"__cntrl_"^{__shared_weak_count}};

@interface VKARCameraController : VKScreenCameraController<VKGesturingCameraController> {
  /* instance variables */
  struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
  double _currentZoomLevel;
  double _maxZoomLevel;
  double _height;
  double _altitudeOffset;
  struct Unit<geo::RadianUnitDescription, double> { double _value; } _fovy;
  struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; struct Unit<geo::MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<geo::MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<geo::RadianUnitDescription, double> { double _value; } _pitch; struct Unit<geo::RadianUnitDescription, double> { double _value; } _heading; struct Unit<geo::RadianUnitDescription, double> { double _value; } _roll; } _cameraFrame;
  struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x[3] _e; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x[3] _e; } _imaginary; double _scalar; } _rotation; } _baseTransform;
  struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x[3] _e; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x[3] _e; } _imaginary; double _scalar; } _rotation; } _arTransform;
  struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x[3] _e; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x[3] _e; } _imaginary; double _scalar; } _rotation; } _currentARTransform;
  struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x[3] _e; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x[3] _e; } _imaginary; double _scalar; } _rotation; } _lastARTransform;
  struct Quaternion<double> { struct Matrix<double, 3, 1> { double x[3] _e; } _imaginary; double _scalar; } _arOrientation;
  VKTimedAnimation *_transitionAnimation;
  long long _interfaceOrientation;
  struct Quaternion<double> { struct Matrix<double, 3, 1> { double x[3] _e; } _imaginary; double _scalar; } _interfaceOrientationRotation;
  struct Coordinate2D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double _value; } latitude; struct Unit<geo::RadianUnitDescription, double> { double _value; } longitude; } _currentCoordinate;
}

@property (nonatomic) void * mapEngine;
@property (nonatomic) void * globeView;
@property (nonatomic) struct Unit<geo::DegreeUnitDescription, double> { double x0; } fieldOfView;
@property (nonatomic) BOOL overrideARFieldOfView;
@property (readonly, nonatomic) float heightScale;
@property (nonatomic) struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3] } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3] } x0; double x1; } x1; } offsetTransform;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext * x0; struct __shared_weak_count * x1; })context mapDataAccess:(struct MapDataAccess *)access animationRunner:(struct AnimationRunner { struct MapEngine * x0; } *)runner runLoopController:(struct RunLoopController { struct MapEngine * x0; long long x1; } *)controller cameraDelegate:(id)delegate;
- (void)dealloc;
- (long long)tileSize;
- (void)updateGlobeFromCamera;
- (struct Geocentric<double> { double x0[3] })cameraPosition;
- (BOOL)isPitched;
- (BOOL)isFullyPitched;
- (double)minPitch;
- (double)maxPitch;
- (double)presentationYaw;
- (void)setYaw:(double)yaw animated:(BOOL)animated;
- (struct Matrix<double, 3, 1> { double x0[3] })_intersectAndResolveWorldCollision:(const void *)collision;
- (id)mapRegion;
- (id)mapRegionIgnoringEdgeInsets;
- (struct { double x0; double x1; })centerCoordinate;
- (double)distanceFromCenterCoordinate;
- (double)altitude;
- (double)heading;
- (double)pitch;
- (double)_fovAdjustment;
- (double)minimumZoomLevel;
- (double)maximumZoomLevel;
- (double)currentZoomLevel;
- (double)topDownMinimumZoomLevel;
- (void)setCurrentZoomLevel:(double)level;
- (void)setMaxZoomLevel:(double)level;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (void)updateWithARSession:(id)arsession;
- (void)updateWithTimestamp:(double)timestamp withContext:(void *)context;
- (void)_updateARContext;
- (void)_updateBaseTransform;
- (void)_setupPounceAnimation:(const void *)animation duration:(double)duration completion:(id /* block */)completion;
- (void)trasitionToARModeAtCoordinate:(struct { double x0; double x1; })coordinate withDuration:(double)duration completion:(id /* block */)completion;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<geo::Radians, double> { struct Unit<geo::RadianUnitDescription, double> { double x0; } x0; struct Unit<geo::RadianUnitDescription, double> { double x0; } x1; struct Unit<geo::MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<geo::MeterUnitDescription, double> { double x0; } x1; struct Unit<geo::RadianUnitDescription, double> { double x0; } x2; struct Unit<geo::RadianUnitDescription, double> { double x0; } x3; struct Unit<geo::RadianUnitDescription, double> { double x0; } x4; })cameraFrame;
- (void)trasitionToARModeFromCameraFrame:(const void *)frame withDuration:(double)duration completion:(id /* block */)completion;
- (struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3] } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3] } x0; double x1; } x1; })arCameraTransform;
- (void)updateCameraFrameFromARTransform;
- (void)arSessionWasInterrupted:(unsigned long long)interrupted;
@end

#endif /* VKARCameraController_h */
