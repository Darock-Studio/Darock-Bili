//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKGestureCameraBehavior_h
#define VKGestureCameraBehavior_h
@import Foundation;

#include "VKCameraController.h"
#include "VKGesturingCameraController-Protocol.h"

@class NSString;

@interface VKGestureCameraBehavior : NSObject<VKGesturingCameraController> {
  /* instance variables */
  BOOL _pinching;
  struct CGPoint { double x; double y; } _pinchStartFocusPoint;
  BOOL _panning;
  struct CGPoint { double x; double y; } _panStartFocusPoint;
  struct CGPoint { double x; double y; } _panStartScreenPoint;
  struct CGPoint { double x; double y; } _panLastScreenPoint;
  BOOL _rotating;
  struct CGPoint { double x; double y; } _rotateStartFocusPoint;
  double _lastRotation;
  BOOL _shouldRotationRubberband;
  BOOL _pitching;
  struct CGPoint { double x; double y; } _pitchStartFocusPoint;
  struct CGPoint { double x; double y; } _pitchStartScreenPoint;
  BOOL _notifyCameraStateChanges;
  VKCameraController *_cameraController;
}

@property (nonatomic) BOOL allowsZoomRubberbanding;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithCameraController:(id)controller;
- (void)transferGestureState:(id)state;
- (void)zoom:(double)zoom withFocusPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)tapZoom:(struct CGPoint { double x0; double x1; })zoom levels:(double)levels completionHandler:(id /* block */)handler;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)beginZoom:(struct CGPoint { double x0; double x1; })zoom;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })point oldFactor:(double)factor newFactor:(double)factor;
- (void)updateZoom:(struct CGPoint { double x0; double x1; })zoom oldFactor:(double)factor newFactor:(double)factor;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)endZoom:(struct CGPoint { double x0; double x1; })zoom;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })point panAtStartPoint:(BOOL)point;
- (void)beginPan:(struct CGPoint { double x0; double x1; })pan;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })translation;
- (void)updatePan:(struct CGPoint { double x0; double x1; })pan lastScreenPoint:(struct CGPoint { double x0; double x1; })point;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)endPan:(struct CGPoint { double x0; double x1; })pan;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)beginRotate:(struct CGPoint { double x0; double x1; })rotate;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })point newValue:(double)value;
- (void)updateRotate:(double)rotate atScreenPoint:(struct CGPoint { double x0; double x1; })point;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)endRotate:(struct CGPoint { double x0; double x1; })rotate;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (void)beginPitch:(struct CGPoint { double x0; double x1; })pitch;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })point translation:(double)translation;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })point degrees:(double)degrees;
- (void)updatePitch:(struct CGPoint { double x0; double x1; })pitch translation:(double)translation;
- (void)updatePitch:(struct CGPoint { double x0; double x1; })pitch degrees:(double)degrees;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)endPitch:(struct CGPoint { double x0; double x1; })pitch;
- (BOOL)isGesturing;
- (BOOL)isPitching;
- (BOOL)isPinching;
- (BOOL)isPanning;
- (BOOL)isRotating;
- (void)updateWithTimestamp:(double)timestamp withContext:(void *)context;
@end

#endif /* VKGestureCameraBehavior_h */
