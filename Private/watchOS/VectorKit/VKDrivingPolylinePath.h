//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKDrivingPolylinePath_h
#define VKDrivingPolylinePath_h
@import Foundation;

#include "VKPolylinePath.h"

@protocol {vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}, {vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}}, {vector<md::GradientTraffic, std::allocator<md::GradientTraffic>>="__begin_"^{GradientTraffic}"__end_"^{GradientTraffic}"__end_cap_"{__compressed_pair<md::GradientTraffic *, std::allocator<md::GradientTraffic>>="__value_"^{GradientTraffic}}};

@interface VKDrivingPolylinePath : VKPolylinePath {
  /* instance variables */
  struct GradientTraffic { float blend; unsigned char start; unsigned char end; } _standardModeTraffic;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _laneHalfWidths;
  struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } _distances;
  struct vector<md::GradientTraffic, std::allocator<md::GradientTraffic>> { struct GradientTraffic *__begin_; struct GradientTraffic *__end_; struct __compressed_pair<md::GradientTraffic *, std::allocator<md::GradientTraffic>> { struct GradientTraffic *__value_; } __end_cap_; } _gradientTraffics;
}

/* class methods */
+ (void)updateDistances:(void *)distances forPath:(id)path snap:(BOOL)snap;

/* instance methods */
- (id)initWithOverlay:(id)overlay section:(id)section routeStartIndex:(unsigned int)index routeEndIndex:(unsigned int)index matchedPathSegments:(id)segments;
- (float)laneHalfWidthAtIndex:(unsigned int)index;
- (void)setTrafficSpeed:(unsigned char)speed;
- (const struct GradientTraffic { float x0; unsigned char x1; unsigned char x2; } *)gradientTrafficAtIndex:(unsigned int)index;
- (void)assignTo:(id)to withSegment:(const struct TrafficSegment { unsigned int x0; unsigned char x1; } *)segment;
- (void)assignPoints:(void *)points count:(unsigned long long)count;
- (void)assignPoints:(void *)points laneHalfWidths:(float *)widths gradientTraffics:(struct GradientTraffic { float x0; unsigned char x1; unsigned char x2; } *)traffics polylineCoordinates:(struct PolylineCoordinate { unsigned int x0; float x1; } *)coordinates count:(unsigned long long)count;
- (void)splitGradientTrafficSegmentationAndAddTo:(id)to with:(void *)with shouldSnap:(BOOL)snap;
- (void)splitTrafficSegmentationAndAddTo:(id)to with:(void *)with shouldSnap:(BOOL)snap isGradientTraffic:(BOOL)traffic;
@end

#endif /* VKDrivingPolylinePath_h */
