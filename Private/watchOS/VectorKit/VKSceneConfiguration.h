//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKSceneConfiguration_h
#define VKSceneConfiguration_h
@import Foundation;

@protocol {shared_ptr<gss::ClientStyleState<gss::ScenePropertyID>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}, {shared_ptr<gss::StylesheetManager<gss::PropertyID>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}, {shared_ptr<md::TaskContext>="__ptr_"^{TaskContext}"__cntrl_"^{__shared_weak_count}}, {unordered_map<gss::StyleAttribute, GEOPolylineCoordinateRange, std::hash<gss::StyleAttribute>, std::equal_to<gss::StyleAttribute>, std::allocator<std::pair<const gss::StyleAttribute, GEOPolylineCoordinateRange>>>="__table_"{__hash_table<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::__unordered_map_hasher<gss::StyleAttribute, std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::hash<gss::StyleAttribute>, std::equal_to<gss::StyleAttribute>>, std::__unordered_map_equal<gss::StyleAttribute, std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::equal_to<gss::StyleAttribute>, std::hash<gss::StyleAttribute>>, std::allocator<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<gss::StyleAttribute, std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::hash<gss::StyleAttribute>, std::equal_to<gss::StyleAttribute>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<gss::StyleAttribute, std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::equal_to<gss::StyleAttribute>, std::hash<gss::StyleAttribute>>>="__value_"f}}}, {vector<GEOLocationCoordinate2D, std::allocator<GEOLocationCoordinate2D>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<GEOLocationCoordinate2D *, std::allocator<GEOLocationCoordinate2D>>="__value_"^{?}}};

@interface VKSceneConfiguration : NSObject {
  /* instance variables */
  struct shared_ptr<gss::ClientStyleState<gss::ScenePropertyID>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _sceneClientStyleState;
  struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _styleManager;
  struct vector<GEOLocationCoordinate2D, std::allocator<GEOLocationCoordinate2D>> { struct  *__begin_; struct  *__end_; struct __compressed_pair<GEOLocationCoordinate2D *, std::allocator<GEOLocationCoordinate2D>> { struct  *__value_; } __end_cap_; } _pointsOfInterest;
  unsigned char _navState;
  unsigned char _distanceToCurrentManeuver;
  double _distanceToDestination;
  int _currentManeuverType;
  unsigned char _currentStepLength;
  unsigned char _nextStepLength;
  unsigned char _currentIncidentType;
  unsigned char _currentManeuverComplexity;
  unsigned long long _currentGroupedManeuverCount;
  unsigned char _distanceToCurrentTrafficSection;
  unsigned char _currentTrafficState;
  unsigned int _lineType;
  int _rampType;
  int _nextManeuverRampType;
  unsigned char _transportType;
  unsigned char _searchAlongTheRoute;
  unsigned char _vehicleSpeed;
  unsigned char _roadSpeed;
  unsigned long long _roadSpeedZeroes;
  unsigned char _cameraMode;
  unsigned char _navigationDestination;
  unsigned int _roadComplexity;
  unsigned int _nextRoadComplexity;
  unsigned char _currentTransitManeuver;
  unsigned char _routeSinuosity;
  unsigned int _laneCount;
  struct DistancesRange { double _immediate; double _extremlyNear; double _veryNear; double _near; double _medium; double _far; double _veryFar; } _distanceRanges;
  struct SinuosityLevels { double _straight; double _low; double _medium; double _high; } _sinuosityLevels;
  struct unordered_map<gss::StyleAttribute, GEOPolylineCoordinateRange, std::hash<gss::StyleAttribute>, std::equal_to<gss::StyleAttribute>, std::allocator<std::pair<const gss::StyleAttribute, GEOPolylineCoordinateRange>>> { struct __hash_table<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::__unordered_map_hasher<gss::StyleAttribute, std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::hash<gss::StyleAttribute>, std::equal_to<gss::StyleAttribute>>, std::__unordered_map_equal<gss::StyleAttribute, std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::equal_to<gss::StyleAttribute>, std::hash<gss::StyleAttribute>>, std::allocator<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<gss::StyleAttribute, std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::hash<gss::StyleAttribute>, std::equal_to<gss::StyleAttribute>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<gss::StyleAttribute, std::__hash_value_type<gss::StyleAttribute, GEOPolylineCoordinateRange>, std::equal_to<gss::StyleAttribute>, std::hash<gss::StyleAttribute>>> { float __value_; } __p3_; } __table_; } _styleAttributeCoordinateRanges;
  struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
}

/* instance methods */
- (id)initWithTaskContext:(const void *)context;
- (void)resetState;
- (void)setSceneClientStyleState:(struct shared_ptr<gss::ClientStyleState<gss::ScenePropertyID>> { void * x0; struct __shared_weak_count * x1; })state;
- (void)_updateStyleManager;
- (struct shared_ptr<gss::ClientStyleState<gss::ScenePropertyID>> { void * x0; struct __shared_weak_count * x1; })sceneClientStyleState;
- (void)setStyleManager:(struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> { void * x0; struct __shared_weak_count * x1; })manager;
- (struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> { void * x0; struct __shared_weak_count * x1; })styleManager;
- (void)setNavigationState:(int)state;
- (void)setDistanceToCurrentManeuver:(double)maneuver;
- (void)setDistanceToDestination:(double)destination;
- (void)setCurrentManeuverType:(int)type;
- (void)setCurrentStepLength:(double)length;
- (void)setNextStepLength:(double)length;
- (void)setCurrentIncidentType:(unsigned long long)type;
- (void)setCurrentManeuverJunctionsCount:(unsigned long long)count;
- (void)setCurrentGroupedManeuverCount:(unsigned long long)count;
- (void)setLineType:(unsigned int)type;
- (void)setRampType:(int)type;
- (void)setNextManeuverRampType:(int)type;
- (void)setCurrentTransportationType:(int)type;
- (void)setSearchAlongTheRoute:(BOOL)route;
- (void)setVehicleSpeed:(double)speed;
- (void)setRoadSpeed:(double)speed;
- (void)setNavCameraMode:(unsigned long long)mode;
- (unsigned long long)navCameraMode;
- (unsigned char)navCameraModeStyleAttribute;
- (const void *)styleAttributeCoordinateRanges;
- (void)setNavigationDestination:(unsigned long long)destination;
- (unsigned long long)navigationDestination;
- (unsigned char)navigationState;
- (void)setCurrentRoadComplexity:(unsigned int)complexity;
- (void)setNextRoadComplexity:(unsigned int)complexity;
- (void)setDistanceToCurrentTrafficSection:(double)section;
- (void)setTrafficColor:(unsigned long long)color;
- (void)setCurrentTransitManeuverType:(int)type;
- (void)setSinuosity:(double)sinuosity;
- (void)setLaneCount:(unsigned int)count;
- (void)applyStyleAttributeKeyValue:(unsigned int)value withValue:(unsigned int)value withCoordinateRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (void)removeStyleAttributeKey:(unsigned int)key;
@end

#endif /* VKSceneConfiguration_h */
