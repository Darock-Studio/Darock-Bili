//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1899.42.9.28.10
//
#ifndef VKCameraController_h
#define VKCameraController_h
@import Foundation;

#include "MDRenderTarget-Protocol.h"
#include "VKCamera.h"
#include "VKCameraController-Protocol.h"
#include "VKMapViewCameraDelegate-Protocol.h"

@class GEOMapRegion, NSString;
@protocol {shared_ptr<gdc::Camera>="__ptr_"^{Camera}"__cntrl_"^{__shared_weak_count}};

@interface VKCameraController : NSObject<VKCameraController> {
  /* instance variables */
  VKCamera *_vkCamera;
  struct shared_ptr<gdc::Camera> { struct Camera *__ptr_; struct __shared_weak_count *__cntrl_; } _camera;
  NSObject<MDRenderTarget> *_canvas;
  NSObject<VKMapViewCameraDelegate> *_cameraDelegate;
  BOOL _gesturing;
  unsigned long long _regionChangeCount;
  BOOL _inProgressRegionChangeIsAnimated;
  struct VKEdgeInsets { float top; float left; float bottom; float right; } _edgeInsets;
  BOOL _edgeInsetsAnimating;
}

@property (readonly, nonatomic) double presentationHeading;
@property (nonatomic) BOOL isPitchEnabled;
@property (nonatomic) BOOL isRotateEnabled;
@property (nonatomic) BOOL staysCenteredDuringPinch;
@property (nonatomic) BOOL staysCenteredDuringRotation;
@property (readonly, nonatomic) BOOL canPitch;
@property (readonly, nonatomic) BOOL canRotate;
@property (nonatomic) long long baseDisplayRate;
@property (nonatomic) long long maxDisplayRate;
@property (nonatomic) struct { double x0; double x1; } centerCoordinate;
@property (nonatomic) double distanceFromCenterCoordinate;
@property (nonatomic) double heading;
@property (nonatomic) double pitch;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) double minPitch;
@property (readonly, nonatomic) double maxPitch;
@property (readonly, nonatomic) BOOL isPitched;
@property (readonly, nonatomic) BOOL isRotated;
@property (readonly, nonatomic) BOOL isFullyPitched;
@property (readonly, nonatomic) struct MapDataAccess * mapDataAccess;
@property (readonly, nonatomic) struct AnimationRunner * animationRunner;
@property (readonly, nonatomic) struct RunLoopController * runLoopController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithMapDataAccess:(struct MapDataAccess *)access animationRunner:(struct AnimationRunner *)runner runLoopController:(struct RunLoopController *)controller cameraDelegate:(id)delegate;
- (void)setVkCamera:(id)camera;
- (id)vkCamera;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (struct shared_ptr<gdc::Camera> { struct Camera * x0; struct __shared_weak_count * x1; })camera;
- (id)canvas;
- (void)setCanvas:(id)canvas;
- (id)cameraDelegate;
- (void)setCameraDelegate:(id)delegate;
- (BOOL)isGesturing;
- (void)setGesturing:(BOOL)gesturing;
- (void)canvasDidLayout;
- (void)beginRegionChange:(BOOL)change;
- (void)endRegionChange;
- (BOOL)isAnimating;
- (BOOL)isChangingRegion;
- (void)checkAndResetRegionChangeCount;
- (id)detailedDescription;
- (struct CGPoint { double x0; double x1; })centerScreenPoint;
- (struct CGPoint { double x0; double x1; })scaledScreenPointForPoint:(struct CGPoint { double x0; double x1; })point;
- (struct Matrix<int, 2, 1> { int x0[2] })cursorFromScreenPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })insets;
- (struct VKEdgeInsets { float x0; float x1; float x2; float x3; })edgeInsets;
- (void)setEdgeInsetsAnimating:(BOOL)animating;
- (BOOL)edgeInsetsAnimating;
- (double)minimumZoomLevel;
- (double)maximumZoomLevel;
- (double)currentZoomLevel;
- (double)topDownMinimumZoomLevel;
- (double)zoomLevelAdjustmentForTileSize:(long long)size;
- (double)minimumZoomLevelForTileSize:(long long)size;
- (double)maximumZoomLevelForTileSize:(long long)size;
- (double)currentZoomLevelForTileSize:(long long)size;
- (double)topDownMinimumZoomLevelForTileSize:(long long)size;
- (BOOL)canZoomInForTileSize:(long long)size;
- (BOOL)canZoomOutForTileSize:(long long)size;
- (long long)tileSize;
- (void)stylesheetDidChange;
- (void)stylesheetDidReload;
- (void)updateCameraToPositionOrientationLimits;
- (BOOL)wantsTimerTick;
- (void)updateWithTimestamp:(double)timestamp withContext:(void *)context;
- (BOOL)centerCoordinate:(struct { double x0; double x1; } *)coordinate andDistanceFromCenter:(double *)center forMapRegion:(id)region;
- (void)populateDebugNode:(void *)node withOptions:(const void *)options;
- (BOOL)usesVKCamera;
@end

#endif /* VKCameraController_h */
