//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 85.0.0.0.0
//
#ifndef FFConfiguration_h
#define FFConfiguration_h
@import Foundation;

#include "FFFileReader-Protocol.h"
#include "FFFileWriter-Protocol.h"
#include "FFParseErrorReporter-Protocol.h"
#include "FFPlistParser.h"
#include "FFSafeModeChecker-Protocol.h"

@class NSArray, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet;

@interface FFConfiguration : NSObject {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock;
  NSArray *searchPaths;
  NSMutableDictionary"] * x[2[8] configByLevelIndex;
  NSMutableDictionary * metaByLevelIndex[8];
  NSMutableSet * disclosuresByLevelIndex[8];
  NSMutableDictionary * featureSetsMetaByLevelIndex[8];
  NSMutableSet * enabledFeatureSetsByLevelIndex[8];
  NSMutableDictionary * enabledFeatureSetsAtLevelIndexByGroup[8];
  NSMutableDictionary *definedFeatureSets;
  NSMutableDictionary *definedFeatureGroups;
  NSMutableDictionary * subscriptionsMetaByLevelIndex[8];
  NSMutableArray * subscriptionsByLevelIndex[8];
}

@property (retain, nonatomic) NSObject<FFFileWriter> *filewriter;
@property (retain, nonatomic) NSObject<FFFileReader> *filereader;
@property (retain, nonatomic) NSObject<FFParseErrorReporter> *parseerrorreporter;
@property (retain, nonatomic) FFPlistParser *plistparser;
@property (retain, nonatomic) NSObject<FFSafeModeChecker> *safemodechecker;
@property (retain, nonatomic) NSMutableArray *profilePayloads;
@property (readonly, nonatomic) NSSet *domains;

/* class methods */
+ (id)configurationForProfileManagement;
+ (id)shared;
+ (id)_configurationForTestingWithFileReader:(id)reader fileWriter:(id)writer parseErrorReporter:(id)reporter safeModeChecker:(id)checker;
+ (id)configurationForTestingWithFileReader:(id)reader parseErrorReporter:(id)reporter safeModeChecker:(id)checker;
+ (id)configurationForTestingWithFileReader:(id)reader parseErrorReporter:(id)reporter;
+ (id)configurationForTestingWithFileReader:(id)reader fileWriter:(id)writer;
+ (id)configurationForTestingWithFileReader:(id)reader;
+ (id)configurationForTestingWithFileWriter:(id)writer;
+ (BOOL)isValidName:(id)name;
+ (BOOL)isValidDisclosureName:(id)name;

/* instance methods */
- (void)addSubscription:(id)subscription atLevel:(long long)level;
- (void)removeSubscription:(id)subscription atLevel:(long long)level;
- (id)allSubscriptionsAtLevel:(long long)level;
- (id)disclosureForFeatureGroup:(id)group;
- (id)allFeatureGroups;
- (id)attributesForFeatureGroup:(id)group;
- (id)featureSetsInGroup:(id)group;
- (id)featureFlagsInSet:(id)set inGroup:(id)group;
- (long long)valueForFeatureSet:(id)set inGroup:(id)group atLevel:(long long)level;
- (long long)resolvedValueForFeatureSet:(id)set inGroup:(id)group;
- (long long)_resolvedValueForFeatureSet:(id)set;
- (long long)_valueForFeatureSet:(id)set atLevel:(long long)level;
- (void)enableFeatureSet:(id)set inGroup:(id)group atLevel:(long long)level;
- (void)unsetFeatureSet:(id)set inGroup:(id)group atLevel:(long long)level;
- (void)prepareToAddProfilePayloads;
- (BOOL)addProfilePayload:(id)payload error:(id *)error;
- (BOOL)commitProfilePayloadsAndReturnError:(id *)error;
- (id)definedFeatureGroupsFilteredByCurrentDisclosures;
- (id)definedFeatureSetsFilteredByCurrentDisclosures;
- (id)mutableDisclosureSetAtLevelIndex:(unsigned long long)index;
- (void)addDisclosure:(id)disclosure atLevel:(long long)level;
- (void)addDisclosureAlreadyLocked:(id)locked atLevelIndex:(unsigned long long)index;
- (void)removeDisclosure:(id)disclosure atLevel:(long long)level;
- (void)removeDisclosure:(id)disclosure atLevelIndex:(unsigned long long)index;
- (void)removeAllDisclosuresAtLevelIndex:(unsigned long long)index;
- (id)currentDisclosuresAtLevel:(long long)level;
- (id)currentDisclosuresAtLevelIndex:(unsigned long long)index;
- (id)currentDisclosures;
- (BOOL)isValidDisclosureName:(id)name;
- (id)disclosureForFeature:(id)feature domain:(id)domain;
- (id)initPrivate;
- (id)initPrivateForBootTask;
- (void)clearCachedData;
- (void)validateName:(id)name;
- (id)fileURLForDomain:(id)domain pathIndex:(int)index;
- (id)fileURLForLevelIndex:(unsigned long long)index pathIndex:(int)index;
- (id)disclosureFileURLForLevelIndex:(unsigned long long)index pathIndex:(int)index;
- (id)internalDisclosureFileURLForLevelIndex:(unsigned long long)index;
- (id)featureSetsFileURLForLevelIndex:(unsigned long long)index;
- (id)subscriptionsFileURLForLevelIndex:(unsigned long long)index;
- (id)makeFeatureDictionaryFrom:(id)from forDomain:(id)domain atDomainLevel:(BOOL)level reportableFilename:(id)filename;
- (void)recalculateFeatureSetEffectsAt:(unsigned long long)at;
- (void)recalculateSubscriptionEffectsAt:(unsigned long long)at;
- (void)reportParseError:(id)error severity:(id)severity whileParsingKey:(id)key inContext:(id)context inFile:(id)file;
- (void)loadFeatureSetDataForLevelIndex:(unsigned long long)index;
- (void)removeAllFeatureSetDataAtLevelIndex:(unsigned long long)index;
- (void)loadFeatureSetDefinitions;
- (void)loadFeatureSetDefinitionsNamed:(id)named fromURL:(id)url;
- (id)parseSubscriptionsDictionary:(id)dictionary;
- (void)loadSubscriptionDataForLevelIndex:(unsigned long long)index;
- (void)removeAllSubscriptionsAtLevelIndex:(unsigned long long)index;
- (void)loadCombinedDataForLevelIndex:(unsigned long long)index;
- (void)addFeaturesForDomain:(id)domain pathIndex:(int)index fromURL:(id)url;
- (void)loadDomain:(id)domain levelIndex:(unsigned long long)index;
- (void)loadAllLevelsForDomain:(id)domain;
- (void)loadAllData;
- (id)effectiveStateForFeature:(id)feature domain:(id)domain levelIndex:(unsigned long long)index;
- (BOOL)resolvedStateForDisclosure:(id)disclosure;
- (id)resolvedStateForFeature:(id)feature domain:(id)domain;
- (BOOL)isFeatureHidden:(id)hidden domain:(id)domain;
- (void)createMutableDomainConfig:(id)config levelIndex:(unsigned long long)index;
- (void)setValue:(long long)value feature:(id)feature domain:(id)domain levelIndex:(unsigned long long)index;
- (void)setFeaturesMatchingAttribute:(id)attribute levelIndex:(unsigned long long)index value:(long long)value;
- (void)populateDictionary:(id)dictionary withFeatures:(id)features;
- (BOOL)writeDomainUpdates:(id *)updates;
- (BOOL)writeCombinedUpdatesAtLevelIndex:(unsigned long long)index error:(id *)error;
- (BOOL)writeCombinedUpdates:(id *)updates;
- (BOOL)writeDisclosureUpdatesAtlevelIndex:(unsigned long long)index error:(id *)error;
- (BOOL)writeDisclosureUpdates:(id *)updates;
- (BOOL)writeFeatureSetUpdatesAtLevelIndex:(unsigned long long)index withError:(id *)error;
- (BOOL)writeFeatureSetUpdates:(id *)updates;
- (BOOL)writeSubscriptionUpdatesAtLevelIndex:(unsigned long long)index withError:(id *)error;
- (BOOL)writeSubscriptionUpdates:(id *)updates;
- (id)featuresForDomainAlreadyLocked:(id)locked;
- (id)featuresForDomain:(id)domain;
- (id)stateForFeature:(id)feature domain:(id)domain;
- (id)stateForFeature:(id)feature domain:(id)domain level:(long long)level;
- (id)defaultStateForFeature:(id)feature domain:(id)domain;
- (void)enableFeature:(id)feature domain:(id)domain level:(long long)level;
- (void)enableFeature:(id)feature domain:(id)domain levelIndex:(unsigned long long)index;
- (void)enableFeaturesMatchingAttribute:(id)attribute level:(long long)level;
- (void)disableFeature:(id)feature domain:(id)domain level:(long long)level;
- (void)disableFeature:(id)feature domain:(id)domain levelIndex:(unsigned long long)index;
- (void)disableFeaturesMatchingAttribute:(id)attribute level:(long long)level;
- (void)unsetFeature:(id)feature domain:(id)domain level:(long long)level;
- (void)unsetFeature:(id)feature domain:(id)domain levelIndex:(unsigned long long)index;
- (void)unsetFeaturesMatchingAttribute:(id)attribute level:(long long)level;
- (void)_enableFeatureSetAlreadyLocked:(id)locked atLevelIndex:(unsigned long long)index;
- (void)_unsetFeatureSetAlreadyLocked:(id)locked atLevelIndex:(unsigned long long)index;
- (void)addSubscriptionAlreadyLocked:(id)locked atLevelIndex:(unsigned long long)index;
- (BOOL)commitUpdates:(id *)updates;
- (void)invalidateCache;
- (BOOL)isValidName:(id)name;
- (BOOL)resetDomain:(id)domain error:(id *)error;
- (BOOL)reset:(id *)reset;
- (BOOL)isSafeMode;
- (BOOL)phaseShouldBeEnabledByDefault:(id)default;
- (unsigned int)sortValueForPhase:(id)phase;
@end

#endif /* FFConfiguration_h */
