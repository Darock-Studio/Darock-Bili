//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 35.2.1.0.0
//
#ifndef SCMLImageAnalyzer_h
#define SCMLImageAnalyzer_h
@import Foundation;

#include "SCMLModelBase.h"

@class NSDictionary, NSNumber, NSURL;

@interface SCMLImageAnalyzer : SCMLModelBase {
  /* instance variables */
  unsigned long long data_dim[4];
  void * encoderPlan;
  void * encoderCtx;
  struct { void *plan; int network_index; } encoderNet;
  struct { void *data; void *reserved; unsigned long long x[4] dim; unsigned long long x[4] stride; unsigned long long width; unsigned long long height; unsigned long long channels; unsigned long long batch_number; unsigned long long sequence_length; unsigned long long stride_width; unsigned long long stride_height; unsigned long long stride_channels; unsigned long long stride_batch_number; unsigned long long stride_sequence_length; int storage_type; } leafProbabilities;
  struct { void *data; void *reserved; unsigned long long x[4] dim; unsigned long long x[4] stride; unsigned long long width; unsigned long long height; unsigned long long channels; unsigned long long batch_number; unsigned long long sequence_length; unsigned long long stride_width; unsigned long long stride_height; unsigned long long stride_channels; unsigned long long stride_batch_number; unsigned long long stride_sequence_length; int storage_type; } detectionScores;
  struct { void *data; void *reserved; unsigned long long x[4] dim; unsigned long long x[4] stride; unsigned long long width; unsigned long long height; unsigned long long channels; unsigned long long batch_number; unsigned long long sequence_length; unsigned long long stride_width; unsigned long long stride_height; unsigned long long stride_channels; unsigned long long stride_batch_number; unsigned long long stride_sequence_length; int storage_type; } detectionBoxes;
}

@property (readonly) NSDictionary *acceptedOutputIndices;
@property (readonly) NSDictionary *acceptedDetectionOutputIndices;
@property (readonly) NSDictionary *detectionThresholdByOutputIndex;
@property (readonly) NSNumber *otgxMainThreshold;
@property (readonly) unsigned long long otgxMainIndex;
@property (readonly) BOOL otgxRetrieveAllClasses;
@property (readonly) NSURL *modelUrl;
@property (readonly) int _espressoEngine;
@property (readonly) int _espressoDeviceId;
@property (readonly) int _espressoStorageType;

/* class methods */
+ (id)_readOperatingThresholdsDataUsingModelURL:(id)url error:(id *)error;
+ (id)_encodeName:(id)name;
+ (id)_decodeName:(id)name;
+ (id)getOperatingPointDataForClassName:(id)name modelURL:(id)url error:(id *)error;

/* instance methods */
- (id)initWithModelURL:(id)url options:(id)options error:(id *)error;
- (void)dealloc;
- (BOOL)loadNetworkForURL:(id)url espressoEngine:(int)engine storageType:(int)type deviceId:(int)id;
- (void)_extractThresholdForOTGXMain:(id)otgxmain;
- (BOOL)isSensitive:(id)sensitive sensitivityScore:(id *)score;
- (BOOL)isSensitive:(id)sensitive sensitivityScore:(id *)score classificationMode:(unsigned long long)mode;
- (id)analyzeImage:(struct CGImage *)image error:(id *)error;
- (id)classifyImage:(struct CGImage *)image error:(id *)error;
- (id)scaleMethod;
- (id)generateClassificationScoresForImage:(struct CGImage *)image error:(id *)error;
- (struct NetworkOutputs { struct TensorView<float, 1> { float * x0; struct array<int, 1UL> { int x0[1] } x1; } x0; struct TensorView<float, 3> { float * x0; struct array<int, 3UL> { int x0[3] } x1; } x1; struct TensorView<float, 3> { float * x0; struct array<int, 3UL> { int x0[3] } x1; } x2; })computeOutputForImage:(struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)image error:(id *)error;
- (id)analyzePixelBuffer:(struct __CVBuffer *)buffer error:(id *)error;
- (id)classifyPixelBuffer:(struct __CVBuffer *)buffer error:(id *)error;
- (id)generateClassificationScoresForPixelBuffer:(struct __CVBuffer *)buffer error:(id *)error;
- (struct NetworkOutputs { struct TensorView<float, 1> { float * x0; struct array<int, 1UL> { int x0[1] } x1; } x0; struct TensorView<float, 3> { float * x0; struct array<int, 3UL> { int x0[3] } x1; } x1; struct TensorView<float, 3> { float * x0; struct array<int, 3UL> { int x0[3] } x1; } x2; })_computeOutputForPixelBuffer:(struct __CVBuffer *)buffer error:(id *)error;
- (struct vector<SCML::BoxInfo, std::allocator<SCML::BoxInfo>> { struct BoxInfo * x0; struct BoxInfo * x1; struct __compressed_pair<SCML::BoxInfo *, std::allocator<SCML::BoxInfo>> { struct BoxInfo * x0; } x2; })_processDetectionOutput:(struct NetworkOutputs { struct TensorView<float, 1> { float * x0; struct array<int, 1UL> { int x0[1] } x1; } x0; struct TensorView<float, 3> { float * x0; struct array<int, 3UL> { int x0[3] } x1; } x1; struct TensorView<float, 3> { float * x0; struct array<int, 3UL> { int x0[3] } x1; } x2; })output;
- (BOOL)shouldProcessDetections;
- (id)_processNetworkOutput:(struct NetworkOutputs { struct TensorView<float, 1> { float * x0; struct array<int, 1UL> { int x0[1] } x1; } x0; struct TensorView<float, 3> { float * x0; struct array<int, 3UL> { int x0[3] } x1; } x1; struct TensorView<float, 3> { float * x0; struct array<int, 3UL> { int x0[3] } x1; } x2; })output;
@end

#endif /* SCMLImageAnalyzer_h */
