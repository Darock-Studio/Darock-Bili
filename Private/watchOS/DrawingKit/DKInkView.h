//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 506.1.0.0.0
//
#ifndef DKInkView_h
#define DKInkView_h
@import Foundation;

#include "UIView.h"
#include "DKDrawing.h"
#include "DKDrawingStroke.h"
#include "DKInkRendererDelegate-Protocol.h"
#include "DKPointSmoothing.h"

@class CADisplayLink, NSMutableArray, NSString, NSUndoManager, UIColor;
@protocol DKInkViewRenderDelegate, UIView<DKInkRenderer;

@interface DKInkView : UIView<DKInkRendererDelegate> {
  /* instance variables */
  struct CGPoint { double x; double y; } _lastPoint;
  double _lastTouchTime;
  struct CGPoint { double x; double y; } _velocityInWindow;
  id _trackingTouchID;
  id /* block */ _animationCompletionHandler;
}

@property (retain, nonatomic) UIView<DKInkRenderer> *renderer;
@property (retain, nonatomic) DKDrawingStroke *currentBrushStroke;
@property (retain, nonatomic) NSMutableArray *currentInterpolatedBrushStroke;
@property (retain, nonatomic) NSMutableArray *cachedInterpolatedBrushStrokes;
@property (nonatomic) double currentWeight;
@property unsigned long long totalPointsAdded;
@property struct CGPoint { double x0; double x1; } strokeStartLocation;
@property struct CGPoint { double x0; double x1; } strokeLastLocation;
@property double strokeStartTime;
@property BOOL isAddingPointWithoutSmoothing;
@property (nonatomic)  lastVectorPoint;
@property (retain, nonatomic) DKPointSmoothing *inputFIFO;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } aggregateInvalid;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } unionDrawingRect;
@property (nonatomic) unsigned long long animationType;
@property (retain, nonatomic) NSMutableArray *cachedInterpolatedAnimationPoints;
@property (retain, nonatomic) NSMutableArray *cachedInterpolatedAnimationStrokes;
@property (retain, nonatomic) NSMutableArray *computedAnimationFrames;
@property (nonatomic) double drawingScale;
@property (retain, nonatomic) CADisplayLink *displayLink;
@property (retain, nonatomic) NSUndoManager *strokeUndoManager;
@property (nonatomic) unsigned long long mode;
@property (nonatomic) BOOL scaleDrawingToFitCanvas;
@property (nonatomic) BOOL allowInput;
@property (readonly, nonatomic) long long countOfCurrentStroke;
@property (readonly, nonatomic) BOOL canvasHasInk;
@property (readonly, nonatomic) BOOL trackingTouches;
@property (readonly, nonatomic) BOOL isRenderingPaused;
@property (weak, nonatomic) NSObject<DKInkViewRenderDelegate> *renderPreviewDelegate;
@property (nonatomic) unsigned long long renderPreviewMode;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } inkBounds;
@property (retain, nonatomic) UIColor *strokeColor;
@property (nonatomic) double minPressure;
@property (nonatomic) double maxPressure;
@property (nonatomic) double minThickness;
@property (nonatomic) double maxThickness;
@property (copy, nonatomic) DKDrawing *currentDrawing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)gpuAvailable;
+ (double)windowBackingScaleFactor:(id)factor;
+ (struct CGPoint { double x0; double x1; })normalizeVectorPoint:(struct CGPoint { double x0; double x1; })point;
+ (struct CGVector { double x0; double x1; })normalizeVector:(struct CGVector { double x0; double x1; })vector;
+ (double)lengthOfVector:(struct CGVector { double x0; double x1; })vector;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithCoder:(id)coder;
- (void)dealloc;
- (void)layoutSubviews;
- (void)willMoveToSuperview:(id)superview;
- (void)didMoveToSuperview;
- (void)willMoveToWindow:(id)window;
- (void)didMoveToWindow;
- (void)setHidden:(BOOL)hidden;
- (void)setupRenderer;
- (BOOL)_deviceSupportsGL;
- (void)_commonInit;
- (void)_addUninterpolatedPoints:(1 *)points controlPoint:(2 *)point count:(unsigned long long)count flushing:(BOOL)flushing;
- (void)_renderEmittedPoints:(1 *)points count:(unsigned long long)count;
- (void)teardown;
- (void)pauseRendering;
- (void)resumeRendering;
- (void)setCurrentDrawing:(id)drawing scaleDrawingToFitBounds:(BOOL)bounds withAnimationType:(unsigned long long)type animationCompletionHandler:(id /* block */)handler;
- (id)snapshotRendererState;
- (void)_notifyRenderDelegate;
- (void)_postTouchesBeganNotification:(struct CGPoint { double x0; double x1; })notification;
- (void)_postTouchesEndedNotification:(struct CGPoint { double x0; double x1; })notification;
- (double)interfaceScale;
- (void)clear;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)_startDisplayLink;
- (void)_stopDisplayLink;
- (void)_display;
- (void)_setDrawingOnRenderer:(id)renderer;
- (void)_setDrawingOnRendererWithBleedAnimation:(id)animation;
- (void)_setDrawingOnRendererWithReplayAnimation:(id)animation;
- (void)_computeAnimationFramesFittingInMaxDuration:(double)duration;
- (void)_replayAnimationTick:(id)tick;
- (void)inkDidRender:(id)render;
- (void)inkDidCompleteRender:(id)render;
- (void)undoLastStroke;
- (void)_undoLastStroke:(id)stroke;
- (void)startStroke:;
- (void)continueStroke:;
- (void)continueStrokeWithoutSmoothing:;
- (void)terminateStroke;
- (double)weightForValue:(double)value;
- (BOOL)ak_forceAvailableForTouch:(id)touch;
- (double)weightForTouch:(id)touch;
- (struct CGPoint { double x0; double x1; })_velocityForTouch:(id)touch;
- (void)touchesBegan:(id)began withEvent:(id)event;
- (void)touchesMoved:(id)moved withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (void)touchesCancelled:(id)cancelled withEvent:(id)event;
- (void)handleCoalescedTouches:(id)touches forTouch:(id)touch average:(BOOL)average;
- (2)_vector4ForTouchSettingWeightAndVelocity:(id)velocity average:(BOOL)average;
- (void)_updateVelocityWithTouch:(id)touch average:(BOOL)average;
@end

#endif /* DKInkView_h */
