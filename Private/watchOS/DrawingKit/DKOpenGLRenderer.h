//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 506.1.0.0.0
//
#ifndef DKOpenGLRenderer_h
#define DKOpenGLRenderer_h
@import Foundation;

#include "DKOpenGLRendererDelegate-Protocol.h"

@class UIColor;
@protocol {vector<Page, std::allocator<Page>>="__begin_"^{Page}"__end_"^{Page}"__end_cap_"{__compressed_pair<Page *, std::allocator<Page>>="__value_"^{Page}}}, {vector<Vertex, std::allocator<Vertex>>="__begin_"^{Vertex}"__end_"^{Vertex}"__end_cap_"{__compressed_pair<Vertex *, std::allocator<Vertex>>="__value_"^{Vertex}}}, {vector<VertexGroup, std::allocator<VertexGroup>>="__begin_"^{VertexGroup}"__end_"^{VertexGroup}"__end_cap_"{__compressed_pair<VertexGroup *, std::allocator<VertexGroup>>="__value_"^{VertexGroup}}}, {vector<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>, std::allocator<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))> *, std::allocator<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>>>="__value_"^v}};

@interface DKOpenGLRenderer : NSObject {
  /* instance variables */
  BOOL _didNotifyRendererDelegate;
  int mBufferSize;
  unsigned int mWetPaintProg;
  unsigned int mDryPaintProg;
  unsigned int mCompositeProg;
  unsigned int mTextureProg;
  unsigned int mColorProg;
  unsigned int mAttributes;
  unsigned int mVbo;
  struct _NSRange { unsigned long long location; unsigned long long length; } mVertexRange;
  struct vector<Vertex, std::allocator<Vertex>> { struct Vertex *__begin_; struct Vertex *__end_; struct __compressed_pair<Vertex *, std::allocator<Vertex>> { struct Vertex *__value_; } __end_cap_; } mContiguousVertexStorage;
  struct vector<VertexGroup, std::allocator<VertexGroup>> { struct VertexGroup *__begin_; struct VertexGroup *__end_; struct __compressed_pair<VertexGroup *, std::allocator<VertexGroup>> { struct VertexGroup *__value_; } __end_cap_; } mVertexHistory;
  struct vector<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>, std::allocator<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))> *, std::allocator<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>>> { void *__value_; } __end_cap_; } mNonCollisionSegments;
   U_COLOR;
  struct vector<Page, std::allocator<Page>> { struct Page *__begin_; struct Page *__end_; struct __compressed_pair<Page *, std::allocator<Page>> { struct Page *__value_; } __end_cap_; } mPages;
  unsigned int mWetPaintBufferFBO;
  unsigned int mWetPaintBufferT;
   mWetPaintBufferSize;
  BOOL mSharedContext;
  BOOL mPaperTexIsShared;
  unsigned int mPaperTex;
   mWinSize;
   mCanvasSize;
   mCanvasOffset;
  float mTime;
  float mTimeWetBecameDirty;
  float mParticleLifespan;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mDirtyCanvasRegion;
  int mCompositeProgViewportUniformLocation;
  int mCompositeColorUniformLocation;
  int mWetPaintProgTimeUniformLocation;
  int mWetPaintProgSubtractEndPointsOnlyUniformLocation;
  int mWetPaintProgLifespanUniformLocation;
  int mDryPaintProgXCoordOffsetUniformLocation;
  int mColorProgColorUniformLocation;
  int mColorProgModelViewProjectionUniformLocation;
  int mTextureProgModelViewProjectionUniformLocation;
}

@property (weak, nonatomic) NSObject<DKOpenGLRendererDelegate> *delegate;
@property (retain, nonatomic) UIColor *inkColor;
@property (nonatomic) double lineWidthScale;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } contentSize;
@property (nonatomic) BOOL undoEnabled;
@property (nonatomic) BOOL ignoreFirstUndoItem;
@property (nonatomic) double backingScale;
@property (nonatomic) BOOL drawingEnabled;
@property (nonatomic) BOOL allowWetComposite;
@property (nonatomic) long long numPages;

/* instance methods */
- (id)initWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds scale:(double)scale bufferSize:(int)size sharedContext:(BOOL)context;
- (id)initWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds scale:(double)scale;
- (id)init;
- (void)dealloc;
- (void)teardown;
- (BOOL)initGL;
- (void)didResize;
- (void)destroyFrameBuffers;
- (void)initializeFrameBuffers;
- (void)appendVertexHistoryElement;
- (void)removeVertexHistoryElement;
- (void)addPoints:(id)points withSegmentLength:(unsigned long long)length;
- (BOOL)detectCollision::;
- (void)update;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })regionWithVertices:(struct vector<Vertex, std::allocator<Vertex>> { struct Vertex * x0; struct Vertex * x1; struct __compressed_pair<Vertex *, std::allocator<Vertex>> { struct Vertex * x0; } x2; })vertices withInflationAmount:(float)amount;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })getVertexBounds;
- (void)updateWet;
- (void)updateDryCycleIncludingComposite:(BOOL)composite;
- (void)renderToWetPaintBufferWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)renderToDryPaintBuffer;
- (void)renderToComposite:(BOOL)composite;
- (void)updateDryForcefully;
- (void)draw;
- (void)drawComposite;
- (void)undo;
- (void)redrawEntireDrawingImmediatelyWithLayeredBlending:(BOOL)blending;
- (void)drawContiguousVertexStorageImmediatelyWithLayeredBlending:(BOOL)blending;
- (BOOL)canvasIsEmpty;
- (void)resetRendererState;
- (void)clear;
- (void)clearWetPaintBuffer;
- (void)clearDryPaintBuffer;
- (void)clearComposite;
- (void)didCompleteStroke;
- (void)didBeginNewStroke;
- (void)updateVertexControllerWithDataRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range allowWet:(BOOL)wet;
- (void)updateVertexControllerWithData:(struct vector<Vertex, std::allocator<Vertex>> { struct Vertex * x0; struct Vertex * x1; struct __compressed_pair<Vertex *, std::allocator<Vertex>> { struct Vertex * x0; } x2; })data range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range allowWet:(BOOL)wet;
- (id)snapshotImage;
- (BOOL)isUndoEnabled;
@end

#endif /* DKOpenGLRenderer_h */
