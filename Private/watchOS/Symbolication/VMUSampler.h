//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 64561.91.2.0.0
//
#ifndef VMUSampler_h
#define VMUSampler_h
@import Foundation;

#include "VMUProcessDescription.h"

@class BOOL *, NSConditionLock, NSMapTable, NSMutableArray, NSMutableDictionary, NSString;

@interface VMUSampler : NSObject {
  /* instance variables */
  unsigned long long _options;
  int _pid;
  unsigned int _task;
  BOOL _needTaskPortDealloc;
  BOOL _recordThreadStates;
  BOOL _sampling;
  unsigned int _numberOfCopiedBacktraces;
  NSString *_processName;
  VMUProcessDescription *_processDescription;
  struct _CSTypeRef { unsigned long long _opaque_1; unsigned long long _opaque_2; } _symbolicator;
  unsigned int _suspensionToken;
  struct sampling_context_t * _samplingContext;
  int _samplingContextOptions;
  NSMapTable *_lastThreadBacktraceMap;
  unsigned int * _previousThreadList;
  unsigned int _mainThread;
  unsigned int _previousThreadCount;
  unsigned int _maxPreviousThreadCount;
  double _tbRate;
  NSConditionLock *_stateLock;
  double _interval;
  double _timeLimit;
  unsigned int _sampleLimit;
  unsigned int _numberOfSamples;
  NSMutableArray *_samples;
  BOOL _stacksFixed;
  id _delegate;
  double _timeSpentSampling;
  unsigned int _dispatchThreadSoftLimit;
  unsigned int _dispatchThreadSoftLimitCount;
  unsigned int _dispatchThreadHardLimit;
  unsigned int _dispatchThreadHardLimitCount;
  NSMutableDictionary *_threadPortToNameMap;
  NSMutableDictionary *_dispatchQueueSerialNumToNameMap;
}

/* class methods */
+ (void)initialize;
+ (id)sampleAllThreadsOfPID:(int)pid;
+ (id)sampleAllThreadsOfTask:(unsigned int)task;
+ (id)sampleAllThreadsOfTask:(unsigned int)task symbolicate:(BOOL)symbolicate;

/* instance methods */
- (id)initWithPID:(int)pid task:(unsigned int)task processName:(id)name is64Bit:(BOOL)bit options:(unsigned long long)options;
- (id)initWithPID:(int)pid orTask:(unsigned int)task options:(unsigned long long)options;
- (id)initWithPID:(int)pid;
- (id)initWithTask:(unsigned int)task;
- (id)initWithPID:(int)pid options:(unsigned long long)options;
- (id)initWithTask:(unsigned int)task options:(unsigned long long)options;
- (void)dealloc;
- (void)initializeSamplingContextWithOptions:(int)options;
- (void)_checkDispatchThreadLimits;
- (unsigned long long)recordSampleTo:(id)to timestamp:(unsigned long long)timestamp thread:(unsigned int)thread recordFramePointers:(BOOL)pointers clearMemoryCache:(BOOL)cache;
- (void)_fixupStacks:(id)stacks;
- (void)_runSamplingThread;
- (id)sampleAllThreadsOnceWithFramePointers:(BOOL)pointers;
- (id)sampleAllThreadsOnce;
- (id)sampleThread:(unsigned int)thread;
- (BOOL)start;
- (BOOL)stop;
- (BOOL)waitUntilDone;
- (void)setSamplingInterval:(double)interval;
- (double)samplingInterval;
- (void)setTimeLimit:(double)limit;
- (double)timeLimit;
- (void)setSampleLimit:(unsigned int)limit;
- (unsigned int)sampleLimit;
- (void)setRecordThreadStates:(BOOL)states;
- (struct _CSTypeRef { unsigned long long x0; unsigned long long x1; })symbolicator;
- (int)pid;
- (id)samples;
- (unsigned int)sampleCount;
- (void)flushData;
- (unsigned int)mainThread;
- (id)threadNameForThread:(unsigned int)thread returnedThreadId:(unsigned long long *)id returnedDispatchQueueSerialNum:(unsigned long long *)num;
- (id)threadNameForThread:(unsigned int)thread;
- (id)dispatchQueueNameForSerialNumber:(unsigned long long)number returnedConcurrentFlag:(BOOL *)flag returnedThreadId:(unsigned long long *)id;
- (id)dispatchQueueNameForSerialNumber:(unsigned long long)number;
- (id)threadDescriptionStringForBacktrace:(id)backtrace returnedAddress:(unsigned long long *)address;
- (void)setDelegate:(id)delegate;
- (id)delegate;
- (void)preloadSymbols;
- (void)sampleForDuration:(unsigned int)duration interval:(unsigned int)interval;
- (void)stopSampling;
- (void)forceStop;
- (id)stopSamplingAndReturnCallNode;
- (id)outputString;
- (void)writeOutput:(id)output append:(BOOL)append;
@end

#endif /* VMUSampler_h */
