//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 64561.91.2.0.0
//
#ifndef VMUProcessObjectGraph_h
#define VMUProcessObjectGraph_h
@import Foundation;

#include "VMUObjectGraph.h"
#include "VMUClassInfoMap.h"
#include "VMUCommonGraphInterface-Protocol.h"
#include "VMUDebugTimer.h"
#include "VMUGraphStackLogReader.h"
#include "VMUNodeToStringMap.h"
#include "VMURangeToStringMap.h"
#include "VMUStackLogReader-Protocol.h"
#include "VMUSymbolStore.h"
#include "VMUTaskMemoryScanner.h"

@class NSArray, NSDate, NSDictionary, NSString;

@interface VMUProcessObjectGraph : VMUObjectGraph<VMUCommonGraphInterface> {
  /* instance variables */
  unsigned long long _machAbsolute;
  NSArray *_regions;
  NSArray *_zoneNames;
  VMURangeToStringMap *_threadNameRanges;
  VMURangeToStringMap *_binarySectionNameRanges;
  VMURangeToStringMap *_regionSymbolNameRanges;
  BOOL _gotObjcClassStructureRanges;
  NSDictionary *_pthreadOffsets;
  void * _userMarked;
}

@property (retain, nonatomic) NSDate *snapshotDate;
@property (nonatomic) unsigned long long snapshotMachTime;
@property (nonatomic) unsigned long long physicalFootprint;
@property (nonatomic) unsigned long long physicalFootprintPeak;
@property (retain, nonatomic) NSDictionary *ledger;
@property (nonatomic) unsigned int idleExitStatus;
@property (retain, nonatomic) NSDictionary *srcAddressToExtraAutoreleaseCountDict;
@property (nonatomic) BOOL isTranslatedByRosetta;
@property (copy, nonatomic) NSArray *backtraces;
@property (retain, nonatomic) VMUSymbolStore *symbolStore;
@property (nonatomic) struct _VMURange { unsigned long long x0; unsigned long long x1; } dyldSharedCacheRange;
@property (weak, nonatomic) VMUTaskMemoryScanner *scanner;
@property (retain, nonatomic) VMUDebugTimer *debugTimer;
@property (retain, nonatomic) NSObject<VMUStackLogReader> *stackLogReader;
@property (nonatomic) BOOL showRawClassNames;
@property (nonatomic) BOOL showsPhysFootprint;
@property (nonatomic) unsigned int objectContentLevel;
@property (nonatomic) unsigned int objectContentLevelForNodeLabels;
@property (nonatomic) unsigned long long serializationOptions;
@property (readonly, nonatomic) VMUNodeToStringMap *nodeLabels;
@property (readonly, nonatomic) int pid;
@property (readonly, nonatomic) BOOL is64bit;
@property (readonly, nonatomic) unsigned int vmPageSize;
@property (readonly, nonatomic) unsigned int kernelPageSize;
@property (readonly, nonatomic) VMUClassInfoMap *realizedClasses;
@property (readonly, nonatomic) BOOL hasClassInfosDerivedFromStackBacktraces;
@property (readonly, nonatomic) unsigned int zoneCount;
@property (readonly, nonatomic) unsigned int regionCount;
@property (readonly, nonatomic) unsigned int nodeCount;
@property (readonly, nonatomic) unsigned int nodeNamespaceSize;
@property (readonly, nonatomic) NSString *processName;
@property (readonly, nonatomic) NSString *processDescriptionString;
@property (readonly, nonatomic) NSString *executablePath;
@property (readonly, nonatomic) NSString *binaryImagesDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)createWithTask:(unsigned int)task;

/* instance methods */
- (id)initWithPid:(int)pid nodes:(struct _VMUBlockNode { unsigned long long x0; unsigned int x1 :3; unsigned int x2 :2; unsigned int x3 :36; unsigned int x4 :23; } *)nodes nodeCount:(unsigned int)count zoneNames:(id)names classInfoMap:(id)map regions:(id)regions pthreadOffsets:(id)offsets userMarked:(void *)marked;
- (void)dealloc;
- (id)initWithArchived:(id)archived version:(long long)version options:(unsigned long long)options diskLogs:(id)logs error:(id *)error;
- (void)archiveDictionaryRepresentation:(id)representation options:(unsigned long long)options;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)setThreadName:(id)name forRange:(struct _VMURange { unsigned long long x0; unsigned long long x1; })range;
- (id)threadNameForAddress:(unsigned long long)address;
- (void)setBinarySectionName:(id)name forRange:(struct _VMURange { unsigned long long x0; unsigned long long x1; })range;
- (id)binarySectionNameForAddress:(unsigned long long)address;
- (struct _VMURange { unsigned long long x0; unsigned long long x1; })binarySectionRangeContainingAddress:(unsigned long long)address;
- (void)_deriveObjcClassStructureRanges;
- (void)setRegionSymbolName:(id)name forRange:(struct _VMURange { unsigned long long x0; unsigned long long x1; })range;
- (id)regionSymbolNameForAddress:(unsigned long long)address;
- (struct _VMURange { unsigned long long x0; unsigned long long x1; })regionSymbolRangeContainingAddress:(unsigned long long)address;
- (struct _VMURange { unsigned long long x0; unsigned long long x1; })rangeForSymbolName:(id)name inRegion:(id)region;
- (unsigned int)enumerateReferencesFromDataRegion:(id)region atGlobalSymbol:(id)symbol withBlock:(id /* block */)block;
- (unsigned int)nodeReferencedFromDataRegion:(id)region byGlobalSymbol:(id)symbol;
- (void)setLabel:(id)label forNode:(unsigned int)node;
- (id)labelForNode:(unsigned int)node;
- (BOOL)hasLabelsForNodes;
- (void *)contentForNode:(unsigned int)node;
- (id)shortLabelForNode:(unsigned int)node;
- (id)zoneNameForIndex:(unsigned int)index;
- (unsigned int)enumerateRegionsWithBlock:(id /* block */)block;
- (void)_reorderLabelsWithNodeNameMap:(unsigned int *)map;
- (void)_renameWithNodeMap:(unsigned int *)map nodeNamespace:(unsigned int)namespace edgeMap:(unsigned int *)map edgeNamespace:(unsigned int)namespace;
- (void *)copyUserMarked;
- (void)setUserMarked:(void *)marked;
- (id)sampleBacktracesString;
- (unsigned long long)ledgerValueForKey:(id)key keyExists:(BOOL *)exists;
- (id)_descriptionForRegionAddress:(unsigned long long)address withOffset:(unsigned long long)offset showSegment:(BOOL)segment;
- (id)vmuVMRegionForAddress:(unsigned long long)address;
- (id)vmuVMRegionForNode:(unsigned int)node;
- (id)shortNodeDescription:(unsigned int)description;
- (id)nodeDescription:(unsigned int)description;
- (id)nodeDescription:(unsigned int)description withOffset:(unsigned long long)offset;
- (id)nodeDescription:(unsigned int)description withOffset:(unsigned long long)offset showLabel:(BOOL)label;
- (id)nodeDescription:(unsigned int)description withDestinationNode:(unsigned int)node referenceInfo:(struct { unsigned long long x0; unsigned int x1; unsigned long long x2; })info;
- (id)nodeOffsetDescription:(struct { unsigned long long x0; unsigned int x1; unsigned long long x2; })description withSourceNode:(unsigned int)node destinationNode:(unsigned int)node;
- (id)_detailedNodeOffsetDescription:(struct { unsigned long long x0; unsigned int x1; unsigned long long x2; })description withSourceNode:(unsigned int)node destinationNode:(unsigned int)node alignmentSpacing:(unsigned int)spacing;
- (id)referenceDescription:(struct { unsigned long long x0; unsigned int x1; unsigned long long x2; })description withSourceNode:(unsigned int)node destinationNode:(unsigned int)node alignmentSpacing:(unsigned int)spacing;
- (void)refineTypesWithOverlay:(id)overlay;
- (void)refineEdges:(unsigned int)edges withOptions:(unsigned int)options markingInvalid:(void *)invalid;
- (void)markReachableNodesFromRoots:(void *)roots inMap:(void *)map;
- (void)markReachableNodesFromRoots:(void *)roots inMap:(void *)map options:(unsigned int)options;
- (id)leakedNodesGraph;
- (BOOL)nodeIsAutoreleasePoolContentPage:(unsigned int)page;
- (BOOL)nodeDetailIsAutoreleasePoolContentPage:(struct { unsigned long long x0; unsigned int x1 :60; unsigned int x2 :4; id x3; })page;
- (void)removeWeakEdges;
- (void)markRootNodes:(void *)nodes;
- (void)markLeafNodes:(void *)nodes;
- (void)resymbolicatePrivateMaps;
- (void)resymbolicateNonObjectsUsingStackBacktrace;
- (BOOL)resymbolicateWithDsymPath:(id)path libraryNames:(id)names all:(BOOL)all progress:(id)progress showDebugInfo:(BOOL)info error:(id *)error;
- (struct _CSArchitecture { int x0; int x1; })parseMacOSArchitectureFromProcessDescription;
- (void)_generateSymbolStoreFromExistingGraph;
@end

#endif /* VMUProcessObjectGraph_h */
