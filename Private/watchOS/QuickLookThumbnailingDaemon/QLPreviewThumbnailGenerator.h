//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 186.2.2.0.0
//
#ifndef QLPreviewThumbnailGenerator_h
#define QLPreviewThumbnailGenerator_h
@import Foundation;

#include "QLTGeneratorThumbnailRequest.h"

@class NSString, QLPlatformImage, QLThumbnailItem, QLThumbnailMetadata;
@protocol OS_dispatch_queue;

@interface QLPreviewThumbnailGenerator : NSObject

@property BOOL resultIsLowQuality;
@property BOOL wantsLowQuality;
@property (retain) QLThumbnailMetadata *generatedProperties;
@property int status;
@property (retain) QLPlatformImage *thumbnailImage;
@property (retain) QLThumbnailItem *item;
@property BOOL resultHasIconModeApplied;
@property (copy) NSString *extensionBadge;
@property (retain) QLTGeneratorThumbnailRequest *request;
@property int flavor;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentRect;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *generationQueue;
@property unsigned long long sandboxExtension;

/* class methods */
+ (BOOL)canGenerateThumbnailForURL:(id)url;
+ (double)cornerRadiusForSize:(struct CGSize { double x0; double x1; })size;
+ (id)generateIconDataFromThumbnailData:(id)data inputFormat:(id)format outputFormat:(id *)format outputContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect desiredSize:(struct CGSize { double x0; double x1; })size desiredScale:(double)scale desiredFlavor:(int)flavor extensionBadge:(id)badge wantsLowQuality:(BOOL)quality iconVariant:(long long)variant;

/* instance methods */
- (id)initWithGeneratorRequest:(id)request lowQuality:(BOOL)quality thumbnailItem:(id)item;
- (struct CGSize { double x0; double x1; })_pixelSize;
- (void)_generateThumbnailWithWillStartBlock:(id /* block */)block completionHandler:(id /* block */)handler;
- (void)generateWithCompletionBlock:(id /* block */)block;
- (void)generateWithWillStartBlock:(id /* block */)block completionBlock:(id /* block */)block;
- (void)cancel;
- (void)_replyWithImage:(id)image error:(id)error completionHandler:(id /* block */)handler;
- (struct CGContext *)_beginContext;
- (struct CGContext *)_beginContextWithSize:(struct CGSize { double x0; double x1; })size;
- (struct CGContext *)_beginContextWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (struct CGImage *)_createThumbnailForLivePhoto;
- (struct CGImage *)_createThumbnailForImage;
- (struct CGImage *)_createThumbnailForImageSource:(struct CGImageSource *)source;
- (struct CGImage *)_createThumbnailForPDFInProcess;
- (void)_createThumbnailForPDF:(id /* block */)pdf;
- (double)_minimumDimensionForPDFPageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect requestThumbnailSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (void)_drawRemotePDFPage:(id)pdfpage atIndex:(long long)index completionHandler:(id /* block */)handler;
- (struct CGImage *)_createThumbnailForText;
- (struct CGImage *)_drawRTFThumbnailFromAttributedString:(id)string inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect context:(struct CGContext *)context;
- (struct CGImage *)_drawTextThumbnailFromAttributedString:(id)string inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect context:(struct CGContext *)context;
- (struct CGImage *)_createThumbnailForMovie;
- (struct CGImage *)_createThumbnailForIWorkFile;
- (void)_generateThumbnailFromThirdPartyExtensionAndReplyWith:(id /* block */)with;
@end

#endif /* QLPreviewThumbnailGenerator_h */
