//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 186.2.2.0.0
//
#ifndef QLServerThread_h
#define QLServerThread_h
@import Foundation;

#include "_QLCacheThread.h"

@class NSMutableDictionary, NSOperationQueue, NSURL;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface QLServerThread : NSObject {
  /* instance variables */
  NSOperationQueue *_downloadsOperationQueue;
  NSObject<OS_dispatch_queue> *_pendingDownloadsQueue;
  BOOL _drainScheduled;
  atomic int _thumbnailDownloadsInFlight;
  NSObject<OS_dispatch_queue> *_downloadResponseProcessingQueue;
  NSObject<OS_dispatch_queue> *_externalThumbnailCacheQueue;
  NSObject<OS_dispatch_source> *_watchdogTimer;
  NSOperationQueue *_uncachedThumbnailRetrievalQueue;
  NSOperationQueue *_downscaledThumbnailGenerationQueue;
  NSObject<OS_dispatch_queue> *_previewThumbnailGeneratorQueue;
}

@property (retain) NSMutableDictionary *pendingRequests;
@property (retain) NSObject<OS_dispatch_queue> *completionBlocksQueue;
@property (retain) _QLCacheThread *cacheThread;
@property (retain) NSMutableDictionary *volumesToCaches;
@property (retain) NSMutableDictionary *fsidsToCaches;
@property (retain) NSObject<OS_dispatch_queue> *queue;
@property (copy) NSURL *overrideBasePersonaVolumesURLForTesting;

/* class methods */
+ (id)sharedInstance;
+ (void)updateThumbnailRequestThumbnailVersionWithThirdPartyGeneratorInformationIfNeeded:(id)needed;

/* instance methods */
- (id)init;
- (id)initWithCacheSize:(long long)size location:(id)location;
- (void)perform:(id /* block */)perform;
- (void)perform:(id /* block */)perform afterDelay:(long long)delay;
- (id)makeCacheThreadForPersonaString:(id)string containerURL:(id *)url;
- (id)uncachedCacheThreadForFileAtURL:(id)url;
- (id)cacheThreadForRequest:(id)request;
- (void)generateSuccessiveThumbnailRepresentationsForRequests:(id)requests generationHandler:(id)handler completionHandler:(id /* block */)handler;
- (void)generateSuccessiveThumbnailRepresentationsForGeneratorRequests:(id)requests completionHandler:(id /* block */)handler;
- (void)_installRequestsFinishedWatchdog;
- (void)_addThumbnailRequestBatchToQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_callCompletionHandler:(id /* block */)handler ofThumbnailRequestBatch:(id)batch;
- (void)cancelThumbnailRequests:(id)requests;
- (void)queueThumbnailRequest:(id)request tryCache:(BOOL)cache tryAdditionsFirst:(BOOL)first;
- (void)findUncachedThumbnailInGenStoreOrDownload:(id)download completionHandler:(id /* block */)handler;
- (void)findUncachedThumbnailInGenStoreForRequest:(id)request completionHandler:(id /* block */)handler;
- (id)genStoreThumbnailForRequest:(id)request error:(id *)error;
- (void)processLargeThumbnailData:(id)data withContentType:(id)type precacheThumbnails:(BOOL)thumbnails forRequest:(id)request completionHandler:(id /* block */)handler;
- (void)_saveLargeThumbnailToGenstoreWithData:(id)data url:(id)url;
- (void)_saveLargeThumbnailForDocumentAtURL:(id)url toGenstoreWithImage:(struct CGImage *)image automaticallyGenerated:(BOOL)generated;
- (void)_addAllThumbnailsSizesToCacheForRequest:(id)request withImageSource:(struct CGImageSource *)source imageSize:(struct CGSize { double x0; double x1; })size alreadyCachedSize:(struct CGSize { double x0; double x1; })size completionHandler:(id /* block */)handler;
- (void)generateThumbnailForThumbnailRequest:(id)request shouldUpdateGenstore:(BOOL)genstore completionHandler:(id /* block */)handler;
- (void)findThumbnailInAddition:(id)addition request:(id)request completionHandler:(id /* block */)handler;
- (void)addImageData:(id)data toCacheForRequest:(id)request withBitmapFormat:(id)format contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect flavor:(int)flavor metadata:(id)metadata;
- (void)addImageData:(id)data withBitmapFormat:(id)format contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect hasIconModeApplied:(BOOL)applied flavor:(int)flavor extensionBadge:(id)badge metadata:(id)metadata toCacheAndCompleteRequest:(id)request;
- (id)imageDataForImage:(struct CGImage *)image;
- (void)completeThumbnailRequest:(id)request thumbnailData:(id)data updatedMetadata:(id)metadata;
- (void)completeThumbnailRequest:(id)request bitmapData:(id)data metadata:(id)metadata contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect thumbnailRepresentation:(long long)representation iconFlavor:(int)flavor format:(id)format clientShouldTakeOwnership:(BOOL)ownership;
- (void)thumbnailRequestWasCancelled:(id)cancelled;
- (void)didNotFindLowQualityEntryInCachedForThumbnailRequest:(id)request error:(id)error;
- (void)failedToCompleteThumbnailRequest:(id)request error:(id)error;
- (void)sendResultForThumbnailRequest:(id)request bitmapData:(id)data format:(id)format metadata:(id)metadata contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect iconFlavor:(int)flavor thumbnailRepresentation:(long long)representation clientShouldTakeOwnership:(BOOL)ownership reenqueueRequest:(BOOL)request error:(id)error;
- (void)_notifyGenerationHandlerOfThumbnailGenerationForRequest:(id)request bitmapData:(id)data format:(id)format metadata:(id)metadata contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect iconFlavor:(int)flavor thumbnailRepresentation:(long long)representation clientShouldTakeOwnership:(BOOL)ownership error:(id)error;
- (BOOL)_saveResultForThumbnailRequest:(id)request withBitmapData:(id)data format:(id)format error:(id *)error;
- (void)_completeHandledThumbnailRequest:(id)request;
- (void)_removeRequestFromPendingRequests:(id)requests;
- (BOOL)_canUseAdditionToProvideThumbnail:(id)thumbnail forThumbnailRequest:(id)request taggedLogicalURL:(id)url;
- (void)reset;
- (void)setLastHitDateOfAllCachedThumbnailsToDate:(id)date;
- (void)forEachCacheThread:(id /* block */)thread;
- (id)cacheThreadForVolume:(id)volume;
- (id)cacheThreadForFileIdentifier:(id)identifier atURL:(id)url;
- (id)allKnownDataSeparatedVolumes;
@end

#endif /* QLServerThread_h */
