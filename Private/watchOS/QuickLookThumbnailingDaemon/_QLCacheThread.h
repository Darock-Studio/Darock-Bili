//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 186.2.2.0.0
//
#ifndef _QLCacheThread_h
#define _QLCacheThread_h
@import Foundation;

#include "QLCacheCleanUpDatabaseThread.h"
#include "QLDiskCache.h"
#include "QLDiskCacheDelegate-Protocol.h"
#include "QLDiskCacheQueryOperation.h"
#include "QLMemoryCache.h"
#include "QLServerThread.h"

@class NSLock, NSOperationQueue, NSString, NSURL;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_os_transaction;

@interface _QLCacheThread : NSObject<QLDiskCacheDelegate> {
  /* instance variables */
  NSOperationQueue *_memoryCacheQueryOperationQueue;
  NSObject<OS_dispatch_queue> *_writeQueue;
  NSObject<OS_dispatch_queue> *_writeCoalesceQueue;
  id /* block */ _writeBlocks[10];
  id /* block */ _cleanupBlocks[10];
  NSObject<OS_dispatch_source> *_drainTimer;
  NSObject<OS_os_transaction> *_writeTransaction;
}

@property (retain) NSObject<OS_dispatch_source> *lowDiskSpaceSource;
@property (retain) NSObject<OS_dispatch_queue> *lowDiskSpaceSourceQueue;
@property (retain) NSLock *modeLock;
@property (retain) QLDiskCacheQueryOperation *currentDiskCacheQueryOperation;
@property (retain) NSOperationQueue *diskCacheQueryOperationQueue;
@property BOOL serverThreadIsIdle;
@property (readonly) unsigned long long currentMode;
@property unsigned long long missedCount;
@property unsigned long long hitCount;
@property BOOL waitingForCleanup;
@property (retain) QLCacheCleanUpDatabaseThread *cleanUpDatabaseThread;
@property (weak) QLServerThread *serverThread;
@property (readonly) QLMemoryCache *memoryCache;
@property (readonly) QLDiskCache *diskCache;
@property (readonly) BOOL lowDiskSpace;
@property (readonly) NSString *modeDescription;
@property (retain) NSURL *diskCacheURL;
@property (nonatomic) BOOL shouldRemoveThumbnailsForDeletedFiles;

/* class methods */
+ (long long)defaultCacheSize;

/* instance methods */
- (void)_setLowDiskSpace:(BOOL)space;
- (void)_dispatchThumbnailRequestInServerThread:(id)thread;
- (void)_addThumbnailRequestIntoDiskCacheQueryQueue:(id)queue;
- (void)_sendThumbnailData:(id)data forThumbnailRequest:(id)request;
- (void)_thumbnailHasBeenCancelled:(id)cancelled;
- (void)_cleanUpDatabaseDone;
- (long long)purgeableSpaceOnMountPoint:(id)point withUrgency:(int)urgency beforeDate:(id)date;
- (long long)purgeOnMountPoint:(id)point withUrgency:(int)urgency beforeDate:(id)date;
- (id)initWithServerThread:(id)thread cacheSize:(long long)size location:(id)location;
- (void)startWriting;
- (void)stopWriting;
- (void)databaseCorruptionDetected;
- (void)_drainPendingBlocks;
- (void)_scheduledDrainPendingBlocks;
- (void)_drainPendingBlocksNow;
- (void)_scheduleBlockDrain;
- (void)_unscheduleBlockDrain;
- (void)_destroyDrainTimer;
- (void)enqueueWriting:(id /* block */)writing;
- (BOOL)addThumbnailRequest:(id)request;
- (BOOL)addNoThumbnailIntoCache:(id)cache;
- (BOOL)addThumbnailIntoCache:(id)cache bitmapFormat:(id)format bitmapData:(id)data metadata:(id)metadata flavor:(int)flavor contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect badgeType:(unsigned long long)type externalGeneratorDataHash:(unsigned long long)hash;
- (unsigned long long)thumbnailInMemoryToSaveCount;
- (unsigned long long)hitToSaveCount;
- (void)_updateLowDisk;
- (void)_registerMachPortForLowDiskSpaceNotification;
- (void)_unregisterMachPortForLowDiskSpaceNotification;
- (void)reset;
- (void)openCache;
- (void)closeCache;
- (BOOL)isCacheOpened;
- (void)forceCommitAndClose;
- (void)forceCommit;
- (BOOL)isIdle;
- (void)prepareToExit;
- (void)exitImmediately;
- (void)serverIsIdle;
- (void)serverIsWorking;
- (id)contentDescriptionForURL:(struct __CFURL *)url;
- (void)updateMode;
- (BOOL)_shouldQuitWorkingModeForMode:(unsigned long long)mode;
- (BOOL)_shouldQuitLowSpaceModeForMode:(unsigned long long)mode;
- (BOOL)_shouldQuitPauseModeForMode:(unsigned long long)mode;
- (BOOL)_shouldQuitClosedModeForMode:(unsigned long long)mode;
- (BOOL)_shouldQuitResetingModeForMode:(unsigned long long)mode;
- (BOOL)_shouldQuitCleanUpDatabaseModeForMode:(unsigned long long)mode;
- (void)_willStartWorkingModeFromMode:(unsigned long long)mode;
- (void)_willStartLowSpaceModeFromMode:(unsigned long long)mode;
- (void)_willStartPauseModeFromMode:(unsigned long long)mode;
- (void)_willStartClosedModeFromMode:(unsigned long long)mode;
- (void)_willStartResetingModeFromMode:(unsigned long long)mode;
- (void)_willStartCleanUpDatabaseModeFromMode:(unsigned long long)mode;
- (void)_waitForEndOfDatabaseCleanup;
- (void)_setMode:(unsigned long long)mode;
- (void)_updateMode;
- (id)cacheInfo;
- (id)allThumbnailsInfo;
- (id)_allThumbnailsEnumerateWithEnumerator:(id)enumerator;
- (id)allThumbnailsForIno:(unsigned long long)ino fsid:(struct fsid { int x0[2] })fsid;
- (id)allThumbnailsForFileIdentifier:(id)identifier;
- (BOOL)setLastHitDateOfAllCachedThumbnailsToDate:(id)date;
@end

#endif /* _QLCacheThread_h */
