//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 402.2.3.0.0
//
#ifndef EspressoDataFrameExecutor_h
#define EspressoDataFrameExecutor_h
@import Foundation;

@class NSArray;
@protocol {vector<__CVBuffer *, std::allocator<__CVBuffer *>>="__begin_"^^{__CVBuffer}"__end_"^^{__CVBuffer}"__end_cap_"{__compressed_pair<__CVBuffer **, std::allocator<__CVBuffer *>>="__value_"^^{__CVBuffer}}}, {vector<void *, std::allocator<void *>>="__begin_"^^v"__end_"^^v"__end_cap_"{__compressed_pair<void **, std::allocator<void *>>="__value_"^^v}};

@interface EspressoDataFrameExecutor : NSObject {
  /* instance variables */
  struct vector<void *, std::allocator<void *>> { void * *__begin_; void * *__end_; struct __compressed_pair<void **, std::allocator<void *>> { void * *__value_; } __end_cap_; } pointers_to_free;
  struct vector<__CVBuffer *, std::allocator<__CVBuffer *>> { struct __CVBuffer * *__begin_; struct __CVBuffer * *__end_; struct __compressed_pair<__CVBuffer **, std::allocator<__CVBuffer *>> { struct __CVBuffer * *__value_; } __end_cap_; } pixelbuffers_to_release;
}

@property (retain) NSArray *outputMatchingBuffers;
@property (nonatomic) int use_cvpixelbuffer;

/* instance methods */
- (BOOL)useCVPixelBuffersForOutputs:(BOOL)outputs;
- (BOOL)useCVPixelBuffers;
- (int)bindInput:(id)input fromImageAttachment:(id)attachment toNetwork:(struct { void * x0; int x1; })network;
- (int)bindInput:(id)input fromTensorAttachment:(id)attachment toNetwork:(struct { void * x0; int x1; })network;
- (int)bindInputsFromFrame:(id)frame toNetwork:(struct { void * x0; int x1; })network;
- (int)bindOutputsFromFrame:(id)frame toNetwork:(struct { void * x0; int x1; })network referenceNetwork:(struct { void * x0; int x1; })network;
- (int)bindOutputsFromFrame:(id)frame toNetwork:(struct { void * x0; int x1; })network;
- (int)bindOutputsFromFrame:(id)frame toNetwork:(struct { void * x0; int x1; })network executionStatus:(int)status;
- (void)freeTemporaryResources;
- (void)dealloc;
@end

#endif /* EspressoDataFrameExecutor_h */
