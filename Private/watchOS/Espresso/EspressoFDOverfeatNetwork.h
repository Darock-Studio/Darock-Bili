//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 402.2.3.0.0
//
#ifndef EspressoFDOverfeatNetwork_h
#define EspressoFDOverfeatNetwork_h
@import Foundation;

@class NSMutableDictionary, NSString;
@protocol struct shared_ptr<Espresso::abstract_context> { struct abstract_context * x0; struct __shared_weak_count * x1; }, {net_strides_configuration="num_layer"i"kernel_size"{vector<int, std::allocator<int>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::allocator<int>>="__value_"^i}}"stride"{vector<int, std::allocator<int>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::allocator<int>>="__value_"^i}}"pad"{vector<int, std::allocator<int>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::allocator<int>>="__value_"^i}}}, {pair<unsigned long long, unsigned long long>="first"Q"second"Q}, {shared_ptr<Espresso::abstract_context>="__ptr_"^{abstract_context}"__cntrl_"^{__shared_weak_count}}, {vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}, {vector<int, std::allocator<int>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::allocator<int>>="__value_"^i}}, {vector<std::pair<unsigned long long, unsigned long long>, std::allocator<std::pair<unsigned long long, unsigned long long>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned long long, unsigned long long> *, std::allocator<std::pair<unsigned long long, unsigned long long>>>="__value_"^v}}, {vector<std::shared_ptr<Espresso::blob<float, 3>>, std::allocator<std::shared_ptr<Espresso::blob<float, 3>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<Espresso::blob<float, 3>> *, std::allocator<std::shared_ptr<Espresso::blob<float, 3>>>>="__value_"^v}}, {vector<std::shared_ptr<Espresso::fast_pyramid_resizer>, std::allocator<std::shared_ptr<Espresso::fast_pyramid_resizer>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<Espresso::fast_pyramid_resizer> *, std::allocator<std::shared_ptr<Espresso::fast_pyramid_resizer>>>="__value_"^v}}, {vector<std::shared_ptr<Espresso::net>, std::allocator<std::shared_ptr<Espresso::net>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<Espresso::net> *, std::allocator<std::shared_ptr<Espresso::net>>>="__value_"^v}};

@interface EspressoFDOverfeatNetwork : NSObject {
  /* instance variables */
  struct vector<std::shared_ptr<Espresso::net>, std::allocator<std::shared_ptr<Espresso::net>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<Espresso::net> *, std::allocator<std::shared_ptr<Espresso::net>>> { void *__value_; } __end_cap_; } gpu_nets;
  struct vector<std::shared_ptr<Espresso::net>, std::allocator<std::shared_ptr<Espresso::net>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<Espresso::net> *, std::allocator<std::shared_ptr<Espresso::net>>> { void *__value_; } __end_cap_; } ecpu_nets;
  struct vector<std::pair<unsigned long long, unsigned long long>, std::allocator<std::pair<unsigned long long, unsigned long long>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned long long, unsigned long long> *, std::allocator<std::pair<unsigned long long, unsigned long long>>> { void *__value_; } __end_cap_; } net_scales;
  struct vector<std::pair<unsigned long long, unsigned long long>, std::allocator<std::pair<unsigned long long, unsigned long long>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned long long, unsigned long long> *, std::allocator<std::pair<unsigned long long, unsigned long long>>> { void *__value_; } __end_cap_; } full_scales;
  struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } scalesc;
  struct vector<std::shared_ptr<Espresso::fast_pyramid_resizer>, std::allocator<std::shared_ptr<Espresso::fast_pyramid_resizer>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<Espresso::fast_pyramid_resizer> *, std::allocator<std::shared_ptr<Espresso::fast_pyramid_resizer>>> { void *__value_; } __end_cap_; } resizers_for_batching;
  int n_resizers_for_batching;
  struct vector<std::shared_ptr<Espresso::blob<float, 3>>, std::allocator<std::shared_ptr<Espresso::blob<float, 3>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<Espresso::blob<float, 3>> *, std::allocator<std::shared_ptr<Espresso::blob<float, 3>>>> { void *__value_; } __end_cap_; } probBlobs;
  struct vector<std::shared_ptr<Espresso::blob<float, 3>>, std::allocator<std::shared_ptr<Espresso::blob<float, 3>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<Espresso::blob<float, 3>> *, std::allocator<std::shared_ptr<Espresso::blob<float, 3>>>> { void *__value_; } __end_cap_; } boxBlobs;
  NSMutableDictionary *_errorForLayers;
  struct pair<unsigned long long, unsigned long long> { unsigned long long first; unsigned long long second; } cropDims;
  struct CGColorSpace * colorSpace;
  struct net_strides_configuration { int num_layer; struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; struct __compressed_pair<int *, std::allocator<int>> { int *__value_; } __end_cap_; } kernel_size; struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; struct __compressed_pair<int *, std::allocator<int>> { int *__value_; } __end_cap_; } stride; struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; struct __compressed_pair<int *, std::allocator<int>> { int *__value_; } __end_cap_; } pad; } strideConf;
  int retile_stride;
  int retile_tile_sz;
  struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; struct __compressed_pair<int *, std::allocator<int>> { int *__value_; } __end_cap_; } retile_n_outputs_v;
  int tile_w_1;
  int tile_h_1;
}

@property (retain, nonatomic) NSString *basename;
@property (retain, nonatomic) NSString *weights;
@property (nonatomic) int scaleConfig;
@property (nonatomic) int mode;
@property (nonatomic) int cpin;
@property (nonatomic) struct shared_ptr<Espresso::abstract_context> { struct abstract_context * x0; struct __shared_weak_count * x1; } context_cpu;
@property (nonatomic) BOOL useGPUScaler;
@property (nonatomic) int scalingMode;
@property (nonatomic) float maxScale;
@property (nonatomic) int forceMaxNScales;

/* instance methods */
- (struct shared_ptr<Espresso::fast_pyramid_resizer> { struct fast_pyramid_resizer * x0; struct __shared_weak_count * x1; })resizerAtIndex:(int)index;
- (int)resizerCount;
- (struct shared_ptr<Espresso::net> { struct net * x0; struct __shared_weak_count * x1; })gpu_net:(int)gpu_net;
- (struct shared_ptr<Espresso::net> { struct net * x0; struct __shared_weak_count * x1; })cpu_net:(int)cpu_net;
- (id)init;
- (void)dealloc;
- (double)getScale:(int)scale;
- (struct net_strides_configuration { int x0; struct vector<int, std::allocator<int>> { int * x0; int * x1; struct __compressed_pair<int *, std::allocator<int>> { int * x0; } x2; } x1; struct vector<int, std::allocator<int>> { int * x0; int * x1; struct __compressed_pair<int *, std::allocator<int>> { int * x0; } x2; } x2; struct vector<int, std::allocator<int>> { int * x0; int * x1; struct __compressed_pair<int *, std::allocator<int>> { int * x0; } x2; } x3; })strideConfiguration;
- (void)autoResizeForAspectRatio:(float)ratio useLowPriorityMode:(BOOL)mode gpuPriority:(unsigned int)priority;
- (void)reset;
- (void)wipeLayersMemory;
- (void)autoSetupNetBaseName:(id)name weights:(id)weights scaleConfig:(int)config setupMode:(int)mode computePath:(int)path autoAspectRatio:(float)ratio forceReset:(BOOL)reset useLowPriorityMode:(BOOL)mode gpuPriority:(unsigned int)priority;
- (void)retryLoadingCaffeNet:(void *)net name:(id)name weights:(id)weights context:(struct shared_ptr<Espresso::abstract_context> { struct abstract_context * x0; struct __shared_weak_count * x1; })context cp:(int)cp;
- (int)getNumScales;
- (struct shared_ptr<Espresso::blob<float, 3>> { void * x0; struct __shared_weak_count * x1; })probBlobForScale:(int)scale;
- (struct shared_ptr<Espresso::blob<float, 3>> { void * x0; struct __shared_weak_count * x1; })boxBlobForScale:(int)scale;
- (void)generatePyramid:(const void *)pyramid tex:(id)tex;
- (void)processBlob:(const void *)blob tex:(id)tex;
- (void)processVimageNoRotation:(const struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)rotation tex:(id)tex doBGRA2RGBA:(BOOL)rgba;
- (void)processBlobNoRotation:(const void *)rotation tex:(id)tex doBGRA2RGBA:(BOOL)rgba;
- (void)processPyramid:(struct shared_ptr<Espresso::fast_pyramid_resizer> { struct fast_pyramid_resizer * x0; struct __shared_weak_count * x1; })pyramid;
- (void)processPyramid:(struct shared_ptr<Espresso::fast_pyramid_resizer> { struct fast_pyramid_resizer * x0; struct __shared_weak_count * x1; })pyramid gpu_resizer:(id)gpu_resizer;
- (int)default_retile_outputs;
- (void)setup_retile;
- (void)retile_and_forward_espresso_network_at_index:(int)retile_and_forward_espresso_network_at_index net:(const void *)net pyr:(const void *)pyr;
- (void)forward_cpu_network_at_index:(int)forward_cpu_network_at_index pyr:(const void *)pyr;
- (void)storeDataForPruning:(struct shared_ptr<Espresso::blob<float, 4>> { void * x0; struct __shared_weak_count * x1; })pruning prob:(float)prob;
- (BOOL)needRetiling:(int)retiling;
- (id)errorForLayers;
- (void)setContextMetal:(id)metal;
- (void)setContextCpu:(id)cpu;
@end

#endif /* EspressoFDOverfeatNetwork_h */
