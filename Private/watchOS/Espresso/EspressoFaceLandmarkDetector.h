//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 402.2.3.0.0
//
#ifndef EspressoFaceLandmarkDetector_h
#define EspressoFaceLandmarkDetector_h
@import Foundation;

@protocol {shared_ptr<Espresso::net>="__ptr_"^{net}"__cntrl_"^{__shared_weak_count}}, {vector<std::shared_ptr<Espresso::net>, std::allocator<std::shared_ptr<Espresso::net>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<Espresso::net> *, std::allocator<std::shared_ptr<Espresso::net>>>="__value_"^v}};

@interface EspressoFaceLandmarkDetector : NSObject {
  /* instance variables */
  struct vImage_Buffer { void *data; unsigned long long height; unsigned long long width; unsigned long long rowBytes; } crop_scaled;
  struct vImage_Buffer { void *data; unsigned long long height; unsigned long long width; unsigned long long rowBytes; } crop_192;
  struct shared_ptr<Espresso::net> { struct net *__ptr_; struct __shared_weak_count *__cntrl_; } net;
  struct shared_ptr<Espresso::net> { struct net *__ptr_; struct __shared_weak_count *__cntrl_; } net_detect;
  struct vector<std::shared_ptr<Espresso::net>, std::allocator<std::shared_ptr<Espresso::net>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<Espresso::net> *, std::allocator<std::shared_ptr<Espresso::net>>> { void *__value_; } __end_cap_; } nets_sub_landmark;
}

@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } newface;

/* instance methods */
- (struct vector<FaceLandmarkDetectorPoint, std::allocator<FaceLandmarkDetectorPoint>> { struct FaceLandmarkDetectorPoint * x0; struct FaceLandmarkDetectorPoint * x1; struct __compressed_pair<FaceLandmarkDetectorPoint *, std::allocator<FaceLandmarkDetectorPoint>> { struct FaceLandmarkDetectorPoint * x0; } x2; })extractSubLandmarksFromCrop192:(struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })crop192 centers192:(void *)centers192;
- (struct vector<FaceLandmarkDetectorPoint, std::allocator<FaceLandmarkDetectorPoint>> { struct FaceLandmarkDetectorPoint * x0; struct FaceLandmarkDetectorPoint * x1; struct __compressed_pair<FaceLandmarkDetectorPoint *, std::allocator<FaceLandmarkDetectorPoint>> { struct FaceLandmarkDetectorPoint * x0; } x2; })detect:(struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })detect face:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })face sublandmark:(BOOL)sublandmark doFaceRectFix:(BOOL)fix;
- (struct vector<FaceLandmarkDetectorPoint, std::allocator<FaceLandmarkDetectorPoint>> { struct FaceLandmarkDetectorPoint * x0; struct FaceLandmarkDetectorPoint * x1; struct __compressed_pair<FaceLandmarkDetectorPoint *, std::allocator<FaceLandmarkDetectorPoint>> { struct FaceLandmarkDetectorPoint * x0; } x2; })detectInImageRect:(struct vImage_Buffer { void * x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })rect face:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })face sublandmark:(BOOL)sublandmark;
- (id)initWithNetworkAtPath:(id)path context:(struct shared_ptr<Espresso::abstract_context> { struct abstract_context * x0; struct __shared_weak_count * x1; })context platform:(int)platform computePath:(int)path;
- (id)initWithNetworkAtPath:(id)path contextObjC:(id)c platform:(int)platform computePath:(int)path;
- (id)init;
- (void)commonInit:(id)init context:(struct shared_ptr<Espresso::abstract_context> { struct abstract_context * x0; struct __shared_weak_count * x1; })context platform:(int)platform computePath:(int)path;
- (void)dealloc;
@end

#endif /* EspressoFaceLandmarkDetector_h */
