//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 470.14.3.0.0
//
#ifndef SSCHistogram_h
#define SSCHistogram_h
@import Foundation;

#include "FigMetalContext.h"

@protocol [1@"<MTLComputePipelineState>"];

@interface SSCHistogram : NSObject {
  /* instance variables */
  FigMetalContext *_metalContext;
  <MTLComputePipelineState> * _pipelineStates[1];
}

/* instance methods */
- (id)initWithOptionalCommandQueue:(id)queue;
- (int)singleComponentGPUHistogramInputPixelBuffer:(struct __CVBuffer *)buffer validRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect outputHistogram:(id *)histogram optionalChannelConfig:(struct { int x0; float x1; } *)config;
- (int)singleComponentGPUHistogramInputTexture:(id)texture validRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect outputHistogram:(id *)histogram optionalChannelConfig:(struct { int x0; float x1; } *)config;
- (int)singleComponentCPUHistogramInputPixelBuffer:(struct __CVBuffer *)buffer validRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect outputHistogram:(id *)histogram;
- (int)singleComponentCPUHistogramInputPixelBuffer:(struct __CVBuffer *)buffer validRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect subSampleX:(unsigned int)x subSampleY:(unsigned int)y outputHistogram:(id *)histogram;
- (int)singleComponentGPUAverageInputPixelBuffer:(struct __CVBuffer *)buffer validRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect outputAverage:(float *)average;
- (int)singleComponentCPUAverageInputPixelBuffer:(struct __CVBuffer *)buffer validRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect outputAverage:(float *)average;
@end

#endif /* SSCHistogram_h */
