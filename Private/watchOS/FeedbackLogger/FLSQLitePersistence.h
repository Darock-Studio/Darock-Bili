//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.18.2.0.0
//
#ifndef FLSQLitePersistence_h
#define FLSQLitePersistence_h
@import Foundation;

#include "FLLoggingContext.h"
#include "FLSQLiteDatabaseConnection.h"

@class NSDate, NSString;
@protocol OS_os_log;

@interface FLSQLitePersistence : NSObject

@property (readonly, copy, nonatomic) NSString *databasePath;
@property (retain, nonatomic) NSObject<OS_os_log> *log;
@property (retain, nonatomic) FLLoggingContext *context;
@property (nonatomic) struct sqlite3_stmt * insertRecordsStatement;
@property (nonatomic) struct sqlite3_stmt * iteratePayloadStatement;
@property (readonly, copy, nonatomic) NSString *storeIdentifier;
@property (nonatomic) atomic BOOL configured;
@property (nonatomic) unsigned long long maxBatchPayloadInBytes;
@property (nonatomic) unsigned long long maxAllowedDatabaseSizeInBytes;
@property (copy, nonatomic) NSString *currentBatchIdentifier;
@property (copy, nonatomic) NSDate *currentBatchCreationDate;
@property (nonatomic) unsigned long long currentBatchPayloadSize;
@property (nonatomic) double batchMaximumDuration;
@property (nonatomic) struct sqlite3_stmt * maxRowIdStatement;
@property (nonatomic) struct sqlite3 * db;
@property (retain, nonatomic) FLSQLiteDatabaseConnection *dbConnection;

/* class methods */
+ (id)batchStatusDescription:(int)description;
+ (id)uploadStatusDescription:(int)description;

/* instance methods */
- (void)finalizeObserver;
- (long long)maxRowId;
- (id)registerInsertionObserver:(id /* block */)observer;
- (void)observeInsertionAtRow:(long long)row observer:(id /* block */)observer;
- (BOOL)prepareSchema;
- (BOOL)isSchemaReady;
- (BOOL)updateSchema;
- (int)getSchemaVersion;
- (unsigned long long)getCurrentDatabaseSize;
- (BOOL)setDatabaseSizeLimit;
- (id)getBatchIdsWithStatus:(int)status;
- (id)getBatchIdsWithAllStatuses;
- (id)getPurgableBatchIds;
- (id)_getBatchIdsHelper:(struct sqlite3_stmt *)helper;
- (id)getRecordsRangeStart:(long long)start end:(long long)end;
- (id)metadataForBatch:(id)batch;
- (BOOL)_updateStatusHelperForBatch:(id)batch toStatus:(int)status;
- (BOOL)_updateMetadataHelperForBatch:(id)batch query:(const char *)query;
- (BOOL)updateStatusForBatch:(id)batch toStatus:(int)status;
- (int)getDataVersion;
- (BOOL)initializeNewBatch;
- (BOOL)closeOrphanedBatches;
- (BOOL)closeAllBatches;
- (BOOL)forceCloseOpenBatches;
- (BOOL)closeOpenBatch;
- (BOOL)recoverOrphanedProcessingBatches;
- (BOOL)markBatchesforPurge;
- (long long)doBatchesHousekeeping;
- (BOOL)vacuum;
- (BOOL)purgeBatch:(id)batch;
- (BOOL)__purgeStatementHelper:(const char *)helper forBatchId:(id)id;
- (BOOL)purgeAllBatches;
- (id)getUploadIdsWithStatus:(int)status;
- (id)getUploadIdsWithAllStatuses;
- (id)getPurgableUploadIds;
- (id)_getUploadIdsHelper:(struct sqlite3_stmt *)helper;
- (id)getUploadsRangeStart:(long long)start end:(long long)end;
- (BOOL)_updateStatusHelperForUpload:(id)upload toStatus:(int)status;
- (BOOL)_updateMetadataHelperForUpload:(id)upload query:(const char *)query;
- (BOOL)updateStatusForUpload:(id)upload toStatus:(int)status;
- (BOOL)recoverOrphanedProcessingUploads;
- (long long)doUploadHousekeeping;
- (BOOL)markUploadsForPurge;
- (long long)cleanupPurgableUploads;
- (id)persistUploadPayload:(id)payload;
- (id)getUploadRecordWithId:(id)id;
- (BOOL)iterateUploadsWithCodeblock:(id /* block */)codeblock;
- (BOOL)deleteUploadWithIdentifier:(id)identifier;
- (BOOL)__deleteStatementHelper:(const char *)helper forUploadId:(id)id;
- (BOOL)deleteAllUploads;
- (id)initWithStoreId:(id)id dbConnection:(id)connection loggingContext:(id)context;
- (id)initWithStoreId:(id)id loggingContext:(id)context;
- (void)dealloc;
- (BOOL)initializeConnectionForUseBy:(int)by;
- (id)persist:(id)persist;
- (BOOL)open;
- (BOOL)tryRolloverBatchIfNecessary:(unsigned long long)necessary;
- (BOOL)tryPrepare:(const char *)prepare preparedStatement:(inout struct sqlite3_stmt * *)statement;
- (BOOL)executeSQLStatement:(const char *)sqlstatement usingTransaction:(BOOL)transaction;
- (BOOL)executeSQLStatement:(const char *)sqlstatement;
- (BOOL)executeInTransactionMultipleSQLStatements:(id)sqlstatements;
- (BOOL)iteratePayloadForBatch:(id)batch codeblock:(id /* block */)codeblock;
- (BOOL)getIntValueForPragma:(id)pragma into:(inout int *)into;
- (BOOL)createDatabase;
- (void)closeDatabase;
- (BOOL)deleteDatabase;
@end

#endif /* FLSQLitePersistence_h */
