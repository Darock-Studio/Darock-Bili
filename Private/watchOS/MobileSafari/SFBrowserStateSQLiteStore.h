//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef SFBrowserStateSQLiteStore_h
#define SFBrowserStateSQLiteStore_h
@import Foundation;

@class NSArray, NSMutableDictionary, NSURL, WBSSQLiteDatabase, WBSSQLiteStatement;
@protocol OS_dispatch_queue;

@interface SFBrowserStateSQLiteStore : NSObject {
  /* instance variables */
  NSURL *_databaseURL;
  WBSSQLiteDatabase *_database;
  NSObject<OS_dispatch_queue> *_databaseQueue;
  NSMutableDictionary *_tabUUIDStrings;
  NSMutableDictionary *_browserWindowDatabaseIDs;
  WBSSQLiteStatement *_cachedTabDeleteStatement;
  BOOL _generateUUIDFunctionAttached;
}

@property (readonly, copy, nonatomic) NSArray *browserWindows;
@property (readonly, copy, nonatomic) NSArray *recentlyClosedWindows;

/* instance methods */
- (id)initWithDatabaseURL:(id)url;
- (id)init;
- (void)dealloc;
- (BOOL)_checkDatabaseIntegrity;
- (void)_openDatabaseAndCheckIntegrity:(BOOL)integrity;
- (void)_closeDatabase;
- (BOOL)_isDatabaseOpen;
- (int)_schemaVersion;
- (int)_setDatabaseSchemaVersion:(int)version;
- (int)_migrateToCurrentSchemaVersionIfNeeded;
- (void)_migrateFromLegacyPlistIfNeeded;
- (void)_migrateFromLegacyPlistWithPath:(id)path;
- (int)_migrateToSchemaVersion:(int)version;
- (int)_migrateToSchemaVersion_2;
- (int)_migrateToSchemaVersion_3;
- (int)_migrateToSchemaVersion_5;
- (int)_migrateToSchemaVersion_6;
- (int)_recoverFromDatabaseInconsistencyFromSchemaVersion3Migration;
- (int)_createTableForTabSession;
- (int)_createTableForTabs;
- (int)_createFreshDatabaseSchema;
- (int)_migrateToSchemaVersion_4;
- (int)_mergeAllWindowsIfNeeded;
- (void)mergeAllWindows;
- (BOOL)updateSceneID:(id)id;
- (void)closeDatabase;
- (void)deleteAllRecentlyClosedWindows;
- (void)_removeSavedSessionStateDataForTabsWithUUIDStrings:(id)uuidstrings;
- (void)removeSavedSessionStateDataForTabsWithUUIDStrings:(id)uuidstrings;
- (void)saveTabStateWithDictionary:(id)dictionary;
- (id)tabStateDataForUUID:(id)uuid;
- (id)_tabStateDataForUUID:(id)uuid;
- (void)readTabStatesWithBrowserWindowUUID:(id)uuid completion:(id /* block */)completion;
- (void)_readTabStatesWithBrowserWindowUUID:(id)uuid completion:(id /* block */)completion;
- (id)tabStatesWithBrowserWindowUUID:(id)uuid;
- (long long)_saveBrowserWindowStateWithDictionary:(id)dictionary;
- (long long)_saveBrowserWindowStateWithData:(id)data;
- (void)_updateOrInsertTabStateWithData:(id)data;
- (BOOL)_updateTabStateWithData:(id)data;
- (void)_insertTabStateWithData:(id)data;
- (id)_sqliteStatementForTabDeleting;
- (void)_updateBrowserWindowStateWithDictionary:(id)dictionary;
- (void)_updateBrowserWindowWithData:(id)data tabs:(id)tabs;
- (void)updateBrowserWindowWithData:(id)data tabs:(id)tabs;
- (id)_tabUUIDsInWindow:(id)window;
- (void)_cacheUUIDForTabStateData:(id)data;
- (BOOL)_isTabStateCached:(id)cached;
- (void)_setDatabaseID:(long long)id browserWindow:(id)window;
- (long long)_databaseIDForBrowserWindow:(id)window;
- (void)updateBrowserWindowStateWithDictionary:(id)dictionary completion:(id /* block */)completion;
- (id)_readSavedSessionStateDataForTabWithUUIDString:(id)uuidstring;
- (id)readSavedSessionStateDataForTabWithUUIDString:(id)uuidstring;
- (void)deleteTabStateWithBrowserWindowUUID:(id)uuid andRemoveWindow:(BOOL)window;
- (void)updateTabWithTabStateData:(id)data;
- (void)removeTabWithTabData:(id)data;
- (void)deleteAllSavedStates;
- (void)checkPointWriteAheadLog;
- (void)setSecureDeleteEnabled:(BOOL)enabled;
- (void)_vacuum;
- (void)regenerateTabUUIDsForDeviceRestoration;
- (void)_regenerateTabUUIDsForDeviceRestoration;
@end

#endif /* SFBrowserStateSQLiteStore_h */
