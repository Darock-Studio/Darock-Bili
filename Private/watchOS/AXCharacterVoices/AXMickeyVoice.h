//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3093.2.4.4.10
//
#ifndef AXMickeyVoice_h
#define AXMickeyVoice_h
@import Foundation;

#include "AXCharacterVoice.h"
#include "AVAudioPlayerDelegate-Protocol.h"
#include "AXCharacterUtterance.h"
#include "AXResourcePlayInfo.h"

@class NSArray, NSDictionary, NSMutableArray, NSString, NSURL;

@interface AXMickeyVoice : AXCharacterVoice<AVAudioPlayerDelegate> {
  /* instance variables */
  NSMutableArray *_samplesToPlay;
  struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _asbd;
  struct OpaqueAudioQueue * _audioQueue;
  AXResourcePlayInfo *_currentResource;
  AXResourcePlayInfo *_onDeckResource;
  struct AudioQueueBuffer { unsigned int x0; void * x1; unsigned int x2; void * x3; unsigned int x4; struct AudioStreamPacketDescription * x5; unsigned int x6; } * _onDeckBuffer;
  struct AudioQueueBuffer { unsigned int x0; void * x1; unsigned int x2; void * x3; unsigned int x4; struct AudioStreamPacketDescription * x5; unsigned int x6; } * _buffer;
  struct AudioQueueBuffer { unsigned int x0; void * x1; unsigned int x2; void * x3; unsigned int x4; struct AudioStreamPacketDescription * x5; unsigned int x6; } * _buffer2;
  NSDictionary *_synthInfo;
  NSString *_synthLanguage;
  NSArray *_laughFiles;
  AXCharacterUtterance *_currentUtterance;
  BOOL _primingBuffers;
  NSURL *_baseAssetURL;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)supportedUtteranceClasses;

/* instance methods */
- (id)init;
- (void)_loadSynthInfoIfNeeded;
- (void)_underlyingAssetDidUpdate;
- (void)dealloc;
- (void)playHour:(long long)hour hushed:(BOOL)hushed isAMPM:(BOOL)ampm greeting:(BOOL)greeting;
- (void)playDate:(id)date language:(id)language allowFlavorText:(BOOL)text;
- (void)playRandomGuaranteedLaugh;
- (void)_enqueueNextAudioFileWithBuffer:(struct AudioQueueBuffer { unsigned int x0; void * x1; unsigned int x2; void * x3; unsigned int x4; struct AudioStreamPacketDescription * x5; unsigned int x6; } *)buffer;
- (void)startAudioQueue;
- (void)createAudioQueueIfNeeded;
- (void)outputCallback:(struct AudioQueueBuffer { unsigned int x0; void * x1; unsigned int x2; void * x3; unsigned int x4; struct AudioStreamPacketDescription * x5; unsigned int x6; } *)callback;
- (int)setupAudioStreamDescription;
- (BOOL)_parseRequirements:(id)requirements intoPlayInfo:(id)info hour:(long long)hour minute:(long long)minute isMinuteSample:(BOOL)sample;
- (BOOL)_parseOverrides:(id)overrides intoPlayInfo:(id)info hour:(long long)hour minute:(long long)minute isMinuteSample:(BOOL)sample;
- (double)_getSynthInfoValueForKey:(id)key startTime:(BOOL)time;
- (BOOL)_is24HourTime;
- (BOOL)_isReverseHourAndMinutes;
- (BOOL)_isDanish;
- (BOOL)_isDutch;
- (BOOL)_minuteIsFirstSampleForMinutes:(long long)minutes;
- (BOOL)_differentiatesBetweenNoonAndMidnight;
- (BOOL)_hourAndMinutePairingIsUsable:(id)usable hour:(long long)hour minute:(long long)minute;
- (void)_appendSampleForOClock:(long long)oclock;
- (void)_appendSampleForAMPM:(long long)ampm hushed:(BOOL)hushed isAM:(BOOL)am;
- (long long)_greetingForHour:(long long)hour minute:(long long)minute;
- (BOOL)_shouldAllowLaugh;
- (BOOL)_shouldAllowGreeting:(long long)greeting;
- (void)_appendGreeting:(long long)greeting;
- (id)hourAndMinuteFileFormatForHour:(unsigned long long)hour minute:(unsigned long long)minute;
- (id)hourFileFormatForHour:(unsigned long long)hour minute:(unsigned long long)minute;
- (id)minuteFileFormatForHour:(unsigned long long)hour minute:(unsigned long long)minute;
- (void)_appendSampleForHour:(long long)hour minute:(long long)minute;
- (void)_appendSampleForMinute:(long long)minute hour:(long long)hour;
- (void)_appendSampleForLaugh;
- (void)_appendRandomGuaranteedSampleForLaugh;
- (void)stop:(BOOL)stop;
- (void)speakUtterance:(id)utterance;
- (void)stopSpeaking;
- (void)pauseSpeaking;
- (void)_continueSpeaking;
- (id)characterName;
- (BOOL)isSpeaking;
@end

#endif /* AXMickeyVoice_h */
