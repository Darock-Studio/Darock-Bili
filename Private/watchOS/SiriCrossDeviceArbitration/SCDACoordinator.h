//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.9.1.0.0
//
#ifndef SCDACoordinator_h
#define SCDACoordinator_h
@import Foundation;

#include "SCDAAdvertisementContextManager.h"
#include "SCDAAdvertisementContextRecord.h"
#include "SCDAContext.h"
#include "SCDAEmergencyCallPunchout.h"
#include "SCDAGoodnessScoreEvaluator.h"
#include "SCDAInstrumentation.h"
#include "SCDANotifyObserver.h"
#include "SCDANotifyObserverDelegate-Protocol.h"
#include "SCDANotifyStatePublisher.h"
#include "SCDAPowerAssertionManager.h"
#include "SCDAPreferences.h"
#include "SCDARecord.h"
#include "SCDASession.h"
#include "SCDAWatchdogTimer.h"

@class NSData, NSDate, NSDateFormatter, NSMutableDictionary, NSString, NSUUID;
@protocol OS_dispatch_queue, OS_dispatch_source, {?="waitTimer"@"NSObject<OS_dispatch_source>""waitBlock"@?"isWaitTimerSuspended"B};

@interface SCDACoordinator : NSObject<SCDANotifyObserverDelegate> {
  /* instance variables */
  unsigned long long _myriadState;
  unsigned long long _nextState;
  unsigned long long _previousState;
  NSData *_previousAdvertisedData;
  NSMutableDictionary *_replies;
  NSMutableDictionary *_replyCounts;
  NSMutableDictionary *_repliesBeforeDecision;
  NSMutableDictionary *_previousTrumps;
  NSMutableDictionary *_incomingTrumps;
  NSMutableDictionary *_multipleContinuations;
  id _delegate;
  NSString *_deviceClassName;
  unsigned char _deviceClass;
  unsigned char _productType;
  NSString *_productTypeName;
  int _deviceAdjust;
  double _deviceDelay;
  double _deviceTrumpDelay;
  double _deviceVTEndtimeDistanceThreshold;
  double _deviceInEarDelay;
  double _deviceInEarInterval;
  unsigned char _deviceGroup;
  NSObject<OS_dispatch_queue> *_myriadWorkQueue;
  NSObject<OS_dispatch_queue> *_myriadAdvertisementContextQueue;
  NSString *_timerLabel;
  NSObject<OS_dispatch_source> *_timer;
  NSUUID *_eventToken;
  SCDAWatchdogTimer *_overallTimeout;
  SCDAPowerAssertionManager *_powerAssertionManager;
  struct __CFNotificationCenter * _center;
  SCDARecord *_triggerRecord;
  long long _recordType;
  unsigned long long _voiceTriggerTime;
  float _delayTarget;
  float _advertInterval;
  int _nTimesContinued;
  int _nTimesExtended;
  unsigned char _incomingAdjustment;
  SCDARecord *_overrideMyriadRecord;
  int _slowdownMsecs;
  int _testInducedSlowdownMsecs;
  SCDARecord *_maxSlowdownRecord;
  BOOL _BTLEReady;
  BOOL _inTask;
  BOOL _inSetupMode;
  BOOL _ducking;
  BOOL _stateMachineEncounteredError;
  BOOL _listenTimerIsRunning;
  BOOL _coordinationEnabled;
  BOOL _BLEActivityEnabled;
  BOOL _clientIsDirectActivating;
  BOOL _clientIsInEarActivation;
  BOOL _clientRecentlyLostElection;
  BOOL _clientLostDueToTrumping;
  BOOL _clientIsListeningAfterRecentWin;
  BOOL _clientIsWatchActivation;
  BOOL _clientIsWatchTrumpPromote;
  BOOL _clientIsRespondingToSlowdown;
  BOOL _clientDoneRespondingToSlowdown;
  BOOL _clientRespondingToCarPlay;
  BOOL _clientIsDeciding;
  int _constantGoodness;
  NSObject<OS_dispatch_source> *_timerSource;
  NSDateFormatter *_dateFormat;
  NSUUID *_designatedSelfID;
  NSDate *_triggerTime;
  int _nDeltaTs;
  SCDAEmergencyCallPunchout *_callPunchout;
  unsigned long long _lastDecisionTime;
  BOOL _lastDecision;
  unsigned short _lastPHash;
  double _lastEmergencyAttempt;
  BOOL _wasEmergency;
  BOOL _suppressLateTrigger;
  BOOL _ignoreInTaskTimer;
  struct { BOOL didRequestForBTLEScan; BOOL didRequestForBTLEAdvertisement; } _heySiriBTLEState;
  struct { NSObject<OS_dispatch_source> *waitTimer; id /* block */ waitBlock; BOOL isWaitTimerSuspended; } _wiproxReadinessTimer;
  struct { NSDate *advertTriggerAdvStartTime; NSDate *advertTriggerEndTime; } _advTiming;
  SCDAAdvertisementContextManager *_advContextManager;
  SCDAAdvertisementContextRecord *_contextRecord;
  SCDAGoodnessScoreEvaluator *_goodnessScoreEvaluator;
  SCDASession *_myriadSession;
  SCDANotifyStatePublisher *_electionBeginPublisher;
  SCDANotifyStatePublisher *_electionWinPublisher;
  SCDANotifyStatePublisher *_electionLossPublisher;
  SCDANotifyStatePublisher *_electionRepostWinDecisionPublisher;
  SCDANotifyObserver *_preferencesChangedNotification;
  SCDANotifyObserver *_myriadStateMachineForceNoActivityObserver;
  unsigned long long _electionPublisherState;
  SCDAPreferences *_preferences;
  id /* block */ _waitForWiproxReadinessToScan;
  unsigned long long _latestRecordReceivedTime;
  SCDAContext *_currentMyriadContext;
  SCDAInstrumentation *_myriadInstrumentation;
  NSUUID *_currentRequestId;
  NSDate *_lastWonBySmallAmountDate;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)initialize;
+ (id)currentCoordinator;
+ (void)didChangeDefaults;
+ (void)clearCurrentCoordinator;

/* instance methods */
- (id)initWithDelegate:(id)delegate;
- (void)dealloc;
- (void)readDefaults;
- (void)_readDefaults;
- (void)_initDeviceClassAndAdjustments;
- (void)_setMyriadContext:(id)context;
- (void)_updateVoiceTriggerTimeFromFile;
- (void)preheatWiProx;
- (void)startAdvertisingForPHSSetupAfterDelay:(float)delay maxInterval:(float)interval;
- (void)startAdvertisingFromVoiceTrigger;
- (void)startAdvertisingFromVoiceTriggerWithContext:(id)context;
- (void)_startAdvertisingFromVoiceTrigger;
- (void)resetStateMachine;
- (void)startAdvertisingFromVoiceTriggerAdjusted:(char)adjusted;
- (void)startAdvertisingFromVoiceTriggerAdjusted:(char)adjusted withContext:(id)context;
- (void)startAdvertisingFromVoiceTriggerWithGoodnessScoreContext:(id)context withContext:(id)context;
- (void)startWatchAdvertisingFromVoiceTrigger;
- (void)startWatchAdvertisingFromVoiceTriggerWithContext:(id)context;
- (void)startWatchAdvertisingFromDirectTrigger;
- (void)startWatchAdvertisingFromDirectTriggerWithContext:(id)context;
- (void)startAdvertisingFromDirectTrigger;
- (void)startAdvertisingFromDirectTriggerWithContext:(id)context;
- (void)startAdvertisingFromOutgoingTrigger;
- (void)startAdvertisingFromOutgoingTriggerWithContext:(id)context;
- (void)startAdvertisingFromInEarTrigger;
- (void)startAdvertisingFromCarPlayTrigger;
- (void)startAdvertisingEmergencyHandled;
- (void)startAdvertisingEmergency;
- (void)_startAdvertisingFromInTaskVoiceTrigger;
- (void)startAdvertisingFromInTaskTriggerWithContext:(id)context;
- (void)startAdvertisingFromInTaskVoiceTriggerWithContext:(id)context;
- (void)startAdvertisingFromInTaskVoiceTrigger;
- (void)startAdvertisingFromAlertFiringVoiceTrigger;
- (void)startAdvertisingFromAlertFiringVoiceTriggerWithContext:(id)context;
- (void)startResponseAdvertising:(unsigned short)advertising;
- (void)startAdvertisingSlowdown:(unsigned short)slowdown;
- (void)endAdvertisingAfterDelay:(float)delay;
- (void)_endAdvertising:(id /* block */)advertising;
- (void)endAdvertising:(id /* block */)advertising;
- (void)endAdvertising;
- (id)_endAdvertisingAnalyticsContext:(BOOL)context;
- (void)_endAdvertisingWithDeviceProhibitions:(id)prohibitions;
- (void)endAdvertisingWithDeviceProhibitions:(id)prohibitions;
- (void)endTask;
- (BOOL)inTask;
- (void)setInTask:(BOOL)task;
- (void)setupEnabled:(BOOL)enabled;
- (void)instrumentationUpdateBoost:(unsigned char)boost value:(unsigned int)value;
- (void)setCurrentRequestId:(id)id;
- (void)faceDetectedBoostWithContext:(id)context;
- (void)_forceLocalWinner:(id)winner;
- (BOOL)_deviceShouldContinue:(id)continue;
- (void)_winElection;
- (void)_loseElection;
- (id)_myriadSession;
- (void)_addElectionAdvertisementDataToMyriadSession:(id)session;
- (void)_createMyriadSessionIfRequired;
- (void)updateRequestId:(id)id;
- (void)_clearMyriadSession;
- (void)_initializeTimer;
- (void)_createDispatchTimerWithTime:(unsigned long long)time toExecute:(id /* block */)execute;
- (void)_createDispatchTimerFor:(double)for toExecute:(id /* block */)execute;
- (void)_createDispatchTimerForEvent:(id)event toExecute:(id /* block */)execute;
- (void)_startListenTimer;
- (void)_startTimer:(id)timer for:(float)for thenExecute:(id /* block */)execute;
- (void)_startTimer:(id)timer for:(float)for thenEnterState:(unsigned long long)state;
- (void)_cancelTimer;
- (void)_setOverallTimeout;
- (void)_cancelOverallTimeout;
- (void)_enterState:(unsigned long long)state;
- (void)enterState:(unsigned long long)state;
- (id)_stateAsString;
- (id)_stateAsString:(unsigned long long)string;
- (void)_enteringIntoState:(unsigned long long)state fromState:(unsigned long long)state;
- (void)resetReplies;
- (void)_startListening:(id /* block */)listening;
- (void)_startListeningAfterWiProxIsReady:(BOOL)ready inState:(unsigned long long)state completion:(id /* block */)completion;
- (void)startListening;
- (void)startListening:(id /* block */)listening;
- (BOOL)_shouldStopListeningBeforeAdvertising;
- (void)_stopAdvertising:(id /* block */)advertising;
- (void)_stopListening:(id /* block */)listening;
- (void)stopListening;
- (void)stopListening:(id /* block */)listening;
- (void)_stopAdvertisingAndListening;
- (void)_unduck;
- (void)_handleStateMachineErrorIfNeeded;
- (double)_contextFetchDelayForAdvertimentInterval:(double)interval advertisementDelay:(double)delay;
- (BOOL)_shouldUseContextCollector;
- (id)_testAndFilterAdvertisementsFromContextCollector:(id)collector voiceTriggerEndTime:(double)time advertisementDispatchTime:(double)time advertisement:(id)advertisement;
- (void)_suppressDeviceIfNeededWithVoiceTriggerEndTime:(double)time adverisementDispatchTime:(double)time;
- (void)_pushMyriadAdvertisementContextToContextCollectorWithAdvertisementInterval:(double)interval advertisementDelay:(double)delay;
- (void)_resetAudioData;
- (void)_setupActionWindows;
- (void)_resetActionWindows;
- (void)_adjustActionWindowsFromSlowdown:(int)slowdown;
- (void)_duringNextWindowExecute:(id /* block */)execute;
- (void)_duringNextWindowEnterState:(unsigned long long)state;
- (void)setupAdvIntervalsInDelay:(float *)delay interval:(float *)interval withSlowdown:(int)slowdown;
- (void)_resetAdvertisementTimings;
- (void)_advertiseTrigger;
- (void)_advertiseSlowdown;
- (BOOL)_okayToSuppressOnOutput;
- (void)_advertiseSuppressTriggerInOutput;
- (void)_advertise:(id)_advertise andMoveTo:(unsigned long long)to;
- (void)_advertise:(id)_advertise afterDelay:(float)delay maxInterval:(float)interval andMoveTo:(unsigned long long)to;
- (void)_advertiseIndefinite:(id)indefinite;
- (void)startAdvertising:(id)advertising afterDelay:(float)delay maxInterval:(float)interval;
- (void)_startAdvertising:(id)advertising afterDelay:(float)delay maxInterval:(float)interval;
- (void)advertiseWith:(id)with;
- (void)advertiseWith:(id)with afterDelay:(float)delay maxInterval:(float)interval;
- (void)_advertiseWith:(id)with afterDelay:(float)delay maxInterval:(float)interval thenExecute:(id /* block */)execute;
- (id)voiceTriggerRecord;
- (id)_phsSetupRecord;
- (id)directTriggerRecord;
- (id)lateSuppressionRecord;
- (id)continuationRecord;
- (id)emergencyRecord;
- (id)emergencyHandledRecord;
- (id)responseObject:(unsigned short)object;
- (id)slowdownRecord:(unsigned short)record;
- (id)emptyRecord;
- (BOOL)_shouldContinueFor:(id)for;
- (BOOL)_shouldHandleEmergency;
- (BOOL)_isAPhone:(unsigned char)aphone;
- (id)_sortedReplies;
- (id)_sortedReplies:(id)replies;
- (BOOL)_inTaskTriggerWasTooSoon;
- (void)_updateRepliesWith:(id)with id:(id)id data:(id)data;
- (void)notifyCurrentDecisionResult;
- (unsigned long long)_nextElectionPublisherState;
- (int)_myriadStateForSelf:(unsigned long long)self;
- (BOOL)_testAndUpdateWedgeFilter:(id)filter;
- (void)_ageWedgeFilter;
- (void)_initializeWiProxReadinessTimer;
- (void)_resumeWiProxReadinessTimer;
- (void)_suspendWiProxReadinessTimer;
- (void)_clearWiProxReadinessTimer;
- (void)_createWaitWiProxTimer:(long long)timer waitBlock:(id /* block */)block;
- (void)_waitWiProx:(long long)prox andExecute:(id /* block */)execute;
- (void)waitWiProx:(long long)prox andExecute:(id /* block */)execute;
- (void)_waitWiProxAndExecute:(id /* block */)execute;
- (void)_enterBLEDiagnosticMode;
- (void)_leaveBLEDiagnosticMode;
- (void)_triggerABCForType:(id)type context:(id)context;
- (void)_signalEmergencyCallHandled;
- (void)notifyObserver:(id)observer didReceiveNotificationWithToken:(int)token;
- (void)injectAdvertisementForTesting:(id)testing forDevice:(id)device;
- (void)startListeningToEmergencySignal;
- (void)startAdvertisingEmergencySignal;
- (float)deviceTrumpDelay;
- (void)setupActionWindows;
- (unsigned char)deviceClass;
- (unsigned char)deviceGroup;
- (void)updateRepliesWith:(id)with id:(id)id data:(id)data;
- (id)stateAsString:(unsigned long long)string;
- (void)myriadSession:(id /* block */)session;
- (void)resetMyriadCoordinator:(id /* block */)coordinator;
@end

#endif /* SCDACoordinator_h */
