//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1552.3.6.1.1
//
#ifndef PKPeerPaymentService_h
#define PKPeerPaymentService_h
@import Foundation;

#include "PKPeerPaymentAccount.h"
#include "PKPeerPaymentPreferences.h"
#include "PKPeerPaymentServiceExportedInterface-Protocol.h"
#include "PKPeerPaymentTargetDeviceDelegate-Protocol.h"
#include "PKPeerPaymentWebServiceContext.h"
#include "PKXPCService.h"

@class NSHashTable;
@protocol OS_dispatch_queue;

@interface PKPeerPaymentService : NSObject<PKPeerPaymentServiceExportedInterface, PKPeerPaymentTargetDeviceDelegate> {
  /* instance variables */
  PKXPCService *_remoteService;
  NSObject<OS_dispatch_queue> *_replyQueue;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _accountLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lockObservers;
  NSHashTable *_observers;
  long long _accountChangedNotificationSuspensionCount;
}

@property (retain, nonatomic) PKPeerPaymentWebServiceContext *sharedPeerPaymentWebServiceContext;
@property (readonly, nonatomic) PKPeerPaymentAccount *account;
@property (readonly, nonatomic) PKPeerPaymentPreferences *preferences;

/* class methods */
+ (id)sharedInstance;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)registerObserver:(id)observer;
- (void)unregisterObserver:(id)observer;
- (void)_accessObserversWithHandler:(id /* block */)handler;
- (void)sharedPeerPaymentWebServiceContextWithCompletion:(id /* block */)completion;
- (void)accountWithCompletion:(id /* block */)completion;
- (void)preferencesWithCompletion:(id /* block */)completion;
- (void)updateAccountWithCompletion:(id /* block */)completion;
- (void)updateAssociatedAccountsWithCompletion:(id /* block */)completion;
- (void)updateAccountAndAssociatedAccountsWithCompletion:(id /* block */)completion;
- (void)updatePreferencesWithCompletion:(id /* block */)completion;
- (void)deleteAccountWithCompletion:(id /* block */)completion;
- (void)deletePreferencesWithCompletion:(id /* block */)completion;
- (void)setPreferences:(id)preferences completion:(id /* block */)completion;
- (void)suspendAccountChangedNotifications;
- (void)resumeAccountChangedNotifications;
- (void)registrationStatusWithCompletion:(id /* block */)completion;
- (void)presentIdentityVerificationFlowWithResponse:(id)response orientation:(id)orientation completion:(id /* block */)completion;
- (void)presentRegistrationFlowWithAccount:(id)account amount:(id)amount state:(unsigned long long)state senderAddress:(id)address orientation:(id)orientation hostSceneIdentifier:(id)identifier hostSceneBundleIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)presentRegistrationFlowWithAccount:(id)account orientation:(id)orientation hostSceneIdentifier:(id)identifier hostSceneBundleIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)presentPeerPaymentTermsAndConditionsWithAccount:(id)account orientation:(id)orientation completion:(id /* block */)completion;
- (void)receivedPeerPaymentMessageData:(id)data;
- (void)updateMessageReceivedDate:(id)date forTransactionWithIdentifier:(id)identifier;
- (void)updateMockAccountBalanceByAddingAmount:(id)amount completion:(id /* block */)completion;
- (id)balanceForPass:(id)pass;
- (void)setLastUsedAlternateFundingSourcePassUniqueIdentifier:(id)identifier;
- (id)lastUsedAlternateFundingSourcePassUniqueIdentifier;
- (void)downloadPassIfNecessaryWithCompletion:(id /* block */)completion;
- (void)registerDeviceWithCompletion:(id /* block */)completion;
- (void)registerDeviceWithForceReregister:(BOOL)reregister completion:(id /* block */)completion;
- (void)registerDeviceWithRegistrationURL:(id)url pushToken:(id)token forceReregister:(BOOL)reregister completion:(id /* block */)completion;
- (void)unregisterDeviceWithCompletion:(id /* block */)completion;
- (void)initalizeCloudStoreIfNecessaryWithHandler:(id /* block */)handler;
- (void)cloudStoreStatusWithCompletion:(id /* block */)completion;
- (void)checkTLKsMissingWithCompletion:(id /* block */)completion;
- (void)resetApplePayManateeViewWithCompletion:(id /* block */)completion;
- (void)remoteRegistrationRequest:(id)request forHandle:(id)handle completion:(id /* block */)completion;
- (void)_accountChanged:(id)changed;
- (void)_preferencesChanged:(id)changed;
- (void)_postAccountChangeNotificationIfNecessaryForAccount:(id)account previousAccount:(id)account;
- (id)_remoteObjectProxyWithFailureHandler:(id /* block */)handler;
- (id)_synchronousRemoteObjectProxyForSelector:(SEL)selector;
- (void)peerPaymentPendingRequestsForRequestTokens:(id)tokens completion:(id /* block */)completion;
- (void)peerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:(id /* block */)completion;
- (void)insertOrUpdatePeerPaymentPendingRequests:(id)requests shouldScheduleNotifications:(BOOL)notifications;
- (void)deletePeerPaymentPendingRequestsForRequestTokens:(id)tokens;
- (void)deletePeerPaymentPendingRequestsForPeerPaymentAccount;
- (void)pendingRequestsChanged;
- (void)recurringPaymentsWithCompletion:(id /* block */)completion;
- (void)updateAutoReloadAmount:(id)amount threshold:(id)threshold identifier:(id)identifier completion:(id /* block */)completion;
- (void)updateRecurringPaymentsWithCompletion:(id /* block */)completion;
- (void)insertOrUpdateRecurringPayments:(id)payments completion:(id /* block */)completion;
- (void)deleteRecurringPaymentsForIdentifiers:(id)identifiers completion:(id /* block */)completion;
- (void)deleteAllRecurringPaymentsWithCompletion:(id /* block */)completion;
- (void)performRecurringPaymentAction:(unsigned long long)action identifier:(id)identifier completion:(id /* block */)completion;
- (void)updateRecurringPaymentMemo:(id)memo identifier:(id)identifier completion:(id /* block */)completion;
- (void)updateRecurringPaymentStatus:(unsigned long long)status identifier:(id)identifier completion:(id /* block */)completion;
- (void)recurringPaymentsChanged;
- (BOOL)hasRecurringPayments;
@end

#endif /* PKPeerPaymentService_h */
