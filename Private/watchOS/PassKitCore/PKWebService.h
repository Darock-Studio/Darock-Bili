//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1552.3.6.1.1
//
#ifndef PKWebService_h
#define PKWebService_h
@import Foundation;

#include "NSURLSessionDataDelegate-Protocol.h"
#include "NSURLSessionTaskDelegate-Protocol.h"
#include "PKTapToRadarDelegate-Protocol.h"

@class ACAccountStore, NSMutableArray, NSMutableDictionary, NSOperationQueue, NSSet, NSString, NSURLSession, NSURLSessionConfiguration;
@protocol OS_dispatch_queue;

@interface PKWebService : NSObject<NSURLSessionTaskDelegate, NSURLSessionDataDelegate> {
  /* instance variables */
  ACAccountStore *_accountStore;
  unsigned long long _taskIDCounter;
  NSOperationQueue *_delegateOperationQueue;
  NSMutableDictionary *_webServiceTasks;
  NSMutableDictionary *_diagnosticReasonsByTaskID;
  NSMutableDictionary *_tasksMetadata;
  NSMutableArray *_diagnosticReasons;
  NSURLSession *_urlSession;
  NSObject<OS_dispatch_queue> *_diagnosticReasonsQueue;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _stateLock;
  NSObject<OS_dispatch_queue> *_sessionQueue;
  NSSet *_sensitiveKeys;
}

@property (readonly) NSURLSessionConfiguration *sessionConfiguration;
@property (readonly, nonatomic) NSString *webServiceSessionMarker;
@property (weak, nonatomic) NSObject<PKTapToRadarDelegate> *tapToRadarDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)_sharedCookieStorage;

/* instance methods */
- (id)initWithTapToRadarDelegate:(id)delegate;
- (void)handleResponse:(id)response withError:(id)error data:(id)data task:(id)task completionHandler:(id /* block */)handler;
- (void)processRetryRequest:(id)request responseData:(id)data orginalRequest:(id)request completion:(id /* block */)completion;
- (BOOL)canBypassTrustValidation;
- (void)handleWillPerformHTTPRedirectionWithResponse:(id)response originalRequest:(id)request redirectHandler:(id /* block */)handler;
- (void)handleAuthenticationFailureWithCompletionHandler:(id /* block */)handler;
- (void)invalidate;
- (void)refreshSessionWithConfiguration:(id)configuration;
- (unsigned long long)nextTaskID;
- (void)performRequest:(id)request taskIdentifier:(unsigned long long)identifier completionHandler:(id /* block */)handler;
- (void)performRequest:(id)request taskIdentifier:(unsigned long long)identifier cacheResponse:(BOOL)response completionHandler:(id /* block */)handler;
- (void)performRequest:(id)request taskIdentifier:(unsigned long long)identifier retries:(unsigned long long)retries authHandling:(BOOL)handling completionHandler:(id /* block */)handler;
- (void)performRequest:(id)request taskIdentifier:(unsigned long long)identifier retries:(unsigned long long)retries authHandling:(BOOL)handling cacheResponse:(BOOL)response completionHandler:(id /* block */)handler;
- (unsigned long long)webServiceTaskIdentifierForTaskIdentifier:(long long)identifier;
- (id)dataTaskWithRequest:(id)request completionHandler:(id /* block */)handler;
- (id)urlSession;
- (void)setUrlSession:(id)session;
- (id)_accountStore;
- (id)forbiddenErrorWithResponse:(id)response;
- (BOOL)_evaluateTrust:(struct __SecTrust *)trust;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveData:(id)data;
- (void)URLSession:(id)urlsession task:(id)task didCompleteWithError:(id)error;
- (void)URLSession:(id)urlsession dataTask:(id)task willCacheResponse:(id)response completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession task:(id)task willPerformHTTPRedirection:(id)httpredirection newRequest:(id)request completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession taskIsWaitingForConnectivity:(id)connectivity;
- (void)URLSession:(id)urlsession didBecomeInvalidWithError:(id)error;
- (void)URLSession:(id)urlsession didReceiveChallenge:(id)challenge completionHandler:(id /* block */)handler;
- (void)resetWebServiceSessionMarker;
- (id)_urlRequestTaggedWithWebServiceSessionMarkerHeader:(id)header;
- (id)urlRequestTaggedWithUniqueRequestIdentifier:(id)identifier;
- (id)_urlRequestWithCustomHeaders:(id)headers;
- (void)diagnosticSessionWithReason:(id)reason sessionHandler:(id /* block */)handler;
- (void)addDiagnosticReason:(id)reason;
- (void)removeDiagnosticReason:(id)reason;
- (void)_associateDiagnosticReasonsWithTaskID:(unsigned long long)id;
- (void)_cleanUpDiagnosticReasonsForTaskID:(unsigned long long)id;
- (id)_urlRequestTaggedWithDiagnosticReasonHeader:(id)header forTaskID:(unsigned long long)id;
- (long long)logFacilityType;
- (void)logRequest:(id)request;
- (void)logResponse:(id)response withData:(id)data;
@end

#endif /* PKWebService_h */
