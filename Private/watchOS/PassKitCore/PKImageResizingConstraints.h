//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1552.3.6.1.1
//
#ifndef PKImageResizingConstraints_h
#define PKImageResizingConstraints_h
@import Foundation;

@interface PKImageResizingConstraints : NSObject {
  /* instance variables */
  int _constraintType;
  double _fixedDimension;
  struct CGSize { double width; double height; } _size;
  double _minAspectRatio;
  double _maxAspectRatio;
  BOOL _respectAspectRatioRange;
}

@property (nonatomic) double outputScale;
@property (nonatomic) double outputBorderTrim;
@property (nonatomic) double outputCornerRadius;
@property (nonatomic) BOOL outputMirrored;

/* class methods */
+ (id)constraintsWithFixedWidth:(double)width minAspectRatio:(double)ratio maxAspectRatio:(double)ratio;
+ (id)constraintsWithFixedHeight:(double)height minAspectRatio:(double)ratio maxAspectRatio:(double)ratio;
+ (id)constraintsWithFixedLargeDimenstion:(double)dimenstion minAspectRatio:(double)ratio maxAspectRatio:(double)ratio;
+ (id)constraintsWithFixedSmallDimenstion:(double)dimenstion minAspectRatio:(double)ratio maxAspectRatio:(double)ratio;
+ (id)constraintsWithMaxSize:(struct CGSize { double x0; double x1; })size minAspectRatio:(double)ratio maxAspectRatio:(double)ratio;
+ (id)constraintsWithMinSize:(struct CGSize { double x0; double x1; })size minAspectRatio:(double)ratio maxAspectRatio:(double)ratio;
+ (id)constraintsWithMaxSize:(struct CGSize { double x0; double x1; })size;
+ (id)constraintsWithMinSize:(struct CGSize { double x0; double x1; })size;
+ (id)constraintsWithFixedSize:(struct CGSize { double x0; double x1; })size;
+ (id)constraintsWithAspectFillToSize:(struct CGSize { double x0; double x1; })size;
+ (id)constraintsWithAspectFitToSize:(struct CGSize { double x0; double x1; })size;

/* instance methods */
- (id)init;
- (id)resizedImage:(id)image;
- (BOOL)getPixelCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect pixelOutputSize:(struct CGSize { double x0; double x1; } *)size forImage:(id)image;
- (BOOL)_getPixelCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect pixelOutputSize:(struct CGSize { double x0; double x1; } *)size forImageSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_getDrawRectForImage:(struct CGImage *)image withOutputSize:(struct CGSize { double x0; double x1; })size;
- (BOOL)_reasonable;
- (id)_flippedConstraints;
@end

#endif /* PKImageResizingConstraints_h */
