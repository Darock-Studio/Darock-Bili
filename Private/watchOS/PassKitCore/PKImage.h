//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1552.3.6.1.1
//
#ifndef PKImage_h
#define PKImage_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"

@class NSData;

@interface PKImage : NSObject<NSSecureCoding> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  BOOL _shouldTile;
  BOOL _shouldStretch;
}

@property (readonly, nonatomic) NSData *imageData;
@property (readonly, nonatomic) struct CGImage * imageRef;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } size;
@property (readonly, nonatomic) long long orientation;
@property (readonly, nonatomic) double scale;
@property (readonly, nonatomic) BOOL tiles;
@property (readonly, nonatomic) BOOL stretches;
@property (readonly, nonatomic) struct PKEdgeInsets { double x0; double x1; double x2; double x3; } capInsets;

/* class methods */
+ (id)URLForImageNamed:(id)named inBundle:(id)bundle scale:(double *)scale;
+ (id)URLForImageNamed:(id)named inBundle:(id)bundle scale:(double *)scale preferredScreenScale:(double)scale suffix:(id)suffix;
+ (id)imageNamed:(id)named inBundle:(id)bundle;
+ (id)newImageNamed:(id)named inBundle:(id)bundle;
+ (id)imageNamed:(id)named inBundle:(id)bundle screenScale:(double)scale suffix:(id)suffix;
+ (id)newImageNamed:(id)named inBundle:(id)bundle screenScale:(double)scale suffix:(id)suffix;
+ (id)hashOfImageNamed:(id)named inBundle:(id)bundle;
+ (id)passesImageNamed:(id)named;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)imageHash;
- (BOOL)isEqual:(id)equal;
- (BOOL)isEqualToImage:(id)image;
- (id)init;
- (id)initWithData:(id)data scale:(double)scale;
- (id)initWithCGImage:(struct CGImage *)cgimage scale:(double)scale orientation:(long long)orientation;
- (void)dealloc;
- (struct CGSize { double x0; double x1; })downscaleSizeMatchingScale:(double)scale;
- (void)preheatBitmapData;
- (id)blurredImageWithRadius:(unsigned long long)radius constraints:(id)constraints;
- (id)croppedImageWithInsets:(struct PKEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)imageWithoutCapInsets;
- (id)resizedImageWithConstraints:(id)constraints;
- (id)resizableImageByTilingWithCapInsets:(struct PKEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)resizableImageByStretchingWithCapInsets:(struct PKEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)resizableImageByTilingCenterPixel;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inContext:(struct CGContext *)context;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inContext:(struct CGContext *)context withBlendMode:(int)mode alpha:(double)alpha;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (void)_queue_createImageRefIfNecessary;
- (BOOL)_isTiledWhenStretchedToSize:(struct CGSize { double x0; double x1; })size;
@end

#endif /* PKImage_h */
