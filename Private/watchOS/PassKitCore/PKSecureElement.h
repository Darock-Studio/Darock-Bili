//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1552.3.6.1.1
//
#ifndef PKSecureElement_h
#define PKSecureElement_h
@import Foundation;

#include "OS_dispatch_source-Protocol.h"

@class BOOL *, NSArray, NSHashTable, NSNumber, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface PKSecureElement : NSObject {
  /* instance variables */
  BOOL _deletingAllApplets;
  NSObject<OS_dispatch_source> *_deletingAllAppletsTimer;
  NSObject<OS_dispatch_queue> *_deletingAllAppletsTimerQueue;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _deletingAllAppletsPropertyLock;
  NSObject<OS_dispatch_queue> *_replyQueue;
  NSObject<OS_dispatch_queue> *_sessionQueue;
  NSHashTable *_observers;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _observersLock;
  BOOL _registeredForHardwareUpdates;
}

@property (copy, nonatomic) id /* block */ secureElementSessionPrelude;
@property (copy, nonatomic) id /* block */ secureElementSessionPostlude;
@property (readonly, nonatomic) BOOL isOwnable;
@property (readonly, nonatomic) BOOL isProductionSigned;
@property (readonly, nonatomic) BOOL isInRestrictedMode;
@property (readonly, nonatomic) BOOL isDeletingAllApplets;
@property (readonly, nonatomic) unsigned long long supportedTechnologies;
@property (readonly, nonatomic) NSString *primaryRegionTopic;
@property (readonly, nonatomic) NSNumber *primaryJSBLSequenceCounter;
@property (readonly, nonatomic) NSString *primarySecureElementIdentifier;
@property (readonly, nonatomic) NSArray *secureElementIdentifiers;
@property (readonly, nonatomic) NSUUID *ownerUserUUID;

/* class methods */
+ (id)sharedSecureElement;
+ (BOOL)supportsExpressForAutomaticSelectionTechnologyType:(long long)type byHardware:(BOOL *)hardware;
+ (BOOL)supportsExpressForAutomaticSelectionTechnologyType:(long long)type byHardware:(BOOL *)hardware outError:(id *)error;
+ (BOOL)supportsExpressForAutomaticSelectionTechnologyType:(long long)type;
+ (BOOL)hardwareSupportsExpressForAutomaticSelectionTechnologyType:(long long)type;
+ (BOOL)hardwareSupportsExpressForAutomaticSelectionTechnologyType:(long long)type outError:(id *)error;
+ (BOOL)supportsExpressMode:(id)mode;
+ (BOOL)supportsExpressMode:(id)mode byHardware:(BOOL *)hardware;
+ (BOOL)hardwareSupportsExpressMode:(id)mode;
+ (BOOL)isInFailForward;
+ (id)primarySecureElementIdentifier;
+ (id)secureElementIdentifiers;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)contactlessPaymentPassesAvailableDidChange;
- (void)_updateHardwareManagerListener;
- (void)initializeSecureElementQueuingServerConnection:(BOOL)connection withCompletion:(id /* block */)completion;
- (void)initializeSecureElementIfNecessaryWithHandler:(id /* block */)handler;
- (void)SEPPairingInfoWithCompletion:(id /* block */)completion;
- (void)pairingStateWithCompletion:(id /* block */)completion;
- (BOOL)hasRegistrationInformation;
- (BOOL)setRegistrationInformation:(id)information primaryRegionTopic:(id)topic;
- (void)allAppletsWithCompletion:(id /* block */)completion;
- (void)allAppletsAndCredentialsWithCompletion:(id /* block */)completion;
- (void)appletCredentialsForAIDs:(id)aids completion:(id /* block */)completion;
- (void)consistencyCheckDeviceCredentialsWithCompletion:(id /* block */)completion;
- (void)appletWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)areAnyAppletsSuspendedWithCompletionHandler:(id /* block */)handler;
- (void)markAllAppletsForDeletionWithExternalAuthorization:(id)authorization completion:(id /* block */)completion;
- (void)markAppletWithIdentifierForDeletion:(id)deletion completion:(id /* block */)completion;
- (void)markAppletsWithIdentifiersForDeletion:(id)deletion completion:(id /* block */)completion;
- (void)signChallenge:(id)challenge forPaymentApplication:(id)application withCompletion:(id /* block */)completion;
- (void)signChallenge:(id)challenge signatureEntanglementMode:(unsigned long long)mode completion:(id /* block */)completion;
- (void)signatureForAuthToken:(id)token completion:(id /* block */)completion;
- (void)stateInformationWithCompletion:(id /* block */)completion;
- (void)signedPlatformDataWithCompletion:(id /* block */)completion;
- (void)generateTransactionKeyWithReaderIdentifier:(id)identifier readerPublicKey:(id)key withCompletion:(id /* block */)completion;
- (void)generateTransactionKeyWithParameters:(id)parameters withCompletion:(id /* block */)completion;
- (BOOL)queueConnectionToServerWithPushTopic:(id)topic;
- (BOOL)queueConnectionToServerForAppletIdentifiers:(id)identifiers;
- (void)connectToServerWithPushTopic:(id)topic completion:(id /* block */)completion;
- (void)connectToServerWithPushTopic:(id)topic performSECleanup:(BOOL)secleanup completion:(id /* block */)completion;
- (void)peerPaymentEnrollmentDataWithAlternateDSID:(id)dsid completion:(id /* block */)completion;
- (void)registerObserver:(id)observer;
- (void)unregisterObserver:(id)observer;
- (BOOL)supportsExpressModeForExpressPassType:(long long)type;
- (unsigned long long)ownershipStateForUserUUID:(id)uuid;
- (BOOL)setOwnerUserUUID:(id)uuid keybagUUID:(id)uuid;
- (void)createFidoKeyForRelyingParty:(id)party relyingPartyAccountHash:(id)hash challenge:(id)challenge externalizedAuth:(id)auth completion:(id /* block */)completion;
- (void)checkFidoKeyPresenceForRelyingParty:(id)party relyingPartyAccountHash:(id)hash fidoKeyHash:(id)hash completion:(id /* block */)completion;
- (void)checkMultipleFidoKeyPresenceForFIDOProfiles:(id)fidoprofiles completion:(id /* block */)completion;
- (void)signWithFidoKeyForRelyingParty:(id)party relyingPartyAccountHash:(id)hash fidoKeyHash:(id)hash challenge:(id)challenge publicKeyIdentifier:(id)identifier externalizedAuth:(id)auth completion:(id /* block */)completion;
- (void)verifySignedChallenge:(id)challenge forRelyingParty:(id)party relyingPartyAccountHash:(id)hash fidoKeyHash:(id)hash completion:(id /* block */)completion;
- (void)generateSEEncryptionCertificateForSubCredentialId:(id)id completion:(id /* block */)completion;
- (void)longTermPrivacyKeyForCredentialGroupIdentifier:(id)identifier reuseExisting:(BOOL)existing completion:(id /* block */)completion;
- (void)longTermPrivacyKeysForCredentialGroupIdentifier:(id)identifier privacyKeyIdentifier:(id)identifier completion:(id /* block */)completion;
@end

#endif /* PKSecureElement_h */
