//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 101.0.0.0.0
//
#ifndef StocksLayout_h
#define StocksLayout_h
@import Foundation;

#include "StockChartDisplayMode.h"

@interface StocksLayout : NSObject

@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } listViewFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } infoViewFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } chartViewFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } newsViewFrame;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } listViewContentInsets;
@property (nonatomic) BOOL infoViewHasBottomLine;
@property (nonatomic) BOOL newsViewHasBottomLine;
@property (nonatomic) BOOL chartViewHasBottomLine;
@property (nonatomic) BOOL newsViewShouldUseLargerFonts;
@property (nonatomic) BOOL chartViewHasTapGesture;
@property (nonatomic) BOOL hasScrollView;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } scrollViewFrame;
@property (nonatomic) struct CGSize { double x0; double x1; } scrollViewContentSize;
@property (nonatomic) BOOL infoViewInScrollView;
@property (nonatomic) BOOL chartViewInScrollView;
@property (nonatomic) BOOL newsViewInScrollView;
@property (nonatomic) BOOL hasBlurView;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } blurViewFrame;
@property (nonatomic) BOOL hasGrayView;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } grayViewFrame;
@property (nonatomic) BOOL hasSecondaryGrayView;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } secondaryGrayViewFrame;
@property (nonatomic) BOOL hasStatusView;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } statusViewFrame;
@property (nonatomic) BOOL hasStatusViewDivider;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } statusViewDividerFrame;
@property (nonatomic) BOOL hasPrimaryHorizontalDivider;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } primaryHorizontalDividerFrame;
@property (nonatomic) BOOL hasSecondaryHorizontalDivider;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } secondaryHorizontalDividerFrame;
@property (nonatomic) BOOL hasPrimaryVerticalDivider;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } primaryVerticalDividerFrame;
@property (nonatomic) BOOL hasSecondaryVerticalDivider;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } secondaryVerticalDividerFrame;
@property (nonatomic) unsigned long long listViewRowCount;
@property (nonatomic) double statusViewCenteringRatio;
@property (retain, nonatomic) StockChartDisplayMode *chartDisplayMode;
@property (nonatomic) BOOL hasBlackView;
@property (nonatomic) BOOL isFullScreenChart;

/* class methods */
+ (id)layoutForSize:(struct CGSize { double x0; double x1; })size;
+ (id)singleColumnPortraitLayoutForSize:(struct CGSize { double x0; double x1; })size;
+ (id)twoColumnsPortraitLayoutForSize:(struct CGSize { double x0; double x1; })size;
+ (id)fullScreenChartLayoutForSize:(struct CGSize { double x0; double x1; })size;
+ (id)twoColumnsLandscapeLayoutForSize:(struct CGSize { double x0; double x1; })size;
+ (id)threeColumnsLandscapeLayoutForSize:(struct CGSize { double x0; double x1; })size;
+ (unsigned long long)numberOfRowsForSize:(struct CGSize { double x0; double x1; })size;

/* instance methods */
- (id)description;
@end

#endif /* StocksLayout_h */
