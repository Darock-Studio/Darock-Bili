//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef EMCollection_h
#define EMCollection_h
@import Foundation;

#include "EMRepositoryObject.h"
#include "EFCancelable-Protocol.h"
#include "EFLoggable-Protocol.h"
#include "EFSignpostable-Protocol.h"
#include "EMQuery.h"

@class EFFuture, EFPromise, NSHashTable, NSMutableOrderedSet, NSMutableSet, NSOrderedSet, NSString;
@protocol EFScheduler;

@interface EMCollection : EMRepositoryObject<EFLoggable, EFSignpostable> {
  /* instance variables */
  NSMutableOrderedSet *_itemIDs;
  NSMutableSet *_itemIDsAnticipatingDelete;
  NSOrderedSet *_recoveringItemIDs;
  EFPromise *_allItemIDsPromise;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _itemIDsLock;
  BOOL _foundAllItemIDs;
  BOOL _foundFirstBatch;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _changeObserversLock;
}

@property (retain, nonatomic) NSObject<EFCancelable> *cancelationToken;
@property (retain, nonatomic) NSHashTable *changeObservers;
@property (readonly, nonatomic) NSObject<EFScheduler> *queryScheduler;
@property (readonly, nonatomic) NSObject<EFScheduler> *observerScheduler;
@property (readonly, nonatomic) EMQuery *query;
@property (readonly, nonatomic) EFFuture *allItemIDs;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long signpostID;

/* class methods */
+ (id)log;
+ (id)signpostLog;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)initWithQuery:(id)query repository:(id)repository;
- (id)initWithObjectID:(id)id query:(id)query;
- (void)_commonInitWithQuery:(id)query;
- (void)dealloc;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)objectIDForItemID:(id)id;
- (id)itemIDForObjectID:(id)id;
- (BOOL)objectIDBelongsToCollection:(id)collection;
- (void)insertItemIDs:(id)ids before:(id)before;
- (void)insertItemIDs:(id)ids after:(id)after;
- (id)removeItemIDs:(id)ids;
- (BOOL)containsItemID:(id)id includeRecovery:(BOOL)recovery;
- (id)firstExistingItemIDAfterItemID:(id)id;
- (id)firstExistingItemIDBeforeItemID:(id)id;
- (id)_firstExistingItemIDForItemID:(id)id inReverse:(BOOL)reverse;
- (id)iterateItemIDsStartingAtItemID:(id)id inReverse:(BOOL)reverse withBlock:(id /* block */)block;
- (id)_iterateItemIDsStartingAtItemID:(id)id inReverse:(BOOL)reverse includeStartingItem:(BOOL)item withBlock:(id /* block */)block;
- (void)notifyChangeObserversAboutAddedItemIDs:(id)ids before:(id)before extraInfo:(id)info;
- (void)notifyChangeObserversAboutAddedItemIDs:(id)ids after:(id)after extraInfo:(id)info;
- (void)notifyChangeObserversAboutChangesByItemIDs:(id)ids;
- (void)notifyChangeObserver:(id)observer stockedItemIDs:(id)ids;
- (void)beginObserving:(id)observing;
- (void)stopObserving:(id)observing;
- (void)refresh;
- (void)_performQuery;
- (void)_cancelQuery;
- (void)_performQueryIfNeeded;
- (void)_cancelQueryIfNeeded;
- (BOOL)isRecovering;
- (void)finishRecovery;
- (void)enumerateObserversWithBlock:(id /* block */)block;
- (void)queryDidStartRecovery;
- (void)queryMatchedAddedObjectIDs:(id)ids before:(id)before extraInfo:(id)info;
- (void)queryMatchedAddedObjectIDs:(id)ids after:(id)after extraInfo:(id)info;
- (void)queryMatchedMovedObjectIDs:(id)ids before:(id)before;
- (void)queryMatchedMovedObjectIDs:(id)ids after:(id)after;
- (void)queryMatchedChangesByObjectIDs:(id)ids;
- (void)queryAnticipatesDeletedObjectIDs:(id)ids;
- (void)queryMatchedDeletedObjectIDs:(id)ids;
- (void)queryDidFinishInitialLoad;
- (void)queryDidFinishRemoteSearch;
- (id)_itemIDsForObjectIDs:(id)ids;
- (void)_filterAndTransformObjectIDs:(id)ids before:(BOOL)before existingObjectID:(id)id batchBlock:(id /* block */)block;
- (BOOL)observerContainsObjectID:(id)id;
- (void)queryReplacedObjectID:(id)id withNewObjectID:(id)id;
- (void)notifyChangeObserverAboutStockedItemIDs:(id)ids;
@end

#endif /* EMCollection_h */
