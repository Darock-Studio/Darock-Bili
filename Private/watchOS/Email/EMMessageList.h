//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef EMMessageList_h
#define EMMessageList_h
@import Foundation;

#include "EMCollection.h"
#include "EFContentProtectionObserver-Protocol.h"
#include "EFLoggable-Protocol.h"
#include "EMCollectionChangeObserver-Protocol.h"
#include "EMCollectionItemIDStateCapturer.h"
#include "EMCollectionItemIDStateCapturerDelegate-Protocol.h"
#include "EMMailboxScope.h"
#include "EMMessageList.h"
#include "EMMessageListQueryResultsObserver-Protocol.h"
#include "EMMessageRepository.h"
#include "EMObjectID.h"
#include "EMThreadScope.h"

@class EFLazyCache, NSMapTable, NSMutableDictionary, NSSet, NSString;
@protocol EFScheduler, OS_dispatch_queue;

@interface EMMessageList : EMCollection<EFContentProtectionObserver, EFLoggable, EMCollectionChangeObserver, EMCollectionItemIDStateCapturerDelegate, EMMessageListQueryResultsObserver> {
  /* instance variables */
  NSMutableDictionary *_expandedThreads;
  NSMapTable *_messageListItemsForRetry;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _expandedThreadsLock;
}

@property (readonly, nonatomic) EMMessageRepository *repository;
@property (readonly, nonatomic) EMMailboxScope *mailboxScope;
@property (readonly, nonatomic) EMThreadScope *threadScope;
@property (readonly, nonatomic) EFLazyCache *cache;
@property (readonly, nonatomic) NSObject<EFScheduler> *observerScheduler;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *contentProtectionQueue;
@property (retain, nonatomic) EMMessageList *unfilteredMessageList;
@property (retain, nonatomic) NSSet *recentlyCollapsedItemIDs;
@property (readonly, nonatomic) EMCollectionItemIDStateCapturer *stateCapturer;
@property (readonly, nonatomic) BOOL isThreaded;
@property (readonly, copy) NSSet *expandedThreadItemIDs;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) EMObjectID *objectID;

/* class methods */
+ (id)log;
+ (id)threadedMessageListForMailboxes:(id)mailboxes withRepository:(id)repository additionalQueryOptions:(unsigned long long)options shouldUpdateDisplayDate:(BOOL)date;
+ (id)threadedMessageListForMailboxes:(id)mailboxes withRepository:(id)repository additionalQueryOptions:(unsigned long long)options shouldUpdateDisplayDate:(BOOL)date sortDescriptor:(id)descriptor transformPredicate:(id /* block */)predicate ignoreMessageAdditionsPredicate:(id)predicate;
+ (id)simpleMessageListForMailboxes:(id)mailboxes withRepository:(id)repository additionalQueryOptions:(unsigned long long)options shouldUpdateDisplayDate:(BOOL)date;
+ (id)simpleMessageListForMailboxes:(id)mailboxes withRepository:(id)repository additionalQueryOptions:(unsigned long long)options shouldUpdateDisplayDate:(BOOL)date sortDescriptor:(id)descriptor transformPredicate:(id /* block */)predicate ignoreMessageAdditionsPredicate:(id)predicate;

/* instance methods */
- (id)initWithMailboxes:(id)mailboxes repository:(id)repository sortDescriptor:(id)descriptor transformPredicate:(id /* block */)predicate ignoreMessageAdditionsPredicate:(id)predicate targetClass:(Class)class additionalQueryOptions:(unsigned long long)options shouldUpdateDisplayDate:(BOOL)date labelPrefix:(id)prefix;
- (id)initWithObjectID:(id)id query:(id)query repository:(id)repository;
- (id)initWithQuery:(id)query repository:(id)repository;
- (void)_commonInitWithRepository:(id)repository;
- (void)dealloc;
- (id)ef_publicDescription;
- (void)stopObserving:(id)observing;
- (id)objectIDForItemID:(id)id;
- (id)itemIDForObjectID:(id)id;
- (BOOL)objectIDBelongsToCollection:(id)collection;
- (id)removeItemIDs:(id)ids;
- (id)_unreadItemIDsFromExtraInfo:(id)info;
- (id)_hintsByObjectIDFromExtraInfo:(id)info;
- (void)notifyChangeObserversAboutAddedItemIDs:(id)ids before:(id)before extraInfo:(id)info;
- (void)notifyChangeObserversAboutAddedItemIDs:(id)ids after:(id)after extraInfo:(id)info;
- (void)notifyChangeObserversAboutChangesByItemIDs:(id)ids;
- (void)notifyChangeObserver:(id)observer stockedItemIDs:(id)ids;
- (id)filteredMessageListWithPredicate:(id)predicate ignoredMessagesPredicate:(id)predicate;
- (void)expandThreadsFromThreadItemIDs:(id)ids;
- (void)expandThread:(id)thread;
- (void)collapseThread:(id)thread;
- (BOOL)anyExpandedThreadContainsItemID:(id)id;
- (BOOL)recentlyCollapsedThreadContainsItemID:(id)id;
- (void)clearRecentlyCollapsedThread;
- (id)messageListItemForItemID:(id)id;
- (id)messageListItemForItemID:(id)id ifAvailable:(BOOL)available;
- (id)messageListItemsForItemIDs:(id)ids;
- (id)messageListItemsForItemIDs:(id)ids ifAvailable:(BOOL)available;
- (id)_availableMessageListItemsForItemIDs:(id)ids;
- (void)_attemptToFinishRetryingPromisesByItemID:(id)id;
- (void)invalidateCacheForItemIDs:(id)ids;
- (id)itemIDOfMessageListItemWithDisplayMessage:(id)message;
- (void)finishRecovery;
- (void)contentProtectionStateChanged:(long long)changed previousState:(long long)state;
- (void)collection:(id)collection addedItemIDs:(id)ids before:(id)before;
- (void)collection:(id)collection addedItemIDs:(id)ids after:(id)after;
- (void)collection:(id)collection movedItemIDs:(id)ids before:(id)before;
- (void)collection:(id)collection movedItemIDs:(id)ids after:(id)after;
- (void)collection:(id)collection changedItemIDs:(id)ids;
- (void)collection:(id)collection changedItemIDs:(id)ids itemIDsWithCountChanges:(id)changes;
- (void)collection:(id)collection deletedItemIDs:(id)ids;
- (void)collectionDidFinishInitialLoad:(id)load;
- (void)collection:(id)collection replacedExistingItemID:(id)id withNewItemID:(id)id;
- (void)queryMatchedMovedObjectIDs:(id)ids before:(id)before;
- (void)queryMatchedMovedObjectIDs:(id)ids after:(id)after;
- (void)queryMatchedChangesByObjectIDs:(id)ids;
- (id)_expandedObjectIDsForObjectIDs:(id)ids;
- (void)queryMatchedOldestItemsUpdatedForMailboxesObjectIDs:(id)ids;
- (BOOL)_threadIsExpanded:(id)expanded;
- (BOOL)_threadIsExpandedForItemID:(id)id;
- (id)_nextThreadItemIDAfterThreadItemID:(id)id;
- (id)itemIDOfFirstMessageListItemMatchingPredicate:(id)predicate;
- (id)labelForStateCapture;
- (id)itemIDsForStateCaptureWithErrorString:(id *)string;
@end

#endif /* EMMessageList_h */
