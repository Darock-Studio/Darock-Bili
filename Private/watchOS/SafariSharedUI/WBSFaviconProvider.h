//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WBSFaviconProvider_h
#define WBSFaviconProvider_h
@import Foundation;

#include "WBSFaviconProviderPersistenceController.h"
#include "WBSSiteMetadataProvider-Protocol.h"
#include "WBSSiteMetadataProviderDelegate-Protocol.h"
#include "WBSWebViewMetadataFetchOperationDelegate-Protocol.h"

@class NSArray, NSCache, NSCalendar, NSMutableDictionary, NSString, NSURL;
@protocol OS_dispatch_queue;

@interface WBSFaviconProvider : NSObject<WBSWebViewMetadataFetchOperationDelegate, WBSSiteMetadataProvider> {
  /* instance variables */
  NSMutableDictionary *_hostsToRequestsMap;
  NSCache *_responseCache;
  NSObject<OS_dispatch_queue> *_internalQueue;
  NSObject<OS_dispatch_queue> *_internalSavingQueue;
  NSMutableDictionary *_urlsToFaviconRecordsSavedDuringMigration;
  WBSFaviconProviderPersistenceController *_persistenceController;
  NSCalendar *_calendar;
  double _expirationInterval;
  long long _providerState;
  unsigned long long _privateDataRetentionCount;
  struct CGSize { double width; double height; } _scaledPreferredIconSize;
  id /* block */ _shouldCheckIntegrityWhenOpeningDatabaseBlock;
}

@property (readonly, nonatomic) NSURL *baseURL;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } preferredIconSize;
@property (readonly, nonatomic) double preferredIconScale;
@property (readonly, copy, nonatomic) NSArray *allIconScales;
@property (readonly, nonatomic) BOOL isReadOnly;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak) NSObject<WBSSiteMetadataProviderDelegate> *providerDelegate;
@property (readonly, nonatomic) BOOL providesFavicons;

/* class methods */
+ (struct CGSize { double x0; double x1; })defaultFaviconSize;

/* instance methods */
- (id)init;
- (id)initWithPersistenceBaseURL:(id)url persistenceName:(id)name preferredIconSize:(struct CGSize { double x0; double x1; })size atScale:(double)scale allScales:(id)scales shouldCheckIntegrityWhenOpeningDatabaseBlock:(id /* block */)block;
- (id)initWithPersistenceBaseURL:(id)url persistenceName:(id)name preferredIconSize:(struct CGSize { double x0; double x1; })size atScale:(double)scale allScales:(id)scales isReadOnly:(BOOL)only shouldCheckIntegrityWhenOpeningDatabaseBlock:(id /* block */)block;
- (void)dealloc;
- (id)persistenceController;
- (long long)providerState;
- (id)fallbackIconForRequest:(id)request;
- (void)setUpWithCompletionHandler:(id /* block */)handler;
- (void)shouldIconDataBeSavedForIconWithPageURL:(id)url originalPageURL:(id)url iconURL:(id)url size:(struct CGSize { double x0; double x1; })size isPrivate:(BOOL)private completionHandler:(id /* block */)handler;
- (void)linkIconFromPageURL:(id)url toCurrentPageURL:(id)url isPrivate:(BOOL)private completionHandler:(id /* block */)handler;
- (BOOL)_isIconDateExpired:(id)expired;
- (void)saveFaviconImageData:(id)data iconURL:(id)url pageURL:(id)url originalPageURL:(id)url size:(struct CGSize { double x0; double x1; })size isPrivate:(BOOL)private completionHandler:(id /* block */)handler;
- (void)_atomicallySaveImageData:(id)data iconURL:(id)url pageURL:(id)url originalPageURL:(id)url size:(struct CGSize { double x0; double x1; })size isPrivate:(BOOL)private completionHandler:(id /* block */)handler;
- (void)_confirmImageDataShouldBeSaved:(id)saved size:(struct CGSize { double x0; double x1; })size pageURL:(id)url iconURL:(id)url includingPrivateData:(BOOL)data completionHandler:(id /* block */)handler;
- (void)_saveImageData:(id)data iconURL:(id)url pageURL:(id)url originalPageURL:(id)url size:(struct CGSize { double x0; double x1; })size isPrivate:(BOOL)private completionHandler:(id /* block */)handler;
- (void)removeAllIconsForURLStringsNotIn:(id)in completionHandler:(id /* block */)handler;
- (void)removeIconForURLString:(id)urlstring completionHandler:(id /* block */)handler;
- (void)flushPrivateDataFromMemoryWithCompletionHandler:(id /* block */)handler;
- (void)retainPrivateData;
- (void)releasePrivateData;
- (void)setUpPersistenceAtPath:(id)path completionHandler:(id /* block */)handler;
- (void)imageForRequestDuringPersistenceSetUp:(id)up completionHandler:(id /* block */)handler;
- (void)cleanUpAfterPersistenceSetUpDidSucceed:(BOOL)succeed completionHandler:(id /* block */)handler;
- (id)builtInIconForRequest:(id)request;
- (BOOL)canHandleRequest:(id)request;
- (void)prepareResponseForRequest:(id)request allowDelayedResponse:(BOOL)response;
- (id)responseForRequest:(id)request willProvideUpdates:(BOOL *)updates;
- (void)stopWatchingUpdatesForRequest:(id)request;
- (void)emptyCaches;
- (void)savePendingChangesBeforeTermination;
- (id)_cachedResponseForRequest:(id)request;
- (void)_addCachedResponse:(id)response forRequest:(id)request;
- (void)_removeCachedResponsesForURL:(id)url;
- (void)_removeCachedResponsesForRequest:(id)request;
- (id)_responseDictionaryKeyForRequest:(id)request;
- (id)_responseCacheKeyForRequest:(id)request;
- (id)_hostFromRequest:(id)request;
- (id)_hostFromURL:(id)url;
- (void)_registerRequest:(id)request;
- (id)_requestsForHost:(id)host;
- (void)_updateOutstandingRequestsAfterSuccessfulSetup;
- (void)_updateOutstandingRequestsForPageURL:(id)url forceDidReceiveNewData:(BOOL)data;
- (void)_prepareAndSendResponseForRequests:(id)requests forceDidReceiveNewData:(BOOL)data;
- (id /* block */)_blockOperationForRequest:(id)request;
- (void)webViewMetadataFetchOperation:(id)operation didFinishUsingWebView:(id)view;
- (void)webViewMetadataFetchOperation:(id)operation getWebViewOfSize:(struct CGSize { double x0; double x1; })size withConfiguration:(id)configuration completionHandler:(id /* block */)handler;
- (void)_getIconForRequest:(id)request withCompletionHandler:(id /* block */)handler;
- (void)_atomicallyLinkPageURLs:(id)urls toIconWithInfo:(id)info isPrivate:(BOOL)private;
- (void)_linkPageURL:(id)url toIconWithInfo:(id)info isPrivate:(BOOL)private completionHandler:(id /* block */)handler;
@end

#endif /* WBSFaviconProvider_h */
