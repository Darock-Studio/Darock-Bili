//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WBSSiteMetadataManager_h
#define WBSSiteMetadataManager_h
@import Foundation;

#include "WBSSiteMetadataProviderDelegate-Protocol.h"

@class NSCountedSet, NSMutableArray, NSMutableDictionary, NSMutableSet, NSOperationQueue, NSString, NSURL, WKProcessPool;
@protocol OS_dispatch_queue;

@interface WBSSiteMetadataManager : NSObject<WBSSiteMetadataProviderDelegate> {
  /* instance variables */
  WKProcessPool *_processPool;
  NSMutableSet *_usedWebViews;
  NSMutableSet *_reusableWebViews;
  NSMutableArray *_siteMetadataProviders;
  NSObject<OS_dispatch_queue> *_siteMetadataProvidersAccessQueue;
  NSOperationQueue *_operationQueue;
  NSCountedSet *_activeOperations;
  NSObject<OS_dispatch_queue> *_internalQueue;
  NSMutableSet *_tokens;
  NSMutableDictionary *_requestsToRequestInfos;
}

@property (readonly, nonatomic) NSURL *injectedBundleURL;
@property (nonatomic) BOOL suspended;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (id)initWithInjectedBundleURL:(id)url;
- (BOOL)isSuspended;
- (id)_processPool;
- (id)_popReusableWebView;
- (void)_discardWebViewSoon:(id)soon;
- (unsigned long long)_numberOfConcurrentRequests;
- (void)registerSiteMetadataProvider:(id)provider;
- (id)registerRequest:(id)request priority:(long long)priority responseHandler:(id /* block */)handler;
- (id)registerOneTimeRequest:(id)request priority:(long long)priority responseHandler:(id /* block */)handler;
- (void)preloadRequest:(id)request withPriority:(long long)priority responseHandler:(id /* block */)handler;
- (void)preloadRequests:(id)requests withPriority:(long long)priority responseHandler:(id /* block */)handler;
- (void)_sendRequiresDownloadResponse:(id)response toResponseHandlersForRequest:(id)request;
- (void)_sendResponse:(id)response toResponseHandlersForRequest:(id)request didReceiveNewData:(BOOL)data;
- (void)_internalCancelRequestWithToken:(id)token;
- (void)cancelRequestWithToken:(id)token;
- (void)cancelRequestsWithTokens:(id)tokens;
- (void)cancelRequestsWithTokens:(id)tokens completionHandler:(id /* block */)handler;
- (void)_internalSetPriority:(long long)priority ofRequestWithToken:(id)token;
- (BOOL)_requestIsCancelledForToken:(id)token;
- (void)setPriority:(long long)priority ofRequestWithToken:(id)token;
- (void)setPriority:(long long)priority ofRequestsWithTokens:(id)tokens;
- (void)emptyProviderCaches;
- (void)emptyProviderCachesIncludingFavicons:(BOOL)favicons;
- (void)savePendingProviderChangesBeforeTermination;
- (void)savePendingProviderChangesWithCompletion:(id /* block */)completion;
- (void)_registerToken:(id)token withProvider:(id)provider;
- (id)_providerForRequest:(id)request;
- (long long)_highestRequestPriorityForRequest:(id)request;
- (void)_reprioritizeOperationForRequest:(id)request;
- (BOOL)_updateOperationForRequestIfPossible:(id)possible;
- (void)_setUpOperationForRequest:(id)request withSiteMetadataProvider:(id)provider usingOperationBlock:(id /* block */)block;
- (id)_makeWebViewOfSize:(struct CGSize { double x0; double x1; })size withConfiguration:(id)configuration;
- (void)_scheduleDelayedResponse:(id)response forRequestToken:(id)token;
- (void)siteMetadataProvider:(id)provider didReceiveResponse:(id)response ofType:(long long)type didReceiveNewData:(BOOL)data forRequest:(id)request;
- (void)siteMetadataProvider:(id)provider didReceiveResponse:(id)response forRequest:(id)request beginOperationUsingBlock:(id /* block */)block;
- (id)siteMetadataProvider:(id)provider registerRequest:(id)request priority:(long long)priority responseHandler:(id /* block */)handler;
- (id)siteMetadataProvider:(id)provider registerOneTimeRequest:(id)request priority:(long long)priority responseHandler:(id /* block */)handler;
- (void)siteMetadataProvider:(id)provider cancelRequestsWithTokens:(id)tokens;
- (void)siteMetadataProvider:(id)provider getWebViewOfSize:(struct CGSize { double x0; double x1; })size withConfiguration:(id)configuration completionHandler:(id /* block */)handler;
- (void)siteMetadataProvider:(id)provider didFinishUsingWebView:(id)view;
@end

#endif /* WBSSiteMetadataManager_h */
