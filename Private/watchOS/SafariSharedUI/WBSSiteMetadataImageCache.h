//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WBSSiteMetadataImageCache_h
#define WBSSiteMetadataImageCache_h
@import Foundation;

#include "WBSCacheRetainReleasePolicy.h"
#include "WBSSiteMetadataImageCacheDelegate-Protocol.h"

@class NSMutableDictionary, NSMutableSet, NSURL, WBSCoalescedAsynchronousWriter;
@protocol OS_dispatch_queue, {atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}};

@interface WBSSiteMetadataImageCache : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_diskAccessQueue;
  NSObject<OS_dispatch_queue> *_internalQueue;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _cacheAccessLock;
  NSMutableDictionary *_imagesForKeyStrings;
  NSMutableSet *_missingImageKeyStrings;
  NSMutableDictionary *_keyStringRequestsToCompletionHandlers;
  WBSCacheRetainReleasePolicy *_cachePolicy;
  NSMutableDictionary *_cacheSettings;
  WBSCoalescedAsynchronousWriter *_cacheSettingsWriter;
  unsigned long long _fileProtectionOptions;
}

@property (readonly, nonatomic) NSURL *imageDirectoryURL;
@property (readonly, nonatomic) long long imageType;
@property (readonly, nonatomic) BOOL terminating;
@property (weak) NSObject<WBSSiteMetadataImageCacheDelegate> *delegate;

/* instance methods */
- (id)init;
- (id)initWithImageDirectoryURL:(id)url imageType:(long long)type;
- (id)initWithImageDirectoryURL:(id)url imageType:(long long)type fileProtectionOptions:(unsigned long long)options;
- (BOOL)isTerminating;
- (id)_internalQueueName;
- (id)_diskAccessQueueName;
- (void)setUpImageCache;
- (void)_internalSetUpImageCache;
- (void)purgeUnneededImages;
- (void)_internalPurgeUnneededImages;
- (void)savePendingChangesBeforeTermination;
- (void)emptyCache;
- (void)_emptyCacheDirectory;
- (void)_dispatchDiskAccessBlock:(id /* block */)block;
- (id)_fileLocationForKeyString:(id)string;
- (id)_fileNameForKeyString:(id)string;
- (BOOL)_internalDidLoadImageAndShouldNotify:(id)notify forKeyString:(id)string fromDisk:(BOOL)disk;
- (void)_didLoadImage:(id)image forKeyString:(id)string fromDisk:(BOOL)disk;
- (void)_removeImagesPassingTest:(id /* block */)test;
- (id)imageForKeyString:(id)string getImageState:(long long *)state;
- (void)getImageForKeyString:(id)string completionHandler:(id /* block */)handler;
- (void)_requestImageForKeyString:(id)string completionHandler:(id /* block */)handler;
- (void)saveImageToDisk:(id)disk forKeyString:(id)string completionHandler:(id /* block */)handler;
- (void)_internalSaveImageToDisk:(id)disk forKeyString:(id)string completionHandler:(id /* block */)handler;
- (void)setImage:(id)image forKeyString:(id)string;
- (void)removeAllImages;
- (void)_internalRemoveAllImages;
- (long long)imageStateForKeyString:(id)string;
- (long long)_internalImageStateForKeyString:(id)string;
- (void)setImageState:(long long)state forKeyString:(id)string;
- (void)_internalSetImageState:(long long)state forKeyString:(id)string;
- (void)retainImageWithKeyStringProvider:(id /* block */)provider;
- (void)retainImageForKeyString:(id)string;
- (void)retainImagesForKeyStrings:(id)strings;
- (void)_internalReleaseImageForKeyString:(id)string;
- (void)releaseImageWithKeyStringProvider:(id /* block */)provider;
- (void)releaseImageForKeyString:(id)string;
- (void)releaseImagesForKeyStrings:(id)strings;
- (BOOL)isImageRetainedForKeyString:(id)string;
- (void)removeImagesFromCacheForKeyStrings:(id)strings;
- (void)_internalRemoveImagesFromCacheForKeyStrings:(id)strings;
- (id)_cacheSettingsFileURL;
- (void)_notifyDidFinishLoadingSettings;
- (id)settingForKey:(id)key;
- (void)setSetting:(id)setting forKey:(id)key;
@end

#endif /* WBSSiteMetadataImageCache_h */
