//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 597.5.2.1.0
//
#ifndef IFImage_h
#define IFImage_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class NSData, NSUUID;

@interface IFImage : NSObject<NSCopying, NSSecureCoding>

@property (readonly) BOOL placeholder;
@property (readonly, @dynamic) NSUUID *uuid;
@property (readonly, @dynamic) NSData *validationToken;
@property (readonly) NSData *bitmapData;
@property BOOL largest;
@property (readonly, @dynamic) double dimension;
@property (@dynamic) struct CGSize { double x0; double x1; } minimumSize;
@property (@dynamic) BOOL placeholder;
@property (@dynamic) unsigned long long validationFlags;
@property (@dynamic) struct CGSize { double x0; double x1; } iconSize;
@property (readonly, @dynamic) struct CGSize { double x0; double x1; } size;
@property (readonly, @dynamic) double scale;
@property (readonly, @dynamic) struct CGSize { double x0; double x1; } pixelSize;
@property (readonly, @dynamic) struct CGImage * CGImage;
@property (readonly) struct CGImage * cgImage;

/* class methods */
+ (struct CGImage *)createCGImageWithBitmapData:(id)data;
+ (BOOL)supportsSecureCoding;
+ (struct CGColorSpace *)defaultCGColorSpace;
+ (id)imageWithContentsOfURL:(id)url;
+ (id)allocWithZone:(struct _NSZone *)zone;
+ (struct CGImage *)createCGImageWithBitmapData:(id)data imageHeader:(struct { unsigned int x0; unsigned int x1; unsigned int x2; float x3; float x4; float x5; float x6; float x7; float x8; unsigned char x9[12] } *)header;
+ (struct CGImage *)escapingCGImageWithCGImage:(struct CGImage *)cgimage;

/* instance methods */
- (id)initWithData:(id)data uuid:(id)uuid;
- (id)initWithData:(id)data uuid:(id)uuid validationToken:(id)token;
- (id)initWithCGImage:(struct CGImage *)cgimage scale:(double)scale minimumSize:(struct CGSize { double x0; double x1; })size placeholder:(BOOL)placeholder;
- (BOOL)writeToURL:(id)url;
- (id)digest;
- (id)_init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)initWithContentsOfURL:(id)url scale:(double)scale;
- (id)initWithContentsOfURL:(id)url;
- (id)initWithCGImage:(struct CGImage *)cgimage scale:(double)scale placeholder:(BOOL)placeholder;
- (id)initWithCGImage:(struct CGImage *)cgimage scale:(double)scale;
@end

#endif /* IFImage_h */
