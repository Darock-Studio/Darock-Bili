//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef ISBasePlayer_h
#define ISBasePlayer_h
@import Foundation;

#include "ISObservable.h"
#include "ISBasePlayerDelegate-Protocol.h"
#include "ISBehavior.h"
#include "ISChangeObserver-Protocol.h"
#include "ISPlayerItem.h"
#include "ISPlayerOutputContent.h"
#include "ISPlayerState.h"
#include "ISWrappedAVPlayer.h"
#include "ISWrappedAVPlayerDelegate-Protocol.h"

@class AVPlayer, NSError, NSHashTable, NSString;
@protocol OS_dispatch_queue;

@interface ISBasePlayer : ISObservable<ISChangeObserver, ISWrappedAVPlayerDelegate> {
  /* instance variables */
  float _videoVolume;
  AVPlayer *_providedAVPlayer;
  NSObject<OS_dispatch_queue> *_outputQueue;
  NSHashTable *_outputs;
  NSString *_apertureMode;
  struct { BOOL videoPlayer; BOOL videoPlayerVolume; BOOL contentFromPlayerItem; BOOL willPlayToEndObserver; BOOL willPlayToPhotoObserver; BOOL status; } _isValid;
  long long _mainQueue_mediaServicesResetCounter;
}

@property (retain, nonatomic) ISBehavior *activeBehavior;
@property (retain, nonatomic) id _videoWillPlayToEndObserver;
@property (retain, nonatomic) id _videoWillPlayToPhotoObserver;
@property (retain, nonatomic) ISPlayerState *lastAppliedLayoutInfo;
@property (retain, nonatomic) ISPlayerOutputContent *_outputContent;
@property (nonatomic) double lastAppliedScale;
@property (nonatomic) long long status;
@property (nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } _videoForwardPlaybackEndTime;
@property (retain, nonatomic) NSError *error;
@property (retain, nonatomic) ISPlayerItem *playerItem;
@property (nonatomic) float audioVolume;
@property (nonatomic) BOOL audioEnabled;
@property (weak, nonatomic) NSObject<ISBasePlayerDelegate> *delegate;
@property (readonly, nonatomic) ISWrappedAVPlayer *videoPlayer;
@property (readonly, nonatomic) BOOL videoLayersReadyForDisplay;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (id)initWithVideoPlayer:(id)player;
- (void)dealloc;
- (id)mutableChangeObject;
- (void)playerItemDidChange;
- (void)configurePlayerItem;
- (void)statusDidChange;
- (void)activeBehaviorDidChange;
- (void)addOutput:(id)output;
- (void)removeOutput:(id)output;
- (void)_outputVideoReadyForDisplayDidChange:(id)change;
- (BOOL)behaviorIsVideoReadyForDisplay:(id)display;
- (void)didAddOutput:(id)output;
- (void)willRemoveOutput:(id)output;
- (void)_videoDidPlayToEnd;
- (void)_videoWillPlayToPhoto;
- (void)_videoWillPlayToEnd;
- (double)videoWillPlayToEndInterval;
- (double)videoWillPlayToPhotoInterval;
- (void)applyScale:(double)scale withTransitionOptions:(id)options completion:(id /* block */)completion;
- (void)applyOutputInfo:(id)info fromBehavior:(id)behavior withTransitionOptions:(id)options completion:(id /* block */)completion;
- (void)enumerateOutputsWithBlock:(id /* block */)block;
- (void)_configureNewOutput:(id)output;
- (void)_invalidateContentFromPlayerItem;
- (void)_updateContentFromPlayerItemIfNeeded;
- (void)_setOutputContent:(id)content;
- (void)_invalidateWillPlayToEndObserver;
- (void)_updateWillPlayToEndObserverIfNeeded;
- (void)_invalidateWillPlayToPhotoObserver;
- (void)_updateWillPlayToPhotoObserverIfNeeded;
- (void)_invalidateStatus;
- (void)_updateStatusIfNeeded;
- (void)_setStatus:(long long)status;
- (void)_setForwardPlaybackEndTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (float)videoVolume;
- (void)setVideoVolume:(float)volume;
- (void)setApertureMode:(id)mode;
- (id)apertureMode;
- (void)didPerformChanges;
- (BOOL)_needsUpdate;
- (void)_updateIfNeeded;
- (void)_invalidateVideoPlayerVolume;
- (void)_updateVideoPlayerVolumeIfNeeded;
- (void)_invalidateVideoPlayer;
- (void)_updateVideoPlayerIfNeeded;
- (void)_handleErrorsIfNeeded;
- (void)_setError:(id)error;
- (void)_mainQueue_handleMediaServicesReset;
- (void)_mainQueue_resetAVObjectsWithResetCount:(long long)count;
- (void)_setVideoPlayer:(id)player;
- (void)behavior:(id)behavior didSetOutputInfo:(id)info withTransitionOptions:(id)options completion:(id /* block */)completion;
- (void)behavior:(id)behavior setVideoPlayRate:(float)rate;
- (float)videoPlayRate;
- (BOOL)behavior:(id)behavior seekVideoPlayerToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time completionHandler:(id /* block */)handler;
- (BOOL)behavior:(id)behavior seekVideoPlayerToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })before toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })after completionHandler:(id /* block */)handler;
- (BOOL)behavior:(id)behavior prerollVideoAtRate:(float)rate completionHandler:(id /* block */)handler;
- (void)behavior:(id)behavior setVideoForwardPlaybackEndTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (void)behavior:(id)behavior setVideoVolume:(float)volume;
- (id)behavior:(id)behavior addBoundaryTimeObserverForTimes:(id)times queue:(id)queue usingBlock:(id /* block */)block;
- (void)behavior:(id)behavior removeTimeObserver:(id)observer;
- (void)behavior:(id)behavior playVideoToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time initialRate:(float)rate overDuration:(double)duration progressHandler:(id /* block */)handler;
- (void)observable:(id)observable didChange:(unsigned long long)change context:(void *)context;
- (void)avPlayer:(id)player itemDidPlayToEnd:(id)end;
- (BOOL)isAudioEnabled;
- (void)_setVideoWillPlayToEndObserver:(id)observer;
- (void)_setVideoWillPlayToPhotoObserver:(id)observer;
- (void)_setLastAppliedLayoutInfo:(id)info;
- (void)_setLastAppliedScale:(double)scale;
- (void)_setVideoForwardPlaybackEndTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
@end

#endif /* ISBasePlayer_h */
