//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 818.2.23.4.1
//
#ifndef GKDaemonProxy_h
#define GKDaemonProxy_h
@import Foundation;

#include "GKServiceProxy.h"
#include "GKClientProtocol-Protocol.h"
#include "NSXPCConnectionDelegate-Protocol.h"

@class NSDictionary, NSHashTable, NSString, NSXPCConnection;
@protocol GKDaemonProxyDataUpdateDelegate, GKDaemonProxyNetworkActivityIndicatorDelegate, OS_dispatch_queue, OS_dispatch_semaphore;

@interface GKDaemonProxy : GKServiceProxy<NSXPCConnectionDelegate, GKClientProtocol>

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *invocationQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *authenticationQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_semaphore> *concurrentRequestSemaphore;
@property (retain, nonatomic) NSDictionary *interfaceLookup;
@property (retain, nonatomic) NSXPCConnection *connection;
@property (nonatomic) int hostPID;
@property (retain, nonatomic) NSHashTable *dataUpdateDelegates;
@property (weak, nonatomic) NSObject<GKDaemonProxyDataUpdateDelegate> *dataUpdateDelegate;
@property (weak, nonatomic) NSObject<GKDaemonProxyNetworkActivityIndicatorDelegate> *networkActivityIndicatorDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)daemonProxy;
+ (id)proxiesForPlayer;
+ (void)removeProxyForPlayer:(id)player;
+ (id)proxyForPlayer:(id)player;
+ (id)proxyForLocalPlayer;
+ (void)messagesDidReceiveGameCenterURL:(id)url senderHandle:(id)handle contactID:(id)id;
+ (void)messagesDidReceiveGameCenterURL:(id)url;
+ (void)getActiveFriendRequestCount:(id /* block */)count;

/* instance methods */
- (void)_resetServiceLookup;
- (void)resetServiceLookup;
- (void)addInterface:(id)interface toLookup:(id)lookup;
- (void)buildInterfaceLookup;
- (void)setTestGame:(id)game protocolVersion:(id)version reply:(id /* block */)reply;
- (id)init;
- (id)authenticatedPlayerID;
- (id)accountName;
- (BOOL)hasAuthenticatedAccount;
- (id)authenticatedPlayerInfo;
- (id)authenticatedCredential;
- (void)authenticatedLocalPlayersWithStatus:(unsigned long long)status completion:(id /* block */)completion;
- (id)authenticatedLocalPlayersWithStatus:(unsigned long long)status;
- (id)getGamedFiredUp;
- (void)getAccountNameWithHandler:(id /* block */)handler;
- (void)getAuthenticatedPlayerIDWithHandler:(id /* block */)handler;
- (void)addDataUpdateDelegate:(id)delegate;
- (void)removeDataUpdateDelegate:(id)delegate;
- (void)beginNetworkActivity;
- (void)endNetworkActivity;
- (void)resetNetworkActivity;
- (void)setPreferencesValues:(id)values;
- (void)setCurrentGame:(id)game serverEnvironment:(long long)environment reply:(id /* block */)reply;
- (void)completedOptimisticAuthenticationWithResponse:(id)response error:(id)error;
- (void)authenticatedPlayersDidChange:(id)change reply:(id /* block */)reply;
- (void)respondedToNearbyInvite:(id)invite;
- (void)metricsValuesChanged;
- (void)friendRequestSelected:(id)selected;
- (void)receivedChallengeSelected:(id)selected;
- (void)scoreSelected:(id)selected;
- (void)achievementSelected:(id)selected;
- (void)dispatchCompletedChallenge:(id)challenge;
- (void)completedChallengeSelected:(id)selected;
- (void)challengeReceived:(id)received;
- (void)challengeCompleted:(id)completed;
- (void)fetchTurnBasedData;
- (void)acceptMultiplayerGameInvite;
- (void)acceptInviteWithNotification:(id)notification;
- (void)declineInviteWithNotification:(id)notification;
- (void)updateInviteWithNotification:(id)notification;
- (void)cancelInviteWithNotification:(id)notification;
- (void)cancelGameInvite:(id)invite;
- (void)relayPushNotification:(id)notification;
- (void)nearbyPlayerFoundForPlayerID:(id)id deviceID:(id)id discoveryInfo:(id)info;
- (void)nearbyPlayerLostForPlayerID:(id)id deviceID:(id)id;
- (void)nearbyDataReceivedForPlayerID:(id)id deviceID:(id)id data:(id)data;
- (id)userInfoForPlayerID:(id)id deviceID:(id)id data:(id)data discoveryInfo:(id)info;
- (void)didConnectToParticipantWithID:(id)id;
- (void)didDisconnectFromParticipantWithID:(id)id;
- (void)didReceiveData:(id)data reliably:(BOOL)reliably forRecipients:(id)recipients fromSender:(id)sender;
- (void)session:(id)session addedPlayer:(id)player;
- (void)session:(id)session removedPlayer:(id)player;
- (void)session:(id)session player:(id)player didChangeConnectionState:(long long)state;
- (void)session:(id)session player:(id)player didSaveData:(id)data;
- (void)session:(id)session didReceiveData:(id)data fromPlayer:(id)player;
- (void)session:(id)session didReceiveMessage:(id)message withData:(id)data fromPlayer:(id)player;
- (id)localizedMessageFromDictionary:(id)dictionary forBundleID:(id)id;
- (void)loadRemoteImageDataForClientForURL:(id)url reply:(id /* block */)reply;
- (void)resetLoginCancelCount;
- (void)setBadgeCount:(unsigned long long)count forType:(unsigned long long)type;
- (void)refreshContentsForDataType:(unsigned int)type userInfo:(id)info;
- (void)setLogBits:(int)bits;
- (void)requestSandboxExtension:(id /* block */)extension;
- (id)replyQueueForRequestSelector:(SEL)selector;
- (void)connection:(id)connection handleInvocation:(id)invocation isReply:(BOOL)reply;
@end

#endif /* GKDaemonProxy_h */
