//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 818.2.23.4.1
//
#ifndef GKMatch_h
#define GKMatch_h
@import Foundation;

#include "GKMatchmaker.h"
#include "GKThreadsafeDictionary.h"
#include "GKTransportClientDelegate-Protocol.h"
#include "GKTransportContext.h"
#include "GKTransportProtocol-Protocol.h"
#include "GKTransportSupport-Protocol.h"
#include "_TtP20GameCenterFoundation30ExponentialBackoffTaskDelegate_-Protocol.h"

@class GKMultiplayerActivityReporter, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, _TtC20GameCenterFoundation22ExponentialBackoffTask;
@protocol GKMatchDelegate, GKMatchDelegatePrivate, OS_dispatch_queue;

@interface GKMatch : NSObject<GameCenterFoundation.ExponentialBackoffTaskDelegate, GKTransportClientDelegate, GKTransportSupport> {
  /* instance variables */
  NSObject<GKMatchDelegatePrivate> *_inviteDelegateWeak;
}

@property (retain, nonatomic) NSMutableDictionary *playerEventQueues;
@property (retain, nonatomic) NSMutableSet *connectedPlayerIDs;
@property (retain, nonatomic) GKThreadsafeDictionary *playersByIdentifier;
@property (retain, nonatomic) NSMutableArray *reinvitedPlayers;
@property (nonatomic) unsigned char version;
@property (weak, nonatomic) NSObject<GKMatchDelegatePrivate> *inviteDelegate;
@property (nonatomic) unsigned int packetSequenceNumber;
@property (retain, nonatomic) NSMutableDictionary *playerPushTokens;
@property (retain, nonatomic) NSMutableArray *opponentIDs;
@property (retain, nonatomic) NSString *rematchID;
@property (nonatomic) long long rematchCount;
@property (retain, nonatomic) NSDictionary *networkStatistics;
@property (retain, nonatomic) NSMutableDictionary *hostScores;
@property (nonatomic) BOOL needHostScore;
@property (nonatomic) BOOL hostScoreForQuery;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *stateChangeQueue;
@property (copy, nonatomic) id /* block */ chooseHostCompletion;
@property (nonatomic) BOOL fastStartStateActive;
@property (nonatomic) BOOL initiallyStarted;
@property (nonatomic) BOOL canPromptTapToRadar;
@property (retain, nonatomic) NSString *groupIdentifier;
@property (retain, nonatomic) GKThreadsafeDictionary *playersByJoinType;
@property (retain, nonatomic) NSObject<GKTransportProtocol> *transport;
@property (retain, nonatomic) GKTransportContext *transportContext;
@property (retain, nonatomic) GKThreadsafeDictionary *propertiesByPlayerID;
@property (retain, nonatomic) GKMultiplayerActivityReporter *multiplayerActivityReporter;
@property (retain, nonatomic) GameCenterFoundation.ExponentialBackoffTask *pendingConnectionChecker;
@property (weak, nonatomic) GKMatchmaker *matchmaker;
@property (nonatomic) BOOL recentlyBecameActive;
@property (readonly, nonatomic) NSArray *players;
@property (weak, nonatomic) NSObject<GKMatchDelegate> *delegate;
@property (readonly, nonatomic) unsigned long long expectedPlayerCount;
@property (readonly, nonatomic) NSDictionary *properties;
@property (readonly, nonatomic) NSDictionary *playerProperties;
@property (readonly, nonatomic) unsigned long long currentPlayerCount;
@property (readonly, nonatomic) unsigned long long currentPlayerCountIncludingLocalPlayer;
@property (readonly, nonatomic) NSArray *guestPlayers;

/* instance methods */
- (id)description;
- (id)pendingInviteesOfLocalPlayer;
- (void)refreshPendingConnectionCheckIfNeeded;
- (BOOL)sendData:(id)data toPlayers:(id)players dataMode:(long long)mode error:(id *)error;
- (BOOL)sendDataToAllPlayers:(id)players withDataMode:(long long)mode error:(id *)error;
- (id)voiceChatWithName:(id)name;
- (void)chooseBestHostingPlayerWithCompletionHandler:(id /* block */)handler;
- (void)rematchWithCompletionHandler:(id /* block */)handler;
- (void)disconnect;
- (void)promptRadarAndRequestRemoteLogsWithDescriptionAddition:(id)addition;
- (id)playerIDs;
- (void)chooseBestHostPlayerWithCompletionHandler:(id /* block */)handler;
- (BOOL)sendData:(id)data toPlayers:(id)players withDataMode:(long long)mode error:(id *)error;
- (id)initWithMatchmaker:(id)matchmaker;
- (id)initWithTransport:(id)transport context:(id)context reporter:(id)reporter matchmaker:(id)matchmaker;
- (void)setupWithTransport:(id)transport context:(id)context reporter:(id)reporter matchmaker:(id)matchmaker;
- (void)applicationWillTerminateNotification:(id)notification;
- (void)applicationDidEnterBackground:(id)background;
- (void)applicationWillEnterForeground:(id)foreground;
- (void)cleanupForTerminationWithReason:(long long)reason;
- (void)clearSessionWithReason:(long long)reason;
- (void)dealloc;
- (void)_delegate:(id)_delegate didReceiveData:(id)data forRecipient:(id)recipient fromPlayer:(id)player;
- (void)addPlayers:(id)players;
- (id)allIDs;
- (id)playerFromID:(id)id includingLocal:(BOOL)local;
- (id)playerFromID:(id)id;
- (void)updateProperties:(id)properties playerID:(id)id;
- (void)withEventQueueForPlayer:(id)player perform:(id /* block */)perform;
- (void)withEventQueueForPlayer:(id)player createIfNeeded:(BOOL)needed perform:(id /* block */)perform;
- (void)withEventQueueForPlayer:(id)player create:(id /* block */)create perform:(id /* block */)perform;
- (void)preLoadInviter:(id)inviter sessionToken:(id)token;
- (void)updateRematchID;
- (void)updateJoinedPlayer:(id)player joinType:(int)type;
- (void)localPlayerDidChange:(id)change;
- (void)putMultiplayerGroup;
- (void)addPlayerToGroup:(id)group;
- (id)getConnectionContextForPlayerID:(id)id;
- (id)updateConnectionInfo:(id)info forPlayerID:(id)id;
- (void)getLocalConnectionDataWithCompletionHandler:(id /* block */)handler;
- (void)setAutomatchPlayerCount:(long long)count;
- (void)updateEventQueueForInviter:(id)inviter;
- (void)cancelPendingConnectionCheckWithReason:(id)reason;
- (void)connectToPlayers:(id)players version:(unsigned char)version invitedByLocalPlayer:(BOOL)player completionHandler:(id /* block */)handler;
- (void)connectToGuestPlayer:(id)player withHostPlayer:(id)player;
- (id)nearbyConnectionData;
- (void)connectToNearbyPlayer:(id)player withConnectionData:(id)data;
- (id)packet:(unsigned char)packet data:(id)data;
- (void)syncPlayers:(id)players forJoinType:(int)type toInvitees:(id)invitees;
- (void)receivedPlayerSyncData:(id)data;
- (id)makeInviteMessageDoneData;
- (void)sendInviteData:(id)data;
- (void)sendInviteData:(id)data withScope:(long long)scope;
- (BOOL)sendPacketDataToAll:(id)all packetType:(unsigned char)type dataMode:(long long)mode error:(id *)error;
- (void)sendVersionData:(unsigned char)data;
- (void)sendVersionData:(unsigned char)data toPlayer:(id)player;
- (void)queueData:(id)data withEventQueueForPlayer:(id)player forRecipient:(id)recipient;
- (void)deliverData:(id)data forRecipient:(id)recipient fromPlayer:(id)player;
- (void)sendQueuedStatesAndPackets;
- (void)sendQueuedPacketsForPlayer:(id)player;
- (void)deferStateCallbackForPlayer:(id)player state:(long long)state;
- (void)updateStateForPlayer:(id)player state:(long long)state;
- (void)sendStateCallbackForPlayer:(id)player state:(long long)state;
- (void)sendStateCallbackToDelegate:(id)delegate forPlayer:(id)player state:(long long)state;
- (id)connectedPlayers;
- (void)sendConnectingStateCallbackToDelegate:(id)delegate forPlayers:(id)players;
- (void)reinviteeAcceptedNotification:(id)notification;
- (void)reinviteeDeclinedNotification:(id)notification;
- (void)conditionallyReinvitePlayer:(id)player sessionToken:(id)token;
- (void)conditionallyRelaunchPlayer:(id)player;
- (void)acceptRelayResponse:(id)response player:(id)player;
- (void)handleRelayPushData:(id)data onlyIfPreemptive:(BOOL)preemptive;
- (void)preemptRelay:(id)relay;
- (void)relayDidReceivePushData:(id)data completionHandler:(id /* block */)handler;
- (void)connectionDidChangeWithState:(int)state playerID:(id)id;
- (void)connectionDidFailWithError:(id)error;
- (void)transportDidFailWithError:(id)error;
- (void)transportDidReceivePacket:(id)packet fromPlayerID:(id)id remoteRecipientID:(id)id;
- (void)transportDidUpdateWithInfo:(id)info;
- (void)retryLimitHit;
- (id)dataFromBase64String:(id)string;
- (id)stringForGKPlayerConnectionState:(long long)state;
- (id)stringForGKPeerConnectionState:(int)state;
- (void)reportInviteSentWithApproach:(unsigned long long)approach isHosted:(BOOL)hosted recipients:(id)recipients;
@end

#endif /* GKMatch_h */
