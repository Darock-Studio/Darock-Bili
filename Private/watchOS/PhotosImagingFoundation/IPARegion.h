//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef IPARegion_h
#define IPARegion_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSMutableCopying-Protocol.h"

@interface IPARegion : NSObject<NSCopying, NSMutableCopying> {
  /* instance variables */
  void * _imp;
}

/* class methods */
+ (id)region;
+ (id)regionWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (id)regionWithRectArray:(id)array;
+ (id)regionWithRegion:(id)region;

/* instance methods */
- (id)regionByAddingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)regionByAddingRegion:(id)region;
- (id)regionByAddingRectArray:(id)array;
- (id)regionByRemovingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)regionByRemovingRegion:(id)region;
- (id)regionByRemovingRectArray:(id)array;
- (id)regionByClippingToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)regionByClippingToRegion:(id)region;
- (id)regionByClippingToRectArray:(id)array;
- (id)regionByExcludingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)regionByExcludingRegion:(id)region;
- (id)regionByScalingBy:(struct CGPoint { double x0; double x1; })by;
- (id)regionByTranslatingBy:(struct CGPoint { double x0; double x1; })by;
- (id)regionByGrowingBy:(struct CGPoint { double x0; double x1; })by;
- (id)regionByGrowingBy:(struct CGPoint { double x0; double x1; })by inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)regionByShrinkingBy:(struct CGPoint { double x0; double x1; })by;
- (id)regionByShrinkingBy:(struct CGPoint { double x0; double x1; })by inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)regionByRoundingUp;
- (id)regionByRoundingDown;
- (id)regionByApplyingOrientation:(long long)orientation imageSize:(struct CGSize { double x0; double x1; })size;
- (id)regionByApplyingAffineTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (id)regionByFlippingInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)init;
- (id)initWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)initWithRegion:(id)region;
- (id)initWithRectArray:(id)array;
- (void)dealloc;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)mutableCopyWithZone:(struct _NSZone *)zone;
- (unsigned long long)count;
- (BOOL)isEmpty;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (BOOL)isEqualToRegion:(id)region;
- (void)enumerateRects:(id /* block */)rects;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (BOOL)intersectsRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)intersectsRegion:(id)region;
- (BOOL)includesRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)includesRegion:(id)region;
- (double)area;
@end

#endif /* IPARegion_h */
