//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1161.4.0.0.0
//
#ifndef NPKExpressPassSettingsViewController_h
#define NPKExpressPassSettingsViewController_h
@import Foundation;

#include "NPKListCollectionViewController.h"
#include "NPKExpressModeSettingsCoordinatorDelegate-Protocol.h"
#include "NPKExpressPassSettingsSectionProviderProtocol-Protocol.h"
#include "NPKPassAssociatedInfoManagerObserver-Protocol.h"
#include "NPKPassesDataSourceObserver-Protocol.h"

@class NPKExpressModeSettingsCoordinator, NPKPassAssociatedInfoManager, NPKPassesManager, NSString;

@interface NPKExpressPassSettingsViewController : NPKListCollectionViewController<NPKExpressModeSettingsCoordinatorDelegate, NPKPassesDataSourceObserver, NPKPassAssociatedInfoManagerObserver, NPKExpressPassSettingsSectionProviderProtocol> {
  /* instance variables */
  NPKPassesManager *_passesManager;
  NPKPassAssociatedInfoManager *_passAssociatedInfoManager;
  NPKExpressModeSettingsCoordinator *_expressModeSettingsCoordinator;
  BOOL _passManagerDidLoad;
  NSString *_expectedVisiblePassUniqueID;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (Class)sectionProviderConfigurationClass;
+ (id)sectionProviderClassesWithConfiguration:(id)configuration;
+ (BOOL)hasEligibleExpressPassAvailable;
+ (id)_defaultConfiguration;
+ (id)_expressPassConfigurationForConfiguration:(id)configuration;
+ (BOOL)_supportsUWBForPass:(id)pass;
+ (BOOL)_isEligibleExpressPass:(id)pass;
+ (BOOL)_isEligibleExpressPass:(id)pass expressModeSettingsCoordinator:(id)coordinator;
+ (id)_defaultPassLibraryDataProvider;
+ (id)_defaultExpressModeSettingsCoordinator;

/* instance methods */
- (id)init;
- (id)initWithSectionProviderConfiguration:(id)configuration;
- (void)viewDidLoad;
- (void)scrollToPassWithUniqueID:(id)id animated:(BOOL)animated;
- (void)expressModeSettingsCoordinator:(id)coordinator didEncounterConflictWhenEnablingExpressForPass:(id)pass conflictingExpressPasses:(id)passes conflictsWithGymKit:(BOOL)kit completion:(id /* block */)completion;
- (void)expressModeSettingsCoordinator:(id)coordinator didUpdateState:(unsigned long long)state forPassWithUniqueID:(id)id;
- (void)expressModeSettingsCoordinator:(id)coordinator requestsAuthorizationToEnableExpressForPass:(id)pass completion:(id /* block */)completion;
- (void)passesDataSourceDidReloadPasses:(id)passes;
- (void)passesDataSource:(id)source didUpdatePasses:(id)passes withStates:(id)states;
- (void)passesDataSource:(id)source didAddPasses:(id)passes;
- (void)passesDataSource:(id)source didRemovePasses:(id)passes;
- (void)passesDataSourceDidReorderPasses:(id)passes;
- (void)passAssociatedInfoManager:(id)manager didUpdatePassInfo:(id)info withPassUniqueID:(id)id;
- (unsigned long long)expressModeEnabledStateForPass:(id)pass;
- (id)expressAppletIdentifiersForPass:(id)pass;
- (id)eligibleExpressUpgradeRequestsForPass:(id)pass;
- (id)currentExpressPaymentCardFromPaymentPasses:(id)passes;
- (void)handleDidSelectPass:(id)pass expressEnabled:(BOOL)enabled;
- (unsigned long long)_effectiveCurrentExpressStateForPass:(id)pass;
- (void)_reloadPass:(id)pass;
- (void)_updatePasses;
- (void)_scrollIfNeededToVisiblePass;
- (void)_enableExpressModeForPass:(id)pass completion:(id /* block */)completion;
- (void)_disableExpressModeForPass:(id)pass completion:(id /* block */)completion;
- (void)_updateExpressModeForPass:(id)pass expressEnabled:(BOOL)enabled completion:(id /* block */)completion;
@end

#endif /* NPKExpressPassSettingsViewController_h */
