//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 583.1.13.0.0
//
#ifndef TTSSpeechManager_h
#define TTSSpeechManager_h
@import Foundation;

#include "TTSSpeechAction.h"
#include "TTSSpeechSynthesizer.h"
#include "TTSSpeechSynthesizerDelegate-Protocol.h"
#include "TTSSpeechThread.h"

@class AVAudioSession, AXDispatchTimer, NSArray, NSLock, NSMutableArray, NSNumber, NSString;
@protocol OS_dispatch_queue;

@interface TTSSpeechManager : NSObject<TTSSpeechSynthesizerDelegate> {
  /* instance variables */
  NSMutableArray *_speechQueue;
  TTSSpeechSynthesizer *_synthesizer;
  TTSSpeechThread *_runThread;
  NSObject<OS_dispatch_queue> *_propertyQueue;
  BOOL _audioSessionObserversEnabled;
  BOOL _speechThreadFinished;
  NSLock *_speechThreadQueueLock;
}

@property (retain, nonatomic) NSNumber *originalSpeechRateForJobOverride;
@property (nonatomic) BOOL isPaused;
@property (retain, nonatomic) AXDispatchTimer *audioDeactivatorTimer;
@property (nonatomic) BOOL wasSpeakingBeforeAudioInterruption;
@property (nonatomic) BOOL didRequestStartSpeakingDuringAudioInterruption;
@property (nonatomic) BOOL didRequestPauseSpeakingDuringAudioInterruption;
@property (nonatomic) BOOL didRequestResumeSpeakingDuringAudioInterruption;
@property (nonatomic) double audioInterruptionStartedTime;
@property (retain, nonatomic) AVAudioSession *audioSession;
@property (nonatomic) BOOL isInAudioInterruption;
@property (retain, nonatomic) TTSSpeechAction *requestedActionDuringAudioInterruption;
@property (nonatomic) BOOL shouldHandleAudioInterruptions;
@property (nonatomic) BOOL speechEnabled;
@property (retain, nonatomic) NSString *speechSource;
@property (readonly, nonatomic) BOOL showControlCenterControls;
@property (readonly, @dynamic, nonatomic) BOOL isSpeaking;
@property (nonatomic) unsigned int audioQueueFlags;
@property (nonatomic) BOOL usesAuxiliarySession;
@property (nonatomic) unsigned long long setActiveOptions;
@property (retain, nonatomic) NSString *audioSessionCategory;
@property (nonatomic) unsigned long long audioSessionCategoryOptions;
@property (retain, nonatomic) NSArray *outputChannels;
@property (nonatomic) double audioSessionInactiveTimeout;
@property (copy, nonatomic) id /* block */ requestWillStart;
@property (nonatomic) BOOL supportsAccurateWordCallbacks;
@property (nonatomic) BOOL skipLuthorRules;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)currentLanguageCode;
+ (id)spellOutMarkupString:(id)string string:(id)string;
+ (id)spellOutLetterCaseMarkupString:(id)string string:(id)string;
+ (id)languageCodeForVoiceIdentifier:(id)identifier;
+ (BOOL)_isCharacterNativelySpeakable:(unsigned short)speakable languageCode:(id)code;
+ (id)literalStringMarkup:(id)markup string:(id)string speakCap:(BOOL)cap;
+ (id)pauseMarkupString:(id)string;
+ (id)availableLanguageCodes;
+ (id)availableVoices;
+ (id)availableSuperCompactVoices;
+ (id)availableVoices:(BOOL)voices;
+ (id)avSpeechVoicesForTTSSpeechVoices:(id)voices;
+ (id)_resetAvailableVoices;
+ (BOOL)currentProcessAllowedToSaveVoiceInfo;
+ (id)_resetAvailableVoices:(BOOL)voices;
+ (struct URegularExpression *)createRegularExpressionFromString:(id)string;
+ (id)matchedRangesForString:(id)string withRegularExpression:(struct URegularExpression *)expression;
+ (id)audioFileSettingsForVoice:(id)voice;
+ (id)remapLanguageCode:(id)code;
+ (void)test_actionStartTap:(id /* block */)tap;
+ (void)test_setUnitTestMode:(BOOL)mode;
+ (void)test_setAvailableVoices:(id)voices;

/* instance methods */
- (id)init;
- (void)_updateAuxiliarySession;
- (void)handleAudioSessionObservers:(BOOL)observers;
- (void)dealloc;
- (BOOL)_enqueueSelectorOnSpeechThread:(SEL)thread object:(id)object waitUntilDone:(BOOL)done;
- (void)tearDown;
- (void)_tearDown;
- (void)_handleMediaServicesWereLost:(id)lost;
- (void)_handleMediaServicesWereReset:(id)reset;
- (void)_resetInterruptionTracking;
- (void)_didEndInterruption;
- (void)_didBeginInterruption;
- (void)_handleAudioInterruption:(id)interruption;
- (void)_updateAudioSessionProperties;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)_initialize;
- (void)_updateUserSubstitutions;
- (void)_speechJobFinished:(BOOL)finished action:(id)action;
- (id)externalVoiceIdentifierUsedForLanguage:(id)language;
- (id)voiceIdentifierUsedForLanguage:(id)language;
- (id)_phonemeSubstitutionsForAction:(id)action;
- (void)_startNextSpeechJob;
- (void)_processAudioBufferCallback:(id)callback;
- (void)_dispatchSpeechAction:(id)action;
- (void)_clearSpeechQueue;
- (void)clearSpeechQueue;
- (void)dispatchSpeechAction:(id)action;
- (void)_pauseSpeaking:(id)speaking;
- (void)pauseSpeaking:(long long)speaking;
- (void)_continueSpeaking;
- (void)continueSpeaking;
- (void)_stopSpeaking:(id)speaking;
- (void)stopSpeaking:(long long)speaking;
- (void)stopSpeaking;
- (void)_isSpeaking:(id)speaking;
- (void)_processDidStartCallback:(id)callback;
- (void)speechSynthesizer:(id)synthesizer didStartSpeakingRequest:(id)request;
- (void)__speechJobFinished:(id)finished;
- (void)speechSynthesizer:(id)synthesizer didFinishSpeakingRequest:(id)request successfully:(BOOL)successfully withError:(id)error;
- (void)speechSynthesizer:(id)synthesizer didPauseSpeakingRequest:(id)request;
- (void)_processDidPauseCallback:(id)callback;
- (void)speechSynthesizer:(id)synthesizer didContinueSpeakingRequest:(id)request;
- (void)_processDidContinueCallback:(id)callback;
- (void)speechSynthesizer:(id)synthesizer didEncounterMarker:(id)marker forRequest:(id)request;
- (void)_processDidEncounterMarker:(id)marker;
- (void)_processWillSpeechRange:(id)range;
@end

#endif /* TTSSpeechManager_h */
