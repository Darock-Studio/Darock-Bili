//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 583.1.13.0.0
//
#ifndef TTSSpeechSynthesizer_h
#define TTSSpeechSynthesizer_h
@import Foundation;

#include "TTSSpeechRequestDelegate-Protocol.h"
#include "TTSSpeechSynthesizerDelegate-Protocol.h"

@class NSArray, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue, OS_voucher;

@interface TTSSpeechSynthesizer : NSObject<TTSSpeechRequestDelegate> {
  /* instance variables */
  long long _footprint;
  BOOL _useSharedSession;
  BOOL _audioSessionIDIsValid;
  NSMutableDictionary *_channels;
  NSObject<OS_dispatch_queue> *_queue;
  NSMutableArray *_speechRequests;
  struct { unsigned int x :1 delegateStartWithRequest; unsigned int x :1 delegateFinishWithRequest; unsigned int x :1 delegateFinishWithPhonemesSpokenWithRequest; unsigned int x :1 delegatePauseWithRequest; unsigned int x :1 delegateContinueWithRequest; unsigned int x :1 delegateWillSpeakWithRequest; unsigned int x :1 delegateDidEncounterMarkerWithRequest; unsigned int x :1 willUseInput; } _synthesizerFlags;
  unsigned long long _synthesizerInstanceID;
  NSMutableDictionary *_testingLastRuleConversion;
}

@property (retain, nonatomic) NSObject<OS_voucher> *voucher;
@property (weak, @dynamic, nonatomic) NSObject<TTSSpeechSynthesizerDelegate> *delegate;
@property (retain, nonatomic) NSString *speechSource;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *delegateTargetQueue;
@property (nonatomic) float rate;
@property (nonatomic) float pitch;
@property (nonatomic) float volume;
@property (retain, nonatomic) NSString *voiceIdentifier;
@property (retain, nonatomic) NSString *bundleIdentifier;
@property (readonly, nonatomic) NSString *resolvedVoiceIdentifier;
@property (nonatomic) unsigned long long requestClientIdentifier;
@property (nonatomic) void * speakingRequestClientContext;
@property (nonatomic) BOOL supportsAccurateWordCallbacks;
@property (nonatomic) BOOL skipLuthorRules;
@property (nonatomic) unsigned int audioQueueFlags;
@property (readonly, nonatomic) unsigned int audioSessionID;
@property (copy, nonatomic) NSArray *userSubstitutions;
@property (copy, nonatomic) NSArray *phonemeSubstitutions;
@property (copy, nonatomic) id /* block */ audioBufferCallback;
@property (retain, nonatomic) NSArray *outputChannels;
@property (nonatomic) BOOL ignoreSubstitutions;
@property (nonatomic) BOOL synthesizeSilently;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)initialize;
+ (void)_initializeServers;
+ (BOOL)isSystemVoice:(id)voice;
+ (id)unavailableVoiceIdentifiers;
+ (id)voiceForIdentifier:(id)identifier;
+ (BOOL)employSpeechMarkupForType:(long long)type identifier:(id)identifier withLanguage:(id)language;
+ (id)genericMarkMarkupForIdentifier:(id)identifier name:(id)name;
+ (id)combinedProsodyMarkupForIdentifier:(id)identifier string:(id)string rate:(id)rate pitch:(id)pitch volume:(id)volume;
+ (id)speechMarkupStringForType:(long long)type forIdentifier:(id)identifier string:(id)string;
+ (void)testingSetAllVoices:(id)voices;
+ (void)setVoiceAssetsForTesting:(id)testing;
+ (id)voiceAssetsForTesting;
+ (id)synthesizerForSynthesizerID:(unsigned long long)id;
+ (id)voiceAccessQueue;
+ (id)availableLanguageCodes;
+ (id)remapVoiceIdentifier:(id)identifier;
+ (id)audioFileSettingsForVoice:(id)voice;
+ (id)_speechVoiceForIdentifier:(id)identifier language:(id)language footprint:(long long)footprint;
+ (id)supportedIPAPhonemeLanguages;

/* instance methods */
- (id)testingLastRuleConversion;
- (void)testingSetLastRuleConversion:(id)conversion replacement:(id)replacement;
- (id)init;
- (void)_mediaServicesDied;
- (void)dealloc;
- (void)_setDelegate:(id)delegate;
- (id)resolvedVoiceIdentifierForLanguageCode:(id)code;
- (id)_preprocessText:(id)text languageCode:(id)code;
- (BOOL)_substitutionLanguageMatchesSpecialCase:(id)case withLanguage:(id)language;
- (BOOL)_skipSubstition:(id)substition language:(id)language bundleIdentifier:(id)identifier voice:(id)voice;
- (void)_processUserSubstitutionsToText:(id)text request:(id)request bundleIdentifier:(id)identifier voice:(id)voice;
- (id)_determineSubstitution:(id)substitution speechString:(id)string wordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range request:(id)request;
- (unsigned long long)synthesizerInstanceID;
- (id)_resolveVoiceForLanguage:(id)language;
- (id)_makeRequestForVoice:(id)voice andLanguageCode:(id)code;
- (BOOL)startSpeakingString:(id)string toURL:(id)url withLanguageCode:(id)code error:(id *)error;
- (BOOL)startSpeakingString:(id)string toURL:(id)url withLanguageCode:(id)code request:(id *)request error:(id *)error;
- (BOOL)_startSpeakingString:(id)string orSSMLString:(id)ssmlstring withLanguageCode:(id)code jobId:(id)id request:(id *)request error:(id *)error;
- (BOOL)_stopSpeakingRequest:(id)request atNextBoundary:(long long)boundary synchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)_pauseSpeakingRequest:(id)request atNextBoundary:(long long)boundary synchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)_continueSpeakingRequest:(id)request withError:(id *)error;
- (BOOL)startSpeakingString:(id)string error:(id *)error;
- (BOOL)startSpeakingString:(id)string withLanguageCode:(id)code error:(id *)error;
- (BOOL)stopSpeakingAtNextBoundary:(long long)boundary error:(id *)error;
- (BOOL)stopSpeakingAtNextBoundary:(long long)boundary synchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)pauseSpeakingAtNextBoundary:(long long)boundary error:(id *)error;
- (BOOL)pauseSpeakingAtNextBoundary:(long long)boundary synchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)continueSpeakingWithError:(id *)error;
- (BOOL)isSpeaking;
- (id)speechString;
- (float)minimumRate;
- (float)maximumRate;
- (void)setFootprint:(long long)footprint;
- (long long)footprint;
- (void)useSpecificAudioSession:(unsigned int)session;
- (void)useAudioQueueFlags:(unsigned int)flags;
- (BOOL)startSpeakingString:(id)string request:(id *)request error:(id *)error;
- (BOOL)startSpeakingString:(id)string withLanguageCode:(id)code jobIdentifier:(id)identifier request:(id *)request error:(id *)error;
- (BOOL)startSpeakingString:(id)string withLanguageCode:(id)code request:(id *)request error:(id *)error;
- (BOOL)startSpeakingSSML:(id)ssml withLanguageCode:(id)code request:(id *)request error:(id *)error;
- (BOOL)startSpeakingSSML:(id)ssml withLanguageCode:(id)code jobIdentifier:(id)identifier request:(id *)request error:(id *)error;
- (BOOL)stopSpeakingRequest:(id)request atNextBoundary:(long long)boundary error:(id *)error;
- (BOOL)stopSpeakingRequest:(id)request atNextBoundary:(long long)boundary synchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)pauseSpeakingRequest:(id)request atNextBoundary:(long long)boundary error:(id *)error;
- (BOOL)pauseSpeakingRequest:(id)request atNextBoundary:(long long)boundary synchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)continueSpeakingRequest:(id)request withError:(id *)error;
- (void)speechRequestDidStart:(id)start forService:(id)service;
- (void)speechRequestDidPause:(id)pause forService:(id)service;
- (void)speechRequestDidContinue:(id)continue forService:(id)service;
- (void)speechRequest:(id)request didStopWithSuccess:(BOOL)success phonemesSpoken:(id)spoken forService:(id)service error:(id)error;
- (void)speechRequest:(id)request withMarker:(id)marker didStartForService:(id)service;
- (id)_processMarker:(id)marker forRequest:(id)request;
@end

#endif /* TTSSpeechSynthesizer_h */
