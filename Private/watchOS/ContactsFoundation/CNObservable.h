//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1235.0.0.0.0
//
#ifndef CNObservable_h
#define CNObservable_h
@import Foundation;

#include "CNObservable-Protocol.h"

@class NSString;

@interface CNObservable : NSObject<CNObservable> {
  /* instance variables */
  NSString *_pipelineDescription;
}

@property (readonly, nonatomic) NSString *debugPipelineDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)observableForKeyPath:(id)path ofObject:(id)object withOptions:(unsigned long long)options;
+ (id)observableOnDarwinNotificationCenterWithName:(id)name;
+ (id)observableOnDefaultNotificationCenterWithName:(id)name object:(id)object;
+ (id)observableOnNotificationCenter:(id)center withName:(id)name object:(id)object;
+ (id)scannerResultsInString:(id)string;
+ (id)asyncScannerResultsInString:(id)string;
+ (id)observableWithScannerResultsInString:(id)string;
+ (id)observableWithScannerResultsOfType:(unsigned long long)type inString:(id)string;
+ (id)binderTypeForResultType:(unsigned long long)type;
+ (id)observableWithEmailAddressesInString:(id)string;
+ (id)observableWithAbsoluteTimestamps:(id)timestamps schedulerProvider:(id)provider;
+ (id)observableWithRelativeTimestamps:(id)timestamps schedulerProvider:(id)provider;
+ (void)sendNextTimestampFromQueue:(id)queue toObserver:(id)observer untilCanceled:(id)canceled scheduler:(id)scheduler;
+ (id)observableWithInitialState:(id)state condition:(id /* block */)condition nextState:(id /* block */)state resultSelector:(id /* block */)selector;
+ (id)observableWithInitialState:(id)state condition:(id /* block */)condition nextState:(id /* block */)state resultSelector:(id /* block */)selector scheduler:(id)scheduler;
+ (id)observableWithInitialState:(id)state condition:(id /* block */)condition nextState:(id /* block */)state resultSelector:(id /* block */)selector delay:(id /* block */)delay scheduler:(id)scheduler;
+ (id)os_log;
+ (id)os_log_protocol;
+ (id)observableWithBlock:(id /* block */)block;
+ (id)observableWithResult:(id)result;
+ (id)observableWithFuture:(id)future;
+ (id)observableWithFuture:(id)future schedulerProvider:(id)provider;
+ (id)observableWithFutures:(id)futures;
+ (id)observableWithFutures:(id)futures schedulerProvider:(id)provider;
+ (id)observableWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
+ (id)observableWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range scheduler:(id)scheduler;
+ (id)observableWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range interval:(double)interval scheduler:(id)scheduler;
+ (id)observableWithResults:(id)results;
+ (id)observableWithResults:(id)results scheduler:(id)scheduler;
+ (id)observableWithResults:(id)results interval:(double)interval scheduler:(id)scheduler;
+ (id)observableWithError:(id)error;
+ (id)observableWithTimeInterval:(double)interval scheduler:(id)scheduler;
+ (id)neverObservable;
+ (id)emptyObservable;
+ (id)timerWithDelay:(double)delay;
+ (id)timerWithDelay:(double)delay scheduler:(id)scheduler;
+ (id)amb:(id)amb;
+ (id)combineLatest:(id)latest;
+ (id)combineLatest:(id)latest schedulerProvider:(id)provider;
+ (id)combineLatest:(id)latest resultScheduler:(id)scheduler schedulerProvider:(id)provider;
+ (id)concatenate:(id)concatenate;
+ (id)forkJoin:(id)join scheduler:(id)scheduler;
+ (id)merge:(id)merge;
+ (id)merge:(id)merge schedulerProvider:(id)provider;
+ (id)progressiveForkJoin:(id)join scheduler:(id)scheduler;

/* instance methods */
- (id)pipelineDescription:(id /* block */)description;
- (id)pipelineDescriptionWithOperation:(id /* block */)operation onObservable:(id)observable;
- (id)subscribeOn:(id)on;
- (id)observeOn:(id)on;
- (id)allObjects:(id *)objects;
- (id)ambWith:(id)with;
- (id)any:(id /* block */)any;
- (id)buffer:(unsigned long long)buffer;
- (id)buffer:(unsigned long long)buffer interval:(double)interval;
- (id)buffer:(unsigned long long)buffer interval:(double)interval scheduler:(id)scheduler;
- (id)bufferWithInterval:(double)interval;
- (id)bufferWithInterval:(double)interval scheduler:(id)scheduler;
- (id)concatMap:(id /* block */)map;
- (id)concatMap:(id /* block */)map schedulerProvider:(id)provider;
- (id)delay:(double)delay scheduler:(id)scheduler;
- (id)delaySubscription:(double)subscription scheduler:(id)scheduler;
- (id)dematerialize;
- (id)distinct;
- (id)distinctUntilChanged;
- (id)doOnCancel:(id /* block */)cancel;
- (id)doOnCompletion:(id /* block */)completion;
- (id)doOnError:(id /* block */)error;
- (id)doOnNext:(id /* block */)next;
- (id)doOnSubscribe:(id /* block */)subscribe;
- (id)doOnTerminate:(id /* block */)terminate;
- (void)enumerateObjectsUsingBlock:(id /* block */)block;
- (id)filter:(id /* block */)filter;
- (id)flatMap:(id /* block */)map;
- (id)flatMap:(id /* block */)map schedulerProvider:(id)provider;
- (id)ignoreElements;
- (id)map:(id /* block */)map;
- (id)materialize;
- (id)onEmpty:(id)empty;
- (id)onError:(id)error;
- (id)onErrorHandler:(id /* block */)handler;
- (id)publish;
- (id)sample:(double)sample;
- (id)sample:(double)sample scheduler:(id)scheduler;
- (id)sampleWithObservable:(id)observable;
- (id)scan:(id /* block */)scan;
- (id)scan:(id /* block */)scan seed:(id)seed;
- (id)skip:(unsigned long long)skip;
- (id)skipLast:(unsigned long long)last;
- (id)skipUntil:(id)until;
- (id)startWith:(id)with;
- (id)startWith:(id)with scheduler:(id)scheduler;
- (id)switch;
- (id)switchWithSchedulerProvider:(id)provider;
- (id)switchMap:(id /* block */)map;
- (id)switchMap:(id /* block */)map schedulerProvider:(id)provider;
- (id)take:(unsigned long long)take;
- (id)takeLast:(unsigned long long)last;
- (id)takeUntil:(id)until;
- (id)throttle:(double)throttle schedulerProvider:(id)provider;
- (id)throttle:(double)throttle options:(unsigned long long)options schedulerProvider:(id)provider;
- (id)throttleFirst:(double)first scheduler:(id)scheduler;
- (id)throttleFirstAndLast:(double)last schedulerProvider:(id)provider;
- (id)timeInterval;
- (id)timeIntervalWithScheduler:(id)scheduler;
- (id)timeoutAfterDelay:(double)delay alternateObservable:(id)observable schedule:(id)schedule;
- (id)timestampWithScheduler:(id)scheduler;
- (id)toArray;
- (id)using:(id /* block */)using;
- (id)subscribe:(id)subscribe;
@end

#endif /* CNObservable_h */
