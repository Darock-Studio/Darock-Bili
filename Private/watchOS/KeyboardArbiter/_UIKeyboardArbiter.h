//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UIKeyboardArbiter_h
#define _UIKeyboardArbiter_h
@import Foundation;

#include "NSXPCListenerDelegate-Protocol.h"
#include "_UIKeyboardArbiterAdvisor-Protocol.h"
#include "_UIKeyboardArbiterClientHandle.h"

@class FBSScene, FBSSceneIdentityToken, FBSSceneLayer, FBSWorkspace, NSMutableArray, NSMutableOrderedSet, NSString, NSXPCListener, RBSProcessMonitor, _UIKeyboardChangedInformation, _UIKeyboardUIInformation;
@protocol OS_dispatch_queue, _UIKeyboardArbiterLink, _UIKeyboardArbiterOmniscientDelegate, _UIKeyboardArbiterSceneDelegate;

@interface _UIKeyboardArbiter : NSObject<NSXPCListenerDelegate, _UIKeyboardArbiterAdvisor> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  NSXPCListener *_listener;
  NSMutableArray *_clients;
  _UIKeyboardArbiterClientHandle *_newlyConnectedActiveHandle;
  _UIKeyboardArbiterClientHandle *_previouslyActiveHandle;
  int _currentFocusPID;
  FBSSceneIdentityToken *_currentFocusSceneIdentity;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _pendingFocusLock;
  unsigned long long _pendingFocusLock_generation;
  int _pendingFocusLock_PID;
  FBSSceneIdentityToken *_pendingFocusLock_sceneIdentity;
  _UIKeyboardArbiterClientHandle *_lastActivatedHandle;
  NSMutableOrderedSet *_recentlyActiveSceneIdentities;
  FBSWorkspace *_workspace;
  FBSScene *_scene;
  int _updateCounter;
  RBSProcessMonitor *_processMonitor;
  long long _lastEventSource;
  _UIKeyboardArbiterClientHandle *_disablingHandle;
  _UIKeyboardUIInformation *_lastUIInformation;
  NSString *_pendingBundleIdentifier;
  id /* block */ _pendingNotifyKeyboardChanged;
  int _pidOnDeviceLocked;
}

@property (retain, nonatomic) _UIKeyboardChangedInformation *lastUpdate;
@property (readonly, weak) _UIKeyboardArbiterClientHandle *activeInputDestinationHandle;
@property (readonly, weak) _UIKeyboardArbiterClientHandle *focusRequestedHandle;
@property (readonly) FBSSceneLayer *sceneLayer;
@property (weak, nonatomic) _UIKeyboardArbiterClientHandle *keyboardUIHandle;
@property (nonatomic) unsigned long long keyboardScenePresentationMode;
@property (readonly, nonatomic) NSObject<_UIKeyboardArbiterLink> *sceneLink;
@property (weak, nonatomic) NSObject<_UIKeyboardArbiterOmniscientDelegate> *omniscientDelegate;
@property (weak, nonatomic) NSObject<_UIKeyboardArbiterSceneDelegate> *sceneDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) int presentingKeyboardProcessIdentifier;

/* class methods */
+ (void)configureEncodedClassesForXPCConnection:(id)xpcconnection;
+ (BOOL)unitTestEnvironment;

/* instance methods */
- (id)initWithLink:(id)link;
- (void)resume;
- (void)dealloc;
- (id)_descriptionWithScene:(BOOL)scene;
- (void)retrieveDebugInformationWithCompletion:(id /* block */)completion;
- (void)captureStateForDebug;
- (void)retrieveClientDebugInformationWithCompletion:(id /* block */)completion;
- (void)attemptConnection;
- (void)runOperations:(id /* block */)operations onHandler:(id)handler fromFunction:(const char *)function;
- (void)reevaluateHardwareKeyboardClientStealingKeyboardOnSuccess:(BOOL)success;
- (void)scheduleWindowTimeout;
- (id)hostForHandle:(id)handle hosts:(id)hosts;
- (id)hostBundleIdentifierForHandle:(id)handle hosts:(id)hosts;
- (void)_cullRecentlyActiveSceneIdentities;
- (void)_trackRecentlyActiveArbiterHandle:(id)handle;
- (void)updateKeyboardUIStatus:(id)uistatus fromHandler:(id)handler;
- (void)updateKeyboardStatus:(id)status fromHandler:(id)handler;
- (void)completeKeyboardStatusChangedFromHandler:(id)handler;
- (void)_findForHandle:(id)handle deepestHandleHandler:(id /* block */)handler checklist:(id)checklist;
- (void)_findForHandle:(id)handle deepestHandleHandler:(id /* block */)handler;
- (void)notifyHeightUpdated:(id)updated;
- (void)newClientConnected:(id)connected withExpectedState:(id)state onConnected:(id /* block */)connected;
- (id)lastActivatedHandle;
- (BOOL)activateHandle:(id)handle;
- (void)checkHostingState;
- (BOOL)deactivateHandle:(id)handle;
- (void)handleUnexpectedDeallocForHandler:(id)handler;
- (id)focusContext;
- (void)updateSceneClientSettings:(id)settings;
- (void)prewarmFocusContext;
- (id)remoteFocusContext;
- (void)updateKeyboardSceneSettings;
- (void)updateSuppression:(BOOL)suppression ofPID:(id)pid active:(BOOL)active;
- (void)setSuppressionCount:(int)count ofPIDs:(id)pids;
- (void)updateSuppression:(BOOL)suppression ofPIDs:(id)pids active:(BOOL)active;
- (void)reevaluateSceneClientSettings;
- (void)activateClients;
- (id)handlerForPID:(int)pid;
- (id)handlerForBundleID:(id)id;
- (id)handlerForToken:(id)token;
- (void)updateInterestedBundleIDs;
- (void)processWithPID:(int)pid foreground:(BOOL)foreground suspended:(BOOL)suspended;
- (void)transition:(id)transition eventStage:(unsigned long long)stage withInfo:(id)info fromHandler:(id)handler;
- (void)handlerRequestedFocus:(id)focus shouldStealKeyboard:(BOOL)keyboard;
- (void)handlerRequestedForcedClientSceneIdentityUpdate:(id)update;
- (void)setKeyboardTotalDisable:(BOOL)disable withFence:(id)fence fromHandler:(id)handler completionHandler:(id /* block */)handler;
- (void)signalEventSourceChanged:(long long)changed fromHandler:(id)handler completionHandler:(id /* block */)handler;
- (id)_activeHandleForFocusEvaluation;
- (id)_currentFocusedHandle;
- (id)preferredSceneIdentityForKeyboardFocusWithChangeInformation:(id)information;
- (void)keyboardFocusDidChangeWithoutAdvisorInputToPid:(int)pid sceneIdentity:(id)identity;
- (void)_arbiterQueue_keyboardFocusDidChangeWithoutAdvisorInputForGeneration:(unsigned long long)generation pid:(int)pid sceneIdentity:(id)identity;
- (void)_applyPendingSceneFocusUpdateFromOmniscientDelegateForGeneration:(unsigned long long)generation;
- (void)_updateCurrentKeyboardFocusToPID:(int)pid sceneIdentity:(id)identity;
- (void)reevaluateFocusedSceneIdentityForKeyboardFocusWithChangeInformation:(id)information stealingKeyboardOnSuccess:(BOOL)success;
- (BOOL)listener:(id)listener shouldAcceptNewConnection:(id)connection;
@end

#endif /* _UIKeyboardArbiter_h */
