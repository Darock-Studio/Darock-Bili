//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 64.0.0.0.0
//
#ifndef DDSManager_h
#define DDSManager_h
@import Foundation;

#include "DDSAssetObserving-Protocol.h"
#include "DDSAssetObservingDelegate-Protocol.h"
#include "DDSAssetProviding-Protocol.h"
#include "DDSAssetProvidingDelegate-Protocol.h"
#include "DDSAssetTracking-Protocol.h"
#include "DDSAssetTrackingDelegate-Protocol.h"
#include "DDSMAAutoAssetManager.h"
#include "DDSManagerDataSource-Protocol.h"
#include "DDSManaging-Protocol.h"
#include "DDSManagingDelegate-Protocol.h"
#include "DDSRemoteSyncStateDelegate-Protocol.h"

@class NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface DDSManager : NSObject<DDSAssetProvidingDelegate, DDSAssetTrackingDelegate, DDSAssetObservingDelegate, DDSManagingDelegate, DDSRemoteSyncStateDelegate, DDSManaging> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (readonly, nonatomic) NSObject<DDSAssetTracking> *tracker;
@property (readonly, nonatomic) NSObject<DDSAssetProviding> *provider;
@property (readonly, nonatomic) NSObject<DDSAssetObserving> *assetObserver;
@property (readonly, nonatomic) NSMutableDictionary *remoteSyncStateByAssetType;
@property (readonly, nonatomic) NSMutableDictionary *pendingAssertionsToUpdateByAssetType;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *workQueue;
@property (readonly, nonatomic) NSObject<DDSManagerDataSource> *dataSource;
@property (readonly, nonatomic) DDSMAAutoAssetManager *autoAssetManager;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak) NSObject<DDSManagingDelegate> *delegate;
@property (readonly, copy) NSString *xpcServiceName;

/* class methods */
+ (id)errorForDDSAssetDownloadUIErrorCode:(long long)code;
+ (id)updateCatalogMetadataKeyForAssetType:(id)type;

/* instance methods */
- (id)initWithProvider:(id)provider tracker:(id)tracker dataSource:(id)source autoAssetManager:(id)manager;
- (id)initWithProvider:(id)provider tracker:(id)tracker;
- (id)initWithProvider:(id)provider tracker:(id)tracker dataSource:(id)source;
- (void)beginUpdateCycleForAssetType:(id)type forced:(BOOL)forced discretionaryDownload:(BOOL)download;
- (void)downloadAutoAssetForAssertions:(id)assertions;
- (void)addAssertionForQuery:(id)query policy:(id)policy assertionID:(id)id clientID:(id)id;
- (void)removeAssertionWithID:(id)id;
- (void)assertionIDsForClientID:(id)id reply:(id /* block */)reply;
- (void)triggerDump;
- (void)triggerUpdate;
- (void)handleNewAssertions:(id)assertions;
- (void)handleAddedNewDescriptor:(id)descriptor forAssertion:(id)assertion;
- (void)handleRemovedAssertions:(id)assertions;
- (void)didChangeDownloadState:(unsigned long long)state forAsset:(id)asset;
- (void)didCompleteDownloadForAssertion:(id)assertion error:(id)error;
- (void)didCompleteDownloadForAssertions:(id)assertions error:(id)error;
- (void)didBeginUpdateCatalog;
- (void)didUpdateCatalogWithAssetType:(id)type error:(id)error;
- (void)createRemoteSyncStateForAssetType:(id)type;
- (void)remoteSyncStateRequestsUpdateForAssetType:(id)type;
- (void)remoteSyncStateRequestsRetryForAssetType:(id)type;
- (void)remoteSyncStateRequestsResetForAssetType:(id)type;
- (void)didStartUpdateCycleForAssetType:(id)type;
- (void)willRetryUpdateCycle;
- (void)didEndUpdateCycleWithAssetType:(id)type error:(id)error;
- (void)serverDidUpdateAssetsWithType:(id)type;
- (void)deleteV1AssetsIfNecessary;
- (long long)assetUpdateStatusForAssertion:(id)assertion;
- (void)updateCatalogForAssetType:(id)type withCompletion:(id /* block */)completion;
- (void)setCatalogUpdateDate:(id)date forAssetType:(id)type;
- (id)catalogUpdateDateForAssetType:(id)type;
- (void)fetchAssetUpdateStatusForQuery:(id)query callback:(id /* block */)callback;
- (void)updateAssetForQuery:(id)query callback:(id /* block */)callback;
@end

#endif /* DDSManager_h */
