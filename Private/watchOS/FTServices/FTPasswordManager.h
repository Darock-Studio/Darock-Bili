//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1814.300.81.4.2
//
#ifndef FTPasswordManager_h
#define FTPasswordManager_h
@import Foundation;

#include "ACMonitoredAccountStoreDelegateProtocol-Protocol.h"
#include "FTPasswordManager-Protocol.h"
#include "_FTPasswordManagerCachedAuthTokenInfo.h"

@class ACAccountStore, IMUserNotificationCenter, NSMutableSet, NSString;

@interface FTPasswordManager : NSObject<ACMonitoredAccountStoreDelegateProtocol, FTPasswordManager> {
  /* instance variables */
  NSMutableSet *_runningQueries;
  ACAccountStore *_accountStore;
  IMUserNotificationCenter *_userNotificationCenter;
  _FTPasswordManagerCachedAuthTokenInfo *_cachedAuthTokenInfo;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedInstance;
+ (id)_loginUserNotificationForService:(id)service user:(id)user isForBadPassword:(BOOL)password showForgetPassword:(BOOL)password shouldRememberPassword:(BOOL)password;

/* instance methods */
- (id)init;
- (id)initWithUserNotificationCenter:(id)center;
- (BOOL)supportsAuthTokenRequests;
- (void)_setKeychainPassword:(id)password forUsername:(id)username service:(id)service;
- (id)_keychainPasswordForUsername:(id)username service:(id)service;
- (void)_setKeychainAuthToken:(id)token forUsername:(id)username service:(id)service;
- (id)_keychainAuthTokenForUsername:(id)username service:(id)service;
- (id)_findAccountOfType:(id)type InStore:(id)store withCriteria:(id /* block */)criteria;
- (id)_findIDSAccountsInStore:(id)store withCriteria:(id /* block */)criteria;
- (id)_findIDSAccountInStore:(id)store withCriteria:(id /* block */)criteria;
- (id)_findGameCenterAccountInStore:(id)store withCriteria:(id /* block */)criteria;
- (id)_accountWithUsername:(id)username inStore:(id)store;
- (id)_gameCenterAccountWithUsername:(id)username;
- (id)gameCenterPropertiesFromAccountWithUsername:(id)username;
- (id)_accountWithUsernameAlias:(id)alias inStore:(id)store;
- (id)_profileIDForUsername:(id)username inStore:(id)store;
- (id)_accountWithProfileID:(id)id username:(id)username inStore:(id)store;
- (id)_accountWithProfileIDMatchingUser:(id)user inStore:(id)store;
- (id)_accountBasedOnProfileID:(id)id orUsername:(id)username inStore:(id)store;
- (void)updatePreviousUsername:(id)username toNewUsername:(id)username;
- (BOOL)_shouldForceSilentOnlyAuthForUsername:(id)username serviceIdentifier:(id)identifier;
- (BOOL)_usernameHasCorrespondingIdMSAccount:(id)msaccount;
- (void)performCleanUpWithCompletion:(id /* block */)completion;
- (void)cleanUpAccountsWithUsername:(id)username orProfileID:(id)id basedOnInUseUsernames:(id)usernames profileIDs:(id)ids completionBlock:(id /* block */)block;
- (void)cleanUpAccountsBasedOnInUseUsernamesBlock:(id /* block */)block profileIDBlock:(id /* block */)idblock completionBlock:(id /* block */)block;
- (void)fetchPasswordForProfileID:(id)id username:(id)username service:(id)service outRequestID:(id *)id completionBlock:(id /* block */)block;
- (void)fetchAuthTokenForProfileID:(id)id username:(id)username service:(id)service outRequestID:(id *)id completionBlock:(id /* block */)block;
- (id)_credentialForAccount:(id)account;
- (void)requestPasswordForUsername:(id)username service:(id)service badPassword:(BOOL)password showForgotPassword:(BOOL)password shouldRememberPassword:(BOOL)password outRequestID:(id *)id completionBlock:(id /* block */)block;
- (void)requestAuthTokenForProfileID:(id)id username:(id)username service:(id)service badPassword:(BOOL)password showForgotPassword:(BOOL)password outRequestID:(id *)id completionBlock:(id /* block */)block;
- (void)requestAuthTokenForProfileID:(id)id username:(id)username service:(id)service badPassword:(BOOL)password showForgotPassword:(BOOL)password failIfNotSilent:(BOOL)silent outRequestID:(id *)id completionBlock:(id /* block */)block;
- (void)requestAuthTokenForProfileID:(id)id username:(id)username service:(id)service badPassword:(BOOL)password showForgotPassword:(BOOL)password forceRenewal:(BOOL)renewal failIfNotSilent:(BOOL)silent outRequestID:(id *)id completionBlock:(id /* block */)block;
- (void)_renewCredentialsIfPossibleForAccount:(id)account username:(id)username inServiceIdentifier:(id)identifier originalInServiceIdentifier:(id)identifier serviceName:(id)name failIfNotSilent:(BOOL)silent renewHandler:(id /* block */)handler shortCircuitCompletionBlock:(id /* block */)block;
- (void)setPasswordForProfileID:(id)id username:(id)username service:(id)service password:(id)password outRequestID:(id *)id completionBlock:(id /* block */)block;
- (void)setAuthTokenForProfileID:(id)id username:(id)username service:(id)service authToken:(id)token selfHandle:(id)handle outRequestID:(id *)id completionBlock:(id /* block */)block;
- (BOOL)isAuthTokenReceiptTime:(double)time withinGracePeriod:(double)period;
- (double)authTokenGracePeriod;
- (void)removeAuthTokenAllowingGracePeriodForProfileID:(id)id username:(id)username;
- (void)setAuthTokenForProfileID:(id)id username:(id)username service:(id)service authToken:(id)token selfHandle:(id)handle accountStatus:(id)status outRequestID:(id *)id completionBlock:(id /* block */)block;
- (void)_updateStatus:(id)status onAccount:(id)account;
- (void)setAccountStatus:(id)status forProfileID:(id)id username:(id)username service:(id)service;
- (void)setHandlesForProfileID:(id)id username:(id)username service:(id)service handles:(id)handles;
- (id)_accountOptionsDictForRenewCredentialsForService:(id)service username:(id)username shouldFailIfNotSilent:(BOOL)silent;
- (void)cancelRequestID:(id)id serviceIdentifier:(id)identifier;
- (id)acAccountWithProfileID:(id)id username:(id)username accountStore:(id)store;
- (id)profileIDForACAccount:(id)acaccount;
- (void)accountWasRemoved:(id)removed;
- (void)accountCredentialChanged:(id)changed;
@end

#endif /* FTPasswordManager_h */
