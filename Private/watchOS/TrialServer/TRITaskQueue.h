//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 396.4.0.0.0
//
#ifndef TRITaskQueue_h
#define TRITaskQueue_h
@import Foundation;

#include "TRIServerContext.h"
#include "TRITaskQueueStateProviding-Protocol.h"
#include "TRITaskQueuing-Protocol.h"

@class TRIClient, _PASLock;
@protocol OS_dispatch_group, OS_dispatch_queue;

@interface TRITaskQueue : NSObject<TRITaskQueuing, TRITaskQueueStateProviding> {
  /* instance variables */
  _PASLock *_lock;
  TRIServerContext *_serverContext;
  NSObject<OS_dispatch_queue> *_opQueue;
  NSObject<OS_dispatch_group> *_opGroup;
  NSObject<OS_dispatch_queue> *_asyncQueue;
  TRIClient *_client;
}

/* instance methods */
- (id)init;
- (id)initWithServerContext:(id)context operationQueue:(id)queue operationGroup:(id)group asyncQueue:(id)queue;
- (void)registerFinalizeBlock:(id /* block */)block;
- (BOOL)finishXPCActivitiesWithGuardedData:(id)data;
- (void)_scheduleFutureActivitiesWithGuardedData:(id)data;
- (id)_earliestStartDateFromTaskList:(id)list;
- (void)_evaluateRunConditionsWithGuardedData:(id)data shouldContinueWork:(BOOL *)work;
- (void)resumeWithXPCActivityDescriptor:(id)descriptor executeWhenSuspended:(id /* block */)suspended;
- (void)_finalizeTask:(id)task withId:(id)id runResult:(id)result;
- (id)_runTask:(id)task;
- (id)_createOperationWithTask:(id)task withId:(id)id dependencies:(id)dependencies taskMap:(id)map xpcActivities:(id)activities;
- (void)_startImmediateTasksIfNotAlreadyQueued:(id)queued guardedData:(id)data didStartNewWork:(BOOL *)work;
- (BOOL)_removeTaskWithId:(id)id guardedData:(id)data persistRemove:(BOOL)remove;
- (struct { unsigned char x0; })addTask:(id)task options:(id)options;
- (struct { unsigned char x0; })addTask:(id)task options:(id)options taskId:(id *)id;
- (struct { unsigned char x0; })_addTask:(id)task options:(id)options taskId:(id *)id tryRunningEligibleTasksImmediately:(BOOL)immediately;
- (struct { unsigned char x0; })_addTask:(id)task options:(id)options guardedData:(id)data taskId:(id *)id tryRunningEligibleTasksImmediately:(BOOL)immediately;
- (void)_startRunnableTasksIfNecessaryWithGuardedData:(id)data;
- (BOOL)_isTaskWithId:(id)id inTaskGroup:(id)group runnableGivenCapabilities:(unsigned long long)capabilities atDate:(id)date cachedRunnability:(id)runnability visitedPath:(id)path topoSortedRunnable:(id)runnable allowOnlyRootTasksRunnable:(BOOL)runnable;
- (void)_partitionTaskGroup:(id)group byRunnabilityGivenCapabilities:(unsigned long long)capabilities runnableAtDate:(id)date topoSortedCurrentlyRunnable:(id *)runnable blocked:(id *)blocked allowOnlyRootTasksRunnable:(BOOL)runnable;
- (struct { unsigned char x0; })_addTask:(id)task options:(id)options guardedData:(id)data taskIdOut:(id *)out accumulatedNewTaskRecords:(id)records;
- (id)_addTask:(id)task withDependencies:(id)dependencies guardedData:(id)data;
- (BOOL)_cancelTaskWithId:(id)id guardedData:(id)data persistCancel:(BOOL)cancel;
- (BOOL)cancelTask:(id)task;
- (BOOL)_cancelDependenciesAndTaskWithId:(id)id guardedData:(id)data;
- (BOOL)_cancelTask:(id)task guardedData:(id)data;
- (BOOL)cancelTasksWithTag:(id)tag;
- (BOOL)cancelTasksWithTag:(id)tag excludingTasks:(id)tasks;
- (BOOL)enumerateTasksWithTagsIntersectingTagSet:(id)set block:(id /* block */)block;
- (unsigned long long)count;
- (BOOL)updateActivity:(id)activity withStartDate:(id)date;
- (void)_registerRetryActivityForDate:(id)date;
- (void)_registerTaskQueueActivityForDate:(id)date;
- (void)registerFinalizeBlockToRetryWithBlock:(id /* block */)block;
- (id)debugDescription;
- (id)activeActivityGrantingCapability:(unsigned long long)capability;
- (id)activeActivityDescriptorGrantingCapability:(unsigned long long)capability;
- (void)waitForAsyncQueue;
- (BOOL)ifNotPresentAddTask:(id)task;
@end

#endif /* TRITaskQueue_h */
