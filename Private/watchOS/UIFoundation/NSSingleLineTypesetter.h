//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 908.2.0.0.0
//
#ifndef NSSingleLineTypesetter_h
#define NSSingleLineTypesetter_h
@import Foundation;

#include "NSATSTypesetter.h"
#include "__NSImmutableTextStorage.h"

@interface NSSingleLineTypesetter : NSATSTypesetter {
  /* instance variables */
  double _lineWidth;
  struct _NSRange { unsigned long long location; unsigned long long length; } _currentBufferRange;
  unsigned short * _glyphs;
  long long * _props;
  unsigned long long * _charIndexes;
  struct { unsigned int x :1 _usesScreenFonts; unsigned int x :1 _syncAlignmentToDirection; unsigned int x :1 _mirrorsTextAlignment; unsigned int x :29 _reserved; } _slFlags;
  __NSImmutableTextStorage *_textStorage;
}

/* class methods */
+ (void)performWithSingleLineTypesetterContext:(id /* block */)context;
+ (void)initialize;
+ (BOOL)_validateAttributes:(id)attributes measuringOnly:(BOOL)only;

/* instance methods */
- (void)dealloc;
- (BOOL)_usesScreenFonts;
- (BOOL)_allowsEllipsisGlyphSubstitution;
- (BOOL)_mirrorsTextAlignment;
- (BOOL)synchronizesAlignmentToDirection;
- (id)_textContainerForAttachmentProtocol;
- (id)_textStorageForAttachmentProtocol;
- (id)init;
- (id)createRenderingContextForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range typesetterBehavior:(long long)behavior usesScreenFonts:(BOOL)fonts hasStrongRight:(BOOL)right syncDirection:(BOOL)direction mirrorsTextAlignment:(BOOL)alignment maximumWidth:(double)width;
- (id)createRenderingContextForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range typesetterBehavior:(long long)behavior usesScreenFonts:(BOOL)fonts hasStrongRight:(BOOL)right maximumWidth:(double)width;
- (void)setGlyphs:(const unsigned short *)glyphs properties:(const long long *)properties characterIndexes:(const unsigned long long *)indexes font:(id)font forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)insertGlyphs:(const unsigned int *)glyphs length:(unsigned long long)length forStartingGlyphAtIndex:(unsigned long long)index characterIndex:(unsigned long long)index;
- (void)setIntAttribute:(long long)attribute value:(long long)value forGlyphAtIndex:(unsigned long long)index;
- (unsigned long long)layoutOptions;
- (id)attributedString;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })characterRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range actualGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range glyphs:(unsigned short *)glyphs properties:(long long *)properties characterIndexes:(unsigned long long *)indexes bidiLevels:(char *)levels;
- (void)getLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect remainingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect forStartingGlyphAtIndex:(unsigned long long)index proposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineSpacing:(double)spacing paragraphSpacingBefore:(double)before paragraphSpacingAfter:(double)after;
- (id)substituteFontForFont:(id)font;
- (void)setLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect baselineOffset:(double)offset;
- (void)substituteGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withGlyphs:(unsigned int *)glyphs;
- (void)insertGlyph:(unsigned int)glyph atGlyphIndex:(unsigned long long)index characterIndex:(unsigned long long)index;
- (void)deleteGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setNotShownAttribute:(BOOL)attribute forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setDrawsOutsideLineFragment:(BOOL)fragment forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setLocation:(struct CGPoint { double x0; double x1; })location withAdvancements:(const double *)advancements forStartOfGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setAttachmentSize:(struct CGSize { double x0; double x1; })size forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setBidiLevels:(const char *)levels forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
@end

#endif /* NSSingleLineTypesetter_h */
