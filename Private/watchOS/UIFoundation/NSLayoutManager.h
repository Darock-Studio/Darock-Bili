//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 908.2.0.0.0
//
#ifndef NSLayoutManager_h
#define NSLayoutManager_h
@import Foundation;

#include "NSFont.h"
#include "NSGlyphGenerator.h"
#include "NSLayoutManagerDelegate-Protocol.h"
#include "NSParagraphArbitrator.h"
#include "NSRunStorage.h"
#include "NSSecureCoding-Protocol.h"
#include "NSStorage.h"
#include "NSTextContainer.h"
#include "NSTextStorage.h"
#include "NSTypesetter.h"

@class BOOL *, CUIStyleEffectConfiguration, NSArray, NSMutableArray;

@interface NSLayoutManager : NSObject<NSSecureCoding> {
  /* instance variables */
  NSGlyphGenerator *_glyphGenerator;
  NSTypesetter *_typesetter;
  NSStorage *_containerUsedRects;
  NSRunStorage *_containerRuns;
  NSTextContainer *_extraLineFragmentContainer;
  struct __lmFlags { unsigned int x :1 containersAreFull; unsigned int x :1 glyphsMightDrawOutsideLines; unsigned int x :1 backgroundLayoutEnabled; unsigned int x :1 resizingInProgress; unsigned int x :1 allowScreenFonts; unsigned int x :1 cachedRectArrayInUse; unsigned int x :1 displayInvalidationInProgress; unsigned int x :1 insertionPointNeedsUpdate; unsigned int x :1 layoutManagerInDirtyList; unsigned int x :1 originalFontOverride; unsigned int x :1 showInvisibleCharacters; unsigned int x :1 showControlCharacters; unsigned int x :1 delegateRespondsToDidInvalidate; unsigned int x :1 delegateRespondsToDidComplete; unsigned int x :2 glyphFormat; unsigned int x :1 textStorageRespondsToIsEditing; unsigned int x :1 notifyEditedInProgress; unsigned int x :1 containersChanged; unsigned int x :1 isGeneratingGlyphs; unsigned int x :1 hasNonGeneratedGlyphData; unsigned int x :1 syncAlignmentToDirection; unsigned int x :2 defaultAttachmentScaling; unsigned int x :1 usesFontLeading; unsigned int x :1 seenRightToLeft; unsigned int x :1 ignoresViewTransformations; unsigned int x :1 needToFlushGlyph; unsigned int x :1 flipsIfNeeded; unsigned int x :1 allowNonContig; unsigned int x :1 useNonContig; unsigned int x :1 inBackgroundLayout; } _lmFlags;
  unsigned short _textViewResizeDisableStack;
  unsigned short _displayInvalidationDisableStack;
  struct _NSRange { unsigned long long location; unsigned long long length; } _deferredDisplayCharRange;
  id _firstTextView;
  struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } * _cachedRectArray;
  unsigned long long _cachedRectArrayCapacity;
  char * _glyphBuffer;
  unsigned long long _glyphBufferSize;
  struct _NSRange { unsigned long long location; unsigned long long length; } _cachedLocationNominalGlyphRange;
  unsigned long long _cachedLocationGlyphIndex;
  struct CGPoint { double x; double y; } _cachedLocation;
  struct _NSRange { unsigned long long location; unsigned long long length; } _cachedFontCharRange;
  NSFont *_cachedFont;
  unsigned long long _firstUnlaidGlyphIndex;
  unsigned long long _firstUnlaidCharIndex;
  struct _NSRange { unsigned long long location; unsigned long long length; } _newlyFilledGlyphRange;
  id _extraData;
  NSTextContainer *_cachedTextContainer;
  BOOL _cachedTextContainerIsVertical;
  BOOL _delegateIsWeakValue;
}

@property BOOL allowsOriginalFontMetricsOverride;
@property (retain) NSParagraphArbitrator *paragraphArbitrator;
@property (copy) CUIStyleEffectConfiguration *styleEffectConfiguration;
@property (readonly) BOOL scrolling;
@property (nonatomic) NSTextStorage *textStorage;
@property (readonly, nonatomic) NSArray *textContainers;
@property (weak, nonatomic) NSObject<NSLayoutManagerDelegate> *delegate;
@property (nonatomic) BOOL showsInvisibleCharacters;
@property (nonatomic) BOOL showsControlCharacters;
@property (nonatomic) BOOL usesFontLeading;
@property (nonatomic) BOOL allowsNonContiguousLayout;
@property (readonly, nonatomic) BOOL hasNonContiguousLayout;
@property BOOL limitsLayoutForSuspiciousContents;
@property BOOL usesDefaultHyphenation;
@property (readonly, nonatomic) unsigned long long numberOfGlyphs;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } extraLineFragmentRect;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } extraLineFragmentUsedRect;
@property (readonly, nonatomic) NSTextContainer *extraLineFragmentTextContainer;

/* class methods */
+ (id)_defaultLinkAttributesForLabel;
+ (id)_defaultLinkAttributes;
+ (BOOL)_inBackgroundLayout;
+ (void)_doSomeBackgroundLayout;
+ (void)initialize;
+ (BOOL)_usesScreenFonts;
+ (BOOL)_ignoresViewTransformations;
+ (BOOL)_showsInvisibleCharacters;
+ (BOOL)_showsControlCharacters;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)destinationTextContainerForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inTextContainer:(id)container;
- (id)layoutFragmentsForReplacingCharactersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withAttributedString:(id)string rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect textContainer:(id)container;
- (void)coordinateAccess:(id /* block */)access;
- (id)_stringForLoggingLineFragmentForGlyphAtIndex:(long long)index;
- (id)linkAttributesForLink:(id)link forCharacterAtIndex:(unsigned long long)index;
- (id)linkAttributesForAttributes:(id)attributes forCharacterAtIndex:(unsigned long long)index;
- (void)_mergeGlyphHoles;
- (void)_mergeLayoutHoles;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRangeForCharRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRowRangeForCharRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range completeRows:(BOOL *)rows;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRowRangeForCharRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRowRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range completeRows:(BOOL *)rows;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRowRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_rowArrayCache;
- (void)_setRowArrayCache:(id)cache;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_extendedCharRangeForInvalidation:(struct _NSRange { unsigned long long x0; unsigned long long x1; })invalidation editedCharRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_adjustCharacterIndicesForRawGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range byDelta:(long long)delta;
- (BOOL)_canDoLayout;
- (void)_fillGlyphHoleAtIndex:(unsigned long long)index desiredNumberOfCharacters:(unsigned long long)characters;
- (void)_fillGlyphHoleForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range startGlyphIndex:(unsigned long long)index desiredNumberOfCharacters:(unsigned long long)characters;
- (BOOL)_doOptimizedLayoutStartingAtGlyphIndex:(unsigned long long)index forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inTextContainer:(id)container lineLimit:(unsigned long long)limit nextGlyphIndex:(unsigned long long *)index;
- (void)_doLayoutWithFullContainerStartingAtGlyphIndex:(unsigned long long)index nextGlyphIndex:(unsigned long long *)index;
- (void)_noteFirstTextViewVisibleCharacterRangeIfAfterIndex:(unsigned long long)index;
- (void)_fillLayoutHoleForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range desiredNumberOfLines:(unsigned long long)lines isSoft:(BOOL)soft;
- (void)_fillLayoutHoleAtIndex:(unsigned long long)index desiredNumberOfLines:(unsigned long long)lines;
- (unsigned long long)_smallEncodingGlyphIndexForCharacterIndex:(unsigned long long)index startOfRange:(BOOL)range okToFillHoles:(BOOL)holes considerNulls:(BOOL)nulls;
- (unsigned long long)_smallEncodingGlyphIndexForCharacterIndex:(unsigned long long)index startOfRange:(BOOL)range okToFillHoles:(BOOL)holes;
- (unsigned long long)_glyphIndexForCharacterIndex:(unsigned long long)index startOfRange:(BOOL)range okToFillHoles:(BOOL)holes;
- (unsigned long long)_glyphIndexForCharacterIndex:(unsigned long long)index startOfRange:(BOOL)range okToFillHoles:(BOOL)holes considerNulls:(BOOL)nulls;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_glyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range okToFillHoles:(BOOL)holes;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_exactGlyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_primitiveCharacterRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_primitiveGlyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_markSelfAsDirtyForBackgroundLayout:(id)layout;
- (id)_containerDescription;
- (id)_lineFragmentDescriptionForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range includeGlyphLocations:(BOOL)locations;
- (id)_lineFragmentDescription:(BOOL)description;
- (id)_lineFragmentDescription;
- (id)_glyphLocationDescription;
- (id)_glyphDescriptionForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_glyphDescription;
- (id)_glyphHoleDescription;
- (id)_layoutHoleDescription;
- (id)_glyphTreeDescription;
- (id)_layoutTreeDescription;
- (id)_blockDescription;
- (void)_updateUsageForTextContainer:(id)container addingUsedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_invalidateUsageForTextContainersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_recalculateUsageForTextContainerAtIndex:(unsigned long long)index;
- (struct _NSStoredContainerUsage { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct { unsigned int x0 :1; unsigned int x1 :1; unsigned int x2 :1; unsigned int x3 :29; } x2; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x3; struct _NSRange { unsigned long long x0; unsigned long long x1; } x4; } *)_validatedStoredUsageForTextContainerAtIndex:(unsigned long long)index;
- (void)_invalidateInsertionPoint;
- (void)_invalidateDisplayIfNeeded;
- (void)_resizeTextViewForTextContainer:(id)container;
- (id)_selectedRanges;
- (void)_fixSelectionAfterChangeInCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range changeInLength:(long long)length;
- (void)_growCachedRectArrayToSize:(unsigned long long)size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)_rectArrayForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withinSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range rangeIsCharRange:(BOOL)range singleRectOnly:(BOOL)only fullLineRectsOnly:(BOOL)only inTextContainer:(id)container rectCount:(unsigned long long *)count rangeWithinContainer:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)container glyphsDrawOutsideLines:(BOOL *)lines rectArray:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)array rectArrayCapacity:(unsigned long long)capacity;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)_rectArrayForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withinSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range rangeIsCharRange:(BOOL)range singleRectOnly:(BOOL)only fullLineRectsOnly:(BOOL)only inTextContainer:(id)container rectCount:(unsigned long long *)count rangeWithinContainer:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)container glyphsDrawOutsideLines:(BOOL *)lines;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundingRectForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inTextContainer:(id)container fast:(BOOL)fast fullLineRectsOnly:(BOOL)only;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_firstPassGlyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inTextContainer:(id)container hintGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range okToFillHoles:(BOOL)holes;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_firstPassGlyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inTextContainer:(id)container okToFillHoles:(BOOL)holes;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_glyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inTextContainer:(id)container fast:(BOOL)fast okToFillHoles:(BOOL)holes;
- (unsigned long long)_indexOfFirstGlyphInTextContainer:(id)container okToFillHoles:(BOOL)holes;
- (void)_invalidateGlyphsForExtendedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range changeInLength:(long long)length includeBlocks:(BOOL)blocks;
- (void)_invalidateGlyphsForExtendedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range changeInLength:(long long)length;
- (void)_invalidateLayoutForExtendedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range isSoft:(BOOL)soft invalidateUsage:(BOOL)usage;
- (void)_invalidateLayoutForExtendedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range isSoft:(BOOL)soft;
- (void)_firstTextViewChanged;
- (void)_drawBackgroundForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range atPoint:(struct CGPoint { double x0; double x1; })point;
- (id)selectedTextAttributesForCharacterAtIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (char *)_packedGlyphs:(unsigned long long)glyphs range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range length:(unsigned long long *)length;
- (void)_drawGlyphsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range atPoint:(struct CGPoint { double x0; double x1; })point;
- (unsigned int)_glyphAtIndex:(unsigned long long)index characterIndex:(unsigned long long *)index glyphInscription:(unsigned long long *)inscription isValidIndex:(BOOL *)index;
- (BOOL)_needToFlushGlyph;
- (void)_setNeedToFlushGlyph:(BOOL)glyph;
- (void)_simpleInsertGlyph:(unsigned int)glyph atGlyphIndex:(unsigned long long)index characterIndex:(unsigned long long)index elastic:(BOOL)elastic;
- (void)_simpleDeleteGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_insertGlyphs:(unsigned int *)glyphs elasticAttributes:(BOOL *)attributes count:(unsigned long long)count atGlyphIndex:(unsigned long long)index characterIndex:(unsigned long long)index;
- (void)_promoteGlyphStoreToFormat:(unsigned long long)format;
- (id)_attachmentSizesRun;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_currentAttachmentRect;
- (unsigned long long)_currentAttachmentIndex;
- (void)_setCurrentAttachmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect index:(unsigned long long)index;
- (void)_clearCurrentAttachmentSettings;
- (void)_clearTemporaryAttributes;
- (void)_clearTemporaryAttributesForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range changeInLength:(long long)length;
- (void)_setHasSeenRightToLeft:(BOOL)left;
- (BOOL)_hasSeenRightToLeft;
- (BOOL)flipsIfNeeded;
- (void)setFlipsIfNeeded:(BOOL)needed;
- (void)setLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect baselineOffset:(double)offset;
- (double)baselineOffsetForGlyphAtIndex:(unsigned long long)index;
- (void)setBaselineOffset:(double)offset forGlyphAtIndex:(unsigned long long)index;
- (BOOL)ignoresViewTransformations;
- (void)setIgnoresViewTransformations:(BOOL)transformations;
- (BOOL)ignoresAntialiasThreshold;
- (void)setIgnoresAntialiasThreshold:(BOOL)threshold;
- (BOOL)_alwaysDrawsActive;
- (void)_setAlwaysDrawsActive:(BOOL)active;
- (id)_insertionPointHelperForGlyphAtIndex:(unsigned long long)index;
- (long long)getLineFragmentInsertionPointArraysForCharacterAtIndex:(unsigned long long)index inDisplayOrder:(BOOL)order positions:(double * *)positions characterIndexes:(unsigned long long * *)indexes count:(unsigned long long *)count alternatePositions:(double * *)positions characterIndexes:(unsigned long long * *)indexes count:(unsigned long long *)count;
- (id)_selectionRangesForInsertionPointRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_setDrawsUnderlinesLikeWebKit:(BOOL)kit;
- (BOOL)_drawsUnderlinesLikeWebKit;
- (void)_setDrawsDebugBaselines:(BOOL)baselines;
- (BOOL)_drawsDebugBaselines;
- (BOOL)_mirrorsTextAlignment;
- (void)_setMirrorsTextAlignment:(BOOL)alignment;
- (BOOL)_forcesTrackingFloor;
- (void)_setForcesTrackingFloor:(BOOL)floor;
- (void)showAttachment:(id)attachment inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect textContainer:(id)container characterIndex:(unsigned long long)index;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfCharacterClusterAtIndex:(unsigned long long)index type:(long long)type;
- (void)_setExtraLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect textContainer:(id)container;
- (void)_setTextContainer:(id)container forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)viewProviderForTextAttachment:(id)attachment characterIndex:(unsigned long long)index;
- (void)setViewProvider:(id)provider forTextAttachment:(id)attachment characterIndex:(unsigned long long)index;
- (void)beginScrollingForView:(id)view textContainer:(id)container;
- (void)endScrollingForView:(id)view textContainer:(id)container;
- (BOOL)isScrolling;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })prepareLayoutForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect textContainer:(id)container;
- (id)underlineColorForTextAlternatives;
- (void)setUnderlineColorForTextAlternatives:(id)alternatives;
- (id)underlineColorForSpelling;
- (void)setUnderlineColorForSpelling:(id)spelling;
- (long long)applicationFrameworkContext;
- (void)setApplicationFrameworkContext:(long long)context;
- (id)renderingColorForDocumentColor:(id)color;
- (void)fillMarkedBackgroundRectArray:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)array count:(unsigned long long)count forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range color:(id)color;
- (void)_showCGGlyphs:(const unsigned short *)cgglyphs positions:(const struct CGPoint { double x0; double x1; } *)positions count:(long long)count font:(id)font textMatrix:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })matrix attributes:(id)attributes inContext:(struct CGContext *)context;
- (void)_showAttachmentCell:(id)cell inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect characterIndex:(unsigned long long)index;
- (void)drawSpellingUnderlineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range spellingState:(long long)state inGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range containerOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inContext:(struct CGContext *)context from:(double)from to:(double)to at:(double)at thickness:(double)thickness lineOrigin:(struct CGPoint { double x0; double x1; })origin breakForDescenders:(BOOL)descenders flipped:(BOOL)flipped;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inContext:(struct CGContext *)context from:(double)from to:(double)to at:(double)at thickness:(double)thickness lineOrigin:(struct CGPoint { double x0; double x1; })origin breakForDescenders:(BOOL)descenders;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range type:(long long)type baselineOffset:(double)offset lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range containerOrigin:(struct CGPoint { double x0; double x1; })origin isStrikethrough:(BOOL)strikethrough;
- (void)_lineGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range type:(long long)type lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range containerOrigin:(struct CGPoint { double x0; double x1; })origin isStrikethrough:(BOOL)strikethrough;
- (void)_commonInit;
- (id)init;
- (void)finalize;
- (void)dealloc;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (id)description;
- (id)attributedString;
- (void)replaceTextStorage:(id)storage;
- (id)glyphGenerator;
- (id)_glyphGenerator;
- (void)setGlyphGenerator:(id)generator;
- (void)_setGlyphGenerator:(id)generator;
- (id)typesetter;
- (void)setTypesetter:(id)typesetter;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_characterRangeCurrentlyInAndAfterContainer:(id)container;
- (void)addTextContainer:(id)container;
- (void)insertTextContainer:(id)container atIndex:(unsigned long long)index;
- (void)removeTextContainerAtIndex:(unsigned long long)index;
- (void)textContainerChangedGeometry:(id)geometry;
- (void)textContainerChangedTextView:(id)view;
- (void)textContainerChangedTextView:(id)view fromTextView:(id)view;
- (void)_setGlyphsPerLineEstimate:(unsigned long long)estimate offsetPerLineEstimate:(double)estimate;
- (void)_setGlyphsPerLineEstimate:(unsigned long long)estimate integerOffsetPerLineEstimate:(unsigned long long)estimate;
- (void)setBackgroundLayoutEnabled:(BOOL)enabled;
- (BOOL)backgroundLayoutEnabled;
- (BOOL)usesScreenFonts;
- (void)setUsesScreenFonts:(BOOL)fonts;
- (void)_setHyphenationFactor:(double)factor;
- (double)_hyphenationFactor;
- (void)setHyphenationFactor:(double)factor;
- (double)hyphenationFactor;
- (void)setTypesetterBehavior:(long long)behavior;
- (long long)typesetterBehavior;
- (unsigned long long)layoutOptions;
- (BOOL)backgroundColorProvidesOpaqueSurface;
- (void)_invalidateGlyphsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range editedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range changeInLength:(long long)length actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (void)invalidateGlyphsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range changeInLength:(long long)length actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (void)invalidateLayoutForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (void)invalidateLayoutForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range isSoft:(BOOL)soft actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (void)_primitiveInvalidateDisplayForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)invalidateDisplayForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)invalidateDisplayForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_forceDisplayToBeCorrectForViewsWithUnlaidGlyphs;
- (void)textStorage:(id)storage edited:(unsigned long long)edited range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range changeInLength:(long long)length invalidatedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)processEditingForTextStorage:(id)storage edited:(unsigned long long)edited range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range changeInLength:(long long)length invalidatedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)ensureGlyphsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)ensureGlyphsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)ensureLayoutForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)ensureLayoutForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)ensureLayoutForTextContainer:(id)container;
- (void)ensureLayoutForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inTextContainer:(id)container;
- (void)insertGlyphs:(const unsigned int *)glyphs length:(unsigned long long)length forStartingGlyphAtIndex:(unsigned long long)index characterIndex:(unsigned long long)index;
- (void)insertGlyph:(unsigned int)glyph atGlyphIndex:(unsigned long long)index characterIndex:(unsigned long long)index;
- (void)replaceGlyphAtIndex:(unsigned long long)index withGlyph:(unsigned int)glyph;
- (void)_primitiveDeleteGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)deleteGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setCharacterIndex:(unsigned long long)index forGlyphAtIndex:(unsigned long long)index;
- (void)setIntAttribute:(long long)attribute value:(long long)value forGlyphAtIndex:(unsigned long long)index;
- (void)invalidateGlyphsOnLayoutInvalidationForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setGlyphs:(const unsigned short *)glyphs properties:(const long long *)properties characterIndexes:(const unsigned long long *)indexes font:(id)font forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (unsigned short)CGGlyphAtIndex:(unsigned long long)index isValidIndex:(BOOL *)index;
- (unsigned short)CGGlyphAtIndex:(unsigned long long)index;
- (unsigned short)glyphAtIndex:(unsigned long long)index isValidIndex:(BOOL *)index;
- (unsigned short)glyphAtIndex:(unsigned long long)index;
- (BOOL)isValidGlyphIndex:(unsigned long long)index;
- (unsigned long long)characterIndexForGlyphAtIndex:(unsigned long long)index;
- (unsigned long long)glyphIndexForCharacterAtIndex:(unsigned long long)index;
- (long long)intAttribute:(long long)attribute forGlyphAtIndex:(unsigned long long)index;
- (long long)propertyForGlyphAtIndex:(unsigned long long)index;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range glyphs:(unsigned short *)glyphs properties:(long long *)properties characterIndexes:(unsigned long long *)indexes bidiLevels:(char *)levels;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range glyphs:(unsigned int *)glyphs characterIndexes:(unsigned long long *)indexes glyphInscriptions:(unsigned long long *)inscriptions elasticBits:(BOOL *)bits;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range glyphs:(unsigned int *)glyphs characterIndexes:(unsigned long long *)indexes glyphInscriptions:(unsigned long long *)inscriptions elasticBits:(BOOL *)bits bidiLevels:(char *)levels;
- (unsigned long long)getGlyphs:(unsigned int *)glyphs range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setTextContainer:(id)container forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_setCachedTextContainer:(id)container isVertical:(BOOL)vertical;
- (void)_resetCachedTextContainer;
- (void)setLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)setExtraLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect textContainer:(id)container;
- (void)setLocation:(struct CGPoint { double x0; double x1; })location forStartOfGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range coalesceRuns:(BOOL)runs;
- (void)setLocation:(struct CGPoint { double x0; double x1; })location forStartOfGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setLocations:(struct CGPoint { double x0; double x1; } *)locations startingGlyphIndexes:(unsigned long long *)indexes count:(unsigned long long)count forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setNotShownAttribute:(BOOL)attribute forGlyphAtIndex:(unsigned long long)index;
- (void)setDrawsOutsideLineFragment:(BOOL)fragment forGlyphAtIndex:(unsigned long long)index;
- (void)setAttachmentSize:(struct CGSize { double x0; double x1; })size forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setEllipsisGlyphAttribute:(BOOL)attribute forGlyphAtIndex:(unsigned long long)index;
- (unsigned long long)firstUnlaidCharacterIndex;
- (unsigned long long)firstUnlaidGlyphIndex;
- (void)getFirstUnlaidCharacterIndex:(unsigned long long *)index glyphIndex:(unsigned long long *)index;
- (id)textContainerForGlyphAtIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range withoutAdditionalLayout:(BOOL)layout;
- (id)textContainerForGlyphAtIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })usedRectForTextContainer:(id)container;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentRectForGlyphAtIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range withoutAdditionalLayout:(BOOL)layout;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentRectForGlyphAtIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range withoutAdditionalLayout:(BOOL)layout;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range allowLayout:(BOOL)layout;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct CGPoint { double x0; double x1; })locationForGlyphAtIndex:(unsigned long long)index;
- (BOOL)notShownAttributeForGlyphAtIndex:(unsigned long long)index;
- (BOOL)drawsOutsideLineFragmentForGlyphAtIndex:(unsigned long long)index;
- (struct CGSize { double x0; double x1; })attachmentSizeForGlyphAtIndex:(unsigned long long)index;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })truncatedGlyphRangeInLineFragmentForGlyphAtIndex:(unsigned long long)index;
- (void)setLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forTextBlock:(id)block glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setBoundsRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forTextBlock:(id)block glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutRectForTextBlock:(id)block glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsRectForTextBlock:(id)block glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutRectForTextBlock:(id)block atIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsRectForTextBlock:(id)block atIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })characterRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range actualGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForTextContainer:(id)container;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfNominallySpacedGlyphsContainingIndex:(unsigned long long)index;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rectArrayForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withinSelectedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inTextContainer:(id)container rectCount:(unsigned long long *)count;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rectArrayForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withinSelectedGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inTextContainer:(id)container rectCount:(unsigned long long *)count;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inTextContainer:(id)container;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inTextContainer:(id)container;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForBoundingRectWithoutAdditionalLayout:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layout inTextContainer:(id)container;
- (unsigned long long)glyphIndexForPoint:(struct CGPoint { double x0; double x1; })point inTextContainer:(id)container;
- (double)fractionOfDistanceThroughGlyphForPoint:(struct CGPoint { double x0; double x1; })point inTextContainer:(id)container;
- (unsigned long long)glyphIndexForPoint:(struct CGPoint { double x0; double x1; })point inTextContainer:(id)container fractionOfDistanceThroughGlyph:(double *)glyph;
- (unsigned long long)characterIndexForPoint:(struct CGPoint { double x0; double x1; })point inTextContainer:(id)container fractionOfDistanceBetweenInsertionPoints:(double *)points;
- (unsigned long long)getLineFragmentInsertionPointsForCharacterAtIndex:(unsigned long long)index alternatePositions:(BOOL)positions inDisplayOrder:(BOOL)order positions:(double *)positions characterIndexes:(unsigned long long *)indexes;
- (id)temporaryAttributesAtCharacterIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (void)setTemporaryAttributes:(id)attributes forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)addTemporaryAttributes:(id)attributes forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)addTemporaryAttribute:(id)attribute value:(id)value forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)removeTemporaryAttribute:(id)attribute forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)temporaryAttribute:(id)attribute atCharacterIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (id)_temporaryAttribute:(id)attribute atCharacterIndex:(unsigned long long)index effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (id)temporaryAttribute:(id)attribute atCharacterIndex:(unsigned long long)index longestEffectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_temporaryAttribute:(id)attribute atCharacterIndex:(unsigned long long)index longestEffectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)temporaryAttributesAtCharacterIndex:(unsigned long long)index longestEffectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_temporaryAttributesAtCharacterIndex:(unsigned long long)index longestEffectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)substituteFontForFont:(id)font;
- (double)defaultLineHeightForFont:(id)font;
- (double)defaultBaselineOffsetForFont:(id)font;
- (BOOL)synchronizesAlignmentToDirection;
- (void)setSynchronizesAlignmentToDirection:(BOOL)direction;
- (id /* block */)didCompleteLayoutObserverBlock;
- (void)setDidCompleteLayoutObserverBlock:(id /* block */)block;
- (void)enumerateLineFragmentsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range usingBlock:(id /* block */)block;
- (void)enumerateEnclosingRectsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withinSelectedGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inTextContainer:(id)container usingBlock:(id /* block */)block;
- (void)enumerateEnclosingRectsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withinSelectedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inTextContainer:(id)container usingBlock:(id /* block */)block;
- (void)drawGlyphsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range atPoint:(struct CGPoint { double x0; double x1; })point;
- (void)drawBackgroundForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range atPoint:(struct CGPoint { double x0; double x1; })point;
- (void)showCGGlyphs:(const unsigned short *)cgglyphs positions:(const struct CGPoint { double x0; double x1; } *)positions count:(unsigned long long)count font:(id)font matrix:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })matrix attributes:(id)attributes inContext:(struct CGContext *)context;
- (void)fillBackgroundRectArray:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)array count:(unsigned long long)count forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range color:(id)color;
- (void)drawUnderlineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range underlineType:(long long)type baselineOffset:(double)offset lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range containerOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)drawStrikethroughForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range strikethroughType:(long long)type baselineOffset:(double)offset lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range containerOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)strikethroughGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range strikethroughType:(long long)type lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range containerOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)underlineGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range underlineType:(long long)type lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range containerOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)showCGGlyphs:(const unsigned short *)cgglyphs positions:(const struct CGPoint { double x0; double x1; } *)positions count:(long long)count font:(id)font textMatrix:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })matrix attributes:(id)attributes inContext:(struct CGContext *)context;
- (void)showAttachmentCell:(id)cell inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect characterIndex:(unsigned long long)index;
@end

#endif /* NSLayoutManager_h */
