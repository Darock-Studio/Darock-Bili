//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 908.2.0.0.0
//
#ifndef NSCoreTypesetter_h
#define NSCoreTypesetter_h
@import Foundation;

#include "NSTypesetter.h"
#include "NSCoreTypesetterDelegate-Protocol.h"
#include "NSCoreTypesetterDelegateInternal-Protocol.h"

@class NSDictionary;

@interface NSCoreTypesetter : NSTypesetter {
  /* instance variables */
  double _lineFragmentOriginYOffset;
  BOOL _delegateSupportsTextContainer;
}

@property (copy) NSDictionary *_extraLineFragmentAttributes;
@property long long layoutOrientation;
@property BOOL allowsFontOverridingTextAttachmentVerticalMetrics;
@property BOOL requiresCTLineRef;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } characterRange;
@property struct CGSize { double x0; double x1; } textContainerSize;
@property long long maximumNumberOfLines;
@property long long containerBreakMode;
@property BOOL enforcesMinimumTextLineFragment;
@property BOOL wantsExtraLineFragment;
@property (copy) id /* block */ laidOutLineFragment;
@property (weak, @dynamic) NSObject<NSCoreTypesetterDelegate> *delegate;
@property BOOL usesDefaultHyphenation;
@property BOOL allowsFontSubstitutionAffectingVerticalMetrics;
@property BOOL limitsLayoutForSuspiciousContents;
@property BOOL beginningOfDocument;
@property BOOL typographicBoundsIncludesLineFragmentPadding;
@property BOOL breaksLinesForInteractiveText;
@property (copy) id /* block */ validateLineBreakIndex;

/* class methods */
+ (void)_minMaxPositionsForLineFragmentWithParagraphStyle:(id)style baseWidth:(double)width writingDirection:(long long)direction isBeginningOfParagraph:(BOOL)paragraph minPosition:(double *)position maxPosition:(double *)position;
+ (BOOL)_allowsFontOverridingTextAttachmentVerticalMetricsForStringDrawing;
+ (void)_lineMetricsForAttributes:(id)attributes typesetterBehavior:(long long)behavior usesFontLeading:(BOOL)leading applySpacings:(BOOL)spacings usesSystemFontLeading:(BOOL)leading usesNegativeFontLeading:(BOOL)leading layoutOrientation:(long long)orientation lineHeight:(double *)height baselineOffset:(double *)offset spacing:(double *)spacing;
+ (void)_maximumAscentAndDescentForRuns:(struct __CFArray *)runs ascender:(double *)ascender descender:(double *)descender;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)layout;
- (void)layoutWithYOrigin:(double)yorigin;
- (struct { double x0; double x1; double x2; })_getLineMetricsForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range attributes:(id)attributes attributedString:(id)string applySpacing:(BOOL)spacing usesSystemFontLeading:(BOOL)leading usesNegativeFontLeading:(BOOL)leading;
- (id)softHyphen;
- (id)_paragraphStyleFromAttributes:(id)attributes;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentRectForProposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect atIndex:(long long)index writingDirection:(long long)direction remainingRect:(out struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect;
- (BOOL)isSimpleRectangularTextContainerForStartingCharacterAtIndex:(long long)index;
- (int)_NSFastDrawString:(id)string length:(unsigned long long)length attributes:(id)attributes paragraphStyle:(id)style typesetterBehavior:(long long)behavior lineBreakMode:(long long)mode rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect padding:(double)padding graphicsContext:(id)context baselineRendering:(BOOL)rendering usesFontLeading:(BOOL)leading usesScreenFont:(BOOL)font scrollable:(BOOL)scrollable syncAlignment:(BOOL)alignment mirrored:(BOOL)mirrored boundingRectPointer:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)pointer baselineOffsetPointer:(double *)pointer drawingContext:(id)context;
- (long long)_getFirstOverflowTabStopIndexInLineRef:(struct __CTLine *)ref range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range string:(id)string paragraphStyle:(id)style availableWidth:(double)width offset:(double)offset;
- (struct __CTLine *)_createLineRefForParentLineRef:(inout const struct __CTLine * *)ref range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range availableWidth:(double)width offset:(double)offset paragraphArbitrator:(id)arbitrator lineBreakMode:(long long)mode hyphenated:(out BOOL *)hyphenated forcedClusterBreak:(out BOOL *)break;
- (void)beginLine;
- (void)endLine;
- (struct __CTLine *)_createLayoutLineFragmentStartingWithCharacterIndex:(inout long long *)index proposedLineFragmentRect:(inout struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect baseLineRef:(inout const struct __CTLine * *)ref range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range paragraphStyle:(id)style paragraphArbitrator:(id)arbitrator lineBreakMode:(long long)mode hasAttachments:(BOOL)attachments lineFragmentRect:(out struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect glyphOrigin:(out struct CGPoint { double x0; double x1; } *)origin hyphenated:(out BOOL *)hyphenated forcedClusterBreak:(out BOOL *)break;
- (BOOL)_shouldShowLineBadges;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_stringDrawingCoreTextEngineWithOriginalString:(id)string rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect padding:(double)padding graphicsContext:(id)context forceClipping:(BOOL)clipping attributes:(id)attributes stringDrawingOptions:(long long)options drawingContext:(id)context stringDrawingInterface:(struct { unsigned char x0; long long x1; BOOL x2; BOOL x3; } *)interface;
- (BOOL)isBeginningOfDocument;
@end

#endif /* NSCoreTypesetter_h */
