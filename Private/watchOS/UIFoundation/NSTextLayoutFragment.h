//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 908.2.0.0.0
//
#ifndef NSTextLayoutFragment_h
#define NSTextLayoutFragment_h
@import Foundation;

#include "NSCoreTypesetterDelegateInternal-Protocol.h"
#include "NSLayoutManager.h"
#include "NSSecureCoding-Protocol.h"
#include "NSTextElement.h"
#include "NSTextLayoutManager.h"
#include "NSTextLocation-Protocol.h"
#include "NSTextParagraph.h"
#include "NSTextRange.h"
#include "NSTextStorage.h"
#include "_NSTextAttachmentLayoutContext.h"
#include "_NSTextAttributeStorage.h"
#include "__NSTextRunStorageDataSource-Protocol.h"

@class NSArray, NSDictionary, NSOperationQueue, NSString;

@interface NSTextLayoutFragment : NSObject<NSCoreTypesetterDelegateInternal, __NSTextRunStorageDataSource, NSSecureCoding> {
  /* instance variables */
  NSTextRange *_contentRange;
  _NSTextAttributeStorage *_renderingAttributesTable;
  long long _offsetFromElementLocation;
  struct CGPoint { double x; double y; } _layoutPoint;
  BOOL _isTextParagraph;
  struct _NSRange { unsigned long long location; unsigned long long length; } _characterRange;
  unsigned long long _sourceVerticalDelta;
  unsigned long long _sourceRangeDelta;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _sourceBoundingRect;
  unsigned long long _animationType;
  NSLayoutManager *_layoutManager;
  BOOL _renderingAttributesValidated;
}

@property NSLayoutManager *destinationLayoutManager;
@property (retain) NSTextStorage *destinationTextStorage;
@property double destinationVerticalDelta;
@property struct _NSRange { unsigned long long x0; unsigned long long x1; } destinationGlyphRange;
@property (@dynamic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } destinationBoundingRect;
@property (copy) NSArray *textLineFragments;
@property unsigned long long state;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } layoutFragmentFrame;
@property BOOL _renderingAttributesValidated;
@property BOOL rendersTextCorrectionMarkers;
@property (readonly, @dynamic) NSTextParagraph *textParagraph;
@property (retain) _NSTextAttachmentLayoutContext *textAttachmentLayoutContext;
@property BOOL hasPartialLayout;
@property (copy) NSDictionary *extraLineFragmentAttributes;
@property (readonly, weak, @dynamic) NSTextLayoutManager *textLayoutManager;
@property (readonly, weak, @dynamic) NSTextElement *textElement;
@property (readonly, @dynamic) NSTextRange *rangeInElement;
@property (retain) NSOperationQueue *layoutQueue;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } renderingSurfaceBounds;
@property (readonly) double leadingPadding;
@property (readonly) double trailingPadding;
@property (readonly) double topMargin;
@property (readonly) double bottomMargin;
@property (readonly, copy) NSArray *textAttachmentViewProviders;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) BOOL countableDataSource;
@property (readonly) NSObject<NSTextLocation> *baseLocation;

/* class methods */
+ (BOOL)supportsSecureCoding;
+ (id)_validCoreTextRenderingAttributes;
+ (id)layoutFragmentQueue;
+ (BOOL)coordinateSystemCompatibilityFor2022AndEarlierSDKEnabled;

/* instance methods */
- (id)initWithLayoutManager:(id)manager characterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range animationType:(unsigned long long)type boundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_setup;
- (void)drawAtPoint:(struct CGPoint { double x0; double x1; })point contentType:(unsigned long long)type;
- (id)layoutManager;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })characterRange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sourceBoundingRect;
- (unsigned long long)animationType;
- (id)initWithTextElement:(id)element range:(id)range;
- (id)init;
- (struct CGPoint { double x0; double x1; })layoutPoint;
- (void)setLayoutPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_setRangeInElement:(id)element;
- (BOOL)_updateRangeInElement;
- (void)dealloc;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)representedRange;
- (struct CGSize { double x0; double x1; })layoutSize;
- (struct CGPoint { double x0; double x1; })layoutFragmentFrameOrigin;
- (void)setLayoutFragmentFrameOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)_resetLayoutFragmentFrame;
- (void)drawAtPoint:(struct CGPoint { double x0; double x1; })point inContext:(struct CGContext *)context;
- (void)drawAtPoint:(struct CGPoint { double x0; double x1; })point context:(struct CGContext *)context;
- (id)textLineFragmentForTextLocation:(id)location isUpstreamAffinity:(BOOL)affinity;
- (id)textLineFragmentForVerticalOffset:(double)offset requiresExactMatch:(BOOL)match;
- (id)textLineFragmentForVerticalOffset:(double)offset allowsSucceeding:(BOOL)succeeding;
- (double)verticalOffsetOfTextLocation:(id)location withAffinity:(long long)affinity;
- (id)representedRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (long long)_baseWritingDirection;
- (id)_textContainerAtStringIndex:(long long)index;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })coreTypesetter:(id)typesetter lineFragmentRectForProposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect atIndex:(long long)index writingDirection:(long long)direction remainingRect:(out struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect;
- (BOOL)coreTypesetter:(id)typesetter isSimpleRectangularTextContainerForStartingCharacterAtIndex:(long long)index;
- (void)_layout;
- (void)estimateSize;
- (void)layout;
- (void)invalidateLayout;
- (BOOL)isCountableDataSource;
- (id)locationFromLocation:(id)location withOffset:(long long)offset;
- (long long)offsetFromLocation:(id)location toLocation:(id)location;
- (void)enumerateRenderingAttributesFromLocation:(id)location reverse:(BOOL)reverse usingBlock:(id /* block */)block;
- (id)_coreTextAttributes;
- (id)_textAttributesAffectingLayout;
- (void)setRenderingAttribute:(id)attribute value:(id)value forTextRange:(id)range;
- (void)addRenderingAttribute:(id)attribute value:(id)value forTextRange:(id)range;
- (void)removeRenderingAttribute:(id)attribute forTextRange:(id)range;
- (void)setRenderingAttributes:(id)attributes forTextRange:(id)range;
- (void)invalidateRenderingAttributesForTextRange:(id)range;
- (void)layoutManagerDidSetTemporaryAttributes:(id)attributes forTextRange:(id)range;
- (id)_resolvedRenderingAttributesForCharacterIndex:(long long)index effectiveRange:(out struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (id)_layoutInfoForTextAttachmentAtLocation:(id)location;
- (id)textAttachmentViewProviderForLocation:(id)location;
- (void)setTextAttachmentProvider:(id)provider forLocation:(id)location;
- (BOOL)supportsSubelements;
- (void)enumerateViewportElementsFromLocation:(id)location options:(long long)options usingBlock:(id /* block */)block;
- (void)_setupResolvedTextAttachmentFrames;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForTextAttachmentAtLocation:(id)location;
- (BOOL)_isRenderingAttributesValidated;
@end

#endif /* NSTextLayoutFragment_h */
