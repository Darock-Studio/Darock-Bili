//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 908.2.0.0.0
//
#ifndef UINibDecoder_h
#define UINibDecoder_h
@import Foundation;

#include "NSCoder.h"
#include "UINibStringIDTable.h"

@interface UINibDecoder : NSCoder {
  /* instance variables */
  Class arrayClass;
  Class setClass;
  Class dictionaryClass;
  Class * classes;
  id * missingClasses;
  struct UINibDecoderObjectEntry { unsigned int x0; unsigned int x1; } * objects;
  struct UINibDecoderValue { unsigned int x0; unsigned int x1; } * values;
  char * valueTypes;
  void * valueData;
  unsigned long long valueDataSize;
  struct UINibDecoderHeader { unsigned char x[10] type; unsigned int formatVersion; unsigned int coderVersion; struct UINibArchiveTableInfo { unsigned int count; unsigned int offset; } objects; struct UINibArchiveTableInfo { unsigned int count; unsigned int offset; } keys; struct UINibArchiveTableInfo { unsigned int count; unsigned int offset; } values; struct UINibArchiveTableInfo { unsigned int count; unsigned int offset; } classes; } header;
  id * objectsByObjectID;
  unsigned int * longObjectClassIDs;
  char * shortObjectClassIDs;
  unsigned int * keyMasks;
  long long inlinedValueKey;
  struct UINibDecoderRecursiveState { long long objectID; long long nextGenericKey; unsigned int nextValueSearchIndex; BOOL replaced; } recursiveState;
  UINibStringIDTable *keyIDTable;
  struct UIKeyToKeyIDCache { NSString * x[64] previousKey; void * x[64] previousKeyID; BOOL x[64] previousKeyExists; long long hashHits; long long hashHotMisses; long long hashColdMisses; } keyIDCache;
  struct UIKeyAndScopeToValueCache { unsigned int previousScope; unsigned int previousKey; struct UINibDecoderValue *previousValue; } valueCache;
  long long lookupRounds;
  long long maxPossibleLookupRounds;
  long long failedByKeyMask;
  long long savedByKeyMask;
}

@property id delegate;
@property (readonly, nonatomic) long long uniqueIDForCurrentlyDecodingObject;
@property (readonly, nonatomic) BOOL reusable;

/* class methods */
+ (id)unarchiveObjectWithData:(id)data;
+ (id)unarchiveObjectWithFile:(id)file;

/* instance methods */
- (id)initForReadingWithData:(id)data error:(id *)error;
- (id)initForReadingWithData:(id)data;
- (void)dealloc;
- (BOOL)isReusable;
- (BOOL)validateAndIndexData:(id)data error:(id *)error;
- (BOOL)validateAndIndexClasses:(const void *)classes length:(unsigned long long)length;
- (BOOL)validateAndIndexObjects:(const void *)objects length:(unsigned long long)length;
- (BOOL)validateAndIndexValues:(const void *)values length:(unsigned long long)length;
- (BOOL)validateAndIndexKeys:(const void *)keys length:(unsigned long long)length;
- (id)nextGenericKey;
- (void)replaceObject:(id)object withObject:(id)object;
- (BOOL)allowsKeyedCoding;
- (BOOL)containsValueForKey:(id)key;
- (id)decodeObjectForKey:(id)key;
- (const char *)decodeBytesForKey:(id)key returnedLength:(unsigned long long *)length;
- (BOOL)decodeBoolForKey:(id)key;
- (float)decodeFloatForKey:(id)key;
- (double)decodeDoubleForKey:(id)key;
- (long long)decodeInt64ForKey:(id)key;
- (long long)decodeIntegerForKey:(id)key;
- (int)decodeIntForKey:(id)key;
- (int)decodeInt32ForKey:(id)key;
- (BOOL)decodeArrayOfFloats:(float *)floats count:(long long)count forKey:(id)key;
- (BOOL)decodeArrayOfDoubles:(double *)doubles count:(long long)count forKey:(id)key;
- (BOOL)decodeArrayOfCGFloats:(double *)cgfloats count:(long long)count forKey:(id)key;
- (struct CGPoint { double x0; double x1; })decodeCGPointForKey:(id)key;
- (struct CGSize { double x0; double x1; })decodeCGSizeForKey:(id)key;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })decodeCGRectForKey:(id)key;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })decodeCGAffineTransformForKey:(id)key;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })decodeUIEdgeInsetsForKey:(id)key;
- (void)decodeValueOfObjCType:(const char *)ctype at:(void *)at;
- (id)decodeNXObject;
- (id)decodeDataObject;
- (id)decodeObject;
- (id)decodePropertyList;
- (void)decodeValuesOfObjCTypes:(const char *)ctypes;
- (void)decodeArrayOfObjCType:(const char *)ctype count:(unsigned long long)count at:(void *)at;
- (void *)decodeBytesWithReturnedLength:(unsigned long long *)length;
- (unsigned int)systemVersion;
- (long long)versionForClassName:(id)name;
- (void)finishDecoding;
@end

#endif /* UINibDecoder_h */
