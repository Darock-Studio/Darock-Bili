//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 396.4.0.0.0
//
#ifndef TRIClient_h
#define TRIClient_h
@import Foundation;

#include "TRIDefaultFactorProvider.h"
#include "TRIFactorProviding-Protocol.h"
#include "TRIFactorsState.h"
#include "TRILogger.h"
#include "TRIPaths-Protocol.h"
#include "TRITrackingId.h"

@class NSString, _PASLock;
@protocol OS_dispatch_queue;

@interface TRIClient : NSObject<TRIFactorProviding> {
  /* instance variables */
  NSObject<TRIPaths> *_paths;
  TRIDefaultFactorProvider *_defaultFactorProvider;
  int _projectId;
  double _staleFactorsUsageGracePeriod;
  _PASLock *_lock;
  NSObject<OS_dispatch_queue> *_notificationQueue;
  TRIFactorsState *_factorsState;
}

@property (readonly, nonatomic) TRITrackingId *trackingId;
@property (readonly, nonatomic) TRILogger *logger;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)isPlatformBinary;
+ (BOOL)requiresLogging;
+ (BOOL)requiresTrialDataVaultAccess;
+ (id)clientWithIdentifier:(int)identifier;
+ (id)clientWithIdentifier:(int)identifier unit:(int)unit;
+ (id)clientWithProjectId:(int)id factorsState:(id)state;
+ (id)activeRolloutInformation:(id *)information;
+ (id)printedRolloutInformation:(id *)information;
+ (id)activeExperimentInformation:(id *)information;
+ (id)printedExperimentInformation:(id *)information;
+ (id)activeBMLTInformation:(id *)bmltinformation;
+ (id)printedBMLTInformation:(id *)bmltinformation;
+ (id)printedNCVInformation;
+ (id)sysdiagnoseInfoWithError:(id *)error;
+ (void)logSystemCovariates;

/* instance methods */
- (id)initWithClientIdentifier:(int)identifier paths:(id)paths unit:(int)unit staleFactorsUsageGracePeriod:(double)period logger:(id)logger;
- (id)initWithClientIdentifier:(int)identifier paths:(id)paths unit:(int)unit factorsState:(id)state staleFactorsUsageGracePeriod:(double)period logger:(id)logger;
- (id)initWithNonLoggingClientIdentifier:(int)identifier paths:(id)paths;
- (void)dealloc;
- (void)_lazyInit;
- (void)_checkEntitlements;
- (void)refresh;
- (id)_refresh:(BOOL)_refresh;
- (id)newTrackingId;
- (id)newTrackingIdWithTreatmentRefresh:(BOOL)refresh;
- (id)levelForFactor:(id)factor withNamespaceName:(id)name;
- (id)factorLevelsWithNamespaceName:(id)name;
- (void)cacheFactorLevelsWithNamespaceName:(id)name;
- (id)addUpdateHandlerForNamespaceName:(id)name usingBlock:(id /* block */)block;
- (id)addUpdateHandlerForNamespaceName:(id)name queue:(id)queue usingBlock:(id /* block */)block;
- (void)removeUpdateHandlerForToken:(id)token;
- (void)_setupExcessiveStaleFactorsUsageTimerWithGuardedData:(id)data namespace:(id)namespace clientMethodNameForLogging:(const char *)logging callingFunctionReturnAddressForLogging:(void *)logging;
- (void)_registerUpdateHandlerForNamespaceName:(id)name notificationCallback:(id)callback clientMethodNameForLogging:(const char *)logging callingFunctionReturnAddressForLogging:(void *)logging;
- (id)rolloutIdWithNamespaceName:(id)name;
- (id)treatmentIdWithNamespaceName:(id)name;
- (id)experimentIdentifiersWithNamespaceName:(id)name;
- (id)rolloutIdentifiersWithNamespaceName:(id)name;
- (id)_rampIdForRolloutDeployment:(id)deployment;
- (BOOL)trialIdentifiersWithNamespaceName:(id)name experimentId:(id *)id deploymentId:(int *)id treatmentId:(id *)id;
- (id)backgroundMLTaskIdentifiersWithNamespaceName:(id)name;
- (id)_bmltIdentifiersWithNamespaceName:(id)name;
- (id)experimentIdWithNamespaceName:(id)name;
- (long long)_appContainerType:(id)type;
- (BOOL)hasRegisteredNamespaceWithName:(id)name;
- (unsigned int)compatibilityVersionWithNamespaceName:(id)name;
- (BOOL)registerNamespaceName:(id)name compatibilityVersion:(unsigned int)version defaultsFileURL:(id)url applicationGroup:(id)group cloudKitContainerId:(int)id error:(id *)error;
- (BOOL)deregisterNamespaceName:(id)name error:(id *)error;
- (BOOL)hasDownloadedNamespaceWithName:(id)name;
- (void)downloadNamespaceWithName:(id)name options:(id)options progress:(id /* block */)progress completion:(id /* block */)completion;
- (id)sizesForFactors:(id)factors withNamespaceName:(id)name forMetric:(unsigned long long)metric error:(id *)error;
- (void)downloadLevelsForFactors:(id)factors withNamespace:(id)namespace queue:(id)queue options:(id)options progress:(id /* block */)progress completion:(id /* block */)completion;
- (void)removeLevelsForFactors:(id)factors withNamespace:(id)namespace queue:(id)queue completion:(id /* block */)completion;
- (void)removeLevelsForFactorsImmediately:(id)immediately withNamespace:(id)namespace queue:(id)queue completion:(id /* block */)completion;
- (BOOL)setPurgeabilityLevelsForFactors:(id)factors withNamespaceName:(id)name;
- (id)purgeabilityLevelsForFactorsWithNamespaceName:(id)name;
- (BOOL)setFactorsProvisionalForNamespace:(id)namespace error:(id *)error;
- (BOOL)promoteFactorsForNamespace:(id)namespace error:(id *)error;
- (unsigned long long)statusOfDownloadForFactors:(id)factors withNamespace:(id)namespace token:(id *)token queue:(id)queue progress:(id /* block */)progress completion:(id /* block */)completion;
- (void)removeDownloadStatusHandlersWithToken:(id)token;
- (id)levelForFactor:(id)factor withNamespace:(unsigned int)namespace;
- (id)factorLevelsWithNamespace:(unsigned int)namespace;
- (id)addUpdateHandlerForNamespaceId:(unsigned int)id usingBlock:(id /* block */)block;
- (id)addUpdateHandlerForNamespaceId:(unsigned int)id queue:(id)queue usingBlock:(id /* block */)block;
- (id)treatmentIdWithNamespace:(unsigned int)namespace;
- (id)experimentIdWithNamespace:(unsigned int)namespace;
- (void)downloadNamespaceWithName:(id)name options:(id)options completion:(id /* block */)completion;
- (void)_invalidateFactors;
- (void)dispose;
- (BOOL)immediateDownloadForNamespaceNames:(id)names allowExpensiveNetworking:(BOOL)networking error:(id *)error;
- (BOOL)_hasAppropriatePermissionsForNamespaceName:(id)name;
- (BOOL)evaluateBMLTTargetingExpression:(id)expression withParameters:(id)parameters error:(id *)error;
- (void)_logBMLTCustomTargetingWithResult:(BOOL)result;
@end

#endif /* TRIClient_h */
