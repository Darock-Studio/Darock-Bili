//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1262.300.81.4.10
//
#ifndef CKCoreChatController_h
#define CKCoreChatController_h
@import Foundation;

#include "CKScrollViewController.h"
#include "CKConversation.h"
#include "CKCoreChatControllerDelegate-Protocol.h"
#include "CKFullScreenBalloonViewController.h"
#include "CKMacToolbarController.h"
#include "CKScheduledUpdater.h"
#include "CKTranscriptCollectionView.h"
#include "IMChatSendProgressDelegate-Protocol.h"
#include "IMSystemMonitorListener-Protocol.h"

@class IMChat, NSCountedSet, NSString, STLockoutViewController, UIProgressView;
@protocol CKViewController<CKCoreTranscriptControllerProtocol;

@interface CKCoreChatController : CKScrollViewController<IMChatSendProgressDelegate, IMSystemMonitorListener>

@property (retain, nonatomic) CKConversation *conversation;
@property (readonly, nonatomic) BOOL shouldUseInitialViewSize;
@property (readonly, nonatomic) IMChat *chat;
@property (retain, nonatomic) CKViewController<CKCoreTranscriptControllerProtocol> *collectionViewController;
@property (nonatomic) BOOL initialLayoutComplete;
@property (readonly, nonatomic) double balloonMaxWidth;
@property (readonly, nonatomic) double gradientBottomPlaceholderHeight;
@property (nonatomic) BOOL ignoreLastBalloonVisibleInMarkAsReadCheck;
@property (retain, nonatomic) CKScheduledUpdater *refreshServiceForSendingUpdater;
@property (retain, nonatomic) UIProgressView *progressBar;
@property (nonatomic) BOOL sendingMessage;
@property (nonatomic) double sendProgress;
@property (nonatomic) unsigned long long sendProgressSendCount;
@property (nonatomic) unsigned long long sendProgressTotalCount;
@property (retain, nonatomic) CKFullScreenBalloonViewController *fullScreenBalloonViewController;
@property (nonatomic) long long acknowledgmentToSend;
@property (nonatomic) BOOL disableAnimationsUnderTest;
@property (retain, nonatomic) STLockoutViewController *lockoutViewController;
@property (nonatomic) BOOL isShowingLockoutView;
@property (retain, nonatomic) CKMacToolbarController *macToolbarController;
@property (retain, nonatomic) NSCountedSet *activePinningInputViewReasons;
@property (nonatomic) BOOL needsEndPinningInputViewsForSwitchingConversationAfterConversationIsSet;
@property (weak, nonatomic) NSObject<CKCoreChatControllerDelegate> *delegate;
@property (readonly, nonatomic) CKTranscriptCollectionView *collectionView;
@property (readonly, nonatomic) BOOL shouldDismissAfterSend;
@property (readonly, nonatomic) BOOL shouldDisplayTextEntry;
@property (nonatomic) BOOL viewIsVisible;
@property (nonatomic) BOOL transitionedFromComposing;
@property (nonatomic) BOOL userInitiatedTranscriptPush;
@property (nonatomic) BOOL shareWasCreated;
@property (nonatomic) struct CGSize { double x0; double x1; } initialViewSize;
@property (nonatomic) BOOL showingInStandAloneWindow;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (Class)_gradientReferenceViewClass;
+ (Class)transcriptControllerClass;

/* instance methods */
- (id)lazyCreatedActivePinningInputViewReasons;
- (void)beginPinningInputViewsForReason:(id)reason;
- (void)endPinningInputViewsForReason:(id)reason;
- (id)_nicknameBannerUpdatesAndStyle:(unsigned long long *)style;
- (id)createMutableContact:(id)contact withNicknameUpdate:(id)update updateType:(unsigned long long)type addHandleToContact:(BOOL)contact;
- (BOOL)saveContact:(id)contact shouldUpdate:(BOOL)update;
- (BOOL)_haveUpdateAlready:(id)already forContact:(id)contact;
- (id)_retrieveNicknameBannerUpdatesIfNeeded:(unsigned long long *)needed;
- (BOOL)accountCanCreateNickname;
- (BOOL)_alwaysShowNicknameBanners;
- (void)updateContact:(id)contact withHandle:(id)handle;
- (BOOL)_isRunningPPT;
- (void)dealloc;
- (id)initWithConversation:(id)conversation;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)appear;
- (void)viewDidAppear:(BOOL)appear;
- (void)viewDidAppearDeferredSetup;
- (void)viewWillDisappear:(BOOL)disappear;
- (void)viewDidLayoutSubviews;
- (BOOL)_controllerEligibleForSetConversation;
- (void)parentControllerDidBecomeActive;
- (void)systemApplicationWillEnterForeground;
- (void)parentControllerDidResume:(BOOL)resume animating:(BOOL)animating;
- (void)_performResume;
- (void)prepareForSuspend;
- (void)sendComposition:(id)composition;
- (void)setupStateForLaunchURL:(id)url;
- (id)gradientReferenceView;
- (id)_handleIDsForCurrentConversation;
- (BOOL)_conversationHasReplyEnabled;
- (BOOL)_shouldAllowReply;
- (BOOL)_shouldAllowReplyFromLockScreen;
- (BOOL)_deviceIsPasscodeLocked;
- (BOOL)conversationAllowedByScreenTime;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_initialFrameForCollectionView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_initialFrameForGradientReferenceView;
- (void)setConversation:(id)conversation forceReload:(BOOL)reload;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })calculateTranscriptMarginInsets;
- (id)viewToInsertTranscriptCollectionViewBelow;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })calculateTranscriptSafeAreaInsets;
- (void)_removeExistingCollectionViewController;
- (void)applyInitialContextToCollectionViewIfNeeded;
- (void)_setConversationDeferredSetup;
- (void)transcriptCollectionViewControllerNeedsChatItemLayoutInvalidation:(id)invalidation;
- (void)transcriptCollectionViewController:(id)controller didSelectItemAtIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller didDeselectItemAtIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller balloonView:(id)view tappedForChatItem:(id)item;
- (void)_handleTapEventForBalloonView:(id)view atIndexPath:(id)path;
- (void)_handleShowInlineReplyForItemWithIndexPath:(id)path replyTransitionProperties:(id)properties;
- (void)transcriptCollectionViewController:(id)controller balloonView:(id)view doubleTappedItemAtIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller balloonView:(id)view longPressedForItemWithIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller balloonView:(id)view selectedItemAtIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller balloonView:(id)view showInlineReplyForItemWithIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller balloonView:(id)view showInlineReplyForItemWithIndexPath:(id)path withReplyTransitionProperties:(id)properties;
- (void)transcriptCollectionViewController:(id)controller balloonViewTitleTappedForItemWithIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller replyButtonType:(long long)type tappedForRowAtIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller didTapReplyCountStatusButtonForChatItem:(id)item;
- (void)transcriptCollectionViewControllerWillInset:(id)inset targetContentInset:(inout struct UIEdgeInsets { double x0; double x1; double x2; double x3; } *)inset;
- (void)transcriptCollectionViewControllerDidInset:(id)inset;
- (BOOL)transcriptCollectionViewController:(id)controller balloonView:(id)view shouldSelectChatItem:(id)item;
- (BOOL)transcriptCollectionViewControllerShouldPlayAudio:(id)audio;
- (void)transcriptCollectionViewControllerPlayingAudioDidChange:(id)change;
- (void)transcriptCollectionViewControllerDidSetChatItems:(id)items;
- (void)transcriptCollectionViewControllerPerformBatchUpdateCompleted:(id)completed;
- (void)transcriptCollectionViewController:(id)controller collectionViewContentSizeDidChange:(struct CGSize { double x0; double x1; })change;
- (void)transcriptCollectionViewControllerRestingStateDidChange:(id)change;
- (BOOL)transcriptCollectionViewControllerShouldShouldScrollToTopForStatusBarTap:(id)tap;
- (BOOL)transcriptCollectionViewControllerShouldScrollToBottomForLocalSentMessage:(id)message;
- (void)transcriptCollectionViewController:(id)controller shouldScrollToHighlightedMessage:(id)message;
- (void)transcriptCollectionViewControllerWillScrollToBottom:(id)bottom;
- (void)transcriptCollectionViewControllerReportSpamButtonTapped:(id)tapped;
- (void)transcriptCollectionViewControllerBlockContactButtonTapped:(id)tapped;
- (void)transcriptCollectionViewControllerWillDisplayLastBalloon:(id)balloon;
- (void)transcriptCollectionViewControllerDidInsertAssociatedChatItem:(id)item;
- (id)traitCollectionForTranscriptCollectionViewController:(id)controller;
- (void)traitCollectionDidChange:(id)change;
- (void)invalidateChatItemLayoutForTraitCollectionChangeIfNeeded:(id)needed;
- (double)transcriptCollectionViewController:(id)controller targetAlphaForChatItem:(id)item;
- (BOOL)transcriptCollectionViewControllerPlaybackForOutgoingEffectsIsAllowed:(id)allowed;
- (BOOL)transcriptCollectionViewController:(id)controller shouldSetupFullscreenEffectUI:(id)ui;
- (BOOL)transcriptCollectionViewControllerShouldLayoutFullscreenEffects:(id)effects;
- (BOOL)transcriptCollectionViewController:(id)controller shouldCleanupFullscreenEffectUI:(id)ui;
- (id)transcriptCollectionViewControllerAdditionalFullscreenEffectViews:(id)views;
- (id)transcriptCollectionViewControllerOuterEffectPresentingView:(id)view;
- (void)transcriptCollectionViewController:(id)controller willBeginImpactEffectAnimationWithSendAnimationContext:(id)context;
- (void)transcriptCollectionViewController:(id)controller didEndImpactEffectAnimationWithSendAnimationContext:(id)context;
- (void)transcriptCollectionViewController:(id)controller balloonView:(id)view didRequestPresentationStyle:(unsigned long long)style forChatItem:(id)item allowAllStyles:(BOOL)styles;
- (BOOL)transcriptCollectionViewController:(id)controller balloonViewDidRequestCommitPayload:(id)payload forPlugin:(id)plugin allowAllCommits:(BOOL)commits error:(id *)error;
- (void)transcriptCollectionViewController:(id)controller balloonViewDidRequestStartEditingPayload:(id)payload forPlugin:(id)plugin allowAllCommits:(BOOL)commits completionHandler:(id /* block */)handler;
- (BOOL)transcriptCollectionViewController:(id)controller balloonViewDidRequestCommitSticker:(id)sticker forPlugin:(id)plugin allowAllCommits:(BOOL)commits error:(id *)error;
- (void)transcriptCollectionViewControllerWillBeginFullscreenEffectAnimationForOutgoingMessage:(id)message;
- (void)transcriptCollectionViewController:(id)controller viewedCommSafetyItemWithIndexPath:(id)path;
- (void)transcriptCollectionViewController:(id)controller viewedCommSafetyAssociatedItemsWithIndexPath:(id)path;
- (void)_registerCommSafetyReceivedEventForTransfer:(id)transfer messageGUID:(id)guid;
- (void)transcriptCollectionViewController:(id)controller showMessageSomeoneForItemWithIndexPath:(id)path;
- (void)messageSomeonePressed;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })gradientFrameWithInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)transcriptCollectionViewController:(id)controller requestDeleteJunkConversation:(id)conversation;
- (void)transcriptCollectionViewController:(id)controller requestRecoverJunkConversation:(id)conversation;
- (void)transcriptCollectionViewControllerWillUpdateTranscriptChatItems:(id)items;
- (void)transcriptCollectionViewControllerDidUpdateTranscriptChatItems:(id)items;
- (void)_updateForNewPreferredService;
- (void)refreshServiceForSending;
- (void)_refreshServiceForSending;
- (void)_willSendComposition:(id)composition inConversation:(id)conversation;
- (void)_didSendCompositionInConversation:(id)conversation;
- (void)_inviteToViewFocusStatusIfNeeded;
- (BOOL)isSafeToMarkAsRead;
- (void)_markAsReadIfNecessary;
- (id)scrollView;
- (void)contentInsetWillChange:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })change animated:(BOOL)animated duration:(double)duration animationCurve:(long long)curve;
- (void)contentInsetDidChangeAnimated:(BOOL)animated duration:(double)duration animationCurve:(long long)curve;
- (BOOL)shouldIgnoreKeyboardAnimationDuration;
- (void)keyboardWillHideViaGesture;
- (void)updateScrollOffsetForAppearingKeyboard;
- (void)setupScrollingForKeyboardInteraction;
- (void)_updateTitleAnimated:(BOOL)animated;
- (BOOL)shouldListParticipantsInTitle;
- (void)_setTitle:(id)title animated:(BOOL)animated;
- (void)_registerSendProgressDelegate;
- (void)_deregisterSendProgressDelegate;
- (void)chat:(id)chat progressDidChange:(float)change sendingMessages:(id)messages sendCount:(unsigned long long)count totalCount:(unsigned long long)count finished:(BOOL)finished;
- (void)_updateNavigationButtons;
- (void)registerNotificationsForConversation:(id)conversation;
- (void)registerNotifications;
- (void)preferredSendingServiceChanged;
- (void)_preferredServiceChangedNotification:(id)notification;
- (void)_downgradeStateChangedNotification:(id)notification;
- (void)_displayNameUpdatedNotification:(id)notification;
- (void)_availabilityDaemonDisconnectedNotification:(id)notification;
- (void)_handleAvailabilityChangedNotification:(id)notification;
- (void)_handleAvailabilityInvitationReceivedNotification:(id)notification;
- (void)_handleAvailabilityStateChangedNotification:(id)notification;
- (void)_localeDidChangeNotification:(id)notification;
- (void)_chatRegistryDidReloadNotification:(id)notification;
- (void)_chatsRemergedNotification:(id)notification;
- (void)_reassignConversationWithDeferredReload:(BOOL)reload;
- (void)_transferFinishedNotification:(id)notification;
- (void)handleContentSizeCategoryDidChangeNotification:(id)notification;
- (void)_increaseContrastDidChangeNotification:(id)notification;
- (void)_transferRestoredNotification:(id)notification;
- (void)_handleAddressBookChangedNotification:(id)notification;
- (void)_conversationListFinishedMerging:(id)merging;
- (void)significantTimeChange;
- (void)_refreshActiveChat:(id)chat;
- (id)indexPathForMessageGUID:(id)guid messagePartIndex:(long long)index;
- (struct CGPoint { double x0; double x1; })contentOffsetForIndexPath:(id)path viewToAlignWith:(id)with allowOverScroll:(BOOL)scroll;
- (struct CGPoint { double x0; double x1; })contentOffsetForIndexPath:(id)path viewToAlignWith:(id)with allowOverScroll:(BOOL)scroll scrollPosition:(unsigned long long)position;
- (void)scrollToHighlightedMessageScrollContext:(id)context;
- (id)textInputContextIdentifier;
- (id)_fullScreenBalloonViewControllerWithChatItem:(id)item;
- (id)_fullScreenBalloonViewControllerWithChatItem:(id)item displayConfiguration:(id)configuration;
- (void)showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:(id)path;
- (void)showFullScreenAcknowledgmentPickerForChatItem:(id)item;
- (void)_dismissFullScreenBubbleViewControllerAnimated:(BOOL)animated withSendAnimation:(BOOL)animation completion:(id /* block */)completion;
- (void)fullScreenBalloonViewController:(id)controller willAppearAnimated:(BOOL)animated;
- (void)fullScreenBalloonViewController:(id)controller didAppearAnimated:(BOOL)animated;
- (void)fullScreenBalloonViewController:(id)controller willDisappearWithSendAnimation:(BOOL)animation duration:(double)duration;
- (void)fullScreenBalloonViewControllerDidDisappear:(id)disappear;
- (void)fullScreenBalloonViewController:(id)controller sendMessageAcknowledgment:(long long)acknowledgment forChatItem:(id)item;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })fullScreenBalloonViewController:(id)controller balloonFrameForChatItem:(id)item;
- (void)fullScreenBalloonViewControllerHandleDismissTap:(id)tap;
- (BOOL)fullScreenBalloonViewControllerShouldShowReplyButton:(id)button;
- (BOOL)wantsReplyButton;
- (BOOL)isInline;
- (void)showInlineReplyControllerForChatItem:(id)item presentKeyboard:(BOOL)keyboard;
- (void)showInlineReplyControllerForChatItem:(id)item presentKeyboard:(BOOL)keyboard replyTransitionProperties:(id)properties;
- (void)dismissInlineReplyController:(BOOL)controller;
- (void)showMessageEditingViewControllerForChatItem:(id)item presentKeyboard:(BOOL)keyboard;
- (void)dismissMessageEditingViewController:(BOOL)controller;
- (id)_threadChatItemForReplyCountChatItem:(id)item chatItems:(id)items;
- (void)systemApplicationDidResume;
- (void)configureWithToolbarController:(id)controller;
- (void)providerWillBeRemovedFromToolbarController:(id)controller;
- (BOOL)itemProviderDisablesTouches;
- (id)toolbarItemForIdentifier:(id)identifier;
- (void)presentMacToolbarController;
- (void)copySelectedChatItemsToPasteboard;
- (id)selectedChatItems;
- (BOOL)fullScreenBalloonViewControllerShouldShowHightlightButton:(id)button forChatItem:(id)item;
- (void)fullScreenBalloonViewController:(id)controller sendMessageHighlight:(BOOL)highlight forChatItem:(id)item;
- (void)fullScreenBalloonViewControllerMessageHighlightButtonDidFinishAnimating:(id)animating;
- (double)_maxEntryViewHeight;
- (BOOL)isSendingMessage;
@end

#endif /* CKCoreChatController_h */
