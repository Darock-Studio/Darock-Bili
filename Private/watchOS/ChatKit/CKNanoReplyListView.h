//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1262.300.81.4.10
//
#ifndef CKNanoReplyListView_h
#define CKNanoReplyListView_h
@import Foundation;

#include "UICollectionView.h"
#include "CKNanoReplyListViewDelegate-Protocol.h"
#include "PUICCollectionViewDataSource-Protocol.h"
#include "UICollectionViewDelegateFlowLayout-Protocol.h"

@class NSArray, NSIndexPath, NSString;

@interface CKNanoReplyListView : UICollectionView<PUICCollectionViewDataSource, UICollectionViewDelegateFlowLayout>

@property (retain, nonatomic) NSArray *replyFrames;
@property (nonatomic) long long maxRepyShownIndex;
@property (nonatomic) BOOL replySent;
@property (weak, nonatomic) NSObject<CKNanoReplyListViewDelegate> *replyDelegate;
@property (retain, nonatomic) NSArray *replies;
@property (retain, nonatomic) NSString *primaryLanguage;
@property (retain, nonatomic) NSIndexPath *targetIndexPathForTesting;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)initialize;
+ (id)_systemLanguage;
+ (struct CGSize { double x0; double x1; })replySizeForReplies:(id)replies width:(double)width primaryLanguage:(id)language frames:(out id *)frames;
+ (struct CGSize { double x0; double x1; })replySizeForReplies:(id)replies width:(double)width primaryLanguage:(id)language;
+ (struct CGSize { double x0; double x1; })_sizeForReply:(id)reply width:(double)width;
+ (BOOL)_isRTLForLanguage:(id)language;
+ (struct CGSize { double x0; double x1; })_sizeForSuggestionsHeaderViewFittingSize:(struct CGSize { double x0; double x1; })size language:(id)language;
+ (BOOL)_replyShouldUseAttributedCell:(id)cell;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (long long)collectionView:(id)view numberOfItemsInSection:(long long)section;
- (void)_applicationDidEnterBackground;
- (void)reportMaxScrollIndex:(BOOL)index;
- (id)collectionView:(id)view cellForItemAtIndexPath:(id)path;
- (struct CGSize { double x0; double x1; })collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)path;
- (void)collectionView:(id)view didSelectItemAtIndexPath:(id)path;
- (void)collectionView:(id)view didDeselectItemAtIndexPath:(id)path;
- (void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)path;
- (void)collectionView:(id)view didEndDisplayingCell:(id)cell forItemAtIndexPath:(id)path;
- (void)didMoveToWindow;
- (struct CGSize { double x0; double x1; })collectionView:(id)view layout:(id)layout referenceSizeForHeaderInSection:(long long)section;
- (id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)path;
- (id)textReplyButtonForTesting:(unsigned long long)testing;
@end

#endif /* CKNanoReplyListView_h */
