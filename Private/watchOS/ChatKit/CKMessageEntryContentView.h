//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1262.300.81.4.10
//
#ifndef CKMessageEntryContentView_h
#define CKMessageEntryContentView_h
@import Foundation;

#include "UIScrollView.h"
#include "CKComposition.h"
#include "CKConversation.h"
#include "CKMediaObject.h"
#include "CKMessageEntryRichTextView.h"
#include "CKMessageEntryRichTextViewDelegate-Protocol.h"
#include "CKMessageEntryTextView.h"
#include "CKMessageEntryViewStyleProtocol-Protocol.h"
#include "IMBalloonPluginDataSourceDelegate-Protocol.h"
#include "UIGestureRecognizerDelegate-Protocol.h"
#include "UITextViewDelegate-Protocol.h"

@class IMPluginPayload, NSArray, NSDictionary, NSString, UIButton, UIFont, UIView;
@protocol UIViewController<CKPluginEntryViewController;

@interface CKMessageEntryContentView : UIScrollView<UITextViewDelegate, CKMessageEntryRichTextViewDelegate, IMBalloonPluginDataSourceDelegate, CKMessageEntryViewStyleProtocol, UIGestureRecognizerDelegate>

@property (weak, nonatomic) CKMessageEntryTextView *activeView;
@property (nonatomic) BOOL shouldShowSubject;
@property (retain, nonatomic) UIViewController<CKPluginEntryViewController> *pluginEntryViewController;
@property (retain, nonatomic) CKMessageEntryTextView *subjectView;
@property (retain, nonatomic) CKMessageEntryRichTextView *textView;
@property (retain, nonatomic) UIView *textAndSubjectDividerLine;
@property (retain, nonatomic) UIView *pluginDividerLine;
@property (nonatomic) BOOL needsTextLayout;
@property (nonatomic) BOOL needsEnsureSelectionVisible;
@property (nonatomic) BOOL needsEnsureTextViewVisible;
@property (nonatomic) BOOL isCompositionExpirable;
@property (nonatomic) BOOL shouldSkipRemovalFromParent;
@property (retain, nonatomic) UIButton *clearPluginButton;
@property (retain, nonatomic) NSString *requestedPlaceholderText;
@property (retain, nonatomic) NSString *overridePlaceholderText;
@property (nonatomic) BOOL pendingShelfPayloadWillAnimateIn;
@property (copy, nonatomic) NSDictionary *bizIntent;
@property (retain, nonatomic) CKMediaObject *shelfMediaObject;
@property (retain, nonatomic) NSArray *collaborationOptions;
@property (retain, nonatomic) UIFont *originalFont;
@property (readonly, nonatomic) BOOL shouldShowPlugin;
@property (nonatomic) BOOL shouldHideClearPluginButton;
@property (retain, nonatomic) CKComposition *composition;
@property (copy, nonatomic) NSString *placeholderText;
@property (readonly, nonatomic) UIView *pluginView;
@property (retain, nonatomic) IMPluginPayload *shelfPluginPayload;
@property (nonatomic) BOOL ignoreEndEditing;
@property (readonly, nonatomic) BOOL active;
@property (readonly, nonatomic) BOOL singleLine;
@property (readonly, nonatomic) BOOL showingDictationPlaceholder;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } contentTextAlignmentInsets;
@property (nonatomic) char balloonColor;
@property (nonatomic) double placeHolderWidth;
@property (nonatomic) BOOL shouldStripEmojis;
@property (nonatomic) BOOL forceEnsureTextViewVisble;
@property (nonatomic) double maxContentWidthWhenExpanded;
@property (nonatomic) double maxPreviewContentWidthWhenExpanded;
@property (nonatomic) double containerViewLineWidth;
@property (nonatomic) double sendButtonTextInsetWidth;
@property (nonatomic) double maxPluginShelfViewWidth;
@property (weak, nonatomic) CKConversation *conversation;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long style;

/* class methods */
+ (void)getClearButtonOffsetTop:(double *)top clearButtonOffsetTrailing:(double *)trailing forPluginWithBundleID:(id)id;
+ (void)prewarmTextView;
+ (id)_createTextView:(BOOL)view shouldUseNonEmojiKeyboard:(BOOL)keyboard;
+ (void)configureMessageBodyEntryTextView:(id)view shouldUseNonEmojiKeyboard:(BOOL)keyboard;
+ (id)_createSubjectView;

/* instance methods */
- (void)dealloc;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })computedPluginViewFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })computedClearPluginButtonFrame;
- (BOOL)_currentPluginPayloadHasPhotosExtensionMediaPayload;
- (BOOL)_currentPluginIsPhotosPlugin;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_pluginMargins;
- (void)layoutSubviews;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame shouldShowSubject:(BOOL)subject shouldDisableAttachments:(BOOL)attachments shouldUseNonEmojiKeyboard:(BOOL)keyboard;
- (void)configureShelfForPluginPayload:(id)payload;
- (void)setupShelfPluginPayload:(id)payload;
- (void)prepareForShelfPayloadAnimation;
- (BOOL)isActive;
- (BOOL)makeActive;
- (BOOL)_shouldDeferUpdateUI;
- (BOOL)isSingleLine;
- (BOOL)isShowingDictationPlaceholder;
- (void)acceptAutocorrectionForChat:(id)chat completionHandler:(id /* block */)handler;
- (void)willAnimateBoundsChange;
- (void)didFinishAnimatedBoundsChange;
- (void)collapseTextFieldsIfInPencilMode;
- (BOOL)textViewShouldBeginEditing:(id)editing;
- (void)textViewDidBeginEditing:(id)editing;
- (void)textViewDidEndEditing:(id)editing;
- (void)textViewDidChange:(id)change;
- (BOOL)textView:(id)view shouldChangeTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (void)textViewDidChangeSelection:(id)selection;
- (BOOL)textView:(id)view shouldInteractWithTextAttachment:(id)attachment inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range interaction:(long long)interaction;
- (void)_provideHapticFeedbackIfNecessaryForText:(id)text;
- (void)didSetAttributedTextOfRichTextEntryView:(id)view;
- (double)maxWidthForPreviewImagesInMessageEntryRichTextView:(id)view;
- (double)_maxWidthForTextView;
- (BOOL)messageEntryRichTextView:(id)view shouldPasteMediaObjects:(id)objects;
- (void)messageEntryRichTextView:(id)view didTapMediaObject:(id)object;
- (void)messageEntryRichTextViewWasTapped:(id)tapped isLongPress:(BOOL)press;
- (void)messageEntryRichTextView:(id)view pastedURL:(id)url;
- (void)messageEntryRichTextViewDidTapHandwritingKey:(id)key;
- (BOOL)messageEntryRichTextView:(id)view shouldRecognizeGesture:(id)gesture;
- (void)messageEntryRichTextViewDidTapMention:(id)mention characterIndex:(double)index;
- (void)messageEntryRichTextView:(id)view didTapCharacterAtIndex:(unsigned long long)index isLongPress:(BOOL)press;
- (void)messageEntryRichTextView:(id)view insertionPointEnteredRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range forMention:(id)mention withEntities:(id)entities;
- (void)messageEntryRichTextViewInsertionPointExitedRangeWithMention:(id)mention;
- (BOOL)messageEntryRichTextViewCanSuggestMentionForCurrentSelection:(id)selection;
- (void)messageEntryRichTextView:(id)view insertMention:(id)mention entity:(id)entity replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)messageEntryRichTextView:(id)view showMentionSuggestionsForEntities:(id)entities replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range completionHandler:(id /* block */)handler;
- (void)messageEntryRichTextViewCancelShowMentionSuggestions:(id)suggestions;
- (BOOL)messageEntryRichTextViewShouldResignFirstResponder:(id)responder;
- (void)pluginPayloadWantsResize:(id)resize;
- (void)plugingPayloadDidLoad:(id)load;
- (double)_calcuateIdealMaxPluginHeight:(BOOL)height;
- (void)ensureSelectionVisibleIfNeeded;
- (void)ensureTextViewVisibleIfNeeded;
- (void)invalidateComposition;
- (void)_layoutTextView:(id)view currentYOffset:(double *)yoffset originX:(double)x maxWidth:(double)width;
- (void)_layoutDividerLine:(id)line leftInset:(double)inset widthInset:(double)inset currentYOffset:(double *)yoffset;
- (void)_updateUI;
- (BOOL)shouldShowClearButton;
- (void)clearPluginButtonTapped:(id)tapped;
- (void)balloonPluginDataSource:(id)source shouldSendAsCopy:(BOOL)copy;
@end

#endif /* CKMessageEntryContentView_h */
