//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2811.42.9.28.8
//
#ifndef MapsSuggestionsBudget_h
#define MapsSuggestionsBudget_h
@import Foundation;

#include "MapsSuggestionsBudgetDelegate-Protocol.h"
#include "MapsSuggestionsCondition-Protocol.h"
#include "MapsSuggestionsObject-Protocol.h"

@class NSMutableDictionary, NSString;
@protocol {Queue="_innerQueue"@"NSObject<OS_dispatch_queue>""_name"@"NSString"}, {vector<MSg::_RollingWindowBudgetRule, std::allocator<MSg::_RollingWindowBudgetRule>>="__begin_"^{_RollingWindowBudgetRule}"__end_"^{_RollingWindowBudgetRule}"__end_cap_"{__compressed_pair<MSg::_RollingWindowBudgetRule *, std::allocator<MSg::_RollingWindowBudgetRule>>="__value_"^{_RollingWindowBudgetRule}}};

@interface MapsSuggestionsBudget : NSObject<MapsSuggestionsObject, MapsSuggestionsCondition> {
  /* instance variables */
  NSString *_name;
  struct Queue { NSObject<OS_dispatch_queue> *_innerQueue; NSString *_name; } _queue;
  struct vector<MSg::_RollingWindowBudgetRule, std::allocator<MSg::_RollingWindowBudgetRule>> { struct _RollingWindowBudgetRule *__begin_; struct _RollingWindowBudgetRule *__end_; struct __compressed_pair<MSg::_RollingWindowBudgetRule *, std::allocator<MSg::_RollingWindowBudgetRule>> { struct _RollingWindowBudgetRule *__value_; } __end_cap_; } _rules;
  NSMutableDictionary *_data;
  NSObject<MapsSuggestionsBudgetDelegate> *_delegate;
}

@property (readonly, nonatomic) NSString *uniqueName;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithDelegate:(id)delegate name:(id)name;
- (void)addRollingWindowOfCount:(unsigned long long)count perTimeInterval:(double)interval name:(id)name;
- (void)addRollingWindowOfCount:(unsigned long long)count perDuration:(const void *)duration name:(id)name;
- (BOOL)hasBudgetLeft;
- (BOOL)spendAtTime:(id)time;
- (BOOL)spendNow;
- (void)reset;
- (id)q_loadStateForRuleName:(id)name;
- (BOOL)q_saveStateForRuleName:(id)name state:(id)state;
- (id)nameForJSON;
- (id)objectForJSON;
- (BOOL)isTrue;
@end

#endif /* MapsSuggestionsBudget_h */
