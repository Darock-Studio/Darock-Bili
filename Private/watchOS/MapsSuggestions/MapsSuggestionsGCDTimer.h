//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2811.42.9.28.8
//
#ifndef MapsSuggestionsGCDTimer_h
#define MapsSuggestionsGCDTimer_h
@import Foundation;

#include "MapsSuggestionsBaseTrigger.h"
#include "MapsSuggestionsTimer-Protocol.h"

@class NSString;
@protocol {Timer="_queue"{Queue="_innerQueue"@"NSObject<OS_dispatch_queue>""_name"@"NSString"}"_name"@"NSString""_timer"@"NSObject<OS_dispatch_source>""_state"{?="firesAt"@"NSDate"}};

@interface MapsSuggestionsGCDTimer : MapsSuggestionsBaseTrigger<MapsSuggestionsTimer> {
  /* instance variables */
  struct Timer { struct Queue { NSObject<OS_dispatch_queue> *_innerQueue; NSString *_name; } _queue; NSString *_name; NSObject<OS_dispatch_source> *_timer; struct { NSDate *firesAt; } _state; } _timer;
}

@property (readonly, nonatomic) NSString *uniqueName;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithName:(id)name queue:(id)queue block:(id /* block */)block;
- (void)scheduleWithTimeInterval:(double)interval repeatAfter:(double)after leeway:(double)leeway;
- (void)scheduleWithTimeInterval:(double)interval leeway:(double)leeway;
- (void)scheduleWithInterval:(struct Duration { struct duration<long long, std::ratio<1, 1000000000>> { long long x0; } x0; })interval repeatAfter:(struct Duration { struct duration<long long, std::ratio<1, 1000000000>> { long long x0; } x0; })after leeway:(struct Duration { struct duration<long long, std::ratio<1, 1000000000>> { long long x0; } x0; })leeway;
- (void)scheduleWithInterval:(struct Duration { struct duration<long long, std::ratio<1, 1000000000>> { long long x0; } x0; })interval leeway:(struct Duration { struct duration<long long, std::ratio<1, 1000000000>> { long long x0; } x0; })leeway;
- (void)unschedule;
- (void)dealloc;
- (id)objectForJSON;
- (void)didAddFirstObserver;
- (void)didRemoveLastObserver;
@end

#endif /* MapsSuggestionsGCDTimer_h */
