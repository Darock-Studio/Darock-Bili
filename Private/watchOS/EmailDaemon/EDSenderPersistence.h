//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef EDSenderPersistence_h
#define EDSenderPersistence_h
@import Foundation;

#include "EDMessageChangeHookResponder-Protocol.h"
#include "EDPersistenceDatabase.h"
#include "EDPersistenceDatabaseSchemaProvider-Protocol.h"
#include "EDPersistenceHookRegistry.h"
#include "EDProtectedDatabasePersistenceReconciliationMergeHandler-Protocol.h"

@class CNContactStore, EFLazyCache, EMBlockedSenderManager, NSString;
@protocol OS_dispatch_queue;

@interface EDSenderPersistence : NSObject<EDMessageChangeHookResponder, EDProtectedDatabasePersistenceReconciliationMergeHandler, EDPersistenceDatabaseSchemaProvider> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _contactStoreLock;
}

@property (readonly, nonatomic) EDPersistenceDatabase *database;
@property (readonly, nonatomic) EMBlockedSenderManager *blockedSenderManager;
@property (readonly, nonatomic) EDPersistenceHookRegistry *hookRegistry;
@property (retain, nonatomic) CNContactStore *contactStore;
@property (readonly, nonatomic) EFLazyCache *emailAddressToBucketCache;
@property (readonly, nonatomic) EFLazyCache *databaseIDToEmailAddressCache;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *processingQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sendersTableName;
+ (id)sendersBucketColumnName;
+ (id)senderAddressesTableName;
+ (id)senderAddressesSenderColumnName;
+ (id)senderAddressesAddressColumnName;
+ (id)tablesAndForeignKeysToResolve:(id *)resolve associationsToResolve:(id *)resolve;
+ (id)sendersTableSchema;
+ (id)senderAddressesTableSchema;
+ (id)addJoinsForSenderBucketToSelectStatement:(id)statement withSourceAddressColumn:(id)column;

/* instance methods */
- (id)initWithDatabase:(id)database blockedSenderManager:(id)manager hookRegistry:(id)registry contactStore:(id)store;
- (void)scheduleRecurringActivity;
- (void)test_tearDown;
- (id)relevantSendersForSearch;
- (void)_invalidateCachesForAddresses:(id)addresses;
- (void)_invalidateCaches;
- (long long)bucketForSenderAddress:(id)address;
- (long long)_bucketForSenderAddress:(id)address;
- (void)moveSenderWithEmailAddresses:(id)addresses toBucket:(long long)bucket;
- (void)_moveSenderWithEmailAddresses:(id)addresses toBucket:(long long)bucket sync:(BOOL)sync userInitiated:(BOOL)initiated;
- (id)_moveSenderWithSimpleEmailAddresses:(id)addresses toBucket:(long long)bucket sync:(BOOL)sync userInitiated:(BOOL)initiated transactionGeneration:(long long *)generation;
- (void)addAddresses:(id)addresses toSender:(id)sender;
- (void)removeAddresses:(id)addresses fromSender:(id)sender;
- (id)_addressIDsForAddresses:(id)addresses connection:(id)connection;
- (BOOL)_addNewSenderWithAddressIDs:(id)ids contactIdentifier:(id)identifier toBucket:(long long)bucket connection:(id)connection senderDatabaseID:(long long *)id;
- (BOOL)_addAddressesWithDatabaseIDs:(id)ids toSenderWithDatabaseID:(id)id connection:(id)connection error:(id *)error;
- (BOOL)_moveSenderWithDatabaseID:(long long)id toBucket:(long long)bucket connection:(id)connection;
- (BOOL)_addNewSendersForEmailAddresses:(id)addresses toBucket:(long long)bucket connection:(id)connection newSenders:(id *)senders;
- (id)_contactIdentifierForSenderWithDatabaseID:(long long)id connection:(id)connection;
- (long long)_bucketForSenderWithDatabaseID:(long long)id connection:(id)connection;
- (id)_emailAddressForDatabaseID:(id)id connection:(id)connection;
- (void)_setIsBlocked:(BOOL)blocked forAddresses:(id)addresses;
- (void)_blockedSendersDidChange:(id)change;
- (id)_addressesToDatabaseIDsForSimpleAddresses:(id)addresses connection:(id)connection;
- (void)_reloadBlockedSendersWithAddresses:(id)addresses;
- (void)_updateBlockedSendersWithBlockedSenderAddresses:(id)addresses newlyBlockedAddresses:(id /* block */)addresses newlyUnblockedAddresses:(id /* block */)addresses;
- (id)_newlyBlockedAddressesForBlockedAddressDatabaseIDs:(id)ids connection:(id)connection;
- (id)_newlyUnblockedAddressesForBlockedAddressDatabaseIDs:(id)ids connection:(id)connection;
- (id)_addressesToDatabaseIDsForSelect:(id)select addressColumns:(id)columns connection:(id)connection error:(id *)error;
- (BOOL)_blockOrUnblockSendersForAddresses:(id)addresses block:(BOOL)block blockedAddressDatabaseIDs:(id)ids connection:(id)connection addressesToUpdate:(id *)update;
- (id)_simpleAddressesForAddresses:(id)addresses;
- (id)_addressesGroupedBySimpleAddressForAddresses:(id)addresses;
- (id)_combineDictionary:(id)dictionary withDictionary:(id)dictionary;
- (id)_addressesGroupedByContactForAddresses:(id)addresses unmatchedAddresses:(id *)addresses otherAddressesByContact:(id *)contact;
- (id)_addressIDsGroupedByContactsForAddressesByContact:(id)contact withConnection:(id)connection addressesByID:(id *)id;
- (void)persistenceDidAddMessages:(id)messages generationWindow:(id)window;
- (void)_moveAddressesFromSentMessagesToPrimaryForMessages:(id)messages;
- (unsigned long long)handleReconciliationMergeErrorForTable:(id)table columnName:(id)name statement:(id)statement journalRowID:(id)id protectedRowID:(id)id connection:(id)connection rowsUpdated:(unsigned long long *)updated error:(id *)error;
@end

#endif /* EDSenderPersistence_h */
