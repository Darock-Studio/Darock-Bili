//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef EDInMemoryThreadQueryHandler_h
#define EDInMemoryThreadQueryHandler_h
@import Foundation;

#include "EDMessageRepositoryQueryHandler.h"
#include "EDMessageQueryHelper.h"
#include "EDMessageQueryHelperDelegate-Protocol.h"
#include "EDThreadReloadSummaryHelper.h"
#include "EDUpdateThrottler.h"
#include "EDVIPManager.h"
#include "EFContentProtectionObserver-Protocol.h"
#include "EFLoggable-Protocol.h"
#include "EMCollectionItemIDStateCapturerDelegate-Protocol.h"
#include "EMMessageListItemQueryResultsObserver-Protocol.h"

@class EFLazyCache, EFProcessTransaction, EMCollectionItemIDStateCapturer, EMMailboxScope, NSArray, NSMutableDictionary, NSMutableOrderedSet, NSString;
@protocol EDRemoteSearchProvider, EFScheduler, OS_dispatch_queue;

@interface EDInMemoryThreadQueryHandler : EDMessageRepositoryQueryHandler<EDMessageQueryHelperDelegate, EFLoggable, EFContentProtectionObserver, EMCollectionItemIDStateCapturerDelegate> {
  /* instance variables */
  NSMutableOrderedSet *_conversationIDs;
  NSMutableDictionary *_threadsByConversationID;
  NSMutableDictionary *_inMemoryThreadsByConversationID;
  NSMutableDictionary *_mailboxesByConversationID;
  NSMutableDictionary *_changesWhilePaused;
  NSMutableDictionary *_oldestThreadsByMailboxObjectIDs;
  EFProcessTransaction *_processTransaction;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _threadsLock;
}

@property (readonly, nonatomic) EDVIPManager *vipManager;
@property (readonly, nonatomic) NSObject<EDRemoteSearchProvider> *remoteSearchProvider;
@property (readonly, nonatomic) NSObject<EMMessageListItemQueryResultsObserver> *resultsObserverIfNotPaused;
@property (retain, nonatomic) EDMessageQueryHelper *messageQueryHelper;
@property (readonly, copy, nonatomic) NSArray *messageSortDescriptors;
@property (readonly, nonatomic) id /* block */ comparator;
@property (readonly, nonatomic) EDUpdateThrottler *updateThrottler;
@property (readonly, nonatomic) EDThreadReloadSummaryHelper *reloadSummaryHelper;
@property (readonly, nonatomic) NSObject<EFScheduler> *scheduler;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *contentProtectionQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *resultQueue;
@property (nonatomic) BOOL didCancel;
@property (nonatomic) BOOL isInitialized;
@property (nonatomic) BOOL hasEverReconciledJournal;
@property (nonatomic) BOOL isPaused;
@property (nonatomic) BOOL hasChangesWhilePaused;
@property (readonly, nonatomic) EMMailboxScope *mailboxScope;
@property (readonly, nonatomic) EFLazyCache *inMemoryThreadCache;
@property (readonly, nonatomic) EMCollectionItemIDStateCapturer *stateCapturer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)log;

/* instance methods */
- (id)initWithQuery:(id)query messagePersistence:(id)persistence hookRegistry:(id)registry remindMeNotificationController:(id)controller vipManager:(id)manager remoteSearchProvider:(id)provider observer:(id)observer observationIdentifier:(id)identifier observationResumer:(id)resumer;
- (void)test_tearDown;
- (void)tearDown;
- (BOOL)start;
- (void)cancel;
- (void)dealloc;
- (void)_prepareToSendUpdates;
- (void)_didSendUpdates;
- (void)_refreshObserver;
- (void)_restartHelper;
- (void)_createHelper;
- (BOOL)_queryHelperIsCurrent:(id)current;
- (void)contentProtectionStateChanged:(long long)changed previousState:(long long)state;
- (void)_contentProtectionChangedToLocked;
- (void)_contentProtectionChangedToUnlocked;
- (long long)_conversationIDFromObjectID:(id)id;
- (id)messageListItemForObjectID:(id)id error:(id *)error;
- (id)threadsAndMessagesForObjectIDs:(id)ids;
- (id)_inMemoryThreadsForObjectIDs:(id)ids cacheResults:(BOOL)results;
- (id)messagesForThread:(id)thread;
- (id)_inMemoryThreadForConversationID:(long long)id;
- (id)_createInMemoryThreadForConversationID:(long long)id;
- (id)_predicateForMessagesInConversations:(id)conversations;
- (void)queryHelper:(id)helper didFindMessages:(id)messages;
- (void)queryHelperDidFindAllMessages:(id)messages;
- (void)queryHelper:(id)helper didAddMessages:(id)messages;
- (void)_messagesWereAdded:(id)added;
- (void)queryHelper:(id)helper messageFlagsDidChangeForMessages:(id)messages;
- (void)queryHelper:(id)helper didUpdateMessages:(id)messages forKeyPaths:(id)paths;
- (void)queryHelper:(id)helper objectIDDidChangeForMessage:(id)message oldObjectID:(id)id oldConversationID:(long long)id;
- (void)queryHelper:(id)helper didDeleteMessages:(id)messages;
- (void)queryHelper:(id)helper conversationIDDidChangeForMessages:(id)messages fromConversationID:(long long)id;
- (void)queryHelper:(id)helper conversationNotificationLevelDidChangeForConversation:(long long)conversation conversationID:(long long)id;
- (id)_updateThreadProxy:(id)proxy threadIsEmpty:(BOOL *)empty;
- (void)_messagesWereChanged:(id)changed forKeyPaths:(id)paths deleted:(BOOL)deleted;
- (id)_messagesByConversationIDForMessages:(id)messages;
- (BOOL)_mergeInThreads:(id)threads forMove:(BOOL)move;
- (BOOL)_reportChanges:(id)changes;
- (BOOL)_reportChanges:(id)changes reloadSummaries:(BOOL)summaries;
- (BOOL)_reportDeletes:(id)deletes;
- (BOOL)_removeThreadProxies:(id)proxies forMove:(BOOL)move;
- (void)_blockedSendersDidChange:(id)change;
- (void)_vipsDidChange:(id)change;
- (void)queryHelperDidFinishRemoteSearch:(id)search;
- (void)queryHelperNeedsRestart:(id)restart;
- (void)_initializeOldestThreadsByMailbox;
- (BOOL)_updateCurrentOldestThreadWithThreadIfApplicable:(id)applicable forMailbox:(id)mailbox;
- (BOOL)_didMergeInThreads:(id)threads;
- (BOOL)_threadsWereDeleted;
- (BOOL)_updateOldestThreadsForMailboxes:(id)mailboxes;
- (void)_notifyObserverOfOldestThreadsByMailboxObjectIDs;
- (id)_messageQueryFromThreadsQuery:(id)query;
- (id)_inMemoryThreadSortDescriptorsForThreadSortDescriptors:(id)descriptors;
- (BOOL)_messageListItemChangeAffectsSorting:(id)sorting;
- (void)logThreadObjectIDsWithMessage:(id)message objectIDs:(id)ids;
- (void)logThreadObjectIDsChangesWithMessage:(id)message newObjectIDs:(id)ids beforeExistingObjectID:(id)id;
- (id)labelForStateCapture;
- (id)itemIDsForStateCaptureWithErrorString:(id *)string;
@end

#endif /* EDInMemoryThreadQueryHandler_h */
