//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 359.4.1.2.1
//
#ifndef CDPDStateMachine_h
#define CDPDStateMachine_h
@import Foundation;

#include "CDPDCircleControl-Protocol.h"
#include "CDPDCircleDelegate-Protocol.h"
#include "CDPDPCSController.h"
#include "CDPDSecureBackupControl-Protocol.h"
#include "CDPDSecureBackupDelegate-Protocol.h"
#include "CDPDSecureBackupDisableCapable-Protocol.h"
#include "CDPDSecureBackupEnableCapable-Protocol.h"

@class CDPContext, CDPInheritanceTrustController, NSXPCConnection;
@protocol CDPStateUIProviderInternal, OS_dispatch_queue;

@interface CDPDStateMachine : NSObject<CDPDSecureBackupDelegate, CDPDCircleDelegate> {
  /* instance variables */
  NSObject<CDPDSecureBackupEnableCapable> *_secureBackupEnableController;
  NSObject<CDPDSecureBackupDisableCapable> *_secureBackupDisableController;
  CDPInheritanceTrustController *_inheritanceTrustController;
  NSXPCConnection *_connection;
  NSObject<OS_dispatch_queue> *_cdpdStatemachineDefaultQueue;
}

@property (retain, nonatomic) NSObject<CDPDSecureBackupControl> *secureBackupController;
@property (retain, nonatomic) NSObject<CDPDCircleControl> *circleController;
@property (retain, nonatomic) CDPDPCSController *pcsController;
@property (retain, nonatomic) CDPContext *context;
@property (retain, nonatomic) NSObject<CDPStateUIProviderInternal> *uiProvider;
@property (nonatomic) BOOL attemptedCDPEnable;

/* instance methods */
- (id)initWithContext:(id)context uiProvider:(id)provider;
- (id)initWithContext:(id)context uiProvider:(id)provider connection:(id)connection;
- (id)initWithContext:(id)context connection:(id)connection;
- (void)dealloc;
- (void)handleCloudDataProtectionStateWithCompletion:(id /* block */)completion;
- (id)_makeCDPEntryEventWithContext:(id)context;
- (void)reportCDPEntryEventWithContext:(id)context;
- (void)_handleCloudDataProtectionStateWithCompletion:(id /* block */)completion;
- (void)_handleiCDPStatusCheckError:(id)error completion:(id /* block */)completion;
- (void)_handleBeneficiaryTrustWithCompletion:(id /* block */)completion;
- (void)_attemptBeneficiaryTrustWithInheritanceKey:(id)key retryCount:(unsigned long long)count completion:(id /* block */)completion;
- (void)_enrollOrDisableCDPAfterEnabledStateVerified:(id /* block */)verified;
- (void)_disableRecoveryKeyWithCompletion:(id /* block */)completion;
- (void)resetAccountCDPStateWithCompletion:(id /* block */)completion;
- (void)_enableSecureBackupWithJoinResult:(id)result completion:(id /* block */)completion;
- (void)_handlePreflightError:(id)error completion:(id /* block */)completion;
- (void)_updateCDPEnableEventWithError:(id)error error:(id)error didEnable:(BOOL)enable;
- (void)_attemptCDPEnable:(id /* block */)cdpenable;
- (void)_updateSOSCompatibilityMode;
- (id)_makeSOSCompatibilityModeEnableEvent:(BOOL)event error:(id)error;
- (void)_initDependenciesWithContext:(id)context;
- (void)_shouldPerformAuthenticatedRepairWithOptionForceFetch:(BOOL)fetch completion:(id /* block */)completion;
- (void)shouldPerformRepairWithOptionForceFetch:(BOOL)fetch completion:(id /* block */)completion;
- (void)_continueShouldPerformRepairWithOptionForceFetch:(BOOL)fetch completion:(id /* block */)completion;
- (id)_makeEscrowRecordControllerWithCurrentContext;
- (BOOL)_localDeviceHasLocalSecret;
- (id)_predicateForRepair;
- (id)_predicateForRecordUpgradeCheckIgnoringBottled;
- (id)_predicateForRecordUpgradeCheck;
- (void)repairCloudDataProtectionStateWithCompletion:(id /* block */)completion;
- (BOOL)_eligibleToSkipAuth;
- (BOOL)_eligibleForSilentAuthenticatedRepair;
- (BOOL)_needsSOSRepair;
- (void)_performSilentlyAuthenticatedRepair:(id /* block */)repair;
- (void)_performInteractivelyAuthenticatedRepair:(id /* block */)repair;
- (void)_refreshAndAuthenticateWithContext:(id)context;
- (void)_authenticatedRepairCloudDataProtectionStateWithCompletion:(id /* block */)completion;
- (BOOL)shouldAllowCDPEnrollment;
- (void)_preflightAccountStateWithContext:(id)context completion:(id /* block */)completion;
- (void)_enableKVSForAccount:(id)account store:(id)store completion:(id /* block */)completion;
- (void)_confirmCDPEligibilityWithCompletion:(id /* block */)completion;
- (void)_recoverSecureBackupWithCircleJoinResult:(id)result completion:(id /* block */)completion;
- (void)_handleInteractiveRecoveryFlowWithCircleJoinResult:(id)result completion:(id /* block */)completion;
- (void)_attemptBackupRecoveryWithLocalSecret:(id)secret type:(unsigned long long)type useCachedSecret:(BOOL)secret circleJoinResult:(id)result completion:(id /* block */)completion;
- (void)_attemptBackupRecoveryByPromptingForRemoteSecretWithLocalSecret:(id)secret localSecretType:(unsigned long long)type useCachedSecret:(BOOL)secret circleJoinResult:(id)result completion:(id /* block */)completion;
- (void)_enableCustodianRecoveryIfAvailableForContext:(id)context;
- (void)_postRecoveryEnableSecureBackupWithContext:(id)context completion:(id /* block */)completion;
- (void)_postFollowUpForSecureBackupCacheInvalidationError;
- (void)_enableSecureBackupWithCircleJoinResult:(id)result completion:(id /* block */)completion;
- (BOOL)_isInSOSCircle;
- (BOOL)_isEligibleForSOSJoin;
- (void)_joinSOSAsynchronouslyFromHandleCloudDataProtectionIfRequired;
- (void)_joinSOSFromRepairCloudDataProtectionIfRequiredWithCompletion:(id /* block */)completion;
- (void)_enableSOSViews;
- (void)_resetAccountCDPStateWithCompletion:(id /* block */)completion;
- (id)circlePeerIDForSecureBackupController:(id)controller;
- (BOOL)synchronizeCircleViewsForSecureBackupContext:(id)context;
- (void)promptForAdoptionOfMultipleICSCWithCompletion:(id /* block */)completion;
- (void)promptForLocalSecretWithCompletion:(id /* block */)completion;
- (void)circleController:(id)controller secureBackupRecordsArePresentWithCompletion:(id /* block */)completion;
- (id)contextForController:(id)controller;
- (id)secureChannelContextForController:(id)controller;
@end

#endif /* CDPDStateMachine_h */
