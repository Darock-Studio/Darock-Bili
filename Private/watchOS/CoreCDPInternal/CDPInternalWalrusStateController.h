//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 359.4.1.2.1
//
#ifndef CDPInternalWalrusStateController_h
#define CDPInternalWalrusStateController_h
@import Foundation;

#include "CDPDAccount.h"
#include "CDPWalrusSecurityProxy-Protocol.h"

@class ACAccountStore, CDPAccount;
@protocol CDPProtectedCloudStorageProxy;

@interface CDPInternalWalrusStateController : NSObject {
  /* instance variables */
  NSObject<CDPWalrusSecurityProxy> *_securityProxy;
  NSObject<CDPProtectedCloudStorageProxy> *_pcsProxy;
  CDPAccount *_cdpAccount;
  CDPDAccount *_cdpDaemonAccount;
  ACAccountStore *_accountStore;
}

/* instance methods */
- (id)initWithContext:(id)context;
- (id)initWithAccount:(id)account cdpdAccount:(id)account securityProxy:(id)proxy pcsProxy:(id)proxy;
- (id)initWithAccount:(id)account cdpdAccount:(id)account securityProxy:(id)proxy pcsProxy:(id)proxy accountStore:(id)store;
- (unsigned long long)walrusStatusWithContext:(id)context error:(id *)error;
- (unsigned long long)_walrusStatusForPrimaryAccountWithError:(id *)error;
- (unsigned long long)_walrusStatusWithOptions:(id)options withError:(id *)error;
- (void)repairWalrusStatusWithCompletion:(id /* block */)completion;
- (id)_fetchiCDPAccountInfoDictionaryWithContext:(id)context error:(id *)error;
- (unsigned long long)_pcsAccountInfoStatusUsingICDP:(id)icdp;
- (unsigned long long)_escrowedKeysStatusUsingICDP:(id)icdp;
- (void)setWalrusStatusEnabled:(BOOL)enabled completion:(id /* block */)completion;
- (void)_setAccountTelemetryOptInConfig:(BOOL)config altDSID:(id)dsid authController:(id)controller accountManager:(id)manager completion:(id /* block */)completion;
- (void)webAccessStatusWithCompletion:(id /* block */)completion;
- (void)setWebAccessStatusEnabled:(BOOL)enabled completion:(id /* block */)completion;
- (id)_eligibleAccountWithContext:(id)context checkWithServer:(BOOL)server requireCKAccount:(BOOL)ckaccount error:(id *)error;
- (id)_eligiblePrimaryAccountForFlow:(unsigned long long)flow error:(id *)error;
- (unsigned long long)_statusForError:(id)error;
- (void)_updateWalrusStateAndPerformPostEnablementActions:(BOOL)actions context:(id)context account:(id)account completion:(id /* block */)completion;
- (void)_updateWalrusState:(BOOL)state context:(id)context account:(id)account completion:(id /* block */)completion;
- (id)_optionsWithContext:(id)context;
@end

#endif /* CDPInternalWalrusStateController_h */
