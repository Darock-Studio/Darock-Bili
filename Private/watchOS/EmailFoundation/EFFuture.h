//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef EFFuture_h
#define EFFuture_h
@import Foundation;

#include "EFFuture-Protocol.h"
#include "EFObserver-Protocol.h"
#include "EFPromisePrivate-Protocol.h"

@class NSConditionLock, NSError, NSMutableArray, NSString;
@protocol EFFutureDelegate;

@interface EFFuture : NSObject<EFPromisePrivate, EFFuture> {
  /* instance variables */
  NSConditionLock *_stateLock;
  NSError *_error;
  NSMutableArray *_completionBlocks;
}

@property (readonly, nonatomic) id result;
@property (readonly, nonatomic) id resultIfAvailable;
@property (readonly) id /* block */ completionHandlerAdapter;
@property (readonly) id /* block */ boolErrorCompletionHandlerAdapter;
@property (readonly) id /* block */ errorOnlyCompletionHandlerAdapter;
@property (readonly) NSObject<EFObserver> *firstResultObserverAdapter;
@property (readonly) NSObject<EFObserver> *resultsObserverAdapter;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak) NSObject<EFFutureDelegate> *delegate;
@property (readonly) BOOL finished;
@property (readonly) BOOL cancelled;

/* class methods */
+ (id)nullFuture;
+ (id)futureWithResult:(id)result;
+ (id)futureWithError:(id)error;
+ (id)futureWithBlock:(id /* block */)block;
+ (id)onScheduler:(id)scheduler futureWithBlock:(id /* block */)block;
+ (id)lazyFutureWithBlock:(id /* block */)block;
+ (id)onScheduler:(id)scheduler lazyFutureWithBlock:(id /* block */)block;
+ (void)_always:(id)_always withBlock:(id /* block */)block scheduler:(id)scheduler;
+ (id)_then:(id)_then withBlock:(id /* block */)block scheduler:(id)scheduler;
+ (id)_recover:(id)_recover withBlock:(id /* block */)block scheduler:(id)scheduler;
+ (id)chain:(id)chain;
+ (id)join:(id)join;
+ (id)combine:(id)combine;
+ (id)_join:(id)_join ignoreFailures:(BOOL)failures;
+ (id)sequence:(id)sequence;

/* instance methods */
- (id)init;
- (id)result:(id *)result;
- (id)resultWithTimeout:(double)timeout error:(id *)error;
- (id)resultIfAvailable:(id *)available;
- (id)resultBeforeDate:(id)date error:(id *)error;
- (BOOL)isFinished;
- (BOOL)isCancelled;
- (BOOL)tryCancel;
- (void)cancel;
- (void)didCancel;
- (BOOL)finishWithResult:(id)result error:(id)error;
- (void)_finishWithFuture:(id)future;
- (BOOL)finishWithResult:(id)result;
- (BOOL)finishWithError:(id)error;
- (void)finishWithFuture:(id)future;
- (BOOL)_nts_isFinished;
- (void)addSuccessBlock:(id /* block */)block;
- (void)onScheduler:(id)scheduler addSuccessBlock:(id /* block */)block;
- (void)addFailureBlock:(id /* block */)block;
- (void)onScheduler:(id)scheduler addFailureBlock:(id /* block */)block;
- (void)_addCompletionBlock:(id /* block */)block;
- (void)_flushCompletionBlocks;
- (void)always:(id /* block */)always;
- (void)onScheduler:(id)scheduler always:(id /* block */)always;
- (id)then:(id /* block */)then;
- (id)onScheduler:(id)scheduler then:(id /* block */)then;
- (id)recover:(id /* block */)recover;
- (id)onScheduler:(id)scheduler recover:(id /* block */)recover;
- (id)map:(id /* block */)map;
- (id)onScheduler:(id)scheduler map:(id /* block */)map;
@end

#endif /* EFFuture_h */
