//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef EFInt64Set_h
#define EFInt64Set_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSMutableCopying-Protocol.h"

@class NSString;
@protocol {set<long long, std::less<long long>, std::allocator<long long> >="__tree_"{__tree<long long, std::less<long long>, std::allocator<long long> >="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long long, void *> > >="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<long long> >="__value_"Q}}};

@interface EFInt64Set : NSObject<NSCopying, NSMutableCopying> {
  /* instance variables */
  struct set<long long, std::less<long long>, std::allocator<long long> > { struct __tree<long long, std::less<long long>, std::allocator<long long> > { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long long, void *> > > { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::less<long long> > { unsigned long long __value_; } __pair3_; } __tree_; } _underlying;
}

@property (readonly, nonatomic) unsigned long long count;
@property (readonly, nonatomic) long long firstIndex;
@property (readonly, nonatomic) long long lastIndex;
@property (readonly, copy, nonatomic) NSString *commaSeparatedString;

/* class methods */
+ (id)indexSet;
+ (id)indexSetWithIndexesInRange:(struct _EFInt64Range { long long x0; unsigned long long x1; })range;

/* instance methods */
- (id)_initWithUnderlyingSet:(const void *)set;
- (id)init;
- (id)_initWithIndexesInRange:(struct _EFInt64Range { long long x0; unsigned long long x1; })range;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)mutableCopyWithZone:(struct _NSZone *)zone;
- (BOOL)containsIndex:(long long)index;
- (unsigned long long)getIndexes:(long long *)indexes maxCount:(unsigned long long)count inIndexRange:(struct _EFInt64Range { long long x0; unsigned long long x1; } *)range;
- (id)indexesInRange:(struct _EFInt64Range { long long x0; unsigned long long x1; })range;
- (id)lowestIndexesInRange:(struct _EFInt64Range { long long x0; unsigned long long x1; })range maxCount:(unsigned long long)count;
- (unsigned long long)_enumerateIndexesInRange:(struct _EFInt64Range { long long x0; unsigned long long x1; } *)range maxCount:(unsigned long long)count withBlock:(id /* block */)block;
- (long long)indexGreaterThanIndex:(long long)index;
- (void)enumerateIndexesUsingBlock:(id /* block */)block;
- (id)description;
@end

#endif /* EFInt64Set_h */
