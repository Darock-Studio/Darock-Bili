//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HMDDataStreamBulkSendProtocol_h
#define HMDDataStreamBulkSendProtocol_h
@import Foundation;

#include "HMDDataStreamProtocol-Protocol.h"
#include "HMFLogging-Protocol.h"
#include "HMFTimerDelegate-Protocol.h"

@class NSMapTable, NSMutableDictionary, NSString;
@protocol HMDDataStreamProtocolDelegate, OS_dispatch_queue;

@interface HMDDataStreamBulkSendProtocol : NSObject<HMFLogging, HMDDataStreamProtocol, HMFTimerDelegate>

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (weak, nonatomic) id accessory;
@property (retain, nonatomic) NSMapTable *listeners;
@property (nonatomic) BOOL isConnected;
@property (readonly, copy, nonatomic) NSString *logIdentifier;
@property unsigned int nextSessionIdentifier;
@property (readonly) NSMapTable *activeBulkSendSessions;
@property (readonly) NSMutableDictionary *pendingBulkSendSessionContextBySessionIdentifier;
@property (readonly) id /* block */ bulkSendSessionContextFactory;
@property (weak, nonatomic) NSObject<HMDDataStreamProtocolDelegate> *dataStream;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL active;

/* class methods */
+ (id)protocolName;
+ (id)logCategory;

/* instance methods */
- (id)initWithQueue:(id)queue accessory:(id)accessory logIdentifier:(id)identifier;
- (id)initWithQueue:(id)queue accessory:(id)accessory logIdentifier:(id)identifier bulkSendSessionContextFactory:(id /* block */)factory;
- (void)addListener:(id)listener fileType:(id)type;
- (void)removeListener:(id)listener;
- (void)_notifyActiveStatusChangedFromPreviousValue:(BOOL)value;
- (void)_closeAllSessionsWithError:(id)error;
- (BOOL)isActive;
- (void)dataStream:(id)stream didFailWithError:(id)error;
- (void)dataStreamInitiatedClose:(id)close;
- (void)dataStreamDidClose:(id)close;
- (void)dataStreamDidOpen:(id)open;
- (void)dataStream:(id)stream didReceiveEvent:(id)event header:(id)header payload:(id)payload;
- (void)dataStream:(id)stream didReceiveRequest:(id)request header:(id)header payload:(id)payload;
- (void)dataStream:(id)stream didReceiveResponse:(id)response header:(id)header payload:(id)payload;
- (void)asyncBulkSendSessionCandidate:(id)candidate didAcceptOnQueue:(id)queue callback:(id /* block */)callback;
- (void)asyncBulkSendSessionCandidate:(id)candidate didRejectWithStatus:(unsigned short)status;
- (void)asyncBulkSendSessionDidCancelSessionWithIdentifier:(id)identifier reason:(unsigned short)reason hadReceivedEof:(BOOL)eof;
- (id)_createSessionCandidateWithRequestHeader:(id)header metadata:(id)metadata;
- (id)_createSessionFromCandidate:(id)candidate queue:(id)queue;
- (void)_sendOpenResponseWithRequestHeader:(id)header streamIdentifier:(id)identifier;
- (void)_sendOpenResponseWithRequestHeader:(id)header bulkSendStatus:(unsigned short)status;
- (void)_sendOpenResponseWithRequestHeader:(id)header payload:(id)payload status:(unsigned short)status;
- (void)_sendOpenResponseWithRequestHeader:(id)header status:(unsigned short)status;
- (id)_createSessionIdentifier;
- (void)_startSessionCandidate:(id)candidate queue:(id)queue callback:(id /* block */)callback;
- (void)_rejectSessionCandidate:(id)candidate status:(unsigned short)status;
- (id)_getBulkSendSessionForSessionIdentifier:(id)identifier;
- (void)_removeBulkSendSessionForSessionIdentifier:(id)identifier;
- (void)_handleOpenWithRequestHeader:(id)header payload:(id)payload;
- (void)_maybeSubmitMetricForDroppedOpenRequestOfType:(id)type;
- (void)_handleCloseMessage:(id)message;
- (void)_handleDataMessage:(id)message;
- (void)_pumpMessage:(id)message session:(id)session;
- (void)_pumpReceiveFailure:(id)failure session:(id)session;
- (void)_cancelSessionWithIdentifier:(id)identifier reason:(unsigned short)reason hadReceivedEof:(BOOL)eof;
- (void)_sendCloseMessageWithIdentifier:(id)identifier reason:(unsigned short)reason;
- (void)_sendAckMessageWithIdentifier:(id)identifier;
- (void)openSessionForFileType:(id)type reason:(id)reason metadata:(id)metadata queue:(id)queue callback:(id /* block */)callback;
- (void)_openSessionForFileType:(id)type reason:(id)reason metadata:(id)metadata queue:(id)queue callback:(id /* block */)callback;
- (void)timerDidFire:(id)fire;
@end

#endif /* HMDDataStreamBulkSendProtocol_h */
