//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HMDDataStreamController_h
#define HMDDataStreamController_h
@import Foundation;

#include "HMDDataStream.h"
#include "HMDDataStreamDelegate-Protocol.h"
#include "HMDDataStreamHAPSetupOperationDelegate-Protocol.h"
#include "HMDDataStreamSetupOperation.h"
#include "HMDDataStreamSocketController-Protocol.h"
#include "HMDHAPAccessory.h"
#include "HMDService.h"
#include "HMFLogging-Protocol.h"
#include "HMFTimerDelegate-Protocol.h"

@class HMFTimer, NSMutableArray, NSString;
@protocol OS_dispatch_queue;

@interface HMDDataStreamController : NSObject<HMDDataStreamHAPSetupOperationDelegate, HMFLogging, HMFTimerDelegate, HMDDataStreamDelegate, HMDDataStreamSocketController>

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *workQueue;
@property (weak, nonatomic) HMDHAPAccessory *accessory;
@property (weak, nonatomic) HMDService *transferManagementService;
@property (retain, nonatomic) HMDDataStream *defaultDataStream;
@property (retain, nonatomic) NSMutableArray *pendingSocketRequests;
@property (retain, nonatomic) HMDDataStreamSetupOperation *setupInProgress;
@property (readonly, nonatomic) id /* block */ dataStreamFactory;
@property (readonly, nonatomic) NSString *logIdentifier;
@property (nonatomic) BOOL supportsDataStreamOverTCP;
@property (nonatomic) BOOL supportsDataStreamOverHAP;
@property (nonatomic) unsigned long long maxControllerTransportMTU;
@property (retain, nonatomic) HMFTimer *idleTimer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)logCategory;

/* instance methods */
- (id)initWithAccessory:(id)accessory service:(id)service workQueue:(id)queue;
- (id)initWithAccessory:(id)accessory service:(id)service workQueue:(id)queue dataStreamFactory:(id /* block */)factory;
- (void)registerForNotifications;
- (void)deRegisterFromNotifications;
- (void)handleAccessoryConfigured:(id)configured;
- (void)_resetTransportInfo;
- (void)handleAccessoryConnected;
- (BOOL)_isDataStreamConfigurationValid;
- (void)_readRequiredTransportCharacteristicsIfNeededWithCompletion:(id /* block */)completion;
- (void)_handleAccessoryConnected;
- (void)handleAccessoryUnconfigured:(id)unconfigured;
- (void)handleAccessoryDisconnected:(id)disconnected;
- (void)_handleAccessoryDisconnected;
- (id)_getActiveProtocolWithName:(id)name;
- (BOOL)canAcceptBulkSendListeners;
- (void)addBulkSendListener:(id)listener fileType:(id)type;
- (void)removeBulkSendListener:(id)listener;
- (void)sendTargetControlWhoAmIWithIdentifier:(unsigned int)identifier;
- (void)openStreamSocketWithApplicationProtocol:(id)protocol completion:(id /* block */)completion;
- (void)_processPendingSocketRequests;
- (void)_failPendingSocketRequestsWithError:(id)error;
- (id)_getStreamProtocol;
- (void)_createStreamSocketWithStreamProtocol:(id)protocol applicationProtocolName:(id)name completion:(id /* block */)completion;
- (BOOL)_isDataStreamCapable;
- (BOOL)setupRequiresCharactertisticReads;
- (void)_initiateStreamSetup;
- (void)dataStreamInitializationSetupOperation:(id)operation didCompleteSupportReadWithStatus:(BOOL)status;
- (void)dataStreamSetupOperation:(id)operation didSucceedWithTransport:(id)transport sessionEncryption:(id)encryption;
- (void)dataStreamSetupOperation:(id)operation didFailWithError:(id)error;
- (void)_cancelStreamTransportWithError:(id)error;
- (void)_createBulkStreamProtocol;
- (void)_resetDefaultDataStream;
- (void)dataStream:(id)stream didFailWithError:(id)error;
- (void)dataStreamDidClose:(id)close;
- (void)dataStreamDidOpen:(id)open;
- (void)dataStreamDidReceiveRawFrame:(id)frame;
- (void)dataStreamDidUpdateActiveStatus:(id)status;
- (void)openBulkSendSessionForFileType:(id)type reason:(id)reason metadata:(id)metadata queue:(id)queue callback:(id /* block */)callback;
- (void)invalidate;
- (void)_startIdleTimer;
- (void)_stopIdleTimer;
- (void)timerDidFire:(id)fire;
@end

#endif /* HMDDataStreamController_h */
