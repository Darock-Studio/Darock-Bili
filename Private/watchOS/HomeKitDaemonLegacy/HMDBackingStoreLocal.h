//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HMDBackingStoreLocal_h
#define HMDBackingStoreLocal_h
@import Foundation;

#include "HMFObject.h"
#include "HMFLogging-Protocol.h"

@class NSMutableArray, NSMutableDictionary, NSString;

@interface HMDBackingStoreLocal : HMFObject<HMFLogging> {
  /* instance variables */
  struct sqlite3 * context;
  void * sqlite3_cache;
  struct sqlite3_stmt * insertZone;
  struct sqlite3_stmt * deleteZone;
  struct sqlite3_stmt * selectZones;
  struct sqlite3_stmt * insertStore;
  struct sqlite3_stmt * selectStores;
  struct sqlite3_stmt * insertGroup;
  struct sqlite3_stmt * deleteGroup;
  struct sqlite3_stmt * selectGroups;
  struct sqlite3_stmt * updateGroupToken;
  struct sqlite3_stmt * updateGroupSubscription;
  struct sqlite3_stmt * insertShare;
  struct sqlite3_stmt * updateShareShare;
  struct sqlite3_stmt * updateShareUsers;
  struct sqlite3_stmt * deleteShare;
  struct sqlite3_stmt * selectShares;
  struct sqlite3_stmt * insertRecord;
  struct sqlite3_stmt * updateRecordSchema;
  struct sqlite3_stmt * selectRecordCountGroup;
  struct sqlite3_stmt * selectRecordGroupTypeSchema;
  struct sqlite3_stmt * selectRecordGroup;
  struct sqlite3_stmt * selectRecordGroupMap;
  struct sqlite3_stmt * selectRecordUUID;
  struct sqlite3_stmt * selectRecordParentUUID;
  struct sqlite3_stmt * selectRecordParent;
  struct sqlite3_stmt * selectRecordName;
  struct sqlite3_stmt * selectRecordUUIDNoShare;
  struct sqlite3_stmt * selectRecordParentNoShare;
  struct sqlite3_stmt * selectRecordNameNoShare;
  struct sqlite3_stmt * selectRecords;
  struct sqlite3_stmt * selectStoreRecords;
  struct sqlite3_stmt * deleteRecord;
  struct sqlite3_stmt * flushPushedXact;
  struct sqlite3_stmt * insertLog;
  struct sqlite3_stmt * updateLogToDiskCommited;
  struct sqlite3_stmt * updateLogXactID;
  struct sqlite3_stmt * selectLog;
  struct sqlite3_stmt * selectChangeExistsLog;
  struct sqlite3_stmt * selectAllLog;
  struct sqlite3_stmt * insertLogOptions;
  struct sqlite3_stmt * selectLogOptions;
  struct sqlite3_stmt * updateLog;
  struct sqlite3_stmt * deleteLog;
  struct sqlite3_stmt * insertArchive;
  struct sqlite3_stmt * selectArchive;
  struct sqlite3_stmt * commit;
  struct sqlite3_stmt * rollback;
  struct sqlite3_stmt * begin;
}

@property (retain, nonatomic) NSMutableArray *zoneCache;
@property (retain, nonatomic) NSMutableDictionary *storeCache;
@property (readonly, nonatomic) NSString *datastoreFile;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)cleanDatastoreFilesAt:(id)at everything:(BOOL)everything;
+ (id)logCategory;

/* instance methods */
- (id)_runSQLite3:(const char *)sqlite3 bind:(id)bind error:(id *)error;
- (id)_createNewDatastore:(id)datastore;
- (id)_createDatastoreTables:(id)tables;
- (id)initWithDB:(id)db migrate:(BOOL)migrate error:(id *)error;
- (id)initWithDatastore:(id)datastore;
- (void)dealloc;
- (id)flush:(BOOL)flush;
- (void)_freeResources;
- (id)_updateRecordWithGroupID:(long long)id name:(id)name schema:(id)schema;
- (id)_instanceResources:(BOOL)resources migrate:(BOOL)migrate;
- (id)_begin;
- (id)_commit;
- (void)_rollback;
- (id)_fillStoreCache;
- (long long)_numUncommittedTransactions;
- (id)_dropUncommittedUnpushedTransactions;
- (id)_fetchUncommittedAndPushedTransactions;
- (unsigned long long)_fetchIDForStore:(id)store error:(id *)error;
- (id)_fillZoneCache;
- (long long)_insertZoneWithName:(id)name error:(id *)error;
- (id)_deleteZoneWithID:(long long)id;
- (id)_fetchZonesWithError:(id *)error;
- (long long)_insertGroupWithZoneID:(long long)id root:(id)root owner:(id)owner subscription:(id)subscription error:(id *)error;
- (id)_deleteGroupWithID:(long long)id;
- (id)_updateGroupWithID:(long long)id serverChangeToken:(id)token;
- (id)_updateGroupWithID:(long long)id subscription:(id)subscription;
- (id)_fetchGroupsForZone:(id)zone withError:(id *)error;
- (id)_updateRecordWithGroupID:(long long)id store:(long long)store name:(id)name record:(id)record uuid:(id)uuid parentUUID:(id)uuid type:(id)type data:(id)data encoding:(long long)encoding schema:(id)schema;
- (id)_updateRecordWithGroupID:(long long)id store:(long long)store record:(id)record data:(id)data encoding:(long long)encoding;
- (id)_updateRecordWithGroupID:(long long)id store:(long long)store record:(id)record;
- (id)_updateRecordWithGroupID:(long long)id store:(long long)store name:(id)name model:(id)model;
- (id)_deleteRecordWithGroupID:(long long)id recordName:(id)name;
- (void)_fetchRecordCountWithGroupID:(long long)id callback:(id /* block */)callback;
- (void)_fetchRecordTypeSchemaWithGroupID:(long long)id callback:(id /* block */)callback;
- (void)_fetchRecordMapWithGroupID:(long long)id callback:(id /* block */)callback;
- (void)_fetchRecordsWithGroupID:(long long)id callback:(id /* block */)callback;
- (void)_fetchRecordsWithGroupID:(long long)id uuids:(id)uuids callback:(id /* block */)callback;
- (id)_fetchRecordWithUUID:(id)uuid root:(id)root error:(id *)error;
- (void)_fetchRecordsWithGroupID:(long long)id parentUuids:(id)uuids callback:(id /* block */)callback;
- (void)_fetchRecordsWithGroupID:(long long)id parent:(id)parent type:(id)type callback:(id /* block */)callback;
- (void)_fetchRecordsWithGroupID:(long long)id names:(id)names callback:(id /* block */)callback;
- (void)_selectAllRecords:(id /* block */)records;
- (unsigned long long)_insertLogWithRoot:(id)root transaction:(id)transaction set:(long long)set error:(id *)error;
- (void)_selectLogWithRoot:(id)root after:(long long)after mask:(long long)mask compare:(long long)compare callback:(id /* block */)callback;
- (void)_selectLogWithMask:(long long)mask compare:(long long)compare callback:(id /* block */)callback;
- (id)_insertLogOptionsWithID:(long long)id options:(id)options;
- (id)_selectLogOptionsWithID:(long long)id;
- (void)_selectAllLog:(id /* block */)log;
- (id)_updateLog:(long long)log mask:(long long)mask set:(long long)set;
- (id)_deleteLog:(long long)log;
- (unsigned long long)_insertArchive:(id)archive identifier:(id)identifier controllerUserName:(id)name error:(id *)error;
- (BOOL)_selectArchiveWithIdentifier:(id)identifier archive:(id *)archive controllerUserName:(id *)name error:(id *)error;
- (id)logIdentifier;
@end

#endif /* HMDBackingStoreLocal_h */
