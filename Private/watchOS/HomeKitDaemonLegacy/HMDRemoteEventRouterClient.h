//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HMDRemoteEventRouterClient_h
#define HMDRemoteEventRouterClient_h
@import Foundation;

#include "HMDRemoteEventRouterAssertionClient-Protocol.h"
#include "HMDRemoteEventRouterClientDataSource-Protocol.h"
#include "HMEMessageDatagramClientDataSource-Protocol.h"
#include "HMEMessageDatagramClientDelegate-Protocol.h"
#include "HMFLogging-Protocol.h"
#include "HMFMessageReceiver-Protocol.h"

@class HMEMessageDatagramClient, HMFMessageDispatcher, NSNotificationCenter, NSString, NSUUID;
@protocol HMMLogEventSubmitting, OS_dispatch_queue, OS_os_log;

@interface HMDRemoteEventRouterClient : NSObject<HMFMessageReceiver, HMFLogging, HMEMessageDatagramClientDataSource, HMEMessageDatagramClientDelegate, HMDRemoteEventRouterAssertionClient> {
  /* instance variables */
  NSObject<OS_os_log> *_logger;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (readonly) HMFMessageDispatcher *messageDispatcher;
@property (readonly, copy) NSString *requestMessageName;
@property (readonly, copy) NSString *updateMessageName;
@property (nonatomic) BOOL isConnected;
@property (nonatomic) BOOL isNetworkAvailable;
@property (readonly, weak) NSObject<HMMLogEventSubmitting> *logEventSubmitter;
@property (readonly, nonatomic) unsigned long long messageTransportRestriction;
@property (readonly, copy) NSUUID *identifier;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;
@property (readonly) NSNotificationCenter *notificationCenter;
@property (readonly, weak) NSObject<HMDRemoteEventRouterClientDataSource> *dataSource;
@property (readonly) BOOL isPrimaryResident;
@property (readonly) HMEMessageDatagramClient *eventRouterClient;
@property (readonly, nonatomic) NSUUID *messageTargetUUID;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)routerClientWithQueue:(id)queue storeReadHandle:(id)handle storeWriteHandle:(id)handle retryIntervalProvider:(id)provider logCategory:(const char *)category;
+ (id)routerClientWithQueue:(id)queue storeReadHandle:(id)handle storeWriteHandle:(id)handle logCategory:(const char *)category;
+ (id)logCategory;

/* instance methods */
- (id)initWithMessageTargetUUID:(id)uuid queue:(id)queue dataSource:(id)source messageDispatcher:(id)dispatcher notificationCenter:(id)center requestMessageName:(id)name updateMessageName:(id)name storeReadHandle:(id)handle storeWriteHandle:(id)handle;
- (id)initWithMessageTargetUUID:(id)uuid queue:(id)queue dataSource:(id)source messageDispatcher:(id)dispatcher notificationCenter:(id)center requestMessageName:(id)name updateMessageName:(id)name storeReadHandle:(id)handle storeWriteHandle:(id)handle logCategory:(const char *)category;
- (id)initWithMessageTargetUUID:(id)uuid queue:(id)queue dataSource:(id)source messageDispatcher:(id)dispatcher notificationCenter:(id)center requestMessageName:(id)name updateMessageName:(id)name storeReadHandle:(id)handle storeWriteHandle:(id)handle retryIntervalProvider:(id)provider logCategory:(const char *)category;
- (id)initWithMessageTargetUUID:(id)uuid queue:(id)queue dataSource:(id)source messageDispatcher:(id)dispatcher notificationCenter:(id)center requestMessageName:(id)name updateMessageName:(id)name logCategory:(const char *)category logEventSubmitter:(id)submitter eventRouterClientFactory:(id /* block */)factory;
- (id)logIdentifier;
- (void)_registerForMessages:(id)messages;
- (void)handlePrimaryResidentConfirmedDeviceIdentifierChangeNotification:(id)notification;
- (void)_handleUpdateMessage:(id)message;
- (void)_handleUpdatedEventsRequest:(id)request originalMessage:(id)message;
- (void)_handleEventUpdateMessage:(id)message fromServer:(id)server events:(id)events completion:(id /* block */)completion;
- (void)_handleCachedEventMessage:(id)message fromServer:(id)server events:(id)events completion:(id /* block */)completion;
- (id)_underlyingMessageDataFromFragmentMessageData:(id)data error:(id *)error;
- (BOOL)clientIsEnabled:(id)enabled;
- (id)client:(id)client upstreamTopicsForTopic:(id)topic;
- (id)client:(id)client forwardingTopicsForTopics:(id)topics;
- (BOOL)client:(id)client isConnectionTerminatingError:(id)error;
- (void)sendChangeRegistrationsMessageWithAddedFilters:(id)filters removedFilters:(id)filters completion:(id /* block */)completion;
- (void)sendChangeRegistrationsMessageWithAddedFilters:(id)filters removedFilters:(id)filters client:(id)client completion:(id /* block */)completion;
- (void)client:(id)client sendChangeRegistrationsWithAddedFilters:(id)filters removedFilters:(id)filters completion:(id /* block */)completion;
- (void)client:(id)client sendConnectWithAddedFilters:(id)filters completion:(id /* block */)completion;
- (void)sendKeepAliveForClient:(id)client completion:(id /* block */)completion;
- (void)sendDisconnectForClient:(id)client completion:(id /* block */)completion;
- (void)client:(id)client fetchWithFilters:(id)filters completion:(id /* block */)completion;
- (void)clientDidConnect:(id)connect serverIdentifier:(id)identifier;
- (void)clientDidDisconnect:(id)disconnect;
- (void)sendMessageWithPayloadMessage:(id)message client:(id)client messageType:(long long)type completion:(id /* block */)completion;
- (void)sendMessageWithPayloadMessage:(id)message messageType:(long long)type destination:(id)destination serverIdentifier:(id)identifier completion:(id /* block */)completion;
- (id /* block */)responseHandlerForMessageIdentifier:(id)identifier serverIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)configureIsPrimaryResident:(BOOL)resident networkAvailable:(BOOL)available additionalPolicies:(id)policies;
- (id)eventRouter;
- (void)networkAvailabilityDidChange:(BOOL)change;
- (void)didChangeHasForegroundClient:(BOOL)client;
- (void)didChangeFetchAvailableCondition:(BOOL)condition;
- (id)dumpStateDescription;
@end

#endif /* HMDRemoteEventRouterClient_h */
