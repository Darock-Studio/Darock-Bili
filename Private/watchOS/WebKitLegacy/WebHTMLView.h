//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WebHTMLView_h
#define WebHTMLView_h
@import Foundation;

#include "WAKView.h"
#include "WebDocumentElement-Protocol.h"
#include "WebDocumentIncrementalSearching-Protocol.h"
#include "WebDocumentOptionsSearching-Protocol.h"
#include "WebDocumentSearching-Protocol.h"
#include "WebDocumentSelection-Protocol.h"
#include "WebDocumentView-Protocol.h"
#include "WebHTMLViewPrivate.h"
#include "WebMultipleTextMatches-Protocol.h"

@class NSString;

@interface WebHTMLView : WAKView<WebDocumentSelection, WebDocumentIncrementalSearching, WebDocumentElement, WebMultipleTextMatches, WebDocumentOptionsSearching, WebDocumentView, WebDocumentSearching> {
  /* instance variables */
  WebHTMLViewPrivate *_private;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)supportedMIMETypes;
+ (id)supportedMediaMIMETypes;
+ (id)supportedImageMIMETypes;
+ (id)supportedNonImageMIMETypes;
+ (id)unsupportedTextMIMETypes;

/* instance methods */
- (id)elementAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)elementAtPoint:(struct CGPoint { double x0; double x1; })point allowShadowContent:(BOOL)content;
- (unsigned long long)countMatchesForText:(id)text inDOMRange:(id)domrange options:(unsigned long long)options limit:(unsigned long long)limit markMatches:(BOOL)matches;
- (void)setMarkedTextMatchesAreHighlighted:(BOOL)highlighted;
- (BOOL)markedTextMatchesAreHighlighted;
- (void)unmarkAllTextMatches;
- (id)rectsForTextMatches;
- (BOOL)_findString:(id)string options:(unsigned long long)options;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })selectionRect;
- (id)selectionTextRects;
- (id)selectionView;
- (struct CGImage *)selectionImageForcingBlackText:(BOOL)text;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })selectionImageRect;
- (void)selectAll;
- (void)deselectAll;
- (id)string;
- (id)selectedString;
- (BOOL)supportsTextEncoding;
- (BOOL)searchFor:(id)for direction:(BOOL)direction caseSensitive:(BOOL)sensitive wrap:(BOOL)wrap startInSelection:(BOOL)selection;
- (unsigned long long)characterIndexForPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectedRange;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })markedRange;
- (long long)conversationIdentifier;
- (BOOL)hasMarkedText;
- (void)unmarkText;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)doCommandBySelector:(SEL)selector;
- (void)insertText:(id)text;
- (void)_selectionChanged;
- (BOOL)_canSmartCopyOrDelete;
- (id)_frame;
- (void)closeIfNotCurrentView;
- (void)_executeSavedKeypressCommands;
- (BOOL)_handleEditingKeyEvent:(void *)event;
- (void)_layoutIfNeeded;
- (void)_web_updateLayoutAndStyleIfNeededRecursive;
- (void)_destroyAllWebPlugins;
- (BOOL)_needsLayout;
- (void)_stopAutoscrollTimer;
- (id)_pluginController;
- (unsigned char)_scrollbarWidthStyle;
- (void)mouseMoved:(id)moved;
- (void)_frameOrBoundsChanged;
- (void)_setAsideSubviews;
- (void)_restoreSubviews;
- (void)viewWillDraw;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test;
- (void)_setToolTip:(id)tip;
- (void)layoutIfNeeded;
- (void)setScale:(float)scale;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionRect;
- (BOOL)_canEdit;
- (BOOL)_canEditRichly;
- (BOOL)_canAlterCurrentSelection;
- (BOOL)_hasSelection;
- (BOOL)_hasSelectionOrInsertionPoint;
- (BOOL)_hasInsertionPoint;
- (BOOL)_isEditable;
- (id)_insertOrderedList;
- (id)_insertUnorderedList;
- (BOOL)_canIncreaseSelectionListLevel;
- (BOOL)_canDecreaseSelectionListLevel;
- (id)_increaseSelectionListLevel;
- (id)_increaseSelectionListLevelOrdered;
- (id)_increaseSelectionListLevelUnordered;
- (void)_decreaseSelectionListLevel;
- (void)close;
- (BOOL)_isUsingAcceleratedCompositing;
- (id)_compositingLayersHostingView;
- (BOOL)_isInPrintMode;
- (BOOL)_beginPrintModeWithMinimumPageWidth:(double)width height:(double)height maximumPageWidth:(double)width;
- (BOOL)_beginPrintModeWithPageWidth:(float)width height:(float)height shrinkToFit:(BOOL)fit;
- (void)_endPrintMode;
- (BOOL)_isInScreenPaginationMode;
- (BOOL)_beginScreenPaginationModeWithPageSize:(struct CGSize { double x0; double x1; })size shrinkToFit:(BOOL)fit;
- (void)_endScreenPaginationMode;
- (double)_adjustedBottomOfPageWithTop:(double)top bottom:(double)bottom limit:(double)limit;
- (id)accessibilityRootElement;
- (id)_documentRange;
- (id)_dataSource;
- (id)_webView;
- (id)_frameView;
- (BOOL)_shouldInsertFragment:(id)fragment replacingDOMRange:(id)domrange givenAction:(long long)action;
- (BOOL)_shouldInsertText:(id)text replacingDOMRange:(id)domrange givenAction:(long long)action;
- (BOOL)_shouldReplaceSelectionWithText:(id)text givenAction:(long long)action;
- (id)_selectedRange;
- (void)_setMouseDownEvent:(id)event;
- (id)_topHTMLView;
- (BOOL)_isTopHTMLView;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (BOOL)callDelegateDoCommandBySelectorIfNeeded:(SEL)needed;
- (struct Command { struct EditorInternalCommand * x0; unsigned char x1; struct RefPtr<WebCore::Document, WTF::RawPtrTraits<WebCore::Document>, WTF::DefaultRefDerefTraits<WebCore::Document>> { struct Document * x0; } x2; struct RefPtr<WebCore::LocalFrame, WTF::RawPtrTraits<WebCore::LocalFrame>, WTF::DefaultRefDerefTraits<WebCore::LocalFrame>> { struct LocalFrame * x0; } x3; })coreCommandBySelector:(SEL)selector;
- (struct Command { struct EditorInternalCommand * x0; unsigned char x1; struct RefPtr<WebCore::Document, WTF::RawPtrTraits<WebCore::Document>, WTF::DefaultRefDerefTraits<WebCore::Document>> { struct Document * x0; } x2; struct RefPtr<WebCore::LocalFrame, WTF::RawPtrTraits<WebCore::LocalFrame>, WTF::DefaultRefDerefTraits<WebCore::LocalFrame>> { struct LocalFrame * x0; } x3; })coreCommandByName:(const char *)name;
- (void)executeCoreCommandBySelector:(SEL)selector;
- (void)executeCoreCommandByName:(const char *)name;
- (void)alignCenter:(id)center;
- (void)alignJustified:(id)justified;
- (void)alignLeft:(id)left;
- (void)alignRight:(id)right;
- (void)copy:(id)copy;
- (void)cut:(id)cut;
- (void)paste:(id)paste;
- (void)delete:(id)delete;
- (void)deleteBackward:(id)backward;
- (void)deleteBackwardByDecomposingPreviousCharacter:(id)character;
- (void)deleteForward:(id)forward;
- (void)deleteToBeginningOfLine:(id)line;
- (void)deleteToBeginningOfParagraph:(id)paragraph;
- (void)deleteToEndOfLine:(id)line;
- (void)deleteToEndOfParagraph:(id)paragraph;
- (void)deleteToMark:(id)mark;
- (void)deleteWordBackward:(id)backward;
- (void)deleteWordForward:(id)forward;
- (void)ignoreSpelling:(id)spelling;
- (void)indent:(id)indent;
- (void)insertBacktab:(id)backtab;
- (void)insertLineBreak:(id)break;
- (void)insertNewline:(id)newline;
- (void)insertNewlineIgnoringFieldEditor:(id)editor;
- (void)insertParagraphSeparator:(id)separator;
- (void)insertTab:(id)tab;
- (void)insertTabIgnoringFieldEditor:(id)editor;
- (void)makeTextWritingDirectionLeftToRight:(id)right;
- (void)makeTextWritingDirectionNatural:(id)natural;
- (void)makeTextWritingDirectionRightToLeft:(id)left;
- (void)moveBackward:(id)backward;
- (void)moveBackwardAndModifySelection:(id)selection;
- (void)moveDown:(id)down;
- (void)moveDownAndModifySelection:(id)selection;
- (void)moveForward:(id)forward;
- (void)moveForwardAndModifySelection:(id)selection;
- (void)moveLeft:(id)left;
- (void)moveLeftAndModifySelection:(id)selection;
- (void)moveParagraphBackwardAndModifySelection:(id)selection;
- (void)moveParagraphForwardAndModifySelection:(id)selection;
- (void)moveRight:(id)right;
- (void)moveRightAndModifySelection:(id)selection;
- (void)moveToBeginningOfDocument:(id)document;
- (void)moveToBeginningOfDocumentAndModifySelection:(id)selection;
- (void)moveToBeginningOfLine:(id)line;
- (void)moveToBeginningOfLineAndModifySelection:(id)selection;
- (void)moveToBeginningOfParagraph:(id)paragraph;
- (void)moveToBeginningOfParagraphAndModifySelection:(id)selection;
- (void)moveToBeginningOfSentence:(id)sentence;
- (void)moveToBeginningOfSentenceAndModifySelection:(id)selection;
- (void)moveToEndOfDocument:(id)document;
- (void)moveToEndOfDocumentAndModifySelection:(id)selection;
- (void)moveToEndOfLine:(id)line;
- (void)moveToEndOfLineAndModifySelection:(id)selection;
- (void)moveToEndOfParagraph:(id)paragraph;
- (void)moveToEndOfParagraphAndModifySelection:(id)selection;
- (void)moveToEndOfSentence:(id)sentence;
- (void)moveToEndOfSentenceAndModifySelection:(id)selection;
- (void)moveToLeftEndOfLine:(id)line;
- (void)moveToLeftEndOfLineAndModifySelection:(id)selection;
- (void)moveToRightEndOfLine:(id)line;
- (void)moveToRightEndOfLineAndModifySelection:(id)selection;
- (void)moveUp:(id)up;
- (void)moveUpAndModifySelection:(id)selection;
- (void)moveWordBackward:(id)backward;
- (void)moveWordBackwardAndModifySelection:(id)selection;
- (void)moveWordForward:(id)forward;
- (void)moveWordForwardAndModifySelection:(id)selection;
- (void)moveWordLeft:(id)left;
- (void)moveWordLeftAndModifySelection:(id)selection;
- (void)moveWordRight:(id)right;
- (void)moveWordRightAndModifySelection:(id)selection;
- (void)outdent:(id)outdent;
- (void)overWrite:(id)write;
- (void)pageDown:(id)down;
- (void)pageDownAndModifySelection:(id)selection;
- (void)pageUp:(id)up;
- (void)pageUpAndModifySelection:(id)selection;
- (void)pasteAsPlainText:(id)text;
- (void)selectAll:(id)all;
- (void)selectLine:(id)line;
- (void)selectParagraph:(id)paragraph;
- (void)selectSentence:(id)sentence;
- (void)selectToMark:(id)mark;
- (void)selectWord:(id)word;
- (void)setMark:(id)mark;
- (void)subscript:(id)subscript;
- (void)superscript:(id)superscript;
- (void)swapWithMark:(id)mark;
- (void)transpose:(id)transpose;
- (void)underline:(id)underline;
- (void)unscript:(id)unscript;
- (void)yank:(id)yank;
- (void)yankAndSelect:(id)select;
- (void)clearText:(id)text;
- (void)toggleBold:(id)bold;
- (void)toggleItalic:(id)italic;
- (void)toggleUnderline:(id)underline;
- (void)jumpToSelection:(id)selection;
- (BOOL)acceptsFirstResponder;
- (BOOL)maintainsInactiveSelection;
- (void)viewWillMoveToWindow:(id)window;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToHostWindow:(id)window;
- (void)viewDidMoveToHostWindow;
- (void)addSubview:(id)subview;
- (void)willRemoveSubview:(id)subview;
- (void)reapplyStyles;
- (void)layoutToMinimumPageWidth:(float)width height:(float)height originalPageWidth:(float)width originalPageHeight:(float)height maximumShrinkRatio:(float)ratio adjustingViewSize:(BOOL)size;
- (void)layout;
- (BOOL)searchFor:(id)for direction:(BOOL)direction caseSensitive:(BOOL)sensitive wrap:(BOOL)wrap;
- (void)clearFocus;
- (BOOL)isOpaque;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)setNeedsLayout:(BOOL)layout;
- (void)setNeedsToApplyStyles:(BOOL)styles;
- (void)drawSingleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)scrollWheel:(id)wheel;
- (BOOL)_isSelectionEvent:(id)event;
- (void)mouseDown:(id)down;
- (void)touch:(id)touch;
- (void)mouseUp:(id)up;
- (void)pressureChangeWithEvent:(id)event;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)setDataSource:(id)source;
- (void)dataSourceUpdated:(id)updated;
- (void)_setPrinting:(BOOL)printing minimumPageLogicalWidth:(float)width logicalHeight:(float)height originalPageWidth:(float)width originalPageHeight:(float)height maximumShrinkRatio:(float)ratio adjustViewSize:(BOOL)size paginateScreenContent:(BOOL)content;
- (void)keyDown:(id)down;
- (void)keyUp:(id)up;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })test;
- (id)_accessibilityParentForSubview:(id)subview;
- (void)centerSelectionInVisibleArea:(id)area;
- (id)_emptyStyle;
- (void)_applyStyleToSelection:(id)selection withUndoAction:(unsigned char)action;
- (void)_applyEditingStyleToSelection:(void *)selection withUndoAction:(unsigned char)action;
- (void)_changeWordCaseWithSelector:(SEL)selector;
- (void)uppercaseWord:(id)word;
- (void)lowercaseWord:(id)word;
- (void)capitalizeWord:(id)word;
- (void)makeBaseWritingDirectionNatural:(id)natural;
- (BOOL)_wantsKeyDownForEvent:(id)event;
- (void)markedTextUpdate:(id)update;
@end

#endif /* WebHTMLView_h */
