//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WebFrame_h
#define WebFrame_h
@import Foundation;

#include "DOMDocument.h"
#include "DOMHTMLElement.h"
#include "WebDataSource.h"
#include "WebFrame.h"
#include "WebFramePrivate.h"
#include "WebFrameView.h"
#include "WebView.h"

@class BOOL *, JSContext, NSArray, NSString, WebScriptObject;

@interface WebFrame : NSObject {
  /* instance variables */
  WebFramePrivate *_private;
}

@property (nonatomic) struct CGColor * caretColor;
@property (readonly, nonatomic) BOOL hasRichlyEditableDragCaret;
@property (readonly, copy, nonatomic) NSString *name;
@property (readonly, nonatomic) WebView *webView;
@property (readonly, nonatomic) WebFrameView *frameView;
@property (readonly, nonatomic) DOMDocument *DOMDocument;
@property (readonly, nonatomic) DOMHTMLElement *frameElement;
@property (readonly, nonatomic) WebDataSource *dataSource;
@property (readonly, nonatomic) WebDataSource *provisionalDataSource;
@property (readonly, nonatomic) WebFrame *parentFrame;
@property (readonly, copy, nonatomic) NSArray *childFrames;
@property (readonly, nonatomic) WebScriptObject *windowObject;
@property (readonly, nonatomic) struct OpaqueJSContext * globalContext;
@property (readonly, nonatomic) JSContext *javaScriptContext;

/* class methods */
+ (id)stringWithData:(id)data textEncodingName:(id)name;
+ (struct Ref<WebCore::LocalFrame, WTF::RawPtrTraits<WebCore::LocalFrame>> { struct LocalFrame * x0; })_createFrameWithPage:(void *)page frameName:(const void *)name frameView:(id)view ownerElement:(void *)element;
+ (void)_createMainFrameWithPage:(void *)page frameName:(const void *)name frameView:(id)view;
+ (struct Ref<WebCore::LocalFrame, WTF::RawPtrTraits<WebCore::LocalFrame>> { struct LocalFrame * x0; })_createSubframeWithOwnerElement:(void *)element page:(void *)page frameName:(const void *)name frameView:(id)view;
+ (void)_createMainFrameWithSimpleHTMLDocumentWithPage:(void *)page frameView:(id)view style:(id)style;

/* instance methods */
- (void *)coreFrame;
- (struct VisiblePosition { struct Position { struct RefPtr<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>, WTF::DefaultRefDerefTraits<WebCore::Node>> { struct Node * x0; } x0; unsigned int x1; unsigned int x2 :3; unsigned int x3 :1; } x0; BOOL x1; })visiblePositionForPoint:(struct CGPoint { double x0; double x1; })point;
- (struct VisiblePosition { struct Position { struct RefPtr<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>, WTF::DefaultRefDerefTraits<WebCore::Node>> { struct Node * x0; } x0; unsigned int x1; unsigned int x2 :3; unsigned int x3 :1; } x0; BOOL x1; })closestWordBoundary:(struct VisiblePosition { struct Position { struct RefPtr<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>, WTF::DefaultRefDerefTraits<WebCore::Node>> { struct Node * x0; } x0; unsigned int x1; unsigned int x2 :3; unsigned int x3 :1; } x0; BOOL x1; })boundary;
- (void)clearSelection;
- (int)selectionState;
- (BOOL)hasSelection;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x0; double x1; })point;
- (void)collapseSelection;
- (void)extendSelection:(BOOL)selection;
- (id)selectionRectsForCoreRange:(const void *)range;
- (id)selectionRectsForRange:(id)range;
- (id)selectionRects;
- (id)wordAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)webVisiblePositionForPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setRangedSelectionBaseToCurrentSelection;
- (void)setRangedSelectionBaseToCurrentSelectionStart;
- (void)setRangedSelectionBaseToCurrentSelectionEnd;
- (void)clearRangedSelectionInitialExtent;
- (void)setRangedSelectionInitialExtentToCurrentSelectionStart;
- (void)setRangedSelectionInitialExtentToCurrentSelectionEnd;
- (void)setRangedSelectionWithExtentPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)setRangedSelectionExtentPoint:(struct CGPoint { double x0; double x1; })point baseIsStart:(BOOL)start allowFlipping:(BOOL)flipping;
- (BOOL)setSelectionWithBasePoint:(struct CGPoint { double x0; double x1; })point extentPoint:(struct CGPoint { double x0; double x1; })point baseIsStart:(BOOL)start allowFlipping:(BOOL)flipping;
- (BOOL)setSelectionWithBasePoint:(struct CGPoint { double x0; double x1; })point extentPoint:(struct CGPoint { double x0; double x1; })point baseIsStart:(BOOL)start;
- (void)setSelectionWithFirstPoint:(struct CGPoint { double x0; double x1; })point secondPoint:(struct CGPoint { double x0; double x1; })point;
- (void)ensureRangedSelectionContainsInitialStartPoint:(struct CGPoint { double x0; double x1; })point initialEndPoint:(struct CGPoint { double x0; double x1; })point;
- (void)aggressivelyExpandSelectionToWordContainingCaretSelection;
- (void)expandSelectionToSentence;
- (int)selectionBaseWritingDirection;
- (void)toggleBaseWritingDirection;
- (void)setBaseWritingDirection:(int)direction;
- (void)moveSelectionToStart;
- (void)moveSelectionToEnd;
- (void)moveSelectionToPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setSelectionGranularity:(int)granularity;
- (void)smartExtendRangedSelection:(int)selection;
- (id)startPosition;
- (id)endPosition;
- (BOOL)renderedCharactersExceed:(unsigned long long)exceed;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })elementRectAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)renderTreeAsExternalRepresentationForPrinting;
- (id)renderTreeAsExternalRepresentationWithOptions:(unsigned long long)options;
- (int)numberOfPagesWithPageWidth:(float)width pageHeight:(float)height;
- (void)printToCGContext:(struct CGContext *)cgcontext pageWidth:(float)width pageHeight:(float)height;
- (BOOL)_isDescendantOfFrame:(id)frame;
- (void)_setShouldCreateRenderers:(BOOL)renderers;
- (struct CGColor *)_bodyBackgroundColor;
- (BOOL)_isFrameSet;
- (BOOL)_firstLayoutDone;
- (BOOL)_isVisuallyNonEmpty;
- (int)_loadType;
- (BOOL)needsLayout;
- (void)_setLoadsSynchronously:(BOOL)synchronously;
- (BOOL)_loadsSynchronously;
- (id)_rectsForRange:(id)range;
- (id)_selectionRangeForFirstPoint:(struct CGPoint { double x0; double x1; })point secondPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_selectionRangeForPoint:(struct CGPoint { double x0; double x1; })point;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_selectedNSRange;
- (void)_selectNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange;
- (BOOL)_isDisplayingStandaloneImage;
- (unsigned int)_pendingFrameUnloadEventCount;
- (void)setTimeoutsPaused:(BOOL)paused;
- (void)setPluginsPaused:(BOOL)paused;
- (void)prepareForPause;
- (void)resumeFromPause;
- (void)selectNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange;
- (void)selectWithoutClosingTypingNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectedNSRange;
- (void)forceLayoutAdjustingViewSize:(BOOL)size;
- (void)_handleKeyEvent:(id)event;
- (void)_selectAll;
- (void)_setSelectionFromNone;
- (void)_restoreViewState;
- (void)_saveViewState;
- (void)deviceOrientationChanged;
- (void)setNeedsLayout;
- (struct CGSize { double x0; double x1; })renderedSizeOfNode:(id)node constrainedToWidth:(float)width;
- (id)deepestNodeAtViewportLocation:(struct CGPoint { double x0; double x1; })location;
- (id)scrollableNodeAtViewportLocation:(struct CGPoint { double x0; double x1; })location;
- (id)approximateNodeAtViewportLocation:(struct CGPoint { double x0; double x1; } *)location;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })renderRectForPoint:(struct CGPoint { double x0; double x1; })point isReplaced:(BOOL *)replaced fontSize:(float *)size;
- (void)_setProhibitsScrolling:(BOOL)scrolling;
- (void)revealSelectionAtExtent:(BOOL)extent;
- (void)resetSelection;
- (BOOL)hasEditableSelection;
- (int)preferredHeight;
- (int)innerLineHeight:(id)height;
- (void)updateLayout;
- (void)setIsActive:(BOOL)active;
- (void)setSelectionChangeCallbacksDisabled:(BOOL)disabled;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForScrollToVisible;
- (id)documentView;
- (int)layoutCount;
- (BOOL)isTelephoneNumberParsingAllowed;
- (BOOL)isTelephoneNumberParsingEnabled;
- (id)selectedDOMRange;
- (void)setSelectedDOMRange:(id)domrange affinity:(unsigned long long)affinity closeTyping:(BOOL)typing;
- (void)setSelectedDOMRange:(id)domrange affinity:(unsigned long long)affinity closeTyping:(BOOL)typing userTriggered:(BOOL)triggered;
- (unsigned long long)selectionAffinity;
- (void)expandSelectionToElementContainingCaretSelection;
- (id)elementRangeContainingCaretSelection;
- (void)expandSelectionToWordContainingCaretSelection;
- (void)expandSelectionToStartOfWordContainingCaretSelection;
- (unsigned short)characterInRelationToCaretSelection:(int)selection;
- (unsigned short)characterBeforeCaretSelection;
- (unsigned short)characterAfterCaretSelection;
- (id)wordRangeContainingCaretSelection;
- (id)wordInRange:(id)range;
- (int)wordOffsetInRange:(id)range;
- (BOOL)spaceFollowsWordInRange:(id)range;
- (id)wordsInCurrentParagraph;
- (BOOL)selectionAtDocumentStart;
- (BOOL)selectionAtSentenceStart;
- (BOOL)selectionAtWordStart;
- (id)rangeByMovingCurrentSelection:(int)selection;
- (id)rangeByExtendingCurrentSelection:(int)selection;
- (void)selectNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange onElement:(id)element;
- (id)markedTextDOMRange;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setMarkedText:(id)text forCandidates:(BOOL)candidates;
- (void)confirmMarkedText:(id)text;
- (void)setText:(id)text asChildOfElement:(id)element;
- (void)setDictationPhrases:(id)phrases metadata:(id)metadata asChildOfElement:(id)element;
- (id)interpretationsForCurrentRoot;
- (void)getDictationResultRanges:(id *)ranges andMetadatas:(id *)metadatas;
- (id)dictationResultMetadataForRange:(id)range;
- (void)recursiveSetUpdateAppearanceEnabled:(BOOL)enabled;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectAtNode:(id)node offset:(int)offset affinity:(unsigned long long)affinity;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })convertDOMRangeToNSRange:(id)nsrange;
- (id)convertNSRangeToDOMRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })domrange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForDOMRange:(id)domrange;
- (struct __CTFont *)fontForSelection:(BOOL *)selection;
- (void)sendScrollEvent;
- (void)_userScrolled;
- (id)stringByEvaluatingJavaScriptFromString:(id)string forceUserGesture:(BOOL)gesture;
- (id)stringForRange:(id)range;
- (void)_replaceSelectionWithText:(id)text selectReplacement:(BOOL)replacement smartReplace:(BOOL)replace matchStyle:(BOOL)style;
- (void)_replaceSelectionWithWebArchive:(id)archive selectReplacement:(BOOL)replacement smartReplace:(BOOL)replace;
- (void)resetTextAutosizingBeforeLayout;
- (void)_setVisibleSize:(struct CGSize { double x0; double x1; })size;
- (void)_setTextAutosizingWidth:(double)width;
- (void)_replaceSelectionWithFragment:(id)fragment selectReplacement:(BOOL)replacement smartReplace:(BOOL)replace matchStyle:(BOOL)style;
- (void)removeUnchangeableStyles;
- (BOOL)hasRichlyEditableSelection;
- (void)_replaceSelectionWithText:(id)text selectReplacement:(BOOL)replacement smartReplace:(BOOL)replace;
- (void)_replaceSelectionWithMarkupString:(id)string baseURLString:(id)urlstring selectReplacement:(BOOL)replacement smartReplace:(BOOL)replace;
- (id)_cacheabilityDictionary;
- (BOOL)_allowsFollowingLink:(id)link;
- (id)_stringByEvaluatingJavaScriptFromString:(id)string withGlobalObject:(struct OpaqueJSValue *)object inScriptWorld:(id)world;
- (struct OpaqueJSContext *)_globalContextForScriptWorld:(id)world;
- (id)_javaScriptContextForScriptWorld:(id)world;
- (void)setAccessibleName:(id)name;
- (BOOL)enhancedAccessibilityEnabled;
- (void)setEnhancedAccessibility:(BOOL)accessibility;
- (id)_layerTreeAsText;
- (id)accessibilityRoot;
- (void)_clearOpener;
- (id)_computePageRectsWithPrintScaleFactor:(float)factor pageSize:(struct CGSize { double x0; double x1; })size;
- (id)_documentFragmentForText:(id)text;
- (id)_documentFragmentForWebArchive:(id)archive;
- (id)_documentFragmentForImageData:(id)data withRelativeURLPart:(id)urlpart andMIMEType:(id)mimetype;
- (BOOL)focusedNodeHasContent;
- (void)_dispatchDidReceiveTitle:(id)title;
- (struct OpaqueJSValue *)jsWrapperForNode:(id)node inScriptWorld:(id)world;
- (id)elementAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_unreachableURL;
- (void)_generateTestReport:(id)report withGroup:(id)group;
- (BOOL)_isIncludedInWebKitStatistics;
- (void)_attachScriptDebugger;
- (void)_detachScriptDebugger;
- (id)_initWithWebFrameView:(id)view webView:(id)view;
- (void)_clearCoreFrame;
- (id)_webHTMLDocumentView;
- (void)_updateBackgroundAndUpdatesWhileOffscreen;
- (void)_setInternalLoadDelegate:(id)delegate;
- (id)_internalLoadDelegate;
- (void)_unmarkAllBadGrammar;
- (void)_unmarkAllMisspellings;
- (BOOL)_hasSelection;
- (void)_clearSelection;
- (id)_findFrameWithSelection;
- (void)_clearSelectionInOtherFrames;
- (id)_dataSource;
- (BOOL)_isCommitting;
- (void)_setIsCommitting:(BOOL)committing;
- (id)_selectedString;
- (id)_stringForRange:(id)range;
- (struct OptionSet<WebCore::PaintBehavior> { unsigned int x0; })_paintBehaviorForDestinationContext:(struct CGContext *)context;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect contentsOnly:(BOOL)only;
- (BOOL)_getVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect;
- (id)_stringByEvaluatingJavaScriptFromString:(id)string;
- (id)_stringByEvaluatingJavaScriptFromString:(id)string forceUserGesture:(BOOL)gesture;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_caretRectAtPosition:(const void *)position affinity:(unsigned long long)affinity;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_firstRectForDOMRange:(id)domrange;
- (void)_scrollDOMRangeToVisible:(id)visible;
- (void)_scrollDOMRangeToVisible:(id)visible withInset:(double)inset;
- (BOOL)_needsLayout;
- (unsigned char)_selectionGranularity;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_convertToNSRange:(const void *)nsrange;
- (struct optional<WebCore::SimpleRange> { union { char x0; struct SimpleRange { struct BoundaryPoint { struct Ref<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>> { struct Node * x0; } x0; unsigned int x1; } x0; struct BoundaryPoint { struct Ref<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>> { struct Node * x0; } x0; unsigned int x1; } x1; } x1; } x0; BOOL x1; })_convertToDOMRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })domrange;
- (struct optional<WebCore::SimpleRange> { union { char x0; struct SimpleRange { struct BoundaryPoint { struct Ref<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>> { struct Node * x0; } x0; unsigned int x1; } x0; struct BoundaryPoint { struct Ref<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>> { struct Node * x0; } x0; unsigned int x1; } x1; } x1; } x0; BOOL x1; })_convertToDOMRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })domrange rangeIsRelativeTo:(unsigned char)to;
- (id)_convertNSRangeToDOMRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })domrange;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_convertDOMRangeToNSRange:(id)nsrange;
- (id)_markDOMRange;
- (id)_documentFragmentWithMarkupString:(id)string baseURLString:(id)urlstring;
- (id)_documentFragmentWithNodesAsParagraphs:(id)paragraphs;
- (void)_replaceSelectionWithNode:(id)node selectReplacement:(BOOL)replacement smartReplace:(BOOL)replace matchStyle:(BOOL)style;
- (void)_insertParagraphSeparatorInQuotedContent;
- (struct VisiblePosition { struct Position { struct RefPtr<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>, WTF::DefaultRefDerefTraits<WebCore::Node>> { struct Node * x0; } x0; unsigned int x1; unsigned int x2 :3; unsigned int x3 :1; } x0; BOOL x1; })_visiblePositionForPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_typingStyle;
- (void)_setTypingStyle:(id)style withUndoAction:(unsigned char)action;
- (BOOL)_canProvideDocumentSource;
- (BOOL)_canSaveAsWebArchive;
- (void)_commitData:(id)data;
- (id)init;
- (id)initWithName:(id)name webFrameView:(id)view webView:(id)view;
- (void)dealloc;
- (void)loadRequest:(id)request;
- (void)_loadData:(id)data MIMEType:(id)mimetype textEncodingName:(id)name baseURL:(id)url unreachableURL:(id)url;
- (void)loadData:(id)data MIMEType:(id)mimetype textEncodingName:(id)name baseURL:(id)url;
- (void)_loadHTMLString:(id)htmlstring baseURL:(id)url unreachableURL:(id)url;
- (void)loadHTMLString:(id)htmlstring baseURL:(id)url;
- (void)loadAlternateHTMLString:(id)htmlstring baseURL:(id)url forUnreachableURL:(id)url;
- (void)loadArchive:(id)archive;
- (void)stopLoading;
- (void)reload;
- (void)reloadFromOrigin;
- (id)findFrameNamed:(id)named;
@end

#endif /* WebFrame_h */
