//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2253.0.0.0.0
//
#ifndef MCProfile_h
#define MCProfile_h
@import Foundation;

@class BOOL *, NSArray, NSDate, NSDictionary, NSString;
@protocol OS_dispatch_queue;

@interface MCProfile : NSObject {
  /* instance variables */
  int _trustQueueTrustLevel;
  BOOL _trustQueueTrustHasBeenEvaluated;
  NSObject<OS_dispatch_queue> *_trustEvaluationQueue;
  NSString *_signerQueueSignerSummary;
  NSArray *_signerQueueSignerCertificates;
  NSObject<OS_dispatch_queue> *_signerEvaluationQueue;
  BOOL _isLocked;
}

@property (readonly, retain, nonatomic) NSString *stubFileName;
@property (readonly, retain, nonatomic) NSString *profileIDHashFileName;
@property (readonly, retain, nonatomic) NSString *profileDataFileName;
@property (readonly, retain, nonatomic) NSString *friendlyName;
@property (retain, nonatomic) NSString *displayName;
@property (readonly, retain, nonatomic) NSString *profileDescription;
@property (readonly, retain, nonatomic) NSString *identifier;
@property (readonly, retain, nonatomic) NSString *UUID;
@property (readonly, retain, nonatomic) NSString *organization;
@property (readonly, nonatomic) long long version;
@property (retain, nonatomic) NSDate *installDate;
@property (retain, nonatomic) NSDictionary *installOptions;
@property (nonatomic) BOOL mustInstallNonInteractively;
@property (nonatomic) BOOL encrypted;
@property (readonly, nonatomic) BOOL isSigned;
@property (readonly, nonatomic) int trustLevel;
@property (readonly, nonatomic) NSString *signerSummary;
@property (readonly, nonatomic) struct __SecCertificate * signerCertificate;
@property (retain, nonatomic) NSArray *signerCertificates;
@property (readonly, nonatomic) NSArray *signerCertificatesData;
@property (readonly, nonatomic) BOOL isStub;
@property (readonly, retain, nonatomic) NSString *productBuildVersion;
@property (readonly, retain, nonatomic) NSString *productVersion;
@property (nonatomic) BOOL locked;
@property (retain, nonatomic) NSString *removalPasscode;
@property (readonly, nonatomic) BOOL needsReboot;
@property (readonly, nonatomic) long long installType;
@property (readonly, nonatomic) BOOL isInstalledForSystem;
@property (readonly, nonatomic) BOOL isInstalledForUser;
@property (readonly, nonatomic) BOOL shouldHaveFullSSLTrust;
@property (readonly, retain, nonatomic) NSArray *payloads;
@property (readonly, retain, nonatomic) NSArray *managedPayloads;
@property (readonly, retain, nonatomic) NSArray *payloadsContentInfo;
@property (readonly, retain, nonatomic) NSArray *localizedPayloadSummaryByType;
@property (readonly, retain, nonatomic) NSArray *localizedManagedPayloadSummaryByType;
@property (readonly, retain, nonatomic) NSDate *earliestCertificateExpiryDate;
@property (readonly, retain, nonatomic) NSDate *expiryDate;
@property (readonly, retain, nonatomic) NSDate *unmodifiedExpiryDate;
@property (readonly, nonatomic) unsigned long long targetDeviceType;
@property (readonly, nonatomic) BOOL isManagedByProfileService;
@property (readonly, retain, nonatomic) NSArray *installationWarnings;
@property (readonly, nonatomic) NSString *localizedConsentText;
@property (readonly, nonatomic) NSDictionary *localizedManagedProfileConsentTexts;
@property (readonly, nonatomic) NSDate *removalDate;
@property (readonly, nonatomic) BOOL isManagedByMDM;
@property (readonly, nonatomic) NSString *managingProfileIdentifier;
@property (readonly, nonatomic) BOOL isSupervisionProfile;

/* class methods */
+ (id)profileWithData:(id)data options:(id)options outError:(id *)error;
+ (id)_malformedProfileError;
+ (id)_unsupportedEnrollmentServiceProfileError;
+ (id)_unsupportedProfileTypeError;
+ (id)badFieldTypeErrorWithField:(id)field;
+ (id)missingFieldErrorWithField:(id)field;
+ (id)profileWithData:(id)data options:(id)options fileName:(id)name allowEmptyPayload:(BOOL)payload outError:(id *)error;
+ (id)profileDictionaryFromProfileData:(id)data outSignerCerts:(id *)certs outError:(id *)error;
+ (id)profileWithDictionary:(id)dictionary options:(id)options signerCerts:(id)certs fileName:(id)name allowEmptyPayload:(BOOL)payload outError:(id *)error;
+ (id)removeRequiredObjectInDictionary:(id)dictionary key:(id)key type:(Class)type errorDomain:(id)domain missingDataCode:(long long)code missingDataErrorString:(id)string invalidDataCode:(long long)code invalidDataErrorString:(id)string outError:(id *)error;
+ (id)removeOptionalObjectInDictionary:(id)dictionary key:(id)key type:(Class)type errorDomain:(id)domain invalidDataCode:(long long)code invalidDataErrorString:(id)string outError:(id *)error;
+ (id)removeRequiredNonZeroLengthStringInDictionary:(id)dictionary key:(id)key errorDomain:(id)domain missingDataCode:(long long)code missingDataErrorString:(id)string invalidDataCode:(long long)code invalidDataErrorString:(id)string outError:(id *)error;
+ (id)removeOptionalNonZeroLengthStringInDictionary:(id)dictionary key:(id)key errorDomain:(id)domain invalidDataCode:(long long)code invalidDataErrorString:(id)string outError:(id *)error;
+ (BOOL)checkString:(id)string isOneOfStrings:(id)strings key:(id)key errorDomain:(id)domain errorCode:(long long)code errorString:(id)string outError:(id *)error;
+ (int)evaluateTrust:(struct __SecTrust *)trust;
+ (int)evaluateTrustOfCertificateChain:(id)chain signatureVersion:(id)version;
+ (int)evaluateTrustOfCertificateChain:(id)chain signatureVersion:(id)version outIsAllowedToWriteDefaults:(BOOL *)defaults;
+ (int)evaluateTrustOfCertificateChain:(id)chain signatureVersion:(id)version outIsAllowedToInstallUnsupportedPayloads:(BOOL *)payloads outIsAllowedToWriteDefaults:(BOOL *)defaults;
+ (int)evaluateTrustOfCertificateChain:(id)chain signatureVersion:(id)version outIsAllowedToInstallUnsupportedPayloads:(BOOL *)payloads outIsAllowedToWriteDefaults:(BOOL *)defaults outIsAllowedToInstallSupervisedRestrictionsOnUnsupervisedDevices:(BOOL *)devices;
+ (id)signerSummaryOfCertificate:(struct __SecCertificate *)certificate;
+ (id)dataFromCMSEncodedData:(id)data outSignerCertificates:(id *)certificates;
+ (id)newProfileSignatureVersion;
+ (id)stringForDeviceType:(unsigned long long)type;
+ (id)profileWithData:(id)data outError:(id *)error;
+ (id)profileWithData:(id)data fileName:(id)name outError:(id *)error;
+ (id)profileWithData:(id)data fileName:(id)name allowEmptyPayload:(BOOL)payload outError:(id *)error;

/* instance methods */
- (id)payloadsWithClass:(Class)class;
- (id)initWithDictionary:(id)dictionary signerCerts:(id)certs allowEmptyPayload:(BOOL)payload outError:(id *)error;
- (id)malformedProfileErrorWithError:(id)error;
- (BOOL)writeStubToDirectory:(id)directory;
- (BOOL)writeStubToPath:(id)path;
- (id)stubDictionary;
- (BOOL)containsPayloadOfClass:(Class)class;
- (BOOL)containsAnyPayloadOfClasses:(id)classes;
- (BOOL)containsOnlyPayloadsOfClasses:(id)classes;
- (unsigned long long)countOfPayloadsOfClass:(Class)class;
- (id)signatureVersion;
- (id)loggingID;
- (BOOL)isUserEnrollmentProfile;
- (id)hasRequiredAppIDForMDM;
- (id)installationWarningsIncludeUnsignedProfileWarning:(BOOL)warning;
- (id)payloadWithUUID:(id)uuid;
- (struct __SecCertificate *)copyCertificateFromPayloadWithUUID:(id)uuid;
- (id)subjectSummaryFromCertificatePayloadWithUUID:(id)uuid;
- (struct __SecCertificate *)copyCertificateWithPersistentID:(id)id;
- (id)subjectSummaryFromCertificateWithPersistentID:(id)id;
- (id)description;
- (id)verboseDescription;
- (id)serializedDictionary;
- (void)evaluateSignerTrust;
- (void)evaluateSignerTrustAsynchronouslyWithCompletion:(id /* block */)completion;
- (BOOL)doesSigningAllowReplacementWithProfile:(id)profile;
- (BOOL)doesSigningAllowReplacementWithProfile:(id)profile useOriginalCheck:(BOOL)check;
- (BOOL)isProfileUIInstallationEffectivelyAllowed;
- (BOOL)mayInstallWithOptions:(id)options hasInteractionClient:(BOOL)client outError:(id *)error;
- (id)restrictionsWithHeuristicsAppliedOutError:(id *)error;
- (id)appAccessibilityParameters;
- (void)replacePayloadWithUUID:(id)uuid withPayload:(id)payload;
- (id)payloadsOfKindOfClass:(Class)class;
- (BOOL)isEncrypted;
- (BOOL)isLocked;
@end

#endif /* MCProfile_h */
