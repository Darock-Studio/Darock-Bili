//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2253.0.0.0.0
//
#ifndef MCPasscodeManager_h
#define MCPasscodeManager_h
@import Foundation;

@interface MCPasscodeManager : NSObject
/* class methods */
+ (id)sharedManager;
+ (BOOL)isDeviceUnlocked;
+ (id)deviceLockedError;
+ (id)generateSalt;
+ (int)defaultNewPasscodeEntrySimplePasscodeType;
+ (int)unlockScreenTypeForPasscodeCharacteristics:(id)characteristics;
+ (int)unlockScreenTypeForPasscodeCharacteristics:(id)characteristics outSimplePasscodeType:(int *)type;
+ (int)unlockScreenTypeForRestrictions:(id)restrictions;
+ (int)unlockScreenTypeForRestrictions:(id)restrictions outSimplePasscodeType:(int *)type;
+ (id)localizedDescriptionOfPasscodePolicyFromRestrictions:(id)restrictions;
+ (id)localizedDescriptionOfDefaultNewPasscodePolicyFromRestrictions:(id)restrictions;
+ (id)_localizedDescriptionOfPasscodePolicyFromRestrictions:(id)restrictions shouldBeDefault:(BOOL)default;
+ (BOOL)restrictionsEnforcePasscodePolicy:(id)policy;
+ (BOOL)passcode:(id)passcode compliesWithPolicyFromRestrictions:(id)restrictions checkHistory:(BOOL)history outError:(id *)error;
+ (BOOL)_passcodeCharacteristics:(id)characteristics creationDate:(id)date compliesWithPolicyFromRestrictions:(id)restrictions outError:(id *)error;
+ (id)characteristicsDictionaryFromPasscode:(id)passcode;
+ (id)hashForPasscode:(id)passcode usingMethod:(int)method salt:(id)salt customIterations:(unsigned int)iterations;

/* instance methods */
- (id)_publicPasscodeDict;
- (id)_filterPublicPasscodeDict:(id)dict forGeneration:(id)generation;
- (id)_fixUpPublicPasscodeDict:(id)dict;
- (id)_privatePasscodeDictWithOutError:(id *)error;
- (id)_filterPasscodeCharacteristics:(id)characteristics forGeneration:(id)generation;
- (id)_fixUpPasscodeCharacteristics:(id)characteristics;
- (BOOL)isPasscodeSet;
- (void)lockDeviceImmediately:(BOOL)immediately;
- (void)lockDevice;
- (BOOL)isDeviceLocked;
- (id)_wrongPasscodeError;
- (BOOL)unlockDeviceWithPasscode:(id)passcode outError:(id *)error;
- (int)currentUnlockScreenType;
- (int)recoveryPasscodeUnlockScreenType;
- (int)unlockScreenTypeWithPublicPasscodeDict:(id)dict isRecovery:(BOOL)recovery;
- (int)currentUnlockSimplePasscodeType;
- (int)recoveryPasscodeUnlockSimplePasscodeType;
- (int)unlockSimplePasscodeTypeWithPublicPasscodeDict:(id)dict isRecovery:(BOOL)recovery;
- (int)newPasscodeEntryScreenType;
- (int)newPasscodeEntryScreenTypeWithOutSimplePasscodeType:(int *)type;
- (int)minimumNewPasscodeEntryScreenTypeWithOutSimplePasscodeType:(int *)type;
- (int)defaultNewPasscodeEntryScreenTypeWithOutSimplePasscodeType:(int *)type;
- (int)_newPasscodeEntryScreenTypeWithOutSimplePasscodeType:(int *)type shouldBeMinimum:(BOOL)minimum;
- (int)_minimumPasscodeEntryScreenTypeWithOutSimplePasscodeType:(int *)type;
- (id)localizedDescriptionOfPasscodePolicy;
- (id)localizedDescriptionOfDefaultNewPasscodePolicy;
- (BOOL)passcode:(id)passcode compliesWithPolicyCheckHistory:(BOOL)history outError:(id *)error;
- (BOOL)currentPasscodeCompliesWithPolicyFromRestrictions:(id)restrictions outError:(id *)error;
- (BOOL)isCurrentPasscodeCompliantOutError:(id *)error;
- (BOOL)isPasscodeCompliantWithNamedPolicy:(id)policy outError:(id *)error;
- (BOOL)_checkPasscode:(id)passcode againstHistoryWithRestrictions:(id)restrictions outError:(id *)error;
- (id)passcodeCreationDate;
- (id)passcodeExpiryDate;
- (id)recoveryPasscodeExpiryDate;
@end

#endif /* MCPasscodeManager_h */
