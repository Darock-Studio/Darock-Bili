//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKDAssetCache_h
#define CKDAssetCache_h
@import Foundation;

#include "CKDAssetHandleTable.h"
#include "CKDAssetVolumeTable.h"
#include "CKDClonedFileCache.h"
#include "CKDDirectoryContext.h"
#include "CKDMMCS.h"
#include "CKSAssetCacheTableGroup.h"

@class BOOL *, NSDate, NSString;

@interface CKDAssetCache : NSObject {
  /* instance variables */
  CKDClonedFileCache *_clonedFileCache;
}

@property (readonly, nonatomic) CKSAssetCacheTableGroup *assetCacheTableGroup;
@property (readonly, nonatomic) CKDAssetHandleTable *assetHandleTable;
@property (readonly, nonatomic) CKDAssetVolumeTable *assetVolumeTable;
@property (readonly, nonatomic) NSString *applicationBundleID;
@property (retain, nonatomic) CKDDirectoryContext *directoryContext;
@property BOOL isEvictionScheduled;
@property BOOL didDrop;
@property (nonatomic) long long checkoutCount;
@property (retain, nonatomic) NSDate *oldestLastUsedTime;
@property (weak, nonatomic) CKDMMCS *MMCS;
@property (readonly, nonatomic) BOOL isNewEmptyCache;
@property (readonly, nonatomic) NSString *fileDownloadPath;

/* class methods */
+ (id)_sharedCachesQueue;
+ (id)_sharedCachesByDirectory;
+ (id)assetCacheWithApplicationBundleID:(id)id directoryContext:(id)context database:(id)database didInit:(BOOL *)init error:(id *)error;

/* instance methods */
- (id)_initWithApplicationBundleID:(id)id directoryContext:(id)context database:(id)database error:(id *)error;
- (id)mmcsEngineContext;
- (void)drop;
- (void)dealloc;
- (void)_deleteAssetHandlesAndUnregisterItemsForUnmountedAssetVolumes;
- (id)deviceIDForVolumeIndex:(id)index;
- (id)volumeIndexForDeviceID:(id)id;
- (unsigned long long)clearForced:(BOOL)forced;
- (void)clearAssetCache;
- (void)checkAssetHandlesForRegisteredMMCSItems:(id)mmcsitems;
- (unsigned long long)countAssetCacheItems;
- (void)showAssetCacheInContainer:(id)container;
- (void)unregisterItemsAndDeleteUnregisteredAssetHandlesWithIDs:(id)ids deleteUnregisteredAssetHandlesWithIDs:(id)ids;
- (void)unregisterItemIDsAndDeleteAssetHandlesWithEvictionInfo:(id)info;
- (id)_saveData:(id)data error:(id *)error;
- (id)_getAssetHandlesForCachedButNotRegisteredMMCSItems:(id)mmcsitems error:(id *)error;
- (id)updateAssetHandlesForRegisteredMMCSItems:(id)mmcsitems error:(id *)error;
- (id)updateAssetHandlesForChunkedMMCSItems:(id)mmcsitems error:(id *)error;
- (id)clonedFileCache;
- (BOOL)updateAssetHandlesForGetMMCSItems:(id)mmcsitems cloneItems:(BOOL)items error:(id *)error;
- (BOOL)updateAssetHandlesForPutMMCSItems:(id)mmcsitems cloneItems:(BOOL)items error:(id *)error;
- (id)trackCachedButNotRegisteredMMCSItems:(id)mmcsitems error:(id *)error;
- (id)trackDownloadedData:(id)data signature:(id)signature error:(id *)error;
- (void)enumerateAssetHandlesSegregatedByVolume:(id)volume block:(id /* block */)block;
- (id)existingEntriesForRegisterOrPutHandles:(id)handles volumeIndex:(id)index;
- (BOOL)startTrackingRegisterOrPutAssetHandles:(id)handles operationType:(long long)type error:(id *)error;
- (BOOL)startTrackingGetAssetHandles:(id)handles operationType:(long long)type error:(id *)error;
- (void)updateLastAccessTimeForUUID:(id)uuid;
- (void)stopTrackingAssetHandlesByItemIDs:(id)ids;
- (id)findAssetHandleForItemID:(unsigned long long)id error:(id *)error;
- (BOOL)parseCachedPath:(id)path assetHandleUUIDString:(id *)uuidstring assetSignatureString:(id *)string;
- (BOOL)parseCachedPath:(id)path assetHandleUUID:(id *)uuid assetSignature:(id *)signature;
- (id)assetHandleWithCachedPath:(id)path;
- (void)_scheduleEvictionForDownloadedFiles;
- (unsigned long long)_evictDownloadedFilesWithEvictionInfo:(id)info;
- (unsigned long long)_evictWithEvictionInfo:(id)info;
- (unsigned long long)_evictAllFilesForced:(BOOL)forced;
- (unsigned long long)evictAllFilesForced:(BOOL)forced;
- (unsigned long long)predictedEvictedSizeForAllFilesForced:(BOOL)forced;
- (void)_expireAssetHandlesWithExpiryDate:(id)date;
- (void)expireAssetHandlesIfNecessary;
- (void)_resetAssetInflight;
- (void)setupPersistentStateAtStartup;
@end

#endif /* CKDAssetCache_h */
