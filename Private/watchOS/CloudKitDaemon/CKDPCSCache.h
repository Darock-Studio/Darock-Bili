//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKDPCSCache_h
#define CKDPCSCache_h
@import Foundation;

#include "CKDPCSMemoryCache.h"
#include "CKDPCSSQLCache.h"

@class CKAccountOverrideInfo, CKContainerID, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface CKDPCSCache : NSObject

@property (readonly, nonatomic) CKDPCSSQLCache *sqlCache;
@property (readonly, nonatomic) CKDPCSMemoryCache *recordMemoryCache;
@property (readonly, nonatomic) CKDPCSMemoryCache *zoneMemoryCache;
@property (readonly, nonatomic) CKDPCSMemoryCache *shareMemoryCache;
@property (retain, nonatomic) NSMutableDictionary *outstandingFetches;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *fetchQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (readonly, nonatomic) CKContainerID *containerID;
@property (readonly, nonatomic) CKAccountOverrideInfo *accountOverrideInfo;
@property (readonly, nonatomic) NSString *accountID;
@property (readonly, nonatomic) NSString *encryptionServiceName;

/* instance methods */
- (void)clearPCSCaches;
- (void)clearPCSMemoryCaches;
- (void)clearInvalidatedPCSSQLCacheEntriesWithSkipZonePCS:(BOOL)pcs completionHandler:(id /* block */)handler;
- (id)initWithDeviceContext:(id)context containerID:(id)id accountOverrideInfo:(id)info accountID:(id)id encryptionServiceName:(id)name;
- (void)dealloc;
- (void)runMemoryCacheEviction;
- (void)_lockedGetSQLCacheWithCompletionHandler:(id /* block */)handler;
- (void)getSQLCache:(id /* block */)sqlcache;
- (void)_lockedHandleMemoryFetchOfItem:(id)item pcsData:(id)data forOperation:(id)operation options:(unsigned long long)options fetchCreator:(id /* block */)creator withCompletionHandler:(id /* block */)handler;
- (void)_lockedRemoveOutstandingFetch:(id)fetch forItemIDString:(id)idstring databaseScope:(long long)scope;
- (id)_lockedGetOutstandingFetchForOperation:(id)operation options:(unsigned long long)options itemIDString:(id)idstring;
- (void)_lockedAddOutstandingFetch:(id)fetch forItemIDString:(id)idstring databaseScope:(long long)scope;
- (void)_lockedInvalidateAllOutstandingPCSFetchesForItemIDString:(id)idstring databaseScope:(long long)scope;
- (void)_lockedCreatePCSCacheFetchOfItem:(id)item forOperation:(id)operation options:(unsigned long long)options fetchCreator:(id /* block */)creator withCompletionHandler:(id /* block */)handler;
- (void)_lockedFetchPCSForItem:(id)item memoryCache:(id)cache forOperation:(id)operation options:(unsigned long long)options fetchCreator:(id /* block */)creator withCompletionHandler:(id /* block */)handler;
- (void)fetchPCSForRecordWithID:(id)id forOperation:(id)operation options:(unsigned long long)options withCompletionHandler:(id /* block */)handler;
- (void)fetchPCSForZoneWithID:(id)id forOperation:(id)operation options:(unsigned long long)options withCompletionHandler:(id /* block */)handler;
- (void)fetchPCSForShareWithID:(id)id forOperation:(id)operation options:(unsigned long long)options withCompletionHandler:(id /* block */)handler;
- (void)_setPCSData:(id)pcsdata forFetchedRecordID:(id)id withScope:(long long)scope withCompletionHandler:(id /* block */)handler;
- (void)_setPCSData:(id)pcsdata forFetchedZoneID:(id)id withScope:(long long)scope withCompletionHandler:(id /* block */)handler;
- (void)_setPCSData:(id)pcsdata forFetchedShareID:(id)id withScope:(long long)scope withCompletionHandler:(id /* block */)handler;
- (void)_updateMemoryCacheWithPCSData:(id)pcsdata forItemWithID:(id)id inMemoryCache:(id)cache databaseScope:(long long)scope withCompletionHandler:(id /* block */)handler;
- (void)updateMemoryCacheWithZonePCSData:(id)pcsdata forZoneWithID:(id)id databaseScope:(long long)scope withCompletionHandler:(id /* block */)handler;
- (void)updateMemoryCacheWithRecordPCSData:(id)pcsdata forRecordWithID:(id)id databaseScope:(long long)scope withCompletionHandler:(id /* block */)handler;
- (void)updateMemoryCacheWithSharePCSData:(id)pcsdata forShareWithID:(id)id databaseScope:(long long)scope withCompletionHandler:(id /* block */)handler;
- (void)removePCSDataForItemsInZoneWithID:(id)id;
- (void)removePCSDataForItemsInShareWithID:(id)id;
- (BOOL)hasStatusToReport;
- (id)CKStatusReportArray;
@end

#endif /* CKDPCSCache_h */
