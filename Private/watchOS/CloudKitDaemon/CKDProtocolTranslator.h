//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKDProtocolTranslator_h
#define CKDProtocolTranslator_h
@import Foundation;

#include "CKDProtocolTranslatorIdentityDelegate-Protocol.h"

@class CKDPIdentifier, NSMutableDictionary, NSString;

@interface CKDProtocolTranslator : NSObject

@property (copy) NSString *overriddenContainerScopedUserID;
@property long long overriddenDatabaseScope;
@property (readonly, nonatomic) BOOL addDatabaseScopeToZoneIDs;
@property (readonly, nonatomic) NSMutableDictionary *downloadPreauthorizationMap;
@property BOOL dontCreateValidatingParentReferences;
@property (readonly, copy, nonatomic) NSString *packageStagingDirectory;
@property (readonly, copy, nonatomic) NSString *containerScopedUserID;
@property (readonly, copy, nonatomic) NSString *orgAdminUserID;
@property (readonly, nonatomic) CKDPIdentifier *pUserID;
@property (readonly, nonatomic) long long databaseScope;
@property (weak) NSObject<CKDProtocolTranslatorIdentityDelegate> *identityDelegate;

/* class methods */
+ (id)standaloneTranslatorWithPackageStagingDirectory:(id)directory databaseScope:(long long)scope;

/* instance methods */
- (int)fieldValueTypeFromEncryptedDataObject:(id)object isInList:(BOOL)list;
- (int)fieldValueTypeFromObject:(id)object;
- (BOOL)objectIsAnEncryptedType:(id)type;
- (id)fieldValueFromObject:(id)object forCache:(BOOL)cache;
- (id)fieldValueFromObject:(id)object;
- (id)encryptedFieldValueOfType:(int)type withObject:(id)object;
- (id)fieldValueOfType:(int)type withObject:(id)object forCache:(BOOL)cache;
- (id)fieldValueOfType:(int)type withObject:(id)object;
- (id)locationFieldValueWithLatitude:(double)latitude longitude:(double)longitude;
- (id)encryptedObjectRepresentationFromFieldValue:(id)value;
- (id)objectRepresentationFromFieldValue:(id)value;
- (id)objectRepresentationFromField:(id)field inRecord:(id)record asAnonymousCKUserID:(id)id;
- (id)pFieldWithKey:(id)key value:(id)value forCache:(BOOL)cache;
- (id)pFieldWithKey:(id)key value:(id)value;
- (id)pFieldActionWithLocation:(long long)location length:(unsigned long long)length values:(id)values;
- (id)initInternalWithContainerScopedUserID:(id)id orgAdminUserID:(id)id packageStagingDirectory:(id)directory databaseScope:(long long)scope addDatabaseScopeToZoneIDs:(BOOL)ids;
- (id)initWithContainer:(id)container databaseScope:(long long)scope;
- (id)initWithContainer:(id)container databaseScope:(long long)scope requireContainerScopedUserID:(BOOL)id;
- (BOOL)haveDownloadPreauthorizations;
- (id)downloadPreauthorizationForResponseUUID:(id)uuid;
- (void)setDownloadPreauthorization:(id)preauthorization forResponseUUID:(id)uuid;
- (void)consumeResponseHeader:(id)header;
- (BOOL)_isDefaultUserNameFromServer:(id)server;
- (BOOL)_isDefaultUserNameFromClient:(id)client;
- (id)recordIDFromPUserName:(id)name error:(id *)error;
- (id)pIdentifierFromUserRecordID:(id)id;
- (id)pUserIdentifierFromUserRecordName:(id)name;
- (id)pContainerScopedUserIdentifierFromPUserIdentifier:(id)identifier;
- (id)pRecordIdentifierFromUserRecordName:(id)name;
- (id)userNameFromPIdentifier:(id)pidentifier error:(id *)error;
- (id)recordIDFromPRecordIdentifier:(id)identifier asAnonymousCKUserID:(id)id error:(id *)error;
- (id)recordIDFromPRecordIdentifier:(id)identifier error:(id *)error;
- (id)pRecordIdentifierFromRecordID:(id)id;
- (id)pContainerScopedRecordIdentifierWithPRecordIdentifier:(id)identifier;
- (id)recordZoneIDFromPRecordZoneIdentifier:(id)identifier asAnonymousCKUserID:(id)id error:(id *)error;
- (id)recordZoneIDFromPRecordZoneIdentifier:(id)identifier error:(id *)error;
- (id)pRecordZoneIdentifierFromRecordZoneID:(id)id;
- (id)pContainerScopedRecordZoneIdentifierFromFromPRecordZoneIdentifier:(id)identifier;
- (id)pShareIdentifierFromRecordID:(id)id;
- (id)recordIDFromPShareIdentifier:(id)identifier asAnonymousCKUserID:(id)id error:(id *)error;
- (id)recordIDFromPShareIdentifier:(id)identifier error:(id *)error;
- (id)referenceFromPReference:(id)preference error:(id *)error;
- (id)referenceFromPReference:(id)preference asAnonymousCKUserID:(id)id error:(id *)error;
- (id)pReferenceFromReference:(id)reference error:(id *)error;
- (id)recordFromPRecord:(id)precord error:(id *)error;
- (id)recordFromPRecord:(id)precord asAnonymousCKUserID:(id)id error:(id *)error;
- (BOOL)_valueTypeIsAnEncryptedBytesTypeForField:(id)field;
- (id)_pRecordFromRecordSansValues:(id)values forCache:(BOOL)cache;
- (id)pRecordFromRecord:(id)record forCache:(BOOL)cache;
- (id)pRecordFromRecord:(id)record;
- (id)deltaPRecordFromRecord:(id)record withAllFields:(BOOL)fields outDeletedMergeFields:(id *)fields outKeysToSend:(id *)send;
- (id)assetFromPAsset:(id)passet error:(id *)error;
- (id)pAssetFromAsset:(id)asset;
- (id)packageFromPPackage:(id)ppackage error:(id *)error;
- (id)pPackageFromPackage:(id)package;
- (id)pStreamingAssetFromStreamingAsset:(id)asset forCache:(BOOL)cache;
- (id)streamingAssetFromPStreamingAsset:(id)asset error:(id *)error;
- (id)pMergeableValueIdentifierFromMergeableValueID:(id)id;
- (id)mergeableValueIDFromPMergeableValueIdentifier:(id)identifier recordName:(id)name fieldName:(id)name encrypted:(BOOL)encrypted error:(id *)error;
- (id)mergeableRecordValueFromPRecordField:(id)field inPRecordIdentifier:(id)identifier asAnonymousCKUserID:(id)id error:(id *)error;
- (id)pMergeableValueFromMergeableValueID:(id)id;
- (id)pEncryptedMergeableValueFromRecordValue:(id)value;
- (id)mergeableDeltaFromPDelta:(id)pdelta valueID:(id)id error:(id *)error;
- (id)pMergeableDeltaFromDelta:(id)delta error:(id *)error;
- (id)mergeableDeltaMetadataFromPMetadata:(id)pmetadata mergeableValueID:(id)id error:(id *)error;
- (BOOL)mergeTimestamps:(id)timestamps intoDeltaMetadataVectors:(id)vectors error:(id *)error;
- (id)pMergeableDeltaMetadataFromMetadata:(id)metadata mergeableValueID:(id)id error:(id *)error;
- (id)pQueryFromQuery:(id)query error:(id *)error;
- (id)subscriptionFromPSubscription:(id)psubscription error:(id *)error;
- (id)pSubscriptionFromSubscription:(id)subscription error:(id *)error;
- (id)recordZoneFromPRecordZone:(id)zone error:(id *)error;
- (id)recordZoneFromPRecordZone:(id)zone asAnonymousCKUserID:(id)id error:(id *)error;
- (id)pRecordZoneFromRecordZone:(id)zone;
- (unsigned long long)capabilitiesFromPZoneCapabilities:(id)capabilities;
- (id)containerPrivacySettingsFromPContainerPrivacySettings:(id)settings;
- (id)shareFromPShare:(id)pshare error:(id *)error;
- (id)shareFromPShare:(id)pshare asAnonymousCKUserID:(id)id error:(id *)error;
- (id)pShareFromShare:(id)share forCache:(BOOL)cache;
- (id)shareParticipantFromPParticipant:(id)pparticipant error:(id *)error;
- (id)pParticipantFromShareParticipant:(id)participant forCache:(BOOL)cache;
- (id)notificationFromPPushMessage:(id)message;
- (id)pAliasWithIdentityLookupInfo:(id)info;
- (id)pAliasWithEmailAddress:(id)address;
- (id)pAliasWithPhoneNumber:(id)number;
- (id)pAliasWithHashedStringID:(id)id type:(int)type;
- (id)pAliasWithUserRecordID:(id)id;
- (id)identityFromPUser:(id)puser;
@end

#endif /* CKDProtocolTranslator_h */
