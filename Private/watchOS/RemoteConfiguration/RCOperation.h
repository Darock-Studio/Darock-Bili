//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 198.0.0.0.0
//
#ifndef RCOperation_h
#define RCOperation_h
@import Foundation;

#include "NSOperation.h"
#include "RCOnce.h"
#include "RCOperationCanceling-Protocol.h"
#include "RCOperationIdentifying-Protocol.h"
#include "RCOperationPrioritizing-Protocol.h"
#include "RCUnfairLock.h"

@class NSMutableArray, NSString;
@protocol OS_dispatch_group;

@interface RCOperation : NSOperation<RCOperationCanceling, RCOperationIdentifying, RCOperationPrioritizing> {
  /* instance variables */
  atomic BOOL _executing;
  atomic BOOL _finished;
}

@property (copy, nonatomic) id /* block */ timedOutTest;
@property (retain, nonatomic) NSMutableArray *childOperations;
@property (nonatomic) BOOL childOperationsCancelled;
@property (retain, nonatomic) RCUnfairLock *childOperationsLock;
@property (retain, nonatomic) RCOnce *startOnce;
@property (nonatomic) double operationStartTime;
@property (nonatomic) double operationEndTime;
@property (nonatomic) unsigned long long retryCount;
@property (retain, nonatomic) NSObject<OS_dispatch_group> *finishedGroup;
@property (readonly, copy, nonatomic) NSString *operationID;
@property (readonly, nonatomic) BOOL hasOperationStarted;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long relativePriority;

/* instance methods */
- (id)init;
- (void)dealloc;
- (BOOL)isExecuting;
- (BOOL)isFinished;
- (BOOL)isAsynchronous;
- (void)cancel;
- (void)setQualityOfService:(long long)service;
- (BOOL)validateOperation;
- (void)prepareOperation;
- (void)startIfNeeded;
- (void)start;
- (BOOL)_startIfNeeded;
- (void)performOperation;
- (void)finishedPerformingOperationWithError:(id)error;
- (void)_finishedPerformingOperationWithError:(id)error;
- (void)_handleThrottlingFromError:(id)error delay:(double)delay;
- (void)_handleRetryFromError:(id)error signal:(id)signal;
- (void)operationWillFinishWithError:(id)error;
- (void)operationDidFinishWithError:(id)error;
- (void)finishFromEarlyCancellation;
- (void)associateChildOperation:(id)operation;
- (void)associateChildOperations:(id)operations;
- (void)_associateChildOperation:(id)operation;
- (void)cancelChildOperations;
- (unsigned long long)propertiesInheritedByChildOperations;
- (unsigned long long)maxRetries;
- (BOOL)canRetryWithError:(id)error retryAfter:(id *)after;
- (void)resetForRetry;
- (id)throttleGroup;
- (BOOL)shouldStartThrottlingWithError:(id)error retryAfter:(double *)after;
- (id)_userDefaultsKeyForThrottleEndDate;
- (BOOL)_shouldThrottleOperationWithRetryAfter:(double *)after;
- (void)addCompletionHandler:(id /* block */)handler;
- (void)_finishOperationWithError:(id)error;
- (id)_errorUserInfo;
- (id)shortOperationDescription;
- (id)longOperationDescription;
@end

#endif /* RCOperation_h */
