//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.3.1.0.0
//
#ifndef VSSpeechSynthesizer_h
#define VSSpeechSynthesizer_h
@import Foundation;

#include "AFAudioPowerProviding-Protocol.h"
#include "VSSpeechConnection.h"
#include "VSSpeechConnectionDelegate-Protocol.h"

@class AFAudioPowerUpdater, AFAudioPowerXPCProvider, NSMutableDictionary, NSString, NSUUID, SiriTTSDaemonSession;
@protocol OS_dispatch_queue, VSSpeechSynthesizerDelegate;

@interface VSSpeechSynthesizer : NSObject<VSSpeechConnectionDelegate, AFAudioPowerProviding> {
  /* instance variables */
  NSString *_clientBundleIdentifier;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<OS_dispatch_queue> *_callbackQueue;
  VSSpeechConnection *_xpcConnection;
  NSString *_identifier;
  struct { unsigned int x :1 delegateStartWithRequest; unsigned int x :1 delegateFinishWithPhonemesSpokenWithRequest; unsigned int x :1 delegateSuccessWithInstrumentMetrics; unsigned int x :1 delegatePauseWithRequest; unsigned int x :1 delegateContinueWithRequest; unsigned int x :1 delegateWillSpeakWithRequest; unsigned int x :1 delegateStreamSynthesisAudioData; unsigned int x :1 willUseInput; unsigned int x :1 delegateDidStartPreviewRequest; } _synthesizerFlags;
}

@property (copy, nonatomic) NSString *language;
@property (copy, nonatomic) NSUUID *accessoryID;
@property (retain, nonatomic) NSMutableDictionary *durationRequests;
@property (retain, nonatomic) SiriTTSDaemonSession *proxySession;
@property (retain, nonatomic) NSMutableDictionary *stsRequestMapping;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *audioPowerUpdaterQueue;
@property (retain, nonatomic) AFAudioPowerUpdater *audioPowerUpdater;
@property (nonatomic) BOOL isPlayingPreview;
@property (retain, nonatomic) AFAudioPowerXPCProvider *previewAudioPowerXPCProvider;
@property (weak, nonatomic) NSObject<VSSpeechSynthesizerDelegate> *delegate;
@property (nonatomic) BOOL keepActive;
@property (nonatomic) float rate;
@property (nonatomic) float pitch;
@property (nonatomic) float volume;
@property (retain, nonatomic) NSString *voice;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)errorWithReason:(id)reason;
+ (id)validatePrewarmRequest:(id)request;
+ (id)validateRequest:(id)request;
+ (id)validateAudioRequest:(id)request;
+ (id)validateAudioCachingRequest:(id)request;
+ (BOOL)playVoicePreviewForLanguageCode:(id)code voiceName:(id)name previewType:(long long)type completion:(id /* block */)completion;
+ (void)stopPlayingVoicePreview;
+ (id)sharedInstance;
+ (id)characterClassCountForUtterance:(id)utterance language:(id)language;

/* instance methods */
- (void)playVoicePreviewForLanguageCode:(id)code voiceName:(id)name previewType:(long long)type completion:(id /* block */)completion;
- (void)stopPlayingVoicePreview;
- (id)init;
- (id)initWithAccessoryID:(id)id;
- (id)errorFromSTSError:(id)stserror;
- (id)STS_prewarmRequest:(id)request;
- (id)STS_startSynthesizingRequest:(id)request;
- (id)STS_startSpeakingRequest:(id)request;
- (id)STS_startSpeakingAudioRequest:(id)request;
- (double)STS_estimateDurationOfRequest:(id)request;
- (void)STS_estimateDurationOfRequest:(id)request completion:(id /* block */)completion;
- (void)STS_textToPhonemesWithRequest:(id)request phonemeSystem:(long long)system completion:(id /* block */)completion;
- (id)STS_signalInlineStreaming:(id)streaming;
- (void)STS_forwardStreamObject:(id)object;
- (void)STS_cancelRequest:(id)request;
- (void)STS_cancelAudioRequest:(id)request;
- (BOOL)STS_isSpeaking;
- (void)STS_queryPhaticCapabilityWithRequest:(id)request reply:(id /* block */)reply;
- (void)STS_subscribeVoices:(id)voices;
- (void)STS_subscribedVoices:(id /* block */)voices;
- (void)STS_subscribedVoicesWithClientID:(id)id reply:(id /* block */)reply;
- (void)STS_downloadedVoicesMatching:(id)matching reply:(id /* block */)reply;
- (void)STS_getSynthesisVoiceMatching:(id)matching reply:(id /* block */)reply;
- (id)initForInputFeedback;
- (id)prewarmIfNeededWithRequest:(id)request;
- (BOOL)queryPhaticCapability:(id)capability;
- (void)_setDelegate:(id)delegate;
- (id)_stopSpeakingPresynthesizedAudioRequest:(id)request synchronously:(BOOL)synchronously;
- (id)_stopSpeakingRequest:(id)request atNextBoundary:(long long)boundary synchronously:(BOOL)synchronously;
- (id)_pauseSpeakingRequestAtNextBoundary:(long long)boundary synchronously:(BOOL)synchronously;
- (id)startSynthesizingRequest:(id)request;
- (id)startSpeakingRequest:(id)request;
- (id)startSpeakingPresynthesizedAudioRequest:(id)request;
- (id)cachePresynthesizedAudioRequest:(id)request;
- (void)cancelRequest:(id)request;
- (void)cancelAudioRequest:(id)request;
- (BOOL)stopSpeakingAtNextBoundary:(long long)boundary synchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)stopSpeakingPresynthesizedAudioSynchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)pauseSpeakingAtNextBoundary:(long long)boundary synchronously:(BOOL)synchronously error:(id *)error;
- (BOOL)continueSpeakingWithError:(id *)error;
- (BOOL)isSpeaking;
- (BOOL)isSystemSpeaking;
- (id)speechString;
- (float)minimumRate;
- (float)maximumRate;
- (id)_continueSpeakingRequest;
- (double)estimateDurationOfRequest:(id)request;
- (void)estimateDurationOfRequest:(id)request completion:(id /* block */)completion;
- (void)textToPhonemesWithRequest:(id)request phonemeSystem:(long long)system completion:(id /* block */)completion;
- (void)connection:(id)connection speechRequestDidStart:(id)start;
- (void)connection:(id)connection speechRequestDidPause:(id)pause;
- (void)connection:(id)connection speechRequestDidContinue:(id)continue;
- (void)connection:(id)connection speechRequest:(id)request didStopAtEnd:(BOOL)end phonemesSpoken:(id)spoken error:(id)error;
- (void)connection:(id)connection speechRequest:(id)request successWithInstrumentMetrics:(id)metrics;
- (void)connection:(id)connection speechRequest:(id)request didReceiveTimingInfo:(id)info;
- (void)connection:(id)connection speechRequest:(id)request willSpeakMark:(long long)mark inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)connection:(id)connection speechRequest:(id)request didGenerateAudioChunk:(id)chunk;
- (void)connection:(id)connection synthesisRequest:(id)request didFinishWithInstrumentMetrics:(id)metrics error:(id)error;
- (void)connection:(id)connection presynthesizedAudioRequestDidStart:(id)start;
- (void)connection:(id)connection presynthesizedAudioRequest:(id)request didStopAtEnd:(BOOL)end error:(id)error;
- (void)connection:(id)connection presynthesizedAudioRequest:(id)request successWithInstrumentMetrics:(id)metrics error:(id)error;
- (void)connection:(id)connection previewRequestDidStartPlaying:(id)playing;
- (void)connection:(id)connection invalidatedWithError:(id)error;
- (void)forwardStreamObject:(id)object;
- (void)invokeDaemon:(id /* block */)daemon;
- (void)killDaemon;
- (void)beginAudioPowerUpdateWithReply:(id /* block */)reply;
- (void)endAudioPowerUpdate;
- (void)willBeginAccessPower;
- (void)didEndAccessPower;
- (BOOL)getAveragePower:(float *)power andPeakPower:(float *)power;
- (void)cleanUnusedAssets:(id /* block */)assets;
- (void)getLocalVoiceAssets:(id /* block */)assets;
- (void)getLocalVoiceAssetsForLanguage:(id)language reply:(id /* block */)reply;
- (void)getLocalVoiceResources:(id /* block */)resources;
- (void)getVoiceResourceForLanguage:(id)language reply:(id /* block */)reply;
- (void)setAutoDownloadedVoiceAssets:(id)assets;
- (void)triggerCellularDownloadedVoiceAssets:(id)assets;
- (void)getAutoDownloadedVoiceAssets:(id /* block */)assets;
- (void)getAllAutoDownloadedVoiceAssets:(id /* block */)assets;
- (void)getVoiceInfoForLanguageCode:(id)code name:(id)name footprint:(long long)footprint gender:(long long)gender type:(long long)type reply:(id /* block */)reply;
- (void)getVoiceInfoForLanguageCode:(id)code name:(id)name type:(long long)type footprint:(long long)footprint reply:(id /* block */)reply;
- (id)availableVoicesForLanguageCode:(id)code;
- (id)availableLanguageCodes;
- (id)availableFootprintsForVoice:(id)voice languageCode:(id)code;
@end

#endif /* VSSpeechSynthesizer_h */
