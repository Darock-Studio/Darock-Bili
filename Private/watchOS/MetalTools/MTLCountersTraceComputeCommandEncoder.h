//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 341.35.0.0.0
//
#ifndef MTLCountersTraceComputeCommandEncoder_h
#define MTLCountersTraceComputeCommandEncoder_h
@import Foundation;

#include "MTLCountersTraceCommandEncoder.h"

@interface MTLCountersTraceComputeCommandEncoder : MTLCountersTraceCommandEncoder
/* instance methods */
- (id)init:(struct BinaryBuffer { undefined * * x0; struct StreamBuffer { char * x0; char * x1; char * x2; } x1; struct mach_timebase_info { unsigned int x0; unsigned int x1; } x2; } *)init;
- (void)dispatchThreadgroups:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })threadgroups threadsPerThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })threadgroup;
- (void)dispatchThreadgroupsWithIndirectBuffer:(id)buffer indirectBufferOffset:(unsigned long long)offset threadsPerThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })threadgroup;
- (void)dispatchThreads:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })threads threadsPerThreadgroup:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })threadgroup;
- (void)dispatchThreadsWithIndirectBuffer:(id)buffer indirectBufferOffset:(unsigned long long)offset;
- (void)setBuffer:(id)buffer offset:(unsigned long long)offset atIndex:(unsigned long long)index;
- (void)setBufferOffset:(unsigned long long)offset atIndex:(unsigned long long)index;
- (void)setBuffers:(const id *)buffers offsets:(const unsigned long long *)offsets withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setBytes:(const void *)bytes length:(unsigned long long)length atIndex:(unsigned long long)index;
- (void)setComputePipelineState:(id)state;
- (void)setSamplerState:(id)state atIndex:(unsigned long long)index;
- (void)setSamplerState:(id)state lodMinClamp:(float)clamp lodMaxClamp:(float)clamp atIndex:(unsigned long long)index;
- (void)setSamplerStates:(const id *)states withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setSamplerStates:(const id *)states lodMinClamps:(const float *)clamps lodMaxClamps:(const float *)clamps withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setTexture:(id)texture atIndex:(unsigned long long)index;
- (void)setTextures:(const id *)textures withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setThreadgroupMemoryLength:(unsigned long long)length atIndex:(unsigned long long)index;
- (void)setStageInRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })region;
- (void)setStageInRegionWithIndirectBuffer:(id)buffer indirectBufferOffset:(unsigned long long)offset;
- (void)updateFence:(id)fence;
- (void)waitForFence:(id)fence;
- (void)useHeap:(id)heap;
- (void)useHeaps:(const id *)heaps count:(unsigned long long)count;
- (void)useResource:(id)resource usage:(unsigned long long)usage;
- (void)useResources:(const id *)resources count:(unsigned long long)count usage:(unsigned long long)usage;
- (void)memoryBarrierWithScope:(unsigned long long)scope;
- (void)memoryBarrierWithResources:(const id *)resources count:(unsigned long long)count;
- (void)setVisibleFunctionTable:(id)table atBufferIndex:(unsigned long long)index;
- (void)setVisibleFunctionTables:(const id *)tables withBufferRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setIntersectionFunctionTable:(id)table atBufferIndex:(unsigned long long)index;
- (void)setIntersectionFunctionTables:(const id *)tables withBufferRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
@end

#endif /* MTLCountersTraceComputeCommandEncoder_h */
