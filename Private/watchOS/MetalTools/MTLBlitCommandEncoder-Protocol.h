//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 341.35.0.0.0
//
#ifndef MTLBlitCommandEncoder_Protocol_h
#define MTLBlitCommandEncoder_Protocol_h
@import Foundation;

@protocol MTLBlitCommandEncoder <MTLCommandEncoder>
/* instance methods */
- (void)synchronizeResource:(id)resource;
- (void)synchronizeTexture:(id)texture slice:(unsigned long long)slice level:(unsigned long long)level;
- (void)copyFromTexture:(id)texture sourceSlice:(unsigned long long)slice sourceLevel:(unsigned long long)level sourceOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })origin sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })size toTexture:(id)texture destinationSlice:(unsigned long long)slice destinationLevel:(unsigned long long)level destinationOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })origin;
- (void)copyFromBuffer:(id)buffer sourceOffset:(unsigned long long)offset sourceBytesPerRow:(unsigned long long)row sourceBytesPerImage:(unsigned long long)image sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })size toTexture:(id)texture destinationSlice:(unsigned long long)slice destinationLevel:(unsigned long long)level destinationOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })origin;
- (void)copyFromBuffer:(id)buffer sourceOffset:(unsigned long long)offset sourceBytesPerRow:(unsigned long long)row sourceBytesPerImage:(unsigned long long)image sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })size toTexture:(id)texture destinationSlice:(unsigned long long)slice destinationLevel:(unsigned long long)level destinationOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })origin options:(unsigned long long)options;
- (void)copyFromTexture:(id)texture sourceSlice:(unsigned long long)slice sourceLevel:(unsigned long long)level sourceOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })origin sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })size toBuffer:(id)buffer destinationOffset:(unsigned long long)offset destinationBytesPerRow:(unsigned long long)row destinationBytesPerImage:(unsigned long long)image;
- (void)copyFromTexture:(id)texture sourceSlice:(unsigned long long)slice sourceLevel:(unsigned long long)level sourceOrigin:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })origin sourceSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })size toBuffer:(id)buffer destinationOffset:(unsigned long long)offset destinationBytesPerRow:(unsigned long long)row destinationBytesPerImage:(unsigned long long)image options:(unsigned long long)options;
- (void)generateMipmapsForTexture:(id)texture;
- (void)fillBuffer:(id)buffer range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range value:(unsigned char)value;
- (void)copyFromTexture:(id)texture sourceSlice:(unsigned long long)slice sourceLevel:(unsigned long long)level toTexture:(id)texture destinationSlice:(unsigned long long)slice destinationLevel:(unsigned long long)level sliceCount:(unsigned long long)count levelCount:(unsigned long long)count;
- (void)copyFromTexture:(id)texture toTexture:(id)texture;
- (void)copyFromBuffer:(id)buffer sourceOffset:(unsigned long long)offset toBuffer:(id)buffer destinationOffset:(unsigned long long)offset size:(unsigned long long)size;
- (void)updateFence:(id)fence;
- (void)waitForFence:(id)fence;
- (void)getTextureAccessCounters:(id)counters region:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })region mipLevel:(unsigned long long)level slice:(unsigned long long)slice resetCounters:(BOOL)counters countersBuffer:(id)buffer countersBufferOffset:(unsigned long long)offset;
- (void)resetTextureAccessCounters:(id)counters region:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })region mipLevel:(unsigned long long)level slice:(unsigned long long)slice;
- (void)optimizeContentsForGPUAccess:(id)gpuaccess;
- (void)optimizeContentsForGPUAccess:(id)gpuaccess slice:(unsigned long long)slice level:(unsigned long long)level;
- (void)optimizeContentsForCPUAccess:(id)cpuaccess;
- (void)optimizeContentsForCPUAccess:(id)cpuaccess slice:(unsigned long long)slice level:(unsigned long long)level;
- (void)resetCommandsInBuffer:(id)buffer withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)copyIndirectCommandBuffer:(id)buffer sourceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range destination:(id)destination destinationIndex:(unsigned long long)index;
- (void)optimizeIndirectCommandBuffer:(id)buffer withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)sampleCountersInBuffer:(id)buffer atSampleIndex:(unsigned long long)index withBarrier:(BOOL)barrier;
- (void)resolveCounters:(id)counters inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range destinationBuffer:(id)buffer destinationOffset:(unsigned long long)offset;
@end

#endif /* MTLBlitCommandEncoder_Protocol_h */
