//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSAudioInjectionProvider_h
#define CSAudioInjectionProvider_h
@import Foundation;

#include "CSAudioRecorder.h"
#include "CSAudioInjectionDevice.h"
#include "CSAudioInjectionEngine.h"
#include "CSAudioInjectionEngineDelegate-Protocol.h"

@class CSAudioRecordContext, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface CSAudioInjectionProvider : CSAudioRecorder<CSAudioInjectionEngineDelegate>

@property (retain, nonatomic) NSHashTable *observers;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSUUID *uuid;
@property (retain, nonatomic) NSMutableArray *connectedDevices;
@property (retain, nonatomic) CSAudioInjectionDevice *builtInDevice;
@property (retain, nonatomic) CSAudioInjectionDevice *bundleTvRemote;
@property (retain, nonatomic) CSAudioInjectionEngine *builtInAudioInjectionEngine;
@property (retain, nonatomic) NSMutableDictionary *audioInjectionEngines;
@property (nonatomic) unsigned long long latestPluginStreamId;
@property (nonatomic) unsigned long long activateStartTime;
@property (nonatomic) unsigned long long activateEndTime;
@property (nonatomic) unsigned long long deactivateStartTime;
@property (nonatomic) unsigned long long deactivateEndTime;
@property (retain, nonatomic) NSString *atvRemoteDeviceID;
@property (retain, nonatomic) CSAudioRecordContext *audioRecordContext;
@property (nonatomic) BOOL allowZeroInjection;
@property (nonatomic) float didStartDelayInSeconds;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)defaultInjectionProvider;
+ (void)createSharedAudioSession;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)start;
- (void)_connectPluginDevice:(id)device;
- (void)_tearDownSpeechDetectionVADIfNeeded;
- (void)_createSpeechDetectionVADIfNeeded;
- (void)stop;
- (id)primaryInputDevice;
- (void)connectDevice:(id)device;
- (void)disconnectDevice:(id)device;
- (void)willDestroy;
- (void)registerObserver:(id)observer;
- (void)unregisterObserver:(id)observer;
- (void)setAudioSessionEventDelegate:(id)delegate;
- (void)setContext:(id)context completion:(id /* block */)completion;
- (BOOL)setCurrentContext:(id)context streamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)prepareAudioStreamRecord:(id)record recordDeviceIndicator:(id)indicator error:(id *)error;
- (BOOL)startAudioStreamWithOption:(id)option recordDeviceIndicator:(id)indicator error:(id *)error;
- (BOOL)stopAudioStreamWithRecordDeviceIndicator:(id)indicator error:(id *)error;
- (BOOL)isRecordingWithRecordDeviceIndicator:(id)indicator;
- (id)recordRouteWithRecordDeviceIndicator:(id)indicator;
- (id)recordDeviceInfoWithStreamHandleId:(unsigned long long)id recordDeviceIndicator:(id)indicator;
- (id)audioDeviceInfoWithStreamHandleId:(unsigned long long)id recordDeviceIndicator:(id)indicator;
- (id)recordSettingsWithStreamHandleId:(unsigned long long)id;
- (float)recordingSampleRateWithStreamHandleId:(unsigned long long)id;
- (BOOL)isNarrowBandWithStreamHandleId:(unsigned long long)id;
- (BOOL)prewarmAudioSessionWithStreamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)reason streamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)deactivateAudioSession:(unsigned long long)session streamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)deactivateAudioSession:(unsigned long long)session error:(id *)error;
- (BOOL)setRecordMode:(long long)mode streamHandleId:(unsigned long long)id error:(id *)error;
- (void)setDuckOthersOption:(BOOL)option;
- (BOOL)duckOthersOption;
- (id)getPlaybackRouteForStreamID:(unsigned long long)id;
- (BOOL)setAlertSoundFromURL:(id)url forType:(long long)type force:(BOOL)force;
- (BOOL)playRecordStartingAlertAndResetEndpointerFromStream:(unsigned long long)stream withAlertOverride:(long long)override;
- (BOOL)playAlertSoundForType:(long long)type recordDevideIndicator:(id)indicator;
- (unsigned long long)alertStartTime;
- (void)setMeteringEnabled:(BOOL)enabled;
- (void)updateMeters;
- (float)peakPowerForChannel:(unsigned long long)channel;
- (float)averagePowerForChannel:(unsigned long long)channel;
- (BOOL)isSessionCurrentlyActivated;
- (id)fetchGibraltarVoiceTriggerInfoWithRecordDeviceIndicator:(id)indicator;
- (void)enableMiniDucking:(BOOL)ducking;
- (id)metrics;
- (void)configureAlertBehavior:(id)behavior audioStreamHandleId:(unsigned long long)id;
- (void)audioEngineDidStartRecord:(id)record audioStreamHandleId:(unsigned long long)id successfully:(BOOL)successfully error:(id)error;
- (void)audioEngineBufferAvailable:(id)available audioStreamHandleId:(unsigned long long)id buffer:(id)buffer remoteVAD:(id)vad atTime:(unsigned long long)time isFileLoadedBuffer:(BOOL)buffer;
- (void)audioEngineDidStopRecord:(id)record audioStreamHandleId:(unsigned long long)id reason:(unsigned long long)reason;
- (void)audioEngineAudioChunkForTvAvailable:(id)available audioChunk:(id)chunk;
@end

#endif /* CSAudioInjectionProvider_h */
