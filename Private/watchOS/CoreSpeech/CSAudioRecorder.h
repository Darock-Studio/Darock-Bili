//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSAudioRecorder_h
#define CSAudioRecorder_h
@import Foundation;

#include "AVVoiceControllerRecordDelegate-Protocol.h"
#include "CSAudioDecoderDelegate-Protocol.h"
#include "CSAudioFileReader.h"
#include "CSAudioFileReaderDelegate-Protocol.h"
#include "CSAudioSessionEventProviding-Protocol.h"
#include "CSAudioSessionEventProvidingDelegate-Protocol.h"
#include "CSRemoteRecordClient.h"
#include "CSRemoteRecordClientDelegate-Protocol.h"
#include "CSUserSessionActiveMonitorDelegate-Protocol.h"

@class AVVoiceController, CSReusableBufferPool, NSHashTable, NSMutableDictionary, NSMutableSet, NSString;
@protocol OS_dispatch_queue;

@interface CSAudioRecorder : NSObject<AVVoiceControllerRecordDelegate, CSAudioDecoderDelegate, CSAudioFileReaderDelegate, CSRemoteRecordClientDelegate, CSUserSessionActiveMonitorDelegate, CSAudioSessionEventProviding> {
  /* instance variables */
  AVVoiceController *_voiceController;
  struct AudioBufferList { unsigned int mNumberBuffers; struct AudioBuffer { unsigned int mNumberChannels; unsigned int mDataByteSize; void *mData; } x[1] mBuffers; } _interleavedABL;
  struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x10; unsigned int x1; void * x2; } x[1] } * _pNonInterleavedABL;
  CSRemoteRecordClient *_remoteRecordClient;
  NSMutableDictionary *_opusDecoders;
  CSAudioFileReader *_audioFileReader;
  unsigned long long _audioFilePathIndex;
  BOOL _waitingForDidStart;
  unsigned long long _pendingTwoShotVTToken;
  CSReusableBufferPool *_audioBufferPool;
  NSMutableDictionary *_hasSetAlertDictionary;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *voiceControllerCreationQueue;
@property (retain, nonatomic) NSHashTable *observers;
@property (weak, nonatomic) NSObject<CSAudioSessionEventProvidingDelegate> *sessionEventDelegate;
@property (retain, nonatomic) NSMutableSet *remoteAccessoryStreamIdSet;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (unsigned long long)_convertDeactivateOption:(unsigned long long)option;
+ (void)createSharedAudioSession;
+ (void)resetDuckSettings;

/* instance methods */
- (id)init;
- (id)initWithQueue:(id)queue error:(id *)error;
- (void)registerObserver:(id)observer;
- (void)unregisterObserver:(id)observer;
- (void)setAudioSessionEventDelegate:(id)delegate;
- (void)userSessionActivateMonitor:(id)monitor didReceivedUserSessionActiveHasChanged:(BOOL)changed;
- (void)willDestroy;
- (void)dealloc;
- (void)_destroyVoiceController;
- (id)_createVoiceControllerWithError:(id *)error;
- (id)_getVoiceController;
- (void)setAnnounceCallsEnabled:(BOOL)enabled withStreamHandleID:(unsigned long long)id;
- (void)setContext:(id)context completion:(id /* block */)completion;
- (BOOL)setCurrentContext:(id)context streamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)prepareAudioStreamRecord:(id)record recordDeviceIndicator:(id)indicator error:(id *)error;
- (BOOL)_shouldInjectAudio;
- (BOOL)_startAudioStreamForAudioInjectionWithAVVCContext:(id)avvccontext;
- (BOOL)startAudioStreamWithOption:(id)option recordDeviceIndicator:(id)indicator error:(id *)error;
- (BOOL)stopAudioStreamWithRecordDeviceIndicator:(id)indicator error:(id *)error;
- (BOOL)isSessionCurrentlyActivated;
- (BOOL)isRecordingWithRecordDeviceIndicator:(id)indicator;
- (id)recordRouteWithRecordDeviceIndicator:(id)indicator;
- (id)recordDeviceInfoWithStreamHandleId:(unsigned long long)id recordDeviceIndicator:(id)indicator;
- (id)audioDeviceInfoWithStreamHandleId:(unsigned long long)id recordDeviceIndicator:(id)indicator;
- (float)recordingSampleRateWithStreamHandleId:(unsigned long long)id;
- (id)recordSettingsWithStreamHandleId:(unsigned long long)id;
- (BOOL)isNarrowBandWithStreamHandleId:(unsigned long long)id;
- (BOOL)prewarmAudioSessionWithStreamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)_shouldLogResourceNotAvailableError;
- (void)_logResourceNotAvailableErrorIfNeeded:(id)needed;
- (BOOL)setRecordMode:(long long)mode streamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)reason streamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)deactivateAudioSession:(unsigned long long)session error:(id *)error;
- (BOOL)deactivateAudioSession:(unsigned long long)session streamHandleId:(unsigned long long)id error:(id *)error;
- (void)enableSmartRoutingConsiderationForStream:(unsigned long long)stream enable:(BOOL)enable;
- (void)setDuckMixWithOthersForStream:(unsigned long long)stream duckOthers:(BOOL)others duckToLevelInDB:(id)db mixWithOthers:(BOOL)others;
- (void)enableMiniDucking:(BOOL)ducking;
- (void)configureAlertBehavior:(id)behavior audioStreamHandleId:(unsigned long long)id;
- (id)getPlaybackRouteForStreamID:(unsigned long long)id;
- (id)fetchGibraltarVoiceTriggerInfoWithRecordDeviceIndicator:(id)indicator;
- (BOOL)isDuckingSupportedOnCurrentRouteWithStreamHandleID:(unsigned long long)id error:(id *)error;
- (id)_updateLanguageCodeForRemoteVTEIResult:(id)vteiresult;
- (BOOL)_shouldUseRemoteBuiltInMic:(id)mic;
- (BOOL)setListeningMicIndicatorProperty;
- (BOOL)clearListeningMicIndicatorProperty;
- (void)_processAudioChain:(id)chain audioStreamHandleId:(unsigned long long)id remoteVAD:(id)vad atTime:(unsigned long long)time arrivalTimestampToAudioRecorder:(unsigned long long)recorder numberOfChannels:(int)channels;
- (void)_processAudioBuffer:(id)buffer audioStreamHandleId:(unsigned long long)id arrivalTimestampToAudioRecorder:(unsigned long long)recorder;
- (id)_compensateChannelDataIfNeeded:(id)needed receivedNumChannels:(unsigned int)channels;
- (void)audioDecoderDidDecodePackets:(id)packets audioStreamHandleId:(unsigned long long)id buffer:(id)buffer remoteVAD:(id)vad timestamp:(unsigned long long)timestamp arrivalTimestampToAudioRecorder:(unsigned long long)recorder wasBuffered:(BOOL)buffered receivedNumChannels:(unsigned int)channels;
- (void)_trackRemoteAccessoryStreamIdIfNeeded:(id)needed;
- (void)_stopTrackingRemoteAccessoryStreamId:(unsigned long long)id;
- (BOOL)_audioIsFromRemoteAccessory:(unsigned long long)accessory;
- (BOOL)setAlertSoundFromURL:(id)url forType:(long long)type force:(BOOL)force;
- (BOOL)playRecordStartingAlertAndResetEndpointerFromStream:(unsigned long long)stream withAlertOverride:(long long)override;
- (BOOL)playAlertSoundForType:(long long)type overrideMode:(long long)mode;
- (BOOL)playAlertSoundForType:(long long)type recordDevideIndicator:(id)indicator;
- (unsigned long long)alertStartTime;
- (void)setMeteringEnabled:(BOOL)enabled;
- (void)updateMeters;
- (float)peakPowerForChannel:(unsigned long long)channel;
- (float)averagePowerForChannel:(unsigned long long)channel;
- (id)metrics;
- (void)_audioRecorderDidStartRecordingSuccessfully:(BOOL)successfully streamHandleID:(unsigned long long)id error:(id)error;
- (void)_audioRecorderDidStopRecordingForReason:(long long)reason streamHandleID:(unsigned long long)id;
- (void)voiceControllerDidStartRecording:(id)recording forStream:(unsigned long long)stream successfully:(BOOL)successfully error:(id)error;
- (void)voiceControllerAudioCallback:(id)callback forStream:(unsigned long long)stream buffer:(id)buffer;
- (void)voiceControllerDidStopRecording:(id)recording forStream:(unsigned long long)stream forReason:(long long)reason;
- (void)voiceControllerStreamInvalidated:(id)invalidated forStream:(unsigned long long)stream;
- (void)voiceControllerRecordHardwareConfigurationDidChange:(id)change toConfiguration:(int)configuration;
- (void)voiceControllerDidFinishAlertPlayback:(id)playback ofType:(int)type error:(id)error;
- (void)voiceControllerEncoderErrorDidOccur:(id)occur error:(id)error;
- (void)voiceControllerBeginRecordInterruption:(id)interruption;
- (void)voiceControllerBeginRecordInterruption:(id)interruption withContext:(id)context;
- (void)voiceControllerEndRecordInterruption:(id)interruption;
- (void)voiceControllerWillSetAudioSessionActive:(id)active willActivate:(BOOL)activate;
- (void)voiceControllerDidSetAudioSessionActive:(id)active isActivated:(BOOL)activated;
- (void)remoteRecordDidStartRecordingWithStreamHandleId:(unsigned long long)id error:(id)error;
- (void)remoteRecordDidStopRecordingWithWithStreamHandleId:(unsigned long long)id error:(id)error;
- (void)remoteRecordLPCMBufferAvailable:(id)available streamHandleId:(unsigned long long)id;
- (void)remoteRecordTwoShotDetectedAtTime:(double)time;
- (void)remoteRecordConnectionDisconnected:(id)disconnected;
- (BOOL)_hasLocalPendingTwoShot;
- (BOOL)_needResetAudioInjectionIndex:(id)index;
- (void)audioFileReaderBufferAvailable:(id)available buffer:(id)buffer atTime:(unsigned long long)time;
- (void)audioFileReaderDidStartRecording:(id)recording successfully:(BOOL)successfully error:(id)error;
- (void)audioFileReaderDidStopRecording:(id)recording forReason:(long long)reason;
- (id)_getRecordSettingsWithRequest:(id)request;
- (id)_fetchRemoteRecordClientWithDeviceId:(id)id streamHandleId:(unsigned long long)id;
- (id)_recordModeString:(long long)string;
@end

#endif /* CSAudioRecorder_h */
