//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSAudioProvider_h
#define CSAudioProvider_h
@import Foundation;

#include "CSAudioAlertProviding-Protocol.h"
#include "CSAudioAlertProvidingDelegate-Protocol.h"
#include "CSAudioMeterProviding-Protocol.h"
#include "CSAudioMetricProviding-Protocol.h"
#include "CSAudioPreprocessor.h"
#include "CSAudioPreprocessorDelegate-Protocol.h"
#include "CSAudioProviderDelegate-Protocol.h"
#include "CSAudioRecordDeviceIndicator.h"
#include "CSAudioRecorder.h"
#include "CSAudioRecorderDelegate-Protocol.h"
#include "CSAudioServerCrashMonitorDelegate-Protocol.h"
#include "CSAudioSessionProviding-Protocol.h"
#include "CSAudioSessionProvidingDelegate-Protocol.h"
#include "CSAudioStreamProviding-Protocol.h"
#include "CSMicUsageReporter.h"
#include "CSPhoneCallStateMonitor.h"
#include "CSTriggerInfoProviding-Protocol.h"

@class CSADPPreventStandbyAssertion, CSAudioCircularBuffer, CSAudioRecordContext, CSAudioTimeConverter, CSOSTransaction, CSStateCapture, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSUUID;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source;

@interface CSAudioProvider : NSObject<CSAudioRecorderDelegate, CSAudioServerCrashMonitorDelegate, CSAudioPreprocessorDelegate, CSAudioStreamProviding, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioAlertProviding, CSAudioMeterProviding, CSTriggerInfoProviding>

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *recordQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *loggingQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *streamHandleQueue;
@property (retain, nonatomic) CSAudioRecorder *audioRecorder;
@property (nonatomic) unsigned long long streamState;
@property (retain, nonatomic) NSHashTable *startPendingStreams;
@property (retain, nonatomic) NSHashTable *startPendingOnStoppingStreams;
@property (retain, nonatomic) NSHashTable *alertPlaybackFinishWaitingStreams;
@property (retain, nonatomic) NSHashTable *streams;
@property (retain, nonatomic) NSHashTable *stopPendingStreams;
@property (retain, nonatomic) NSMutableArray *pendingStartCompletions;
@property (retain, nonatomic) NSMutableArray *alertPlaybackFinishWaitingCompletions;
@property (retain, nonatomic) NSMutableArray *pendingStopCompletions;
@property (retain, nonatomic) NSMutableDictionary *startPendingOnStoppingStreamToCompletionDict;
@property (weak, nonatomic) NSObject<CSAudioProviderDelegate> *providerDelegate;
@property (weak, nonatomic) NSObject<CSAudioSessionProvidingDelegate> *sessionDelegate;
@property (retain, nonatomic) NSMutableArray *streamHolders;
@property (retain, nonatomic) NSHashTable *historicalBufferRequestStreams;
@property (retain, nonatomic) CSAudioCircularBuffer *circularBuffer;
@property (weak, nonatomic) NSObject<CSAudioAlertProvidingDelegate> *alertDelegate;
@property (retain, nonatomic) CSAudioRecordContext *lastAudioRecorderContext;
@property (nonatomic) BOOL audioSystemRecovering;
@property (retain, nonatomic) CSAudioPreprocessor *audioPreprocessor;
@property (retain, nonatomic) CSOSTransaction *recordingTransaction;
@property (retain, nonatomic) NSObject<OS_dispatch_group> *recordingWillStartGroup;
@property (nonatomic) BOOL waitingForAlertFinish;
@property (nonatomic) unsigned long long audioStreamHandleId;
@property (retain, nonatomic) NSUUID *alertPlaybackFinishTimeoutToken;
@property (retain, nonatomic) NSUUID *startRecordingWatchDogToken;
@property (retain, nonatomic) NSUUID *stopRecordingWatchDogToken;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *audioPacketWatchdog;
@property (nonatomic) unsigned long long circularBufferStartHostTime;
@property (nonatomic) unsigned long long circularBufferStartSampleCount;
@property (retain, nonatomic) CSAudioTimeConverter *audioTimeConverter;
@property (nonatomic) unsigned long long estimatedStartHostTime;
@property (nonatomic) long long audioStreamType;
@property (retain, nonatomic) CSAudioRecordDeviceIndicator *recordDeviceIndicator;
@property (retain, nonatomic) CSMicUsageReporter *micUsageReporter;
@property (nonatomic) unsigned long long audioPacketDeliveryCount;
@property (retain, nonatomic) CSADPPreventStandbyAssertion *adpAssertion;
@property (retain, nonatomic) CSPhoneCallStateMonitor *phoneCallStateMonitor;
@property (nonatomic) unsigned long long phoneCallState;
@property (nonatomic) BOOL currentSessionShouldDuckOnBuiltInSpeaker;
@property (retain, nonatomic) NSMutableDictionary *recordModeLocks;
@property (retain, nonatomic) NSMutableDictionary *listeningMicIndicatorLocks;
@property (retain, nonatomic) CSStateCapture *stateCapture;
@property (readonly, nonatomic) NSString *UUID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithAudioStreamHandleId:(unsigned long long)id audioStreamType:(long long)type audioRecordContext:(id)context audioRecorder:(id)recorder phoneCallStateMonitor:(id)monitor;
- (id)initWithAudioStreamHandleId:(unsigned long long)id audioStreamType:(long long)type audioRecordContext:(id)context audioRecorder:(id)recorder;
- (void)dealloc;
- (void)start;
- (void)setAudioProviderDelegate:(id)delegate;
- (void)setLatestRecordContext:(id)context streamType:(long long)type;
- (void)_setLatestRecordContext:(id)context;
- (unsigned long long)audioStreamId;
- (BOOL)_canSetContext;
- (BOOL)supportsDuckingOnCurrentRouteWithError:(id *)error;
- (BOOL)setCurrentContext:(id)context error:(id *)error;
- (id)_audioStreamWithRequest:(id)request streamName:(id)name error:(id *)error;
- (id)audioStreamWithRequest:(id)request streamName:(id)name error:(id *)error;
- (void)audioStreamWithRequest:(id)request streamName:(id)name completion:(id /* block */)completion;
- (void)attachTandemStream:(id)stream toPrimaryStream:(id)stream completion:(id /* block */)completion;
- (BOOL)_prepareAudioStreamSync:(id)sync request:(id)request error:(id *)error;
- (void)_prepareAudioStream:(id)stream request:(id)request completion:(id /* block */)completion;
- (void)_createCircularBufferIfNeededWithNumChannel:(unsigned long long)channel playbackRoute:(id)route;
- (void)startAudioStream:(id)stream option:(id)option completion:(id /* block */)completion;
- (BOOL)prepareAudioStreamSync:(id)sync request:(id)request error:(id *)error;
- (void)prepareAudioStream:(id)stream request:(id)request completion:(id /* block */)completion;
- (void)_startAudioStream:(id)stream option:(id)option completion:(id /* block */)completion;
- (id)_acquireListeningMicIndicatorLockFrom:(unsigned long long)from;
- (void)_releaseListeningMicIndicatorLock:(id)lock;
- (void)_forceReleaseListeningMicIndicatorLockFrom:(unsigned long long)from;
- (void)_forceReleaseAllListeningMicIndicatorLocks;
- (void)_setListeningMicIndicatorPropertyIfNeeded;
- (void)_clearListeningMicIndicatorPropertyIfNeeded;
- (BOOL)_setListeningMicIndicatorProperty;
- (BOOL)_clearListeningMicIndicatorProperty;
- (id)_acquireRecordModeLockFrom:(unsigned long long)from;
- (void)_releaseRecordModeLock:(id)lock;
- (void)_forceReleaseRecordModeLockFrom:(unsigned long long)from;
- (void)_forceReleaseAllRecordModeLocks;
- (void)_switchToRecordingMode;
- (void)_switchToListeningMode;
- (void)_resetCircularBufferStartTime;
- (void)_handleDidStartAudioStreamWithResult:(BOOL)result error:(id)error;
- (void)_preEpilogueAudioStream;
- (void)_postEpilogueAudioStream;
- (void)_handleDidStopAudioStreamWithReason:(long long)reason;
- (void)stopAudioStream:(id)stream option:(id)option completion:(id /* block */)completion;
- (void)_stopAudioStream:(id)stream option:(id)option completion:(id /* block */)completion;
- (id)audioChunkFrom:(unsigned long long)from to:(unsigned long long)to;
- (id)audioChunkFrom:(unsigned long long)from to:(unsigned long long)to channelIdx:(unsigned long long)idx;
- (id)audioChunkToEndFrom:(unsigned long long)from;
- (id)audioChunkToEndFrom:(unsigned long long)from channelIdx:(unsigned long long)idx;
- (id)_audioChunkFrom:(unsigned long long)from to:(unsigned long long)to;
- (id)_audioChunkFrom:(unsigned long long)from to:(unsigned long long)to channelIdx:(unsigned long long)idx;
- (void)saveRecordingBufferToEndFrom:(unsigned long long)from toURL:(id)url;
- (void)saveRecordingBufferFrom:(unsigned long long)from to:(unsigned long long)to toURL:(id)url;
- (void)_saveRecordingBufferFrom:(unsigned long long)from to:(unsigned long long)to toURL:(id)url;
- (id)holdAudioStreamWithDescription:(id)description option:(id)option;
- (void)_holdAudioStreamWithHolder:(id)holder option:(id)option;
- (void)_didFireStreamHolderTimeout:(id)timeout;
- (void)_cancelAudioStreamHold:(id)hold;
- (void)cancelAudioStreamHold:(id)hold;
- (id)recordRoute;
- (id)recordDeviceInfo;
- (id)audioDeviceInfo;
- (id)recordSettings;
- (id)playbackRoute;
- (void)setAudioSessionDelegate:(id)delegate;
- (BOOL)prewarmAudioSessionWithError:(id *)error;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)reason dynamicAttribute:(unsigned long long)attribute bundleID:(id)id error:(id *)error;
- (BOOL)_activateAudioSessionWithReason:(unsigned long long)reason error:(id *)error;
- (BOOL)_shouldDuckOnBuiltInSpeaker;
- (BOOL)_isDuckingOnSpeakerOutputSupportedWithCurrentRoute;
- (BOOL)deactivateAudioSession:(unsigned long long)session error:(id *)error;
- (BOOL)_deactivateAudioSession:(unsigned long long)session error:(id *)error;
- (void)enableSmartRoutingConsideration:(BOOL)consideration;
- (void)setDuckOthersOption:(BOOL)option;
- (void)enableMiniDucking:(BOOL)ducking;
- (void)setAnnounceCallsEnabled:(BOOL)enabled withStreamHandleID:(unsigned long long)id;
- (void)setAudioAlertDelegate:(id)delegate;
- (BOOL)setAlertSoundFromURL:(id)url forType:(long long)type force:(BOOL)force;
- (BOOL)playAlertSoundForType:(long long)type;
- (BOOL)_didPlayStartAlertSoundForSiri:(id)siri audioStream:(id)stream;
- (BOOL)playRecordStartingAlertAndResetEndpointerWithAlertOverride:(long long)override;
- (unsigned long long)alertStartTime;
- (void)configureAlertBehavior:(id)behavior;
- (id)audioMetric;
- (void)setMeteringEnabled:(BOOL)enabled;
- (void)updateMeters;
- (float)peakPowerForChannel:(unsigned long long)channel;
- (float)averagePowerForChannel:(unsigned long long)channel;
- (void)triggerInfoForContext:(id)context completion:(id /* block */)completion;
- (BOOL)_shouldStopRecording;
- (void)audioPreprocessor:(id)preprocessor hasAvailableBuffer:(id)buffer atTime:(unsigned long long)time arrivalTimestampToAudioRecorder:(unsigned long long)recorder numberOfChannels:(int)channels;
- (void)audioRecorderDidStartRecord:(id)record audioStreamHandleId:(unsigned long long)id successfully:(BOOL)successfully error:(id)error;
- (void)audioRecorderDidStopRecord:(id)record audioStreamHandleId:(unsigned long long)id reason:(long long)reason;
- (void)audioRecorderStreamHandleIdInvalidated:(unsigned long long)invalidated;
- (void)_handleAudioRecorderStreamHandleIdInvalidated:(unsigned long long)invalidated;
- (void)audioRecorderWillBeDestroyed:(id)destroyed;
- (void)_fetchHistoricalAudioAndForwardToStream:(id)stream remoteVAD:(id)vad;
- (void)_deliverHistoricalAudioToStreamsWithRemoteVAD:(id)vad;
- (void)_processAudioBuffer:(id)buffer remoteVAD:(id)vad atTime:(unsigned long long)time arrivalTimestampToAudioRecorder:(unsigned long long)recorder numberOfChannels:(int)channels;
- (void)_forwardAudioChunk:(id)chunk toStream:(id)stream;
- (void)_deliverPostprocessAudioChunk:(id)chunk toStream:(id)stream lastForwardedSampleCount:(unsigned long long)count;
- (void)audioRecorderBufferAvailable:(id)available audioStreamHandleId:(unsigned long long)id buffer:(id)buffer remoteVAD:(id)vad atTime:(unsigned long long)time arrivalTimestampToAudioRecorder:(unsigned long long)recorder numberOfChannels:(int)channels;
- (void)_forwardAudioChunkForTV:(id)tv toStream:(id)stream;
- (void)audioRecorderBufferAvailable:(id)available audioStreamHandleId:(unsigned long long)id buffer:(id)buffer;
- (BOOL)isRecording;
- (BOOL)isNarrowBand;
- (void)audioRecorderRecordHardwareConfigurationDidChange:(id)change toConfiguration:(long long)configuration;
- (void)_scheduleAlertFinishTimeout:(double)timeout;
- (void)_didReceiveFinishStartAlertPlaybackAt:(unsigned long long)at;
- (void)audioRecorderDidFinishAlertPlayback:(id)playback ofType:(long long)type error:(id)error;
- (void)notifyProviderContextChanged;
- (void)audioRecorderBuiltInAudioStreamInvalidated:(id)invalidated error:(id)error;
- (void)audioRecorderBeginRecordInterruption:(id)interruption;
- (void)audioRecorderBeginRecordInterruption:(id)interruption withContext:(id)context;
- (void)audioRecorderEndRecordInterruption:(id)interruption;
- (void)audioRecorder:(id)recorder willSetAudioSessionActive:(BOOL)active;
- (void)audioRecorder:(id)recorder didSetAudioSessionActive:(BOOL)active;
- (void)audioRecorderDisconnected:(id)disconnected;
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)crash;
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)restart;
- (void)_handleAudioSystemFailure;
- (id)_streamStateName:(unsigned long long)name;
- (void)_holdRecordingTransactionIfNeeded;
- (void)_releaseRecordingTransactionIfNeeded;
- (void)_holdRecordingExceptionIfNeeded:(BOOL)needed;
- (void)_scheduleAudioPacketWatchDog;
- (void)_cancelAudioPacketWatchDog;
- (void)_onAudioPacketWatchdogFire;
- (void)_scheduleDidStartRecordingDelegateWatchDog;
- (void)_schduleDidStartRecordingDelegateWatchDogWithToken:(id)token;
- (void)_clearDidStartRecordingDelegateWatchDog;
- (void)_scheduleDidStopRecordingDelegateWatchDog;
- (void)_scheduleDidStopRecordingDelegateWatchDog:(id)dog;
- (void)_clearDidStopRecordingDelegateWatchDog;
- (BOOL)_shouldHandleStartPendingOnStopping:(unsigned long long)stopping withStopReason:(long long)reason;
- (void)_updateRemoteDeviceIdFromAVVCIfNeeded;
- (void)CSPhoneCallStateMonitor:(id)monitor didRecievePhoneCallStateChange:(unsigned long long)change;
- (int)circularBufferNumInputChannel;
- (float)circularBufferInputRecordingDuration;
@end

#endif /* CSAudioProvider_h */
