//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSSiriSpeechRecorder_h
#define CSSiriSpeechRecorder_h
@import Foundation;

#include "CSAudioDeviceInfo.h"
#include "CSAudioSessionController.h"
#include "CSAudioSessionControllerDelegate-Protocol.h"
#include "CSEndpointAnalyzer-Protocol.h"
#include "CSEndpointAnalyzerDelegate-Protocol.h"
#include "CSEndpointDelayReporter.h"
#include "CSEndpointerMetrics.h"
#include "CSLanguageDetectorDelegate-Protocol.h"
#include "CSSiriAcousticFingerprinter.h"
#include "CSSiriAcousticFingerprinterDelegate-Protocol.h"
#include "CSSiriAudioActivationInfo.h"
#include "CSSiriAudioFileWriter.h"
#include "CSSiriAudioPlaybackService.h"
#include "CSSiriSpeechCapturing-Protocol.h"
#include "CSSiriSpeechRecordingContext.h"
#include "CSSpeakerIdentificationDelegate-Protocol.h"
#include "CSSpeechController.h"
#include "CSSpeechControllerDelegate-Protocol.h"

@class AFBluetoothWirelessSplitterSessionStateObserver, AFClientConfiguration, AFExperimentContext, AFSpeechSynthesisRecord, AFWatchdogTimer, NSArray, NSDictionary, NSFileHandle, NSMutableDictionary, NSString, NSUUID, NSXPCConnection, SASResultCandidate;
@protocol CSSiriSpeechCapturingDelegate, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source;

@interface CSSiriSpeechRecorder : NSObject<CSSiriAcousticFingerprinterDelegate, CSSpeechControllerDelegate, CSEndpointAnalyzerDelegate, CSLanguageDetectorDelegate, CSSpeakerIdentificationDelegate, CSAudioSessionControllerDelegate, CSSiriSpeechCapturing> {
  /* instance variables */
  NSObject<CSSiriSpeechCapturingDelegate> *_delegate;
  NSObject<OS_dispatch_queue> *_queue;
  BOOL _isSpeechControllerInitialized;
  CSSpeechController *_speechController;
  CSAudioSessionController *_audioSessionController;
  CSSiriAudioPlaybackService *_audioPlaybackService;
  long long _packetCount;
  long long _speechCapturingMode;
  long long _recordingAlertsConfiguration;
  NSObject<OS_dispatch_source> *_extendedEndpointTimer;
  NSObject<CSEndpointAnalyzer> *_endpointAnalyzer;
  CSSiriSpeechRecordingContext *_context;
  CSSiriAudioActivationInfo *_currentActivationInfo;
  CSSiriAudioActivationInfo *_pendingActivationInfo;
  CSAudioDeviceInfo *_currentAudioDeviceInfo;
  BOOL _fingerprintingEnabled;
  CSSiriAcousticFingerprinter *_fingerprinter;
  long long _audioFileType;
  BOOL _needsAVVCLPCMCallbacks;
  BOOL _hasReceivedEmptyLPCMRecordBuffer;
  NSFileHandle *_audioFileHandle;
  CSSiriAudioFileWriter *_audioFileWriter;
  long long _startEvent;
  long long _recordingState;
  long long _endpointerOperationMode;
  BOOL _didReceiveFirstBuffer;
  BOOL _didReceiveLastBuffer;
  BOOL _didDetectStartpoint;
  BOOL _didDetectEndpoint;
  BOOL _didEnterTwoShotMode;
  BOOL _didFakeTwoShotWithAlert;
  NSUUID *_fakeTwoShotTTSPromptUUID;
  BOOL _serverDidRecognizeSpeech;
  BOOL _fingerprintWasRecognized;
  BOOL _serverDidEndpoint;
  BOOL _didTimeout;
  BOOL _wasCanceled;
  BOOL _suppressRecordingStoppedAlert;
  BOOL _isRecordingUsingBTRoute;
  double _twoShotStartTime;
  BOOL _didPerformTwoShotPrompt;
  BOOL _forceSuccessAlertOnStop;
  BOOL _isDriving;
  BOOL _shouldDisableSpeechPacketGeneration;
  BOOL _hybridUODEnabled;
  double _startRecordingTimestamp;
  double _firstBufferTimestamp;
  unsigned long long _firstBufferHostTime;
  unsigned long long _estimatedSpeechEndHostTime;
  double _lastPrepareTimestamp;
  double _accumulatedBufferDuration;
  NSDictionary *_speechRecognizedContextForServerEndpointInstrumentation;
  double _skippedSamplesTimeInSec;
  NSObject<OS_dispatch_group> *_recordingWillStartGroup;
  unsigned long long _stopRecordingReason;
  unsigned long long _stopRecordingMachContinuousTime;
  struct OpaqueAudioConverter * _decoder;
  double _expectedFirstBufferTimestamp;
  BOOL _isOpus;
  NSString *_recordDevice;
  BOOL _audioDuckingEnabled;
  NSXPCConnection *_speechRecordingEventListenerConnection;
  AFWatchdogTimer *_fakeTwoShotTTSPromptWatchdogTimer;
  unsigned long long _lastAudioRecordBufferStartTime;
  unsigned long long _lastAudioRecordBufferReceiptTime;
  CSEndpointerMetrics *_lastEndpointerMetrics;
  CSEndpointDelayReporter *_endpointDelayReporter;
  NSArray *_lastEndpointHintFeatures;
  id /* block */ _lastEndpointHintCompletion;
  SASResultCandidate *_lastEndpointHintRC;
  BOOL _lastEndpointHintRCProcessedForMitigation;
  AFSpeechSynthesisRecord *_mostRecentSpeechSynthesisRecord;
  AFClientConfiguration *_currentClientConfiguration;
  NSObject<OS_dispatch_group> *_alertPlaybackGroup;
  NSMutableDictionary *_numberOfAVVCAlertPlaybacksByType;
  AFBluetoothWirelessSplitterSessionStateObserver *_bluetoothWirelessSplitterSessionStateObserver;
  AFExperimentContext *_experimentContext;
  NSUUID *_mhUUID;
}

@property (nonatomic) BOOL suppressInterruptionEndedNotifications;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithQueue:(id)queue speechController:(id)controller audioSessionController:(id)controller audioPlaybackService:(id)service experimentContext:(id)context;
- (void)dealloc;
- (id)_currentMHUUID:(BOOL)mhuuid;
- (id)_mhUUIDFromSpeechRequestOptions:(id)options;
- (id)_currentRtsSessionId:(BOOL)id;
- (id)_rtsSessionIdFromSpeechRequestOptions:(id)options;
- (void)_setSpeechCapturingMode:(long long)mode;
- (void)_setEndpointerOperationMode:(long long)mode forceUpdate:(BOOL)update;
- (void)_setAlertsIfNeeded;
- (void)_updateRecordBufferDuration;
- (id)_speechController;
- (id)_speechControllerWithError:(id *)error;
- (void)_resetSpeechController;
- (id)_fingerprinter;
- (BOOL)_prepareSpeechControllerWithOptions:(unsigned long long)options error:(id *)error;
- (void)_stopRecordingWithReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })reason hostTime:(unsigned long long)time;
- (void)_reportServerEndpointMetricsIfNeeded;
- (BOOL)_shouldEmitInstrumentation;
- (int)_mapInstrumentationEndpointTypeFromStopRecordingReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })reason;
- (void)_playAudioAlert:(long long)alert;
- (BOOL)_checkAudioLoggingLimits:(id)limits;
- (BOOL)_prepareDirectoryAtPath:(id)path;
- (void)_setupAudioFileWritingForSpeechController:(id)controller info:(id)info context:(id)context;
- (void)_setEndpointStyle:(long long)style;
- (void)_scheduleExtendedEndpointTimer;
- (void)_cancelExtendedEndpointTimer;
- (void)_stopRecordingForEndpointReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })reason withEndpointMetrics:(id)metrics;
- (void)eagerlyInitializeAudioRecording;
- (void)preheatWithOption:(id)option;
- (void)preheatRecognizerWithOption:(id)option;
- (BOOL)prepareSpeechCaptureWithOptions:(unsigned long long)options error:(id *)error;
- (id)recordingInfoForPreheatWithEvent:(long long)event;
- (id)currentVTSatScore;
- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange { double x0; double x1; })range;
- (void)prepareForMode:(long long)mode;
- (void)prepareForMode:(long long)mode withOptions:(id)options;
- (BOOL)startSpeechCaptureWithContext:(id)context willStartHandler:(id /* block */)handler error:(id *)error;
- (void)updateSpeechSynthesisRecord:(id)record;
- (unsigned int)fetchAudioSessionID;
- (unsigned int)_audioSessionID;
- (id)fetchRecordingInfo;
- (id)fetchAudioDeviceInfo;
- (void)_logFanState;
- (id)_getFanInfoArray;
- (void)_logBluetoothStateWithMHUUID:(id)mhuuid;
- (void)_logVoiceTriggerInfo:(id)info withMHUUID:(id)mhuuid;
- (void)_logAudioMetrics:(id)metrics mhUUID:(id)uuid;
- (void)setSpeechRequestOptions:(id)options;
- (void)_updateAudioContextWithInfo:(id)info reason:(id)reason;
- (BOOL)_setAudioContextWithInfo:(id)info forReason:(id)reason;
- (BOOL)_updateAudioContextToPostVoiceForReason:(id)reason;
- (BOOL)_updateAudioContextWithPendingInfoForReason:(id)reason;
- (void)setDelegate:(id)delegate;
- (void)releaseAudioSession;
- (void)setSpeechWasRecognizedForElapsedTime:(double)time isFinal:(BOOL)final;
- (void)setFingerprintWasRecognized;
- (void)stopSpeechCaptureForEvent:(long long)event suppressAlert:(BOOL)alert hostTime:(unsigned long long)time;
- (void)cancelSpeechCaptureSuppressingAlert:(BOOL)alert;
- (void)setFingerprintingEnabled:(BOOL)enabled;
- (void)forceSuccessAudioAlertOnStop;
- (void)setAudioFileType:(long long)type;
- (void)setAudioFileHandle:(id)handle;
- (void)setIsDriving:(BOOL)driving;
- (void)disableSpeechPacketGeneration:(BOOL)generation;
- (void)setHybridUODEnabled:(BOOL)uodenabled;
- (void)setSpeechRecordingEventListeningEndpoint:(id)endpoint;
- (id)_speechRecordingEventListener;
- (void)setClientConfiguration:(id)configuration;
- (void)getLastStartpointTimestampAndCurrentTime:(id /* block */)time;
- (void)playRecordingStartAlert;
- (void)updateServerEndpointFeatures:(id)features;
- (id)_currentRecordRoute;
- (id)_currentRecordDeviceInfo;
- (id)_currentPlaybackRoute;
- (void)_updateAudioDeviceInfo:(id)info forReason:(id)reason forcesUpdate:(BOOL)update;
- (id)_currentRecordingInfo;
- (id)_recordingInfoForEvent:(long long)event audioAlertStyle:(long long)style includeBTInfo:(BOOL)btinfo includeRecordDeviceInfo:(BOOL)info;
- (void)speechControllerDidStartRecording:(id)recording audioDeviceInfo:(id)info successfully:(BOOL)successfully error:(id)error;
- (void)_speechControllerDidStartRecording:(id)recording successfully:(BOOL)successfully error:(id)error;
- (void)speechControllerDidDeliverLastBuffer:(id)buffer forReason:(long long)reason estimatedSpeechEndHostTime:(unsigned long long)time;
- (void)speechControllerDidStopRecording:(id)recording audioDeviceInfo:(id)info forReason:(long long)reason estimatedSpeechEndHostTime:(unsigned long long)time;
- (void)_speechControllerDidStopRecording:(id)recording audioDeviceInfo:(id)info forReason:(long long)reason estimatedSpeechEndHostTime:(unsigned long long)time errorCodeOverride:(long long)override underlyingError:(id)error;
- (void)speechControllerRecordBufferAvailable:(id)available buffers:(id)buffers durationInSec:(float)sec recordedAt:(unsigned long long)at audioDeviceInfo:(id)info;
- (void)_speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:(unsigned long long)time atHostTime:(unsigned long long)time mhUUID:(id)uuid;
- (int)convertSISchemaAudioInputRouteToMHRoute:(int)mhroute withRecordingInfo:(id)info;
- (id)getAudioRouteInstrumentationWithRecordingInfo:(id)info;
- (void)speechControllerLPCMRecordBufferAvailable:(id)available buffer:(id)buffer recordedAt:(unsigned long long)at;
- (void)_speechControllerDidReceiveLastAudioRecordBuffer:(id)buffer forReason:(long long)reason estimatedSpeechEndHostTime:(unsigned long long)time isRecordingStopped:(BOOL)stopped;
- (void)speechControllerBeginRecordInterruption:(id)interruption withContext:(id)context;
- (void)speechControllerEndRecordInterruption:(id)interruption;
- (void)speechControllerRecordHardwareConfigurationDidChange:(id)change toConfiguration:(long long)configuration;
- (void)speechController:(id)controller willSetAudioSessionActive:(BOOL)active;
- (void)speechController:(id)controller didSetAudioSessionActive:(BOOL)active;
- (void)speechControllerDidFinishAlertPlayback:(id)playback ofType:(long long)type error:(id)error;
- (void)_setLanguageDetectorDelegateIfRequired;
- (BOOL)_shouldPlayTwoShotToneFeedbackOnHorseman;
- (BOOL)_shouldPlaySummonedToneOnTopCapInvocationOnHorseman;
- (void)_playStopAlertIfNecessaryForReason:(long long)reason endpointMode:(long long)mode error:(id)error;
- (void)languageDetectorDidDetectLanguageWithConfidence:(id)confidence confidence:(id)confidence isConfident:(BOOL)confident;
- (void)speechControllerDidDetectVoiceTriggerTwoShot:(id)shot atTime:(double)time wantsAudibleFeedback:(BOOL)feedback;
- (void)suppressUtteranceGradingIfRequired;
- (void)speechControllerRequestsOperation:(unsigned long long)operation forReason:(unsigned long long)reason;
- (void)speechControllerRequestsOperation:(unsigned long long)operation forReason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)_speechControllerRequestsOperation:(unsigned long long)operation forReason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)speechControllerDidUpdateSmartSiriVolume:(id)volume forReason:(unsigned long long)reason;
- (void)endpointer:(id)endpointer didDetectStartpointAtTime:(double)time;
- (void)endpointer:(id)endpointer didDetectHardEndpointAtTime:(double)time withMetrics:(id)metrics;
- (void)_hardEndpointWasDetectedWithMetrics:(id)metrics atTime:(double)time;
- (void)_performTwoShotPromptForType:(long long)type withOverride:(long long)override atTime:(double)time;
- (void)_playPhaticWithCompletion:(id /* block */)completion;
- (void)_handleFakeTwoShotPromptTimeoutWithUUID:(id)uuid;
- (void)_handleFakeTwoShotPromptCallbackWithUUID:(id)uuid timestamp:(double)timestamp duration:(double)duration error:(id)error;
- (id)_convertToAFSpeechPackage:(id)package;
- (void)updateEndpointHintForRC:(id)rc forceAccept:(BOOL)accept completion:(id /* block */)completion;
- (void)_checkIfLastEndpointHintShouldBeAccepted:(BOOL)accepted;
- (void)_clearEndpointHint;
- (void)_enforceEndpointHintWithMitigation:(BOOL)mitigation;
- (void)enforcePreviousEndpointHint;
- (void)setEndpointerThreshold:(double)threshold;
- (void)setEndpointerDelayedTrigger:(BOOL)trigger;
- (void)setSpeechRecognizedContext:(id)context;
- (void)performBlockAfterAlerts:(id /* block */)alerts timeout:(double)timeout;
- (void)setEARLanguageDetectorSpeechRequestId:(id)id;
- (void)acousticFingerprinter:(id)fingerprinter hasFingerprint:(id)fingerprint duration:(double)duration;
- (BOOL)_startAudioPlaybackRequest:(id)request options:(unsigned long long)options completion:(id /* block */)completion;
- (void)speakerIdentificationDidDetectSpeakerWithScores:(id)scores;
- (void)audioSessionController:(id)controller didReceiveAudioSessionInterruptionNotificationWithUserInfo:(id)info;
- (void)audioSessionController:(id)controller didReceiveAudioSessionRouteChangeNotificationWithUserInfo:(id)info;
- (void)audioSessionController:(id)controller didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:(id)info;
- (void)audioSessionController:(id)controller didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)info;
- (void)audioSessionController:(id)controller didReceiveAudioSessionOwnerLostNotification:(id)notification;
- (void)audioSessionController:(id)controller didReceiveAudioSessionOwnerResetNotification:(id)notification;
- (unsigned int)_audioDeviceID;
- (void)_setDictationAudioModeEnabled:(BOOL)enabled;
- (void)_setAudioDuckingEnabled:(BOOL)enabled;
@end

#endif /* CSSiriSpeechRecorder_h */
