//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSSpeechController_h
#define CSSpeechController_h
@import Foundation;

#include "CSAudioAlertProviding-Protocol.h"
#include "CSAudioAlertProvidingDelegate-Protocol.h"
#include "CSAudioConverter.h"
#include "CSAudioConverterDelegate-Protocol.h"
#include "CSAudioDecoderDelegate-Protocol.h"
#include "CSAudioDeviceInfo.h"
#include "CSAudioMeterProviding-Protocol.h"
#include "CSAudioMetricProviding-Protocol.h"
#include "CSAudioSampleRateConverter.h"
#include "CSAudioSessionController.h"
#include "CSAudioSessionControllerDelegate-Protocol.h"
#include "CSAudioSessionProviding-Protocol.h"
#include "CSAudioSessionProvidingDelegate-Protocol.h"
#include "CSAudioStream.h"
#include "CSAudioStreamProviding-Protocol.h"
#include "CSAudioStreamProvidingDelegate-Protocol.h"
#include "CSContinuousVoiceTriggerDelegate-Protocol.h"
#include "CSEndpointAnalyzer-Protocol.h"
#include "CSEndpointAnalyzerImplDelegate-Protocol.h"
#include "CSEndpointerProxy.h"
#include "CSLanguageCodeUpdateMonitorDelegate-Protocol.h"
#include "CSLanguageDetector.h"
#include "CSLanguageDetectorDelegate-Protocol.h"
#include "CSRCHandlingXPCClient.h"
#include "CSSACInfoMonitor.h"
#include "CSSmartSiriVolumeController.h"
#include "CSSmartSiriVolumeControllerDelegate-Protocol.h"
#include "CSSpeakerIdentificationDelegate-Protocol.h"
#include "CSSpeechControllerDelegate-Protocol.h"
#include "CSSpeechEndHostTimeEstimator.h"
#include "CSSpeechManagerDelegate-Protocol.h"
#include "CSVolumeMonitor.h"
#include "CSXPCClient.h"
#include "CSXPCClientDelegate-Protocol.h"
#include "CSXPCClientFactory.h"
#include "SOClockAlarmListening-Protocol.h"
#include "SOClockTimerListening-Protocol.h"
#include "SOMediaNowPlayingListening-Protocol.h"

@class CSAudioPowerMeter, CSAudioRecordContext, CSAudioStopStreamOption, CSAudioZeroCounter, CSPlainAudioFileWriter, CSSelectiveChannelAudioFileWriter, CSUncompressedAudioLogging, NSDictionary, NSMutableDictionary, NSString, NSUUID, SOClockAlarmObserver, SOClockTimerObserver, SOMediaNowPlayingObserver;
@protocol OS_dispatch_group, OS_dispatch_queue;

@interface CSSpeechController : NSObject<CSAudioConverterDelegate, CSSmartSiriVolumeControllerDelegate, CSAudioStreamProvidingDelegate, CSAudioAlertProvidingDelegate, CSAudioSessionControllerDelegate, CSAudioDecoderDelegate, CSEndpointAnalyzerImplDelegate, CSLanguageCodeUpdateMonitorDelegate, SOMediaNowPlayingListening, SOClockAlarmListening, SOClockTimerListening, CSXPCClientDelegate, CSAudioSessionProvidingDelegate, CSSpeechManagerDelegate, CSContinuousVoiceTriggerDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_targetQueue;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<OS_dispatch_queue> *_contextResetQueue;
  CSAudioConverter *_opusAudioConverter;
  CSAudioConverter *_narrowBandOpusConverter;
  CSAudioConverter *_audioConverter;
  CSAudioSampleRateConverter *_downsampler;
  NSDictionary *_requestedRecordSettings;
  NSDictionary *_lastVoiceTriggerInfo;
  NSDictionary *_lastRTSTriggerInfo;
  CSAudioZeroCounter *_continuousZeroCounter;
  NSObject<OS_dispatch_queue> *_audibleFeedbackQueue;
  NSObject<OS_dispatch_group> *_twoShotAudibleFeedbackDecisionGroup;
}

@property (nonatomic) BOOL supportPhatic;
@property (nonatomic) BOOL supportHearstVoiceTrigger;
@property (nonatomic) BOOL supportTriagleModeSessionActivationRetry;
@property (nonatomic) BOOL supportSessionActivateDelay;
@property (nonatomic) BOOL supportLazySessionActivtion;
@property (retain, nonatomic) CSEndpointerProxy *endpointerProxy;
@property (retain, nonatomic) CSAudioRecordContext *audioRecordContext;
@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) NSObject<CSAudioStreamProviding> *streamProvider;
@property (retain, nonatomic) NSObject<CSAudioSessionProviding> *sessionProvider;
@property (retain, nonatomic) NSObject<CSAudioAlertProviding> *alertProvider;
@property (retain, nonatomic) NSObject<CSAudioMeterProviding> *audioMeterProvider;
@property (retain, nonatomic) NSObject<CSAudioMetricProviding> *audioMetricProvider;
@property (nonatomic) BOOL isAsrOnDevice;
@property (nonatomic) BOOL isOpus;
@property (nonatomic) BOOL isSiriClientListening;
@property (nonatomic) BOOL hasRequestedTwoShotFeedback;
@property (nonatomic) BOOL isNarrowBand;
@property (retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter;
@property (retain, nonatomic) CSSelectiveChannelAudioFileWriter *serverLoggingWriter;
@property (retain, nonatomic) CSSmartSiriVolumeController *volumeController;
@property (retain, nonatomic) NSString *recordEventUUID;
@property (nonatomic) BOOL isAudioSessionActivated;
@property (nonatomic) BOOL deviceRoleIsStereo;
@property (retain, nonatomic) NSDictionary *speakerRecognitionScores;
@property (nonatomic) unsigned long long activeChannel;
@property (nonatomic) BOOL twoShotNotificationEnabled;
@property (nonatomic) BOOL isMediaPlaying;
@property (nonatomic) BOOL isAlarmPlaying;
@property (nonatomic) BOOL isTimerPlaying;
@property (nonatomic) BOOL isSoundPlaying;
@property (nonatomic) BOOL isRemoteVADAvailableStream;
@property (nonatomic) BOOL myriadPreventingTwoShotFeedback;
@property (retain, nonatomic) CSSpeechEndHostTimeEstimator *speechEndHostTimeEstimator;
@property (retain, nonatomic) NSString *bundleIdFromDictation;
@property (nonatomic) BOOL isHybridUODEnabled;
@property (retain, nonatomic) CSLanguageDetector *languageDetector;
@property (nonatomic) BOOL shouldUseLanguageDetectorForCurrentRequest;
@property (retain, nonatomic) NSUUID *pendingAudioSessionActivationToken;
@property (copy, nonatomic) id /* block */ pendingAudioSessionActivationCompletion;
@property (nonatomic) unsigned long long pendingAudioSessionActivationReason;
@property (nonatomic) double audioSessionActivationDelay;
@property (retain, nonatomic) CSXPCClientFactory *xpcClientFactory;
@property (retain, nonatomic) CSXPCClient *xpcClient;
@property (retain, nonatomic) CSXPCClient *duckAudioXPCClient;
@property (nonatomic) float cachedAvgPower;
@property (nonatomic) float cachedPeakPower;
@property (retain, nonatomic) CSAudioPowerMeter *powerMeter;
@property (nonatomic) BOOL didDeliverLastBuffer;
@property (nonatomic) BOOL didDeliverFirstSpeechPacket;
@property (retain, nonatomic) NSString *requestMHUUID;
@property (nonatomic) BOOL canPerformDelayedStop;
@property (nonatomic) BOOL hasPerformedDelayedStop;
@property (retain, nonatomic) CSAudioStopStreamOption *requestedStopRecordingOptions;
@property (nonatomic) unsigned long long numTrailingSamplesAfterSchedulingStop;
@property (nonatomic) unsigned long long maxAllowedTrailingSamplesAfterSchedulingStop;
@property (retain, nonatomic) NSMutableDictionary *decodersForTV;
@property (nonatomic) unsigned long long decoderProcessedSampleCountForTV;
@property (retain, nonatomic) NSString *logEventUUID;
@property (retain, nonatomic) NSString *ssvLogFilePath;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *mediaPlayingObserverQueue;
@property (retain, nonatomic) SOMediaNowPlayingObserver *mediaPlayingMonitor;
@property (retain, nonatomic) SOClockAlarmObserver *alarmMonitor;
@property (retain, nonatomic) SOClockTimerObserver *timerMonitor;
@property (retain, nonatomic) CSVolumeMonitor *volumeMonitor;
@property (retain, nonatomic) CSAudioDeviceInfo *audioDeviceInfo;
@property (readonly, copy, nonatomic) NSUUID *endpointId;
@property (nonatomic) BOOL setupStarted;
@property (retain, nonatomic) CSAudioSessionController *audioSessionController;
@property (retain, nonatomic) CSSACInfoMonitor *sacInfoMonitor;
@property (retain, nonatomic) CSRCHandlingXPCClient *rcHandlingClient;
@property (retain, nonatomic) CSUncompressedAudioLogging *uncompressedAudioLogging;
@property (weak, nonatomic) NSObject<CSSpeechControllerDelegate> *delegate;
@property (weak, nonatomic) NSObject<CSLanguageDetectorDelegate> *languageDetectorDelegate;
@property (weak, nonatomic) NSObject<CSSpeakerIdentificationDelegate> *speakerIdDelegate;
@property (readonly, nonatomic) NSObject<CSEndpointAnalyzer> *endpointAnalyzer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedController;
+ (BOOL)isSmartSiriVolumeAvailable;

/* instance methods */
- (id)init;
- (id)initWithEndpointId:(id)id;
- (id)initWithEndpointId:(id)id xpcClientFactory:(id)factory endpointer:(id)endpointer continuousVoiceTrigger:(id)trigger siriVolumeController:(id)controller mediaPlayingMonitor:(id)monitor alarmMonitor:(id)monitor timerMonitor:(id)monitor sacInfoMonitor:(id)monitor audioSessionController:(id)controller supportPhatic:(BOOL)phatic supportHearstVoiceTrigger:(BOOL)trigger supportTriagleModeSessionActivationRetry:(BOOL)retry supportSessionActivateDelay:(BOOL)delay supportLazySessionActivtion:(BOOL)activtion;
- (id)_getSerialQueueWithName:(id)name targetQueue:(id)queue;
- (BOOL)_supportsHybridSDSD;
- (id)_createMediaPlayingMonitor;
- (id)_createAlarmMonitor;
- (id)_createTimerMonitor;
- (void)_initializeMediaPlayingState;
- (void)_initializeAlarmState;
- (void)_initializeTimerState;
- (BOOL)initializeRecordSessionWithRecordContext:(id)context;
- (void)startController;
- (BOOL)_isHubRequestTV;
- (BOOL)_shouldResetContextAtPrepare;
- (BOOL)prepareRecordWithSettings:(id)settings error:(id *)error;
- (BOOL)_fetchLastTriggerInfo;
- (BOOL)_isDelayedDuckingSupportedContext;
- (BOOL)_currentConfigurationSupportsDucking;
- (BOOL)_activateAudioSessionWithReason:(unsigned long long)reason delay:(double)delay delayRequested:(BOOL)requested error:(id *)error;
- (void)_scheduleActivateAudioSessionWithDelay:(double)delay sessionActivateReason:(unsigned long long)reason scheduleReason:(id)reason validator:(id /* block */)validator completion:(id /* block */)completion;
- (void)_cancelPendingAudioSessionActivateForReason:(id)reason;
- (void)_performPendingAudioSessionActivateForReason:(id)reason;
- (BOOL)_lazyActivateAudioSessionWithReason:(unsigned long long)reason error:(id *)error;
- (BOOL)_activateAudioSessionWithReason:(unsigned long long)reason error:(id *)error;
- (BOOL)_doActivateAudioSessionWithReason:(unsigned long long)reason error:(id *)error;
- (void)_updateRecordContextIfNeeded:(id)needed;
- (BOOL)setCurrentRecordContext:(id)context error:(id *)error;
- (void)preheat;
- (BOOL)prewarmAudioSession;
- (void)resetAudioSession;
- (void)reset;
- (void)releaseAudioSession;
- (void)releaseAudioSession:(unsigned long long)session;
- (id)recordSettings;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })getLPCMAudioStreamBasicDescription;
- (void)setSynchronousCallbackEnabled:(BOOL)enabled;
- (BOOL)setRecordBufferDuration:(double)duration;
- (double)getRecordBufferDuration;
- (void)setDuckOthersOption:(BOOL)option;
- (void)_refreshSpeakerRecognitionAssets;
- (void)_setupSpeakerRecognitionController;
- (id)_languageDetectorOptionFromSettings:(id)settings;
- (BOOL)startRecordingWithSettings:(id)settings error:(id *)error;
- (void)_startFeedbackForTwoShotAtTime:(double)time;
- (void)_scheduleAudibleFeedbackAtStartRecording;
- (void)_startPhaticDecision;
- (void)_createLanguageDetectorIfNeeded;
- (BOOL)_shouldUseLanguageDetector:(id)detector;
- (BOOL)_shouldSetStartSampleCount;
- (BOOL)_shouldSetStartSampleCountForRTS;
- (BOOL)startRecording:(id *)recording;
- (void)stopRecording;
- (void)handleStopRecordingRequestWithOptions:(id)options;
- (void)stopRecordingWithOptions:(id)options;
- (BOOL)_shouldCalculateEstimatedSpeechEndHostTimeFromCachedEPMetrics;
- (unsigned long long)_calculateEstimatedSpeechEndHostTimeWithStopOptions:(id)options;
- (BOOL)isRecording;
- (BOOL)_isRecordRouteBuiltinMic;
- (BOOL)_isRecordRouteStudioDisplay;
- (BOOL)_canDelayStopRecording;
- (id)recordRoute;
- (id)recordDeviceInfo;
- (id)playbackRoute;
- (BOOL)_shouldFetchVoiceTriggerInfo;
- (BOOL)_shouldFetchRaiseToSpeakInfo;
- (void)_didStopForReason:(long long)reason;
- (BOOL)_isDuckingAvailableRoute:(id)route;
- (void)audioStreamProvider:(id)provider didStopStreamUnexpectedly:(long long)unexpectedly;
- (void)audioStreamProvider:(id)provider audioBufferAvailable:(id)available;
- (void)_audioStreamProvdider:(id)provdider audioBufferAvailable:(id)available;
- (void)audioStreamProvider:(id)provider audioChunkForTVAvailable:(id)tvavailable;
- (void)audioDecoderDidDecodePackets:(id)packets audioStreamHandleId:(unsigned long long)id buffer:(id)buffer remoteVAD:(id)vad timestamp:(unsigned long long)timestamp arrivalTimestampToAudioRecorder:(unsigned long long)recorder wasBuffered:(BOOL)buffered receivedNumChannels:(unsigned int)channels;
- (void)audioStreamProvider:(id)provider didHardwareConfigurationChange:(long long)change;
- (void)audioSessionProvider:(id)provider providerInvalidated:(BOOL)invalidated;
- (void)audioSessionProvider:(id)provider didChangeContext:(BOOL)context;
- (void)audioSessionController:(id)controller didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)info;
- (void)audioAlertProvidingDidFinishAlertPlayback:(id)playback ofType:(long long)type error:(id)error;
- (void)audioSessionProviderBeginInterruption:(id)interruption;
- (void)audioSessionProviderBeginInterruption:(id)interruption withContext:(id)context;
- (void)audioSessionProviderEndInterruption:(id)interruption;
- (void)audioSessionProvider:(id)provider willSetAudioSessionActive:(BOOL)active;
- (void)audioSessionProvider:(id)provider didSetAudioSessionActive:(BOOL)active;
- (void)didTTSVolumeChange:(id)change forReason:(unsigned long long)reason;
- (void)_setupDownsamplerIfNeeded;
- (BOOL)_setupAudioConverter:(BOOL)converter isNarrowBand:(BOOL)band;
- (void)audioConverterDidConvertPackets:(id)packets packets:(id)packets durationInSec:(float)sec timestamp:(unsigned long long)timestamp arrivalTimestampToAudioRecorder:(unsigned long long)recorder;
- (BOOL)setAlertSoundFromURL:(id)url forType:(long long)type force:(BOOL)force;
- (BOOL)playAlertSoundForType:(long long)type;
- (unsigned long long)alertStartTime;
- (BOOL)playRecordStartingAlertAndResetEndpointerWithAlertOverride:(long long)override;
- (void)stopEndpointer;
- (void)setMeteringEnabled:(BOOL)enabled;
- (void)updateMeters;
- (float)peakPowerForChannel:(unsigned long long)channel;
- (float)averagePowerForChannel:(unsigned long long)channel;
- (float)peakPowerForOutputReference;
- (float)averagePowerForOutputReference;
- (void)_createAudioPowerMeterIfNeeded;
- (unsigned long long)outputReferenceChannel;
- (id)voiceTriggerInfo;
- (void)_startTwoShotFeedbackDecisionForDetectionAtTime:(double)time;
- (void)endpointer:(id)endpointer detectedTwoShotAtTime:(double)time;
- (void)keywordDetectorDidDetectKeyword;
- (void)fetchAudioMetricsWithCompletion:(id /* block */)completion;
- (void)setEndpointAnalyzerDelegate:(id)delegate;
- (long long)_currentAudioRecorderSampleRate;
- (void)resetEndpointer;
- (void)processServerEndpointFeatures:(id)features;
- (void)setEndpointerOperationMode:(long long)mode;
- (BOOL)_shouldRunHybridSDSDMitigation;
- (void)processRCWithId:(unsigned long long)id requestId:(id)id speechPackage:(id)package taskId:(id)id forceAccept:(BOOL)accept completionHandler:(id /* block */)handler;
- (void)getMitigationDecisionForRCId:(unsigned long long)rcid requestId:(id)id completion:(id /* block */)completion;
- (BOOL)_shouldUseSoundPlaybackMonitors;
- (BOOL)_shouldTrackLaunchLatency;
- (void)_logRecordingStopErrorIfNeeded:(long long)needed;
- (id)_fetchAudioDecoderForTV:(unsigned int)tv;
- (BOOL)_fetchAudioProviderWithContext:(id)context;
- (BOOL)_createAudioProviderFromXPCWithContext:(id)context;
- (void)_setupAudioProviderFromXPC:(id)xpc;
- (id)_fetchFallbackAudioSessionReleaseProviding;
- (id)_getSpeechIdentifier;
- (void)_deviceAudioLoggingWithFileWriter:(id)writer;
- (id)_contextToString:(id)string;
- (BOOL)_canPlayTwoShotFeedbackDuringMediaPlayback;
- (float)_scheduledAudibleFeedbackDelay;
- (unsigned long long)_audibleFeedbackPlaybackReason;
- (double)lastEndOfVoiceActivityTime;
- (id)endpointerModelVersion;
- (void)updateEndpointerThreshold:(float)threshold;
- (void)updateEndpointerDelayedTrigger:(BOOL)trigger;
- (void)shouldAcceptEagerResultForDuration:(double)duration resultsCompletionHandler:(id /* block */)handler;
- (BOOL)isSmartSiriVolumeAvailable;
- (float)getVolumeForTTSType:(unsigned long long)ttstype;
- (float)getSmartSiriVolume;
- (void)setSmartSiriVolumePercentage:(float)percentage;
- (void)setSmartSiriVolumeDirection:(BOOL)direction;
- (void)setPermanentVolumeOffsetWithDirection:(BOOL)direction;
- (void)languageDetectorSetMostRecentRecognitionLanguage:(id)language;
- (void)cancelCurrentLanguageDetectorRequest;
- (void)setLanguageDetectorInteractionID:(id)id;
- (void)beginWaitingForMyriad;
- (void)endWaitingForMyriadWithDecision:(unsigned long long)decision;
- (void)_setSoundPlayingState;
- (void)CSXPCClient:(id)csxpcclient didDisconnect:(BOOL)disconnect;
- (void)_teardownAudioProviderIfNeeded;
- (void)_setMediaPlaybackState:(BOOL)state isInterrupted:(BOOL)interrupted;
- (void)_setAlarmIsPlaying:(BOOL)playing;
- (void)_setTimerIsPlaying:(BOOL)playing;
- (void)nowPlayingObserver:(id)observer playbackStateDidChangeFrom:(long long)from to:(long long)to lastPlayingDate:(id)date;
- (void)clockAlarmObserver:(id)observer alarmDidFire:(id)fire;
- (void)clockAlarmObserver:(id)observer alarmDidDismiss:(id)dismiss;
- (void)clockAlarmObserver:(id)observer snapshotDidUpdateFrom:(id)from to:(id)to;
- (void)clockTimerObserver:(id)observer timerDidFire:(id)fire;
- (void)clockTimerObserver:(id)observer timerDidDismiss:(id)dismiss;
- (void)clockTimerObserver:(id)observer snapshotDidUpdateFrom:(id)from to:(id)to;
- (id)getAudioConverterForTest;
@end

#endif /* CSSpeechController_h */
