//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSXPCClient_h
#define CSXPCClient_h
@import Foundation;

#include "CSAudioAlertProviding-Protocol.h"
#include "CSAudioAlertProvidingDelegate-Protocol.h"
#include "CSAudioMeterProviding-Protocol.h"
#include "CSAudioMetricProviding-Protocol.h"
#include "CSAudioSessionInfoProviding-Protocol.h"
#include "CSAudioSessionProviding-Protocol.h"
#include "CSAudioSessionProvidingDelegate-Protocol.h"
#include "CSAudioStream.h"
#include "CSAudioStreamProviding-Protocol.h"
#include "CSAudioStreamProvidingDelegate-Protocol.h"
#include "CSAudioTimeConversionProviding-Protocol.h"
#include "CSFallbackAudioSessionReleaseProviding-Protocol.h"
#include "CSTriggerInfoProviding-Protocol.h"
#include "CSXPCClientDelegate-Protocol.h"

@class NSHashTable, NSMutableSet, NSString;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface CSXPCClient : NSObject<CSAudioSessionProviding, CSFallbackAudioSessionReleaseProviding, CSAudioStreamProviding, CSAudioAlertProviding, CSAudioSessionInfoProviding, CSAudioMeterProviding, CSAudioMetricProviding, CSAudioTimeConversionProviding, CSTriggerInfoProviding>

@property (retain, nonatomic) NSObject<OS_xpc_object> *xpcConnection;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *xpcReplyQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *xpcClientQueue;
@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) NSMutableSet *activationAssertions;
@property (retain, nonatomic) NSHashTable *audioSessionInfoObservers;
@property (nonatomic) unsigned long long xpcClientType;
@property (weak, nonatomic) NSObject<CSAudioSessionProvidingDelegate> *audioSessionProvidingDelegate;
@property (weak, nonatomic) NSObject<CSAudioStreamProvidingDelegate> *audioStreamProvidingDelegate;
@property (weak, nonatomic) NSObject<CSAudioAlertProvidingDelegate> *audioAlertProvidingDelegate;
@property (weak, nonatomic) NSObject<CSXPCClientDelegate> *delegate;
@property (readonly, nonatomic) NSString *UUID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)createAudioStreamMessageWithRequest:(id)request;
+ (id)createPrepareAudioStreamMessageWithRequest:(id)request;
+ (id)createStartAudioStreamMessageWithOption:(id)option;
+ (id)createStopAudioStreamMessageWithOption:(id)option;

/* instance methods */
- (id)initWithType:(unsigned long long)type;
- (BOOL)isConnected;
- (void)connect;
- (void)disconnect;
- (void)_disconnect;
- (void)dealloc;
- (id)_getSerialQueueWithName:(id)name targetQueue:(id)queue;
- (void)_sendXPCClientType;
- (BOOL)prepareAudioProviderWithContext:(id)context clientType:(unsigned long long)type error:(id *)error;
- (void)pingpong:(id /* block */)pingpong;
- (BOOL)prewarmAudioSessionWithError:(id *)error;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)reason dynamicAttribute:(unsigned long long)attribute bundleID:(id)id error:(id *)error;
- (BOOL)deactivateAudioSession:(unsigned long long)session error:(id *)error;
- (void)setDuckOthersOption:(BOOL)option;
- (void)enableSmartRoutingConsideration:(BOOL)consideration;
- (void)enableMiniDucking:(BOOL)ducking;
- (void)setAudioSessionDelegate:(id)delegate;
- (void)setAudioAlertDelegate:(id)delegate;
- (BOOL)setAlertSoundFromURL:(id)url forType:(long long)type force:(BOOL)force;
- (BOOL)playAlertSoundForType:(long long)type;
- (BOOL)playRecordStartingAlertAndResetEndpointerWithAlertOverride:(long long)override;
- (unsigned long long)alertStartTime;
- (void)configureAlertBehavior:(id)behavior;
- (void)setMeteringEnabled:(BOOL)enabled;
- (void)updateMeters;
- (float)peakPowerForChannel:(unsigned long long)channel;
- (float)averagePowerForChannel:(unsigned long long)channel;
- (id)audioMetric;
- (BOOL)setCurrentContext:(id)context error:(id *)error;
- (id)audioStreamWithRequest:(id)request streamName:(id)name error:(id *)error;
- (void)audioStreamWithRequest:(id)request streamName:(id)name completion:(id /* block */)completion;
- (BOOL)prepareAudioStreamSync:(id)sync request:(id)request error:(id *)error;
- (void)prepareAudioStream:(id)stream request:(id)request completion:(id /* block */)completion;
- (BOOL)supportsDuckingOnCurrentRouteWithError:(id *)error;
- (void)startAudioStream:(id)stream option:(id)option completion:(id /* block */)completion;
- (void)stopAudioStream:(id)stream option:(id)option completion:(id /* block */)completion;
- (void)acousticSLResultForContext:(id)context completion:(id /* block */)completion;
- (void)triggerInfoForContext:(id)context completion:(id /* block */)completion;
- (id)recordRoute;
- (id)recordDeviceInfo;
- (id)audioDeviceInfo;
- (id)recordSettings;
- (BOOL)isNarrowBand;
- (id)playbackRoute;
- (unsigned long long)audioStreamId;
- (id)audioChunkFrom:(unsigned long long)from to:(unsigned long long)to;
- (id)audioChunkFrom:(unsigned long long)from to:(unsigned long long)to channelIdx:(unsigned long long)idx;
- (id)audioChunkToEndFrom:(unsigned long long)from;
- (id)audioChunkToEndFrom:(unsigned long long)from channelIdx:(unsigned long long)idx;
- (void)saveRecordingBufferFrom:(unsigned long long)from to:(unsigned long long)to toURL:(id)url;
- (void)saveRecordingBufferToEndFrom:(unsigned long long)from toURL:(id)url;
- (id)holdAudioStreamWithDescription:(id)description option:(id)option;
- (void)cancelAudioStreamHold:(id)hold;
- (BOOL)isRecording;
- (void)setAnnounceCallsEnabled:(BOOL)enabled withStreamHandleID:(unsigned long long)id;
- (void)attachTandemStream:(id)stream toPrimaryStream:(id)stream completion:(id /* block */)completion;
- (void)registerObserver:(id)observer;
- (void)unregisterObserver:(id)observer;
- (unsigned int)audioSessionIdForDeviceId:(id)id;
- (unsigned long long)hostTimeFromSampleCount:(unsigned long long)count;
- (unsigned long long)sampleCountFromHostTime:(unsigned long long)time;
- (BOOL)fallbackDeactivateAudioSession:(unsigned long long)session error:(id *)error;
- (void)sendMessageAsync:(id)async completion:(id /* block */)completion;
- (void)_sendMessageAsync:(id)async completion:(id /* block */)completion;
- (id)_decodeError:(id)error;
- (BOOL)sendMessageAndReplySync:(id)sync error:(id *)error;
- (void)_handleListenerEvent:(id)event;
- (void)_handleListenerMessage:(id)message;
- (void)_handleListenerError:(id)error;
- (void)_handleListenerDisconnectedError:(id)error;
- (void)_handleAlertProvidingDelegateMessageBody:(id)body;
- (void)_handleAlertProvidingDelegateDidFinishAlertPlayback:(id)playback;
- (void)_handleSessionProvidingDelegateMessageBody:(id)body;
- (void)_handleSessionProvidingDelegateBeginInterruption:(id)interruption;
- (void)_handleSessionProvidingDelegateBeginInterruptionWithContext:(id)context;
- (void)_handleSessionProvidingDelegateEndInterruption:(id)interruption;
- (void)_handleSessionProvidingDelegateWillSetAudioSession:(id)session;
- (void)_handleSessionProvidingDelegateDidSetAudioSession:(id)session;
- (void)_handleSessionProvidingDelegateStreamHandleIdInvalidation:(id)invalidation;
- (void)_handleSessionProvidingDelegateDidChangeContext:(id)context;
- (void)_handleSessionInfoProvidingDelegateMessageBody:(id)body;
- (void)_handleSessionInfoProvidingDelegateInterruptionNotification:(id)notification;
- (void)_handleSessionInfoProvidingDelegateRouteChangeNotification:(id)notification;
- (void)_handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:(id)notification;
- (void)_handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:(id)notification;
- (void)_handleStreamProvidingDelegateMessageBody:(id)body;
- (void)_handleStreamProvidingDelegateDidStopUnexpectedly:(id)unexpectedly;
- (void)_handleStreamProvidingDelegateChunkAvailable:(id)available;
- (void)_handleStreamProvidingDelegateChunkForTVAvailable:(id)tvavailable;
- (void)_handleStreamProvidingDelegateHardwareConfigChange:(id)change;
@end

#endif /* CSXPCClient_h */
