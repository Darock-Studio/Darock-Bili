//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSSmartSiriVolume_h
#define CSSmartSiriVolume_h
@import Foundation;

#include "CSAudioServerCrashMonitorDelegate-Protocol.h"
#include "CSAudioStream.h"
#include "CSAudioStreamProvidingDelegate-Protocol.h"
#include "CSMediaPlayingMonitorDelegate-Protocol.h"
#include "CSSiriClientBehaviorMonitorDelegate-Protocol.h"
#include "CSSmartSiriVolumeProcessor-Protocol.h"

@class CSAsset, CSPolicy, NSString, NSUserDefaults;
@protocol OS_dispatch_queue, OS_dispatch_source, {unique_ptr<SmartSiriVolume, std::default_delete<SmartSiriVolume>>="__ptr_"{__compressed_pair<SmartSiriVolume *, std::default_delete<SmartSiriVolume>>="__value_"^{SmartSiriVolume}}}, {vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}};

@interface CSSmartSiriVolume : NSObject<CSMediaPlayingMonitorDelegate, CSAudioStreamProvidingDelegate, CSAudioServerCrashMonitorDelegate, CSSiriClientBehaviorMonitorDelegate, CSSmartSiriVolumeProcessor> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  struct unique_ptr<SmartSiriVolume, std::default_delete<SmartSiriVolume>> { struct __compressed_pair<SmartSiriVolume *, std::default_delete<SmartSiriVolume>> { struct SmartSiriVolume *__value_; } __ptr_; } _smartSiriVolumeNoiseLevel;
  struct unique_ptr<SmartSiriVolume, std::default_delete<SmartSiriVolume>> { struct __compressed_pair<SmartSiriVolume *, std::default_delete<SmartSiriVolume>> { struct SmartSiriVolume *__value_; } __ptr_; } _smartSiriVolumeLKFS;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _floatBuffer;
  NSUserDefaults *_defaults;
  CSPolicy *_ssvEnablePolicy;
  unsigned long long _startAnalyzeSampleCount;
  unsigned long long _samplesFed;
  unsigned long long _processedSampleCount;
  BOOL _isStartSampleCountMarked;
  BOOL _isListenPollingStarting;
  BOOL _shouldPauseSSVProcess;
  BOOL _shouldPauseLKFSProcess;
  BOOL _alarmSoundIsFiring;
  BOOL _timerSoundIsFiring;
  BOOL _mediaIsPlaying;
  CSAsset *_currentAsset;
  float _musicVolumeDB;
  float _alarmVolume;
  unsigned long long _noiseLevelChannelBitset;
  unsigned long long _LKFSChannelBitset;
  unsigned int _energyBufferSize;
  unsigned int _noiseLowerPercentile;
  unsigned int _noiseUpperPercentile;
  unsigned int _LKFSLowerPercentile;
  unsigned int _LKFSUpperPercentile;
  float _noiseTimeConstant;
  float _noiseMicSensitivityOffset;
  float _noiseMicSensitivityOffsetDeviceSimple;
  float _LKFSTimeConstant;
  float _LKFSMicSensitivityOffset;
  float _noiseTTSMappingInputRangeLow;
  float _noiseTTSMappingInputRangeHigh;
  float _noiseTTSMappingOutputRangeLow;
  float _noiseTTSMappingOutputRangeHigh;
  float _LKFSTTSMappingInputRangeLow;
  float _LKFSTTSMappingInputRangeHigh;
  float _LKFSTTSMappingOutputRangeLow;
  float _LKFSTTSMappingOutputRangeHigh;
  float _userOffsetInputRangeLow;
  float _userOffsetInputRangeHigh;
  float _userOffsetOutputRangeLow;
  float _userOffsetOutputRangeHigh;
  float _TTSVolumeLowerLimitDB;
  float _TTSVolumeUpperLimitDB;
  float _noiseWeight;
}

@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *listenPollingTimer;
@property (nonatomic) long long listenPollingTimerCount;
@property (retain, nonatomic) CSPolicy *enablePolicy;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithSamplingRate:(float)rate;
- (void)startSmartSiriVolume;
- (void)_startListenPolling;
- (void)_startListenPollingWithInterval:(double)interval completion:(id /* block */)completion;
- (void)_startListenWithCompletion:(id /* block */)completion;
- (void)_stopListening;
- (void)initializeMediaPlayingState;
- (void)initializeAlarmState;
- (void)initializeTimerState;
- (void)fetchInitSystemVolumes;
- (void)setAsset:(id)asset;
- (void)_setAsset:(id)asset;
- (void)_reset;
- (void)_prepareSoundLevelBufferFromSamples:(unsigned int)samples soundType:(long long)type;
- (void)prepareSoundLevelBufferFromSamples:(id)samples soundType:(long long)type firedVoiceTriggerEvent:(BOOL)event triggerStartTimeSampleOffset:(unsigned long long)offset triggerEndTimeSampleOffset:(unsigned long long)offset;
- (void)_processAudioChunk:(id)chunk soundType:(long long)type;
- (float)estimateSoundLevelbySoundType:(long long)type;
- (void)_pauseSSVProcessing;
- (void)_resumeSSVProcessing;
- (void)reset;
- (void)audioStreamProvider:(id)provider audioBufferAvailable:(id)available;
- (void)audioStreamProvider:(id)provider didStopStreamUnexpectedly:(long long)unexpectedly;
- (void)audioStreamProvider:(id)provider audioChunkForTVAvailable:(id)tvavailable;
- (void)didDetectKeywordWithResult:(id)result;
- (float)estimatedTTSVolumeForNoiseLevelAndLKFS:(float)lkfs LKFS:(float)lkfs;
- (float)_getDeviceSimpleOutputLinearVolumeFordBFSValue:(float)bfsvalue;
- (float)_getDeviceSimpledBFSForOutputLinearVolume:(float)volume;
- (float)_deviceSpecificDBToLinearVolumeMappingCSSSVDeviceSimple:(float)simple;
- (float)_deviceSpecificLinearVolumeToDBMappingCSSSVDeviceSimple:(float)simple;
- (float)_scaleInputWithInRangeOutRange:(float)range minIn:(float)in maxIn:(float)in minOut:(float)out maxOut:(float)out;
- (float)_estimatedTTSVolume:(float)ttsvolume lowerLimit:(float)limit upperLimit:(float)limit TTSmappingInputRangeLow:(float)low TTSmappingInputRangeHigh:(float)high TTSmappingOutputRangeLow:(float)low TTSmappingOutputRangeHigh:(float)high;
- (float)_combineResultsWithOptimalFromNoise:(float)noise andOptimalFromLkfs:(float)lkfs withUserOffset:(float)offset;
- (void)CSMediaPlayingMonitor:(id)monitor didReceiveMediaPlayingChanged:(long long)changed;
- (void)didReceiveAlarmChanged:(long long)changed;
- (void)didReceiveTimerChanged:(long long)changed;
- (void)didReceiveMusicVolumeChanged:(float)changed;
- (void)didReceiveAlarmVolumeChanged:(float)changed;
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)restart;
- (void)siriClientBehaviorMonitor:(id)monitor willStartStreamWithContext:(id)context option:(id)option;
- (void)siriClientBehaviorMonitor:(id)monitor didStartStreamWithContext:(id)context successfully:(BOOL)successfully option:(id)option withEventUUID:(id)uuid;
- (void)siriClientBehaviorMonitor:(id)monitor willStopStream:(id)stream reason:(unsigned long long)reason;
- (void)siriClientBehaviorMonitor:(id)monitor didStopStream:(id)stream withEventUUID:(id)uuid;
- (float *)_getFloatBufferData:(id)data;
- (void)_resetStartAnalyzeTime;
- (void)_setStartAnalyzeTime:(unsigned long long)time;
- (void)_setDefaultParameters;
- (float)_convertDB2Mag:(float)mag;
- (float)_getDevicedBFSForInputLinearVolume:(float)volume;
- (float)_getMusicVolumeDBCSSSVDeviceSimple:(float)simple;
- (float)_getMusicVolumeDBCSSSVDeviceDefault:(float)default;
- (float)_getUserOffsetFromMusicVolumeDB:(float)db;
- (id)getVolumeForTTSType:(unsigned long long)ttstype withOverrideMediaVolume:(id)volume WithRequestTime:(unsigned long long)time;
- (void)setSmartSiriVolumePercentage:(float)percentage;
- (void)setSmartSiriVolumeDirection:(BOOL)direction;
- (void)setPermanentVolumeOffsetWithDirection:(BOOL)direction;
@end

#endif /* CSSmartSiriVolume_h */
