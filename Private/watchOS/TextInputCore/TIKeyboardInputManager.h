//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3431.206.0.0.0
//
#ifndef TIKeyboardInputManager_h
#define TIKeyboardInputManager_h
@import Foundation;

#include "TIKeyboardInputManagerBase.h"
#include "TIAutoshiftRegularExpressionLoader.h"
#include "TICandidateHandler-Protocol.h"
#include "TICounterChangeCache.h"
#include "TIEmojiCandidateGenerator.h"
#include "TIFilterParameterLoader.h"
#include "TIKeyboardFeatureSpecialization.h"
#include "TIKeyboardInputManagerConfig.h"
#include "TILRUDictionary.h"
#include "TILanguageSelectionController.h"
#include "TILanguageSelectionControllerDelegate-Protocol.h"
#include "TIRevisionHistory.h"
#include "TIRevisionHistoryDelegate-Protocol.h"
#include "TISmartSelector.h"
#include "TIStickerCandidateGenerator.h"
#include "TISupplementalLexiconController.h"
#include "TITextCheckerExemptions.h"
#include "TITypingSessionMonitor.h"

@class NSArray, NSCharacterSet, NSMutableArray, NSMutableDictionary, NSMutableSet, NSMutableString, NSString, TIAutocorrectionList, TICharacterSetDescription, TIInputContextHistory, TIKeyboardCandidate, TIKeyboardInputManagerState, TIKeyboardLayout, TIKeyboardLayoutState, TIKeyboardState, TIKeyboardTouchEvent, TISmartPunctuationOptions;
@protocol {shared_ptr<KB::LanguageModel>="__ptr_"^{LanguageModel}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<KB::TypologyLogger>="__ptr_"^{TypologyLogger}"__cntrl_"^{__shared_weak_count}}, {unique_ptr<TI::RejectionsDatabase, std::default_delete<TI::RejectionsDatabase>>="__ptr_"{__compressed_pair<TI::RejectionsDatabase *, std::default_delete<TI::RejectionsDatabase>>="__value_"^{RejectionsDatabase}}}, {vector<RecentMessage, std::allocator<RecentMessage>>="__begin_"^{RecentMessage}"__end_"^{RecentMessage}"__end_cap_"{__compressed_pair<RecentMessage *, std::allocator<RecentMessage>>="__value_"^{RecentMessage}}};

@interface TIKeyboardInputManager : TIKeyboardInputManagerBase<TIRevisionHistoryDelegate, TILanguageSelectionControllerDelegate> {
  /* instance variables */
  void * m_impl;
  NSMutableString *m_composedText;
  unsigned long long m_initialSelectedIndex;
  TIKeyboardLayoutState *_layoutState;
  NSMutableDictionary *_cachedLayoutTags;
  struct shared_ptr<KB::TypologyLogger> { struct TypologyLogger *__ptr_; struct __shared_weak_count *__cntrl_; } m_typology_recorder;
  struct shared_ptr<KB::LanguageModel> { struct LanguageModel *__ptr_; struct __shared_weak_count *__cntrl_; } m_lightweight_language_model;
  struct unique_ptr<TI::RejectionsDatabase, std::default_delete<TI::RejectionsDatabase>> { struct __compressed_pair<TI::RejectionsDatabase *, std::default_delete<TI::RejectionsDatabase>> { struct RejectionsDatabase *__value_; } __ptr_; } m_rejectionsDatabase;
  TIInputContextHistory *_synchronizedInputContextHistory;
  TICharacterSetDescription *_wordCharacters;
  TICharacterSetDescription *_supplementalLexiconWordExtraCharacters;
  TICharacterSetDescription *_closingQuotes;
  TICharacterSetDescription *_openingQuotes;
  NSMutableDictionary *_testingStateObject;
  int _lastHitTestKeycode;
  BOOL _didInitialSync;
  struct vector<RecentMessage, std::allocator<RecentMessage>> { struct RecentMessage *__begin_; struct RecentMessage *__end_; struct __compressed_pair<RecentMessage *, std::allocator<RecentMessage>> { struct RecentMessage *__value_; } __end_cap_; } conversation_history;
  BOOL _skipStickerSuggestionGating;
}

@property (retain, nonatomic) TIKeyboardLayout *keyLayout;
@property (readonly, nonatomic) TIRevisionHistory *revisionHistory;
@property (readonly, nonatomic) TILRUDictionary *autocorrectionHistory;
@property (readonly, nonatomic) TILRUDictionary *recentAutocorrections;
@property (readonly, nonatomic) TILRUDictionary *recentPredictiveInputSelections;
@property (readonly, nonatomic) TILRUDictionary *rejectedAutocorrections;
@property (readonly, nonatomic) TILRUDictionary *autocorrectionListsSuggestedForCurrentInput;
@property (readonly, nonatomic) TILRUDictionary *autocorrectionListsForWordsInDocument;
@property (nonatomic) BOOL wordLearningEnabled;
@property (nonatomic) BOOL isEditingWordPrefix;
@property (retain, nonatomic) TIAutoshiftRegularExpressionLoader *autoshiftRegexLoader;
@property (readonly, nonatomic) TITextCheckerExemptions *textCheckerExemptions;
@property (readonly, nonatomic) NSCharacterSet *allowPredictionCharacterSet;
@property (readonly, nonatomic) unsigned long long linguisticResourceStatus;
@property (nonatomic) long long deleteKeyCount;
@property (retain, nonatomic) TIKeyboardCandidate *hitTestCorrectedInputMatchingCandidate;
@property (retain, nonatomic) NSMutableSet *rejectedConversionsForCurrentContinuousPath;
@property (retain, nonatomic) TITypingSessionMonitor *typingSessionMonitor;
@property (retain, nonatomic) TICounterChangeCache *counterChangeCache;
@property (retain, nonatomic) TISmartSelector *smartSelector;
@property (copy, nonatomic) id /* block */ proactiveSuggestionsGenerationBlock;
@property (retain, nonatomic) TIAutocorrectionList *lastContinuousPathAutocorrection;
@property (nonatomic) unsigned long long lastNumCandidatesRequest;
@property (readonly, nonatomic) TISmartPunctuationOptions *smartOptions;
@property (readonly, nonatomic) TIFilterParameterLoader *filterParameterLoader;
@property (nonatomic) long long userInterfaceIdiom;
@property (retain, nonatomic) NSString *lastInputString;
@property (readonly, nonatomic) TIEmojiCandidateGenerator *emojiCandidateGenerator;
@property (readonly, nonatomic) TIStickerCandidateGenerator *stickerCandidateGenerator;
@property (retain, nonatomic) TIAutocorrectionList *pregeneratedTypingAutocorrections;
@property (retain, nonatomic) TILRUDictionary *autocorrectionForCurrentStem;
@property (retain, nonatomic) TILRUDictionary *rejectedAutocorrectionsDisplayedOrInserted;
@property (retain, nonatomic) TILRUDictionary *rejectedAutocorrectionsDisplayedOrInsertedInverse;
@property (retain, nonatomic) TIAutocorrectionList *lastAutocorrectionList;
@property (retain, nonatomic) TIKeyboardTouchEvent *previousTouchEvent;
@property (copy, nonatomic) TIKeyboardCandidate *lastAcceptedText;
@property (retain, nonatomic) NSObject<TICandidateHandler> *candidateHandlerForOpenRequest;
@property (retain, nonatomic) NSMutableArray *candidateHandlerForOpenRequestStack;
@property (readonly, nonatomic) TIKeyboardInputManagerConfig *config;
@property (readonly, nonatomic) TILanguageSelectionController *languageSelectionController;
@property (readonly, nonatomic) NSArray *languageModelAssets;
@property (readonly, weak, nonatomic) TISupplementalLexiconController *currentCandidateGenerationContextSupplementalLexicons;
@property (retain, nonatomic) TIKeyboardState *keyboardState;
@property (readonly, nonatomic) TIKeyboardInputManagerState *currentState;
@property (readonly, nonatomic) unsigned short supplementalPrefix;
@property (readonly, nonatomic) TIKeyboardFeatureSpecialization *keyboardFeatureSpecialization;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } candidateRange;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)clearRejectionsDatabase;
+ (void)resetResponseKit;
+ (id)keyboardUserDirectory;
+ (id)vulgarWordUsageDatabaseFileName;
+ (id)userDictionaryWordKeyPairsFilePath;
+ (id)dynamicDictionaryFilePathForInputMode:(id)mode;
+ (void)removeDynamicDictionaryForInputMode:(id)mode;
+ (void)removeAllDynamicDictionaries;
+ (void)performVulgarWordUsageDatabaseMaintenance;
+ (void)clearVulgarWordUsageDatabase;
+ (id)recentsFilePathForIdentifier:(id)identifier;
+ (void)clearRecentsFileForIdentifier:(id)identifier;
+ (int)shiftContextForShiftState:(int)state autocapitalizationType:(unsigned long long)type;
+ (id)offlineLearningHandleForInputMode:(id)mode;

/* instance methods */
- (void)logInlineCompletionsToTypology:(id)typology candidate:(id)candidate;
- (id)inlineCompletions:(struct CandidateCollection { struct vector<KB::Candidate, std::allocator<KB::Candidate>> { struct Candidate * x0; struct Candidate * x1; struct __compressed_pair<KB::Candidate *, std::allocator<KB::Candidate>> { struct Candidate * x0; } x2; } x0; struct vector<KB::Candidate, std::allocator<KB::Candidate>> { struct Candidate * x0; struct Candidate * x1; struct __compressed_pair<KB::Candidate *, std::allocator<KB::Candidate>> { struct Candidate * x0; } x2; } x1; struct vector<KB::Candidate, std::allocator<KB::Candidate>> { struct Candidate * x0; struct Candidate * x1; struct __compressed_pair<KB::Candidate *, std::allocator<KB::Candidate>> { struct Candidate * x0; } x2; } x2; struct vector<KB::Candidate, std::allocator<KB::Candidate>> { struct Candidate * x0; struct Candidate * x1; struct __compressed_pair<KB::Candidate *, std::allocator<KB::Candidate>> { struct Candidate * x0; } x2; } x3; int x4; unsigned int x5; })completions matchedStem:(struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] })stem;
- (void)reconcileInlineCompletionAndAutocorrections:(id)autocorrections inlineCompletions:(id)completions predictions:(id)predictions outReconciledAutocorrections:(id *)autocorrections outReconciledInlineCompletions:(id *)completions outReconciledPredictions:(id *)predictions matchedStem:(struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] })stem;
- (void)promoteInlineCompletionToAutocorrections:(id)autocorrections predictions:(id)predictions inlineCompletion:(id)completion outReconciledAutocorrections:(id *)autocorrections outReconciledPredictions:(id *)predictions matchedStem:(struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] })stem;
- (id)filterDuplicatePredictions:(id)predictions autocorrection:(id)autocorrection;
- (id)promoteAutocorrectionsToInlineCompletions:(id)completions matchedStem:(struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] })stem;
- (BOOL)shouldPromoteAutocorrectionsToInlineCompletions:(id)completions;
- (BOOL)shouldPromoteInlineCompletionsToAutocorrections:(id)autocorrections inlineCompletions:(id)completions;
- (BOOL)shouldGenerateInlineCompletions;
- (int)TIInlineCompletionAcceptanceRejectionTypefromTIRegisterLearningMode:(id)mode;
- (struct TIInlineCompletionAnalyticsMetadata { struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x0; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x1; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x2; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x3; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x4; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x5; unsigned char x6; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x7; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x8; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x9; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x10; })inlineCompletionMetadataFrom:(id)from andBundleId:(id)id;
- (int)precisionPointFromTrialOverride:(id)override;
- (void)updateInlineCompletionOperatingPointForPrimaryLocale;
- (void *)rejectionsDatabase;
- (void)updateTrialNegativeLearningFlagForPrimaryLocale;
- (unsigned long long)shouldSuppressLearning;
- (BOOL)shouldSuppressLanguageSelectionEvidence;
- (BOOL)shouldLearnWord:(id)word;
- (void)incrementLanguageModelCount:(id)count tokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })id contextTokens:(id)tokens saveToDifferentialPrivacy:(int)privacy;
- (void)decrementLanguageModelCount:(id)count tokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })id contextTokens:(id)tokens;
- (BOOL)directlyBlockedByNegativeLearning:(id)learning correction:(id)correction ignoreSoft:(BOOL)soft retrocorrectionComponent:(BOOL)component;
- (BOOL)blockedByNegativeLearning:(id)learning correction:(id)correction ignoreSoft:(BOOL)soft;
- (void)softLearningRegisterAccepted:(id)accepted typed:(id)typed;
- (void)softLearningRegisterDeleted:(id)deleted;
- (void)registerNegativeEvidence:(id)evidence tokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })id contextTokens:(id)tokens intended:(id)intended intendedTokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })id hint:(int)hint;
- (void)registerRevisionFrom:(id)from to:(id)to contextTokens:(id)tokens;
- (void)addItemToConversationHistoryWithText:(id)text timestamp:(id)timestamp senderID:(id)id recipientIdentifiers:(id)identifiers;
- (void)resetConversationHistory;
- (void)synchronizeConversationHistoryWithInputContextHistory:(id)history;
- (void)learnRecentMessageUserIsRespondingTo;
- (struct TITokenID { unsigned int x0; unsigned int x1; })findTokenIDForWord:(id)word contextTokens:(id)tokens tokenLookupMode:(unsigned int)mode surfaceFormPtr:(id *)ptr hasCaseInsensitiveStaticVariant:(BOOL *)variant;
- (struct TITokenID { unsigned int x0; unsigned int x1; })findTokenIDForWord:(id)word contextTokens:(id)tokens tokenLookupMode:(unsigned int)mode;
- (struct TITokenID { unsigned int x0; unsigned int x1; })addWord:(id)word contextTokens:(id)tokens surfaceFormPtr:(id *)ptr;
- (void)candidateRejected:(id)rejected;
- (void)registerLearning:(id)learning fullCandidate:(id)candidate keyboardState:(id)state mode:(id)mode;
- (void)registerLearningForCompletion:(id)completion fullCompletion:(id)completion context:(id)context prefix:(id)prefix mode:(id)mode;
- (id)checkRejectionHistory:(id)history;
- (BOOL)shouldBlockAutocorrection:(id)autocorrection;
- (BOOL)autocorrectionWasRecentlyRejected:(id)rejected;
- (BOOL)autocorrectionWasRecentlyRejectedForCurrentInput;
- (void)runMaintenanceTask;
- (void)recordRejectedAutocorrectionForAcceptedText:(id)text fromPredictiveInputBar:(BOOL)bar;
- (void)releaseAndRemoveRejectionsDatabase;
- (void)clearSoftLearning;
- (void)setRejectedAutocorrection:(id)autocorrection forInput:(id)input;
- (id)humanReadableTrace;
- (void)clearHumanReadableTrace;
- (void)storeLanguageModelDynamicDataIncludingCache;
- (BOOL)isTypologyEnabled;
- (void)logToTypologyRecorderWithString:(id)string;
- (id)configurationPropertyList;
- (BOOL)dictionaryContainsWord:(id)word;
- (struct RefPtr<KB::DictionaryContainer> { struct DictionaryContainer * x0; })getDictionary;
- (unsigned long long)userFrequencyOfWord:(id)word;
- (unsigned long long)userFrequencyOfWord:(id)word lexiconID:(unsigned int)id;
- (id)getTestingStateObject;
- (void)setTestingStateObject:(id)object;
- (void)tearDown;
- (void)fetchTypingSessionParams:(id /* block */)params;
- (void)fetchAssetAvailabilityStatusForInputMode:(id)mode completionHandler:(id /* block */)handler;
- (BOOL)enablesProactiveQuickType;
- (void)generateAndRenderProactiveSuggestionsWithTriggers:(id)triggers withAdditionalPredictions:(id)predictions withInput:(id)input async:(BOOL)async completionHandler:(id /* block */)handler;
- (id)generateAndRenderProactiveSuggestionsWithTriggers:(id)triggers withAdditionalPredictions:(id)predictions withInput:(id)input;
- (BOOL)isHardwareKeyboardAutocorrectionEnabled;
- (void)addSynthesizedTouchToInput:(id)input;
- (unsigned long long)maximumShortcutLengthAllowed;
- (id)shortcutCompletionsForDocumentState:(id)state;
- (id)shortcutConversionForDocumentState:(id)state;
- (BOOL)canHandleKeyHitTest;
- (long long)addTouch:(id)touch shouldHitTest:(BOOL)test;
- (id)keyEventMap;
- (void)clearDynamicDictionary;
- (void)releaseDynamicLanguageModel;
- (void)dynamicDictionariesRemoved:(id)removed;
- (BOOL)doesComposeText;
- (BOOL)shouldExtendPriorWord;
- (BOOL)supportsReversionUI;
- (BOOL)supportsLearning;
- (BOOL)ignoresDeadKeys;
- (void)setAutoCorrects:(BOOL)corrects;
- (void)setAutocapitalizationEnabled:(BOOL)enabled;
- (void)setAutocapitalizationType:(unsigned long long)type;
- (void)setKeyboardEventsLagging:(BOOL)lagging;
- (void)setInHardwareKeyboardMode:(BOOL)mode;
- (BOOL)inHardwareKeyboardMode;
- (void)setInSplitKeyboardMode:(BOOL)mode;
- (void)setLearnsCorrection:(BOOL)correction;
- (id)_supplementalCompletionCandidates:(unsigned long long)candidates;
- (id)supplementalAutocorrection;
- (id)supplementalAutocorrectionCandidates;
- (id)autocorrection;
- (id)autocorrectionCandidates;
- (void)transferErrorCorrectionFlagsToInputCandidate:(void *)candidate;
- (id)autocorrectionList;
- (BOOL)canGenerateCompletionCandidates;
- (id)autocorrectionListWithCandidateCount:(unsigned long long)count;
- (id)candidates;
- (id)candidatesForString:(id)string;
- (void)setPhraseBoundary:(unsigned long long)boundary;
- (void)setPhraseBoundaryIfNecessary;
- (unsigned long long)phraseBoundary;
- (BOOL)supportsSetPhraseBoundary;
- (BOOL)usesCandidateSelection;
- (BOOL)usesContinuousPath;
- (BOOL)usesMLTapTyping;
- (double)continuousPathLanguageWeight;
- (BOOL)shouldFixupIncompleteRomaji;
- (BOOL)acceptAutocorrectionCommitsInline;
- (BOOL)usesLiveConversion;
- (BOOL)delayedCandidateList;
- (BOOL)commitsAcceptedCandidate;
- (BOOL)newInputAcceptsUserSelectedCandidate;
- (BOOL)usesAutoDeleteWord;
- (unsigned long long)autoquoteType;
- (BOOL)suppressPlaceholderCandidate;
- (id)defaultCandidate;
- (unsigned long long)initialSelectedIndex;
- (unsigned long long)initialCandidateBatchCount;
- (id)shadowTyping;
- (id)searchStringForMarkedText;
- (BOOL)suppliesCompletions;
- (BOOL)suppressCompletionsForFieldEditor;
- (id)replacementForDoubleSpace;
- (id)wordSeparator;
- (id)pathedWordSeparator;
- (BOOL)nextInputWouldStartSentence;
- (id)terminatorsPreventingAutocorrection;
- (id)terminatorsDeletingAutospace;
- (id)terminatorsPrecedingAutospace;
- (id)spaceDeletingCharacters;
- (id)closingQuotes;
- (id)openingQuotes;
- (id)sortingMethods;
- (id)titleForSortingMethod:(id)method;
- (BOOL)alwaysShowExtensionCandidatesForSortingMethod:(id)method;
- (id)groupedCandidatesFromCandidates:(id)candidates usingSortingMethod:(id)method;
- (void)groupedCandidatesFromCandidates:(id)candidates usingSortingMethod:(id)method completion:(id /* block */)completion;
- (id)indexTitlesForGroupTitles:(id)titles sortingMethod:(id)method;
- (BOOL)supportsNumberKeySelection;
- (BOOL)usesPunctuationKeysForRowNavigation;
- (id)initWithInputMode:(id)mode keyboardState:(id)state;
- (id)initWithConfig:(id)config keyboardState:(id)state;
- (id)initWithConfig:(id)config keyboardState:(id)state languageSelectionController:(id)controller;
- (void)dealloc;
- (id)newInputManagerState;
- (void)refreshInputManagerState;
- (BOOL)isStringBasedModel;
- (void)scheduleLinguisticResourceUpdate;
- (void)scheduleLinguisticResourceUpdateWithReason:(id)reason;
- (BOOL)isLinguisticResourceUpdateScheduled;
- (void)updateDictionaryAndLanguageModel;
- (void)updateTrialFavoniusLanguagePowerForPrimaryLocale;
- (BOOL)shouldUpdateDictionary;
- (BOOL)shouldUpdateLanguageModel;
- (void)openCandidateGenerationContextWithCandidateHandler:(id)handler;
- (void)pushCandidateGenerationContextWithResults:(id)results;
- (BOOL)closeCandidateGenerationContextWithResults:(id)results;
- (BOOL)closeCandidateGenerationContextWithResults:(id)results forced:(BOOL)forced;
- (void)pushCandidateGenerationContextOnStack;
- (void)popCandidateGenerationContextFromStack;
- (id)usageTrackingKeyForStatistic:(id)statistic;
- (void)incrementUsageTrackingKeyForAutocorrectionStatistic:(id)statistic autocorrectionTypes:(unsigned int)types;
- (void)incrementUsageTrackingKey:(id)key;
- (void)incrementUsageTrackingKeyForAppWithIsSentence:(BOOL)sentence;
- (void)incrementUsageTrackingKeysForDeleteFromInput;
- (void)syncToLayoutState:(id)state;
- (void)syncMarkedTextForKeyboardState:(id)state afterContextChange:(BOOL)change;
- (void)syncInputStringToKeyboardState:(id)state afterContextChange:(BOOL)change;
- (void)willChangeToKeyboardState:(id)state afterContextChange:(BOOL)change;
- (BOOL)updateAdaptationContextToKeyboardState:(id)state from:(id)from;
- (void)syncToKeyboardState:(id)state from:(id)from afterContextChange:(BOOL)change;
- (void)checkAndUpdateAdditionalLexicons;
- (id)layoutTagsForLayout:(id)layout;
- (id)keyboardConfigurationLayoutTag;
- (id)keyboardConfigurationAccentKeyString;
- (BOOL)keyboardConfigurationAssertDefaultKeyPlane;
- (BOOL)shouldCommitInputString;
- (id)rawInputString;
- (id)keyboardBehaviors;
- (BOOL)shouldAddModifierSymbolsToWordCharacters;
- (id)inputsToReject;
- (id)inputStringFromDocumentState:(id)state;
- (id)contextBeforeWithDesiredLength:(unsigned long long)length;
- (BOOL)isProgressivelyPathing;
- (BOOL)shouldClearInputOnMarkedTextOutOfSync;
- (BOOL)shouldDelayUpdateComposedText;
- (BOOL)isStickerSuggestionsEnabled;
- (BOOL)shouldOmitEmojiCandidates;
- (void)setMarkedText;
- (id)markedText;
- (BOOL)shouldSkipCandidateSelection;
- (id)sortMethodTitles;
- (id)sortMethodsGroupsForCandidates:(id)candidates;
- (id)sortMethodIndexes;
- (id)sortMethodsShowExtensionCandidates;
- (id)candidateResultSetFromCandidates:(id)candidates;
- (BOOL)_hasSupplementalPrefix;
- (id)candidateResultSetFromCandidates:(id)candidates proactiveTriggers:(id)triggers;
- (void)acceptCurrentCandidateWithContext:(id)context;
- (void)acceptCurrentCandidateIfSelectedWithContext:(id)context;
- (id)currentInputModeIdentifier;
- (void)suspend;
- (void)resetLMCache:(int)lmcache;
- (void)endTypingSessionWithInteractionObservers:(id)observers;
- (void)releaseMRLBuffers;
- (void)resume;
- (BOOL)advancedModelsLoaded;
- (void)prepareForKeyboardInactivity:(int)inactivity;
- (void)prepareForKeyboardActivity;
- (void)_recalcSupplementalPrefix;
- (void)syncToKeyboardState:(id)state;
- (void)logDiscoverabilityEvent:(int)event userInfo:(id)info;
- (BOOL)syncToKeyboardState:(id)state completionHandler:(id /* block */)handler;
- (id)keyboardConfiguration;
- (id)handleKeyboardInput:(id)input;
- (void)addInput:(id)input withContext:(id)context;
- (void)continuousPathCandidateRejected:(id)rejected;
- (void)deleteFromInputWithContext:(id)context;
- (void)trackProactiveMetrics:(id)metrics keyboardState:(id)state;
- (BOOL)shouldMonitorTypingSession;
- (BOOL)generateAutofillFormWithKeyboardState:(id)state completionHandler:(id /* block */)handler;
- (void)generateAutocorrectionsWithKeyboardState:(id)state candidateRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range candidateHandler:(id)handler;
- (id)generateTypingAutocorrectionsWithCandidateRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)generateInlineCompletions:(id)completions withPrefix:(id)prefix;
- (void)finishGeneratingAutocorrectionsWithCandidates:(id)candidates candidateRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range candidateHandler:(id)handler;
- (id)finishGeneratingInlineCompletions:(id)completions completion:(id /* block */)completion syncResponse:(BOOL)response;
- (BOOL)shouldOfferStickers;
- (void)finishGeneratingResponseKitProactiveSuggestions:(id)suggestions candidateRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range completion:(id /* block */)completion;
- (void)generateCandidatesWithKeyboardState:(id)state candidateRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range candidateHandler:(id)handler;
- (void)finishGeneratingCandidates;
- (void)candidatesOfferedFeedback:(id)feedback keyboardState:(id)state;
- (void)acceptingCandidateWithTrigger:(id)trigger;
- (void)changingContextWithTrigger:(id)trigger;
- (id)handleAcceptedCandidate:(id)candidate keyboardState:(id)state;
- (id)generateReplacementsForString:(id)string keyLayout:(id)layout;
- (void)keyLayoutWillChangeTo:(id)to from:(id)from;
- (long long)performHitTestForTouchEvent:(id)event keyboardState:(id)state;
- (void)skipHitTestForTouchEvent:(id)event keyboardState:(id)state;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })smartSelectionRangeForTextInDocument:(id)document inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range language:(id)language tokenizedRanges:(id)ranges options:(unsigned long long)options;
- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)direction;
- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)direction granularity:(int)granularity;
- (void)textAccepted:(id)accepted fromPredictiveInputBar:(BOOL)bar withInput:(id)input;
- (BOOL)shouldInsertSpaceBeforeInput:(id)input;
- (id)suffixOfDesiredString:(id)string toAppendToInputString:(id)string withInputIndex:(unsigned long long)index afterDeletionCount:(unsigned long long *)count;
- (id)deletedSuffixOfInputContext:(id)context whenDeletingFromInputString:(id)string withInputIndex:(unsigned long long)index deletionCount:(unsigned long long)count;
- (void)inputLocationChanged;
- (void)appendToInputContext:(id)context;
- (BOOL)removeSuffixOfInputContext:(id)context;
- (void)clearInputContext;
- (id)didAcceptCandidate:(id)candidate;
- (id)remainingInput;
- (BOOL)stringEndsWord:(id)word;
- (BOOL)acceptInputString:(id)string;
- (BOOL)deletesComposedTextByComposedCharacterSequence;
- (void)updateComposedText;
- (id)externalStringToInternal:(id)internal;
- (id)internalStringToExternal:(id)external;
- (id)externalStringToInternal:(id)internal ignoreCompositionDisabled:(BOOL)disabled;
- (id)internalStringToExternal:(id)external ignoreCompositionDisabled:(BOOL)disabled;
- (unsigned int)internalIndexToExternal:(unsigned int)external;
- (unsigned int)externalIndexToInternal:(unsigned int)internal;
- (BOOL)dictionaryUsesExternalEncoding;
- (id)dictionaryStringForExternalString:(id)string;
- (id)externalStringForDictionaryString:(id)string;
- (void *)initImplementation;
- (id)dictionaryInputMode;
- (struct { struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x0; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x1; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x2; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x3; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x4; unsigned int x5; float x6; })lexiconInformation;
- (void)loadDictionaries;
- (id)staticDictionaryPathForInputMode:(id)mode;
- (id)pathToStaticDictionary;
- (id)deltaDictionaryPathForInputMode:(id)mode;
- (id)pathToDeltaStaticDictionary;
- (id)phraseDictionaryPathForInputMode:(id)mode;
- (id)pathToPhraseDictionary;
- (id)dynamicDictionaryPathForInputMode:(id)mode;
- (id)languageModelAssetsForInputMode:(id)mode;
- (void)logTestingParametersToTypology;
- (id)testingParameters;
- (id)trialParameters;
- (id)pathToDynamicDictionary;
- (id)dynamicResourcePath;
- (BOOL)updateLanguageModelForKeyboardState;
- (void)loadFavoniusTypingModel;
- (struct shared_ptr<KB::LanguageModel> { struct LanguageModel * x0; struct __shared_weak_count * x1; })loadedLightweightLanguageModel;
- (void)setLinguisticResourceStatus:(unsigned long long)status reason:(id)reason;
- (void)handleTrialParametersUpdateCallback;
- (void)mobileAssetsChanged:(id)changed;
- (id)addInput:(id)input flags:(unsigned int)flags point:(struct CGPoint { double x0; double x1; })point firstDelete:(unsigned long long *)delete;
- (BOOL)hasLegacyInputStem;
- (BOOL)hasLegacyInputString;
- (unsigned int)simulateAutoshiftIfNecessaryForFlags:(unsigned int)flags;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })legacyInputRangeForTokenRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })acceptableRangeFromRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inText:(id)text withSelectionLocation:(unsigned long long)location;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })inputStringRangeFromRevisionHistory;
- (void)setInputStringFromDocumentState:(id)state isDeleteEvent:(BOOL)event;
- (BOOL)canComputeSentenceContextForInputStem:(id)stem;
- (id)linguisticContext;
- (void)tokenizeString:(const struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } *)string context:(void *)context sentences:(unsigned int *)sentences;
- (void)parseRecentMessage:(void *)message;
- (struct LanguageModelContext { struct shared_ptr<std::vector<KB::LanguageModelContext>> { void * x0; struct __shared_weak_count * x1; } x0; struct vector<TITokenID, std::allocator<TITokenID>> { struct TITokenID * x0; struct TITokenID * x1; struct __compressed_pair<TITokenID *, std::allocator<TITokenID>> { struct TITokenID * x0; } x2; } x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct LinguisticContext { struct unique_ptr<language_modeling::LinguisticContextImpl, std::default_delete<language_modeling::LinguisticContextImpl>> { struct __compressed_pair<language_modeling::LinguisticContextImpl *, std::default_delete<language_modeling::LinguisticContextImpl>> { struct LinguisticContextImpl * x0; } x0; } x0; } x5; struct LinguisticContext { struct unique_ptr<language_modeling::LinguisticContextImpl, std::default_delete<language_modeling::LinguisticContextImpl>> { struct __compressed_pair<language_modeling::LinguisticContextImpl *, std::default_delete<language_modeling::LinguisticContextImpl>> { struct LinguisticContextImpl * x0; } x0; } x0; } x6; struct vector<std::string, std::allocator<std::string>> { void * x0; void * x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void * x0; } x2; } x7; })sentenceContextForInputStem:(id)stem inputContext:(id)context;
- (void)fillReversedConversationHistoryInContext:(id)context;
- (unsigned long long)maxPriorWordTokensAfterTrimming;
- (id)trimmedInputStem;
- (unsigned long long)countOfWordsIninputStem:(id)stem;
- (id)wordInInputStem:(id)stem atIndex:(unsigned long long)index;
- (unsigned long long)internalIndexOfInputStemSuffix:(id)suffix;
- (BOOL)canTrimInputAtIndex:(unsigned int)index;
- (BOOL)canRetrocorrectInputAtIndex:(unsigned int)index;
- (void)trimInput;
- (id)trimmedInputStemAfterLathamConversion;
- (void)trimInputAfterLathamConversion;
- (void)dropInputPrefix:(unsigned int)prefix;
- (void)dropInput;
- (void)willDropInputStem;
- (void)didDropInputStem;
- (void)setInput:(id)input;
- (void)setInput:(id)input withIndex:(unsigned int)index;
- (id)deleteFromInput:(unsigned long long *)input;
- (id)deleteComposedTextFromIndex:(unsigned long long)index count:(unsigned long long *)count;
- (void)clearInput;
- (void)acceptInput;
- (id)inputContext;
- (id)internalInputContext;
- (void)updateInputContext;
- (void)setInputIndex:(unsigned int)index;
- (unsigned int)inputIndex;
- (unsigned int)inputCount;
- (id)inputString;
- (id)inputStem;
- (id)currentWordStem;
- (void)setOriginalInput:(id)input;
- (void)displayedCandidateRejected;
- (BOOL)shouldAllowCorrectionOfAcceptedCandidate:(id)candidate;
- (BOOL)shouldSuppressTokenIDLookups;
- (struct TITokenID { unsigned int x0; unsigned int x1; })tokenIDForWordSeparator:(unsigned short)separator;
- (void)recordSuggestedAutocorrectionList:(id)list;
- (BOOL)isContinuousPathCandidate:(id)candidate replacementForOriginalConversion:(id)conversion;
- (id)originatingAutocorrectionListForCandidate:(id)candidate;
- (id)revisionListFromAutocorrectionList:(id)list afterAcceptingCandidate:(id)candidate;
- (void)recordAcceptedAutocorrection:(id)autocorrection fromPredictiveInputBar:(BOOL)bar;
- (id)autocorrectionRecordForWord:(id)word;
- (void)updateForRevisitedString:(id)string;
- (id)nonstopPunctuationCharacters;
- (const struct USet *)precomposedCharacterSet;
- (id)wordCharacters;
- (id)supplementalLexiconWordExtraCharacters;
- (id)sentencePrefixingCharacters;
- (id)sentenceDelimitingCharacters;
- (id)sentenceTrailingCharacters;
- (BOOL)nextInputWouldStartSentenceAfterInput:(id)input;
- (BOOL)spaceAndNextInputWouldStartSentence;
- (BOOL)_canStartSentenceAfterString:(id)string maxRecursionDepth:(unsigned long long)depth;
- (BOOL)canStartSentenceAfterString:(id)string;
- (void)setAutoshiftFromInputContext;
- (void)checkAutocorrectionDictionaries;
- (unsigned long long)prefixLengthOfInput:(id)input sharedWithCandidate:(const void *)candidate;
- (id)phraseCandidateCompletedByWord:(const struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } *)word allowNoSuggest:(BOOL)suggest forAutocorrection:(BOOL)autocorrection shiftContext:(int)context;
- (BOOL)isEditingExistingWord;
- (id)autocorrectionCandidateForInput:(id)input rawInput:(id)input withCandidate:(const void *)candidate;
- (id)autocorrectionCandidateForInput:(id)input rawInput:(id)input withCandidate:(const void *)candidate insertingSpace:(BOOL)space sharedPrefixLength:(unsigned long long)length;
- (BOOL)supportsShortcutConversion;
- (void)enumerateWordSuffixesOfString:(id)string inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range usingBlock:(id /* block */)block;
- (BOOL)shouldSkipShortcutConversionForDocumentState:(id)state;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })shortcutSearchRangeForString:(id)string;
- (id)shortcutConversionForString:(id)string stringStartsInMiddleOfWord:(BOOL)word;
- (id)shortcutConversionForInput:(id)input andExistingString:(id)string existingStringStartsInMiddleOfWord:(BOOL)word;
- (BOOL)usesRetrocorrection;
- (BOOL)suggestionBlacklistMatchesStrings:(id)strings;
- (BOOL)shouldDropInputStem;
- (BOOL)shouldAllowContextTokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })id;
- (void)updateResponseModelForKeyboardState:(id)state;
- (id)cannedResponseCandidatesForString:(id)string;
- (void)generateCannedResponseCandidatesAsyncForString:(id)string completionHandler:(id /* block */)handler;
- (id)cachedAutocorrectionListResponseFor:(id)for;
- (id)autocorrectionListForSelectedText;
- (void)reconcileCandidates:(void *)candidates forTypedString:(struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } *)string withPhraseCandidate:(void *)candidate replacing:(const struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } *)replacing;
- (BOOL)shouldGenerateSuggestionsForSelectedText;
- (BOOL)shouldAutocapitalizePredictionAfterSpace;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfUnclosedQuoteMatchingQuote:(id)quote inString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (BOOL)stringEndsWithClosingQuote:(id)quote;
- (BOOL)shouldInsertSpaceBeforePredictions;
- (id)predictionCandidates:(unsigned long long)candidates predictionType:(int)type;
- (id)continuousPathCandidates:(unsigned long long)candidates;
- (id)indexesOfDuplicatesInCandidates:(id)candidates;
- (id)autocorrectionListForEmptyInputWithDesiredCandidateCount:(unsigned long long)count;
- (int)shiftContext;
- (id)newKeyboardContext;
- (id)completionCandidates:(unsigned long long)candidates;
- (id)extendedAutocorrection:(id)autocorrection spanningInputsForCandidates:(id)candidates emojis:(id)emojis;
- (void)reconcileConversions:(id)conversions;
- (BOOL)shouldGeneratePredictionsForCurrentContext;
- (BOOL)allowsAutocorrectionForCurrentInputString;
- (id)typedStringForEmptyAutocorrection;
- (BOOL)doesSelectedTextGenerateEmojiCandidates;
- (id)candidateResultSet;
- (BOOL)acceptsCharacter:(unsigned int)character;
- (BOOL)acceptsRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string;
- (void)installTypologyTraceLogger;
- (void)forceInstallTypologyTraceLogger;
- (id)resourceInputModes;
- (id)primaryInputMode;
- (void)didUpdateInputModes:(id)modes;
- (void)didUpdateInputModeProbabilities:(id)probabilities;
- (unsigned int)adjustedSourceMaskFromCandidate:(id)candidate;
- (unsigned int)sourceMaskForWordString:(struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] })string caseSensitive:(BOOL)sensitive;
- (unsigned int)sourceMaskForWord:(struct Word { struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x0; struct ByteString { union { struct { unsigned short x0; char * x1; } x0; struct { unsigned short x0; unsigned char x1[14] } x1; } x0; } x1; float x2; float x3; float x4; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x5; float x6; float x7; unsigned int x8; unsigned long long x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; struct TITokenID { unsigned int x0; unsigned int x1; } x14; int x15; unsigned long long x16; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char * x4; char x5[16] } x17; BOOL x18; struct unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> { struct __hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *>, std::allocator<std::__hash_node<unsigned long long, void *>>> { struct __hash_node_base<std::__hash_node<unsigned long long, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<unsigned long long>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<unsigned long long>> { float x0; } x3; } x0; } x19; })word;
- (BOOL)isWordLearningEnabled;
@end

#endif /* TIKeyboardInputManager_h */
