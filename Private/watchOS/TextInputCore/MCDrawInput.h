//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3431.206.0.0.0
//
#ifndef MCDrawInput_h
#define MCDrawInput_h
@import Foundation;

#include "MCKeyboardInput.h"

@protocol struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout * x0; }, {PathResampler="m_params"{PathResamplerParams="segment_length"d"inflection_point_detection_mode"i"inflection_point_type"i"should_downsample"B"minimum_pause_length"d"should_flush_on_pause"B}"m_resampled_path"{Path="m_samples"{vector<TI::CP::PathSample, std::allocator<TI::CP::PathSample>>="__begin_"^{PathSample}"__end_"^{PathSample}"__end_cap_"{__compressed_pair<TI::CP::PathSample *, std::allocator<TI::CP::PathSample>>="__value_"^{PathSample}}}"m_inflection_points"{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}}"m_raw_path"{Path="m_samples"{vector<TI::CP::PathSample, std::allocator<TI::CP::PathSample>>="__begin_"^{PathSample}"__end_"^{PathSample}"__end_cap_"{__compressed_pair<TI::CP::PathSample *, std::allocator<TI::CP::PathSample>>="__value_"^{PathSample}}}"m_inflection_points"{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}}"m_is_final"B"m_processed_sample_count"I"m_retroactively_processed_sample_count"I}, {RefPtr<TI::Favonius::KeyboardLayout>="m_ptr"^{KeyboardLayout}};

@interface MCDrawInput : MCKeyboardInput

@property (readonly, nonatomic) void * resampler;
@property (nonatomic) int drawHand;
@property (readonly, nonatomic) struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout * x0; } keyboardLayout;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentLayoutCharacterKeysFrame;
@property (readonly, nonatomic) BOOL isCompleting;
@property (readonly, nonatomic) BOOL isComplete;
@property (readonly, nonatomic) BOOL isDrawing;
@property (readonly, nonatomic) BOOL shouldResample;

/* instance methods */
- (id)init;
- (id)initWithKeyboardLayout:(const void *)layout;
- (id)initWithKeyboardLayout:(const void *)layout currentLayoutCharacterKeysFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithKeyboardLayout:(const void *)layout currentLayoutCharacterKeysFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame shouldResample:(BOOL)resample;
- (struct Vector<WTF::RefPtr<TI::Favonius::LayoutKey>, 0UL> { unsigned long long x0; struct VectorBuffer<WTF::RefPtr<TI::Favonius::LayoutKey>, 0UL> { void * x0; unsigned long long x1; } x1; })copyLayoutKeys;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)shortDescriptionWithLeadingString:(id)string;
- (BOOL)_canCompose;
- (BOOL)canComposeNew:(id)new;
- (void)composeNew:(id)new;
- (void)composeWith:(id)with;
- (void)_appendWithPoint:(struct CGPoint { double x0; double x1; })point timestamp:(double)timestamp force:(double)force radius:(double)radius touchStage:(int)stage;
- (void)_updateSampledInputs;
- (void)_updateSampledInputsWithResampler:(const void *)resampler permanentlyFinalized:(BOOL)finalized;
- (id)_createDrawableTouchInputWithPoint:(struct CGPoint { double x0; double x1; })point timestamp:(double)timestamp force:(double)force radius:(double)radius touchStage:(int)stage previousTouchInput:(id)input isInflectionPoint:(BOOL)point;
@end

#endif /* MCDrawInput_h */
