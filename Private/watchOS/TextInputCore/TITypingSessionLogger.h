//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3431.206.0.0.0
//
#ifndef TITypingSessionLogger_h
#define TITypingSessionLogger_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"
#include "TIKeyboardInteractionObserver-Protocol.h"
#include "TIKeyboardInteractionProtocol-Protocol.h"

@class NSArray, NSMutableArray, NSString;

@interface TITypingSessionLogger : NSObject<NSSecureCoding, TIKeyboardInteractionObserver> {
  /* instance variables */
  NSObject<TIKeyboardInteractionProtocol> *_savedSession;
}

@property (readonly) NSArray *typingEvents;
@property (readonly) unsigned long long eventCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)addKeyInput:(id)input keyboardState:(id)state;
- (void)addTouchEvent:(id)event;
- (void)addDrawInputWithSyllableCount:(unsigned long long)count keyboardState:(id)state;
- (void)candidatesOffered:(id)offered keyboardState:(id)state;
- (void)acceptingCandidateWithTrigger:(id)trigger;
- (void)candidateAccepted:(id)accepted withInput:(id)input documentState:(id)state inputContext:(id)context inputStem:(id)stem predictionBarHit:(BOOL)hit useCandidateSelection:(BOOL)selection candidateIndex:(long long)index keyboardState:(id)state;
- (void)changingContextWithTrigger:(id)trigger;
- (void)contextDidChange:(id)change wordDelete:(BOOL)delete cursorMoved:(BOOL)moved extendsPriorWord:(BOOL)word inWord:(id)word range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range selectionLocation:(unsigned long long)location keyboardState:(id)state;
- (void)layoutDidChange:(id)change keyboardState:(id)state;
- (void)setClientID:(id)id keyboardState:(id)state;
- (void)startSessionWithTimestamp:(id)timestamp;
- (void)endSessionWithTimestamp:(id)timestamp;
- (void)analyzeSessionWithSessionParams:(id)params;
- (BOOL)shouldPrintEvent:(id)event;
- (void)sendTo:(id)to;
- (id)logDetailsForKeyboardState:(id)state;
- (void)saveRecording;
- (id)temporaryKeyboardsDirectory;
- (id)savedSession;
@end

#endif /* TITypingSessionLogger_h */
