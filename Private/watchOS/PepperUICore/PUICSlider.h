//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2000.2.18.0.0
//
#ifndef PUICSlider_h
#define PUICSlider_h
@import Foundation;

#include "UISlider.h"
#include "CAAnimationDelegate-Protocol.h"
#include "CSLSDetentPreferencesObserver-Protocol.h"
#include "PUICCrownInputSequencer.h"
#include "PUICCrownInputSequencerDelegate-Protocol.h"
#include "PUICIntegerStepsNotchProvider.h"
#include "_PUICQueuedSetEnabledRequest.h"
#include "_PUICQueuedSetValueRequest.h"
#include "_PUICSliderAccessoryState.h"

@class NSArray, NSString, UIColor, UIImage, UIImageView, UIView;
@protocol OS_dispatch_source, PUICSliderDelegate;

@interface PUICSlider : UISlider<PUICCrownInputSequencerDelegate, CAAnimationDelegate, CSLSDetentPreferencesObserver> {
  /* instance variables */
  long long _touchTarget;
  PUICCrownInputSequencer *_crownInputSequencer;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _currentTrackLayoutBounds;
  float _stepValue;
  float _value;
  BOOL _isEnabled;
  BOOL _isAnimatingTransition;
  _PUICQueuedSetEnabledRequest *_queuedSetEnabledRequest;
  _PUICQueuedSetValueRequest *_queuedSetValueRequest;
  _PUICSliderAccessoryState *_minimumImageState;
  _PUICSliderAccessoryState *_maximumImageState;
  UIView *_fillView;
  UIView *_gutterView;
  UIView *_crownGlowView;
  UIImageView *_compactAccessoryView;
  UIImageView *_compactAccessoryGlowView;
  UIImage *_minimumValueImage;
  UIImage *_maximumValueImage;
  UIColor *_fillColor;
  UIColor *_gutterColor;
  NSObject<OS_dispatch_source> *_crownGlowDismissTimer;
  NSArray *_compactCrownGlowKeyframes;
  NSArray *_compactCrownFadeKeyframes;
  double _crownInputOffsetAdjustmentFactor;
  PUICIntegerStepsNotchProvider *_notchProvider;
  BOOL _detentsEnabledForDevice;
  BOOL _minorDetentsEnabledBeforeBecomeFirstResponder;
}

@property (weak, nonatomic) NSObject<PUICSliderDelegate> *delegate;
@property (nonatomic) unsigned long long numberOfSteps;
@property (nonatomic) BOOL shouldAutomaticallAdjustValueOnTouch;
@property (nonatomic) BOOL shouldFadeAccessoryImages;
@property (nonatomic) float pillHighlightedGlowOpacity;
@property (readonly, nonatomic) double cornerRadius;
@property (nonatomic) long long style;
@property (retain, nonatomic) UIView *minimumValueView;
@property (retain, nonatomic) UIView *maximumValueView;
@property (retain, nonatomic) UIImage *compactAccessoryImage;
@property (nonatomic) BOOL hapticFeedbackEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)initialize;

/* instance methods */
- (id)initWithSliderStyle:(long long)style;
- (void)layoutSubviews;
- (void)touchesBegan:(id)began withEvent:(id)event;
- (void)touchesMoved:(id)moved withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (void)touchesCancelled:(id)cancelled withEvent:(id)event;
- (void)animationDidStop:(id)stop finished:(BOOL)finished;
- (void)tintColorDidChange;
- (void)setEnabled:(BOOL)enabled;
- (void)setEnabled:(BOOL)enabled animated:(BOOL)animated;
- (BOOL)isEnabled;
- (void)_updateAppearanceForEnabled:(BOOL)enabled;
- (void)setValue:(float)value;
- (void)setValue:(float)value animated:(BOOL)animated;
- (void)setValue:(float)value animated:(BOOL)animated haptic:(BOOL)haptic;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds trackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect value:(float)value;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trackRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_trackRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds style:(long long)style;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })minimumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })maximumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)setThumbImage:(id)image forState:(unsigned long long)state;
- (void)setMinimumValue:(float)value;
- (void)setMaximumValue:(float)value;
- (void)sliderDidFinishAnimatingFromValue:(float)value toValue:(float)value;
- (BOOL)canBecomeFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (id)crownInputSequencer;
- (void)_wheelChangedWithEvent:(id)event;
- (void)_updateSequencerConfiguration;
- (void)crownInputSequencerOffsetDidChange:(id)change;
- (void)_cancelCrownGlowDismissTimer;
- (void)_updateCompactCrownGlowKeyframes;
- (void)crownInputSequencerIdleDidChange:(id)change;
- (float)value;
- (void)_setValue:(float)value animated:(BOOL)animated sendAction:(BOOL)action;
- (void)_setValue:(float)value animated:(BOOL)animated sendAction:(BOOL)action crown:(BOOL)crown;
- (double)crownInputOffsetAdjustmentFactor;
- (void)setCrownInputOffsetAdjustmentFactor:(double)factor;
- (void)_fadeAccessoryImagesForValue:(float)value animated:(BOOL)animated;
- (void)_animatePressView:(id)view state:(id)state;
- (void)animateTransitionToStyle:(long long)style duration:(double)duration bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds completion:(id /* block */)completion;
- (void)_animateTransitionFromCompactStyleToStyle:(long long)style duration:(double)duration bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds completion:(id /* block */)completion;
- (id)_minValueView;
- (id)_maxValueView;
- (void)_animateTransitionToCompactStyleWithDuration:(double)duration bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds completion:(id /* block */)completion;
- (void)_temporarilySwapToStyle:(long long)style bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds block:(id /* block */)block;
- (void)_setStyle:(long long)style;
- (void)setMaximumValueImage:(id)image;
- (void)setMinimumValueImage:(id)image;
- (void)_setMinimumImageAlpha:(float)alpha animated:(BOOL)animated;
- (void)_setMaximumImageAlpha:(float)alpha animated:(BOOL)animated;
- (id)_continousGutterViewWithTrackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)_continousFillViewWithTrackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_updateTrackViews;
- (void)_updateCrownGlowLayer;
- (void)_updateValueViews;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_fillBoundsForValue:(float)value;
- (double)_percentFillForValue:(float)value;
- (long long)_touchTargetFromTouches:(id)touches event:(id)event;
- (void)_cancelTouchTarget;
- (id)_maxTrackView;
- (id)_minTrackView;
- (BOOL)detentsEnabledForDevice;
- (void)setDetentsEnabledForDevice:(BOOL)device;
- (BOOL)_sliderStyleUsesMinorDetents;
- (void)_updateMinorDetentsEnabledStateForValue:(float)value;
- (void)_playEdgeDetentIfNecessary;
- (void)_setupNotchProviderIfNecessary;
- (void)detentService:(id)service detentsDisabledChanged:(BOOL)changed;
@end

#endif /* PUICSlider_h */
