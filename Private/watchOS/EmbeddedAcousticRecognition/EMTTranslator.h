//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.7.1.0.0
//
#ifndef EMTTranslator_h
#define EMTTranslator_h
@import Foundation;

@class NSLocale, NSOperationQueue;
@protocol OS_dispatch_queue, {shared_ptr<quasar::Translator>="__ptr_"^{Translator}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<quasar::TranslatorFactory>="__ptr_"^{TranslatorFactory}"__cntrl_"^{__shared_weak_count}}, {vector<quasar::SystemConfig, std::allocator<quasar::SystemConfig>>="__begin_"^{SystemConfig}"__end_"^{SystemConfig}"__end_cap_"{__compressed_pair<quasar::SystemConfig *, std::allocator<quasar::SystemConfig>>="__value_"^{SystemConfig}}};

@interface EMTTranslator : NSObject {
  /* instance variables */
  struct shared_ptr<quasar::TranslatorFactory> { struct TranslatorFactory *__ptr_; struct __shared_weak_count *__cntrl_; } _translatorFactory;
  struct shared_ptr<quasar::Translator> { struct Translator *__ptr_; struct __shared_weak_count *__cntrl_; } _translator;
  NSLocale *_sourceLocale;
  NSLocale *_targetLocale;
  struct vector<quasar::SystemConfig, std::allocator<quasar::SystemConfig>> { struct SystemConfig *__begin_; struct SystemConfig *__end_; struct __compressed_pair<quasar::SystemConfig *, std::allocator<quasar::SystemConfig>> { struct SystemConfig *__value_; } __end_cap_; } _configs;
  BOOL _skipNonFinalToCatchup;
  NSOperationQueue *_translationRequestsQueue;
  NSObject<OS_dispatch_queue> *_translationQueue;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;

/* class methods */
+ (void)initialize;

/* instance methods */
- (id)initWithModelURL:(id)url;
- (id)initWithModelURL:(id)url task:(id)task;
- (id)initWithModelURL:(id)url task:(id)task skipNonFinalToCatchup:(BOOL)catchup;
- (id)initWithModelURL:(id)url task:(id)task skipNonFinalToCatchup:(BOOL)catchup translatorCacheSize:(long long)size;
- (id)initWithModelURLs:(id)urls task:(id)task;
- (id)initWithModelURLs:(id)urls task:(id)task skipNonFinalToCatchup:(BOOL)catchup;
- (id)initWithModelURLs:(id)urls task:(id)task skipNonFinalToCatchup:(BOOL)catchup translatorCacheSize:(long long)size;
- (void)loadTranslatorFrom:(id)from to:(id)to;
- (void)translateSpeech:(id)speech completion:(id /* block */)completion;
- (void)translateSpeech:(id)speech from:(id)from to:(id)to completion:(id /* block */)completion;
- (void)translateString:(id)string completion:(id /* block */)completion;
- (void)translateString:(id)string from:(id)from to:(id)to completion:(id /* block */)completion;
- (void)translateString:(id)string from:(id)from to:(id)to options:(id)options completion:(id /* block */)completion;
- (void)translateString:(id)string from:(id)from to:(id)to overrides:(id)overrides completion:(id /* block */)completion;
- (void)translateTokens:(id)tokens from:(id)from to:(id)to completion:(id /* block */)completion;
- (void)translateTokens:(id)tokens from:(id)from to:(id)to spans:(id)spans completion:(id /* block */)completion;
- (void)translateTokens:(id)tokens from:(id)from to:(id)to spans:(id)spans options:(id)options completion:(id /* block */)completion;
- (void)translateTokens:(id)tokens from:(id)from to:(id)to spans:(id)spans overrides:(id)overrides completion:(id /* block */)completion;
- (void)translateTokens:(id)tokens isFinal:(BOOL)final completion:(id /* block */)completion;
- (void)translateTokens:(id)tokens isFinal:(BOOL)final spans:(id)spans completion:(id /* block */)completion;
- (void)translateTokens:(id)tokens isFinal:(BOOL)final spans:(id)spans options:(id)options completion:(id /* block */)completion;
- (void)translateTokens:(id)tokens isFinal:(BOOL)final spans:(id)spans overrides:(id)overrides completion:(id /* block */)completion;
- (void)prepareFor:(id)for to:(id)to;
- (struct vector<std::string, std::allocator<std::string>> { void * x0; void * x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void * x0; } x2; })_tokenizeString:(id)string;
- (struct shared_ptr<quasar::Translator> { struct Translator * x0; struct __shared_weak_count * x1; })_prepareFor:(id)for to:(id)to;
- (void)_dispatchTranslationRequest:(struct vector<std::string, std::allocator<std::string>> { void * x0; void * x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void * x0; } x2; })request isFinal:(BOOL)final spans:(id)spans translator:(struct shared_ptr<quasar::Translator> { struct Translator * x0; struct __shared_weak_count * x1; })translator sourceLocale:(id)locale targetLocale:(id)locale options:(id)options completion:(id /* block */)completion;
- (void)getTranslatorWithCompletion:(id /* block */)completion;
@end

#endif /* EMTTranslator_h */
