//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.7.1.0.0
//
#ifndef _EARFormatter_h
#define _EARFormatter_h
@import Foundation;

#include "_EAREmojiRecognition.h"

@class NSMutableArray, NSMutableDictionary, NSString;
@protocol {unique_ptr<SpeechITN, std::default_delete<SpeechITN>>="__ptr_"{__compressed_pair<SpeechITN *, std::default_delete<SpeechITN>>="__value_"^{SpeechITN}}};

@interface _EARFormatter : NSObject {
  /* instance variables */
  struct unique_ptr<SpeechITN, std::default_delete<SpeechITN>> { struct __compressed_pair<SpeechITN *, std::default_delete<SpeechITN>> { struct SpeechITN *__value_; } __ptr_; } _itn;
  _EAREmojiRecognition *_emojiFormatter;
  double _itnDurationSum;
  long long _itnCount;
  NSMutableArray *_recognizedEmojis;
  NSMutableDictionary *_emojiMetrics;
}

@property (copy, nonatomic) NSString *language;

/* class methods */
+ (void)initialize;
+ (BOOL)supportedByQuasarConfig:(id)config;
+ (BOOL)supportedByQuasarSystemConfig:(const void *)config;
+ (BOOL)useEmojiHammerWhenRecognizeEmoji:(BOOL)emoji;
+ (struct vector<quasar::Token, std::allocator<quasar::Token>> { struct Token * x0; struct Token * x1; struct __compressed_pair<quasar::Token *, std::allocator<quasar::Token>> { struct Token * x0; } x2; })convertStringsToQuasarTokens:(id)tokens;
+ (struct vector<quasar::Token, std::allocator<quasar::Token>> { struct Token * x0; struct Token * x1; struct __compressed_pair<quasar::Token *, std::allocator<quasar::Token>> { struct Token * x0; } x2; })convertStringsToQuasarTokens:(id)tokens offset:(unsigned int)offset;

/* instance methods */
- (id)initWithLanguage:(id)language withSdapiConfig:(id)config quasarConfig:(id)config;
- (id)initWithQuasarConfig:(id)config;
- (id)initWithQuasarConfig:(id)config overrideConfigFiles:(id)files;
- (id)initWithQuasarConfig:(id)config overrideConfigFiles:(id)files supportEmojiRecognition:(BOOL)recognition language:(id)language;
- (id)initWithQuasarConfig:(id)config overrideConfigFiles:(id)files supportEmojiRecognition:(BOOL)recognition language:(id)language skipPathsExistCheck:(BOOL)check;
- (id)initWithQuasarConfig:(id)config language:(id)language;
- (BOOL)isEnableAutoPunctuation:(const void *)punctuation task:(const void *)task itnEnablingFlags:(unsigned short)flags;
- (struct unordered_set<std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string>> { struct __hash_table<std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::string, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::string, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::string, void *> *>, std::allocator<std::__hash_node<std::string, void *>>> { struct __hash_node_base<std::__hash_node<std::string, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<std::string>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<std::string>> { float x0; } x3; } x0; })endsOfSentencePunctuationsForLanguage:(const void *)language;
- (id)initWithGeneralVoc:(id)voc withLexiconEnh:(id)enh withItnEnh:(id)enh;
- (id)initNcsWithModelRoot:(id)root;
- (struct vector<quasar::Token, std::allocator<quasar::Token>> { struct Token * x0; struct Token * x1; struct __compressed_pair<quasar::Token *, std::allocator<quasar::Token>> { struct Token * x0; } x2; })formatWords:(const void *)words unrepairedWordsOut:(void *)out;
- (struct vector<quasar::Token, std::allocator<quasar::Token>> { struct Token * x0; struct Token * x1; struct __compressed_pair<quasar::Token *, std::allocator<quasar::Token>> { struct Token * x0; } x2; })formatWords:(const void *)words unrepairedWordsOut:(void *)out task:(id)task;
- (struct vector<quasar::Token, std::allocator<quasar::Token>> { struct Token * x0; struct Token * x1; struct __compressed_pair<quasar::Token *, std::allocator<quasar::Token>> { struct Token * x0; } x2; })formatWords:(const void *)words unrepairedWordsOut:(void *)out task:(id)task language:(id)language preItnLeftContext:(const void *)context separateAutoEndPunctuation:(BOOL)punctuation partialResults:(void *)results timestampOffset:(unsigned int)offset zeroTimestamp:(BOOL)timestamp continuousListeningConfig:(struct shared_ptr<quasar::ContinuousListeningConfig> { struct ContinuousListeningConfig * x0; struct __shared_weak_count * x1; })config postItnLeftContext:(const void *)context itnResult:(void *)result itnOverrides:(const void *)overrides itnEnablingFlags:(unsigned short)flags recognizeEmoji:(BOOL)emoji leftContextProvidedByClient:(BOOL)client preItnRightContext:(const void *)context emojiTokenIndices:(void *)indices persistEmoji:(BOOL)emoji shouldHideTrailingPunctuation:(BOOL)punctuation isTrailingPunctuationHidden:(struct shared_ptr<bool> { BOOL * x0; struct __shared_weak_count * x1; })hidden isFinal:(BOOL)final choiceIdx:(int)idx itnCompletion:(id /* block */)completion;
- (struct vector<std::string, std::allocator<std::string>> { void * x0; void * x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void * x0; } x2; })emojiAlternativesForEmojis:(id)emojis;
- (void)recognizeEmojiForTokens:(void *)tokens emojiTokenIndices:(void *)indices persistEmoji:(BOOL)emoji choiceIdx:(int)idx;
- (struct vector<quasar::Token, std::allocator<quasar::Token>> { struct Token * x0; struct Token * x1; struct __compressed_pair<quasar::Token *, std::allocator<quasar::Token>> { struct Token * x0; } x2; })formattedTokensWithoutEmojiModifier:(const void *)modifier emojiTokenIndices:(const void *)indices recognizeEmoji:(BOOL)emoji;
- (void)appendNbestListWithEmojiAlternativesForFormattedTokens:(const void *)tokens formattedTokensWithoutEmojiModifier:(const void *)modifier formattedNBestList:(void *)list formattedNBestListWithoutEmojiModifier:(void *)modifier emojiTokenIndices:(const void *)indices recognizeEmoji:(BOOL)emoji;
- (id)formatWords:(id)words task:(id)task autoPunctuate:(BOOL)punctuate;
- (id)formatWords:(id)words task:(id)task autoPunctuate:(BOOL)punctuate recognizeEmoji:(BOOL)emoji;
- (BOOL)refreshEmojiRecognizer;
- (void)initializeItnMetrics;
- (struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; })getOrthography:(const void *)orthography;
- (id)formattedStringWithStrings:(id)strings;
- (id)formattedStringWithStrings:(id)strings task:(id)task;
- (id)formattedStringWithStrings:(id)strings preToPostItnArray:(id)array;
- (id)formattedStringWithStrings:(id)strings preToPostItnArray:(id)array task:(id)task;
- (id)formattedRecognitionWithNBestList:(id)list;
- (id)_formattedStringWithStrings:(id)strings task:(id)task leftContext:(id)context;
- (id)_formattedStringWithStrings:(id)strings task:(id)task leftContext:(id)context recognizeEmoji:(BOOL)emoji;
- (id)_formattedStringWithStrings:(id)strings task:(id)task leftContext:(id)context recognizeEmoji:(BOOL)emoji rightContext:(id)context;
- (id)_formattedStringWithoutEmojiModifier:(id)modifier;
- (id)emojiPhraseRemoveKeyword:(id)keyword;
- (id)emojiAlternativesForFormattedTokens:(id)tokens stringsWithoutEmojiModifier:(id)modifier alternateNameForTokens:(id)tokens;
- (id)recognizeEmojiInString:(id)string alternativesOut:(id)out;
- (id)_recognizeEmojiInString:(id)string alternativesOut:(id)out persistEmoji:(BOOL)emoji;
- (id)_earEmojiRecognition;
@end

#endif /* _EARFormatter_h */
