//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.7.1.0.0
//
#ifndef _EARUserProfileBuilder_h
#define _EARUserProfileBuilder_h
@import Foundation;

@class NSDictionary, NSSet, NSString;
@protocol {BasicTextSanitizer="_vptr$TextSanitizer"^^?"mUnicodeOutliers"{shared_ptr<quasar::URegularExpressionWrapper>="__ptr_"^{URegularExpressionWrapper}"__cntrl_"^{__shared_weak_count}}"mSpecialChars"{shared_ptr<quasar::URegularExpressionWrapper>="__ptr_"^{URegularExpressionWrapper}"__cntrl_"^{__shared_weak_count}}"mDupSpacePattern"{shared_ptr<quasar::URegularExpressionWrapper>="__ptr_"^{URegularExpressionWrapper}"__cntrl_"^{__shared_weak_count}}"mCtrlCharsPattern"{shared_ptr<quasar::URegularExpressionWrapper>="__ptr_"^{URegularExpressionWrapper}"__cntrl_"^{__shared_weak_count}}"state"i"UTF8_MAP"{unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>>="__table_"{__hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::string>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}}"unicode_map"{unordered_map<char32_t, char32_t, std::hash<char32_t>, std::equal_to<char32_t>, std::allocator<std::pair<const char32_t, char32_t>>>="__table_"{__hash_table<std::__hash_value_type<char32_t, char32_t>, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>, std::allocator<std::__hash_value_type<char32_t, char32_t>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>>="__value_"f}}}}, {LmePackedUserData="dataPronSyms"{SymbolTable="_vptr$SymbolTable"^^?"impl_"^{SymbolTableImpl}}"data"{map<std::string, std::vector<std::vector<quasar::LmePackedWord>>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::vector<quasar::LmePackedWord>>>>>="__tree_"{__tree<std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>, std::less<std::string>>>="__value_"Q}}}}, {map<std::string, long long, std::less<std::string>, std::allocator<std::pair<const std::string, long long>>>="__tree_"{__tree<std::__value_type<std::string, long long>, std::__map_value_compare<std::string, std::__value_type<std::string, long long>, std::less<std::string>>, std::allocator<std::__value_type<std::string, long long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, long long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, long long>, std::less<std::string>>>="__value_"Q}}}, {set<std::string, std::less<std::string>, std::allocator<std::string>>="__tree_"{__tree<std::string, std::less<std::string>, std::allocator<std::string>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<std::string>>="__value_"Q}}}, {set<std::vector<std::string>, quasar::NameEnumerator::EnumComparator, std::allocator<std::vector<std::string>>>="__tree_"{__tree<std::vector<std::string>, quasar::NameEnumerator::EnumComparator, std::allocator<std::vector<std::string>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::vector<std::string>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, quasar::NameEnumerator::EnumComparator>="__value_"Q}}}, {shared_ptr<quasar::LmeData>="__ptr_"^{LmeData}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<quasar::LmeDataFactory>="__ptr_"^{LmeDataFactory}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<quasar::PronCache<std::string, std::vector<std::string>>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}, {unique_ptr<quasar::G2P, std::default_delete<quasar::G2P>>="__ptr_"{__compressed_pair<quasar::G2P *, std::default_delete<quasar::G2P>>="__value_"^{G2P}}}, {unique_ptr<quasar::PersonalizationRecipe, std::default_delete<quasar::PersonalizationRecipe>>="__ptr_"{__compressed_pair<quasar::PersonalizationRecipe *, std::default_delete<quasar::PersonalizationRecipe>>="__value_"^{PersonalizationRecipe}}}, {unique_ptr<quasar::TextTokenizer, std::default_delete<quasar::TextTokenizer>>="__ptr_"{__compressed_pair<quasar::TextTokenizer *, std::default_delete<quasar::TextTokenizer>>="__value_"^{TextTokenizer}}}, {unique_ptr<quasar::WordPronCache, std::default_delete<quasar::WordPronCache>>="__ptr_"{__compressed_pair<quasar::WordPronCache *, std::default_delete<quasar::WordPronCache>>="__value_"^{WordPronCache}}}, {unordered_map<std::string, int, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, int>>>="__table_"{__hash_table<std::__hash_value_type<std::string, int>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, int>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, int>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, int>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, int>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, int>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, int>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}};

@interface _EARUserProfileBuilder : NSObject {
  /* instance variables */
  NSString *_language;
  struct LmePackedUserData { struct SymbolTable { undefined * *_vptr$SymbolTable; struct SymbolTableImpl *impl_; } dataPronSyms; struct map<std::string, std::vector<std::vector<quasar::LmePackedWord>>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::vector<quasar::LmePackedWord>>>>> { struct __tree<std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::vector<quasar::LmePackedWord>>>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } data; } _userData;
  struct shared_ptr<quasar::LmeDataFactory> { struct LmeDataFactory *__ptr_; struct __shared_weak_count *__cntrl_; } _dataFactory;
  struct unique_ptr<quasar::TextTokenizer, std::default_delete<quasar::TextTokenizer>> { struct __compressed_pair<quasar::TextTokenizer *, std::default_delete<quasar::TextTokenizer>> { struct TextTokenizer *__value_; } __ptr_; } _tokenizer;
  struct unique_ptr<quasar::G2P, std::default_delete<quasar::G2P>> { struct __compressed_pair<quasar::G2P *, std::default_delete<quasar::G2P>> { struct G2P *__value_; } __ptr_; } _g2p;
  struct shared_ptr<quasar::PronCache<std::string, std::vector<std::string>>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _pronCache;
  struct BasicTextSanitizer { undefined * *_vptr$TextSanitizer; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mUnicodeOutliers; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mSpecialChars; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mDupSpacePattern; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mCtrlCharsPattern; int state; struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> { struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::string>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } UTF8_MAP; struct unordered_map<char32_t, char32_t, std::hash<char32_t>, std::equal_to<char32_t>, std::allocator<std::pair<const char32_t, char32_t>>> { struct __hash_table<std::__hash_value_type<char32_t, char32_t>, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>, std::allocator<std::__hash_value_type<char32_t, char32_t>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>> { float __value_; } __p3_; } __table_; } unicode_map; } _sanitizer;
  struct unique_ptr<quasar::PersonalizationRecipe, std::default_delete<quasar::PersonalizationRecipe>> { struct __compressed_pair<quasar::PersonalizationRecipe *, std::default_delete<quasar::PersonalizationRecipe>> { struct PersonalizationRecipe *__value_; } __ptr_; } _personalizationRecipe;
  struct shared_ptr<quasar::LmeData> { struct LmeData *__ptr_; struct __shared_weak_count *__cntrl_; } _quasarLmeData;
  BOOL _reuseProfile;
  struct unique_ptr<quasar::WordPronCache, std::default_delete<quasar::WordPronCache>> { struct __compressed_pair<quasar::WordPronCache *, std::default_delete<quasar::WordPronCache>> { struct WordPronCache *__value_; } __ptr_; } _outPronCache;
  int _outPronCacheHits;
  int _outPronCacheMisses;
  int _wordsRejected;
  int _wordsAccepted;
  struct unordered_map<std::string, int, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __hash_table<std::__hash_value_type<std::string, int>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, int>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, int>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, int>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, int>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } _quasarTemplate2Count;
  struct set<std::vector<std::string>, quasar::NameEnumerator::EnumComparator, std::allocator<std::vector<std::string>>> { struct __tree<std::vector<std::string>, quasar::NameEnumerator::EnumComparator, std::allocator<std::vector<std::string>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::vector<std::string>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, quasar::NameEnumerator::EnumComparator> { unsigned long long __value_; } __pair3_; } __tree_; } _contactEnumSet;
  NSString *_unmaskedUserId;
}

@property (readonly, nonatomic) _EARPeopleSuggesterConfig *peopleSuggesterConfig;
@property (copy, nonatomic) NSString *userId;
@property (copy, nonatomic) NSDictionary *templateToVersion;
@property (copy, nonatomic) NSSet *experimentIds;

/* class methods */
+ (void)initialize;
+ (BOOL)isEasyToRecognizeWord:(id)word forLocale:(id)locale;

/* instance methods */
- (id)initWithConfiguration:(id)configuration withLanguage:(id)language withSdapiOverrides:(id)overrides withSdapiConfig:(id)config;
- (id)initWithConfiguration:(id)configuration language:(id)language sdapiOverrides:(id)overrides generalVoc:(id)voc emptyVoc:(id)voc pgVoc:(id)voc lexiconEnh:(id)enh tokenEnh:(id)enh paramsetHolder:(id)holder;
- (id)initWithConfiguration:(id)configuration language:(id)language overrides:(id)overrides sdapiOverrides:(id)overrides generalVoc:(id)voc emptyVoc:(id)voc pgVoc:(id)voc lexiconEnh:(id)enh tokenEnh:(id)enh paramsetHolder:(id)holder;
- (id)initWithConfiguration:(id)configuration language:(id)language overrides:(id)overrides sdapiOverrides:(id)overrides generalVoc:(id)voc emptyVoc:(id)voc pgVoc:(id)voc lexiconEnh:(id)enh tokenEnh:(id)enh paramsetHolder:(id)holder isJit:(BOOL)jit;
- (id)initWithConfiguration:(id)configuration language:(id)language overrides:(id)overrides sdapiOverrides:(id)overrides emptyVoc:(id)voc pgVoc:(id)voc paramsetHolder:(id)holder;
- (id)initWithConfiguration:(id)configuration language:(id)language overrides:(id)overrides sdapiOverrides:(id)overrides emptyVoc:(id)voc pgVoc:(id)voc paramsetHolder:(id)holder isJit:(BOOL)jit;
- (id)initWithConfiguration:(id)configuration language:(id)language overrides:(id)overrides textNormalizationModelRoot:(id)root sdapiOverrides:(id)overrides emptyVoc:(id)voc pgVoc:(id)voc paramsetHolder:(id)holder isJit:(BOOL)jit;
- (void)addWordWithParts:(id)parts templateName:(id)name;
- (void)removeAllWords;
- (void)removeLmeDataForTemplateName:(id)name;
- (BOOL)_writeProfileToStream:(void *)stream;
- (id)dataProfile;
- (BOOL)writeProfileToFile:(id)file protectionClass:(long long)class length:(unsigned long long *)length error:(id *)error;
- (BOOL)writeProfileToFile:(id)file protectionClass:(long long)class coordinated:(BOOL)coordinated length:(unsigned long long *)length error:(id *)error;
- (void)readUserProfile:(id)profile reuseProfile:(BOOL)profile;
- (void)readUserProfile:(id)profile;
- (void)readUserProfileWithPath:(id)path reuseProfile:(BOOL)profile;
- (void)readUserProfileWithPath:(id)path;
- (void)addPersonalizationData:(id)data;
- (void)addPersonalizationJsonData:(id)data;
- (void)writeOutUserDataToJson:(id)json withConfig:(id)config;
- (id)pronunciationsForOrthography:(id)orthography;
- (void)_pronunciationsForOrthography:(const void *)orthography phoneticOrthography:(const void *)orthography templateName:(const void *)name pronunciations:(void *)pronunciations pronRequest:(int)request outOrthography:(void *)orthography;
- (id)sanitizedStringWithString:(id)string;
- (void)signalEndOfUserData;
- (void)createInlineLmeUserDataForContextStrings:(id)strings;
- (id)createInlineLmeUserDataForContextData:(id)data speechProfile:(id)profile;
- (void)_logSpeechProfileUpdatedEventWithLmeData:(struct shared_ptr<quasar::LmeData> { struct LmeData * x0; struct __shared_weak_count * x1; })data sizeInBytes:(int)bytes numEnumeratedEntries:(struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long x0; } x2; } x0; })entries;
- (void)_logLmeSlotUpdatedEventsWithLanguage:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; })language numEnumeratedEntries:(struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long x0; } x2; } x0; })entries;
@end

#endif /* _EARUserProfileBuilder_h */
