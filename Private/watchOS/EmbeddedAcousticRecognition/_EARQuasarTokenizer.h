//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.7.1.0.0
//
#ifndef _EARQuasarTokenizer_h
#define _EARQuasarTokenizer_h
@import Foundation;

#include "_EARTokenizer.h"

@protocol {BasicTextSanitizer="_vptr$TextSanitizer"^^?"mUnicodeOutliers"{shared_ptr<quasar::URegularExpressionWrapper>="__ptr_"^{URegularExpressionWrapper}"__cntrl_"^{__shared_weak_count}}"mSpecialChars"{shared_ptr<quasar::URegularExpressionWrapper>="__ptr_"^{URegularExpressionWrapper}"__cntrl_"^{__shared_weak_count}}"mDupSpacePattern"{shared_ptr<quasar::URegularExpressionWrapper>="__ptr_"^{URegularExpressionWrapper}"__cntrl_"^{__shared_weak_count}}"mCtrlCharsPattern"{shared_ptr<quasar::URegularExpressionWrapper>="__ptr_"^{URegularExpressionWrapper}"__cntrl_"^{__shared_weak_count}}"state"i"UTF8_MAP"{unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>>="__table_"{__hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::string>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}}"unicode_map"{unordered_map<char32_t, char32_t, std::hash<char32_t>, std::equal_to<char32_t>, std::allocator<std::pair<const char32_t, char32_t>>>="__table_"{__hash_table<std::__hash_value_type<char32_t, char32_t>, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>, std::allocator<std::__hash_value_type<char32_t, char32_t>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>>="__value_"f}}}}, {shared_ptr<quasar::TextTokenizer>="__ptr_"^{TextTokenizer}"__cntrl_"^{__shared_weak_count}};

@interface _EARQuasarTokenizer : _EARTokenizer {
  /* instance variables */
  struct BasicTextSanitizer { undefined * *_vptr$TextSanitizer; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mUnicodeOutliers; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mSpecialChars; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mDupSpacePattern; struct shared_ptr<quasar::URegularExpressionWrapper> { struct URegularExpressionWrapper *__ptr_; struct __shared_weak_count *__cntrl_; } mCtrlCharsPattern; int state; struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> { struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::string>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } UTF8_MAP; struct unordered_map<char32_t, char32_t, std::hash<char32_t>, std::equal_to<char32_t>, std::allocator<std::pair<const char32_t, char32_t>>> { struct __hash_table<std::__hash_value_type<char32_t, char32_t>, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>, std::allocator<std::__hash_value_type<char32_t, char32_t>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>>> { float __value_; } __p3_; } __table_; } unicode_map; } _sanitizer;
  struct shared_ptr<quasar::TextTokenizer> { struct TextTokenizer *__ptr_; struct __shared_weak_count *__cntrl_; } _tokenizer;
}

/* class methods */
+ (struct unique_ptr<quasar::TextTokenizer, std::default_delete<quasar::TextTokenizer>> { struct __compressed_pair<quasar::TextTokenizer *, std::default_delete<quasar::TextTokenizer>> { struct TextTokenizer * x0; } x0; })tokenizerWithNcsRoot:(id)root;
+ (struct unique_ptr<quasar::TextTokenizer, std::default_delete<quasar::TextTokenizer>> { struct __compressed_pair<quasar::TextTokenizer *, std::default_delete<quasar::TextTokenizer>> { struct TextTokenizer * x0; } x0; })tokenizerWithTokenizerModelRoot:(id)root;
+ (struct unique_ptr<quasar::TextTokenizer, std::default_delete<quasar::TextTokenizer>> { struct __compressed_pair<quasar::TextTokenizer *, std::default_delete<quasar::TextTokenizer>> { struct TextTokenizer * x0; } x0; })tokenizerWithModelRoot:(id)root;
+ (struct unique_ptr<quasar::TextTokenizer, std::default_delete<quasar::TextTokenizer>> { struct __compressed_pair<quasar::TextTokenizer *, std::default_delete<quasar::TextTokenizer>> { struct TextTokenizer * x0; } x0; })tokenizerWithRecognizerConfigPath:(id)path;
+ (id)extractModelRootFromNcsResourcePaths:(id)paths lexiconEnh:(id)enh tokenEnh:(id)enh itnEnh:(id)enh;
+ (id)extractModelRootFromNcsRoot:(id)root;

/* instance methods */
- (id)initWithNcsRoot:(id)root;
- (id)initWithModelRoot:(id)root;
- (id)initWithTokenizerModelRoot:(id)root;
- (id)tokenize:(id)tokenize;
- (id)tokenize:(id)tokenize limit:(unsigned long long)limit;
@end

#endif /* _EARQuasarTokenizer_h */
