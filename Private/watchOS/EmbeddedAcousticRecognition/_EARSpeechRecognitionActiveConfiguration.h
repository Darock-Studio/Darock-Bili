//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.7.1.0.0
//
#ifndef _EARSpeechRecognitionActiveConfiguration_h
#define _EARSpeechRecognitionActiveConfiguration_h
@import Foundation;

#include "NSCopying-Protocol.h"

@class NSSet;

@interface _EARSpeechRecognitionActiveConfiguration : NSObject<NSCopying>

@property (copy, nonatomic) NSSet *samplingRateFilter;
@property (copy, nonatomic) NSSet *taskTypeFilter;
@property (copy, nonatomic) NSSet *farFieldFilter;
@property (copy, nonatomic) NSSet *deviceIdFilter;
@property (copy, nonatomic) NSSet *bluetoothDeviceIdFilter;
@property (copy, nonatomic) NSSet *aneContextFilter;
@property (copy, nonatomic) NSSet *cpuContextFilter;
@property (copy, nonatomic) NSSet *gpuContextFilter;

/* class methods */
+ (id)activeConfigurationForEverything;
+ (id)activeConfigurationForNothing;

/* instance methods */
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)_initWithActiveConfiguration:(const void *)configuration;
- (struct SpeechRecognizerActiveConfiguration { struct optional<std::set<unsigned int>> { union { char x0; struct set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int>> { struct __tree<unsigned int, std::less<unsigned int>, std::allocator<unsigned int>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<unsigned int, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<unsigned int>> { unsigned long long x0; } x2; } x0; } x1; } x0; BOOL x1; } x0; struct optional<std::set<std::string>> { union { char x0; struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long x0; } x2; } x0; } x1; } x0; BOOL x1; } x1; struct optional<std::set<std::string>> { union { char x0; struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long x0; } x2; } x0; } x1; } x0; BOOL x1; } x2; struct optional<std::set<bool>> { union { char x0; struct set<bool, std::less<bool>, std::allocator<bool>> { struct __tree<bool, std::less<bool>, std::allocator<bool>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<bool, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<bool>> { unsigned long long x0; } x2; } x0; } x1; } x0; BOOL x1; } x3; struct optional<std::set<std::string>> { union { char x0; struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long x0; } x2; } x0; } x1; } x0; BOOL x1; } x4; struct optional<std::set<std::string>> { union { char x0; struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long x0; } x2; } x0; } x1; } x0; BOOL x1; } x5; struct optional<std::set<std::string>> { union { char x0; struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long x0; } x2; } x0; } x1; } x0; BOOL x1; } x6; struct optional<std::set<std::string>> { union { char x0; struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void * x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long x0; } x2; } x0; } x1; } x0; BOOL x1; } x7; })speechRecognizerActiveConfiguration;
- (id)description;
@end

#endif /* _EARSpeechRecognitionActiveConfiguration_h */
