//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1262.300.81.4.10
//
#ifndef IMImageUtilities_h
#define IMImageUtilities_h
@import Foundation;

@interface IMImageUtilities : NSObject
/* class methods */
+ (struct CGSize { double x0; double x1; })imageSourcePxSize:(struct CGImageSource *)size;
+ (struct CGSize { double x0; double x1; })imageRefPxSize:(struct CGImage *)size;
+ (void)sampleImageEdges:(char *)edges usingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forMostlyWhitePixels:(unsigned long long *)pixels mostlyTransparentPixels:(unsigned long long *)pixels otherPixels:(unsigned long long *)pixels sampledPixels:(unsigned long long *)pixels bytesPerRow:(long long)row;
+ (void)sampleImageEdges:(char *)edges usingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forMostlyWhitePixels:(unsigned long long *)pixels otherPixels:(unsigned long long *)pixels bytesPerRow:(long long)row;
+ (BOOL)persistCPBitmapWithImage:(struct CGImage *)image url:(id)url;
+ (BOOL)persistPreviewToDiskCache:(struct CGImage *)cache previewURL:(id)url error:(id *)error;
+ (BOOL)isCroppingAvoidanceEnabled;
+ (BOOL)imageIsSubjectLift:(struct CGImage *)lift;
+ (struct CGSize { double x0; double x1; })uncroppedPreviewImageSizeFromImageSizeInPx:(struct CGSize { double x0; double x1; })px maximumSizeInPx:(struct CGSize { double x0; double x1; })px;
+ (struct CGImage *)newUncroppedPreviewImageFromImage:(struct CGImage *)image isScreenshot:(BOOL)screenshot maximumSizeInPx:(struct CGSize { double x0; double x1; })px minimumSizeInPx:(struct CGSize { double x0; double x1; })px;
+ (struct CGImage *)_newUncroppedPreviewImageFromImage:(struct CGImage *)image maximumSizeInPx:(struct CGSize { double x0; double x1; })px;
+ (BOOL)shouldCropImageOfSize:(struct CGSize { double x0; double x1; })size maximumSizeInPx:(struct CGSize { double x0; double x1; })px minimumSizeInPx:(struct CGSize { double x0; double x1; })px;
+ (struct CGContext *)_newBitmapContextWithTargetSize:(struct CGSize { double x0; double x1; })size;
+ (struct CGImage *)newThumbnailForTargetSize:(struct CGSize { double x0; double x1; })size imageSize:(struct CGSize { double x0; double x1; })size imageSource:(struct CGImageSource *)source mode:(long long)mode scale:(double)scale;
+ (struct CGImage *)newThumbnailForTargetSize:(struct CGSize { double x0; double x1; })size imageSize:(struct CGSize { double x0; double x1; })size imageSource:(struct CGImageSource *)source atIndex:(unsigned long long)index mode:(long long)mode scale:(double)scale;
+ (double)scaleFactorForThumbnailWithSize:(struct CGSize { double x0; double x1; })size constraints:(struct IMPreviewConstraints { double x0; struct CGSize { double x0; double x1; } x1; double x2; BOOL x3; BOOL x4; })constraints targetPxSize:(struct CGSize { double x0; double x1; })size shouldScaleUpPreview:(BOOL)preview maxUpScale:(double)scale;
@end

#endif /* IMImageUtilities_h */
