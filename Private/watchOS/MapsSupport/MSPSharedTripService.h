//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2811.42.9.28.8
//
#ifndef MSPSharedTripService_h
#define MSPSharedTripService_h
@import Foundation;

#include "GCDTimer.h"
#include "MSPMapsPaths.h"
#include "MSPSharedTripContactController.h"
#include "MSPSharedTripContactControllerDelegate-Protocol.h"
#include "MSPSharedTripSharingIdentity.h"
#include "MSPSharedTripXPCClient-Protocol.h"
#include "MSPSharedTripXPCServer-Protocol.h"

@class GEOObserverHashTable, NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSString, NSXPCConnection;
@protocol OS_dispatch_group, OS_dispatch_queue;

@interface MSPSharedTripService : NSObject<MSPSharedTripXPCServer, MSPSharedTripXPCClient, MSPSharedTripContactControllerDelegate> {
  /* instance variables */
  NSXPCConnection *_connection;
  BOOL _connectionError;
  NSObject<OS_dispatch_queue> *_isolationQueue;
  unsigned long long _connectionRetryCounter;
  NSDate *_reconnectionBackoffUntilDate;
  GEOObserverHashTable *_receivingObservers;
  GEOObserverHashTable *_sendingObservers;
  MSPSharedTripContactController *_sharingContactController;
  NSMutableDictionary *_subscriptionTokensByTripID;
  NSString *_sharingGroupIdentifier;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _sharingIdentityLock;
  unsigned long long _permissions;
  NSObject<OS_dispatch_group> *_checkinDispatchGroup;
  id _userDisabledDefaultListener;
  id _serverDisabledDefaultListener;
  MSPMapsPaths *_mapsPaths;
  BOOL _confirmedMapsIsInstalled;
  BOOL _networkReachable;
  id _blockListMonitoringObserver;
  GCDTimer *_blockListCoalescingTimer;
}

@property (readonly, nonatomic) BOOL entitledToShareTrip;
@property (readonly, nonatomic) BOOL entitledToReceiveTrips;
@property (readonly, nonatomic) MSPSharedTripSharingIdentity *sharingIdentity;
@property (readonly, nonatomic) BOOL canAddReceivers;
@property (readonly, nonatomic) NSArray *receivers;
@property (readonly, nonatomic) NSArray *receivedTrips;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedInstance;
+ (BOOL)_supportsPassingClosureReasons;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)checkin;
- (void)_checkin;
- (void)_handleCheckinWithSharingIdentity:(id)identity activeRecipients:(id)recipients receivedTrips:(id)trips permissions:(unsigned long long)permissions;
- (void)_resetCheckinIdentityAndPermissions;
- (void)_performBlockWhenCheckinCompleted:(id /* block */)completed;
- (void)_checkEnabledState;
- (void)performBlockAfterInitialConnection:(id /* block */)connection;
- (void)_performBlockAfterInitialConnection:(id /* block */)connection;
- (void)performBlockAfterInitialSync:(id /* block */)sync;
- (void)_performBlockAfterInitialSync:(id /* block */)sync;
- (void)_networkReachabilityChanged:(id)changed;
- (id)_receivers;
- (BOOL)isSharingWithContact:(id)contact;
- (void)refreshSharingIdentityWithCompletion:(id /* block */)completion;
- (void)startSharingWithContact:(id)contact completion:(id /* block */)completion;
- (void)_startSharingWithContact:(id)contact completion:(id /* block */)completion;
- (void)stopSharingWithContact:(id)contact completion:(id /* block */)completion;
- (void)stopSharingWithContact:(id)contact reason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)_stopSharingWithContact:(id)contact reason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)stopAllSharingWithCompletion:(id /* block */)completion;
- (void)stopAllSharingWithReason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)_stopAllSharingWithReason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)sharedTripContactController:(id)controller didUpdateActiveContactsValues:(id)values;
- (BOOL)_supportsMonitoringBlockList;
- (void)_startMonitoringSystemBlockListIfNeeded;
- (void)_stopMonitoringSystemBlockList;
- (void)_systemBlockListDidUpdate;
- (void)_scheduleCoalescedBlockListCheckIfNeeded;
- (void)_checkBlockList;
- (void)refreshReceivedTripsWithCompletion:(id /* block */)completion;
- (void)blockSharedTripWithIdentifier:(id)identifier;
- (id)_subscriptionTokensForTripID:(id)id createIfNeeded:(BOOL)needed;
- (id)_addSubscriptionTokenForTripID:(id)id;
- (void)purgeToken:(id)token forTripID:(id)id;
- (void)_purgeToken:(id)token forTripID:(id)id;
- (void)addReceivingObserver:(id)observer;
- (void)removeReceivingObserver:(id)observer;
- (void)addSendingObserver:(id)observer;
- (void)removeSendingObserver:(id)observer;
- (void)_validateCurrentConfigurationWithCompletion:(id /* block */)completion;
- (BOOL)_serviceCanAttemptConnection:(id *)connection;
- (BOOL)_isMapsInstalled;
- (id)archivedSharingState;
- (id)contactsFromArchivedTripSharingState:(id)state;
- (BOOL)_supportsArchivingSharingState;
- (void)checkinWithCompletion:(id /* block */)completion;
- (void)_checkinWithCompletion:(id /* block */)completion;
- (void)fetchSharingIdentityWithCompletion:(id /* block */)completion;
- (void)_fetchSharingIdentityWithCompletion:(id /* block */)completion;
- (void)fetchRequiresUserConfirmationOfSharingIdentityWithCompletion:(id /* block */)completion;
- (void)_fetchRequiresUserConfirmationOfSharingIdentityWithCompletion:(id /* block */)completion;
- (void)reportUserConfirmationOfSharingIdentity:(id)identity completion:(id /* block */)completion;
- (void)_reportUserConfirmationOfSharingIdentity:(id)identity completion:(id /* block */)completion;
- (void)startSharingTripWithContacts:(id)contacts completion:(id /* block */)completion;
- (void)_startSharingTripWithContacts:(id)contacts completion:(id /* block */)completion;
- (void)startSharingTripWithMessagesContacts:(id)contacts completion:(id /* block */)completion;
- (void)_startSharingTripWithMessagesContacts:(id)contacts completion:(id /* block */)completion;
- (void)startSharingTripWithMessagesGroup:(id)group completion:(id /* block */)completion;
- (void)_startSharingTripWithMessagesGroup:(id)group completion:(id /* block */)completion;
- (void)stopSharingTripWithContacts:(id)contacts reason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)_stopSharingTripWithContacts:(id)contacts reason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)stopSharingTripWithMessagesGroup:(id)group reason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)_stopSharingTripWithMessagesGroup:(id)group reason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)stopSharingTripWithReason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)_stopSharingTripWithReason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)fetchActiveHandlesWithCompletion:(id /* block */)completion;
- (void)_fetchActiveHandlesWithCompletion:(id /* block */)completion;
- (void)fetchSharedTripsWithCompletion:(id /* block */)completion;
- (void)_fetchSharedTripsWithCompletion:(id /* block */)completion;
- (void)subscribeToSharedTripUpdatesWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)_subscribeToSharedTripUpdatesWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)unsubscribeFromSharedTripUpdatesWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)blockSharedTrip:(id)trip;
- (void)_blockSharedTrip:(id)trip;
- (void)clearBlockedTripIdentifiers;
- (void)_clearBlockedTripIdentifiers;
- (void)purgeExpiredBlockedTripIdentifiers;
- (void)_purgeExpiredBlockedTripIdentifiers;
- (void)sharedTripDidBecomeAvailable:(id)available;
- (void)destinationDidUpdateForSharedTrip:(id)trip;
- (void)destinationReachedDidUpdateForSharedTrip:(id)trip;
- (void)etaDidUpdateForSharedTrip:(id)trip;
- (void)routeDidUpdateForSharedTrip:(id)trip;
- (void)sharedTripDidBecomeUnavailable:(id)unavailable;
- (void)sharedTripDidClose:(id)close;
- (id)_insertOrUpdateTrip:(id)trip;
- (void)sharedTripDidStartSharingWithIdentifier:(id)identifier;
- (void)sharedTripDidUpdateRecipients:(id)recipients;
- (void)sharedTripInvalidatedWithError:(id)error;
- (void)sharingIdentityDidChange:(id)change;
- (id)_remoteObjectProxy;
- (id)_remoteObjectProxyWithErrorHandler:(id /* block */)handler;
- (void)_openConnectionIfNeeded;
@end

#endif /* MSPSharedTripService_h */
