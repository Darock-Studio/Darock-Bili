//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2811.42.9.28.8
//
#ifndef MSPSharedTripServer_h
#define MSPSharedTripServer_h
@import Foundation;

#include "MSPReceiverETAController.h"
#include "MSPReceiverETAControllerDelegate-Protocol.h"
#include "MSPSenderETAController.h"
#include "MSPSenderETAControllerDelegate-Protocol.h"
#include "MSPSharedTripAvailabiltyDelegate-Protocol.h"
#include "MSPSharedTripRelay.h"
#include "MSPSharedTripXPCServer-Protocol.h"
#include "NSXPCListenerDelegate-Protocol.h"

@class NSMapTable, NSMutableDictionary, NSMutableSet, NSString, NSXPCListener;

@interface MSPSharedTripServer : NSObject<NSXPCListenerDelegate, MSPReceiverETAControllerDelegate, MSPSenderETAControllerDelegate, MSPSharedTripAvailabiltyDelegate, MSPSharedTripXPCServer> {
  /* instance variables */
  MSPSenderETAController *_sendingController;
  MSPReceiverETAController *_receivingController;
  MSPSharedTripRelay *_idsRelay;
  NSXPCListener *_listener;
  NSMutableSet *_connections;
  NSMutableDictionary *_connectionSubscriptionsByTripID;
  NSMapTable *_peersByConnection;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)migrateIfNeeded;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)cleanConnections;
- (void)createXPCListener;
- (BOOL)listener:(id)listener shouldAcceptNewConnection:(id)connection;
- (BOOL)_connectionCanControlSharing:(id)sharing;
- (BOOL)_connectionCanControlReceiving:(id)receiving;
- (id)connections;
- (id)_subscribedConnectionsForTripID:(id)id createIfNeeded:(BOOL)needed;
- (void)_purgeSubscriptionsForConnection:(id)connection;
- (void)createControllers;
- (void)_setNotificationCenter:(id)center;
- (void)etaController:(id)controller didUpdateDestinationForSharedTrip:(id)trip;
- (void)etaController:(id)controller didUpdateReachedDestinationForSharedTrip:(id)trip;
- (void)etaController:(id)controller didUpdateETAForSharedTrip:(id)trip;
- (void)etaController:(id)controller didUpdateRouteForSharedTrip:(id)trip;
- (void)etaController:(id)controller sharedTripDidBecomeAvailable:(id)available;
- (void)etaController:(id)controller sharedTripDidBecomeUnavailable:(id)unavailable;
- (void)etaController:(id)controller sharedTripDidClose:(id)close;
- (void)checkinWithCompletion:(id /* block */)completion;
- (void)fetchSharingIdentityWithCompletion:(id /* block */)completion;
- (void)fetchRequiresUserConfirmationOfSharingIdentityWithCompletion:(id /* block */)completion;
- (void)reportUserConfirmationOfSharingIdentity:(id)identity completion:(id /* block */)completion;
- (void)startSharingTripWithContacts:(id)contacts completion:(id /* block */)completion;
- (void)startSharingTripWithMessagesContacts:(id)contacts completion:(id /* block */)completion;
- (void)startSharingTripWithMessagesGroup:(id)group completion:(id /* block */)completion;
- (void)stopSharingTripWithContacts:(id)contacts completion:(id /* block */)completion;
- (void)stopSharingTripWithContacts:(id)contacts reason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)stopSharingTripWithMessagesGroup:(id)group completion:(id /* block */)completion;
- (void)stopSharingTripWithMessagesGroup:(id)group reason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)stopSharingTripWithCompletion:(id /* block */)completion;
- (void)stopSharingTripWithReason:(unsigned long long)reason completion:(id /* block */)completion;
- (void)fetchActiveHandlesWithCompletion:(id /* block */)completion;
- (void)subscribeToSharedTripUpdatesWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)unsubscribeFromSharedTripUpdatesWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)fetchSharedTripsWithCompletion:(id /* block */)completion;
- (void)blockSharedTrip:(id)trip;
- (void)clearBlockedTripIdentifiers;
- (void)purgeExpiredBlockedTripIdentifiers;
- (void)senderController:(id)controller didStartSharingWithGroupIdentifier:(id)identifier;
- (void)senderController:(id)controller didInvalidateSharedTripWithError:(id)error;
- (void)invalidateActiveHandlesForSenderController:(id)controller;
- (void)relay:(id)relay accountStatusChanged:(BOOL)changed;
@end

#endif /* MSPSharedTripServer_h */
