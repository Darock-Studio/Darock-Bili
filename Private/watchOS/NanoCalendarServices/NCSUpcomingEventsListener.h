//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 648.2.0.0.0
//
#ifndef NCSUpcomingEventsListener_h
#define NCSUpcomingEventsListener_h
@import Foundation;

#include "NCSEventStoreObserver.h"

@class NSArray, NSMutableArray, NSTimer, NSURL;
@protocol OS_dispatch_queue;

@interface NCSUpcomingEventsListener : NCSEventStoreObserver {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_refreshQueue;
  NSTimer *_updateTimer;
  BOOL _reporting;
}

@property (nonatomic) unsigned long long searchRange;
@property (retain, nonatomic) NSArray *upcomingEvents;
@property (retain, nonatomic) NSURL *launchURL;
@property (nonatomic) BOOL firstInDay;
@property (nonatomic) BOOL overbooked;
@property (readonly, nonatomic) NSMutableArray *upcomingTodayEvents;
@property (readonly, nonatomic) NSMutableArray *tomorrowEvents;
@property (readonly, nonatomic) NSMutableArray *todayEvents;
@property (copy, nonatomic) id /* block */ updateBlock;
@property (copy, nonatomic) id /* block */ refinementBlock;

/* class methods */
+ (id)nanoCalendarLaunchURLForEvent:(id)event;
+ (id)nanoCalendarLaunchURLForDate:(id)date;
+ (id)splitDateBetweenEvent:(id)event andEvent:(id)event;
+ (id)_dateFor5PMTomorrow;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)startReportingUpcomingEventsWithBlock:(id /* block */)block;
- (void)stopReportingUpcomingEvents;
- (void)_reloadAllEvents;
- (void)_evaluateEventsAndReportIfAllowed:(id)allowed;
- (id)loadUpcomingTodayEventsIfNecessary:(id)necessary;
- (id)loadTomorrowEventsIfNecessary:(id)necessary;
- (id)loadTodayEventsIfNecessary:(id)necessary;
- (id)_loadUpcomingTodayEventsForSelectedCalendars:(id)calendars;
- (void)_trimStaleEventsFrom:(id)from;
- (id)_internalRefineEventsAndGetUpdateTimerFireDate:(id)date;
- (id)_loadTomorrowEventsForSelectedCalendars:(id)calendars;
- (id)_loadTodayEventsForSelectedCalendars:(id)calendars;
- (id)_loadEventsForSelectedCalendars:(id)calendars inDateRange:(id)range allowAllDay:(BOOL)day;
- (void)_reportEventsIfAllowed;
- (void)_scheduleUpdateTimerForDate:(id)date;
- (void)_updateTimerDidFire:(id)fire;
- (void)_resetTimers;
- (void)databaseChanged:(id)changed;
- (void)eventStoreWillClose;
- (void)_releaseAllEvents;
- (void)_resetAllEvents;
- (void)startObserving;
- (void)stopObserving;
- (void)_todayChanged:(id)changed;
- (void)_significantTimeChange:(id)change;
- (void)_selectedCalendarsChanged:(id)changed;
- (void)_localeChanged;
- (id)_selectedCalendars;
- (BOOL)_isListOfEvents:(id)events equivalentToListOfEvents:(id)events;
- (BOOL)_doesListOfEvents:(id)events containEquivalentForEvent:(id)event;
- (BOOL)_shouldExcludeEvent:(id)event allowAllDayEvents:(BOOL)events;
- (BOOL)_isEvent:(id)event equivalentToEvent:(id)event;
- (BOOL)_doesEvent:(id)event overlapAnyEventsIn:(id)in;
- (BOOL)_isEvent:(id)event overlappingEvent:(id)event;
- (id)_dateForNow;
- (id)_dateForBeginningOfToday;
- (id)_dateForEndOfToday;
- (id)_dateForBeginningOfTomorrow;
- (BOOL)isFirstInDay;
- (BOOL)isOverbooked;
@end

#endif /* NCSUpcomingEventsListener_h */
