//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 573.2.0.0.0
//
#ifndef ACHTinkerAwardingScheduler_h
#define ACHTinkerAwardingScheduler_h
@import Foundation;

#include "ACHAwardingScheduler-Protocol.h"
#include "ACHDataStore.h"
#include "ACHDataStoreObserving-Protocol.h"
#include "ACHEarnedInstanceAwardingEngine.h"
#include "ACHEarnedInstanceStore.h"
#include "ACHTemplateStore.h"
#include "ACHTemplateStoreObserving-Protocol.h"
#include "ACHXPCScheduler.h"
#include "HDDiagnosticObject-Protocol.h"
#include "HDHealthDaemonReadyObserver-Protocol.h"
#include "HDPeriodicActivityDelegate-Protocol.h"

@class ACHAwardsKeyValueClient, ACHDatabaseAssertionClient, HDKeyValueDomain, HDMaintenanceOperation, HDPeriodicActivity, HDProfile, HKHealthStore, HKKeyValueDomain, NSCalendar, NSDate, NSMutableArray, NSNumber, NSString, _HKDelayedOperation;
@protocol OS_dispatch_queue;

@interface ACHTinkerAwardingScheduler : NSObject<HDPeriodicActivityDelegate, HDHealthDaemonReadyObserver, HDDiagnosticObject, ACHTemplateStoreObserving, ACHDataStoreObserving, ACHAwardingScheduler>

@property (retain, nonatomic) HKHealthStore *healthStore;
@property (retain, nonatomic) ACHDatabaseAssertionClient *assertionClient;
@property (retain, nonatomic) ACHAwardsKeyValueClient *keyValueClient;
@property (retain, nonatomic) HDProfile *profile;
@property (retain, nonatomic) ACHDataStore *dataStore;
@property (retain, nonatomic) ACHEarnedInstanceStore *earnedInstanceStore;
@property (retain, nonatomic) ACHTemplateStore *templateStore;
@property (retain, nonatomic) ACHEarnedInstanceAwardingEngine *awardingEngine;
@property (retain, nonatomic) HDPeriodicActivity *scheduler;
@property (retain, nonatomic) ACHXPCScheduler *xpcScheduler;
@property (retain, nonatomic) NSCalendar *calendar;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) BOOL shouldRetryEarnedInstanceDeletion;
@property (retain, nonatomic) NSNumber *forceActivityAppInstalled;
@property (retain, nonatomic) _HKDelayedOperation *operation;
@property (retain, nonatomic) NSMutableArray *awardEvaluationCompletionBlocks;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *awardingEvaluationQueue;
@property (retain, nonatomic) NSNumber *coalescingDelayOverride;
@property (retain, nonatomic) HKKeyValueDomain *localKeyValueHSDomain;
@property (retain, nonatomic) HDKeyValueDomain *localKeyValueDomain;
@property (retain, nonatomic) NSDate *lastSuccessfulRunDate;
@property (retain, nonatomic) HDMaintenanceOperation *maintenanceOperation;
@property (nonatomic) BOOL maintenanceTaskScheduled;
@property (nonatomic) BOOL dataStoreIsLoaded;
@property (nonatomic) BOOL shouldRunImmediatelyOnDataStoreLoad;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithHealthStore:(id)store assertionClient:(id)client dataStore:(id)store earnedInstanceStore:(id)store templateStore:(id)store awardingEngine:(id)engine;
- (id)initWithProfile:(id)profile dataStore:(id)store earnedInstanceStore:(id)store templateStore:(id)store awardingEngine:(id)engine;
- (void)activate;
- (void)setlastSuccessfulRunDate:(id)date;
- (id)_lastSuccessfulRunDateKey;
- (void)clearLastSuccessfulRunDate;
- (void)_systemTimeZoneDidChange:(id)change;
- (void)daemonReady:(id)ready;
- (void)_startUp;
- (void)templateStoreDidFinishInitialFetch:(id)fetch;
- (void)templateStore:(id)store didAddNewTemplates:(id)templates;
- (void)templateStore:(id)store didRemoveTemplates:(id)templates;
- (void)_runXPCActivityWithCompletion:(id /* block */)completion;
- (void)periodicActivity:(id)activity configureXPCActivityCriteria:(id)criteria;
- (void)performPeriodicActivity:(id)activity completion:(id /* block */)completion;
- (BOOL)periodicActivityRequiresProtectedData:(id)data;
- (id)diagnosticDescription;
- (void)requestAwardingEvaluationWithCompletion:(id /* block */)completion;
- (void)scheduleMaintenanceTaskForAwardingWithCompletion:(id /* block */)completion;
- (void)_client_scheduleMaintenanceTaskForAwardingWithCompletion:(id /* block */)completion;
- (void)_daemon_scheduleMaintenanceTaskForAwardingWithCompletion:(id /* block */)completion;
- (void)_queue_removeMaintenanceOperation;
- (void)_queue_requestAwardingEvaluation;
- (void)_queue_client_requestAwardingEvaluation;
- (void)_queue_daemon_requestAwardingEvaluation;
- (void)_queue_performCleanupTasks;
- (void)_queue_client_performCleanupTasks;
- (void)_queue_daemon_performCleanupTasks;
- (BOOL)_didRunToday;
- (BOOL)_shouldRunImmediatelyOnTemplateLoad;
- (void)overrideCoalescingDelay:(double)delay;
- (void)addAwardingCompletion:(id /* block */)completion;
- (void)_queue_addAwardingCompletion:(id /* block */)completion;
- (void)_queue_callAwardingCompletionsWithSuccess:(BOOL)success error:(id)error;
- (void)dataStoreDidPopulate:(id)populate;
@end

#endif /* ACHTinkerAwardingScheduler_h */
