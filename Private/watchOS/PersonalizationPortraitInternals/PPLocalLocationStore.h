//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1226.2.2.1.0
//
#ifndef PPLocalLocationStore_h
#define PPLocalLocationStore_h
@import Foundation;

#include "PPFeedbackAccepting-Protocol.h"
#include "PPFeedbackProcessing-Protocol.h"
#include "PPLocationStorage.h"
#include "PPTrialWrapper.h"

@class NSCache, _PASLock;

@interface PPLocalLocationStore : NSObject<PPFeedbackAccepting, PPFeedbackProcessing> {
  /* instance variables */
  _PASLock *_cache;
  NSCache *_modelCache;
  PPTrialWrapper *_trialWrapper;
}

@property (readonly, nonatomic) PPLocationStorage *storage;
@property (readonly, nonatomic) BOOL useScoreInterpreter;

/* class methods */
+ (id)defaultStore;
+ (id)locationFromMapItemDictionary:(id)dictionary;
+ (id)locationNamedEntityToPPScoredLocation:(id)location;
+ (id)locationFromMapItem:(id)item;
+ (BOOL)isLocationRelevantNamedEntityCategory:(unsigned long long)category;
+ (unsigned short)namedEntityCategoryToLocationCategory:(unsigned long long)category;
+ (unsigned short)routineLOITypeToLocationCategory:(long long)category;
+ (id)scoredLocationFromName:(id)name category:(unsigned short)category score:(double)score sentimentScore:(double)score;

/* instance methods */
- (id)init;
- (id)initWithStorage:(id)storage trialWrapper:(id)wrapper;
- (id)_init;
- (BOOL)donateLocations:(id)locations source:(id)source contextualNamedEntities:(id)entities algorithm:(unsigned short)algorithm cloudSync:(BOOL)sync error:(id *)error;
- (BOOL)iterRankedLocationsWithQuery:(id)query error:(id *)error block:(id /* block */)block;
- (id)rankedLocationsWithQuery:(id)query clientProcessName:(id)name error:(id *)error;
- (double)finalScoreFromRecordsUsingHybrid:(id)hybrid streamingScorer:(id)scorer mlModel:(id)model;
- (BOOL)iterLocationRecordsWithQuery:(id)query error:(id *)error block:(id /* block */)block;
- (id)locationRecordOfCategory:(unsigned short)category;
- (id)locationForHome;
- (id)locationForWork;
- (id)homeOrWorkAddresses;
- (id)locationRecordsWithQuery:(id)query error:(id *)error;
- (BOOL)clearWithError:(id *)error deletedCount:(unsigned long long *)count;
- (BOOL)deleteAllLocationsFromSourcesWithBundleId:(id)id deletedCount:(unsigned long long *)count error:(id *)error;
- (BOOL)deleteAllLocationsFromSourcesWithBundleId:(id)id documentIds:(id)ids deletedCount:(unsigned long long *)count error:(id *)error;
- (BOOL)deleteAllLocationsFromSourcesWithBundleId:(id)id groupIds:(id)ids deletedCount:(unsigned long long *)count error:(id *)error;
- (BOOL)deleteAllLocationsFromSourcesWithBundleId:(id)id groupId:(id)id olderThan:(id)than deletedCount:(unsigned long long *)count error:(id *)error;
- (BOOL)deleteAllLocationsOlderThanDate:(id)date deletedCount:(unsigned long long *)count error:(id *)error;
- (BOOL)deleteAllLocationFeedbackCountsOlderThanDate:(id)date;
- (BOOL)pruneOrphanedLocationFeedbackCountsWithLimit:(long long)limit rowOffset:(unsigned long long)offset deletedCount:(unsigned long long *)count isComplete:(BOOL *)complete;
- (void)registerFeedback:(id)feedback completion:(id /* block */)completion;
- (void)processFeedback:(id)feedback;
@end

#endif /* PPLocalLocationStore_h */
