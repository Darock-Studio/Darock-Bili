//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef MPCMediaRemoteController_h
#define MPCMediaRemoteController_h
@import Foundation;

#include "MPCFuture.h"
#include "MPCMRArtworkDataSource.h"
#include "MPCMRRemoteArtworkDataSource.h"
#include "MPCPlayerPath.h"
#include "MPMediaRemoteEntityArtworkGenerator-Protocol.h"
#include "MSVLRUDictionaryDelegate-Protocol.h"

@class MSVLRUDictionary, NSMapTable, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface MPCMediaRemoteController : NSObject<MSVLRUDictionaryDelegate, MPMediaRemoteEntityArtworkGenerator> {
  /* instance variables */
  MPCFuture *_playbackStateFuture;
  MPCFuture *_supportedCommandsFuture;
  MPCFuture *_playbackQueueParticipantsFuture;
  MPCFuture *_playingItemIdentifierFuture;
  NSString *_playingItemIdentifier;
  MPCFuture *_queueIdentifierFuture;
  struct _MSVSignedRange { long long location; long long length; } _loadedContentItemsRange;
  struct _MSVSignedRange { long long location; long long length; } _requestedContentItemsRange;
  NSMutableArray *_contentItemIDs;
  MSVLRUDictionary *_contentItems;
  NSMutableDictionary *_optimisticStateContentItems;
  NSMutableDictionary *_contentItemChanges;
  MSVLRUDictionary *_contentItemArtwork;
  NSMutableDictionary *_contentItemArtworkIdentifiers;
  NSMapTable *_contentItemIDsFutures;
  NSMapTable *_contentItemFutures;
  NSMutableDictionary *_contentItemArtworkFutures;
  NSMutableDictionary *_contentItemRemoteArtworkFutures;
  unsigned long long _stateHandle;
  MPCMRArtworkDataSource *_mrArtworkDataSource;
  MPCMRRemoteArtworkDataSource *_mrRemoteArtworkDataSource;
}

@property (retain, nonatomic) MPCPlayerPath *resolvedPlayerPath;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *accessQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *calloutQueue;
@property (retain, nonatomic) id invalidationToken;
@property (readonly, nonatomic) long long playbackStateCacheState;
@property (readonly, nonatomic) MPCFuture *playbackState;
@property (readonly, nonatomic) long long supportedCommandsCacheState;
@property (readonly, nonatomic) MPCFuture *supportedCommands;
@property (readonly, nonatomic) long long playingIdentifierCacheState;
@property (readonly, nonatomic) MPCFuture *playingIdentifier;
@property (readonly, nonatomic) long long queueIdentifierCacheState;
@property (readonly, nonatomic) MPCFuture *queueIdentifier;
@property (readonly, nonatomic) long long playbackQueueParticipantsCacheState;
@property (readonly, nonatomic) MPCFuture *playbackQueueParticipants;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)mediaRemoteReplyQueue;
+ (id)controllerForPlayerPath:(id)path;
+ (void)sendCommand:(unsigned int)command options:(id)options toPlayerPath:(id)path completion:(id /* block */)completion;
+ (void)_sendCommand:(unsigned int)command options:(id)options appOptions:(unsigned int)options toPlayerPath:(id)path completion:(id /* block */)completion;
+ (void)_sendCommand:(unsigned int)command playbackIntent:(id)intent options:(id)options toPlayerPath:(id)path completion:(id /* block */)completion;
+ (BOOL)_shouldRegisterForNotifications;

/* instance methods */
- (id)_init;
- (void)dealloc;
- (id)remoteArtworkDataSource;
- (id)mediaRemoteArtworkDataSource;
- (void)sendCommand:(unsigned int)command options:(id)options completion:(id /* block */)completion;
- (long long)playQueueIdentifiersCacheStateForRange:(struct _MSVSignedRange { long long x0; long long x1; })range;
- (id)playQueueIdentifiersForRequest:(void *)request;
- (id)playQueueIdentifiersForRange:(struct _MSVSignedRange { long long x0; long long x1; })range;
- (long long)contentItemCacheStateForIdentifier:(id)identifier;
- (id)contentItemForIdentifier:(id)identifier;
- (long long)contentItemArtworkCacheStateForArtworkIdentifier:(id)identifier size:(struct CGSize { double x0; double x1; })size;
- (id)contentItemArtworkForContentItemIdentifier:(id)identifier artworkIdentifier:(id)identifier size:(struct CGSize { double x0; double x1; })size;
- (id)contentItemRemoteArtworkForContentItemIdentifier:(id)identifier artworkIdentifier:(id)identifier size:(struct CGSize { double x0; double x1; })size artworkFormat:(id)format;
- (void)_playbackQueueChangedNotification:(id)notification;
- (void)_playbackQueueContentItemsChangedNotification:(id)notification;
- (void)_playbackStateDidChangeNotification:(id)notification;
- (void)_supportedCommandsDidChangeNotification:(id)notification;
- (void)_contentItemArtworkChangedNotification:(id)notification;
- (void)_playbackQueueParticipantsDidChangeNotification:(id)notification;
- (void)dictionary:(id)dictionary willRemoveObject:(id)object forKey:(id)key;
- (void)invalidateAllTokens;
- (id /* block */)artworkCatalogBlockForContentItem:(id)item;
- (id /* block */)_artworkCatalogBlockForContentItem:(id)item;
- (id)_createExportableArtworkPropertiesForContentItem:(id)item;
- (id)_legacyCommands;
- (id)_onQueue_identifiersForRange:(struct _MSVSignedRange { long long x0; long long x1; })range;
- (void)_onQueue_mergeContentItems:(id)items queueRange:(struct _MSVSignedRange { long long x0; long long x1; })range requestRange:(struct _MSVSignedRange { long long x0; long long x1; })range;
- (void)_onQueue_mergeContentItems:(id)items;
- (void)_onQueue_purgeArtworkForContentItemIdentifier:(id)identifier artworkIdentifier:(id)identifier;
- (void)_onQueue_purgeArtworkForContentItemIdentifier:(id)identifier;
- (void)_onQueue_invalidateArtworkFuturesForContentItemID:(id)id;
- (id)_onQueue_stateDictionary;
- (id /* block */)_onQueue_updateOptimisticStateForCommand:(unsigned int)command options:(id)options;
- (id /* block */)_onQueue_setOptimisticElapsedTimeForContentItem:(id)item elapsedTime:(double)time rate:(float)rate;
- (id /* block */)_onQueue_setOptimisticPlaybackState:(unsigned int)state withOptions:(id)options;
- (id /* block */)_onQueue_setOptimisticPlayingItemIdentifier:(id)identifier;
- (void)_onQueue_setOptimisticReorderedPlaybackQueueWithMovingContentItemIdentifier:(id)identifier afterContentItemIdentifier:(id)identifier;
- (void)_onQueue_setOptimisticReorderedPlaybackQueueWithMovingContentItemIdentifier:(id)identifier beforeContentItemIdentifier:(id)identifier;
@end

#endif /* MPCMediaRemoteController_h */
