//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef _MPCMusicPlayerControllerServer_h
#define _MPCMusicPlayerControllerServer_h
@import Foundation;

#include "MPCPlaybackEngine.h"
#include "MPMusicPlayerControllerApplicationServer-Protocol.h"
#include "MPMusicPlayerControllerSystemServer-Protocol.h"
#include "NSXPCListenerDelegate-Protocol.h"
#include "_MPCPlaybackEngineEventObserving-Protocol.h"

@class MPMusicPlayerControllerSystemCache, MPMusicPlayerQueueDescriptor, NSMutableArray, NSString, NSUUID, NSXPCListener, NSXPCListenerEndpoint;

@interface _MPCMusicPlayerControllerServer : NSObject<MPMusicPlayerControllerSystemServer, MPMusicPlayerControllerApplicationServer, NSXPCListenerDelegate, _MPCPlaybackEngineEventObserving> {
  /* instance variables */
  MPMusicPlayerQueueDescriptor *_queueDescriptor;
  MPMusicPlayerQueueDescriptor *_preparingDescriptor;
  id /* block */ _prepareCompletionHandler;
  BOOL _skipWaitingForLikelyToKeepUp;
  BOOL _waitingForAdditionalPlaybackContexts;
  BOOL _resumed;
  NSUUID *_settingMultiplePlaybackContextsUUID;
}

@property (readonly, nonatomic) MPMusicPlayerControllerSystemCache *systemCache;
@property (readonly, nonatomic) NSXPCListener *listener;
@property (readonly, nonatomic) NSMutableArray *activeConnections;
@property (readonly, weak, nonatomic) MPCPlaybackEngine *playbackEngine;
@property (readonly, nonatomic) NSXPCListenerEndpoint *endpoint;
@property (readonly, nonatomic) BOOL running;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithPlaybackEngine:(id)engine;
- (BOOL)isRunning;
- (void)startServer;
- (void)resumeIfNeeded;
- (void)stopServer;
- (void)getNowPlayingWithReply:(id /* block */)reply;
- (void)getNowPlayingsForContentItemIDs:(id)ids reply:(id /* block */)reply;
- (id)_nowPlayingWithItem:(id)item;
- (void)getNowPlayingAtIndex:(long long)index reply:(id /* block */)reply;
- (void)setNowPlayingItem:(id)item itemIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)_onQueue_setNowPlayingItem:(id)item itemIdentifier:(id)identifier remoteCommandSenderID:(id)id completion:(id /* block */)completion;
- (void)setNowPlayingUID:(unsigned long long)uid completion:(id /* block */)completion;
- (void)getImageForArtworkIdentifier:(id)identifier itemIdentifier:(id)identifier atSize:(struct CGSize { double x0; double x1; })size reply:(id /* block */)reply;
- (id)_timeSnapshotWithElapsedTime:(double)time rate:(float)rate;
- (void)getTimeSnapshotWithReply:(id /* block */)reply;
- (void)setDescriptor:(id)descriptor completion:(id /* block */)completion;
- (void)getDescriptorWithReply:(id /* block */)reply;
- (void)prependDescriptor:(id)descriptor completion:(id /* block */)completion;
- (void)_prependPlaybackContexts:(id)contexts remoteCommandSenderID:(id)id completion:(id /* block */)completion;
- (void)appendDescriptor:(id)descriptor completion:(id /* block */)completion;
- (void)_appendPlaybackContexts:(id)contexts remoteCommandSenderID:(id)id completion:(id /* block */)completion;
- (void)play;
- (void)pauseWithFadeDuration:(long long)duration;
- (void)stop;
- (void)skipWithBehavior:(long long)behavior;
- (void)reshuffle;
- (void)beginSeekWithDirection:(long long)direction;
- (void)endSeek;
- (void)setRepeatMode:(long long)mode;
- (void)getRepeatModeWithReply:(id /* block */)reply;
- (void)setShuffleMode:(long long)mode;
- (void)getShuffleModeWithReply:(id /* block */)reply;
- (void)setElapsedTime:(double)time completion:(id /* block */)completion;
- (void)setPlaybackRate:(float)rate completion:(id /* block */)completion;
- (void)performQueueModifications:(id)modifications completion:(id /* block */)completion;
- (void)setRelativeVolume:(float)volume;
- (void)setDisableAutomaticCanBeNowPlaying:(BOOL)playing;
- (void)setDisableAutoPlay:(BOOL)play;
- (void)setDisableRepeat:(BOOL)repeat;
- (void)setDisableShuffle:(BOOL)shuffle;
- (void)engine:(id)engine didChangeToState:(unsigned long long)state;
- (void)engine:(id)engine didChangeQueueWithReason:(id)reason;
- (void)engine:(id)engine didChangeToItem:(id)item;
- (void)engine:(id)engine didAchieveLikelyToKeepUpWithItem:(id)item;
- (void)engine:(id)engine didResetQueueWithPlaybackContext:(id)context error:(id)error;
- (void)engine:(id)engine didChangeRepeatType:(long long)type;
- (void)engine:(id)engine didChangeShuffleType:(long long)type;
- (void)engine:(id)engine didReachEndOfQueueWithReason:(id)reason;
- (void)engine:(id)engine didEndPlaybackOfItem:(id)item;
- (void)engine:(id)engine didChangeItemElapsedTime:(double)time rate:(float)rate;
- (void)engine:(id)engine didChangeCurrentItemVariantID:(id)id;
- (BOOL)listener:(id)listener shouldAcceptNewConnection:(id)connection;
- (void)_handleCommandHandlersRegistered:(id)registered;
- (void)_registerForCommandHandlersRegisteredNotification;
- (void)_addContentItemIDsToUpdateRecord:(id)record;
- (void)_applyServerStateUpdateRecord:(id)record;
- (void)_invokeServerCommandEvent:(id)event remoteCommandSenderID:(id)id completion:(id /* block */)completion;
- (id)_remoteCommandSenderIDForCurrentXPCConnection;
- (void)_registerForMPAVItemTitlesDidChangeNotification;
- (void)_handleMPAVItemTitlesDidChange:(id)change;
@end

#endif /* _MPCMusicPlayerControllerServer_h */
