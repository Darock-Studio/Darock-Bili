//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef _MPCQueueControllerBehaviorMusicSharePlay_h
#define _MPCQueueControllerBehaviorMusicSharePlay_h
@import Foundation;

#include "AVPlayerPlaybackCoordinatorDelegate-Protocol.h"
#include "ICLiveLinkDelegate-Protocol.h"
#include "MPCModelGenericAVItemUserIdentityPropertySet.h"
#include "MPCPlaybackRequestEnvironment.h"
#include "MPCQueueControllerBehaviorExternalSyncImplementation-Protocol.h"
#include "MPCQueueControllerBehaviorHost-Protocol.h"
#include "MPCQueueControllerBehaviorMusicDelegate-Protocol.h"
#include "MPCQueueControllerBehaviorMusicSharePlay-Protocol.h"
#include "MPCQueueControllerBehaviorMusicSharePlayDelegate-Protocol.h"
#include "MPCQueueControllerBehaviorUpNextImplementation-Protocol.h"
#include "MPCQueueControllerExternalSyncBehaviorHost-Protocol.h"
#include "MPRequestResponseControllerDelegate-Protocol.h"

@class AVPlayerPlaybackCoordinator, ICLiveLink, ICSharedListeningQueue, MPPropertySet, MPRequestResponseController, NSArray, NSDictionary, NSMutableArray, NSMutableSet, NSString;

@interface _MPCQueueControllerBehaviorMusicSharePlay : NSObject<MPRequestResponseControllerDelegate, ICLiveLinkDelegate, AVPlayerPlaybackCoordinatorDelegate, MPCQueueControllerBehaviorMusicSharePlay, MPCQueueControllerBehaviorExternalSyncImplementation, MPCQueueControllerBehaviorUpNextImplementation> {
  /* instance variables */
  AVPlayerPlaybackCoordinator *_playbackCoordinator;
  id /* block */ _loadingCompletionHandler;
  unsigned short _activeItemFlags;
  MPCPlaybackRequestEnvironment *_playbackRequestEnvironment;
  BOOL _liveLinkStopped;
  BOOL _queueRanDry;
}

@property (retain, nonatomic) ICLiveLink *liveLink;
@property (retain, nonatomic) ICSharedListeningQueue *queue;
@property (retain, nonatomic) MPRequestResponseController *requestController;
@property (retain, nonatomic) MPCModelGenericAVItemUserIdentityPropertySet *identityPropertySet;
@property (retain, nonatomic) NSMutableArray *pendingActions;
@property (retain, nonatomic) NSMutableSet *knownContainerIDs;
@property (copy, nonatomic) NSDictionary *resultsIndexPathMap;
@property (copy, nonatomic) NSArray *enumeratorContentItemIDs;
@property (nonatomic) BOOL joiningAsInitiator;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) NSObject<MPCQueueControllerBehaviorMusicSharePlayDelegate> *musicSharePlayBehaviorDelegate;
@property (readonly, nonatomic) long long queueExplicitContentState;
@property (copy, nonatomic) MPPropertySet *requestedPropertySetForEvents;
@property (weak, nonatomic) NSObject<MPCQueueControllerBehaviorMusicDelegate> *musicBehaviorDelegate;
@property (readonly, nonatomic) long long repeatType;
@property (readonly, nonatomic) long long shuffleType;
@property (readonly, nonatomic) BOOL autoPlayEnabled;
@property (readonly, nonatomic) BOOL hasUserMutations;
@property (nonatomic) BOOL allowsQueueModifications;
@property (readonly, weak, nonatomic) NSObject<MPCQueueControllerExternalSyncBehaviorHost> *externalSyncHost;
@property (readonly, copy, nonatomic) NSString *sessionID;
@property (readonly, weak, nonatomic) NSObject<MPCQueueControllerBehaviorHost> *host;

/* class methods */
+ (BOOL)canLoadQueue:(id)queue reason:(id *)reason;

/* instance methods */
- (void)getExpectedCurrentItemModelObjectWithCompletion:(id /* block */)completion;
- (id)initWithSessionID:(id)id;
- (void)connectToHost:(id)host;
- (void)didConnectToHost:(id)host;
- (void)disconnectFromHost:(id)host;
- (id)performLoadCommand:(id)command completion:(id /* block */)completion;
- (void)activeItemFlagsDidChange:(unsigned short)change;
- (id)componentsForContentItemID:(id)id;
- (BOOL)itemExistsForContentItemID:(id)id;
- (BOOL)canJumpToContentItemID:(id)id reason:(id *)reason;
- (BOOL)canPreviousItemFromContentItemID:(id)id reason:(id *)reason;
- (BOOL)canNextItemFromContentItemID:(id)id reason:(id *)reason;
- (id)contentItemIDEnumeratorStartingAfterContentItemID:(id)id mode:(long long)mode options:(unsigned long long)options;
- (id)_stateDictionaryIncludingQueue:(BOOL)queue;
- (void)currentItemDidChangeFromContentItemID:(id)id toContentItemID:(id)id;
- (id)_itemForContentItemID:(id)id;
- (void)didReachEndOfQueueWithReason:(id)reason;
- (void)connectToExternalSyncHost:(id)host;
- (void)disconnectFromExternalSyncHost:(id)host;
- (void)didJumpToTargetContentItemID:(id)id;
- (BOOL)canUserChangeRepeatTypeWithReason:(id *)reason;
- (void)setRepeatType:(long long)type completion:(id /* block */)completion;
- (BOOL)canUserChangeShuffleModeWithReason:(id *)reason;
- (void)setShuffleType:(long long)type targetContentItemID:(id)id completion:(id /* block */)completion;
- (void)reshuffleWithTargetContentItemID:(id)id completion:(id /* block */)completion;
- (BOOL)canUserEnableAutoPlayWithReason:(id *)reason;
- (void)setAutoPlayEnabled:(BOOL)enabled targetContentItemID:(id)id completion:(id /* block */)completion;
- (BOOL)isAutoPlayContentItemID:(id)id;
- (void)getSharedQueueTracklistWithStartingContentItemID:(id)id completion:(id /* block */)completion;
- (void)findFirstContentItemIDForItemIntersectingIdentifierSet:(id)set completion:(id /* block */)completion;
- (void)setHostingSharedSessionID:(id)id reason:(id)reason;
- (id)contentItemIDWithoutRepeatIteration:(id)iteration;
- (id)copyContentItemID:(id)id repeatIteration:(long long)iteration;
- (void)endSynchronizedPlayback;
- (void)updatePlaybackCoordinator:(id)coordinator;
- (void)canReuseQueue:(id)queue completion:(id /* block */)completion;
- (BOOL)isSupportedInsertionPosition:(long long)position fromContentItemID:(id)id reason:(id *)reason;
- (void)performInsertCommand:(id)command targetContentItemID:(id)id completion:(id /* block */)completion;
- (void)moveContentItemID:(id)id beforeContentItemID:(id)id completion:(id /* block */)completion;
- (void)moveContentItemID:(id)id afterContentItemID:(id)id completion:(id /* block */)completion;
- (BOOL)canRemoveContentItemID:(id)id reason:(id *)reason;
- (void)removeContentItemID:(id)id completion:(id /* block */)completion;
- (void)clearAllItemsAfterContentItemID:(id)id;
- (long long)displayItemCount;
- (BOOL)controller:(id)controller shouldRetryFailedRequestWithError:(id)error;
- (void)controller:(id)controller defersResponseReplacement:(id /* block */)replacement;
- (id)playbackCoordinator:(id)coordinator identifierForPlayerItem:(id)item;
- (void)liveLinkDidReconnect:(id)reconnect;
- (void)didStopLiveLink:(id)link;
- (void)liveLink:(id)link didEncounterError:(id)error willRetry:(BOOL)retry;
- (void)liveLink:(id)link didUpdateParticipants:(id)participants;
- (void)liveLink:(id)link didUpdateQueue:(id)queue;
- (void)liveLink:(id)link didReceiveDirectCurrentItemChanged:(id)changed fromParticipant:(id)participant;
- (void)liveLink:(id)link didReceiveEvent:(id)event;
- (id)_componentsForContentItemID:(id)id;
- (id)_componentsForSharedListeningItemID:(id)id;
- (void)_dequeuePendingActions;
- (void)_emitEventsForAddedSharedListeningContainer:(id)container;
- (void)_emitEventsForParticipants:(id)participants localUserIdentity:(id)identity;
- (void)_emitEventsForPlaybackBehaviorChange;
- (void)_enqueuePendingActionWithLabel:(id)label itemIdentifier:(id)identifier block:(id /* block */)block;
- (void)_initializeWithQueue:(id)queue;
- (id)_itemObjectForSharedListeningItemID:(id)id;
- (id)_mpcSharedListeningEventForICLiveLinkEvent:(id)event;
- (void)_purgePendingActionsWithLabel:(id)label;
- (id)_queueAsStateDictionary;
- (void)_reloadCacheDataWithOptions:(unsigned long long)options;
- (id)_sectionedCollectionForQueue:(id)queue;
- (id)_sectionObjectForSharedListeningContainerID:(id)id;
- (void)_setQueue:(id)queue;
- (BOOL)_useItemPlaceholderForItemID:(id)id;
- (BOOL)_useItemPlaceholderForContentItemID:(id)id;
@end

#endif /* _MPCQueueControllerBehaviorMusicSharePlay_h */
