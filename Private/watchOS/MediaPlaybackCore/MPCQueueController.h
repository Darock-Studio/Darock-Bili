//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef MPCQueueController_h
#define MPCQueueController_h
@import Foundation;

#include "MPAVItemObserver-Protocol.h"
#include "MPCPlaybackEngineEventObserving-Protocol.h"
#include "MPCPlaybackEngineEventStream.h"
#include "MPCQueueControllerBehavior-Protocol.h"
#include "MPCQueueControllerBehaviorHost-Protocol.h"
#include "MPCQueueControllerBehaviorImplementation-Protocol.h"
#include "MPCQueueControllerBehaviorMusic-Protocol.h"
#include "MPCQueueControllerBehaviorMusicSharePlay-Protocol.h"
#include "MPCQueueControllerDelegate-Protocol.h"
#include "MPCQueueControllerExternalSyncBehaviorHost-Protocol.h"
#include "MPCQueueControllerPlaybackEngine-Protocol.h"
#include "MPCQueueControllerReusableBehavior-Protocol.h"
#include "MPCQueueControllerUpNextBehavior-Protocol.h"
#include "MSVSegmentedCoding-Protocol.h"

@class MPAVItem, NSArray, NSMapTable, NSMutableArray, NSMutableDictionary, NSString;

@interface MPCQueueController : NSObject<MPCPlaybackEngineEventObserving, MPCQueueControllerBehaviorHost, MPCQueueControllerExternalSyncBehaviorHost, MPAVItemObserver, MSVSegmentedCoding> {
  /* instance variables */
  long long _syncResetAttempts;
  unsigned long long _stateHandle;
  BOOL _loadingAdditionalItems;
  NSArray *_lastECATSStack;
}

@property (retain, nonatomic) NSMutableDictionary *coderVersions;
@property (copy, nonatomic) NSString *loadingContentItemID;
@property (retain, nonatomic) NSMapTable *activeEdits;
@property (retain, nonatomic) NSMutableArray *potentialCurrentItemEdits;
@property (copy, nonatomic) NSString *restoreLastStartTimePositionToContentItemID;
@property (readonly, nonatomic) double lastSavedTime;
@property (retain, nonatomic) NSObject<MPCQueueControllerBehaviorImplementation> *behaviorImpl;
@property (readonly, copy, nonatomic) NSString *revisionString;
@property (readonly, nonatomic) NSObject<MPCQueueControllerBehavior> *behavior;
@property (readonly, nonatomic) NSObject<MPCQueueControllerUpNextBehavior> *upNextBehavior;
@property (readonly, nonatomic) NSObject<MPCQueueControllerReusableBehavior> *reusableBehavior;
@property (readonly, nonatomic) NSObject<MPCQueueControllerBehaviorMusic> *music;
@property (readonly, nonatomic) NSObject<MPCQueueControllerBehaviorMusicSharePlay> *musicSharePlay;
@property (readonly, nonatomic) long long behaviorType;
@property (weak, nonatomic) NSObject<MPCQueueControllerPlaybackEngine> *playbackEngine;
@property (weak, nonatomic) NSObject<MPCQueueControllerDelegate> *delegate;
@property (readonly, nonatomic) BOOL containsRestorableContent;
@property (readonly, nonatomic) NSString *sessionID;
@property (readonly, copy, nonatomic) NSString *targetContentItemID;
@property (readonly, nonatomic) long long targetContentItemSource;
@property (readonly, nonatomic) MPAVItem *currentItem;
@property (readonly, copy, nonatomic) NSString *preferredFirstContentItemID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSString *engineID;
@property (readonly, nonatomic) NSString *playerID;
@property (readonly, nonatomic) MPCPlaybackEngineEventStream *eventStream;

/* class methods */
+ (id)describePlayer:(id)player;
+ (Class)testBehaviorClass;
+ (void)setTestBehaviorClass:(Class)class;
+ (long long)behaviorForQueue:(id)queue;
+ (void)registerPublisher:(id)publisher;
+ (void)unregisterPublisher:(id)publisher;
+ (id)allKnownSessionTypes;
+ (BOOL)isSupportedSessionType:(id)type forEngine:(id)engine reason:(id *)reason;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)init;
- (id)initWithBehaviorType:(long long)type sessionID:(id)id;
- (void)dealloc;
- (BOOL)isExportableSessionType:(id)type forContentItemID:(id)id reason:(id *)reason;
- (void)willConnectToPlaybackEngine:(id)engine;
- (void)willDisconnectFromPlaybackEngine:(id)engine;
- (void)didConnectToPlaybackEngine:(id)engine;
- (void)didDisconnectFromPlaybackEngine:(id)engine;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)segmentForCodingKey:(id)key;
- (void)didRestoreVersion:(long long)version forSegment:(id)segment;
- (long long)versionForSegment:(id)segment;
- (void)incrementVersionForSegment:(id)segment;
- (BOOL)canPreviousTrackForContentItemID:(id)id reason:(id *)reason;
- (BOOL)canNextTrackForContentItemID:(id)id reason:(id *)reason;
- (id)contentItemIDAtIndex:(long long)index;
- (id)contentItemIDWithCurrentItemOffset:(long long)offset mode:(long long)mode didReachEnd:(BOOL *)end;
- (id)contentItemIDsFromOffset:(long long)offset toOffset:(long long)offset mode:(long long)mode nowPlayingIndex:(long long *)index;
- (void)enumerateContentItemIDsInMode:(long long)mode block:(id /* block */)block;
- (void)performSetQueue:(id)queue loadingItemReady:(id /* block */)ready completion:(id /* block */)completion;
- (void)finalizeStateRestorationWithLoadingItemReady:(id /* block */)ready completion:(id /* block */)completion;
- (id)itemForContentItemID:(id)id;
- (BOOL)canJumpToContentItemID:(id)id reason:(id *)reason;
- (void)_setTargetContentItemID:(id)id source:(long long)source;
- (void)jumpToContentItemID:(id)id direction:(long long)direction;
- (void)jumpToContentItemID:(id)id;
- (void)jumpToFirstContentItemWithSource:(long long)source;
- (void)_withDynamicBehavior:(id /* block */)behavior;
- (void)_withExternalSyncBehavior:(id /* block */)behavior;
- (BOOL)_withRestorableBehavior:(id /* block */)behavior;
- (BOOL)_withTransportableBehavior:(id /* block */)behavior;
- (void)_withUpNextBehavior:(id /* block */)behavior;
- (id)beginEditWithReason:(id)reason;
- (void)behaviorDidChange;
- (id)beginExternalSyncEditWithReason:(id)reason;
- (void)engine:(id)engine didReachEndOfQueueWithReason:(id)reason;
- (void)engine:(id)engine didChangeToState:(unsigned long long)state;
- (void)engine:(id)engine didChangeItemElapsedTime:(double)time rate:(float)rate;
- (id)itemForContentItemID:(id)id allowReuse:(BOOL)reuse;
- (void)playerItemDidResignCurrent:(id)current;
- (BOOL)_playerItemDidBecomeActiveWithContentItemID:(id)id;
- (void)playerItemDidBecomeCurrent:(id)current;
- (long long)displayItemCount;
- (long long)displayIndexForContentItemID:(id)id;
- (void)didSignificantlyChangeItem:(id)item;
- (void)_evaluateCurrentItemWithEdit:(id)edit;
- (void)_commitEdit:(id)edit;
- (void)_rollbackEdit:(id)edit;
- (id)_contentItemIDWithOffset:(long long)offset fromItemID:(id)id mode:(long long)mode didReachEnd:(BOOL *)end;
- (void)_evaluateContextAwareTriggersWithReason:(id)reason;
- (void)_currentItemDidChangeFromItem:(id)item toItem:(id)item;
- (void)_emitEventsForItemChangeFromItem:(id)item toCurrentItem:(id)item;
- (id)_itemForContentItemID:(id)id allowReuse:(BOOL)reuse;
- (void)_updateQueueIndexForItemIfNeeded:(id)needed;
- (void)performAllowingEditsToChangeCurrentItem:(id /* block */)item;
- (id)_stateDictionaryIncludingQueue:(BOOL)queue;
@end

#endif /* MPCQueueController_h */
