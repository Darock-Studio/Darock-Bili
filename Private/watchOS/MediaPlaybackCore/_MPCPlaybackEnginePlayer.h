//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef _MPCPlaybackEnginePlayer_h
#define _MPCPlaybackEnginePlayer_h
@import Foundation;

#include "MFAssetLoading-Protocol.h"
#include "MFPlaybackStackControllerDelegate-Protocol.h"
#include "MPCAVItemTrace.h"
#include "MPCAssetLoaderDelegate-Protocol.h"
#include "MPCExternalPlaybackController.h"
#include "MPCItemBookmarker.h"
#include "MPCLeaseController.h"
#include "MPCMediaFoundationTranslator.h"
#include "MPCPlaybackEngine.h"
#include "MPCPlaybackEngineEventObserving-Protocol.h"
#include "MPCPlaybackEngineEventStreamDeferralAssertion-Protocol.h"
#include "MPCPlaybackErrorController.h"
#include "MPCPlayerItemConfigurator.h"
#include "_MPCAudioSessionController.h"

@class AVPlayerViewController, MPAVItem, NSDictionary, NSNumber, NSString;
@protocol MFPlaybackStackController><MFQueueManagement;

@interface _MPCPlaybackEnginePlayer : NSObject<MFPlaybackStackControllerDelegate, MPCAssetLoaderDelegate, MPCPlaybackEngineEventObserving>

@property (retain, nonatomic) NSObject<MFPlaybackStackController><MFQueueManagement> *playbackStackController;
@property (retain, nonatomic) MPCItemBookmarker *bookmarker;
@property (retain, nonatomic) MPCMediaFoundationTranslator *translator;
@property (retain, nonatomic) MPCPlaybackErrorController *errorController;
@property (retain, nonatomic) MPCExternalPlaybackController *externalPlaybackController;
@property (retain, nonatomic) NSObject<MFAssetLoading> *assetLoader;
@property (retain, nonatomic) MPCLeaseController *leaseController;
@property (retain, nonatomic) MPCPlayerItemConfigurator *configurator;
@property (nonatomic) unsigned long long stateHandle;
@property (retain, nonatomic) MPCAVItemTrace *playbackStartTrace;
@property (retain, nonatomic) _MPCAudioSessionController *transientAudioSessionController;
@property (retain, nonatomic) NSObject<MPCPlaybackEngineEventStreamDeferralAssertion> *evsDeferralAssertionForFirstAudioFrame;
@property (nonatomic) long long jumpIdentifier;
@property (copy, nonatomic) NSNumber *currentRelativeVolume;
@property (nonatomic) BOOL lastReportedVocalAttenuationEnabledState;
@property (readonly, weak, nonatomic) MPCPlaybackEngine *playbackEngine;
@property (readonly, nonatomic) double currentTime;
@property (readonly, nonatomic) float currentRate;
@property (readonly, nonatomic) long long state;
@property (readonly, nonatomic) long long stateBeforeInterruption;
@property (readonly, nonatomic) BOOL hasPlayedSuccessfully;
@property (nonatomic) BOOL autoPlayWhenLikelyToKeepUp;
@property (readonly, nonatomic) AVPlayerViewController *playerViewController;
@property (readonly, nonatomic) NSDictionary *_stateDictionary;
@property (readonly, nonatomic) MPAVItem *currentItem;
@property (readonly, nonatomic) BOOL reloadingPlaybackContext;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)describePlayer:(id)player;

/* instance methods */
- (id)initWithPlaybackEngine:(id)engine;
- (void)dealloc;
- (void)prewarm;
- (void)setupPlaybackStackIfNeeded;
- (void)reloadItemsKeepingCurrentItem:(BOOL)item allowReuse:(BOOL)reuse;
- (void)finalizeSetQueue:(id)queue completion:(id /* block */)completion;
- (void)finalizeStateRestoreWithCompletion:(id /* block */)completion;
- (void)becomeActiveWithCompletion:(id /* block */)completion;
- (void)deactivateAudioSessionIfIdle:(long long)idle;
- (void)updateAudioSessionSpeechDetection;
- (void)updateAudioSession;
- (void)playWithRate:(float)rate identifier:(id)identifier completion:(id /* block */)completion;
- (void)pauseWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)pauseWithFadeout:(double)fadeout identifier:(id)identifier completion:(id /* block */)completion;
- (void)pauseForLeasePreventionWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)togglePlaybackWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)endScanningWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)setRate:(float)rate identifier:(id)identifier completion:(id /* block */)completion;
- (void)jumpToTime:(double)time identifier:(id)identifier completion:(id /* block */)completion;
- (void)setRelativeVolume:(float)volume;
- (void)_setupPlaybackStackWithPlaybackEngine:(id)engine;
- (void)_logTimeJumpForItem:(id)item fromTime:(double)time toTime:(double)time userInitiated:(BOOL)initiated timeStamp:(id)stamp;
- (id)_MPAVItemForMFQueuePlayerItem:(id)item;
- (void)_playbackDidStopForItem:(id)item source:(id)source reason:(id)reason time:(double)time;
- (BOOL)_isAVKitSkipAction:(id)action;
- (void)_performSkipForUserAction:(id)action;
- (BOOL)_itemConfigurationIsIncompatibleWithVocalAttenuationState:(id)state;
- (void)engine:(id)engine willRemoveQueueController:(id)controller;
- (void)engine:(id)engine didChangeQueueController:(id)controller;
- (void)engine:(id)engine didChangeQueueWithReason:(id)reason;
- (void)currentItemWillChangeFromItem:(id)item toItem:(id)item source:(long long)source timeStamp:(id)stamp;
- (void)itemDidBecomeCurrent:(id)current source:(long long)source timeStamp:(id)stamp;
- (void)itemDidResignCurrent:(id)current source:(long long)source timeStamp:(id)stamp;
- (void)itemTransitionWillBeginFrom:(id)from to:(id)to type:(long long)type duration:(double)duration timeStamp:(id)stamp;
- (void)itemTransitionDidEndFrom:(id)from to:(id)to type:(long long)type duration:(double)duration timeStamp:(id)stamp;
- (void)playbackDidReachQueueEndWithTimeStamp:(id)stamp;
- (void)playbackTimeDidChangeTo:(double)to forItem:(id)item reason:(long long)reason timeStamp:(id)stamp;
- (void)userSeekCompletedForItem:(id)item fromTime:(double)time toTime:(double)time timeStamp:(id)stamp;
- (void)itemDidFailToLoad:(id)load silently:(BOOL)silently error:(id)error timeStamp:(id)stamp;
- (void)itemDidFailToPlayToEnd:(id)end error:(id)error timeStamp:(id)stamp;
- (void)itemDidPlayToEnd:(id)end timeStamp:(id)stamp;
- (void)itemIsReadyToPlay:(id)play timeStamp:(id)stamp;
- (void)_updateActiveFormatForQueueItem:(id)item;
- (void)_logPlayerEventsForQueueItem:(id)item;
- (double)_adjustPlayerTimeForAudioTapProcessing:(double)processing;
- (void)playbackDidStartForItem:(id)item rate:(float)rate fromStalling:(BOOL)stalling timeStamp:(id)stamp;
- (void)playbackDidStopForItem:(id)item source:(id)source reason:(id)reason timeStamp:(id)stamp;
- (void)playbackRateDidChangeToRate:(float)rate forItem:(id)item timeStamp:(id)stamp;
- (void)playbackRateDidChangeNotifiedForItem:(id)item newRate:(float)rate reason:(id)reason participantIdentifier:(id)identifier timeStamp:(id)stamp;
- (void)firstFrameWillRenderForItem:(id)item timeStamp:(id)stamp;
- (void)timeControlStatusDidChange:(long long)change waitingReason:(id)reason timeStamp:(id)stamp;
- (void)playbackWaitingToPlayForItem:(id)item reason:(id)reason timeStamp:(id)stamp;
- (void)routeDidChange:(BOOL)change metadata:(id)metadata timeStamp:(id)stamp;
- (void)stateDidChangeFromState:(long long)state toState:(long long)state timeStamp:(id)stamp;
- (void)interruptionDidBeginWithInterruptor:(id)interruptor timeStamp:(id)stamp;
- (void)interruptionDidFinishForInterruptor:(id)interruptor shouldResume:(BOOL)resume timeStamp:(id)stamp;
- (void)playbackBufferStateDidChangeToState:(long long)state forItem:(id)item timeStamp:(id)stamp;
- (void)playbackIsLikelyToKeepUp:(BOOL)up forItem:(id)item timeStamp:(id)stamp;
- (void)tracksDidChangeForItem:(id)item timeStamp:(id)stamp;
- (void)screenRecordingDidChange:(BOOL)change timeStamp:(id)stamp;
- (void)didReachEndOfQueueWithReason:(id)reason;
- (void)userActionDidBegin:(id)begin;
- (void)userActionDidEnd:(id)end error:(id)error;
- (void)mediaServicesInterruptionDidBeginWithItemAtDeath:(id)death timeAtDeath:(double)death timeStamp:(id)stamp;
- (void)mediaServicesInterruptionDidEndWithTimeStamp:(id)stamp;
- (void)playbackIsBlockedOnNonPlayableItem:(id)item;
- (void)firstVideoFrameWasRenderedForItem:(id)item timeStamp:(id)stamp;
- (void)relativeVolumeDidChangeTo:(float)to timeStamp:(id)stamp;
- (void)didReportSignpostWithType:(long long)type;
- (void)errorResolutionDidStartForItem:(id)item error:(id)error;
- (void)errorResolutionDidEndForItem:(id)item error:(id)error resolution:(long long)resolution;
- (void)stackControllerDidCreateTransitionFrom:(id)from to:(id)to type:(long long)type parameters:(id)parameters;
- (void)willPerformPlayerOperationWithPlayerIdentifier:(id)identifier operation:(id)operation reason:(id)reason;
- (void)didPerformPlayerOperationWithPlayerIdentifier:(id)identifier items:(id)items operation:(id)operation;
- (void)itemIsReadyForMetrics:(id)metrics accessLog:(id)log;
- (void)renderingModeDidChange:(long long)change timeStamp:(id)stamp;
- (void)assetLoadingDidCompleteForItem:(id)item error:(id)error;
- (void)assetLoadingDidStartForItem:(id)item;
- (void)takeEVSDeferralAssertionForFirstAudioFrame;
- (void)invalidateEVSDeferralAssertionForFirstAudioFrame;
- (void)donateMetricsToPlayerItem:(id)item;
- (BOOL)isReloadingPlaybackContext;
@end

#endif /* _MPCPlaybackEnginePlayer_h */
