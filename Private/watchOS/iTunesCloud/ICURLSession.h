//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.5.0.0
//
#ifndef ICURLSession_h
#define ICURLSession_h
@import Foundation;

#include "NSURLSessionDataDelegate-Protocol.h"
#include "NSURLSessionDelegate-Protocol.h"
#include "NSURLSessionDownloadDelegate-Protocol.h"

@class NSMutableDictionary, NSMutableOrderedSet, NSMutableSet, NSString, NSURLSession;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface ICURLSession : NSObject<NSURLSessionDelegate, NSURLSessionDownloadDelegate, NSURLSessionDataDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_accessQueue;
  NSObject<OS_dispatch_queue> *_operationQueue;
  NSObject<OS_dispatch_queue> *_utilityQueue;
  unsigned long long _pendingRequestsProcessingCounter;
  NSMutableOrderedSet *_pendingRequests;
  NSMutableSet *_activeRequests;
  NSMutableDictionary *_completionHandlers;
  BOOL _paused;
  NSObject<OS_dispatch_source> *_requestTimeoutTimer;
  NSURLSession *_urlSession;
}

@property (readonly, nonatomic) unsigned long long maxConcurrentRequests;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (unsigned long long)defaultMaximumConcurrentRequests;
+ (void)_sendLoadUrlMetricsToCoreAnalytics:(id)analytics;
+ (id)_sanitizeURLString:(id)urlstring;
+ (id)_amsMetricsForRequestContext:(id)context;

/* instance methods */
- (id)init;
- (id)initWithConfiguration:(id)configuration;
- (id)initWithConfiguration:(id)configuration maxConcurrentRequests:(unsigned long long)requests;
- (id)initWithConfiguration:(id)configuration maxConcurrentRequests:(unsigned long long)requests qualityOfService:(long long)service;
- (void)dealloc;
- (void)enqueueDataRequest:(id)request withCompletionHandler:(id /* block */)handler;
- (void)enqueueUploadRequest:(id)request withCompletionHandler:(id /* block */)handler;
- (void)enqueueDownloadRequest:(id)request withCompletionHandler:(id /* block */)handler;
- (void)enqueueDownloadRequest:(id)request toDestination:(id)destination withCompletionHandler:(id /* block */)handler;
- (void)pauseRequest:(id)request;
- (void)resumeRequest:(id)request;
- (void)cancelRequest:(id)request;
- (void)cancelRequest:(id)request withError:(id)error;
- (void)cancelPendingRequestsWithError:(id)error;
- (void)pause;
- (void)resume;
- (void)URLSession:(id)urlsession task:(id)task didCompleteWithError:(id)error;
- (void)URLSession:(id)urlsession task:(id)task willPerformHTTPRedirection:(id)httpredirection newRequest:(id)request completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveData:(id)data;
- (void)URLSession:(id)urlsession downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
- (void)URLSession:(id)urlsession avAssetDownloadTask:(id)task didReceiveAVAssetDownloadToken:(unsigned long long)token;
- (void)URLSession:(id)urlsession avAssetDownloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
- (void)URLSession:(id)urlsession downloadTask:(id)task didFinishDownloadingToURL:(id)url;
- (void)URLSession:(id)urlsession task:(id)task didFinishCollectingMetrics:(id)metrics;
- (void)_enqueueRequest:(id)request;
- (void)_processPendingRequests;
- (void)_processRequest:(id)request;
- (void)_finishRequest:(id)request;
- (id)_requestForTask:(id)task;
- (id)_createURLSessionWithConfiguration:(id)configuration;
- (id)_createURLSessionTaskForRequest:(id)request usingSession:(id)session;
- (id)_newResponseForRequest:(id)request;
- (void)_checkRequestTimeouts;
- (void)_scheduleNextRequestTimeoutCheck;
- (double)_timeoutForRequest:(id)request;
- (void)_updateProgressForSessionTask:(id)task withTotalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
- (void)_reportLoadURLMetricsWithSession:(id)session task:(id)task signatureName:(id)name requestContext:(id)context responseData:(id)data error:(id)error;
@end

#endif /* ICURLSession_h */
