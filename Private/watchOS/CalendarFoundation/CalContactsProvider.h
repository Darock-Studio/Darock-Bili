//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1547.1.1.3.0
//
#ifndef CalContactsProvider_h
#define CalContactsProvider_h
@import Foundation;

#include "CalContactsProviderProtocol-Protocol.h"

@class CNContact, CNContactStore, CNReputationStore, NSArray, NSMutableSet, NSString;
@protocol OS_dispatch_queue;

@interface CalContactsProvider : NSObject<CalContactsProviderProtocol>

@property (retain) CNContactStore *store;
@property (retain) CNReputationStore *reputationStore;
@property (retain) NSObject<OS_dispatch_queue> *syncQueue;
@property (retain) NSObject<OS_dispatch_queue> *contactStoreWorkQueue;
@property (retain) CNContact *meContact;
@property (retain) NSString *testMeContactIdentifer;
@property (retain) NSMutableSet *delegates;
@property (retain) NSArray *unitTestEmails;
@property (retain) NSArray *loadedMyEmailAddresses;

/* class methods */
+ (id)defaultProvider;
+ (id)reputationForHandle:(id)handle inStore:(id)store;
+ (BOOL)shouldPermitOrganizerEmailFromJunkChecks:(id)checks inReputationStore:(id)store;
+ (BOOL)shouldPermitOrganizerPhoneNumberFromJunkChecks:(id)checks inReputationStore:(id)store;
+ (BOOL)birthdayIsYearless:(id)yearless;
+ (BOOL)isCalendarIslamic:(id)islamic;
+ (id)birthdayStringForContactName:(id)name eventDate:(id)date birthDate:(id)date lunarCalendar:(id)calendar;

/* instance methods */
- (id)init;
- (id)initWithStore:(id)store;
- (void)registerForContactChangeNotifications:(id)notifications;
- (void)deregisterForContactChangeNotifications:(id)notifications;
- (BOOL)contactAccessResolved;
- (void)setMeCardEmailsForUnitTesting:(id)testing;
- (id)nullableContactStore;
- (id)contactStore;
- (void)contactsChanged:(id)changed;
- (void)meCardChanged:(id)changed;
- (void)_syncContacts;
- (id)_lastHistoryToken;
- (void)_setLastHistoryToken:(id)token;
- (id)_meWithKeys:(id)keys;
- (id)_fetchedUnifiedMeContact;
- (void)setTestMeContactIdentifier:(id)identifier;
- (id)unifiedMeContact;
- (id)unifiedContactsMatchingPredicate:(id)predicate keysToFetch:(id)fetch;
- (id)unifiedContactsForHandleStrings:(id)strings keysToFetch:(id)fetch;
- (id)unifiedContactsDictionaryForHandleStrings:(id)strings keysToFetch:(id)fetch;
- (id)unifiedContactWithEmailAddress:(id)address;
- (id)unifiedContactWithPhoneNumber:(id)number;
- (id)unifiedContactWithName:(id)name;
- (id)unifiedContactWithIdentifier:(id)identifier keysToFetch:(id)fetch;
- (id)unifiedContactWithIdentifier:(id)identifier;
- (id)unifiedContactMatchingString:(id)string keysToFetch:(id)fetch matchType:(long long *)type;
- (id)unifiedContactMatchingName:(id)name email:(id)email url:(id)url keysToFetch:(id)fetch;
- (id)contactsFromContactIdentifiers:(id)identifiers withKeys:(id)keys;
- (id)fullNameForFirstContactMatchingEmailAddress:(id)address;
- (id)fullNameForFirstContactMatchingPhoneNumber:(id)number;
- (id)_fullNameForFirstContactMatchingPredicate:(id)predicate;
- (id)myAvatarEncodedString;
- (void)donateEncodedLikenessString:(id)string forEmailAddress:(id)address;
- (BOOL)contactIdentifierIsMe:(id)me;
- (id)myShortDisplayName;
- (id)myNameWithStyle:(long long)style;
- (id)myFullName;
- (id)myHomeAddress;
- (id)myWorkAddress;
- (id)myAddressForLabel:(id)label;
- (id)myEmailAddress;
- (id)cachedEmailAddressArray;
- (id)cachedEmailAddress;
- (id)myEmailAddresses;
- (id)cachedEmailAddresses;
- (BOOL)matchesOneOfMyEmails:(id)emails;
- (BOOL)urlMatchesOneOfMyEmails:(id)emails;
- (id)myPhoneNumbers;
- (BOOL)matchesOneOfMyPhoneNumbers:(id)numbers;
- (BOOL)shouldPermitOrganizerEmailFromJunkChecks:(id)checks;
- (BOOL)shouldPermitOrganizerPhoneNumberFromJunkChecks:(id)checks;
@end

#endif /* CalContactsProvider_h */
