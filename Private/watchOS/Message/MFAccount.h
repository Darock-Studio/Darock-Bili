//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef MFAccount_h
#define MFAccount_h
@import Foundation;

#include "ECAuthenticatableAccount-Protocol.h"
#include "EDAccount-Protocol.h"
#include "EFPubliclyDescribable-Protocol.h"

@class ACAccount, ECAccount, ECAuthenticationScheme, EFLocked, NSArray, NSDictionary, NSMutableDictionary, NSString;

@interface MFAccount : NSObject<EDAccount, ECAuthenticatableAccount, EFPubliclyDescribable> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _persistentAccountLock;
  NSMutableDictionary *_unsavedAccountProperties;
  NSString *_cachedPrivacySafeDescription;
  NSString *_cachedDescription;
}

@property (readonly, nonatomic) EFLocked *currentConnections;
@property (readonly) ACAccount *accountForRenewingCredentials;
@property (readonly) ACAccount *persistentAccount;
@property (readonly) ACAccount *parentAccount;
@property (readonly) NSString *parentAccountIdentifier;
@property (readonly, nonatomic) ECAccount *baseAccount;
@property (readonly, nonatomic) BOOL managed;
@property (readonly) NSDictionary *properties;
@property (readonly) NSString *uniqueID;
@property (readonly, copy) NSString *identifier;
@property (readonly) NSString *syncStoreIdentifier;
@property (readonly) NSString *type;
@property (readonly) NSString *personaIdentifier;
@property (copy, nonatomic) NSString *username;
@property (readonly) NSString *managedTag;
@property (readonly, nonatomic) BOOL connectionsAreConstrained;
@property (copy, nonatomic) NSString *password;
@property (readonly, retain, nonatomic) NSString *oauth2Token;
@property (copy, nonatomic) NSString *sourceApplicationBundleIdentifier;
@property (nonatomic) unsigned int portNumber;
@property (nonatomic) BOOL usesSSL;
@property BOOL allowsTrustPrompt;
@property (retain, nonatomic) NSString *domain;
@property (retain, nonatomic) ECAuthenticationScheme *preferredAuthScheme;
@property (readonly, copy, nonatomic) NSString *altDSID;
@property (readonly, nonatomic) ACAccount *systemAccount;
@property (readonly, copy, nonatomic) NSString *statisticsKind;
@property (readonly, nonatomic) BOOL primaryiCloudAccount;
@property (readonly, nonatomic) BOOL isActive;
@property (copy, nonatomic) NSString *displayName;
@property (readonly, copy, nonatomic) NSArray *emailAddressStrings;
@property (copy, nonatomic) NSString *hostname;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSString *ef_publicDescription;

/* class methods */
+ (void)setShouldHealAccounts:(BOOL)accounts;
+ (BOOL)shouldHealAccounts;
+ (id)newAccountWithDictionary:(id)dictionary;
+ (id)excludedAccountPropertyKeys;
+ (id)accountWithProperties:(id)properties;
+ (id)authSchemesForAccountClass;
+ (id)accountWithPersistentAccount:(id)account;
+ (id)_newPersistentAccount;
+ (id)_accountClass;
+ (id)accountTypeIdentifier;
+ (id)releaseAllConnectionsScheduler;
+ (id)existingAccountForUniqueID:(id)id;
+ (BOOL)isPredefinedAccountType;
+ (id)predefinedValueForKey:(id)key;
+ (id)propertiesWhichRequireValidation;
+ (id)_basicPropertyForKey:(id)key persistentAccount:(id)account;
+ (BOOL)_setBasicProperty:(id)property forKey:(id)key persistentAccount:(id)account;
+ (id)accountTypeString;
+ (id)displayedAccountTypeString;
+ (id)displayedShortAccountTypeString;
+ (void *)legacyKeychainProtocol;
+ (id)accountPropertiesValueForKey:(id)key value:(id)value;
+ (id)hostname;
+ (BOOL)accountIsManaged:(id)managed;
+ (BOOL)accountSourceIsManaged:(id)managed;
+ (BOOL)accountIsPreventedFromSendingFromExternalProcesses:(id)processes;
+ (BOOL)accountIsRestrictedFromTransfersToOtherAccounts:(id)accounts;
+ (BOOL)accountRestrictsRecentsSyncing:(id)syncing;
+ (unsigned int)defaultPortNumber;
+ (unsigned int)defaultSecurePortNumber;
+ (BOOL)isCommonPortNumber:(unsigned int)number;
+ (BOOL)usesSSL;
+ (BOOL)isSSLEditable;
+ (id)saslProfileName;
+ (id)supportedDataclasses;

/* instance methods */
- (BOOL)shouldFetchACEDBInfoForError:(id)error;
- (id)init;
- (id)initWithProperties:(id)properties;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)initWithPersistentAccount:(id)account;
- (BOOL)isEqual:(id)equal;
- (void)persistentAccountDidChange:(id)change previousAccount:(id)account;
- (void)savePersistentAccount;
- (void)removePersistentAccount;
- (id)accountClass;
- (id)_privacySafeDescription;
- (id)accountPropertyForKey:(id)key;
- (void)setAccountProperty:(id)property forKey:(id)key;
- (void)removeAccountPropertyForKey:(id)key;
- (void)_queueAccountInfoDidChange;
- (void)_setAccountProperties:(id)properties;
- (void)setValueInAccountProperties:(id)properties forKey:(id)key;
- (void)removeValueInAccountPropertiesForKey:(id)key;
- (id)valueInAccountPropertiesForKey:(id)key;
- (id)_objectForAccountInfoKey:(id)key;
- (BOOL)_boolForAccountInfoKey:(id)key defaultValue:(BOOL)value;
- (void)setActive:(BOOL)active;
- (BOOL)canGoOffline;
- (BOOL)isManaged;
- (BOOL)supportsMailDrop;
- (id)_credential;
- (id)_credentialCreateIfNecessary:(BOOL)necessary;
- (id)_credentialCreateIfNecessary:(BOOL)necessary error:(id *)error;
- (id)_password;
- (id)_passwordWithError:(id *)error;
- (unsigned long long)credentialAccessibility;
- (void)setOAuth2Token:(id)token refreshToken:(id)token;
- (BOOL)_renewCredentialsWithOptions:(id)options completion:(id /* block */)completion;
- (BOOL)renewCredentialsWithOptions:(id)options completion:(id /* block */)completion;
- (BOOL)promptUserForWebLoginWithURL:(id)url shouldConfirm:(BOOL)confirm completionHandler:(id /* block */)handler;
- (BOOL)fetchTokensIfNecessary:(id *)necessary;
- (BOOL)canAuthenticateWithCurrentCredentials;
- (BOOL)hasPasswordCredential;
- (unsigned int)defaultPortNumber;
- (unsigned int)defaultSecurePortNumber;
- (id)serviceName;
- (id)secureServiceName;
- (struct __CFString *)connectionServiceType;
- (void)releaseAllConnections;
- (void)releaseAllForcedConnections;
- (void)setTryDirectSSL:(BOOL)ssl;
- (id)clientCertificates;
- (void)setClientCertificates:(id)certificates;
- (void)accountInfoDidChange;
- (id)_newConnection;
- (Class)connectionClass;
- (BOOL)requiresAuthentication;
- (id)authenticatedConnection;
- (id)certUIService;
- (id)defaultConnectionSettings;
- (void)applySettingsAsDefault:(id)default;
- (id)alternateConnectionSettings;
- (id)insecureConnectionSettings;
- (id)secureConnectionSettings;
- (BOOL)_shouldTryDirectSSLConnectionOnPort:(unsigned int)port;
- (id)customDescriptionForError:(id)error authScheme:(id)scheme defaultDescription:(id)description;
- (void)reportAuthenticationError:(id)error authScheme:(id)scheme;
- (BOOL)_connectAndAuthenticate:(id)authenticate;
- (id)networkAccountIdentifier;
- (id)nameForMailboxUid:(id)uid;
- (BOOL)shouldEnableAfterError:(id)error;
- (BOOL)enableAccount;
- (BOOL)shouldDisplayHostnameInErrorMessages;
- (id)missingPasswordErrorWithTitle:(id)title;
- (id)inaccessiblePasswordErrorWithTitle:(id)title;
- (id)loginDisabledErrorWithTitle:(id)title;
- (id)enabledDataclasses;
- (BOOL)isEnabledForDataclass:(id)dataclass;
- (BOOL)isSyncingNotes;
- (id)copyDiagnosticInformation;
- (void)setMissingPasswordError;
@end

#endif /* MFAccount_h */
