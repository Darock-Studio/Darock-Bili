//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef MFMailMessageLibrary_h
#define MFMailMessageLibrary_h
@import Foundation;

#include "EDMessageChangeHookResponder-Protocol.h"
#include "EDProtectedDataReconciliationHookResponder-Protocol.h"
#include "EFCancelable-Protocol.h"
#include "EFContentProtectionObserver-Protocol.h"
#include "EFLoggable-Protocol.h"
#include "EFScheduler-Protocol.h"
#include "EFSignpostable-Protocol.h"
#include "MFAttachmentLibraryDataProvider.h"
#include "MFMailMessageLibrarySwiftPropertiesProtocol-Protocol.h"
#include "MFMessageAttachmentMigrator.h"
#include "MFMessageBodyMigrator.h"
#include "MFMessageChangeManager_iOS.h"
#include "MFPersistenceDatabase_iOS.h"
#include "MFWeakObjectCache.h"

@class BOOL *, EDMessageQueryParser, EDPersistence, EDPersistenceHookRegistry, EDSearchableIndexScheduler, EDWebContentParser, EFObservable, MFLibrarySearchableIndex, NSCache, NSConditionLock, NSMutableDictionary, NSMutableSet, NSString;
@protocol EFObservable<EFObserver, EFSQLValueExpressable, OS_dispatch_queue;

@interface MFMailMessageLibrary : NSObject<EDMessageChangeHookResponder, EDProtectedDataReconciliationHookResponder, EFSignpostable, EFContentProtectionObserver, EFLoggable> {
  /* instance variables */
  NSString *_path;
  MFAttachmentLibraryDataProvider *_attachmentDataProvider;
  MFWeakObjectCache *_libraryMessageCache;
  NSMutableDictionary *_mailboxCache;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<OS_dispatch_queue> *_statsQueue;
  NSConditionLock *_activeAccountsCondition;
  NSString *_activeMailboxesClause;
  NSString *_nonLocalAccountClause;
  NSObject<EFSQLValueExpressable> *_enabledAccountMailboxesExpression;
  NSObject<OS_dispatch_queue> *_keyBagQueue;
  NSObject<OS_dispatch_queue> *_conversationCalculationQueue;
  NSMutableSet *_messagesToThreadAtUnlock;
  NSObject<OS_dispatch_queue> *_parallelCompressionQueue;
  MFLibrarySearchableIndex *_searchableIndex;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _searchableIndexLock;
  atomic BOOL _suspendedUnderLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _remoteContentParserLock;
  atomic unsigned int _unreconciledMessageChangeCount;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _queryParserLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _mailboxLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _addedMessagesMapLock;
  NSCache *_mailboxURLsToMailboxIDs;
  NSCache *_optionsToQueries;
}

@property (retain, nonatomic) EDSearchableIndexScheduler *searchableIndexScheduler;
@property (retain, nonatomic) EDMessageQueryParser *queryParser;
@property (retain, nonatomic) NSObject<EFScheduler> *fileRemovalAfterCompactionScheduler;
@property (retain, nonatomic) NSMutableDictionary *currentAddedMessagesMap;
@property (retain) MFMessageBodyMigrator *bodyMigrator;
@property (readonly, nonatomic) NSObject<EFCancelable> *stateCaptureCancelable;
@property (readonly, nonatomic) EDWebContentParser *remoteContentParser;
@property (readonly, nonatomic) NSCache *messagesParsedCache;
@property (readonly, nonatomic) EDPersistenceHookRegistry *hookRegistry;
@property (retain) MFMessageAttachmentMigrator *attachmentMigrator;
@property (readonly) NSObject<OS_dispatch_queue> *mimePartParallelCompressionQueue;
@property (readonly, nonatomic) NSObject<MFMailMessageLibrarySwiftPropertiesProtocol> *swiftProperties;
@property (readonly) EDPersistence *persistence;
@property (readonly) MFPersistenceDatabase_iOS *database;
@property (readonly) MFMessageChangeManager_iOS *messageChangeManager;
@property (readonly, nonatomic) unsigned long long protectedDataAvailability;
@property (readonly, nonatomic) BOOL allowedToAccessProtectedData;
@property (readonly, nonatomic) unsigned long long pendingIndexItemsCount;
@property (readonly, nonatomic) EFObservable *unreconciledMessageCountObservable;
@property (readonly, nonatomic) unsigned long long unreconciledMessageCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long signpostID;

/* class methods */
+ (id)log;
+ (id)signpostLog;
+ (id)propertyMapper;
+ (BOOL)canUsePersistence;
+ (id)defaultInstance;
+ (void)test_setDefaultInstance:(id)instance;
+ (id)defaultPath;
+ (void)removeLibraryOnNextLaunch;
+ (void)_renameLibraryAtPath:(id)path;

/* instance methods */
- (id)initWithPath:(id)path inMemoryIdentifier:(id)identifier userAgent:(id)agent;
- (id)initWithPath:(id)path;
- (void)dealloc;
- (void)invalidateAndWait;
- (void)_setSuspendedUnderLock:(BOOL)lock;
- (void)start;
- (void)test_tearDown;
- (id)messageBasePathForAccount:(id)account;
- (void)bodyMigrationFinished;
- (void)attachmentMigrationFinished;
- (id)searchableIndex;
- (void)_didAddUnreconciledMessages:(unsigned long long)messages;
- (void)persistenceDidReconcileProtectedData;
- (void)_updateUnreconciledMessageCount;
- (void)setFlags:(unsigned long long)flags forMessage:(id)message;
- (void)postOldFlags:(unsigned long long)flags newFlags:(unsigned long long)flags forMessage:(id)message;
- (void)postFlagsChangedForMessages:(id)messages flags:(id)flags oldFlagsByMessage:(id)message;
- (void)updateFlagsForMessagesInPlace:(id)place success:(BOOL *)success;
- (id)updateFlagsForMessages:(id)messages changes:(id)changes transformer:(id /* block */)transformer;
- (id)setFlagsFromDictionary:(id)dictionary forMessages:(id)messages;
- (void)setFlagsFromDictionary:(id)dictionary forMessagesInMailboxURLString:(id)urlstring;
- (void)setNumberOfAttachments:(unsigned int)attachments isSigned:(BOOL)signed isEncrypted:(BOOL)encrypted forMessage:(id)message;
- (void)setMessage:(id)message isPartial:(BOOL)partial;
- (BOOL)_fileType:(long long)type orHigherExistsAtDirectory:(id)directory;
- (void)_removeEmlxFilesOfTypeLessThanType:(long long)type inDirectory:(id)directory;
- (BOOL)_writeEmlxFileOfType:(long long)type forAccount:(id)account toDirectory:(id)directory withData:(id)data protectionClass:(int)class;
- (BOOL)_writeEmlxFile:(id)file withData:(id)data protectionClass:(int)class purgeable:(BOOL)purgeable;
- (BOOL)_writeEmlxData:(id)data toFile:(id)file protectionClass:(int)class purgeable:(BOOL)purgeable;
- (void)notifyNewDataAvailableForMessages:(id)messages;
- (id)referencesFromHeaders:(id)headers;
- (id)_addThreadingInfoWithContext:(id)context usingDatabaseConnection:(id)connection;
- (BOOL)_insertThreadReferences:(id)references toMessageWithLibraryID:(long long)id usingDatabaseConnection:(id)connection;
- (long long)addReferenceForContext:(id)context usingDatabaseConnection:(id)connection generationWindow:(id)window mergeHandler:(id /* block */)handler;
- (id)duplicateMessages:(id)messages newRemoteIDs:(id)ids forMailbox:(id)mailbox setFlags:(unsigned long long)flags createNewCacheFiles:(BOOL)files;
- (id)duplicateMessages:(id)messages newRemoteIDs:(id)ids forMailbox:(id)mailbox setFlags:(unsigned long long)flags clearFlags:(unsigned long long)flags messageFlagsForMessages:(id)messages createNewCacheFiles:(BOOL)files;
- (id)addMessages:(id)messages withMailbox:(id)mailbox newMessagesByOldMessage:(id)message remoteIDs:(id)ids setFlags:(unsigned long long)flags addPOPUIDs:(BOOL)popuids dataSectionsByMessage:(id)message generationWindow:(id)window;
- (void)willStartPersistenceDidAddMessages:(id)messages;
- (void)didFinishPersistenceDidAddMessages:(id)messages;
- (void)persistenceIsAddingMessages:(id)messages journaled:(BOOL)journaled generationWindow:(id)window;
- (void)persistenceDidAddMessages:(id)messages generationWindow:(id)window;
- (BOOL)_addRecipients:(id)recipients toMessageWithDatabaseID:(long long)id cache:(id)cache connection:(id)connection;
- (long long)_findOrCreateDatabaseIDForAddress:(id)address comment:(id)comment cache:(id)cache connection:(id)connection;
- (long long)_findOrCreateDatabaseIDForGlobalData:(long long)data cache:(id)cache connection:(id)connection;
- (long long)_findOrCreateDatabaseIDForSubject:(id)subject cache:(id)cache connection:(id)connection;
- (long long)_findOrCreateDatabaseIDForSummary:(id)summary cache:(id)cache connection:(id)connection;
- (long long)_findOrCreateDatabaseIDForValue:(id)value inTable:(id)table column:(id)column cache:(id)cache connection:(id)connection created:(BOOL *)created;
- (void)_removeDataFilesForGlobalID:(long long)id;
- (void)updateAdditionalThreadingInfoForSentMessageWithHeaders:(id)headers externalConversationID:(long long)id;
- (void)updateThreadingInfoForMessage:(id)message fromHeaders:(id)headers;
- (id)_selectExpressionForMessageWithAvailableTables:(unsigned int)tables;
- (id)_selectClauseForOptions:(unsigned int)options protectedDataAvailable:(BOOL)available;
- (void)_iterateStatement:(id)statement connection:(id)connection withProgressMonitor:(id)monitor andRowHandler:(undefined *)handler context:(const struct { id x0; id x1; id x2; unsigned int x3; float x4; unsigned long long x5; double x6; unsigned int x7; unsigned int x8; struct sqlite3 * x9; BOOL x10; id x11; BOOL x12; } *)context;
- (void)iterateStatement:(struct sqlite3_stmt *)statement connection:(id)connection withProgressMonitor:(id)monitor andRowHandler:(undefined *)handler context:(void *)context;
- (void)_sendMessagesForStatement:(id)statement connection:(id)connection to:(id)to options:(unsigned int)options timestamp:(unsigned long long)timestamp;
- (id)messagesForMailbox:(id)mailbox limit:(unsigned long long)limit;
- (id)rangesOfIndexedUIDsForMailbox:(id)mailbox limit:(long long)limit;
- (id)newestUIDsForMailbox:(id)mailbox limit:(long long)limit;
- (id)newestUIDsMissingBodyDataForMailbox:(id)mailbox excluding:(id)excluding inLatest:(long long)latest limit:(long long)limit maximumMessagesToScan:(long long)scan;
- (id)newestUIDsMissingPartsForMailbox:(id)mailbox excluding:(id)excluding inLatest:(long long)latest limit:(long long)limit maximumMessagesToScan:(long long)scan;
- (void)_enumerateMessageRemoteIDAndGlobalUsingBatchesForMailbox:(id)mailbox excluding:(id)excluding inLatest:(long long)latest kind:(unsigned long long)kind block:(id /* block */)block;
- (void)_enumerateMessageRemoteIDAndGlobalForMailbox:(id)mailbox excluding:(id)excluding inLatest:(long long)latest block:(id /* block */)block;
- (void)_enumerateMessageRemoteIDAndGlobalForMailbox:(id)mailbox excluding:(id)excluding inLatest:(long long)latest dateReceivedMax:(long long)max limit:(unsigned long long)limit kind:(unsigned long long)kind block:(id /* block */)block;
- (id)messagesForMailbox:(id)mailbox olderThanNumberOfDays:(int)days;
- (id)_messagesForMailbox:(id)mailbox olderThanNumberOfDays:(int)days limit:(unsigned long long)limit;
- (id)serverSearchResultMessagesForMailbox:(id)mailbox;
- (id)_firstDateForQuery:(id)query inMailbox:(id)mailbox;
- (id)dateOfOldestNonSearchResultMessageInMailbox:(id)mailbox;
- (id)dateOfOldestNonIndexedNonSearchResultMessageInMailbox:(id)mailbox;
- (unsigned int)countOfRelatedMessagesMatchingCriterion:(id)criterion forConversationsContainingMessagesMatchingCriterion:(id)criterion forMailboxCriterion:(id)criterion;
- (unsigned long long)countMessagesMatchingCriterion:(id)criterion;
- (id)groupedMessagesCountByMailboxMatchingQuery:(unsigned long long)query variable:(id)variable;
- (id)groupedMessagesCountForCriterion:(id)criterion groupBy:(unsigned long long)by;
- (id)messagesWithSummariesForMailbox:(id)mailbox range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)orderedBatchOfMessagesEndingAtRowId:(long long)id limit:(unsigned int)limit success:(BOOL *)success;
- (long long)_int64ForQuery:(id)query connection:(id)connection textArgument:(id)argument;
- (int)_integerForQuery:(id)query withTextArgument:(id)argument;
- (unsigned int)unreadCountForMailbox:(id)mailbox matchingCriterion:(id)criterion;
- (unsigned int)unreadCountForAggregatedMailboxes:(id)mailboxes matchingCriterion:(id)criterion;
- (long long)countDistinctMessagesMatchingCriterion:(id)criterion;
- (unsigned int)unreadCountForAggregatedMailboxes:(id)mailboxes;
- (unsigned int)_computeUnreadCountForMailboxes:(id)mailboxes;
- (unsigned int)_flaggedCountForAggregatedMailboxes:(id)mailboxes;
- (unsigned int)_attachmentCountForAggregatedMailboxes:(id)mailboxes;
- (unsigned int)_includesMeCountForAggregatedMailboxes:(id)mailboxes;
- (unsigned int)_readLaterCountForAggregatedMailboxes:(id)mailboxes;
- (unsigned int)_sendLaterCountForAggregatedMailboxes:(id)mailboxes;
- (id)_queryForMailboxesIDsFromMailboxes:(id)mailboxes;
- (unsigned int)unreadCountForMailbox:(id)mailbox;
- (unsigned int)flaggedCountForMailbox:(id)mailbox;
- (unsigned int)attachmentCountForMailbox:(id)mailbox;
- (unsigned int)includesMeCountForMailbox:(id)mailbox;
- (unsigned int)attachmentCountForMailboxes:(id)mailboxes;
- (unsigned int)allNonDeleteCountForMailbox:(id)mailbox includeServerSearchResults:(BOOL)results includeThreadSearchResults:(BOOL)results;
- (unsigned int)nonDeletedCountForMailbox:(id)mailbox includeServerSearchResults:(BOOL)results includeThreadSearchResults:(BOOL)results;
- (unsigned int)nonDeletedCountForMailbox:(id)mailbox;
- (unsigned int)nonDeletedCountForAggregatedMailboxes:(id)mailboxes includeServerSearchResults:(BOOL)results includeThreadSearchResults:(BOOL)results;
- (unsigned int)nonDeletedCountForAggregatedMailboxes:(id)mailboxes;
- (unsigned int)totalCountForMailbox:(id)mailbox;
- (unsigned long long)serverUnreadOnlyOnServerCountForMailbox:(id)mailbox;
- (unsigned long long)indexedCountForMailbox:(id)mailbox limit:(unsigned long long)limit;
- (void)setServerUnreadOnlyOnServerCount:(unsigned long long)count forMailbox:(id)mailbox;
- (void)setLastSyncAndMostRecentStatusCount:(long long)count forMailbox:(id)mailbox;
- (void)increaseProtectionOnFileForMessage:(id)message;
- (unsigned long long)mostRecentStatusCountForMailbox:(id)mailbox;
- (void)setMostRecentStatusCount:(unsigned long long)count forMailbox:(id)mailbox;
- (id)messageWithRemoteID:(id)id inRemoteMailbox:(id)mailbox;
- (id)copyMessagesWithRemoteIDs:(id)ids options:(unsigned int)options inRemoteMailbox:(id)mailbox;
- (id)flagsForRemoteIDs:(id)ids inRemoteMailbox:(id)mailbox;
- (id)_remoteIDsStringForRemoteIDs:(id)ids inMailbox:(id)mailbox;
- (id)sequenceIdentifierForMailbox:(id)mailbox;
- (void)setSequenceIdentifier:(id)identifier forMailbox:(id)mailbox;
- (id)sequenceIdentifierForMessagesWithRemoteIDs:(id)ids inMailbox:(id)mailbox;
- (void)setSequenceIdentifier:(id)identifier forMessageWithLibraryID:(long long)id;
- (void)setSequenceIdentifier:(id)identifier forMessagesWithRemoteIDs:(id)ids inMailbox:(id)mailbox;
- (id)messageWithMessageID:(id)id options:(unsigned int)options inMailbox:(id)mailbox;
- (id)messagesWithMessageIDHeader:(id)idheader;
- (id)_keyForOptions:(unsigned int)options protectedDataAvailable:(BOOL)available mailboxAvailable:(BOOL)available mailboxCached:(BOOL)cached;
- (id)messageWithLibraryID:(long long)id options:(unsigned int)options inMailbox:(id)mailbox;
- (id)messageWithLibraryID:(long long)id options:(unsigned int)options inMailbox:(id)mailbox temporarilyUnavailable:(BOOL *)unavailable;
- (id)conversationIDsOfMessagesInSameThreadAsMessageWithLibraryID:(long long)id messageIDHash:(long long)idhash;
- (id)_copyReferenceHashesWithoutMessagesForMessageWithConversation:(id)conversation;
- (id)_getReferencesForHashesWithOwners:(id)owners;
- (long long)loadMoreMessagesForThreadContainingMessage:(id)message hasNoMoreMessages:(BOOL *)messages;
- (id)stringForQuery:(id)query monitor:(id)monitor;
- (id)stringForQuery:(id)query;
- (void)reloadMailboxCacheIfNecessaryWithConnection:(id)connection;
- (void)reloadMailboxCacheWithConnection:(id)connection;
- (id)urlForMailboxID:(long long)id;
- (id)mailboxURLsForIDs:(id)ids;
- (long long)mailboxIDForURLString:(id)urlstring createIfNecessary:(BOOL)necessary;
- (long long)mailboxIDForURLString:(id)urlstring;
- (id)mailboxURLForMessage:(id)message;
- (id)mailboxUidForMessage:(id)message;
- (id)remoteStoreForMessage:(id)message;
- (id)accountForMessage:(id)message;
- (BOOL)shouldCancel;
- (BOOL)_canSelectMessagesWithOptions:(unsigned int)options connection:(id)connection;
- (void)clearServerSearchFlagsForMessagesWithLibraryIDs:(id)ids;
- (void)scheduleRecurringActivity;
- (void)addPostMigrationStep:(Class)step;
- (unsigned long long)flagsForConversationId:(long long)id;
- (void)setFlags:(unsigned long long)flags forConversationId:(long long)id;
- (void)setConversationInfo:(long long)info syncKey:(id)key flags:(unsigned long long)flags;
- (long long)_conversationIdForMessageIds:(id)ids;
- (id)storedIntegerPropertyWithName:(id)name;
- (void)setStoredIntegerPropertyWithName:(id)name value:(id)value;
- (void)_notifyDidCompact:(BOOL)compact messages:(id)messages mailboxes:(id)mailboxes;
- (void)compactMessages:(id)messages;
- (void)compactMessages:(id)messages permanently:(BOOL)permanently;
- (void)compactMessages:(id)messages permanently:(BOOL)permanently notifyPersistence:(BOOL)persistence;
- (BOOL)_deleteMessages:(id)messages connection:(id)connection;
- (BOOL)_addAddressesFromRecipientsForMessages:(id)messages toSet:(id)set connection:(id)connection;
- (BOOL)_deleteMessages:(id)messages andCleanUpAddresses:(id)addresses subjects:(id)subjects summaries:(id)summaries brandIndicators:(id)indicators connection:(id)connection;
- (void)_removeGlobalDataForMessagesIfNecessary:(id)necessary connection:(id)connection;
- (id)_existingValuesForColumn:(id)column table:(id)table fromValues:(id)values connection:(id)connection;
- (long long)_maxRowIDInSet:(id)set;
- (BOOL)_deleteRows:(id)rows fromTable:(id)table connection:(id)connection;
- (void)compactMailbox:(id)mailbox;
- (BOOL)renameMailboxes:(id)mailboxes to:(id)to;
- (void)deleteMailboxes:(id)mailboxes account:(id)account;
- (void)removeAllMessagesFromMailbox:(id)mailbox removeMailbox:(BOOL)mailbox andNotify:(BOOL)notify;
- (id)dataPathForMessage:(id)message type:(long long)type;
- (id)dataFileURLForMessage:(id)message type:(long long)type;
- (id)dataDirectoryURLForMessage:(id)message;
- (id)dataPathForMessage:(id)message;
- (id)dataPathForMessage:(id)message part:(id)part;
- (long long)deleteAttachmentsForMessage:(id)message inMailboxFileURL:(id)url;
- (id)fileAttributesForMessage:(id)message;
- (void)fileURLForAttachmentPersistentID:(id)id messageID:(id)id result:(id /* block */)result;
- (id)dataConsumerForMessage:(id)message part:(id)part;
- (id)dataConsumerForMessage:(id)message part:(id)part incomplete:(BOOL)incomplete;
- (id)dataConsumerForMessage:(id)message isPartial:(BOOL)partial;
- (id)dataConsumerForMessage:(id)message;
- (id)existingMIMEPartsForMessage:(id)message;
- (id)downloadedMessageDataForMessage:(id)message;
- (void)setData:(id)data forMessage:(id)message isPartial:(BOOL)partial;
- (void)setData:(id)data forMessageToAppend:(id)append;
- (BOOL)_setMessageData:(id)data libraryID:(long long)id part:(id)part partial:(BOOL)partial complete:(BOOL)complete connection:(id)connection;
- (void)setSummary:(id)summary forMessage:(id)message;
- (BOOL)_setSummary:(id)summary forMessageWithRowID:(long long)id connection:(id)connection;
- (id)loadData:(id)data forMessage:(id)message usingBlock:(id /* block */)block;
- (id)loadMeetingDataForMessage:(id)message;
- (id)loadMeetingExternalIDForMessage:(id)message;
- (id)loadMeetingMetadataForMessage:(id)message;
- (id)bodyDataAtPath:(id)path headerData:(id *)data;
- (void)updateUnprefixedSubjectTo:(id)to forMessage:(id)message;
- (long long)_subjectIDForMessageWithLibraryID:(long long)id connection:(id)connection;
- (BOOL)_isSubjectIDUsedByOtherMessages:(long long)messages besidesMessageWithDatabaseID:(long long)id connection:(id)connection;
- (BOOL)_updateSubjectWithRowID:(long long)id to:(id)to connection:(id)connection outSubjectAlreadyExists:(BOOL *)exists;
- (BOOL)_updateSubjectForMessageWithLibraryID:(long long)id to:(id)to connection:(id)connection;
- (id)headerDataAtPath:(id)path;
- (id)bodyDataForMessage:(id)message andHeaderDataIfReadilyAvailable:(id *)available;
- (id)bodyDataForMessage:(id)message andHeaderDataIfReadilyAvailable:(id *)available isComplete:(BOOL *)complete;
- (id)bodyDataForMessage:(id)message andHeaderDataIfReadilyAvailable:(id *)available isComplete:(BOOL *)complete isPartial:(BOOL *)partial;
- (id)bodyDataForMessage:(id)message;
- (id)headerDataForMessage:(id)message;
- (id)fullBodyDataForMessage:(id)message andHeaderDataIfReadilyAvailable:(id *)available;
- (id)dataForMimePart:(id)part isComplete:(BOOL *)complete;
- (BOOL)hasCompleteDataForMimePart:(id)part;
- (BOOL)areMessageContentsLocallyAvailable:(id)available fullContentsAvailble:(BOOL *)availble;
- (id)_equalToMailboxIDsFromCriterion:(id)criterion;
- (id)_sqlSortByStringFromOptions:(unsigned int)options;
- (id)queryForCriterion:(id)criterion connection:(id)connection options:(unsigned int)options baseTable:(unsigned int)table isSubquery:(BOOL)subquery range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)queryForCriterion:(id)criterion connection:(id)connection options:(unsigned int)options baseTable:(unsigned int)table isSubquery:(BOOL)subquery;
- (id)queryForCriterion:(id)criterion connection:(id)connection options:(unsigned int)options baseTable:(unsigned int)table;
- (id)queryForCriterion:(id)criterion connection:(id)connection options:(unsigned int)options range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)queryForCriterion:(id)criterion connection:(id)connection options:(unsigned int)options;
- (void)sendMessagesMatchingCriterion:(id)criterion to:(id)to options:(unsigned int)options baseTable:(unsigned int)table range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range success:(BOOL *)success;
- (void)sendMessagesMatchingCriterion:(id)criterion to:(id)to options:(unsigned int)options baseTable:(unsigned int)table range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)sendMessagesMatchingCriterion:(id)criterion to:(id)to options:(unsigned int)options baseTable:(unsigned int)table;
- (void)sendMessagesMatchingCriterion:(id)criterion to:(id)to options:(unsigned int)options range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)sendMessagesMatchingCriterion:(id)criterion to:(id)to options:(unsigned int)options;
- (void)_iterateMessagesWithResultHandler:(id)handler options:(unsigned int)options monitor:(id)monitor sqlQueryGenerator:(id /* block */)generator;
- (void)iterateMessagesMatchingCriterion:(id)criterion withResultHandler:(id)handler options:(unsigned int)options withMonitor:(id)monitor;
- (void)iterateMessagesMatchingCriterion:(id)criterion options:(unsigned int)options handler:(id /* block */)handler;
- (id)messagesMatchingCriterion:(id)criterion options:(unsigned int)options range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)messagesMatchingCriterion:(id)criterion options:(unsigned int)options range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range success:(BOOL *)success;
- (id)messagesMatchingCriterion:(id)criterion options:(unsigned int)options success:(BOOL *)success;
- (id)messagesMatchingCriterion:(id)criterion options:(unsigned int)options;
- (id)filterContiguousMessages:(id)messages forCriterion:(id)criterion options:(unsigned int)options;
- (void)invalidateAccount:(id)account;
- (void)deleteAccount:(id)account;
- (id)_mailboxesClauseForAccounts:(id)accounts;
- (void)prepareToRebuildActiveAccountsClausesAndExpressions;
- (void)rebuildActiveAccountsClausesAndExpressionsWithAccounts:(id)accounts;
- (void)rebuildActiveAccountMailboxesExpression:(id)expression;
- (void)rebuildActiveMailboxesClauseWithActiveAccounts:(id)accounts inactiveAccounts:(id)accounts;
- (id)enabledAccountMailboxesExpression;
- (id)activeMailboxesClause;
- (id)_nonLocalAccountsClause;
- (void)_waitForActiveAccountsRebuild;
- (void)deletePOPUID:(id)popuid inMailbox:(id)mailbox;
- (id)UIDsToDeleteInMailbox:(id)mailbox;
- (id)allUIDsInMailbox:(id)mailbox;
- (id)hiddenPOPUIDsInMailbox:(id)mailbox;
- (void)_setProtectedDataAvailabilityState:(unsigned long long)state;
- (id)_indexSetOfMessagesDeleted;
- (BOOL)cleanupProtectedTables;
- (BOOL)_shouldLogDatabaseStats;
- (void)_logStatistics;
- (void)_schedulePeriodicStatisticsLogging;
- (BOOL)isProtectedDataAvailable:(id)available;
- (void)contentProtectionStateChanged:(long long)changed previousState:(long long)state;
- (void)_scheduleJournalReconciliation;
- (void)_cancelPendingJournalReconciliation;
- (BOOL)_canAccessProtectedData;
- (void)journalWasReconciled;
- (void)_addMessageToThreadAtUnlock:(long long)unlock;
- (BOOL)migrate;
- (void)performIncrementalVacuumForSchema:(id)schema;
- (void)_scheduleIncrementalVacuum;
- (void)closeDatabaseConnections;
- (void)journalReconciliationFailed;
- (void)handleFailedMigration;
- (void)renameOrRemoveDatabaseIfNeeded;
- (id)_stringsForIndexSet:(id)set;
- (id)indexableMessagesWhere:(id)where sortedBy:(id)by limit:(long long)limit options:(unsigned int)options;
- (void)removeSearchableItemsForAccount:(id)account;
- (void)removeSearchableItemsForMailbox:(id)mailbox;
- (void)removeSearchableItemsForMessages:(id)messages;
- (void)removeSearchableItemsForAccount:(id)account databaseID:(long long)id;
- (void)_removeSearchableItemsWithLibraryIDs:(id)ids;
- (void)reindexSearchableItemsWithIdentifiers:(id)identifiers acknowledgementHandler:(id /* block */)handler;
- (void)reindexAllSearchableItemsWithAcknowledgementHandler:(id /* block */)handler;
- (void)removeMessagesFromCacheWithLibraryIDs:(id)ids;
- (id)_libraryMessageCache;
- (id)_libraryMessageWithLibraryID:(long long)id wasCached:(BOOL *)cached;
- (id)_messageForRow:(id)row options:(unsigned int)options timestamp:(unsigned long long)timestamp connection:(id)connection isProtectedDataAvailable:(BOOL)available recipientsCache:(id)cache;
- (id)_recipientsForMessageWithDatabaseID:(long long)id connection:(id)connection recipientsCache:(id)cache;
- (id)_recipientsForMessagesWithDatabaseIDs:(id)ids includeTo:(BOOL)to includeCC:(BOOL)cc includeBCC:(BOOL)bcc;
- (id)stringFromAllMailboxUnreadCount;
- (BOOL)messageDataExistsInDatabaseForMessageLibraryID:(long long)id part:(id)part length:(unsigned long long *)length;
- (BOOL)_shouldStoreRemoteContentForMessage:(id)message;
- (BOOL)_storeRemoteContentLinksCachedOnMessage:(id)message linksToVerify:(id *)verify;
- (void)storeRemoteContentLinksFromFullData:(id)data forMessage:(id)message;
- (void)_processMessageData:(id)data forMessage:(id)message linksToVerify:(id)verify parsingOptions:(unsigned long long)options;
- (void)storeRemoteContentLinksFromHeaderData:(id)data bodyData:(id)data forMessage:(id)message;
- (void)_findHTMLPartsFromHeaderData:(id)data bodyData:(id)data forMessage:(id)message linksToVerify:(id)verify parsingOptions:(unsigned long long)options;
- (void)storeRemoteContentLinksFromData:(id)data forMessage:(id)message mimePart:(id)part;
- (void)_processRemoteContentFromData:(id)data forMimePart:(id)part linksToVerify:(id)verify forMessage:(id)message parsingOptions:(unsigned long long)options;
- (unsigned long long)_parserRemoteContentOptionsForMessage:(id)message shouldStoreRemoteContent:(BOOL)content;
- (id)dataProvider;
- (BOOL)_shouldPerformDataDetectionForMessage:(id)message;
- (void)detectDataFromPlainTextMessage:(id)message forMessage:(id)message mimePart:(id)part;
- (id)_getStringFromPlainTextData:(id)data mimePart:(id)part;
@end

#endif /* MFMailMessageLibrary_h */
