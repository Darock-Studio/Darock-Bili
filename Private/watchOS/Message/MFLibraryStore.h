//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef MFLibraryStore_h
#define MFLibraryStore_h
@import Foundation;

#include "MFMessageStore.h"
#include "MFMailMessageLibrary.h"
#include "MFMailMessageStore-Protocol.h"
#include "MFMailboxUid.h"
#include "MFMessageCriterion.h"
#include "MailAccount.h"

@class BOOL *, NSDate, NSString;

@interface MFLibraryStore : MFMessageStore<MFMailMessageStore> {
  /* instance variables */
  unsigned long long _state;
  struct { unsigned int x :1 isReadOnly; unsigned int x :1 hasUnsavedChangesToMessageData; unsigned int x :1 haveOpenLockFile; unsigned int x :1 compacting; unsigned int x :1 cancelInvalidation; unsigned int x :1 forceInvalidation; unsigned int x :1 isWritingChangesToDisk; unsigned int x :1 isTryingToClose; unsigned int x :1 compactOnClose; unsigned int x :23 reserved; } _flags;
  unsigned long long _deletedMessagesSize;
  unsigned long long _deletedMessageCount;
  unsigned long long _generationNumber;
  MFMessageCriterion *_criterion;
  unsigned long long _fetchWindow;
  unsigned long long _lastFetchCount;
}

@property (retain, nonatomic) NSDate *earliestReceivedDate;
@property (retain, nonatomic) MFMailMessageLibrary *library;
@property (readonly, nonatomic) MailAccount *account;
@property (readonly, nonatomic) MFMailboxUid *mailbox;
@property (readonly, nonatomic) NSString *URLString;
@property (readonly, nonatomic) MFMailboxUid *mailboxUid;

/* class methods */
+ (Class)classForMimePart;
+ (unsigned int)defaultLoadOptions;
+ (id)attachmentInfoCalculationScheduler;
+ (id)storeWithMailbox:(id)mailbox;
+ (Class)headersClass;
+ (id)sharedInstance;
+ (id)sharedInstanceIfExists;

/* instance methods */
- (id)initWithCriterion:(id)criterion mailbox:(id)mailbox readOnly:(BOOL)only;
- (id)initWithMailbox:(id)mailbox readOnly:(BOOL)only;
- (id)initWithMailbox:(id)mailbox;
- (id)description;
- (void)_flushAllMessageData;
- (id)_setOrGetBody:(id)body forMessage:(id)message updateFlags:(BOOL)flags;
- (void)addCountsForMessages:(id)messages shouldUpdateUnreadCount:(BOOL)count;
- (BOOL)shouldCancel;
- (void)_addInvocationToQueue:(id)queue;
- (void)openSynchronously;
- (BOOL)isOpened;
- (void)close;
- (unsigned long long)totalCount;
- (unsigned long long)allNonDeletedCountIncludingServerSearch:(BOOL)search andThreadSearch:(BOOL)search;
- (unsigned long long)serverMessageCount;
- (id)copyOfMessagesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range options:(unsigned int)options generation:(unsigned long long *)generation;
- (id)copyOfMessagesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range options:(unsigned int)options;
- (id)copyOfAllMessagesWithOptions:(unsigned int)options;
- (id)copyOfAllMessages;
- (id)copyMessagesMatchingCriterion:(id)criterion options:(unsigned int)options;
- (id)copyMessagesWithRemoteIDs:(id)ids options:(unsigned int)options inMailbox:(id)mailbox;
- (id)serverSearchResults;
- (id)dateOfOldestNonIndexedNonSearchResultMessage;
- (void)willFetchMessages;
- (unsigned long long)_fetchWindowMultiple;
- (unsigned long long)_fetchWindowMinimum;
- (unsigned long long)_calculateFetchWindowWithAdditionalMultiple:(BOOL)multiple;
- (void)invalidateFetchWindow;
- (BOOL)hasMoreFetchableMessages;
- (BOOL)shouldGrowFetchWindow;
- (unsigned long long)growFetchWindow;
- (unsigned long long)fetchWindow;
- (unsigned long long)fetchWindowCap;
- (long long)fetchMobileSynchronously:(unsigned long long)synchronously;
- (long long)fetchMobileSynchronously:(unsigned long long)synchronously preservingUID:(id)uid options:(unsigned long long)options;
- (long long)fetchNumMessages:(unsigned long long)messages preservingUID:(id)uid options:(unsigned long long)options;
- (BOOL)canFetchSearchResults;
- (id)storeSearchResultMatchingCriterion:(id)criterion limit:(unsigned int)limit offset:(id)offset error:(id *)error;
- (BOOL)canFetchMessageIDs;
- (long long)fetchMessagesWithMessageIDs:(id)ids andSetFlags:(unsigned long long)flags;
- (id)messageIdRollCall:(id)call;
- (id)messageForRemoteID:(id)id;
- (id)loadMeetingExternalIDForMessage:(id)message;
- (id)loadMeetingDataForMessage:(id)message;
- (id)loadMeetingMetadataForMessage:(id)message;
- (id)filterMessagesByMembership:(id)membership;
- (void)handleMessagesAdded:(id)added earliestReceivedDate:(id)date;
- (void)messagesWereAdded:(id)added;
- (void)messagesWereAdded:(id)added earliestReceivedDate:(id)date;
- (void)messagesWillBeCompacted:(id)compacted;
- (void)messagesWereCompacted:(id)compacted;
- (void)messageFlagsDidChange:(id)change flags:(id)flags;
- (void)allMessageFlagsDidChange:(id)change;
- (void)_handleFlagsChangedForMessages:(id)messages flags:(id)flags oldFlagsByMessage:(id)message;
- (void)handleMessageFlagsChanged:(id)changed;
- (id)_memberMessagesWithCompactionNotification:(id)notification;
- (void)handleMessagesCompacted:(id)compacted;
- (void)handleMessagesWillBeCompacted:(id)compacted;
- (void)dealloc;
- (BOOL)bodyFetchRequiresNetworkActivity;
- (BOOL)shouldDownloadBodyDataForMessage:(id)message;
- (id)headerDataForMessage:(id)message downloadIfNecessary:(BOOL)necessary;
- (id)_fetchHeaderDataForMessage:(id)message downloadIfNecessary:(BOOL)necessary;
- (id)_fetchBodyDataForMessage:(id)message andHeaderDataIfReadilyAvailable:(id *)available downloadIfNecessary:(BOOL)necessary partial:(BOOL *)partial;
- (id)_fetchFullBodyDataForMessage:(id)message andHeaderDataIfReadilyAvailable:(id *)available downloadIfNecessary:(BOOL)necessary didDownload:(BOOL *)download;
- (BOOL)_fetchDataForMimePart:(id)part range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range isComplete:(BOOL *)complete consumer:(id)consumer;
- (id)dataForMimePart:(id)part inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range isComplete:(BOOL *)complete downloadIfNecessary:(BOOL)necessary didDownload:(BOOL *)download;
- (BOOL)dataForMimePart:(id)part inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range isComplete:(BOOL *)complete withConsumer:(id)consumer downloadIfNecessary:(BOOL)necessary didDownload:(BOOL *)download;
- (id)storeData:(id)data forMimePart:(id)part isComplete:(BOOL)complete;
- (id)_copyDataFromMimePart:(id)part threshold:(unsigned int)threshold downloadIfNecessary:(BOOL)necessary;
- (id)fullBodyDataForMessage:(id)message andHeaderDataIfReadilyAvailable:(id *)available isComplete:(BOOL *)complete downloadIfNecessary:(BOOL)necessary usePartDatas:(BOOL)datas didDownload:(BOOL *)download;
- (id)fullBodyDataForMessage:(id)message andHeaderDataIfReadilyAvailable:(id *)available isComplete:(BOOL *)complete downloadIfNecessary:(BOOL)necessary didDownload:(BOOL *)download;
- (id)bodyDataForMessage:(id)message isComplete:(BOOL *)complete isPartial:(BOOL *)partial downloadIfNecessary:(BOOL)necessary;
- (void)setData:(id)data forMessage:(id)message isPartial:(BOOL)partial;
- (void)setData:(id)data summary:(id)summary forMessage:(id)message isPartial:(BOOL)partial;
- (void)_addMessageDataToCaches:(id)caches forMessage:(id)message isPartial:(BOOL)partial;
- (BOOL)shouldDeleteInPlace;
- (BOOL)shouldArchive;
- (int)archiveDestination;
- (void)deleteMessages:(id)messages moveToTrash:(BOOL)trash;
- (void)deleteMessagesOlderThanNumberOfDays:(int)days compact:(BOOL)compact;
- (void)messagesWereDeleted:(id)deleted;
- (void)setFlag:(id)flag state:(BOOL)state forMessages:(id)messages;
- (id)setFlagsFromDictionary:(id)dictionary forMessages:(id)messages;
- (id)setFlagsLocallyFromDictionary:(id)dictionary forMessages:(id)messages;
- (void)setNumberOfAttachments:(unsigned int)attachments isSigned:(BOOL)signed isEncrypted:(BOOL)encrypted forMessage:(id)message;
- (BOOL)allowsAppend;
- (BOOL)canCompact;
- (void)doCompact;
- (void)compactMessages:(id)messages;
- (id)dataPathForMessage:(id)message part:(id)part;
- (void)updateMetadata;
- (void)_setNeedsAutosave;
- (id)criterion;
- (unsigned long long)serverUnreadOnlyOnServerCount;
- (unsigned long long)unreadCount;
- (void)updateServerUnreadCountClosingConnection:(BOOL)connection;
- (id)newObjectCache;
- (id)_cachedBodyForMessage:(id)message valueIfNotPresent:(id)present;
- (id)_cachedHeadersForMessage:(id)message valueIfNotPresent:(id)present;
- (id)_cachedHeaderDataForMessage:(id)message valueIfNotPresent:(id)present;
- (id)_cachedBodyDataContainerForMessage:(id)message valueIfNotPresent:(id)present;
- (void)purgeMessages:(id)messages;
- (void)purgeMessagesBeyondLimit:(unsigned long long)limit;
- (BOOL)hasMessageForAccount:(id)account;
- (void)_queueMessagesAdded:(id)added;
- (void)_queueMessageFlagsChanged:(id)changed;
- (void)_queueMessagesWillBeCompacted:(id)compacted;
- (void)_queueMessagesWereCompacted:(id)compacted;
- (BOOL)hasCompleteDataForMimePart:(id)part;
- (id)storageLocationForAttachment:(id)attachment withMessage:(id)message;
@end

#endif /* MFLibraryStore_h */
