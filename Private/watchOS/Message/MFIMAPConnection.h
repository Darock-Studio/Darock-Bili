//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3774.300.42.0.0
//
#ifndef MFIMAPConnection_h
#define MFIMAPConnection_h
@import Foundation;

#include "MFConnection.h"
#include "ECIMAPServerInterface-Protocol.h"
#include "EFCancelable-Protocol.h"
#include "EFLoggable-Protocol.h"
#include "EFPubliclyDescribable-Protocol.h"
#include "MFIMAPCommandPipeline.h"
#include "MFIMAPConnectionDelegate-Protocol.h"
#include "MFIMAPDownloadCache.h"
#include "MFIMAPMailboxListFilter-Protocol.h"
#include "MFInvocationQueue.h"

@class BOOL *, NSMutableData, NSMutableSet, NSString;

@interface MFIMAPConnection : MFConnection<EFLoggable, ECIMAPServerInterface, EFPubliclyDescribable> {
  /* instance variables */
  NSObject<MFIMAPMailboxListFilter> *_mailboxListFilter;
  unsigned int x :24 _capabilityFlags;
  BOOL _verifiedESearchResponse;
  unsigned int x :3 _connectionState;
  NSString *_separatorChar;
  NSString *_serverNamespace;
  NSString *_selectedMailbox;
  NSMutableSet *_capabilities;
  NSString *_lastRequiredHeaders;
  unsigned int _commandNumber;
  NSMutableData *_data;
  unsigned int _readBufferSize;
  double _expirationTime;
  MFInvocationQueue *_streamEventQueue;
  unsigned int x :1 _noModSequence;
  struct { unsigned int x :1 shouldHandleUntaggedResponse; unsigned int x :1 didReceiveResponse; unsigned int x :1 didFinishSelect; unsigned int x :1 didDisconnect; unsigned int x :1 setServerMessageCount; unsigned int x :1 setHighestModSequence; unsigned int x :1 willRemoveDelegation; unsigned int x :1 shouldStartIdle; } _delegateState;
}

@property (nonatomic) unsigned long long idleCommandSequenceNumber;
@property (retain, nonatomic) NSObject<EFCancelable> *idleSubscriptionCancelable;
@property (nonatomic) unsigned int permanentFlags;
@property (readonly, retain, nonatomic) MFIMAPCommandPipeline *fetchPipeline;
@property (readonly, retain, nonatomic) MFIMAPDownloadCache *downloadCache;
@property (weak, nonatomic) NSObject<MFIMAPConnectionDelegate> *delegate;
@property (nonatomic) int tag;
@property (readonly, nonatomic) double connectTime;
@property (readonly, nonatomic) BOOL gotBadResponse;
@property (readonly, nonatomic) BOOL hasValidConnection;
@property (readonly, nonatomic) BOOL idle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSString *ef_publicDescription;

/* class methods */
+ (id)log;
+ (void)initialize;
+ (void)setReadSizeParameters;

/* instance methods */
- (id)_messageIDsFromFetchResultData:(id)data;
- (id)_getReferencesForMessageSet:(id)set;
- (id)_searchUidsForMessageIDs:(id)ids excludeDeleted:(BOOL)deleted;
- (id)_uidsForMessageIDs:(id)ids excludeDeleted:(BOOL)deleted;
- (id)_getFirstLevelMessageIDsForReference:(id)reference;
- (id)uidsReferencedBy:(id)by;
- (id)eSearchIDSet:(id)idset areMessageSequenceNumbers:(BOOL)numbers arguments:(id)arguments success:(BOOL *)success returning:(int)returning;
- (id)eSearchIDSet:(id)idset areMessageSequenceNumbers:(BOOL)numbers forTerms:(id)terms success:(BOOL *)success returning:(int)returning;
- (id)parseIndexSetFromSequenceSet:(id)set;
- (void)parseSearchReturn:(id)return;
- (void)parseESearchResponseWithContext:(id)context;
- (BOOL)sendResponsesForCondStoreFlagFetchForUIDs:(id)uids withSequenceIdentifier:(id *)identifier toQueue:(id)queue;
- (id)init;
- (void)dealloc;
- (id)copyDiagnosticInformation;
- (id)mailboxListFilter;
- (void)setMailboxListFilter:(id)filter;
- (void)_clearCapabilities;
- (void)_addCapabilities:(id)capabilities;
- (void)_fetchCapabilities;
- (void)_sendClientInfoIfSupported;
- (void)_sendApplePushForAccountIfSupported:(id)supported;
- (void)_enableCompressionIfSupported;
- (BOOL)_connectSocketUsingAccount:(id)account;
- (BOOL)_doBasicConnectionUsingAccount:(id)account;
- (BOOL)_tryConnectionUsingAccount:(id)account;
- (BOOL)connectUsingAccount:(id)account;
- (void)disconnectAndNotifyDelegate:(BOOL)delegate;
- (void)disconnect;
- (int)connectionState;
- (BOOL)loginDisabled;
- (int)fillLiteralBuffer:(char *)buffer count:(unsigned long long)count dataLength:(unsigned long long)length nonSynchronizingLiteral:(BOOL *)literal;
- (unsigned long long)_sendCommands:(id)commands response:(id *)response;
- (id)_copyNextServerResponseForCommand:(id)command;
- (id)_copyNextTaggedOrContinuationResponseForCommand:(id)command;
- (id)_errorForResponse:(id)response commandParams:(id)params;
- (id)capabilities;
- (BOOL)supportsCapability:(int)capability;
- (void)noop;
- (BOOL)authenticateUsingAccount:(id)account;
- (id)_serverErrorForAccount:(id)account response:(id)response command:(id)command;
- (void)_updateCapabilitiesForAccount:(id)account withAuthenticationResponse:(id)response;
- (int)_doIMAPLoginForAccount:(id)account quotedUsername:(id)username password:(id)password;
- (BOOL)loginWithAccount:(id)account password:(id)password;
- (BOOL)logout;
- (id)separatorChar;
- (id)serverPathPrefix;
- (id)_doNamespaceCommand;
- (id)_doListCommand:(int)command withReference:(id)reference mailboxName:(id)name options:(int)options getSpecialUse:(BOOL)use statusDataItems:(id)items statusEntriesByMailbox:(id *)mailbox;
- (id)_listingForMailbox:(id)mailbox options:(int)options getSpecialUse:(BOOL)use statusDataItems:(id)items statusEntriesByMailbox:(id *)mailbox withCommand:(int)command;
- (id)listingForMailbox:(id)mailbox options:(int)options getSpecialUse:(BOOL)use statusDataItems:(id)items statusEntriesByMailbox:(id *)mailbox;
- (id)subscribedListingForMailbox:(id)mailbox options:(int)options;
- (void)close;
- (BOOL)closeAndLogout;
- (void)unselect;
- (void)handleBytesAvailable;
- (void)_handleBytesAvailableInternal;
- (void)locked_startIdle;
- (void)locked_finishIdle;
- (void)finishIdle;
- (BOOL)isIdle;
- (void)locked_scheduleIdle;
- (void)scheduleIdleReset;
- (void)locked_scheduleIdleResetAfterDelay:(double)delay;
- (BOOL)expunge;
- (BOOL)expungeUIDs:(id)uids;
- (void)fetchStatusForMailboxes:(id)mailboxes args:(id)args;
- (BOOL)examineMailbox:(id)mailbox;
- (BOOL)selectMailbox:(id)mailbox withAccount:(id)account;
- (id)selectedMailbox;
- (BOOL)createMailbox:(id)mailbox;
- (BOOL)deleteMailbox:(id)mailbox;
- (BOOL)renameMailbox:(id)mailbox toMailbox:(id)mailbox;
- (BOOL)subscribeMailbox:(id)mailbox;
- (BOOL)unsubscribeMailbox:(id)mailbox;
- (id)quotaPercentagesForMailbox:(id)mailbox;
- (BOOL)_sendMailboxCommand:(int)command withArguments:(id)arguments;
- (id)copyArgumentForSearchTerm:(id)term;
- (id)searchUidSet:(id)set forTerms:(id)terms success:(BOOL *)success;
- (id)searchIDSet:(id)idset forTerms:(id)terms success:(BOOL *)success;
- (unsigned long long)countForSearchOfIDSet:(id)idset forTerms:(id)terms success:(BOOL *)success;
- (unsigned long long)countForSearchOfUidSet:(id)set forTerms:(id)terms success:(BOOL *)success;
- (void)_updateSearchCapabilityWithAccount:(id)account;
- (unsigned int)getMailboxIDForUID:(unsigned int)uid;
- (BOOL)storeFlags:(id)flags state:(BOOL)state forMessageSet:(id)set;
- (BOOL)storeFlags:(id)flags state:(BOOL)state forUIDs:(id)uids;
- (BOOL)storeFlags:(id)flags state:(BOOL)state forRange:(struct { unsigned int x0; unsigned int x1; })range;
- (BOOL)deleteMessagesOlderThanNumberOfDays:(int)days;
- (id)_responseFromSendingCommand:(id)command andPossiblyCreateMailbox:(id)mailbox;
- (BOOL)copyUIDs:(id)uids toMailboxNamed:(id)named copyInfo:(id *)info error:(id *)error;
- (BOOL)moveUIDs:(id)uids toMailboxNamed:(id)named copyInfo:(id *)info error:(id *)error;
- (id)copyInfoForMessageInfo:(id)info;
- (id)_dictionaryFromSourceUIDs:(id)uids destinationUIDs:(id)uids;
- (id)_indexSetForIMAPInlineSet:(id)set;
- (BOOL)appendData:(id)data toMailboxNamed:(id)named flags:(id)flags dateReceived:(id)received appendInfo:(id *)info error:(id *)error;
- (BOOL)storeFlagChange:(id)change forUIDs:(id)uids;
- (BOOL)storeGmailLabels:(id)labels state:(BOOL)state forUIDs:(id)uids;
- (BOOL)appendData:(id)data toMailboxNamed:(id)named flags:(id)flags dateReceived:(id)received newMessageInfo:(id *)info;
- (id)_headersToFetchIncludingThoseRequiredForRouting:(BOOL)routing withRecipients:(BOOL)recipients;
- (id)fetchMessageIdsForUids:(id)uids;
- (BOOL)performCustomCommand:(id)command withArguments:(id)arguments;
- (void)setReadBufferSizeFromElapsedTime:(double)time bytesRead:(unsigned long long)read;
- (unsigned int)readBufferSize;
- (void)setReadBufferSize:(unsigned int)size;
- (id)messageSetForRange:(struct { unsigned int x0; unsigned int x1; })range;
- (id)messageSetForRange:(struct { unsigned int x0; unsigned int x1; })range butNotNumbers:(id)numbers;
- (id)messageSetForNumbers:(id)numbers;
- (id)messageSetForUIDs:(id)uids;
- (id)messageSetForUIDs:(id)uids maxTokens:(unsigned long long)tokens remainder:(id *)remainder;
- (id)parenthesizedStringWithObjects:(id)objects;
- (BOOL)authenticateUsingAccount:(id)account authenticator:(id)authenticator;
- (BOOL)startTLSForAccount:(id)account;
- (void)lock;
- (id)_connectionStateDescription;
- (id)_connectionLogPrefix;
- (id)copyWithZone:(struct _NSZone *)zone;
- (unsigned int)literalChunkSize;
- (id)_readDataOfLength:(long long)length;
- (id)_fetchArgumentForMessageUidsAndFlags;
- (id)_fetchArgumentForMessageSkeletonsWithAllHeaders;
- (BOOL)_isFetchResponseValid:(id)valid;
- (id)_responseFromSendingCommands:(id)commands;
- (BOOL)sendResponsesForCommand:(id)command toQueue:(id)queue;
- (BOOL)sendResponsesForUIDFetchForUIDs:(id)uids fields:(id)fields toQueue:(id)queue;
- (BOOL)sendSkeletonResponsesForUIDs:(id)uids includeTo:(BOOL)to toQueue:(id)queue;
- (BOOL)sendUidAndFlagResponsesForUIDs:(id)uids sequenceIdentifierProvider:(id)provider flagSearchResults:(id)results toQueue:(id)queue;
- (BOOL)sendUidResponsesForSearchArguments:(id)arguments toQueue:(id)queue;
- (id)searchUIDs:(id)uids withFlagRequests:(id)requests;
- (BOOL)sendResponsesForUIDs:(id)uids fields:(id)fields flagSearchResults:(id)results toQueue:(id)queue;
- (void)didFinishCommands:(id)commands;
- (id)_logStringForIDs:(id)ids;
- (id)_logStringForCommand:(id)command;
- (id)_publicDescriptionForSearchString:(id)string;
@end

#endif /* MFIMAPConnection_h */
