//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1814.300.81.4.2
//
#ifndef IDSNWLink_h
#define IDSNWLink_h
@import Foundation;

#include "IDSLink-Protocol.h"
#include "IDSLinkDelegate-Protocol.h"

@class NSIndexSet, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString;
@protocol OS_nw_listener;

@interface IDSNWLink : NSObject<IDSLink> {
  /* instance variables */
  BOOL _isInvalidated;
  BOOL _wantsWiFi;
  BOOL _wantsCellular;
  BOOL _isDefaultPairedDevice;
  BOOL _transactionIDMismatchReported;
  BOOL _shouldFailConnectionsRandomly;
  struct _opaque_pthread_t { long long x0; struct __darwin_pthread_handler_rec * x1; char x2[8176] } * _nwtid;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  unsigned char _clientUUID[16];
  NSObject<OS_nw_listener> *_listener;
  NSObject<OS_nw_listener> *_cellularListener;
  NSMutableArray *_recentQRServerList;
  NSMutableArray *_tokensForUDPConnectionInProgress;
  NSMutableArray *_cellularPortList;
  NSMutableDictionary *_queuedPeelOffs;
  NSMutableDictionary *_tokenToNWLinkConnection;
  NSMutableDictionary *_tokenToChildConnectionEvaluator;
  NSMutableSet *_rootConnections;
  NSMutableDictionary *_interfaceIndexToNAT64LocalAddress;
  NSMutableDictionary *_portToExtraListener;
}

@property (nonatomic) unsigned short port;
@property (nonatomic) unsigned short cellularPort;
@property (nonatomic) BOOL useDefaultInterfaceOnly;
@property (retain, nonatomic) NSIndexSet *cellularInterfaceIndices;
@property (nonatomic) BOOL wifiAssistEnabled;
@property (nonatomic) BOOL connectedToQR;
@property (nonatomic) BOOL disallowQUICPodForCellular;
@property (nonatomic) BOOL disableP2P;
@property (retain) NSString *cbuuid;
@property (retain) NSString *deviceUniqueID;
@property (readonly) NSString *linkTypeString;
@property (readonly) unsigned long long state;
@property (readonly) unsigned long long headerOverhead;
@property (weak) NSObject<IDSLinkDelegate> *delegate;
@property (weak) NSObject<IDSLinkDelegate> *alternateDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)derivePSKFromSessionKey:(id)key salt:(id)salt;
+ (BOOL)isSkywalkDemuxSupported;

/* instance methods */
- (id)initWithDeviceUniqueID:(id)id cbuuid:(id)cbuuid;
- (void)dealloc;
- (void)cleanup;
- (void)_cleanup:(BOOL)_cleanup;
- (void)invalidate;
- (id)generateLinkReport:(double)report isCurrentLink:(BOOL)link;
- (id)copyLinkStatsDict;
- (void)setWiFiAssistState:(BOOL)state;
- (BOOL)hasListener;
- (void)_failConnectionsRandomly;
- (BOOL)_shouldFail;
- (id)copyCurrentNetworkInterfaces;
- (id)newListenerWithClientUUID:(unsigned char x[16])uuid wantsWiFi:(BOOL)fi wantsCellular:(BOOL)cellular;
- (id)_dictionaryFromPSKParameters:(id)pskparameters;
- (BOOL)connect:(int)connect localAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address clientUUID:(unsigned char x[16])uuid sessionID:(id)id relaySessionToken:(id)token relaySessionKey:(id)key randomSaltBlock:(id /* block */)block pskTransportParameters:(id)parameters pskH3Settings:(id)settings newLocalPort:(unsigned short *)port disconnectAfterUse:(BOOL)use holdUntilFirstPacketReady:(BOOL)ready readyHandler:(id /* block */)handler;
- (BOOL)connectTCP:(int)tcp localAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address clientUUID:(unsigned char x[16])uuid sessionID:(id)id relaySessionToken:(id)token relaySessionKey:(id)key randomSaltBlock:(id /* block */)block newLocalPort:(unsigned short *)port disconnectAfterUse:(BOOL)use readyHandler:(id /* block */)handler;
- (unsigned short)_getConnectedLocalPortAndSetLocalEndpointForConnection:(id)connection;
- (void)peelOffReliableUnicastConnectionforLocalAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address sessionID:(id)id localQUICConnectionID:(id)id;
- (void)disconnectWithSessionID:(id)id localAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address waitTime:(double)time final:(BOOL)final;
- (void)disconnectP2PWithSessionID:(id)id localAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address;
- (void)_cancelNWLinkConnectionWithToken:(id)token removeNWLinkConnectionNow:(BOOL)now;
- (BOOL)createQUICPodQRConnectionsForSession:(id)session localAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address quicConnectionIDs:(id)ids channelNumber:(unsigned short)number;
- (BOOL)createQUICPodP2PConnectionsForSession:(id)session localAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address quicConnectionIDs:(id)ids negotiatedKeys:(id)keys channelNumber:(unsigned short)number completionHandler:(id /* block */)handler;
- (unsigned long long)sendPacketBuffer:(struct { char * x0; unsigned long long x1; long long x2; long long x3; unsigned int x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; unsigned int x16; struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } x17; struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } x18; struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } x19; unsigned short x20; unsigned char x21; int x22; S]CBBBI} x23[8{?=*Si[12S]QCSCBBS{?=SSSSS}BBi[4] char x24; char x25; int x26; double x27; unsigned char x28[16] unsigned long long x29; unsigned long long x30; id x31; int x32; unsigned int x33; unsigned short x34; unsigned char x35[0] } *)buffer toDeviceUniqueID:(id)id cbuuid:(id)cbuuid;
- (unsigned long long)sendPacketBufferArray:(struct  * *)array arraySize:(int)size toDeviceUniqueID:(id)id cbuuid:(id)cbuuid;
- (id)connectionInfoForLocalAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address clientUniquePID:(unsigned long long)pid sessionID:(id)id type:(unsigned long long)type isRelay:(BOOL)relay isCellular:(BOOL)cellular;
- (struct { unsigned char x0[5] unsigned char x1[5] })demuxPatternForQPodConnectionWithID:(unsigned int)id forNWLinkConnection:(id)connection;
- (id)_copyChildConnectionIDFor:(id)idfor clientUniquePID:(unsigned long long)pid sessionID:(id)id isRelay:(BOOL)relay isCellular:(BOOL)cellular isQUICPod:(BOOL)quicpod;
- (void)removeChildConnectionEvaluatorForSessionID:(id)id localAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address remoteAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address isRelay:(BOOL)relay;
- (BOOL)getEffectiveSourceAddress:(struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } *)address fromSourceAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address effectiveDestinationAddress:(struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } *)address fromDestinationAddress:(const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)address sessionID:(id)id isQRConnection:(BOOL)qrconnection;
- (id)_createNewListenerWithLocalPort:(unsigned short *)port;
- (void)_createUDPConnectionForNWLinkConnection:(id)connection readyHandler:(id /* block */)handler;
- (void)_scheduleRetryConnectionIfNeeded:(id)needed baseConnection:(id)connection kind:(const char *)kind retryIndex:(unsigned char)index retryBlock:(id /* block */)block;
- (void)_createChannelDataConnectionForH2:(id)h2;
- (void)_createChannelDataConnectionForH2:(id)h2 retryIndex:(unsigned char)index;
- (void)_tryReadH2Header:(id)header;
- (BOOL)_createChannelDataConnection:(id)connection;
- (BOOL)_createChannelDataConnection:(id)connection retryIndex:(unsigned char)index;
- (BOOL)_createReliableUnicastConnection:(id)connection localQUICConnectionID:(id)id;
- (void)_failNWLinkConnection:(id)connection;
- (void)_cancelNWLinkConnection:(id)connection remove:(BOOL)remove;
- (void)_createIndicationConnection:(id)connection;
- (void)_createIndicationConnection:(id)connection retryIndex:(unsigned char)index;
- (void)_peelOffQUICConnection:(id)quicconnection type:(unsigned long long)type readyHandler:(id /* block */)handler;
- (void)_peelOffQUICConnection:(id)quicconnection type:(unsigned long long)type readyHandler:(id /* block */)handler cancelHandler:(id /* block */)handler;
- (id)_findNewLocalEndpointForQRConnection:(id)qrconnection;
- (id)_createP2PQUICPodConnectionWithType:(unsigned int)type udpNWLinkConnection:(id)connection clientQUICConnectionID:(id)id serverQUICConnectionID:(id)id clientQUICConnectionIDNumber:(unsigned int)idnumber clientSecret:(id)secret serverSecret:(id)secret isServer:(BOOL)server completionHandler:(id /* block */)handler;
- (id)_createQUICPodConnectionWithType:(unsigned int)type quicNWLinkConnection:(id)connection clientQUICConnectionID:(id)id clientQUICConnectionIDAsNumber:(unsigned int)number serverQUICConnectionID:(id)id;
- (unsigned long long)_sendData:(id)data withPacketBuffer:(struct { char * x0; unsigned long long x1; long long x2; long long x3; unsigned int x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; unsigned int x16; struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } x17; struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } x18; struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } x19; unsigned short x20; unsigned char x21; int x22; S]CBBBI} x23[8{?=*Si[12S]QCSCBBS{?=SSSSS}BBi[4] char x24; char x25; int x26; double x27; unsigned char x28[16] unsigned long long x29; unsigned long long x30; id x31; int x32; unsigned int x33; unsigned short x34; unsigned char x35[0] } *)buffer NWLinkConnection:(id)connection;
- (void)_handleIncomingMessage:(id)message keepWaiting:(BOOL)waiting;
- (void)_handleIncomingIndicationMessage:(id)message;
- (id)protocolStackDescriptionFor:(id)for;
- (BOOL)_setParameters:(id)parameters NWLinkConnection:(id)connection sharePortWithListener:(BOOL)listener isTCP:(BOOL)tcp;
- (BOOL)_findExistingCollidingQRConnection:(id)qrconnection remoteEndpoint:(id)endpoint sessionID:(id)id localEndpointToUse:(id *)use;
- (void)_setWiFiAssistStateForCellularLink:(id)link isEnabled:(BOOL)enabled;
- (void)_addNWLinkConnection:(id)connection token:(id)token;
- (id)_NWLinkConnectionForToken:(id)token;
- (void)_removeNWLinkConnection:(id)connection token:(id)token;
- (void)_addChildConnectionEvaluator:(id)evaluator token:(id)token;
- (id)_childConnectionEvaluatorForToken:(id)token;
- (void)_addInterfaceIndex:(unsigned int)index NAT64LocalAddress:(unsigned int)address;
- (unsigned int)_NAT64LocalAddressForInterfaceIndex:(unsigned int)index;
- (void)_addExtraListener:(id)listener port:(unsigned short)port isCellular:(BOOL)cellular;
- (id)_extraListenerForPort:(unsigned short)port;
- (void)_removeExtraListener:(unsigned short)listener;
- (void)_addToRecentQRServerList:(id)list;
- (BOOL)_shouldAllowP2PConnectionTo:(id)to anotherRemoteEndpoint:(id)endpoint;
- (void)_addUDPConnectionInProgress:(id)progress;
- (BOOL)_doesUDPConnectionInProgressExist:(id)exist;
- (void)_removeUDPConnectionInProgress:(id)progress;
- (id)_createNetworkInterfaceArrayWithIPVersion:(unsigned long long)ipversion wantsWiFi:(BOOL)fi wantsCellular:(BOOL)cellular;
- (void)logConnectionTree;
- (void)logConnectionSubtree:(id)subtree indentation:(id)indentation;
- (id)_findListenerWithLocalEndpoint:(id)endpoint;
- (BOOL)_isLocalEndpointCellular:(id)cellular;
@end

#endif /* IDSNWLink_h */
