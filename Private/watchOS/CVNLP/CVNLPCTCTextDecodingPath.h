//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 105.150.0.0.0
//
#ifndef CVNLPCTCTextDecodingPath_h
#define CVNLPCTCTextDecodingPath_h
@import Foundation;

#include "CVNLPTextDecodingPath.h"
#include "CVNLPLanguageResourceBundle.h"
#include "CVNLPLexiconCursors.h"

@class NSString;
@protocol {vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}, {vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}, {vector<unsigned long, std::allocator<unsigned long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::allocator<unsigned long>>="__value_"^Q}};

@interface CVNLPCTCTextDecodingPath : CVNLPTextDecodingPath {
  /* instance variables */
  struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } _tokenString;
  struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } _histWordTokenIDs;
  unsigned long long _beginningCurrentWord;
  struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } _cumulativeTokenLogProbabilities;
  struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } _tokenBoundaryLogProbabilities;
  struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *__value_; } __end_cap_; } _tokenStringSegmentationPositions;
  struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *__value_; } __end_cap_; } _tokenMaxActivations;
  struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *__value_; } __end_cap_; } _tokenCommitCharacterLengths;
  BOOL _hasContext;
  BOOL _hasProblematicMixedScriptWords;
  BOOL _hasCalculatedHasProblematicMixedScriptWords;
  int _lastCodeUnitType;
}

@property double blankLogProbability;
@property double nonBlankLogProbability;
@property double historyLexiconLogProbability;
@property double activeWordLexiconLogProbability;
@property (readonly) double normalizedActivationLogProbability;
@property (readonly) double languageResourceLogProbability;
@property (readonly) double normalizedTotalLogProbability;
@property double lastTokenBoundaryLogProbability;
@property (readonly) BOOL optimizingAlignment;
@property (retain, nonatomic) CVNLPLexiconCursors *cursors;
@property (nonatomic) struct CVNLPLanguageModelWithState * characterLMState;
@property (readonly, retain, nonatomic) CVNLPLanguageResourceBundle *languageResourceBundle;
@property (readonly, nonatomic) NSString *latestExpandedSymbolIncludingPseudospace;
@property (readonly, nonatomic) NSString *latestExpandedSymbol;
@property (readonly, nonatomic) BOOL hasExpanded;
@property (readonly, nonatomic) id /* block */ scoringFunction;

/* class methods */
+ (void)applyWordLanguageModelProbabilityToPath:(id)path stemmedFromPath:(id)path isCommittingToken:(BOOL)token;
+ (id)_getQueue;

/* instance methods */
- (id)initWithLanguageResourceBundle:(id)bundle scoringFunction:(id /* block */)function initialCharacterLMState:(struct CVNLPLanguageModelWithState *)lmstate characterTokenIDs:(struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; })ids wordTokenIDs:(struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; })ids optimizingAlignment:(BOOL)alignment hasContext:(BOOL)context;
- (void)dealloc;
- (void)setCharacterLanguageModelLogProbability:(double)probability;
- (void)setWordLanguageModelLogProbability:(double)probability;
- (void)setCharacterCount:(long long)count;
- (void)setPseudoSpaceCount:(long long)count;
- (long long)characterCount;
- (long long)pseudoSpaceCount;
- (long long)tokenCount;
- (double)modelLogProbability;
- (double)lexiconScore;
- (BOOL)hasProblematicMixedScriptWords;
- (double)scoreForTokenIndex:(long long)index;
- (unsigned long long)_currentTokenStringLength;
- (void)commitTokenAtTimestep:(long long)timestep currentSymbolLogProbability:(double)probability commitAction:(long long)action string:(id)string stemmingFromPath:(id)path;
- (id)tokensWithTimestep:(long long)timestep isFinalTimestep:(BOOL)timestep;
- (id)description;
- (id)debugDescription;
- (long long)compare:(id)compare;
- (void)merge:(id)merge logProbCumulator:(id /* block */)cumulator;
- (void)updateLastTokenWithMaxActivation:(long long)activation totalLogProbability:(double)probability tokenBoundaryLogProbability:(double)probability;
- (id)childPathWithBlankLogProb:(double)prob;
- (id)pathByExtendingWithString:(id)string extendedPathString:(id)string blankLogProb:(double)prob nonBlankLogProb:(double)prob timestep:(long long)timestep commitAction:(long long)action symbolLogProb:(double)prob;
- (void)_updateCharacterLanguageModelLogProbabilityForString:(id)string stemmingFromPath:(id)path normalizedCodepoint:(unsigned int)codepoint;
- (void)_updateLexiconLogProbabilityForString:(id)string stemmingFromPath:(id)path;
- (float)_wordLanguageModelLogProbabilityForString:(id)string originalWordRanges:(id)ranges originalWordIDs:(struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; })ids wordRanges:(id)ranges wordIDs:(struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; })ids;
@end

#endif /* CVNLPCTCTextDecodingPath_h */
