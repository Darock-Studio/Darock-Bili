//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 523.0.0.0.0
//
#ifndef WFWeatherStoreService_h
#define WFWeatherStoreService_h
@import Foundation;

#include "WFNetworkRetryManager.h"
#include "WFWeatherStore-Protocol.h"
#include "WFWeatherStoreCache.h"
#include "WFWeatherStoreServiceConfiguration.h"

@class NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface WFWeatherStoreService : NSObject<WFWeatherStore>

@property (retain) NSObject<OS_dispatch_queue> *incomingRequestQueue;
@property (retain) NSObject<OS_dispatch_queue> *parseQueue;
@property (retain) NSObject<OS_dispatch_queue> *mapQueue;
@property struct os_unfair_lock_s { unsigned int x0; } retryLock;
@property (retain) NSMutableDictionary *UUIDToCallbackMap;
@property (retain) NSMutableDictionary *UUIDToURLMap;
@property (retain) NSMutableDictionary *URLToTaskMap;
@property (retain) NSMutableDictionary *URLToCallbackMap;
@property (copy, nonatomic) WFWeatherStoreServiceConfiguration *configuration;
@property (retain) WFWeatherStoreCache *cache;
@property (retain, nonatomic) WFNetworkRetryManager *retryManager;
@property (copy, nonatomic) id /* block */ forecastRequestStartingCallback;
@property (copy, nonatomic) id /* block */ locationGeocodeForCoordinateRequestStartingCallback;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (id)initWithConfiguration:(id)configuration;
- (id)initWithConfiguration:(id)configuration error:(id *)error;
- (void)invalidateCacheWithIdentifier:(id)identifier;
- (void)dealloc;
- (void)cancelTaskWithIdentifier:(id)identifier;
- (void)completeErroneousForecastRequestWithHandler:(id /* block */)handler requestIdentifier:(id)identifier error:(id)error;
- (void)forecastForLocation:(id)location locale:(id)locale onDate:(id)date requestIdentifier:(id)identifier options:(id)options completionHandler:(id /* block */)handler;
- (void)hourlyForecastForLocation:(id)location locale:(id)locale requestIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)dailyForecastForLocation:(id)location locale:(id)locale requestIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)airQualityForLocation:(id)location locale:(id)locale requestIdentifier:(id)identifier options:(id)options completionHandler:(id /* block */)handler;
- (void)forecast:(unsigned long long)forecast forLocation:(id)location locale:(id)locale requestIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)forecast:(unsigned long long)forecast forLocation:(id)location withUnits:(int)units locale:(id)locale requestIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)forecast:(unsigned long long)forecast forLocation:(id)location withUnits:(int)units locale:(id)locale requestIdentifier:(id)identifier requestOptions:(id)options completionHandler:(id /* block */)handler;
- (id)_cachedAirQualityConditionsForLocation:(id)location date:(id)date;
- (id)_cachedCurrentObservationsForLocation:(id)location date:(id)date;
- (id)_cachedHourlyForecastedConditionsForLocation:(id)location date:(id)date;
- (id)_cachedDailyForecastedConditionsForLocation:(id)location date:(id)date;
- (id)_cachedDailyPollenForecastedConditionsForLocation:(id)location date:(id)date;
- (id)_cachedHistoricalObservationsForLast24hForLocation:(id)location date:(id)date;
- (id)_cachedChangeForecastForLocation:(id)location date:(id)date;
- (id)_cachedSevereWeatherEventsForLocation:(id)location date:(id)date;
- (id)_cachedNextHourPrecipitationForLocation:(id)location date:(id)date;
- (id)_cachedData:(unsigned long long)data forLocation:(id)location date:(id)date;
- (BOOL)_isConnectivityAvailableForWeatherHost:(id *)host;
- (void)_forecastConditionsForTypes:(unsigned long long)types location:(id)location locale:(id)locale date:(id)date requestIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)_forecastConditionsForTypes:(unsigned long long)types location:(id)location units:(int)units locale:(id)locale date:(id)date requestIdentifier:(id)identifier requestOptions:(id)options completionHandler:(id /* block */)handler;
- (id)languageForLocale:(id)locale;
- (void)_forecastConditionsForTWCAQIAndTypes:(unsigned long long)types location:(id)location locale:(id)locale date:(id)date requestIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (id)_currentScaleCategoryForScale:(id)scale index:(unsigned long long)index;
- (void)_cacheObject:(id)object type:(unsigned long long)type date:(id)date forLocation:(id)location;
- (BOOL)_cacheParsedForecastData:(id)data types:(unsigned long long)types location:(id)location date:(id)date requestIdentifier:(id)identifier;
- (void)_enumerateForecastTypesIn:(unsigned long long)in usingBlock:(id /* block */)block;
- (void)_submitRequest:(id)request withIdentifier:(id)identifier forLocation:(id)location forecastTypes:(unsigned long long)types configuration:(id)configuration units:(int)units locale:(id)locale date:(id)date apiVersion:(id)version completionHandler:(id /* block */)handler;
- (BOOL)_handleDataTaskCompletionWithData:(id)data httpResponse:(id)response apiVersion:(id)version identifier:(id)identifier requestURL:(id)url dataTask:(id)task dataTaskError:(id)error startDate:(id)date;
- (void)_submitRequest:(id)request withIdentifier:(id)identifier forScaleNamed:(id)named language:(id)language configuration:(id)configuration apiVersion:(id)version completionHandler:(id /* block */)handler;
- (id)apiVersionForSettings:(id)settings;
- (void)requestSuccessForAPIVersion:(id)apiversion;
- (void)requestFailureForAPIVersion:(id)apiversion error:(id)error;
- (void)_cancelWithRequestIdentifier:(id)identifier;
- (id)_taskForURL:(id)url;
- (void)_setTask:(id)task requestIdentifier:(id)identifier callback:(id)callback forURL:(id)url;
- (void)_addCallback:(id)callback requestIdentifier:(id)identifier forURL:(id)url;
- (void)_executeCallbacksForURL:(id)url responseData:(id)data error:(id)error;
- (void)_cleanupCallbacksAndTasksForURL:(id)url;
@end

#endif /* WFWeatherStoreService_h */
