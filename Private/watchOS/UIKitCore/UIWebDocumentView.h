//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIWebDocumentView_h
#define UIWebDocumentView_h
@import Foundation;

#include "UIWebTiledView.h"
#include "UIAutoscroll.h"
#include "UIAutoscrollContainer-Protocol.h"
#include "UIColor.h"
#include "UIGestureRecognizerDelegate-Protocol.h"
#include "UIImage.h"
#include "UIInputContextHistory.h"
#include "UIKeyInput-Protocol.h"
#include "UIKeyboardInput-Protocol.h"
#include "UILongPressGestureRecognizer.h"
#include "UIPanGestureRecognizer.h"
#include "UIPreviewItemController.h"
#include "UIPreviewItemDelegate-Protocol.h"
#include "UITapGestureRecognizer.h"
#include "UITextAutoscrolling-Protocol.h"
#include "UITextChecker.h"
#include "UITextInputDelegate-Protocol.h"
#include "UITextInputMultiDocument-Protocol.h"
#include "UITextInputPasswordRules.h"
#include "UITextInputPrivate-Protocol.h"
#include "UITextInputSuggestionDelegate-Protocol.h"
#include "UITextInputTokenizer-Protocol.h"
#include "UITextInputTraits.h"
#include "UITextInteractionAssistant.h"
#include "UITextPosition.h"
#include "UITextRange.h"
#include "UIView.h"
#include "UIWebFileUploadPanel.h"
#include "UIWebFileUploadPanelDelegate-Protocol.h"
#include "UIWebPlaybackTargetPicker.h"
#include "UIWebTextPlaceholder.h"
#include "WebEditingDelegate-Protocol.h"
#include "WebFrameLoadDelegate-Protocol.h"
#include "WebThreadSafeUndoManager.h"
#include "_UIRotatingAlertControllerDelegate-Protocol.h"
#include "_UITextServiceSession.h"
#include "_UIWebDoubleTapDelegate-Protocol.h"
#include "_UIWebHighlightLongPressGestureRecognizer.h"
#include "_UIWebViewportHandler.h"

@class CALayer, DOMHTMLElement, DOMRange, NSArray, NSDictionary, NSIndexSet, NSString, RTIInputSystemSourceSession, WebHistoryItem, WebView;

@interface UIWebDocumentView : UIWebTiledView<UIPreviewItemDelegate, _UIRotatingAlertControllerDelegate, UITextAutoscrolling, UIAutoscrollContainer, UIGestureRecognizerDelegate, UIKeyboardInput, UITextInputPrivate, UIKeyInput, UITextInputTokenizer, UITextInputMultiDocument, _UIWebDoubleTapDelegate, UIWebFileUploadPanelDelegate, WebEditingDelegate, WebFrameLoadDelegate> {
  /* instance variables */
  WebView *_webView;
  id m_parentTextView;
  id _delegate;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _doubleTapRect;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _mainDocumentDoubleTapRect;
  struct CGPoint { double x; double y; } _scrollPoint;
  struct CGPoint { double x; double y; } _doubleTapStartPosition;
  double _doubleTapStartTime;
  struct CGSize { double width; double height; } _pendingSize;
  long long _orientation;
  DOMHTMLElement *_standaloneEditingElement;
  struct CGPoint { double x; double y; } _mouseDownPoint;
  double _mouseDownTime;
  UIAutoscroll *_autoscroll;
  struct __CFDictionary * _plugInViews;
  long long m_selectionGranularity;
  CALayer *_contentLayersHostingLayer;
  CALayer *_flattenedRotatingContentLayer;
  NSArray *_additionalSubviews;
  UITextInputTraits *_traits;
  UITapGestureRecognizer *_singleTapGestureRecognizer;
  UITapGestureRecognizer *_doubleTapGestureRecognizer;
  UITapGestureRecognizer *_twoFingerDoubleTapGestureRecognizer;
  _UIWebHighlightLongPressGestureRecognizer *_highlightLongPressGestureRecognizer;
  UILongPressGestureRecognizer *_longPressGestureRecognizer;
  UIPanGestureRecognizer *_twoFingerPanGestureRecognizer;
  UILongPressGestureRecognizer *_previewGestureRecognizer;
  UILongPressGestureRecognizer *_previewSecondaryGestureRecognizer;
  BOOL _panGestureWasEnabled;
  BOOL _pinchGestureWasEnabled;
  UIPreviewItemController *_previewItemController;
  struct { NSTimer *timer; struct CGPoint { double x; double y; } location; long long modifierFlags; BOOL isBlocked; BOOL isCancelled; BOOL isOnWebThread; BOOL isDisplayingHighlight; BOOL attemptedClick; struct CGPoint { double x; double y; } lastPanTranslation; DOMNode *element; interactionSheet *delegate; UIWebRotatingAlertController * x0; BOOL allowsImageSheet; BOOL allowsDataDetectorsSheet; BOOL allowsLinkSheet; BOOL acceptsFirstResponder; double documentScale; NSArray *previewHintRects; UIImage *previewHintImage; } _interaction;
  _UIWebViewportHandler *_viewportHandler;
  int _documentType;
  float _documentScale;
  float _previousDocumentScale;
  struct CGSize { double width; double height; } _fixedLayoutOriginRoundingDelta;
  struct CGSize { double width; double height; } _fixedLayoutSizeRoundingDelta;
  unsigned int _mouseDownCount;
  unsigned int _printModeCount;
  unsigned long long _dataDetectorTypes;
  unsigned int x :1 _webCoreNeedsSetNeedsDisplay;
  unsigned int x :1 _webCoreNeedsDraw;
  unsigned int x :1 _ignoresFocusingMouse;
  unsigned int x :1 _ignoresKeyEvents;
  unsigned int x :1 _autoresizes;
  unsigned int x :1 _ignoresViewportOverflowWhenAutoresizing;
  unsigned int x :1 _updatingSize;
  unsigned int x :1 _scalesToFit;
  unsigned int x :1 _updatesScrollView;
  unsigned int x :1 _hasCustomScale;
  unsigned int x :1 _shouldRestoreScrollPosition;
  unsigned int x :1 _pageNeedsReset;
  unsigned int x :1 _hasScrollPoint;
  unsigned int x :1 _gesturesDisabled;
  unsigned int x :1 _doubleTapRectIsReplaced;
  unsigned int x :1 _standaloneEditableView;
  unsigned int x :1 _widgetEditingView;
  unsigned int x :1 _mouseDragged;
  unsigned int x :1 _mouseReentrancyGuard;
  unsigned int x :1 _isShowingFullScreenPlugIn;
  unsigned int x :1 _isSettingRedrawFrame;
  unsigned int x :1 _needsScrollNotifications;
  unsigned int x :1 _loadsSynchronously;
  unsigned int x :1 _mouseDown;
  unsigned int x :1 _geolocationDialogAllowed;
  unsigned int x :1 _usingMinimalTilesDuringLoading;
  unsigned int x :2 _sheetsCount;
  unsigned int x :1 _didFirstVisuallyNonEmptyLayout;
  unsigned int x :1 _loadInProgress;
  unsigned int x :1 _uiwdvIsResigningFirstResponder;
  unsigned int x :1 _sizeUpdateOccurredWhileSuspended;
  unsigned int x :1 _ignoresFocusEventFromFirstResponderChange;
  unsigned int x :1 _shouldCloseWebViewAtDealloc;
  unsigned int x :1 _shouldRemoveUserStyleSheet;
  unsigned int x :1 _hasDrawnTiles;
  unsigned int x :1 _subviewCachesNeedUpdate;
  unsigned int x :1 _avoidFixedPositionUpdateViaDidScroll;
  unsigned int x :1 _inspectorSearchingForNode;
  unsigned int x :1 _previousScrollWasScrollToTop;
  unsigned int x :1 _pageIsLoadedFromPageCache;
  unsigned int x :1 _shouldSendWillShowInteractionHighlight;
  WebThreadSafeUndoManager *_undoManager;
  UITextInteractionAssistant *_textSelectionAssistant;
  UITextChecker *_textChecker;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _caretInsets;
  UIWebFileUploadPanel *_fileUploadPanel;
  UIWebTextPlaceholder *_textPlaceholder;
  id _textPlaceholderRemovalObserver;
  UIWebPlaybackTargetPicker *_playbackTargetPicker;
  struct _UIWebViewportConfiguration { struct CGSize { double width; double height; } size; float initialScale; float minimumScale; float maximumScale; BOOL allowsUserScaling; BOOL allowsShrinkToFit; BOOL avoidsUnsafeArea; } _defaultViewportConfigurations[5];
  _UITextServiceSession *_definitionSession;
  _UITextServiceSession *_learnSession;
  _UITextServiceSession *_shareSession;
  _UITextServiceSession *_lookupSession;
  _UITextServiceSession *_translateSession;
  WebHistoryItem *_latestCommittedPageLoadHistoryItem;
}

@property BOOL _acceptsFirstResponder;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) int selectionState;
@property (nonatomic) struct CGPoint { double x0; double x1; } autoscrollContentOffset;
@property (nonatomic) BOOL shouldAutoscroll;
@property (retain, nonatomic) DOMRange *rangeToRestoreAfterDictation;
@property (nonatomic) BOOL doubleTapEnabled;
@property (nonatomic) BOOL shouldIgnoreCustomViewport;
@property (nonatomic) BOOL shouldOnlyRecognizeGesturesOnActiveElements;
@property (nonatomic) BOOL sizeUpdatesSuspended;
@property (nonatomic) BOOL mediaPlaybackAllowsAirPlay;
@property (nonatomic) BOOL suppressesIncrementalRendering;
@property (nonatomic) BOOL alwaysConstrainsScale;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } exposedScrollViewRect;
@property (readonly, nonatomic) BOOL wantsMinimalUI;
@property (readonly, nonatomic) unsigned long long renderTreeSize;
@property (nonatomic) unsigned long long renderTreeSizeThresholdForReset;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) NSObject<UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (nonatomic) BOOL _systemCursorAccessoriesDisabled;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) NSObject<UITextInputDelegate> *inputDelegate;
@property (readonly, nonatomic) NSObject<UITextInputTokenizer> *tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (@dynamic, nonatomic) long long autocapitalizationType;
@property (@dynamic, nonatomic) long long autocorrectionType;
@property (@dynamic, nonatomic) long long spellCheckingType;
@property (@dynamic, nonatomic) long long smartQuotesType;
@property (@dynamic, nonatomic) long long smartDashesType;
@property (@dynamic, nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long inlinePredictionType;
@property (@dynamic, nonatomic) long long keyboardType;
@property (@dynamic, nonatomic) long long keyboardAppearance;
@property (@dynamic, nonatomic) long long returnKeyType;
@property (@dynamic, nonatomic) BOOL enablesReturnKeyAutomatically;
@property (@dynamic, nonatomic) BOOL secureTextEntry;
@property (copy, @dynamic, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (@dynamic, nonatomic) struct __CFCharacterSet * textTrimmingSet;
@property (retain, @dynamic, nonatomic) UIColor *insertionPointColor;
@property (retain, @dynamic, nonatomic) UIColor *selectionBarColor;
@property (retain, @dynamic, nonatomic) UIColor *selectionHighlightColor;
@property (retain, @dynamic, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (@dynamic, nonatomic) unsigned long long insertionPointWidth;
@property (@dynamic, nonatomic) int textLoupeVisibility;
@property (@dynamic, nonatomic) int textSelectionBehavior;
@property (@dynamic, nonatomic) id textSuggestionDelegate;
@property (@dynamic, nonatomic) BOOL isSingleLineDocument;
@property (@dynamic, nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (@dynamic, nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (@dynamic, nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;

/* class methods */
+ (id)_createDefaultHighlightView;
+ (id)_sharedHighlightView;
+ (Class)layerClass;
+ (double)getTimestamp;
+ (void)initialize;
+ (BOOL)hasLandscapeOrientation;
+ (id)standardTextViewPreferences;

/* instance methods */
- (BOOL)isInPrintMode;
- (id)_beginPrintModeForHTMLView:(id)htmlview withSize:(struct CGSize { double x0; double x1; })size startOffset:(double)offset minimumLayoutWidth:(double)width maximumLayoutWidth:(double)width tileClippedContent:(BOOL)content;
- (id)_beginPrintModeForPDFView:(id)pdfview withSize:(struct CGSize { double x0; double x1; })size startOffset:(double)offset minimumLayoutWidth:(double)width maximumLayoutWidth:(double)width;
- (id)beginPrintModeWithWidth:(double)width height:(double)height startOffset:(double)offset shrinkToFit:(BOOL)fit forFrame:(id)frame;
- (id)beginPrintModeWithWidth:(double)width height:(double)height startOffset:(double)offset shrinkToFit:(BOOL)fit tileClippedContent:(BOOL)content forFrame:(id)frame;
- (id)beginPrintModeForFrame:(id)frame withWidth:(double)width height:(double)height startOffset:(double)offset shrinkToFit:(BOOL)fit tileClippedContent:(BOOL)content;
- (id)beginPrintModeWithSize:(struct CGSize { double x0; double x1; })size startOffset:(double)offset minimumLayoutWidth:(double)width maximumLayoutWidth:(double)width tileClippedContent:(BOOL)content;
- (id)beginPrintModeForFrame:(id)frame withSize:(struct CGSize { double x0; double x1; })size startOffset:(double)offset minimumLayoutWidth:(double)width maximumLayoutWidth:(double)width tileClippedContent:(BOOL)content;
- (void)releasePrintMode;
- (void)endPrintMode;
- (void)_endPrintMode;
- (void)_drawPDFPagesForPage:(unsigned long long)page withPaginationInfo:(id)info;
- (void)drawPage:(unsigned long long)page withPaginationInfo:(id)info;
- (void)selectWord;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromSelectedFrameCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })coordinates;
- (struct CGPoint { double x0; double x1; })convertPointToSelectedFrameCoordinates:(struct CGPoint { double x0; double x1; })coordinates;
- (void)selectionChanged;
- (void)selectionChanged:(id)changed;
- (void)clearSelection;
- (BOOL)hasEditableSelection;
- (BOOL)hasMarkedText;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x0; double x1; })point;
- (unsigned long long)offsetInMarkedTextForSelection:(id)selection;
- (void)collapseSelection;
- (void)setCaretInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })caretInsets;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForVisiblePosition:(id)position;
- (long long)selectionBaseWritingDirection;
- (void)toggleBaseWritingDirection;
- (void)setBaseWritingDirection:(long long)direction;
- (void)setRangedSelectionBaseToCurrentSelection;
- (void)setRangedSelectionBaseToCurrentSelectionStart;
- (void)setRangedSelectionBaseToCurrentSelectionEnd;
- (void)clearRangedSelectionInitialExtent;
- (void)setRangedSelectionInitialExtentToCurrentSelectionStart;
- (void)setRangedSelectionInitialExtentToCurrentSelectionEnd;
- (BOOL)setRangedSelectionExtentPoint:(struct CGPoint { double x0; double x1; })point baseIsStart:(BOOL)start;
- (void)setRangedSelectionExtentPoint:(struct CGPoint { double x0; double x1; })point baseIsStart:(BOOL)start allowFlipping:(BOOL)flipping;
- (void)setSelectionWithFirstPoint:(struct CGPoint { double x0; double x1; })point secondPoint:(struct CGPoint { double x0; double x1; })point;
- (id)wordAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setSelectedDOMRange:(id)domrange affinity:(unsigned long long)affinity;
- (id)textInDOMRange:(id)domrange;
- (id)selectionRectsForDOMRange:(id)domrange;
- (id)selectionRects;
- (void)smartExtendRangedSelection:(int)selection;
- (void)setRangedSelectionWithExtentPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setSelectionToEnd;
- (void)setSelectionToStart;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentFrameForView:(id)view;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })autoscroll;
- (void)cancelAutoscroll;
- (void)scrollSelectionToVisible:(BOOL)visible;
- (void)setSelectionWithPoint:(struct CGPoint { double x0; double x1; })point;
- (id)webVisiblePositionForPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleBounds;
- (id)asText;
- (id)positionAtStartOrEndOfWord:(id)word;
- (BOOL)mouseEventsChangeSelection;
- (struct CGPoint { double x0; double x1; })constrainedPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_createSheetWithElementActions:(id)actions showLinkTitle:(BOOL)title;
- (void)_appendOpenActionsForURL:(id)url actions:(id)actions;
- (void)_showImageSheet;
- (void)_showLinkSheet;
- (void)actionDidFinish;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_presentationRectForSheetGivenPoint:(struct CGPoint { double x0; double x1; })point inHostView:(id)view;
- (id)hostViewForSheet:(id)sheet;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })initialPresentationRectInHostViewForSheet:(id)sheet;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })presentationRectInHostViewForSheet:(id)sheet;
- (void)_registerPreview;
- (void)_unregisterPreview;
- (BOOL)isPreviewing;
- (BOOL)_previewAllowedForPosition:(struct CGPoint { double x0; double x1; })position;
- (BOOL)_interactionShouldBeginFromPreviewItemController:(id)controller forPosition:(struct CGPoint { double x0; double x1; })position;
- (id)_dataForPreviewItemController:(id)controller atPosition:(struct CGPoint { double x0; double x1; })position type:(long long *)type;
- (id)_presentedViewControllerForPreviewItemController:(id)controller;
- (void)_previewItemController:(id)controller willPresentPreview:(id)preview forPosition:(struct CGPoint { double x0; double x1; })position inSourceView:(id)view;
- (void)_collectPreviewRevealInformationIfNeeded;
- (void)_clearPreviewRevealInformation;
- (void)_previewItemController:(id)controller didDismissPreview:(id)preview committing:(BOOL)committing;
- (void)_previewItemController:(id)controller commitPreview:(id)preview;
- (id)_presentationSnapshotForPreview;
- (id)_presentationRectsForPreview;
- (id)_presentationSnapshotForPreviewItemController:(id)controller;
- (id)_presentationRectsForPreviewItemController:(id)controller;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })computeRectForElement:(id)element withHighligh:(id)highligh isInverted:(BOOL)inverted;
- (void)_interactionStartedFromPreviewItemController:(id)controller;
- (void)_interactionStoppedFromPreviewItemController:(id)controller;
- (void)clearInteractionTimer;
- (void)performInteractionSelector:(SEL)selector afterDelay:(double)delay;
- (void)_resetInteractionWithLocation:(struct CGPoint { double x0; double x1; })location modifierFlags:(long long)flags;
- (void)startInteractionWithLocation:(struct CGPoint { double x0; double x1; })location;
- (void)continueInteractionWithLocation:(struct CGPoint { double x0; double x1; })location;
- (void)tapInteractionWithLocation:(struct CGPoint { double x0; double x1; })location;
- (void)validateInteractionWithLocation:(struct CGPoint { double x0; double x1; })location;
- (BOOL)startActionSheet;
- (BOOL)isInInteraction;
- (BOOL)willInteractWithLocation:(struct CGPoint { double x0; double x1; })location;
- (void)installGestureRecognizers;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (BOOL)gestureRecognizer:(id)recognizer canPreventGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer canBePreventedByGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)recognizer;
- (void)_singleTapRecognized:(id)recognized;
- (void)_doubleTapRecognized:(id)recognized;
- (void)_twoFingerDoubleTapRecognized:(id)recognized;
- (SEL)_actionForLongPressOnElement:(id)element;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (void)_highlightLongPressRecognized:(id)recognized;
- (void)_longPressRecognized:(id)recognized;
- (void)_twoFingerPanRecognized:(id)recognized;
- (void)_syntheticMouseEventNotHandledAtLocation:(struct CGPoint { double x0; double x1; })location;
- (void)performClick:(id)click;
- (id)newMouseEvent:(int)event;
- (void)_sendMouseMoveAndAttemptClick:(id)click;
- (void)attemptClick:(id)click;
- (void)webView:(id)view didObserveDeferredContentChange:(int)change forFrame:(id)frame;
- (void)webViewDidPreventDefaultForEvent:(id)event;
- (id)approximateNodeAtViewportLocation:(struct CGPoint { double x0; double x1; } *)location;
- (id)deepestNodeAtViewportLocation:(struct CGPoint { double x0; double x1; })location;
- (void)highlightApproximateNodeInverted:(BOOL)inverted;
- (void)hideTapHighlight;
- (void)highlightApproximateNodeAndDisplayInfoSheet;
- (void)resetInteraction;
- (void)completeInteraction;
- (void)cancelInteraction;
- (void)deferInteraction;
- (void)cancelInteractionWithImmediateDisplay:(BOOL)display;
- (id)_targetURL;
- (void)_didDismissElementSheet;
- (void)_cleanupSheet;
- (void)sendScrollWheelEvents;
- (BOOL)supportsTwoFingerScrollingAtTouchLocation:(struct CGPoint { double x0; double x1; })location andLocation:(struct CGPoint { double x0; double x1; })location;
- (void)setInteractionDelegate:(id)delegate;
- (id)interactionDelegate;
- (void)setAllowsImageSheet:(BOOL)sheet;
- (void)setAllowsDataDetectorsSheet:(BOOL)sheet;
- (void)setAllowsLinkSheet:(BOOL)sheet;
- (id)interactionElement;
- (struct CGPoint { double x0; double x1; })interactionLocation;
- (id)superviewForSheet;
- (id)_doubleTapGestureRecognizer;
- (void)_setAcceptsFirstResponder:(BOOL)responder;
- (void)_restoreViewportSettingsWithSize:(struct CGSize { double x0; double x1; })size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })webViewFrameForUIFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })uiframe;
- (id)initSimpleHTMLDocumentWithStyle:(id)style frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame preferences:(id)preferences groupName:(id)name;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithWebView:(id)view frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)_inspectorDidStartSearchingForNode:(id)node;
- (void)_inspectorDidStopSearchingForNode:(id)node;
- (void)_removeDefinitionController:(BOOL)controller;
- (void)_removeShareController:(BOOL)controller;
- (void)_removeShortcutController:(BOOL)controller;
- (BOOL)_presentViewController:(id)controller animated:(BOOL)animated completion:(id /* block */)completion;
- (void)_dismissViewControllerAnimated:(BOOL)animated completion:(id /* block */)completion;
- (void)_setFont:(id)font;
- (void)_setTextColor:(id)color;
- (void)dealloc;
- (BOOL)didFirstVisuallyNonEmptyLayout;
- (BOOL)hasDrawnTiles;
- (void)willMoveToWindow:(id)window;
- (void)willMoveToSuperview:(id)superview;
- (void)didMoveToSuperview;
- (void)stopLoading:(id)loading;
- (void)setDelegate:(id)delegate;
- (void)_runLoadBlock:(id /* block */)block;
- (void)_cleanUpFrameStateAndLoad:(id /* block */)load;
- (void)loadRequest:(id)request;
- (void)loadHTMLString:(id)htmlstring baseURL:(id)url;
- (void)loadData:(id)data MIMEType:(id)mimetype textEncodingName:(id)name baseURL:(id)url;
- (void)setLoadsSynchronously:(BOOL)synchronously;
- (BOOL)loadsSynchronously;
- (id)webView;
- (id)_groupName;
- (id)_focusedOrMainFrame;
- (void)setUserStyleSheet:(id)sheet;
- (void)setDetectsPhoneNumbers:(BOOL)numbers;
- (BOOL)detectsPhoneNumbers;
- (BOOL)_dataDetectionIsActivated;
- (unsigned long long)effectiveDataDetectorTypes;
- (void)setDataDetectorTypes:(unsigned long long)types;
- (unsigned long long)dataDetectorTypes;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)_setDocumentScale:(float)scale;
- (float)_documentScale;
- (float)minimumScaleForMinimumSize:(struct CGSize { double x0; double x1; })size;
- (float)initialScale;
- (float)maximumScale;
- (float)minimumScale;
- (double)_zoomedDocumentScale;
- (void)_updateScrollViewBoundaryZoomScales;
- (void)viewportHandlerDidChangeScales:(id)scales;
- (void)viewportHandler:(id)handler didChangeViewportSize:(struct CGSize { double x0; double x1; })size;
- (void)viewportHandler:(id)handler didChangeAvoidsUnsafeArea:(BOOL)area;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toFrame:(id)frame;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromFrame:(id)frame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toFrame:(id)frame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromFrame:(id)frame;
- (void)_setDocumentType:(int)type overrideCustomConfigurations:(BOOL)configurations viewportArguments:(id)arguments;
- (void)_setDocumentType:(int)type;
- (void)_updateSize;
- (void)_clearDoubleTapRect;
- (void)_applyViewportArguments:(id)arguments;
- (void)webView:(id)view didReceiveViewportArguments:(id)arguments;
- (BOOL)isClassicViewportMode;
- (void)webView:(id)view needsScrollNotifications:(id)notifications forFrame:(id)frame;
- (BOOL)needsScrollNotifications;
- (void)sendScrollEventIfNecessary;
- (void)sendScrollEventIfNecessaryWasUserScroll:(BOOL)scroll;
- (void)resetTilingAfterLoadComplete;
- (void)webView:(id)view didFinishLoadForFrame:(id)frame;
- (void)webThreadWebViewDidLayout:(id)layout byScrolling:(BOOL)scrolling;
- (void)_selectionLayoutChangedByScrolling:(BOOL)scrolling;
- (void)_editableSelectionLayoutChangedByScrolling:(BOOL)scrolling;
- (void)webViewDidStartOverflowScroll:(id)scroll;
- (void)webViewDidEndOverflowScroll:(id)scroll;
- (void)webView:(id)view runOpenPanelForFileButtonWithResultListener:(id)listener configuration:(id)configuration;
- (void)webViewDidRestoreFromPageCache:(id)cache;
- (void)webView:(id)view didFirstVisuallyNonEmptyLayoutInFrame:(id)frame;
- (void)webView:(id)view didFailLoadWithError:(id)error forFrame:(id)frame;
- (void)webView:(id)view didChangeLocationWithinPageForFrame:(id)frame;
- (void)webView:(id)view didCommitLoadForFrame:(id)frame;
- (void)webViewDidReceiveMobileDocType:(id)type;
- (void)_WAKViewSizeDidChange:(id)change;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })documentBounds;
- (void)setAutoresizes:(BOOL)autoresizes;
- (void)setIgnoresViewportOverflowWhenAutoresizing:(BOOL)autoresizing;
- (void)setMinimumSize:(struct CGSize { double x0; double x1; })size;
- (void)setMinimumSize:(struct CGSize { double x0; double x1; })size updateCurrentViewportConfigurationSize:(BOOL)size;
- (void)setViewportSize:(struct CGSize { double x0; double x1; })size forDocumentTypes:(int)types;
- (void)setInitialScale:(float)scale forDocumentTypes:(int)types;
- (void)setMinimumScale:(float)scale forDocumentTypes:(int)types;
- (void)setMaximumScale:(float)scale forDocumentTypes:(int)types;
- (void)setAllowsUserScaling:(BOOL)scaling forDocumentTypes:(int)types;
- (void)setAllowsShrinkToFit:(BOOL)fit forDocumentTypes:(int)types;
- (void)setAvoidsUnsafeArea:(BOOL)area forDocumentTypes:(int)types;
- (void)fileUploadPanelDidDismiss:(id)dismiss;
- (void)setUpdatesScrollView:(BOOL)view;
- (BOOL)updatesScrollView;
- (void)_restoreScrollPointForce:(BOOL)force;
- (void)_resetForNewPage;
- (void)_saveStateToHistoryItem:(id)item;
- (void)saveStateToCurrentHistoryItem;
- (void)webView:(id)view saveStateToHistoryItem:(id)item forFrame:(id)frame;
- (void)webView:(id)view restoreStateFromHistoryItem:(id)item forFrame:(id)frame force:(BOOL)force;
- (BOOL)webView:(id)view shouldScrollToPoint:(struct CGPoint { double x0; double x1; })point forFrame:(id)frame;
- (void)_showPendingContentLayers;
- (void)forceLayout;
- (void)layoutSubviews;
- (void)setSmoothsFonts:(BOOL)fonts;
- (void)setDrawsBackground:(BOOL)background;
- (void)setOpaque:(BOOL)opaque;
- (struct CGImage *)newSnapshotWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)cancelMouseTracking;
- (BOOL)cancelTouchTracking;
- (void)setIgnoresFocusingMouse:(BOOL)mouse;
- (void)setIgnoresKeyEvents:(BOOL)events;
- (void)setTilingArea:(int)area;
- (void)_cancelLongPressGestureRecognizer;
- (void)_didScroll;
- (BOOL)_isSubviewOfPlugInView:(id)view;
- (void)_notifyPlugInViewsOfWillBeginZooming;
- (void)_notifyPlugInViewsOfDidEndZooming;
- (void)_notifyPlugInViewsOfDidZoom;
- (void)_notifyPlugInViewsOfScaleChange;
- (void)_didMoveFromWindow:(id)window toWindow:(id)window;
- (void)_notifyContentHostingLayersOfScaleChange;
- (void)_updateWebKitExposedScrollViewRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_documentViewVisibleRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_layoutRectForFixedPositionObjects;
- (void)_updateFixedPositionedObjectsLayoutRectUsingWebThread:(BOOL)thread synchronize:(BOOL)synchronize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustedLayoutRectForFixedPositionObjects;
- (void)_updateFixedPositionContent;
- (void)writeDataToPasteboard:(id)pasteboard;
- (long long)getPasteboardItemsCount;
- (BOOL)isInsideRichlyEditableTextWidget;
- (BOOL)hasRichlyEditableSelection;
- (BOOL)fragmentContainsRichContent:(id)content;
- (BOOL)performsTwoStepPaste:(id)paste;
- (BOOL)_insertFragmentWithoutPreservingStyle:(id)style atDestination:(id)destination smartReplace:(BOOL)replace collapseToEnd:(BOOL)end;
- (id)_supportedPasteboardTypesForCurrentSelection;
- (id)supportedPasteboardTypesForCurrentSelection;
- (id)readDataFromPasteboard:(id)pasteboard withIndex:(long long)index;
- (long long)getPasteboardChangeCount;
- (void)showPlaybackTargetPicker:(BOOL)picker fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (int)deviceOrientation;
- (BOOL)shouldSuppressPasswordEcho;
- (void)revealedSelectionByScrollingWebFrame:(id)frame;
- (void)_webthread_webView:(id)view attachRootLayer:(id)layer;
- (void)webViewDidCommitCompositingLayerChanges:(id)changes;
- (void)_setSubviewCachesNeedUpdate:(BOOL)update;
- (id)_collectAdditionalSubviews;
- (void)_updateSubviewCaches;
- (BOOL)_shouldUpdateSubviewCachesForPlugins;
- (id)subviews;
- (void)webViewDidDrawTiles:(id)tiles;
- (void)_renderUnbufferedInContext:(struct CGContext *)context;
- (id)checkSpellingOfString:(id)string;
- (void)_reshapePlugInViews;
- (void)redrawScaledDocument;
- (void)updateInteractionElements;
- (void)willRotateInteractionSheet;
- (void)didRotateInteractionSheet;
- (void)sendOrientationEventForOrientation:(long long)orientation;
- (BOOL)isDoubleTapEnabled;
- (BOOL)_handleSingleTapZoomPreClickAtLocation:(struct CGPoint { double x0; double x1; })location;
- (void)_handleSingleTapZoomPostClickAtLocation:(struct CGPoint { double x0; double x1; })location;
- (void)_handleDoubleTapAtLocation:(struct CGPoint { double x0; double x1; })location;
- (void)_handleTwoFingerDoubleTapAtLocation:(struct CGPoint { double x0; double x1; })location;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })doubleTapRect;
- (BOOL)doubleTapRectIsReplaced;
- (void)assistFormNode:(id)node;
- (void)_resetFormDataForFrame:(id)frame;
- (void)_clearAllConsoleMessages;
- (void)_focusAndAssistFormNode:(id)node;
- (id)formElement;
- (id)textFormElement;
- (void)setIsStandaloneEditableView:(BOOL)view;
- (BOOL)isStandaloneEditableView;
- (void)setStandaloneEditingElement:(id)element;
- (id)standaloneEditingElement;
- (void)setIsWidgetEditingView:(BOOL)view;
- (BOOL)isWidgetEditingView;
- (BOOL)updateKeyboardStateOnResponderChanges;
- (BOOL)canBecomeFirstResponder;
- (BOOL)canResignFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)deferredBecomeFirstResponder;
- (BOOL)resignFirstResponder;
- (id)_responderForBecomeFirstResponder;
- (BOOL)makeWKFirstResponder;
- (BOOL)clearWKFirstResponder;
- (void)ensureSelection;
- (void)setInteractionAssistantGestureRecognizers;
- (void)_undoManagerDidUndo:(id)undo;
- (void)_undoManagerDidRedo:(id)redo;
- (id)undoManagerForWebView:(id)view;
- (id)undoManager;
- (id)_parentTextView;
- (void)_setParentTextView:(id)view;
- (void)setContinuousSpellCheckingEnabled:(BOOL)enabled;
- (id)delegate;
- (BOOL)handleKeyTextCommandForCurrentEvent;
- (BOOL)handleKeyAppCommandForCurrentEvent;
- (void)addInputString:(id)string withFlags:(unsigned long long)flags;
- (void)addInputString:(id)string;
- (void)deleteFromInput;
- (void)deleteFromInputWithFlags:(unsigned long long)flags;
- (void)disableClearsOnInsertion;
- (void)deleteBackward;
- (void)insertText:(id)text;
- (BOOL)isEditingSingleLineElement;
- (void)insertDictationResult:(id)result withCorrectionIdentifier:(id)identifier;
- (id)metadataDictionariesForDictationResults;
- (id)dictationResultMetadataForRange:(id)range;
- (BOOL)hasRangedSelection;
- (BOOL)_textPlaceholderHasBeenRemoved;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })size;
- (void)removeTextPlaceholder:(id)placeholder;
- (struct CGSize { double x0; double x1; })_sizeForDictationResultPlaceholder;
- (id)_insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)placeholder;
- (void)_finishedUsingTextPlaceholder;
- (void)removeDictationResultPlaceholder:(id)placeholder willInsertResult:(BOOL)result;
- (void)_removeTextPlaceholder:(id)placeholder willInsertResult:(BOOL)result;
- (id)dictationInterpretations;
- (void)clearMarkedText;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)typing replacementText:(id)text;
- (void)replaceCurrentWordWithText:(id)text;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)confirmMarkedText:(id)text;
- (unsigned short)characterInRelationToCaretSelection:(int)selection;
- (unsigned short)characterAfterCaretSelection;
- (id)fontForCaretSelection;
- (id)textColorForCaretSelection;
- (id)rectsForNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange;
- (int)wordOffsetInRange:(id)range;
- (void)replaceSelectionWithWebArchive:(id)archive selectReplacement:(BOOL)replacement smartReplace:(BOOL)replace;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (id)selectedDOMRange;
- (void)setSelectedDOMRange:(id)domrange affinityDownstream:(BOOL)downstream;
- (id)rangeByMovingCurrentSelection:(int)selection;
- (id)rangeByExtendingCurrentSelection:(int)selection;
- (void)extendCurrentSelection:(int)selection;
- (BOOL)hasSelection;
- (BOOL)selectionAtDocumentStart;
- (BOOL)selectionAtWordStart;
- (void)selectAll;
- (void)setText:(id)text;
- (id)text;
- (BOOL)hasContent;
- (void)setCaretChangeListener:(id)listener;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertCaretRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)implementationWebView;
- (BOOL)keyboardInput:(id)input shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (BOOL)keyboardInput:(id)input shouldInsertText:(id)text isMarkedText:(BOOL)text;
- (BOOL)keyboardInputShouldDelete:(id)delete;
- (BOOL)keyboardInputChanged:(id)changed;
- (void)keyboardInputChangedSelection:(id)selection;
- (id)automaticallySelectedOverlay;
- (void)setBottomBufferHeight:(double)height;
- (BOOL)requiresKeyEvents;
- (void)handleKeyWebEvent:(id)event;
- (void)setPaused:(BOOL)paused;
- (void)setPaused:(BOOL)paused withEvents:(BOOL)events;
- (id)webView:(id)view plugInViewWithArguments:(id)arguments fromPlugInPackage:(id)package;
- (void)webView:(id)view willShowFullScreenForPlugInView:(id)view;
- (void)webView:(id)view didHideFullScreenForPlugInView:(id)view;
- (void)didRemovePlugInView:(id)view;
- (BOOL)isShowingFullScreenPlugInUI;
- (BOOL)hasPlugInSubviews;
- (void)webView:(id)view willAddPlugInView:(id)view;
- (id)textInputTraits;
- (void)forwardInvocation:(id)invocation;
- (id)methodSignatureForSelector:(SEL)selector;
- (void)takeTraitsFrom:(id)from;
- (BOOL)_restoreFirstResponder;
- (BOOL)isEditable;
- (BOOL)isEditing;
- (void)beginSelectionChange;
- (void)endSelectionChange;
- (void)updateSelection;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point animated:(BOOL)animated;
- (void)endFloatingCursor;
- (void)cut:(id)cut;
- (void)copy:(id)copy;
- (void)toggleBoldface:(id)boldface;
- (void)toggleItalics:(id)italics;
- (void)toggleUnderline:(id)underline;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_shortcutPresentationRect;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (void)_shareText:(id)text fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_share:(id)_share;
- (void)_shareElement:(id)element withURL:(id)url;
- (BOOL)_isDisplayingShareViewController;
- (void)_define:(id)_define;
- (BOOL)_isDisplayingLookupViewController;
- (void)_translate:(id)_translate;
- (BOOL)_isDisplayingTranslateViewController;
- (void)_insertAttributedTextWithoutClosingTyping:(id)typing;
- (void)_addShortcut:(id)shortcut;
- (BOOL)_isDisplayingShortcutViewController;
- (BOOL)_shouldPaste;
- (void)paste:(id)paste;
- (void)pasteAndMatchStyle:(id)style;
- (void)select:(id)select;
- (void)selectAll:(id)all;
- (void)increaseSize:(id)size;
- (void)decreaseSize:(id)size;
- (void)replace:(id)replace;
- (void)_promptForReplace:(id)replace;
- (void)_transliterateChinese:(id)chinese;
- (void)makeTextWritingDirectionNatural:(id)natural;
- (void)makeTextWritingDirectionRightToLeft:(id)left;
- (void)makeTextWritingDirectionLeftToRight:(id)right;
- (BOOL)isCaretInEmptyParagraph;
- (BOOL)inPopover;
- (id)textStylingAtPosition:(id)position inDirection:(long long)direction;
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleContentFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })autoscrollDragFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })autoscrollContentFrame;
- (BOOL)playsNicelyWithGestures;
- (BOOL)becomesEditableWithGestures;
- (void)setBecomesEditableWithGestures:(BOOL)gestures;
- (void)resetSelectionAssistant;
- (void)willStartScroll;
- (void)willStartScrollToTop;
- (void)_updateFixedPositioningObjectsLayoutDuringScroll;
- (void)_updateFixedPositioningObjectsLayoutAfterScroll;
- (void)_updateFixedPositioningObjectsLayoutAfterVisibleGeometryChange;
- (void)didEndScroll;
- (void)scrollViewWasRemoved;
- (void)willStartZoom;
- (void)didZoom;
- (void)didEndZoom;
- (double)maximumDoubleTapScale;
- (unsigned int)_contentSizeInExposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect topLayer:(id)layer visibleLayerCount:(int *)count;
- (BOOL)_shouldFlattenContentLayersForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void *)_createIOSurfaceFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_flattenAndSwapContentLayersInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_restoreFlattenedContentLayers;
- (void)setTileUpdatesDisabled:(BOOL)disabled;
- (BOOL)hasBodyElement;
- (id)_textSelectingContainer;
- (void)setSelectedTextRange:(id)range withAffinityDownstream:(BOOL)downstream;
- (void)unmarkText;
- (id)textInRange:(id)range;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (id)rangeOfEnclosingWord:(id)word;
- (void)replaceRange:(id)range withText:(id)text;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset;
- (id)_positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset withAffinityDownstream:(BOOL)downstream;
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset;
- (BOOL)isPosition:(id)position atBoundary:(long long)boundary inDirection:(long long)direction;
- (id)positionFromPosition:(id)position toBoundary:(long long)boundary inDirection:(long long)direction;
- (BOOL)isPosition:(id)position withinTextUnit:(long long)unit inDirection:(long long)direction;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visible animated:(BOOL)animated;
- (id)rangeEnclosingPosition:(id)position withGranularity:(long long)granularity inDirection:(long long)direction;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_lastRectForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point withinRange:(id)range;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (id)characterRangeByExtendingPosition:(id)position inDirection:(long long)direction;
- (long long)baseWritingDirectionForPosition:(id)position inDirection:(long long)direction;
- (void)setBaseWritingDirection:(long long)direction forRange:(id)range;
- (id)selectionRectsForRange:(id)range;
- (id)_documentUrl;
- (int)documentType;
- (BOOL)_shouldResetForNewPage;
- (BOOL)_isInspectorSearchingForNode;
- (id)enclosingScrollView;
- (id)contentView;
- (double)zoomedDocumentScale;
- (double)currentDocumentScale;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleContentRect;
- (double)minimumScaleForSize:(struct CGSize { double x0; double x1; })size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectOfInterestForPoint:(struct CGPoint { double x0; double x1; })point;
- (struct { double x0; double x1; double x2; })doubleTapScalesForSize:(struct CGSize { double x0; double x1; })size;
- (BOOL)considerHeightForDoubleTap;
- (void)willZoomToMinimumScale;
- (BOOL)shouldSelectionAssistantReceiveDoubleTapAtPoint:(struct CGPoint { double x0; double x1; })point forScale:(double)scale;
- (void)willZoomToLocation:(struct CGPoint { double x0; double x1; })location atScale:(double)scale forDuration:(double)duration;
@end

#endif /* UIWebDocumentView_h */
