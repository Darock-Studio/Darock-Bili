//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UISizeTrackingView_h
#define _UISizeTrackingView_h
@import Foundation;

#include "UIView.h"
#include "UIView.h"
#include "_UIRemoteViewController.h"
#include "_UIRemoteViewFocusProxy-Protocol.h"
#include "_UIScrollToTopView-Protocol.h"
#include "_UIViewBoundingPathChangeObserver-Protocol.h"

@class NSString;

@interface _UISizeTrackingView : UIView<_UIScrollToTopView, _UIRemoteViewFocusProxy, _UIViewBoundingPathChangeObserver> {
  /* instance variables */
  id _viewControllerOperatorProxy;
  id _textEffectsOperatorProxy;
  struct CGSize { double width; double height; } _intrinsicContentSize;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _formerTextEffectsContentFrame;
  BOOL _observingTextEffectsWindowRotation;
  long long _interfaceOrientation;
  UIView *_viewForRemoteTextEffectsWindowMatchAnimation;
  struct { unsigned int x :1 hasIntrinsicContentSize; unsigned int x :1 observingBoundingPathChanges; unsigned int x :1 needsRemoteViewServiceBoundingPathUpdate; unsigned int x :1 remoteViewServiceBoundingPathUpdateScheduled; } _sizeTrackingViewFlags;
}

@property (readonly, nonatomic) _UIRemoteViewController *remoteViewController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)viewWithRemoteViewController:(id)controller viewControllerOperatorProxy:(id)proxy textEffectsOperatorProxy:(id)proxy;
+ (BOOL)_supportsInvalidatingFocusCache;

/* instance methods */
- (void)dealloc;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })size;
- (void)updateIntrinsicContentSize:(struct CGSize { double x0; double x1; })size;
- (BOOL)_needsTextEffectsUpdateToFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)_updateTextEffectsWindowHostedViewSize;
- (void)_updateTextEffectsWindowSafeAreaInsets;
- (void)_updateTextEffectsGeometriesImmediately;
- (void)_textEffectsWindowDidRotate:(id)rotate;
- (void)_updateTextEffectsGeometries:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })geometries;
- (void)_updateTextEffectsGeometries:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })geometries textEffectsWindow:(id)window;
- (void)_updateSceneGeometries:(id)geometries forOrientation:(long long)orientation;
- (long long)_interfaceOrientationForScene:(id)scene;
- (BOOL)_fencingEffectsAreVisible;
- (void)_geometryChanged:(const struct { int x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; } x5; id x6; id x7; id x8; id x9; } *)changed forAncestor:(id)ancestor;
- (double)_remoteViewServiceGeometryValueFromValue:(double)value;
- (struct CGSize { double x0; double x1; })_sizeForRemoteViewService;
- (struct CGSize { double x0; double x1; })_remoteViewServiceSizeFromSize:(struct CGSize { double x0; double x1; })size;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_remoteViewServiceInsetsFromInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (struct CGSize { double x0; double x1; })_sizeFromRemoteViewServiceSize:(struct CGSize { double x0; double x1; })size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundsForRemoteViewService;
- (BOOL)_canSendViewServiceActualBoundingPath;
- (id)_boundingPathForRemoteViewService;
- (void)_boundingPathMayHaveChangedForView:(id)view relativeToBoundsOriginOnly:(BOOL)only;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_setNeedsRemoteViewServiceBoundingPathUpdate;
- (void)_clearNeedsRemoteViewServiceBoundingPathUpdate;
- (BOOL)isScrollEnabled;
- (void)_scrollToTopFromTouchAtScreenLocation:(struct CGPoint { double x0; double x1; })location resultHandler:(id /* block */)handler;
- (void)_willMoveToWindow:(id)window;
- (void)_updateSceneGeometries:(id)geometries;
- (void)_didMoveFromWindow:(id)window toWindow:(id)window;
- (void)_viewDidMoveFromScreen:(id)screen toScreen:(id)screen;
- (void)_prepareForWindowHostingSceneRemoval;
- (void)_prepareForWindowDealloc;
- (id)nextResponder;
- (BOOL)canBecomeFocused;
- (id)_childFocusRegionsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inCoordinateSpace:(id)space;
- (id)focusItemsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
@end

#endif /* _UISizeTrackingView_h */
