//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIKBRenderGeometry_h
#define UIKBRenderGeometry_h
@import Foundation;

#include "NSCopying-Protocol.h"

@class NSValue;

@interface UIKBRenderGeometry : NSObject<NSCopying>

@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } paddedFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } displayFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } symbolFrame;
@property (nonatomic) unsigned long long concaveCorner;
@property (nonatomic) struct CGSize { double x0; double x1; } concaveCornerOffset;
@property (nonatomic) struct CGPoint { double x0; double x1; } popupSource;
@property (nonatomic) double roundRectRadius;
@property (nonatomic) unsigned long long roundRectCorners;
@property (nonatomic) int popupBias;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } layoutMargins;
@property (nonatomic) long long flickDirection;
@property (nonatomic) BOOL detachedVariants;
@property (nonatomic) BOOL tallPopup;
@property (retain, nonatomic) NSValue *splitLeftRect;
@property (retain, nonatomic) NSValue *splitRightRect;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } displayInsets;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } paddedInsets;
@property (nonatomic) long long popupDirection;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } layeredBackgroundPaddedFrame;
@property (nonatomic) double layeredBackgroundRoundRectRadius;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } layeredForegroundPaddedFrame;
@property (nonatomic) double layeredForegroundRoundRectRadius;

/* class methods */
+ (id)geometryWithShape:(id)shape;
+ (id)geometryWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame paddedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
+ (id)sortedGeometries:(id)geometries leftToRight:(BOOL)right;

/* instance methods */
- (void)adjustToTopWithInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)makeIntegralWithScale:(double)scale;
- (void)applyOffset:(struct CGPoint { double x0; double x1; })offset;
- (id)copyForFlickDirection:(long long)direction scale:(double)scale;
- (id)copyForPopupDirection:(long long)direction scale:(double)scale;
- (id)_copyForDirection:(long long)direction positionFactor:(double)factor inwardSizeFactor:(double)factor outwardSizeFactor:(double)factor perpendicularSizeFactor:(double)factor sizeAspectRatio:(double)ratio scale:(double)scale;
- (unsigned long long)adjustForTranslucentGapsWithSize:(struct CGSize { double x0; double x1; })size inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (unsigned long long)adjustForTranslucentGapsInFrameWithSize_10Key:(struct CGSize { double x0; double x1; })key centerX:(double)x bottomEdge:(BOOL)edge topEdge:(BOOL)edge;
- (void)adjustForConsistentGapsWithSize:(struct CGSize { double x0; double x1; })size inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithShape:(id)shape;
- (id)description;
- (BOOL)isEqual:(id)equal;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)overlayWithGeometry:(id)geometry;
- (void)applyInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)applyShadowInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)iPhoneVariantGeometries:(unsigned long long)geometries annotationIndex:(unsigned long long)index;
- (id)watchVariantGeometries:(unsigned long long)geometries annotationIndex:(unsigned long long)index;
- (id)iPadVariantGeometries:(unsigned long long)geometries rowLimit:(long long)limit;
- (id)similarShape;
@end

#endif /* UIKBRenderGeometry_h */
