//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UITextEffectsWindow_h
#define UITextEffectsWindow_h
@import Foundation;

#include "UIAutoRotatingWindow.h"
#include "UIEditingOverlayViewController.h"
#include "UIWindowScene.h"
#include "_UICanvasBasedObject-Protocol.h"

@class NSDictionary, NSLayoutConstraint, NSString;

@interface UITextEffectsWindow : UIAutoRotatingWindow<_UICanvasBasedObject> {
  /* instance variables */
  BOOL _inDealloc;
  unsigned long long _activeEffectsCount;
  NSDictionary *_perCanvasOptions;
  UIWindowScene *__intendedWindowScene;
  unsigned long long _activeRemoteViewCount;
  unsigned long long _windowLevelCount;
  double _windowLevelStack[5];
  BOOL _manualHostingOverride;
  NSLayoutConstraint *_bottomConstraint;
}

@property (readonly) UIWindowScene *_intendedCanvas;
@property (readonly) NSDictionary *_options;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL sceneIsResizing;
@property (readonly, nonatomic) UIEditingOverlayViewController *editingOverlayViewController;
@property (readonly) unsigned int contextID;
@property (readonly, nonatomic) BOOL isFullscreen;
@property (readonly, nonatomic) BOOL isForViewService;
@property (nonatomic) double defaultWindowLevel;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } keyboardScreenReferenceSize;
@property (readonly, nonatomic) double keyboardWidthForCurrentDevice;
@property (nonatomic) struct CGPoint { double x0; double x1; } hostedViewOrigin;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } hostedViewReference;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } hostedFrame;
@property (nonatomic) struct CGSize { double x0; double x1; } hostedViewSize;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } hostedSafeInsets;
@property (nonatomic) struct CGPoint { double x0; double x1; } hostedWindowOffset;
@property (nonatomic) struct CGSize { double x0; double x1; } hostedSceneSize;

/* class methods */
+ (BOOL)_shouldSoftAssertOnSetScreen;
+ (BOOL)_isSecure;
+ (id)_sharedTextEffectsWindowforWindowScene:(id)scene allowHosted:(BOOL)hosted forViewService:(BOOL)service matchesStatusBarOrientationOnAccess:(BOOL)access shouldCreateIfNecessary:(BOOL)necessary;
+ (id)sharedTextEffectsWindowForCanvas:(id)canvas;
+ (id)sharedTextEffectsWindowForWindowScene:(id)scene;
+ (id)sharedTextEffectsWindowForWindowScene:(id)scene forViewService:(BOOL)service;
+ (id)activeTextEffectsWindowForCanvas:(id)canvas;
+ (id)activeTextEffectsWindowForWindowScene:(id)scene;
+ (id)activeTextEffectsWindowForWindowScene:(id)scene forViewService:(BOOL)service;
+ (id)sharedTextEffectsWindow;
+ (id)_canvasForScreen:(id)screen;
+ (id)sharedTextEffectsWindowForScreen:(id)screen;
+ (id)activeTextEffectsWindowForScreen:(id)screen;
+ (id)sharedTextEffectsWindowAboveStatusBar;
+ (void)releaseSharedInstances;
+ (void)raiseTextEffectsWindowsForShowNotificationCenter;
+ (void)lowerTextEffectsWindowsForHideNotificationCenter;

/* instance methods */
- (id)_initBasicWithCanvas:(id)canvas options:(id)options;
- (id)_initWithCanvas:(id)canvas options:(id)options;
- (BOOL)_matchingOptions:(id)options;
- (void)_commonTextEffectsInit;
- (void)_commonInitWithOptions:(id)options;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame attached:(BOOL)attached;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame debugName:(id)name windowScene:(id)scene;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (void)_createSystemGestureGateGestureRecognizerIfNeeded;
- (BOOL)enableRemoteHosting;
- (void)setEnableRemoteHosting:(BOOL)hosting;
- (void)_setWindowLevel:(double)level;
- (void)_restoreWindowLevel;
- (void)_configureContextOptions:(id)options;
- (void)_updateTransformLayerForClassicPresentation;
- (void)addBottomPadding:(double)padding;
- (struct CGPoint { double x0; double x1; })_forHostedProcessConvertPoint:(struct CGPoint { double x0; double x1; })point forWindow:(id)window wasFromWindow:(BOOL)window;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_forHostedProcessConvertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forWindow:(id)window wasFromWindow:(BOOL)window;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromWindow:(id)window;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toWindow:(id)window;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toView:(id)view;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromWindow:(id)window;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toWindow:(id)window;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromView:(id)view;
- (void)becomeKeyWindow;
- (void)handleStatusBarChangeFromHeight:(double)height toHeight:(double)height;
- (id)_inputWindowController;
- (void)_updateRootViewConstraintsForInterfaceOrientationAndStatusBarHeight;
- (void)delayHideWindow;
- (id)rootViewController;
- (void)addSubview:(id)subview;
- (void)_didRemoveSubview:(id)subview;
- (void)didAddSubview:(id)subview;
- (void)bringSubviewToFront:(id)front;
- (void)sendSubviewToBack:(id)back;
- (void)sortSubviews;
- (void)_sortSubviewsOfView:(id)view;
- (void)updateForOrientation:(long long)orientation forceResetTransform:(BOOL)transform;
- (void)updateForOrientation:(long long)orientation;
- (void)resetTransform;
- (void)updateSubviewOrdering;
- (void)_matchDeviceOrientation;
- (long long)interfaceOrientation;
- (id)aboveStatusBarWindow;
- (BOOL)_shouldResizeWithScene;
- (void)updateEditingOverlayContainer;
- (BOOL)_shouldAutorotateToInterfaceOrientation:(long long)orientation;
- (void)_sceneBoundsDidChange;
- (void)_updateTransformLayer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })actualSceneBoundsForLandscape:(BOOL)landscape;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })actualSceneBounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })actualSceneFrameForOrientation:(long long)orientation;
- (long long)actualSceneOrientation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })actualSceneFrame;
- (double)slideOverWindowVerticalOffset;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_sceneReferenceBounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_sceneBounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_usableSceneBounds;
- (BOOL)isInternalWindow;
- (BOOL)_extendsScreenSceneLifetime;
- (BOOL)_canAffectStatusBarAppearance;
- (BOOL)_automaticContainerBackgroundIsGlass;
- (BOOL)_isTextEffectsWindow;
- (BOOL)_isRemoteKeyboardWindow;
- (BOOL)_shouldTextEffectsWindowBeHostedForView:(id)view;
- (BOOL)_canActAsKeyWindowForScreen:(id)screen;
- (BOOL)_isFullscreen;
- (void)_willSnapshot;
- (void)_didSnapshot;
- (BOOL)_shouldInstallRootPresentationController;
@end

#endif /* UITextEffectsWindow_h */
