//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UITextLayoutController_Protocol_h
#define _UITextLayoutController_Protocol_h
@import Foundation;

@protocol _UITextLayoutController <NSObject>

@property (readonly, nonatomic) NSTextStorage *textStorage;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (readonly, nonatomic) UITextRange *documentRange;
@property (copy, nonatomic) CUIStyleEffectConfiguration *styleEffectConfiguration;
@property (readonly, copy, nonatomic) NSArray *textContainers;
@property (readonly, nonatomic) NSTextContainer *firstTextContainer;
@property (readonly, nonatomic) BOOL canAccessLayoutManager;
@property (nonatomic) BOOL usesTiledViews;
@property (nonatomic) double maxTileHeight;
@property (nonatomic) BOOL drawsDebugBaselines;
@property (readonly, nonatomic) NSLayoutManager *layoutManager;
@property (weak, nonatomic) NSObject<NSLayoutManagerDelegate> *layoutManagerDelegate;
@property BOOL editable;

/* instance methods */
- (id)viewportRangeForTextContainer:(id)container;
- (id)emptyTextRangeAtPosition:(id)position;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset affinity:(long long)affinity;
- (id)textRangeForLineEnclosingPosition:(id)position;
- (id)textRangeForLineEnclosingPosition:(id)position effectiveAffinity:(long long)affinity;
- (id)textRangeForTextKit2Ranges:(id)ranges;
- (id)_visualSelectionRangeForExtent:(id)extent forPoint:(struct CGPoint { double x0; double x1; })point fromPosition:(id)position inDirection:(long long)direction;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (long long)affinityForPosition:(id)position;
- (id)attributesAtPosition:(id)position inDirection:(long long)direction;
- (long long)baseWritingDirectionAtPosition:(id)position;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })insertionRectForPosition:(id)position typingAttributes:(id)attributes placeholderAttachment:(id)attachment textContainer:(id *)container;
- (void)requestTextGeometryAtPosition:(id)position typingAttributes:(id)attributes resultBlock:(id /* block */)block;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })extraLineFragmentRect;
- (id)textRangeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds inTextContainer:(id)container layoutIfNeeded:(BOOL)needed;
- (void)enumerateTextLineFragmentsInRange:(id)range usingBlock:(id /* block */)block;
- (void)enumerateTextSegmentsInRange:(id)range inTextContainer:(id)container usingBlock:(id /* block */)block;
- (id)selectionRectsForRange:(id)range fromView:(id)view forContainerPassingTest:(id /* block */)test;
- (id)cursorPositionAtPoint:(struct CGPoint { double x0; double x1; })point inContainer:(id)container;
- (id)nearestPositionAtPoint:(struct CGPoint { double x0; double x1; })point inContainer:(id)container;
- (void)addAnnotationAttribute:(id)attribute value:(id)value forRange:(id)range;
- (id)annotationAttribute:(id)attribute atPosition:(id)position;
- (void)removeAnnotationAttribute:(id)attribute forRange:(id)range;
- (void)addRenderingAttributes:(id)attributes forRange:(id)range;
- (void)removeRenderingAttributes:(id)attributes forRange:(id)range;
- (void)addGhostedRange:(id)range;
- (void)removeAllGhostedRanges;
- (void)addInvisibleRange:(id)range;
- (void)removeInvisibleRange:(id)range;
- (id)attributedTextInRange:(id)range;
- (id)annotatedSubstringForRange:(id)range;
- (double)baselineOffsetForFirstGlyph;
- (id)textContainerForPosition:(id)position;
- (id)dequeueCanvasViewForTextContainer:(id)container;
- (void)ensureLayoutForTextContainer:(id)container;
- (void)ensureLayoutForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds inTextContainer:(id)container;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })usedRectForTextContainer:(id)container;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })updateLayoutForSizeChangeOfTextContainer:(id)container;
- (void)ensureLayoutForRange:(id)range;
- (void)invalidateLayoutForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectForRange:(id)range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })characterRangeForTextRange:(id)range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })characterRangeForTextRange:(id)range clippedToDocument:(BOOL)document;
- (id)textRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)positionWithOffset:(long long)offset affinity:(long long)affinity;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfCharacterClusterAtIndex:(unsigned long long)index type:(long long)type;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })unionRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range bottomInset:(double)inset;
- (void)invalidateDisplayForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)suspendTiling;
- (void)resumeTiling;
- (void)resetFontForExtraBulletRendering;
@optional
/* instance methods */
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset affinity:(long long)affinity anchorPositionOffset:(double)offset;
- (void)resetTextViewportLayoutControllerLayoutForPosition:(id)position;
- (BOOL)isEditable;
@end

#endif /* _UITextLayoutController_Protocol_h */
