//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIKBKeyplaneView_h
#define UIKBKeyplaneView_h
@import Foundation;

#include "UIKBSplitImageView.h"
#include "UIKBCacheToken.h"
#include "UIKBCacheableView-Protocol.h"
#include "UIKBKeyView.h"
#include "UIKBKeyViewAnimator.h"
#include "UIKBKeyplaneViewDelegate-Protocol.h"
#include "UIKBRenderConfig.h"
#include "UIKBRenderFactory.h"
#include "UIKBRenderingContext.h"
#include "UIKBScreenTraits.h"
#include "UIKBSplitImageView.h"
#include "UIKBTree.h"
#include "UIKeyboardEmojiKeyDisplayController.h"
#include "UIView.h"

@class NSMutableDictionary, NSString;

@interface UIKBKeyplaneView : UIKBSplitImageView<UIKBCacheableView> {
  /* instance variables */
  UIKBKeyView *_candidateGapView;
  NSMutableDictionary *_subviewIndex;
  NSMutableDictionary *_activeViewIndex;
  NSMutableDictionary *_renderedKeyViews;
  NSMutableDictionary *_delayedDeactivationKeys;
  BOOL _shouldDrawRect;
  UIKBSplitImageView *_keyBorders;
  UIKBSplitImageView *_keyBackgrounds;
  UIKBSplitImageView *_keyCaps;
}

@property (weak, nonatomic) NSObject<UIKBKeyplaneViewDelegate> *delegate;
@property (retain, nonatomic) UIKBTree *keyplane;
@property (retain, nonatomic) UIKBTree *defaultKeyplane;
@property (retain, nonatomic) UIKBCacheToken *cacheToken;
@property (retain, nonatomic) UIKBCacheToken *defaultKeyplaneCacheToken;
@property (retain, nonatomic) UIKBRenderConfig *renderConfig;
@property (retain, nonatomic) UIKBRenderingContext *renderingContext;
@property (retain, nonatomic) UIKBRenderFactory *factory;
@property (retain, nonatomic) UIKBKeyViewAnimator *keyViewAnimator;
@property (retain, nonatomic) UIKeyboardEmojiKeyDisplayController *emojiKeyManager;
@property (retain, nonatomic) UIKBScreenTraits *overrideScreenTraits;
@property (nonatomic) BOOL suppressDrawing;
@property (readonly, nonatomic) UIView *keyplaneMaskView;
@property (readonly, nonatomic) NSString *cacheKey;
@property (readonly, nonatomic) BOOL cacheDeferable;
@property (readonly, nonatomic) double cachedWidth;
@property (readonly, nonatomic) BOOL keepNonPersistent;
@property (readonly, nonatomic) long long assetIdiom;
@property (readonly, nonatomic) long long cacheDeferPriority;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame keyplane:(id)keyplane;
- (void)removeFromSuperview;
- (void)dealloc;
- (BOOL)validForKeyplane:(id)keyplane withVisualStyle:(int)style;
- (BOOL)isPasscodeStyle;
- (void)prepareForDisplay;
- (void)_generateRenderingContextIfNeeded;
- (void)_generateFactoryIfNeeded;
- (void)willMoveToWindow:(id)window;
- (void)layoutSubviews;
- (BOOL)useDefaultKeyplaneCacheTokenForRenderFlags:(long long)flags;
- (id)cacheKeysForRenderFlags:(id)flags;
- (void)displayLayer:(id)layer;
- (void)drawContentsOfRenderers:(id)renderers;
- (void)setContentScaleFactor:(double)factor;
- (BOOL)_shouldInheritScreenScaleAsContentScaleFactor;
- (BOOL)_canDrawContent;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (void)cancelDelayedDeactivation;
- (void)addKeyToDelayedDeactivationSet:(id)set;
- (void)removeKeyFromDelayedDeactivationSet:(id)set;
- (id)cacheIdentifierForKey:(id)key;
- (id)cacheIdentifierForKey:(id)key withState:(int)state;
- (unsigned long long)cornerMaskForKey:(id)key recursive:(BOOL)recursive;
- (id)containingViewForKey:(id)key withState:(int)state wantsActiveOut:(BOOL *)out;
- (BOOL)_shouldAllowKey:(id)key;
- (void)setState:(int)state forKey:(id)key;
- (void)setState:(int)state forKey:(id)key withReason:(id)reason force:(BOOL)force;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_safeFrameForKeyViewFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame inContainer:(id)container forKey:(id)key;
- (int)stateForKey:(id)key;
- (id)activeKeyViews;
- (void)updateFrameForKey:(id)key;
- (id)viewForKey:(id)key;
- (id)viewForKey:(id)key state:(int)state;
- (BOOL)shouldAnimateInKeyView:(id)view;
- (BOOL)shouldAnimateOutKeyView:(id)view;
- (void)deactivateAdaptiveKey:(id)key;
- (void)dimKeys:(id)keys;
- (void)hideKeyCaps:(BOOL)caps;
- (void)hideKeyCaps:(BOOL)caps andControlKeysWithInteractionTypes:(id)types;
- (void)orientKeyCapForKey:(id)key orientation:(long long)orientation;
- (id)existingVariantsKeyViewForKey:(id)key;
- (BOOL)retestSelectedVariantIndexForKey:(id)key atPoint:(struct CGPoint { double x0; double x1; })point phase:(long long)phase;
- (void)deactivateKey:(id)key previousState:(int)state;
- (void)deactivateKey:(id)key previousState:(int)state keyView:(id)view;
- (void)deactivateKeys;
- (void)deactivateKeysWithReason:(id)reason force:(BOOL)force;
- (void)activateKeys;
- (void)purgeActiveKeyViews;
- (void)purgeKeyViews;
- (void)purgeSubviews;
- (void)purgeLayerContents;
- (void)purgeFactory;
- (void)_updateKeyplaneMaskView;
- (BOOL)_shouldUseUnifiedKeyView:(id)view forState:(int)state;
@end

#endif /* UIKBKeyplaneView_h */
