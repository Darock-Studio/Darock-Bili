//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIKeyboard_h
#define UIKeyboard_h
@import Foundation;

#include "UIView.h"
#include "UIKBFocusGuideDelegate-Protocol.h"
#include "UIKeyboardImplGeometryDelegate-Protocol.h"
#include "UITapGestureRecognizer.h"
#include "UITextCursorAssertionController.h"
#include "UITextInputTraits.h"
#include "UIView.h"
#include "_UIKeyboardPasscodeObscuringInteraction.h"

@class NSArray, NSMutableDictionary, NSString;

@interface UIKeyboard : UIView<UIKBFocusGuideDelegate, UIKeyboardImplGeometryDelegate> {
  /* instance variables */
  UIView *m_snapshot;
  UITextInputTraits *m_defaultTraits;
  UITextInputTraits *m_overrideTraits;
  BOOL m_typingDisabled;
  BOOL m_minimized;
  BOOL m_respondingToImplGeometryChange;
  long long m_orientation;
  long long m_idiom;
  BOOL m_hasExplicitOrientation;
  BOOL m_disableTouchInput;
  BOOL m_useLinearLayout;
  BOOL m_useRecentsAlert;
  NSMutableDictionary *m_focusGuides;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } m_unfocusedFocusGuideOutsets;
  _UIKeyboardPasscodeObscuringInteraction *_passcodeObscuringInteraction;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _forcedFrame;
  UITapGestureRecognizer *_variantsMenuGesture;
  NSArray *_implConstraints;
}

@property (nonatomic) BOOL hasImpendingCursorLocation;
@property (nonatomic) unsigned long long impendingCursorLocation;
@property (nonatomic) unsigned long long requestedInteractionModel;
@property (nonatomic) BOOL caretBlinks;
@property (nonatomic) BOOL caretVisible;
@property (readonly, nonatomic) UITextCursorAssertionController *_activeAssertionController;
@property (nonatomic) long long keyboardIdiom;
@property (nonatomic) BOOL shouldUpdateLayoutAutomatically;
@property (nonatomic) BOOL typingEnabled;
@property (nonatomic) BOOL minimized;
@property (nonatomic) BOOL showsCandidatesInline;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (double)predictionViewHeightForCurrentInputMode;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keyplanePadding;
+ (id)snapshotViewForPredictionViewTransition;
+ (id)snapshotViewForOptions:(unsigned long long)options;
+ (void)forceKeyboardAlpha:(double)alpha;
+ (void)setKeyboardAlpha:(double)alpha;
+ (void)setKeyboardAlpha:(double)alpha remote:(BOOL)remote force:(BOOL)force processId:(int)id;
+ (BOOL)predictionViewPrewarmsPredictiveCandidates;
+ (void)setPredictionViewPrewarmsPredictiveCandidates:(BOOL)candidates;
+ (BOOL)candidateDisplayIsExtended;
+ (id)homeGestureExclusionZones;
+ (BOOL)platformSupportsKeyboardServiceRole:(unsigned long long)role;
+ (unsigned long long)serviceRole;
+ (void)setServiceRole:(unsigned long long)role;
+ (void)resetServiceRole;
+ (id)activeKeyboard;
+ (void)_clearActiveKeyboard;
+ (id)activeKeyboardForScreen:(id)screen;
+ (void)makeKeyboardActive:(id)active forScreen:(id)screen;
+ (void)clearActiveForScreen:(id)screen;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_keyboardFocusGuideMargins;
+ (void)initImplementationNow;
+ (void)removeAllDynamicDictionaries;
+ (struct CGSize { double x0; double x1; })defaultSize;
+ (struct CGSize { double x0; double x1; })defaultSizeForInterfaceOrientation:(long long)orientation;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })defaultFrameForInterfaceOrientation:(long long)orientation;
+ (BOOL)isOnScreen;
+ (BOOL)respondsToProxGesture;
+ (BOOL)shouldMinimizeForHardwareKeyboard;
+ (BOOL)hasInputOrAssistantViewsOnScreen;
+ (id)suppressionPolicyDelegate;
+ (void)setSuppressionPolicyDelegate:(id)delegate;
+ (BOOL)shouldSuppressSoftwareKeyboardForResponder:(id)responder;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)orientation;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)orientation inputDelegate:(id)delegate;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)orientation ignoreInputView:(BOOL)view;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)orientation ignoreInputView:(BOOL)view inputDelegate:(id)delegate;
+ (BOOL)assistantBarShouldBeIncludedInSizeForDelegate:(id)delegate;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)orientation includingAssistantBar:(BOOL)bar ignoreInputView:(BOOL)view;
+ (struct CGSize { double x0; double x1; })keyboardSizeForInterfaceOrientation:(long long)orientation;
+ (void)setResizable:(BOOL)resizable;
+ (BOOL)resizable;
+ (id)keyboardBundleIdentifier;
+ (void)clearLastKeyboardApplicationIdentifier;
+ (id)keyboardApplicationIdentifier;
+ (int)keyboardProcessId;
+ (BOOL)isSpotlight;
+ (id)currentDocumentState;
+ (BOOL)inputUIOOP;
+ (BOOL)usesInputSystemUI;
+ (BOOL)usesInputSystemUIForAutoFillOnly;
+ (BOOL)usesInputSystemUIForAutoFillOnlyWithRTI;
+ (BOOL)useAutoFillUIRTIInterfaceForIphone;
+ (BOOL)isInputSystemUI;
+ (BOOL)isInputUIProcess;
+ (BOOL)usingEndInputSessionCompletion;
+ (BOOL)shouldExtendKeyboardInputUI;
+ (BOOL)usesLocalKeyboard;
+ (BOOL)isMajelEnabled;
+ (BOOL)isModelessActive;
+ (BOOL)isMajelSupported;
+ (BOOL)isInlineTextCompletionUISupported;
+ (BOOL)isInlineTextCompletionUIEnabled;
+ (BOOL)presentsInlineTextCompletionAsMarkedText;
+ (BOOL)doesSpacebarAcceptInlineTextCompletion;
+ (BOOL)isInlineTextCompletionEducationUIEnabled;
+ (BOOL)doesSpacebarAcceptFullInlineTextCompletion;
+ (BOOL)isShowingEmojiSearch;
+ (BOOL)isKeyboardProcess;
+ (BOOL)isRedesignedTextCursorEnabled;
+ (BOOL)isLanguageIndicatorEnabled;
+ (BOOL)isCapslockIndicatorEnabled;
+ (BOOL)isInlineDictationGlowEffectEnabled;
+ (BOOL)isInlineDictationIndicatorEnabled;
+ (BOOL)needsMessagesWorkaround;
+ (BOOL)isInHardwareKeyboardMode;
+ (BOOL)splitKeyboardEnabled;
+ (BOOL)supportsAutoFillPanel;
+ (BOOL)isSafari;
+ (BOOL)isAutoFillPanelInAppsEnabled;
+ (BOOL)isAutoFillPanelUIEnabled;
+ (BOOL)isAlwaysAllowedAutoFillPanelClient;
+ (BOOL)isAlwaysBlockedAutoFillPanelClient;

/* instance methods */
- (id)_getCurrentKeyplaneName;
- (id)_getCurrentKeyboardName;
- (id)_getLocalizedInputMode;
- (id)_baseKeyForRepresentedString:(id)string;
- (id)_keyplaneForKey:(id)key;
- (id)_keyplaneNamed:(id)named;
- (void)_changeToKeyplane:(id)keyplane;
- (void)_setUndocked:(BOOL)undocked;
- (void)_setSplit:(BOOL)split;
- (id)_touchPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_typeCharacter:(id)character withError:(struct CGPoint { double x0; double x1; })error shouldTypeVariants:(BOOL)variants baseKeyForVariants:(BOOL)variants;
- (void)_setInputMode:(id)mode;
- (void)_setAutocorrects:(BOOL)autocorrects;
- (id)_getAutocorrection;
- (void)_acceptCurrentCandidate;
- (BOOL)_hasCandidates;
- (long long)_positionInCandidateList:(id)list;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_floatingKeyboardDraggableRect;
- (void)manualKeyboardWillBeOrderedIn;
- (void)manualKeyboardWasOrderedIn;
- (void)manualKeyboardWillBeOrderedOut;
- (void)manualKeyboardWasOrderedOut;
- (id)createPathEffectViewIfNecessary;
- (void)autoAdjustOrientation;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame lazily:(BOOL)lazily;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithDefaultSize;
- (id)initWithRequestedInteractionModel:(unsigned long long)model;
- (id)initLazily;
- (void)dealloc;
- (id)window;
- (BOOL)isActivePerScreen;
- (void)clearActivePerScreenIfNeeded;
- (BOOL)_isAutomaticKeyboard;
- (void)willMoveToWindow:(id)window;
- (void)didMoveToWindow;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)layoutSubviews;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)updateLayout;
- (long long)interfaceOrientation;
- (void)setOrientation:(long long)orientation;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })inside forEvent:(struct __GSEvent *)event;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })inside withEvent:(id)event;
- (BOOL)_touchesInsideShouldHideCalloutBar;
- (void)prepareForGeometryChange;
- (void)geometryChangeDone:(BOOL)done;
- (void)removeAutocorrectPrompt;
- (void)acceptAutocorrection;
- (void)acceptAutocorrectionWithCompletionHandler:(id /* block */)handler;
- (BOOL)hasAutocorrectPrompt;
- (BOOL)returnKeyEnabled;
- (void)setReturnKeyEnabled:(BOOL)enabled;
- (id)defaultTextInputTraits;
- (void)setDefaultTextInputTraits:(id)traits;
- (id)_overrideTextInputTraits;
- (void)set_overrideTextInputTraits:(id)traits;
- (id)delegate;
- (void)clearSnapshot;
- (void)takeSnapshot;
- (void)activateIfNeeded;
- (void)activate;
- (BOOL)isActive;
- (BOOL)isAutomatic;
- (void)deactivate;
- (void)_deactivateForBackgrounding;
- (void)setNeedsDisplay;
- (void)displayLayer:(id)layer;
- (int)textEffectsVisibilityLevel;
- (void)touchesBegan:(id)began withEvent:(id)event;
- (void)touchesMoved:(id)moved withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (void)touchesCancelled:(id)cancelled withEvent:(id)event;
- (BOOL)canHandleEvent:(id)event;
- (BOOL)canHandlePresses:(id)presses withEvent:(id)event;
- (void)pressesBegan:(id)began withEvent:(id)event;
- (void)pressesChanged:(id)changed withEvent:(id)event;
- (void)pressesEnded:(id)ended withEvent:(id)event;
- (void)pressesCancelled:(id)cancelled withEvent:(id)event;
- (void)remoteControlReceivedWithEvent:(id)event;
- (void)_wheelChangedWithEvent:(id)event;
- (BOOL)canBecomeFocused;
- (BOOL)_mayRemainFocused;
- (id)_systemDefaultFocusGroupIdentifier;
- (long long)_focusTouchSensitivityStyle;
- (long long)_rotaryFocusMovementAxis;
- (long long)_focusedSound;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_focusCastingFrameForHeading:(unsigned long long)heading inCoordinateSpace:(id)space;
- (void)didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)coordinator;
- (BOOL)allowExternalChangeForFocusHeading:(unsigned long long)heading cursorLocation:(unsigned long long)location;
- (BOOL)shouldUpdateFocusInContext:(id)context;
- (unsigned long long)cursorLocation;
- (void)setCursorLocation:(unsigned long long)location;
- (void)setupKeyFocusGuides;
- (void)updateKeyFocusGuides;
- (void)_didChangeCursorLocation;
- (void)didFocusGuideWithHeading:(unsigned long long)heading;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })unfocusedFocusGuideOutsets;
- (void)setUnfocusedFocusGuideOutsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })outsets;
- (void)setUnfocusedFocusGuideOutsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })outsets fromView:(id)view;
- (void)updateFocusMarginsUpToView:(id)view;
- (void)_toggleVariantsMenuGesture:(BOOL)gesture;
- (BOOL)disableInteraction;
- (void)setDisableInteraction:(BOOL)interaction;
- (void)_setPreferredHeight:(double)height;
- (BOOL)showPredictionBar;
- (void)_showAutofillExtras;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (BOOL)shouldSaveMinimizationState;
- (BOOL)isMinimized;
- (void)syncMinimizedStateToHardwareKeyboardAttachedState;
- (struct UIPeripheralAnimationGeometry { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; })geometryForMinimize:(BOOL)minimize;
- (void)setCorrectionLearningAllowed:(BOOL)allowed;
- (void)responseContextDidChange;
- (void)textInputTraitsDidChange;
- (id)targetWindow;
- (void)_setRenderConfig:(id)config;
- (void)_setPasscodeOutlineAlpha:(double)alpha;
- (void)_setDisableUpdateMaskForSecureTextEntry:(BOOL)entry;
- (BOOL)_disableTouchInput;
- (void)_setDisableTouchInput:(BOOL)input;
- (BOOL)_useLinearLayout;
- (void)_setUseLinearLayout:(BOOL)layout;
- (BOOL)_useRecentsAlert;
- (void)_setUseRecentsAlert:(BOOL)alert;
- (void)minimize;
- (void)maximize;
- (void)keyboardMinMaximized:(BOOL)maximized;
- (struct UIPeripheralAnimationGeometry { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; })geometryForImplHeightDelta:(double)delta;
- (void)prepareForImplBoundsHeightChange:(double)change suppressNotification:(BOOL)notification;
- (void)implBoundsHeightChangeDone:(double)done suppressNotification:(BOOL)notification;
- (BOOL)canDismiss;
- (void)_didChangeCandidateList;
- (void)_didChangeKeyplaneWithContext:(id)context;
@end

#endif /* UIKeyboard_h */
