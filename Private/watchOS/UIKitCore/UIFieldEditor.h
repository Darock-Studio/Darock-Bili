//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIFieldEditor_h
#define UIFieldEditor_h
@import Foundation;

#include "UIScrollView.h"
#include "NSLayoutManagerDelegate-Protocol.h"
#include "NSUITextViewCommonMethods-Protocol.h"
#include "UIAutoscroll.h"
#include "UIAutoscrollContainer-Protocol.h"
#include "UIColor.h"
#include "UIImage.h"
#include "UIInputContextHistory.h"
#include "UIKeyInputPrivate-Protocol.h"
#include "UIKeyboardInput-Protocol.h"
#include "UITextAutoscrolling-Protocol.h"
#include "UITextField.h"
#include "UITextFieldContent-Protocol.h"
#include "UITextInput-Protocol.h"
#include "UITextInputController.h"
#include "UITextInputControllerDelegate-Protocol.h"
#include "UITextInputDelegate-Protocol.h"
#include "UITextInputPasswordRules.h"
#include "UITextInputPrivate-Protocol.h"
#include "UITextInputSuggestionDelegate-Protocol.h"
#include "UITextInputTokenizer-Protocol.h"
#include "UITextInteractionAssistant.h"
#include "UITextPosition.h"
#include "UITextRange.h"
#include "UIView.h"
#include "_UICascadingTextStorage.h"

@class NSAttributedString, NSDictionary, NSIndexSet, NSLayoutManager, NSString, NSTextContainer, NSTextStorage, NSTimer, RTIInputSystemSourceSession;
@protocol UIView<_UITextCanvas, _UITextLayoutControllerBase<_UITextLayoutController;

@interface UIFieldEditor : UIScrollView<UITextInputControllerDelegate, NSLayoutManagerDelegate, UIKeyInputPrivate, UITextFieldContent, NSUITextViewCommonMethods, UIAutoscrollContainer, UITextInput, UITextInputPrivate, UITextAutoscrolling, UIKeyboardInput> {
  /* instance variables */
  UITextField *_textField;
  BOOL _active;
  UIAutoscroll *_autoscroll;
  BOOL _cachedUserInteractionEnabled;
  NSAttributedString *_originalAttributedString;
  NSDictionary *_originalDefaultAttributes;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _contentInsetsFromFonts;
  UITextInputController *__textInputController;
  NSTextContainer *__textContainer;
  _UITextLayoutControllerBase<_UITextLayoutController> *__textLayoutController;
  _UICascadingTextStorage *__textStorage;
  struct { unsigned int x :1 delegateRespondsToFieldEditorDidChange; unsigned int x :1 delegateRespondsToFieldEditorDidChangeSelection; unsigned int x :1 delegateRespondsToShouldInsertText; unsigned int x :1 delegateRespondsToShouldReplaceWithText; unsigned int x :1 suppressScrollToSelection; unsigned int x :1 clearOnNextEdit; unsigned int x :1 needsInvalidationAfterObscuredRangeChange; unsigned int x :1 isAnimatingPaste; unsigned int x :1 contentInsetsFromFontsValid; } _feFlags;
  unsigned long long _obscuredSecureLength;
  NSTimer *_obscureAllTextTimer;
  double _desiredContentWidth;
  UIView<_UITextCanvas> *_contentView;
  id /* block */ _scrollAnimationEndedAction;
}

@property (copy, nonatomic) id /* block */ _scrollAnimationEndedAction;
@property (nonatomic) struct CGPoint { double x0; double x1; } autoscrollContentOffset;
@property (copy, nonatomic) NSDictionary *typingAttributes;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } padding;
@property (nonatomic) BOOL _shouldObscureNextInput;
@property (readonly, nonatomic) BOOL isSingleLineDocument;
@property (retain, nonatomic) UIColor *tintColor;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL hasText;
@property (@dynamic, nonatomic) long long autocapitalizationType;
@property (@dynamic, nonatomic) long long autocorrectionType;
@property (@dynamic, nonatomic) long long spellCheckingType;
@property (@dynamic, nonatomic) long long smartQuotesType;
@property (@dynamic, nonatomic) long long smartDashesType;
@property (@dynamic, nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long inlinePredictionType;
@property (@dynamic, nonatomic) long long keyboardType;
@property (@dynamic, nonatomic) long long keyboardAppearance;
@property (@dynamic, nonatomic) long long returnKeyType;
@property (@dynamic, nonatomic) BOOL enablesReturnKeyAutomatically;
@property (@dynamic, nonatomic) BOOL secureTextEntry;
@property (copy, @dynamic, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (nonatomic) BOOL allowsAttachments;
@property (readonly, nonatomic) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (readonly, nonatomic) NSTextStorage *textStorage;
@property (readonly, nonatomic) NSTextContainer *textContainer;
@property (readonly, nonatomic) NSLayoutManager *layoutManager;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } markedRange;
@property (readonly, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) long long layoutOrientation;
@property (nonatomic) BOOL shouldAutoscroll;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) NSObject<UITextInputDelegate> *inputDelegate;
@property (readonly, nonatomic) NSObject<UITextInputTokenizer> *tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) NSObject<UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (nonatomic) BOOL _systemCursorAccessoriesDisabled;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet * textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;

/* class methods */
+ (id)sharedFieldEditor;
+ (id)activeFieldEditor;
+ (id)excludedElementsForHTML;

/* instance methods */
- (void)_deleteBackwardAndNotify:(BOOL)notify;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithTextField:(id)field;
- (void)dealloc;
- (id)_textLayoutController;
- (id)_textContainer;
- (id)_textStorage;
- (id)_textInputController;
- (id)_textCanvasView;
- (void)traitCollectionDidChange:(id)change;
- (void)_textStorageDidProcessEditing:(id)editing;
- (void)_applyCorrectTextContainerSize;
- (void)_applyCorrectTextContainerSize:(id)size;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_fullContentInsetsFromFonts;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_contentInsetsFromFonts;
- (BOOL)setUpClippingWithMaskForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds contentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)layoutSubviews;
- (BOOL)keyboardInput:(id)input shouldInsertText:(id)text isMarkedText:(BOOL)text;
- (BOOL)keyboardInput:(id)input shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (BOOL)keyboardInputShouldDelete:(id)delete;
- (BOOL)keyboardInputChanged:(id)changed;
- (void)keyboardInputChangedSelection:(id)selection;
- (void)textInputDidChange:(id)change;
- (void)textInputDidChangeSelection:(id)selection;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })textInput:(id)input willChangeSelectionFromCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range toCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (BOOL)textInput:(id)input shouldChangeCharactersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (void)textInput:(id)input prepareAttributedTextForInsertion:(id)insertion;
- (void)textInputWillAnimatePaste:(id)paste;
- (void)textInputDidAnimatePaste:(id)paste;
- (BOOL)textInputShouldExtendCaretHeight:(id)height;
- (void)selectAll;
- (id)_responderForBecomeFirstResponder;
- (BOOL)isFirstResponder;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_responderExternalTouchRectForWindow:(id)window;
- (id)_textSelectingContainer;
- (id)textInputTraits;
- (id)textColorForCaretSelection;
- (id)textField;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })autoscroll;
- (void)updateAutoscroll:(id)autoscroll;
- (void)cancelAutoscroll;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentFrameForView:(id)view;
- (void)_tvUpdateTextColor;
- (void)activateEditor;
- (void)_updateLayoutManagerStyleEffectConfiguration;
- (void)deactivateEditorDiscardingEdits:(BOOL)edits;
- (void)_resetTypingAttributes;
- (void)_deactivateSelectionView;
- (void)_handleObscuredTextAfterActivationChange;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_setValue:(id)value forTextAttribute:(id)attribute;
- (id)enclosingScrollView;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_unobscuredSecureRange;
- (id)layoutManager:(id)manager effectiveCUICatalogForTextEffect:(id)effect;
- (void)setTextColor:(id)color;
- (id)textColor;
- (void)setFont:(id)font;
- (id)font;
- (void)_setTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text andSetCaretSelectionAfterText:(BOOL)text;
- (id)text;
- (void)setText:(id)text;
- (void)setText:(id)text andSetCaretSelectionAfterText:(BOOL)text;
- (void)setTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (void)addTextAlternativesDisplayStyle:(long long)style toRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_setAttributedTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text andSetCaretSelectionAfterText:(BOOL)text;
- (id)attributedText;
- (void)setAttributedText:(id)text;
- (void)setAttributedText:(id)text andSetCaretSelectionAfterText:(BOOL)text;
- (void)setAttributedTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (int)scrollXOffset;
- (int)scrollYOffset;
- (void)setScrollXOffset:(int)xoffset scrollYOffset:(int)yoffset;
- (void)setScrollXOffset:(int)xoffset scrollYOffset:(int)yoffset adjustForPurpleCaret:(BOOL)caret;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (void)setSelection:(struct _NSRange { unsigned long long x0; unsigned long long x1; })selection;
- (BOOL)hasMarkedText;
- (void)_performWhileSuppressingDelegateNotifications:(id /* block */)notifications;
- (void)_scrollViewAnimationEnded:(id)ended finished:(BOOL)finished;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })visible animated:(BOOL)animated;
- (void)scrollSelectionToVisible:(BOOL)visible;
- (void)setContentOffset:(struct CGPoint { double x0; double x1; })offset animated:(BOOL)animated;
- (void)setContentOffset:(struct CGPoint { double x0; double x1; })offset;
- (id)undoManager;
- (long long)nonEditingLinebreakMode;
- (void)setNonEditingLinebreakMode:(long long)mode;
- (double)_passcodeStyleAlpha;
- (BOOL)_clearOnEditIfNeeded;
- (void)_handleObscuredTextInputIfNecessaryWithEditingBlock:(id /* block */)block;
- (void)insertText:(id)text;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })insertFilteredText:(id)text;
- (void)_cancelObscureAllTextTimer;
- (void)_unobscureTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range settingTimerToReobscure:(BOOL)reobscure;
- (void)_ephemerallyUnobscureCharacterAtIndex:(unsigned long long)index;
- (void)_ephemerallyUnobscureTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_obscureAllText;
- (void)_unobscureAllText;
- (void)_setNeedsInvalidateAfterObscuredRangeChange;
- (void)_invalidateAfterObscuredRangeChangeIfNeeded;
- (void)deleteBackward;
- (id)textInRange:(id)range;
- (void)insertAttributedText:(id)text;
- (id)attributedTextInRange:(id)range;
- (void)replaceRange:(id)range withText:(id)text;
- (void)replaceRange:(id)range withAttributedText:(id)text;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)typing replacementText:(id)text;
- (void)clearText;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)unmarkText;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset;
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (id)positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (id)characterRangeByExtendingPosition:(id)position inDirection:(long long)direction;
- (id)_visualSelectionRangeForExtent:(id)extent forPoint:(struct CGPoint { double x0; double x1; })point fromPosition:(id)position inDirection:(long long)direction;
- (long long)baseWritingDirectionForPosition:(id)position inDirection:(long long)direction;
- (void)setBaseWritingDirection:(long long)direction forRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (id)selectionRectsForRange:(id)range;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point withinRange:(id)range;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)isEditing;
- (BOOL)_mightHaveSelection;
- (void)insertDictationResult:(id)result withCorrectionIdentifier:(id)identifier;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)placeholder;
- (void)removeDictationResultPlaceholder:(id)placeholder willInsertResult:(BOOL)result;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })size;
- (void)removeTextPlaceholder:(id)placeholder;
- (id)rangeWithTextAlternatives:(id *)alternatives atPosition:(id)position;
- (id)metadataDictionariesForDictationResults;
- (id)_inputController;
- (void)beginSelectionChange;
- (void)endSelectionChange;
- (unsigned long long)layoutManager:(id)manager shouldGenerateGlyphs:(const unsigned short *)glyphs properties:(const long long *)properties characterIndexes:(const unsigned long long *)indexes font:(id)font forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (long long)layoutManager:(id)manager shouldUseAction:(long long)action forControlCharacterAtIndex:(unsigned long long)index;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutManager:(id)manager boundingBoxForControlGlyphAtIndex:(unsigned long long)index forTextContainer:(id)container proposedLineFragment:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })fragment glyphPosition:(struct CGPoint { double x0; double x1; })position characterIndex:(unsigned long long)index;
- (void)layoutManager:(id)manager didCompleteLayoutForTextContainer:(id)container atEnd:(BOOL)end;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRect;
- (struct CGPoint { double x0; double x1; })textContainerOriginForTextAlignment:(long long)alignment;
- (struct CGPoint { double x0; double x1; })textContainerOrigin;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })textContainerInset;
- (void)textContainerUsageDidChangeToSize:(struct CGSize { double x0; double x1; })size;
- (void)setConstrainedFrameSize:(struct CGSize { double x0; double x1; })size;
- (void)invalidateTextContainerOrigin;
- (struct CGSize { double x0; double x1; })minSize;
- (BOOL)isHorizontallyResizable;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect avoidAdditionalLayout:(BOOL)layout;
- (void)updateInsertionPointStateAndRestartTimer:(BOOL)timer;
- (id)linkTextAttributes;
- (id)attributedSubstringForMarkedRange;
- (BOOL)_shouldObscureInput;
- (id)_textInputTraits;
- (id)forwardingTargetForSelector:(SEL)selector;
- (BOOL)respondsToSelector:(SEL)selector;
- (id)methodSignatureForSelector:(SEL)selector;
- (BOOL)_hasDictationPlaceholder;
- (BOOL)_shouldIgnoreAutofillSave;
- (void)_setScrollAnimationEndedAction:(id /* block */)action;
@end

#endif /* UIFieldEditor_h */
