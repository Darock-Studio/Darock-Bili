//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UITextView_h
#define UITextView_h
@import Foundation;

#include "UIScrollView.h"
#include "UIAutoscroll.h"
#include "UIBarButtonItemGroup.h"
#include "UIColor.h"
#include "UIContentSizeCategoryAdjusting-Protocol.h"
#include "UIImage.h"
#include "UIInputContextHistory.h"
#include "UIKeyboardInput-Protocol.h"
#include "UILabel.h"
#include "UILetterformAwareAdjusting-Protocol.h"
#include "UITextAutoscrolling-Protocol.h"
#include "UITextInput-Protocol.h"
#include "UITextInputController.h"
#include "UITextInputControllerDelegate-Protocol.h"
#include "UITextInputDelegate-Protocol.h"
#include "UITextInputPasswordRules.h"
#include "UITextInputPrivate-Protocol.h"
#include "UITextInputSuggestionDelegate-Protocol.h"
#include "UITextInputTokenizer-Protocol.h"
#include "UITextInputTraits.h"
#include "UITextInputTraits_Private-Protocol.h"
#include "UITextInteractionAssistant.h"
#include "UITextPosition.h"
#include "UITextRange.h"
#include "UIView.h"
#include "UIViewGhostedRangeSupporting-Protocol.h"
#include "_UICharacterStreamingManager.h"
#include "_UILayoutBaselineUpdating-Protocol.h"
#include "_UIMultilineTextContentSizing-Protocol.h"
#include "_UITextContainerView.h"
#include "_UITextContainerViewDelegate-Protocol.h"
#include "_UITextContent-Protocol.h"
#include "_UITextInteractableItemCache.h"
#include "_UITextItemInteracting-Protocol.h"
#include "_UITextLayoutView.h"
#include "_UITextSearching-Protocol.h"
#include "_UITextSizeCache.h"
#include "_UITextViewContentPadding.h"
#include "_UITextViewContentPaddingDelegate-Protocol.h"
#include "_UITextViewRestorableScrollPosition.h"
#include "_UITextViewVisualStyle.h"
#include "_UIViewBaselineSpacing-Protocol.h"
#include "_UIViewLanguageAwareAdjusting-Protocol.h"

@class CUICatalog, NSAttributedString, NSDictionary, NSIndexSet, NSLayoutManager, NSString, NSTextContainer, NSTextLayoutManager, NSTextStorage, RTIInputSystemSourceSession, UIFindInteraction, UIFont;
@protocol NSCoding><NSCopying, UITextViewDelegate, _UITextLayoutControllerBase<_UITextLayoutController;

@interface UITextView : UIScrollView<_UIViewBaselineSpacing, _UITextContainerViewDelegate, _UITextViewContentPaddingDelegate, UITextInputControllerDelegate, UITextAutoscrolling, UIKeyboardInput, _UITextContent, _UIMultilineTextContentSizing, _UILayoutBaselineUpdating, UIViewGhostedRangeSupporting, _UITextItemInteracting, UITextInputPrivate, UITextInputTraits_Private, _UITextSearching, _UIViewLanguageAwareAdjusting, UITextInput, UIContentSizeCategoryAdjusting, UILetterformAwareAdjusting> {
  /* instance variables */
  UIColor *_cachedTintColor;
  _UITextContainerView *_containerView;
  _UITextLayoutView *_layoutView;
  UITextInputController *_inputController;
  UITextInputTraits *_textInputTraits;
  UIAutoscroll *_autoscroll;
  struct { unsigned int x :1 needsScrollToSelectionAfterLayout; unsigned int x :1 editable; unsigned int x :1 reentrancyGuard; unsigned int x :1 usesExplicitPreferredMaxLayoutWidth; unsigned int x :1 interactiveSelectionDisabled; unsigned int x :1 selectable; unsigned int x :1 shouldPresentSheetsInAWindowLayeredAboveTheKeyboard; unsigned int x :1 shouldAutoscrollAboveBottom; unsigned int x :1 containerViewSizeInvalid; unsigned int x :1 isAnimatingPaste; unsigned int x :1 textSizeCacheEnabled; unsigned int x :1 showsEditMenu; unsigned int x :1 transitioningFromNSTextLayoutManagerToNSLayoutManager; unsigned int x :1 extremeSizingEnabled; unsigned int x :1 sizingRule; unsigned int x :1 wantsContentAwareTypesettingLanguage; } _tvFlags;
  long long _contentSizeUpdateSeqNo;
  _UITextViewRestorableScrollPosition *_scrollTarget;
  unsigned long long _scrollPositionDontRecordCount;
  _UITextViewRestorableScrollPosition *_scrollPosition;
  double _offsetFromScrollPosition;
  double _preferredMaxLayoutWidth;
  UILabel *_placeholderLabel;
  NSAttributedString *_overriddenPlaceholder;
  long long _overriddenPlaceholderAlignment;
  long long _textKitCodingFlavor;
  _UICharacterStreamingManager *_characterStreamingManager;
  NSDictionary *_siriParameters;
  double _firstBaselineOffsetFromTop;
  double _lastBaselineOffsetFromBottom;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _unadjustedTextContainerInset;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _textContainerInsetAdjustment;
  _UITextSizeCache *_intrinsicSizeCache;
  CUICatalog *_cuiCatalog;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _beforeFreezingTextContainerInset;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _duringFreezingTextContainerInset;
  struct CGSize { double width; double height; } _beforeFreezingFrameSize;
  BOOL _unfreezingTextContainerSize;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frameOfTrailingWhitespace;
  BOOL _canShowTextFormattingOptions;
  double _bottomContentInsetAdjustmentForTextFormattingController;
  UIBarButtonItemGroup *_textFormattingAssistantBarGroup;
  BOOL _textFormattingControllerPresentationDeferred;
  BOOL _forceSelectionDisplayForTextFormatting;
  id _textFormattingKeyboardSuppressionAssertion;
  BOOL _didDisableAutomaticKeyboardBehaviorForTextFormatting;
  _UITextViewContentPadding *_topContentPadding;
  _UITextViewContentPadding *_bottomContentPadding;
  struct CGPoint { double x; double y; } _scrollEndDraggingVelocity;
  UIView *_selectionContainerView;
  double _multilineContextWidth;
  _UITextInteractableItemCache *_textInteractableItemCache;
}

@property (nonatomic) BOOL _drawsDebugBaselines;
@property (copy, nonatomic) id _interactionState;
@property (copy, nonatomic) id interactionState;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL textLayoutManagerEnabled;
@property (retain, nonatomic) _UITextViewVisualStyle *visualStyle;
@property (readonly, nonatomic) _UIFindInteraction *_dci_findInteraction;
@property (nonatomic) BOOL _dci_findInteractionEnabled;
@property (weak, @dynamic, nonatomic) NSObject<UITextViewDelegate> *delegate;
@property (copy, nonatomic) NSString *text;
@property (retain, nonatomic) UIFont *font;
@property (retain, nonatomic) UIColor *textColor;
@property (nonatomic) long long textAlignment;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } selectedRange;
@property (nonatomic) BOOL editable;
@property (nonatomic) BOOL selectable;
@property (nonatomic) unsigned long long dataDetectorTypes;
@property (nonatomic) BOOL allowsEditingTextAttributes;
@property (copy) NSAttributedString *attributedText;
@property (copy, nonatomic) NSDictionary *typingAttributes;
@property (retain) UIView *inputView;
@property (retain) UIView *inputAccessoryView;
@property (nonatomic) BOOL clearsOnInsertion;
@property (readonly, nonatomic) NSTextContainer *textContainer;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } textContainerInset;
@property (readonly, nonatomic) NSTextLayoutManager *textLayoutManager;
@property (readonly, nonatomic) NSLayoutManager *layoutManager;
@property (readonly, nonatomic) NSTextStorage *textStorage;
@property (copy, nonatomic) NSDictionary *linkTextAttributes;
@property (nonatomic) BOOL usesStandardTextScaling;
@property (readonly, nonatomic) UIFindInteraction *findInteraction;
@property (nonatomic) BOOL findInteractionEnabled;
@property (nonatomic) long long borderStyle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL isSingleLineDocument;
@property (retain, nonatomic) UIColor *tintColor;
@property (readonly, nonatomic) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (retain, nonatomic) _UITextInteractableItemCache *_textInteractableItemCache;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) NSObject<UITextInputDelegate> *inputDelegate;
@property (readonly, nonatomic) NSObject<UITextInputTokenizer> *tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (@dynamic, nonatomic) long long autocapitalizationType;
@property (@dynamic, nonatomic) long long autocorrectionType;
@property (@dynamic, nonatomic) long long spellCheckingType;
@property (@dynamic, nonatomic) long long smartQuotesType;
@property (@dynamic, nonatomic) long long smartDashesType;
@property (@dynamic, nonatomic) long long smartInsertDeleteType;
@property (@dynamic, nonatomic) long long inlinePredictionType;
@property (@dynamic, nonatomic) long long keyboardType;
@property (@dynamic, nonatomic) long long keyboardAppearance;
@property (@dynamic, nonatomic) long long returnKeyType;
@property (@dynamic, nonatomic) BOOL enablesReturnKeyAutomatically;
@property (@dynamic, nonatomic) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) NSObject<UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (nonatomic) BOOL _systemCursorAccessoriesDisabled;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet * textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property (readonly) NSObject<NSCoding><NSCopying> *selectedTextSearchDocument;
@property (nonatomic) BOOL _extremeSizingEnabled;
@property (nonatomic) BOOL adjustsFontForContentSizeCategory;
@property (nonatomic) long long sizingRule;

/* class methods */
+ (BOOL)_isTextLayoutManagerEnabled;
+ (id)textViewUsingTextLayoutManager:(BOOL)manager;
+ (id)_defaultFont;
+ (id)_defaultTextColor;

/* instance methods */
- (BOOL)_hasFontInfoForVerticalBaselineSpacing;
- (id)_fontInfoForBaselineSpacing;
- (BOOL)_hasCustomAutolayoutNeighborSpacingForAttribute:(long long *)attribute;
- (double)_autolayoutSpacingAtEdge:(int)edge forAttribute:(long long)attribute inContainer:(id)container isGuide:(BOOL)guide;
- (double)_autolayoutSpacingAtEdge:(int)edge forAttribute:(long long)attribute nextToNeighbor:(id)neighbor edge:(int)edge attribute:(long long)attribute multiplier:(double)multiplier;
- (void)_setInteractionState:(id)state;
- (void)encodeRestorableStateWithCoder:(id)coder includingSelectedTextAndDisplayedViewControllers:(BOOL)controllers;
- (void)encodeRestorableStateWithCoder:(id)coder;
- (void)decodeRestorableStateWithCoder:(id)coder includingSelectedTextAndDisplayedViewControllers:(BOOL)controllers;
- (void)decodeRestorableStateWithCoder:(id)coder;
- (void)_setDrawsDebugBaselines:(BOOL)baselines;
- (BOOL)isAccessibilityElementByDefault;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (id)_activityItemsConfigurationAtLocation:(struct CGPoint { double x0; double x1; })location;
- (id)_newContainerViewWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame textContainer:(id)container textLayoutController:(id)controller;
- (id)_newTextContainer;
- (id)_newTextKit1LayoutControllerWithTextContainer:(id)container layoutManager:(id)manager textStorage:(id)storage;
- (void)_configureWithTextContainer:(id)container layoutManager:(id)manager textLayoutManagerEnabled:(BOOL)enabled;
- (void)_setUpWithTextContainer:(id)container textLayoutManagerEnabled:(BOOL)enabled;
- (void)_installContainerViewAtIndex:(unsigned long long)index;
- (BOOL)_reconfigureWithLayoutManager:(id)manager triggeredByLayoutManagerAccess:(BOOL)access triggeringSelector:(SEL)selector;
- (long long)_encodedTextKitFlavor;
- (void)_setEncodedTextKitFlavor:(long long)flavor;
- (void)_commonInitWithTextContainer:(id)container decoding:(BOOL)decoding editable:(BOOL)editable selectable:(BOOL)selectable draggable:(BOOL)draggable textLayoutManagerEnabled:(BOOL)enabled;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame textContainer:(id)container;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame textLayoutManagerEnabled:(BOOL)enabled;
- (id)initReadonlyAndUnselectableWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame textContainer:(id)container;
- (id)initReadonlyAndUnselectableWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame textContainer:(id)container textLayoutManagerEnabled:(BOOL)enabled;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)_populateArchivedSubviews:(id)subviews;
- (void)dealloc;
- (id)_inputController;
- (BOOL)_ownsInputAccessoryView;
- (void)addTextAlternativesDisplayStyle:(long long)style toRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_resolvedTypesettingLanguage:(id)language;
- (id)_contentView;
- (id)_containerView;
- (void)_textStorageDidProcessEditing:(id)editing;
- (unsigned long long)_totalNumberOfTextViewsInLayoutManager;
- (void)_observedTextViewDidChange:(id)change;
- (void)_setContentOffsetWithoutRecordingScrollPosition:(struct CGPoint { double x0; double x1; })position;
- (id)topContentPadding;
- (id)bottomContentPadding;
- (void)_textViewContentPaddingDidChange:(id)change;
- (void)setContentInset:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })inset;
- (void)setContentOffset:(struct CGPoint { double x0; double x1; })offset;
- (void)_scrollViewWillEndDraggingWithVelocity:(struct CGPoint { double x0; double x1; })velocity targetContentOffset:(struct CGPoint { double x0; double x1; } *)offset;
- (void)_scrollViewDidEndDraggingWithDeceleration:(BOOL)deceleration;
- (void)_scrollViewAnimationEnded:(id)ended finished:(BOOL)finished;
- (BOOL)_allowsOverflowForIntrinsicSizeCalculation;
- (void)_updateTextContainerSizeAndSizeToFit;
- (void)_resyncContainerFrameForNonAutolayout;
- (void)_resyncContainerFrameForNonAutolayoutDeferringSizeToFit:(BOOL)fit;
- (void)adjustedContentInsetDidChange;
- (void)_setExtremeSizingEnabled:(BOOL)enabled;
- (BOOL)_isExtremeSizingEnabled;
- (void)setNeedsLayout;
- (void)_setNeedsTextLayout;
- (void)_layoutText;
- (void)layoutSubviews;
- (void)_invalidateContainerViewSize;
- (void)_scrollToCaretIfNeeded;
- (void)_scrollToSelectionIfNeeded;
- (void)_textContainerSizeDidChange:(id)change;
- (void)_updateFrameOfTrailingWhitespace:(struct CGSize { double x0; double x1; })whitespace;
- (void)_updateContentSize;
- (void)_setFrameOrBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds fromOldRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect settingAction:(id /* block */)action;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameOfTrailingWhitespace;
- (void)_resetUsesExplicitPreferredMaxLayoutWidth;
- (void)_setPreferredMaxLayoutWidth:(double)width;
- (double)_preferredMaxLayoutWidth;
- (double)_firstBaselineOffsetFromTop;
- (double)_baselineOffsetFromBottom;
- (double)_internalFirstBaselineOffsetFromTop;
- (double)_internalLastBaselineOffsetFromBottom;
- (BOOL)_hasBaseline;
- (BOOL)_shouldInvalidateBaselineConstraintsForSize:(struct CGSize { double x0; double x1; })size oldSize:(struct CGSize { double x0; double x1; })size;
- (struct { double x0; double x1; })_baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })size;
- (struct { BOOL x0; BOOL x1; struct CGSize { double x0; double x1; } x2; })_saveSizeBeforeLayoutCalculation:(id)calculation;
- (void)_restoreSize:(struct { BOOL x0; BOOL x1; struct CGSize { double x0; double x1; } x2; })size afterLayoutCalculation:(id)calculation;
- (void)_configureForLayoutCalculation:(id)calculation inSize:(struct CGSize { double x0; double x1; })size;
- (void)_performTextKit2LayoutCalculation:(id /* block */)calculation inSize:(struct CGSize { double x0; double x1; })size;
- (void)_performTextKit1LayoutCalculation:(id /* block */)calculation inSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })_containerSizeForBoundsSize:(struct CGSize { double x0; double x1; })size allowingOverflow:(BOOL)overflow;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (void)traitCollectionDidChange:(id)change;
- (void)_didMoveFromWindow:(id)window toWindow:(id)window;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (id)_layoutDebuggingTitle;
- (double)_currentPreferredMaxLayoutWidth;
- (BOOL)_needsDoubleUpdateConstraintsPass;
- (BOOL)_wantsBaselineUpdatingFollowingConstraintsPass;
- (void)invalidateIntrinsicContentSize;
- (void)_prepareForFirstIntrinsicContentSizeCalculation;
- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_updateBaselineInformationDependentOnBounds;
- (void)_scrollRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toVisibleInContainingScrollView:(BOOL)view;
- (void)_scrollSelectionToVisibleInContainingScrollView:(BOOL)view;
- (void)_scrollSelectionToVisibleInContainingScrollView;
- (void)_keyboardDidShow:(id)show;
- (void)_keyboardFrameDidChange:(id)change;
- (BOOL)_shouldScrollEnclosingScrollView;
- (BOOL)_shouldCollectAsKeyView;
- (BOOL)canBecomeFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)tintColorDidChange;
- (BOOL)canResignFirstResponder;
- (BOOL)_finishResignFirstResponder;
- (BOOL)resignFirstResponder;
- (void)_notifyDidBeginEditing;
- (void)_notifyDidEndEditing;
- (BOOL)usesTiledViews;
- (void)setUsesTiledViews:(BOOL)views;
- (void)_disableTiledViews;
- (double)maxTileHeight;
- (void)setMaxTileHeight:(double)height;
- (BOOL)tiledViewsDrawAsynchronously;
- (void)setTiledViewsDrawAsynchronously:(BOOL)asynchronously;
- (void)addGhostedRange:(id)range;
- (void)removeAllGhostedRanges;
- (void)addInvisibleRange:(id)range;
- (void)removeInvisibleRange:(id)range;
- (void)setScrollEnabled:(BOOL)enabled;
- (void)_updateContainerTileAndSizingFlags;
- (void)_setInteractiveTextSelectionDisabled:(BOOL)disabled;
- (BOOL)_isInteractiveTextSelectionDisabled;
- (BOOL)shouldPresentSheetsInAWindowLayeredAboveTheKeyboard;
- (BOOL)_shouldShowEditMenu;
- (void)setShouldPresentSheetsInAWindowLayeredAboveTheKeyboard:(BOOL)keyboard;
- (BOOL)_isInCompactHorizontalSizeClass;
- (BOOL)_shouldHideInputViewsForTextFormatting;
- (void)_textViewWillPresentTextFormattingOptions;
- (void)_textViewDidDismissTextFormattingOptions;
- (void)_showTextFormattingOptions:(id)options;
- (void)_presentTextFormattingController;
- (void)_updateTextFormattingController;
- (void)_updateTextFormattingControllerPresentationSource;
- (void)_adjustBottomContentInsetForTextFormattingController:(BOOL)controller;
- (double)_textFormattingControllerOverlapHeight;
- (void)_dismissTextFormattingControllerIfNeededWithAnimation:(BOOL)animation;
- (void)_updateTextFormattingGroupInInputAssistantItem;
- (BOOL)_preserveSelectionDisplayForTextFormatting;
- (BOOL)_disableAutomaticKeyboardBehavior;
- (id)_placeholderLabel;
- (void)setAttributedPlaceholder:(id)placeholder;
- (id)attributedPlaceholder;
- (void)_setOverridePlaceholder:(id)placeholder alignment:(long long)alignment;
- (void)_setTextSizeCacheEnabled:(BOOL)enabled;
- (BOOL)_isTextSizeCacheEnabled;
- (void)_layoutPlaceholder;
- (void)_updatePlaceholderVisibility;
- (void)insertText:(id)text;
- (void)insertText:(id)text alternatives:(id)alternatives style:(long long)style;
- (void)insertText:(id)text style:(long long)style alternatives:(id)alternatives;
- (void)addTextAlternatives:(id)alternatives;
- (void)removeEmojiAlternatives;
- (void)deleteBackward;
- (void)_deleteBackwardAndNotify:(BOOL)notify;
- (unsigned long long)_textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (void)beginSelectionChange;
- (void)endSelectionChange;
- (void)updateSelection;
- (void)updateSelectionImmediately;
- (BOOL)_restoreFirstResponder;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point animated:(BOOL)animated;
- (void)endFloatingCursor;
- (BOOL)canBecomeFocused;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (id)_systemDefaultFocusGroupIdentifier;
- (void)_diagnoseFocusabilityForReport:(id)report;
- (id)editMenuForTextRange:(id)range suggestedActions:(id)actions;
- (BOOL)_implementsEditMenu;
- (void)_logWarningForMenuControllerUsage;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectForScrollToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })visible;
- (struct CGPoint { double x0; double x1; })_contentOffsetForScrollToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })visible;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_visibleRangeWithLayout:(BOOL)layout;
- (BOOL)_documentRangeEqualToViewportRange;
- (void)_enableSiriAnimationDictationStyle;
- (void)_setSiriAnimationDictationStyleWithCharacterInsertionRate:(double)rate minimumDurationBetweenHypotheses:(double)hypotheses;
- (id)extractWordArrayFromTokensArray:(id)array;
- (void)_didRecognizeSpeechTokens:(id)tokens;
- (void)_didRecognizeSpeechStrings:(id)strings;
- (void)_didFinishSpeechRecognition;
- (void)_ensureCleanedUp;
- (void)_restoreScrollPosition:(id)position animated:(BOOL)animated;
- (id)_restorableScrollPosition;
- (id)_restorableScrollPositionForStateRestoration;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })visible animated:(BOOL)animated;
- (void)scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })visible;
- (void)scrollSelectionToVisible:(BOOL)visible;
- (struct CGPoint { double x0; double x1; })_contentOffsetForScrollingToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectToScrollToVisibleInCellInWindow:(id)window;
- (id)selectedText;
- (id)textInRange:(id)range;
- (void)insertAttributedText:(id)text;
- (id)attributedTextInRange:(id)range;
- (void)replaceRange:(id)range withText:(id)text;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)typing replacementText:(id)text;
- (id)_rangeForTextKitRanges:(id)ranges;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)unmarkText;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset;
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (id)positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (id)selectionContainerView;
- (id)_selectionContainerViewAboveText;
- (id)_textInputViewForAddingGestureRecognizers;
- (id)characterRangeByExtendingPosition:(id)position inDirection:(long long)direction;
- (id)_visualSelectionRangeForExtent:(id)extent forPoint:(struct CGPoint { double x0; double x1; })point fromPosition:(id)position inDirection:(long long)direction;
- (id)undoManager;
- (long long)baseWritingDirectionForPosition:(id)position inDirection:(long long)direction;
- (void)setBaseWritingDirection:(long long)direction forRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (id)textStylingAtPosition:(id)position inDirection:(long long)direction;
- (id)selectionRectsForRange:(id)range;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point withinRange:(id)range;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)isEditing;
- (BOOL)_mightHaveSelection;
- (BOOL)isEditable;
- (BOOL)isSelectable;
- (void)_setShowsEditMenu:(BOOL)menu;
- (BOOL)_showsEditMenu;
- (void)_updateSelectableInteractions;
- (BOOL)_shouldSuppressSelectionCommands;
- (BOOL)_isSystemAttachment:(id)attachment;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })size;
- (void)removeTextPlaceholder:(id)placeholder;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)placeholder;
- (void)removeDictationResultPlaceholder:(id)placeholder willInsertResult:(BOOL)result;
- (id)rangeWithTextAlternatives:(id *)alternatives atPosition:(id)position;
- (void)_syncTypingAttributesToTextContainerAttributesForExtraLineFragment;
- (void)_setTypingAttributesTextColor:(id)color;
- (void)setContinuousSpellCheckingEnabled:(BOOL)enabled;
- (BOOL)performFinalGrammarChecking;
- (void)applyGrammarCheckingIndication;
- (void)textInputDidChange:(id)change;
- (BOOL)textInputShouldExtendCaretHeight:(id)height;
- (void)textInputDidChangeSelection:(id)selection;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame font:(id)font;
- (BOOL)allowsAttachments;
- (id)_currentDefaultAttributes;
- (void)_setTextColor:(id)color;
- (BOOL)becomesEditableWithGestures;
- (BOOL)_shouldBecomeEditableUponFocus;
- (BOOL)_shouldBecomeEditableUponBecomingTargetOfKeyboardEventDeferringEnvironment;
- (void)setBecomesEditableWithGestures:(BOOL)gestures;
- (void)disableClearsOnInsertion;
- (id)webView;
- (void)setContentToHTMLString:(id)htmlstring;
- (BOOL)shouldAutoscrollAboveBottom;
- (void)setShouldAutoscrollAboveBottom:(BOOL)bottom;
- (void)updateAutoscrollAboveBottom;
- (unsigned long long)marginTop;
- (void)setMarginTop:(unsigned long long)top;
- (struct CGPoint { double x0; double x1; })textContainerOrigin;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRectIgnoringKeyboard;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleTextRect;
- (void)setLineHeight:(double)height;
- (double)lineHeight;
- (void)_invalidateLayoutForLinkAttributesChange:(BOOL)change;
- (id)_linkTextAttributesForLink:(id)link forCharacterAtIndex:(unsigned long long)index;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (void)setContentMode:(long long)mode;
- (void)_setAllowedTypingAttributes:(id)attributes;
- (id)_allowedTypingAttributes;
- (BOOL)shouldPreserveVisualFontSizeFidelity;
- (void)setShouldPreserveVisualFontSizeFidelity:(BOOL)fidelity;
- (void)_setCuiCatalog:(id)catalog;
- (id)_cuiCatalog;
- (void)_setupDefaultStyleEffectConfiguration;
- (void)_setCuiStyleEffectConfiguration:(id)configuration;
- (id)_cuiStyleEffectConfiguration;
- (void)_updateTextEffectsConfigurationIfNeeded;
- (BOOL)_freezeTextContainerSize;
- (void)_setFreezeTextContainerSize:(BOOL)size;
- (void)_constrainTiledRenderingToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_unconstrainTiledRendering;
- (BOOL)_allowAnimatedUpdateSelectionRectViews;
- (id)linkTextAttributesForTextContainerView:(id)view;
- (id)textContainerView:(id)view linkTextAttributesForLink:(id)link forCharacterAtIndex:(unsigned long long)index;
- (BOOL)isEditableForTextContainerView:(id)view;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectedRangeForTextContainerView:(id)view;
- (void)updateSelectionForTextContainerView:(id)view;
- (id)textContainerView:(id)view cuiCatalogForTextEffectName:(id)name;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })autoscroll;
- (void)cancelAutoscroll;
- (void)_adjustFontForAccessibilityTraits:(BOOL)traits;
- (void)_setWantsContentAwareTypesettingLanguage:(BOOL)language;
- (BOOL)_wantsContentAwareTypesettingLanguage;
- (void)_adjustFontForTypesettingLanguage;
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender;
- (void)cut:(id)cut;
- (void)copy:(id)copy;
- (void)_define:(id)_define;
- (void)_translate:(id)_translate;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (void)_share:(id)_share;
- (BOOL)_isDisplayingTextService;
- (BOOL)_isDisplayingShareViewController;
- (BOOL)_isDisplayingLookupViewController;
- (void)_selectionMayChange:(id)change;
- (void)_insertAttributedTextWithoutClosingTyping:(id)typing;
- (void)_addShortcut:(id)shortcut;
- (BOOL)_isDisplayingShortcutViewController;
- (void)paste:(id)paste;
- (void)pasteAndMatchStyle:(id)style;
- (void)_pasteAttributedString:(id)string pasteAsRichText:(BOOL)text;
- (id)_attributedStringForInsertionOfAttributedString:(id)string;
- (void)select:(id)select;
- (void)selectAll:(id)all;
- (void)makeTextWritingDirectionNatural:(id)natural;
- (void)makeTextWritingDirectionRightToLeft:(id)left;
- (void)makeTextWritingDirectionLeftToRight:(id)right;
- (void)toggleBoldface:(id)boldface;
- (void)toggleItalics:(id)italics;
- (void)toggleUnderline:(id)underline;
- (void)increaseSize:(id)size;
- (void)decreaseSize:(id)size;
- (void)updateTextAttributesWithConversionHandler:(id /* block */)handler;
- (void)replace:(id)replace;
- (void)_promptForReplace:(id)replace;
- (void)_transliterateChinese:(id)chinese;
- (void)alignLeft:(id)left;
- (void)alignCenter:(id)center;
- (void)alignJustified:(id)justified;
- (void)alignRight:(id)right;
- (void)captureTextFromCamera:(id)camera;
- (void)validateCommand:(id)command;
- (BOOL)keyboardInput:(id)input shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (BOOL)keyboardInput:(id)input shouldInsertText:(id)text isMarkedText:(BOOL)text;
- (BOOL)keyboardInputShouldDelete:(id)delete;
- (BOOL)keyboardInputChanged:(id)changed;
- (void)keyboardInputChangedSelection:(id)selection;
- (id)automaticallySelectedOverlay;
- (BOOL)textInput:(id)input shouldChangeCharactersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (void)textInputWillAnimatePaste:(id)paste;
- (void)textInputDidAnimatePaste:(id)paste;
- (BOOL)_shouldObscureInput;
- (id)textInputTraits;
- (id)_textInputTraits;
- (void)takeTraitsFrom:(id)from;
- (id)forwardingTargetForSelector:(SEL)selector;
- (BOOL)respondsToSelector:(SEL)selector;
- (id)methodSignatureForSelector:(SEL)selector;
- (unsigned long long)_effectiveDataDetectorTypes;
- (BOOL)_shouldStartDataDetectors;
- (void)_cancelDataDetectors;
- (void)_startDataDetectorsIfNeeded;
- (void)_startDataDetectors;
- (void)_resetDataDetectorsResults;
- (void)_updateSelectionGestures;
- (BOOL)_delegatesAllowingTextItemInteractions;
- (BOOL)_delegatesAllowingTextItemPrimaryActionInteraction;
- (BOOL)_delegatesAllowingTextItemMenuInteraction;
- (BOOL)_delegatesAllowingLinkInteraction;
- (BOOL)_allowInteraction:(long long)interaction forTextInteractableItem:(id)item;
- (BOOL)_mightHaveInteractableItems;
- (BOOL)willInteractWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)startInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)validateInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_anyTextItemConstrainedToLineAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_textInteractableItemAtPoint:(struct CGPoint { double x0; double x1; })point precision:(unsigned long long)precision;
- (id)_textItemForItem:(id)item;
- (id)_interactionRequestForItem:(id)item;
- (id)_primaryActionForTextInteractableItem:(id)item defaultAction:(id)action;
- (id)_menuConfigurationForTextInteractableItem:(id)item defaultMenu:(id)menu;
- (BOOL)_interactionPossibleWithAttachment:(id)attachment;
- (BOOL)_allowHighlightForTextInteractableItem:(id)item;
- (void)_dci_setFindInteractionEnabled:(BOOL)enabled;
- (void)_clearHighlightView;
- (void)didBeginTextSearchOperation;
- (void)didEndTextSearchOperation;
- (BOOL)isTextDragActive;
- (BOOL)isTextDropActive;
- (id)_getDelegateZoomView;
- (double)_multilineContextWidth;
- (void)_setMultilineContextWidth:(double)width;
- (BOOL)isFindInteractionEnabled;
- (BOOL)_isTextLayoutManagerEnabled;
- (BOOL)_dci_isFindInteractionEnabled;
@end

#endif /* UITextView_h */
