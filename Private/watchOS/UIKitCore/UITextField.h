//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UITextField_h
#define UITextField_h
@import Foundation;

#include "UIControl.h"
#include "NSCoding-Protocol.h"
#include "UIButton.h"
#include "UIColor.h"
#include "UIContentSizeCategoryAdjusting-Protocol.h"
#include "UIFieldEditor.h"
#include "UIGestureRecognizerDelegate-Protocol.h"
#include "UIImage.h"
#include "UIImageView.h"
#include "UIInputContextHistory.h"
#include "UIKeyInputPrivate-Protocol.h"
#include "UIKeyboardInput-Protocol.h"
#include "UILabel.h"
#include "UILetterformAwareAdjusting-Protocol.h"
#include "UIPopoverControllerDelegate-Protocol.h"
#include "UIScrollView.h"
#include "UITapGestureRecognizer.h"
#include "UITextFieldContent-Protocol.h"
#include "UITextFieldDelegate-Protocol.h"
#include "UITextFieldLabel.h"
#include "UITextInput-Protocol.h"
#include "UITextInputAssistantItem.h"
#include "UITextInputDelegate-Protocol.h"
#include "UITextInputPasswordRules.h"
#include "UITextInputPrivate-Protocol.h"
#include "UITextInputSuggestionDelegate-Protocol.h"
#include "UITextInputTokenizer-Protocol.h"
#include "UITextInputTraits.h"
#include "UITextInputTraits_Private-Protocol.h"
#include "UITextInteractionAssistant.h"
#include "UITextPosition.h"
#include "UITextRange.h"
#include "UITraitCollection.h"
#include "UIView.h"
#include "UIViewGhostedRangeSupporting-Protocol.h"
#include "UIVisualEffectView.h"
#include "_UICascadingTextStorage.h"
#include "_UIFieldEditorHostingViewRequirements-Protocol.h"
#include "_UIFloatingContentView.h"
#include "_UIFloatingContentViewDelegate-Protocol.h"
#include "_UIFullFontSize.h"
#include "_UILayoutBaselineUpdating-Protocol.h"
#include "_UITextFieldBackgroundProvider.h"
#include "_UITextFieldCanvasContext-Protocol.h"
#include "_UITextFieldClearButton.h"
#include "_UITextFieldClearButtonImageProviding-Protocol.h"
#include "_UITextFieldMetricsProvider-Protocol.h"
#include "_UITextFieldVisualStyle.h"
#include "_UITextFieldVisualStyleSubject-Protocol.h"
#include "_UITouchPassthroughView.h"
#include "_UIViewBaselineSpacing-Protocol.h"
#include "_UIViewLanguageAwareAdjusting-Protocol.h"

@class CUICatalog, CUIStyleEffectConfiguration, NSAttributedString, NSDictionary, NSIndexSet, NSLayoutManager, NSMutableDictionary, NSString, NSTextContainer, NSTextStorage, RTIInputSystemSourceSession, UIFont;
@protocol UIView<_UITextCanvas, _UITextLayoutControllerBase<_UITextLayoutController;

@interface UITextField : UIControl<_UIViewBaselineSpacing, UIKeyboardInput, _UILayoutBaselineUpdating, _UIFloatingContentViewDelegate, UIGestureRecognizerDelegate, _UITextFieldVisualStyleSubject, UIViewGhostedRangeSupporting, _UITextFieldClearButtonImageProviding, UIPopoverControllerDelegate, UITextFieldContent, _UITextFieldCanvasContext, UIKeyInputPrivate, _UIFieldEditorHostingViewRequirements, UITextInputPrivate, UITextInputTraits_Private, _UIViewLanguageAwareAdjusting, UITextInput, NSCoding, UIContentSizeCategoryAdjusting, UILetterformAwareAdjusting> {
  /* instance variables */
  UIView *_contentCoverView;
  long long _contentCoverViewMode;
  UIView *_backgroundCoverView;
  long long _backgroundCoverViewMode;
  double _foregroundViewsAlpha;
  UITextInputTraits *_traits;
  UITextInputTraits *_nonAtomTraits;
  _UIFullFontSize *_fullFontSize;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _padding;
  _UITextFieldClearButton *_clearButton;
  struct CGSize { double width; double height; } _clearButtonOffset;
  NSMutableDictionary *_cachedDefaultClearButtonImages;
  struct CGSize { double width; double height; } _leftViewOffset;
  struct CGSize { double width; double height; } _rightViewOffset;
  _UIFloatingContentView *_floatingContainerView;
  UIVisualEffectView *_contentBackdropView;
  UITextFieldLabel *_placeholderLabel;
  UITextFieldLabel *_suffixLabel;
  UITextFieldLabel *_prefixLabel;
  UIImageView *_iconView;
  UILabel *_label;
  double _labelOffset;
  NSAttributedString *_overriddenPlaceholder;
  long long _overriddenPlaceholderAlignment;
  BOOL _forceDisplayOverridePlaceholder;
  UITapGestureRecognizer *_selectGestureRecognizer;
  UIFieldEditor *_fieldEditor;
  struct { unsigned int x :1 verticallyCenterText; unsigned int x :4 isAnimating; unsigned int x :1 becomesFirstResponderOnClearButtonTap; unsigned int x :1 clearsPlaceholderOnBeginEditing; unsigned int x :1 adjustsFontSizeToFitWidth; unsigned int x :1 fieldEditorAttached; unsigned int x :1 canBecomeFirstResponder; unsigned int x :1 shouldSuppressShouldBeginEditing; unsigned int x :1 inResignFirstResponder; unsigned int x :1 undoDisabled; unsigned int x :1 explicitAlignment; unsigned int x :1 implementsCustomDrawing; unsigned int x :1 suppressContentChangedNotification; unsigned int x :1 allowsEditingTextAttributes; unsigned int x :1 usesAttributedText; unsigned int x :2 clearingBehavior; unsigned int x :1 overridePasscodeStyle; unsigned int x :1 shouldResignWithoutUpdate; unsigned int x :1 blurEnabled; unsigned int x :1 visualEffectViewEnabled; unsigned int x :1 disableFocus; unsigned int x :1 disableRemoteTextEditing; unsigned int x :1 allowsAttachments; unsigned int x :1 isReceivingDrop; unsigned int x :1 contentCoverUnsecuresText; unsigned int x :1 forcesClearButtonHighContrastAppearance; unsigned int x :1 contentInsetsFromFontsValid; unsigned int x :1 autolayoutWantsBaselines; unsigned int x :1 animateNextHighlightChange; unsigned int x :1 backgroundProviderDraws; unsigned int x :1 backgroundProviderHasBackgroundView; unsigned int x :1 isHandlingClearButton; unsigned int x :1 textLayoutManagerEnabled; unsigned int x :1 extremeSizingEnabled; unsigned int x :1 sizingRule; unsigned int x :1 shouldDisplayDictationPlaceholderMessage; unsigned int x :1 supportsKeyboardNavigationForSuggestions; } _textFieldFlags;
  double _firstBaselineOffsetFromTop;
  double _lastBaselineOffsetFromBottom;
  BOOL _didInvalidateBaselineConstraintsOnHeightChange;
  BOOL _deferringBecomeFirstResponder;
  long long _preferredBorderStyle;
  double _preferredBackgroundCornerRadius;
  _UITextFieldBackgroundProvider *_backgroundProvider;
  NSObject<_UITextFieldMetricsProvider> *_metricsProvider;
  UIView<_UITextCanvas> *_textCanvasView;
  CUICatalog *_cuiCatalog;
  CUIStyleEffectConfiguration *_cuiStyleEffectConfiguration;
  _UITouchPassthroughView *_selectionContainerView;
  BOOL _tvUseVibrancy;
  BOOL _disableTextColorUpdateOnTraitCollectionChange;
  UIColor *_tvCustomTextColor;
  UIColor *_tvCustomFocusedTextColor;
}

@property (copy, nonatomic) id _interactionState;
@property (copy, nonatomic) id interactionState;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL _tvUseVibrancy;
@property (retain, nonatomic) UIColor *_tvCustomTextColor;
@property (retain, nonatomic) UIColor *_tvCustomFocusedTextColor;
@property (nonatomic) BOOL _disableTextColorUpdateOnTraitCollectionChange;
@property (retain, nonatomic) _UITextFieldVisualStyle *visualStyle;
@property (retain) UIView *recentsAccessoryView;
@property (retain, nonatomic) CUICatalog *_cuiCatalog;
@property (retain, nonatomic) CUIStyleEffectConfiguration *_cuiStyleEffectConfiguration;
@property BOOL clearsPlaceholderOnBeginEditing;
@property (readonly, nonatomic) UIFieldEditor *_fieldEditor;
@property (nonatomic) double _roundedRectBackgroundCornerRadius;
@property (readonly, nonatomic) UILabel *_placeholderLabel;
@property (nonatomic) BOOL _shouldDisplayDictationPlaceholderMessage;
@property (readonly, nonatomic) UIButton *_clearButton;
@property (nonatomic) BOOL forcesClearButtonHighContrastAppearance;
@property (nonatomic) BOOL undoEnabled;
@property (readonly, nonatomic) NSString *searchText;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _padding;
@property (nonatomic) long long clearingBehavior;
@property (nonatomic) int controlSize;
@property (retain, nonatomic) UIColor *shadowColor;
@property (nonatomic) struct CGSize { double x0; double x1; } shadowOffset;
@property (nonatomic) double shadowBlur;
@property (nonatomic) double _passcodeStyleAlpha;
@property (nonatomic) BOOL _overridePasscodeStyle;
@property (retain, nonatomic) UITextInputAssistantItem *inputAssistantItem;
@property (nonatomic) BOOL supportsKeyboardNavigationForSuggestions;
@property (copy, nonatomic) NSDictionary *linkTextAttributes;
@property (nonatomic) long long nonEditingLinebreakMode;
@property (copy, nonatomic) NSString *text;
@property (copy, nonatomic) NSAttributedString *attributedText;
@property (retain, nonatomic) UIColor *textColor;
@property (retain, nonatomic) UIFont *font;
@property (nonatomic) long long textAlignment;
@property (nonatomic) long long borderStyle;
@property (copy, nonatomic) NSDictionary *defaultTextAttributes;
@property (copy, nonatomic) NSString *placeholder;
@property (copy, nonatomic) NSAttributedString *attributedPlaceholder;
@property (nonatomic) BOOL clearsOnBeginEditing;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) double minimumFontSize;
@property (weak, nonatomic) NSObject<UITextFieldDelegate> *delegate;
@property (retain, nonatomic) UIImage *background;
@property (retain, nonatomic) UIImage *disabledBackground;
@property (readonly, nonatomic) BOOL editing;
@property (nonatomic) BOOL allowsEditingTextAttributes;
@property (copy, nonatomic) NSDictionary *typingAttributes;
@property (nonatomic) long long clearButtonMode;
@property (retain, nonatomic) UIView *leftView;
@property (nonatomic) long long leftViewMode;
@property (retain, nonatomic) UIView *rightView;
@property (nonatomic) long long rightViewMode;
@property (retain) UIView *inputView;
@property (retain) UIView *inputAccessoryView;
@property (nonatomic) BOOL clearsOnInsertion;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UIView *_contentView;
@property (nonatomic) BOOL allowsAttachments;
@property (readonly, nonatomic) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (readonly, nonatomic) NSTextStorage *textStorage;
@property (readonly, nonatomic) NSTextContainer *textContainer;
@property (readonly, nonatomic) NSLayoutManager *layoutManager;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } textContainerOrigin;
@property (readonly, nonatomic) UIScrollView *enclosingScrollView;
@property (readonly, nonatomic) BOOL editable;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } drawingScale;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _clipRectForFadedEdges;
@property (readonly, nonatomic) BOOL hasText;
@property (@dynamic, nonatomic) long long autocapitalizationType;
@property (@dynamic, nonatomic) long long autocorrectionType;
@property (@dynamic, nonatomic) long long spellCheckingType;
@property (@dynamic, nonatomic) long long smartQuotesType;
@property (@dynamic, nonatomic) long long smartDashesType;
@property (@dynamic, nonatomic) long long smartInsertDeleteType;
@property (@dynamic, nonatomic) long long inlinePredictionType;
@property (@dynamic, nonatomic) long long keyboardType;
@property (@dynamic, nonatomic) long long keyboardAppearance;
@property (@dynamic, nonatomic) long long returnKeyType;
@property (@dynamic, nonatomic) BOOL enablesReturnKeyAutomatically;
@property (@dynamic, nonatomic) BOOL secureTextEntry;
@property (copy, @dynamic, nonatomic) NSString *textContentType;
@property (copy, @dynamic, nonatomic) UITextInputPasswordRules *passwordRules;
@property (readonly, nonatomic) UIView *_backgroundView;
@property (readonly, nonatomic) BOOL _fieldEditorAttached;
@property (readonly, nonatomic) BOOL _hasContent;
@property (readonly, nonatomic) long long _blurEffectStyleForAppearance;
@property (readonly, nonatomic) UITraitCollection *traitCollection;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) NSObject<UITextInputDelegate> *inputDelegate;
@property (readonly, nonatomic) NSObject<UITextInputTokenizer> *tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) NSObject<UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (nonatomic) BOOL _systemCursorAccessoriesDisabled;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet * textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL isSingleLineDocument;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (@dynamic, nonatomic) BOOL displaySecureTextUsingPlainText;
@property (@dynamic, nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (@dynamic, nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property (nonatomic) BOOL _extremeSizingEnabled;
@property (nonatomic) BOOL adjustsFontForContentSizeCategory;
@property (nonatomic) long long sizingRule;

/* class methods */
+ (BOOL)_isTextLayoutManagerEnabled;
+ (BOOL)_wantsFadedEdges;
+ (Class)_fieldEditorClass;

/* instance methods */
- (BOOL)_hasFontInfoForVerticalBaselineSpacing;
- (id)_fontInfoForBaselineSpacing;
- (BOOL)_hasCustomAutolayoutNeighborSpacingForAttribute:(long long *)attribute;
- (double)_autolayoutSpacingAtEdge:(int)edge forAttribute:(long long)attribute inContainer:(id)container isGuide:(BOOL)guide;
- (double)_autolayoutSpacingAtEdge:(int)edge forAttribute:(long long)attribute nextToNeighbor:(id)neighbor edge:(int)edge attribute:(long long)attribute multiplier:(double)multiplier;
- (void)_setInteractionState:(id)state;
- (void)encodeRestorableStateWithCoder:(id)coder includingSelectedTextAndDisplayedViewControllers:(BOOL)controllers;
- (void)encodeRestorableStateWithCoder:(id)coder;
- (void)decodeRestorableStateWithCoder:(id)coder includingSelectedTextAndDisplayedViewControllers:(BOOL)controllers;
- (void)decodeRestorableStateWithCoder:(id)coder;
- (BOOL)isAccessibilityElementByDefault;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (void)textContainerUsageDidChangeToSize:(struct CGSize { double x0; double x1; })size;
- (void)didRemoveTextAttachmentViews:(id)views;
- (void)didAddTextAttachmentViews:(id)views;
- (void)didLayoutTextAttachmentView:(id)view inFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_setCuiCatalog:(id)catalog;
- (void)_setupDefaultStyleEffectConfiguration;
- (void)_setCuiStyleEffectConfiguration:(id)configuration;
- (void)_updateTextEffectsConfigurationIfNeeded;
- (void)_propagateCuiProperties;
- (void)setSemanticContentAttribute:(long long)attribute;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame textLayoutManagerEnabled:(BOOL)enabled;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithCoder:(id)coder;
- (void)_initIncreasedContrastNotifications;
- (id)_encodableSubviews;
- (void)_populateArchivedSubviews:(id)subviews;
- (void)encodeWithCoder:(id)coder;
- (void)_encodeBackgroundColorWithCoder:(id)coder;
- (void)dealloc;
- (void)_setNeedsStyleRecalc;
- (void)_sizeChanged:(BOOL)changed;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_responderSelectionRectForWindow:(id)window;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_responderExternalTouchRectForWindow:(id)window;
- (struct CGSize { double x0; double x1; })_textSizeUsingFullFontSize:(BOOL)size;
- (struct CGSize { double x0; double x1; })_textSize;
- (struct { double x0; double x1; })_baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (BOOL)canBecomeFirstResponder;
- (BOOL)canResignFirstResponder;
- (BOOL)_shouldCollectAsKeyView;
- (BOOL)_requiresKeyboardResetOnReload;
- (void)scrollTextFieldToVisibleIfNecessary;
- (void)_receivedKeyboardDidShowNotification:(id)notification;
- (BOOL)becomeFirstResponder;
- (void)_installSelectGestureRecognizer;
- (void)_uninstallSelectGestureRecognizer;
- (void)_selectGestureChanged:(id)changed;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (void)_gestureRecognizerFailed:(id)failed;
- (void)pressesBegan:(id)began withEvent:(id)event;
- (void)pressesChanged:(id)changed withEvent:(id)event;
- (void)pressesEnded:(id)ended withEvent:(id)event;
- (void)pressesCancelled:(id)cancelled withEvent:(id)event;
- (BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
- (BOOL)continueTrackingWithTouch:(id)touch withEvent:(id)event;
- (void)endTrackingWithTouch:(id)touch withEvent:(id)event;
- (void)cancelTrackingWithEvent:(id)event;
- (void)_setDisableFocus:(BOOL)focus;
- (double)_maximumAlphaForLeadingView;
- (double)_placeholderLabelAlphaForForegroundViewsAlpha:(double)alpha;
- (void)_setForegroundViewsAlpha:(double)alpha;
- (double)_foregroundViewsAlpha;
- (BOOL)canBecomeFocused;
- (void)didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)coordinator;
- (BOOL)_allowsChangingFirstResponderForFocusUpdateWithContext:(id)context;
- (BOOL)_shouldForwardMovementToFocusEngine:(long long)engine;
- (id)_systemDefaultFocusGroupIdentifier;
- (id)_preferredConfigurationForFocusAnimation:(long long)animation inContext:(id)context;
- (BOOL)_supportsKeyboardNavigationForSuggestions;
- (void)_setSupportsKeyboardNavigationForSuggestions:(BOOL)suggestions;
- (void)_stopObservingFieldEditorScroll;
- (void)_activateSelectionView;
- (BOOL)_shouldSuppressSelectionHandles;
- (void)_initialScrollDidFinish:(id)finish;
- (void)__resumeBecomeFirstResponder;
- (long long)_currentTextAlignment;
- (void)_updatePlaceholderPosition;
- (void)_becomeFirstResponder;
- (void)_nonDestructivelyResignFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)_finishResignFirstResponder;
- (void)_notifyDidBeginEditing;
- (void)_notifyDidEndEditing;
- (void)_windowBecameKey;
- (void)_windowResignedKey;
- (void)_resignFirstResponder;
- (void)touchesCancelled:(id)cancelled withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (void)traitCollectionDidChange:(id)change;
- (void)_tvUpdateAppearanceForUserInterfaceStyle;
- (id)automaticallySelectedOverlay;
- (void)_invalidateDefaultFullFontSize;
- (void)_setFullFontSize:(id)size;
- (double)_fullFontSize;
- (void)_invalidateDefaultFont;
- (id)_defaultFont;
- (struct CGSize { double x0; double x1; })_visionOverrideNaturalHeight:(struct CGSize { double x0; double x1; })height;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_visionOverrideHorizontalInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)setFont:(id)font fullFontSize:(id)size;
- (void)setFont:(id)font fullFontSize:(id)size ambientOnly:(BOOL)only;
- (float)_newFontSize:(float)size maxSize:(float)size;
- (id)_copyFont:(id)font newSize:(float)size maxSize:(float)size;
- (float)_marginTop;
- (float)_marginTopForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)_clearButtonImageForState:(unsigned long long)state;
- (BOOL)_hasCustomClearButtonImage;
- (id)clearButton;
- (void)_invalidateCachedDefaultClearButtonImages;
- (BOOL)_shouldAnimateTransitionForAccessoryView:(id)view;
- (BOOL)_isAccessoryViewAnimatable:(id)animatable;
- (void)_transitionFromAccessoryView:(id)view toView:(id)view allowingAnimation:(BOOL)animation;
- (void)_updateButtons;
- (void)_updateButtonsAllowingAnimation:(BOOL)animation;
- (void)_updateAutosizeStyleIfNeeded;
- (BOOL)_heightShouldBeMini;
- (BOOL)_partsShouldBeMini;
- (BOOL)_showsClearButtonWhenNonEmpty:(BOOL)empty;
- (BOOL)_showsClearButton:(BOOL)button;
- (BOOL)_showsClearButtonWhenEmpty;
- (BOOL)_showsLeftView;
- (BOOL)_showsRightView;
- (BOOL)_showsContentCoverView;
- (BOOL)_showsBackgroundCoverView;
- (BOOL)_shouldUnobscureTextWithContentCover;
- (BOOL)_isShowingPlaceholder;
- (BOOL)_isShowingPrefix;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_availableTextRectExcludingButtonsForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_availableTextRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds forEditing:(BOOL)editing;
- (void)_updateLabel;
- (id)_viewForLoweringBaselineLayoutAttribute:(int)attribute;
- (BOOL)_wantsBaselineUpdatingFollowingConstraintsPass;
- (BOOL)_hasBaseline;
- (double)_baselineOffsetForLast:(BOOL)last autolayoutOnly:(BOOL)only;
- (double)_internalFirstBaselineOffsetFromTop;
- (double)_firstBaselineOffsetFromTop;
- (double)_internalLastBaselineOffsetFromBottom;
- (double)_baselineOffsetFromBottom;
- (void)_updateBaselineInformationDependentOnBounds;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })textContainerInset;
- (id)_baselineCalculatorSourceCoordinateSpace;
- (void)_updateBaselineInformationDependentOnBoundsAllowingInvalidation:(BOOL)invalidation;
- (void)_setExtremeSizingEnabled:(BOOL)enabled;
- (BOOL)_isExtremeSizingEnabled;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_suffixFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_prefixFrame;
- (void)_layoutFieldEditor;
- (void)_layoutLabels;
- (void)_layoutContentAndExtras;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_textCanvasViewFrameIncludingContentInsetsFromFontsWhenNotContainedByFieldEditor;
- (void)_layoutContentOnly;
- (void)floatingContentView:(id)view isTransitioningFromState:(unsigned long long)state toState:(unsigned long long)state;
- (void)setNeedsLayout;
- (void)layoutSubviews;
- (BOOL)_isTextLayoutManagerEnabled;
- (BOOL)_visualizesDebugRects;
- (void)_setVisualizesDebugRects:(BOOL)rects;
- (BOOL)_shouldEndEditing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustedCaretRectForCaretRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)actualMinimumFontSize;
- (id)actualFont;
- (struct CGPoint { double x0; double x1; })_scrollOffset;
- (struct CGSize { double x0; double x1; })_leftViewOffset;
- (void)_setLeftViewOffset:(struct CGSize { double x0; double x1; })offset;
- (struct CGSize { double x0; double x1; })_rightViewOffset;
- (void)_setRightViewOffset:(struct CGSize { double x0; double x1; })offset;
- (id)_placeholderColor;
- (id)_placeholderView;
- (id)valueForKey:(id)key;
- (id)valueForUndefinedKey:(id)key;
- (BOOL)_shouldSendContentChangedNotificationsIfOnlyMarkedTextChanged;
- (id)textInputTraits;
- (void)takeTraitsFrom:(id)from;
- (id)forwardingTargetForSelector:(SEL)selector;
- (id)methodSignatureForSelector:(SEL)selector;
- (BOOL)respondsToSelector:(SEL)selector;
- (void)tintColorDidChange;
- (void)_updateForTintColor;
- (void)_increaseContrastSettingChanged:(id)changed;
- (BOOL)_forcesClearButtonHighContrastAppearance;
- (void)_setForcesClearButtonHighContrastAppearance:(BOOL)appearance;
- (void)_didChangeSecureTextEntry;
- (void)_noteThatKeyboardAppearanceHasChanged;
- (void)_notifySystemKeyboardOfAppearanceChange;
- (BOOL)_shouldObscureInput;
- (void)_invalidatePasscodeStyleFromStyle:(BOOL)style;
- (Class)_canvasViewClass;
- (id)_textLayoutController;
- (id)_textContainer;
- (id)_textStorage;
- (id)_text;
- (id)_attributedText;
- (void)finishedSettingTextOrAttributedText;
- (void)_setTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (void)_setAttributedTextOnFieldEditor:(id)editor setCaretSelectionAfterText:(BOOL)text;
- (BOOL)_textNeedsSanitizing:(id)sanitizing;
- (void)sanitizeAttributedText:(id)text;
- (void)_sanitizeText:(id)text;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })visible animated:(BOOL)animated;
- (void)_setAttributedText:(id)text setCaretSelectionAfterText:(BOOL)text;
- (void)_syncTypingAttributesWithDefaultAttribute:(id)attribute;
- (void)_setTextColor:(id)color;
- (void)interactionTintColorDidChange;
- (void)disableClearsOnInsertion;
- (void)setClipsToBounds:(BOOL)bounds;
- (id)defaultClearButtonImageForState:(unsigned long long)state;
- (void)_adjustFontForAccessibilityTraits:(BOOL)traits;
- (void)setContentVerticalAlignment:(long long)alignment;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_backgroundBounds;
- (void)_invalidateBackgroundProviderForced:(BOOL)forced;
- (void)_invalidateBackgroundProvider;
- (id)_backgroundProvider;
- (void)_setBackgroundProvider:(id)provider;
- (void)_backgroundProviderWillChange:(id)change;
- (void)_backgroundProviderDidChange;
- (Class)_preferredBackgroundProviderClass;
- (id)_preferredMetricsProvider;
- (void)_invalidateMetricsProvider;
- (id)_metricsProvider;
- (void)_setMetricsProvider:(id)provider;
- (void)_metricsProviderWillChange:(id)change;
- (void)_metricsProviderDidChange;
- (Class)_placeholderLabelClass;
- (BOOL)_shouldShrinkPlaceholderToFitForAccessibility;
- (id)createPlaceholderLabelWithFont:(id)font andTextAlignment:(long long)alignment;
- (long long)_preferredRenderingModeForPlaceholder;
- (id)createTextLabelWithTextColor:(id)color;
- (void)finishedSettingPlaceholder;
- (void)createPlaceholderIfNecessary;
- (void)_setPlaceholder:(id)placeholder;
- (void)_setAttributedPlaceholder:(id)placeholder;
- (long long)_suffixLabelTextAlignment;
- (void)_setSuffix:(id)suffix withColor:(id)color;
- (void)_updateSuffix:(id)suffix;
- (void)_setPrefix:(id)prefix;
- (id)_attributedStringForInsertionOfAttributedString:(id)string;
- (void)setBackgroundColor:(id)color;
- (id)backgroundColor;
- (BOOL)isEditing;
- (void)_setActualLeftView:(id)view;
- (void)_setActualLeftViewMode:(long long)mode;
- (void)_showSymbolAnimatableLeftViewNowIfNeeded;
- (void)_setActualRightView:(id)view;
- (void)_setActualRightViewMode:(long long)mode;
- (void)_showSymbolAnimatableRightViewNowIfNeeded;
- (id)_contentCoverView;
- (void)_setContentCoverView:(id)view;
- (long long)_contentCoverViewMode;
- (void)_setContentCoverViewMode:(long long)mode;
- (BOOL)_contentCoverUnsecuresText;
- (void)_setContentCoverUnsecuresText:(BOOL)text;
- (void)_contentCoverStateDidChange;
- (id)_backgroundCoverView;
- (void)_setBackgroundCoverView:(id)view;
- (long long)_backgroundCoverViewMode;
- (void)_setBackgroundCoverViewMode:(long long)mode;
- (void)_backgroundCoverStateDidChange;
- (BOOL)_ownsInputAccessoryView;
- (BOOL)_hasSuffixField;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })borderRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })placeholderRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })editingRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (double)_clearButtonMarginX;
- (double)_clearButtonPadX;
- (struct CGSize { double x0; double x1; })_clearButtonSize:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clearButtonRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_baselineLeftViewRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })leftViewRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rightViewRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)drawPlaceholderInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)drawSuffixInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)drawPrefixInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forLabel:(id)label;
- (id)_fieldEditorHost;
- (id)_fieldEditorHostAllowingCreation:(BOOL)creation;
- (void)_removeFieldEditorAndHost;
- (void)_attachFieldEditor;
- (void)_detachFieldEditor;
- (void)_detachFieldEditorDiscardingEdits:(BOOL)edits animated:(BOOL)animated;
- (id)_defaultPromptString;
- (void)_addFieldEditorToView;
- (id)_editingProcessor;
- (void)_willAttachFieldEditor;
- (void)_didAttachFieldEditor;
- (void)_willUpdateAfterDetachingFieldEditor;
- (void)_didUpdateAfterDetachingFieldEditor;
- (void)_didDetachFieldEditor;
- (void)_invalidateAfterUpdatingEditingAttributes;
- (void)_invalidateAllGlyphsAndTextLayout;
- (unsigned long long)_controlEventsForActionTriggered;
- (void)_applicationResuming:(id)resuming;
- (BOOL)_shouldEndEditingOnReturn;
- (BOOL)keyboardInput:(id)input shouldInsertText:(id)text isMarkedText:(BOOL)text;
- (BOOL)keyboardInput:(id)input shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (BOOL)keyboardInputShouldDelete:(id)delete;
- (BOOL)keyboardInputChanged:(id)changed;
- (void)keyboardInputChangedSelection:(id)selection;
- (id)customOverlayContainer;
- (void)fieldEditorDidChange:(id)change;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })fieldEditor:(id)editor willChangeSelectionFromCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range toCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)fieldEditorDidChangeSelection:(id)selection;
- (BOOL)fieldEditor:(id)editor shouldInsertText:(id)text replacingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (BOOL)fieldEditorShouldExtendCaretHeight:(id)height;
- (id)supportedPasteboardTypesForCurrentSelection;
- (id)_dictationInterpretations;
- (id)documentFragmentForPasteboardItemAtIndex:(long long)index;
- (void)setAutoresizesTextToFit:(BOOL)fit;
- (void)setClearButtonStyle:(long long)style;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clearButtonRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })editRect;
- (void)_detectCustomDrawing;
- (BOOL)_canDrawContent;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_setPadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding;
- (void)_setLeadingPadding:(double)padding;
- (void)_setTrailingPadding:(double)padding;
- (void)setPaddingTop:(float)top paddingLeft:(float)left;
- (void)setPaddingLeft:(float)left;
- (void)setPaddingRight:(float)right;
- (float)paddingLeft;
- (float)paddingTop;
- (float)paddingBottom;
- (float)paddingRight;
- (void)_setEnabled:(BOOL)enabled animated:(BOOL)animated;
- (void)_enabledDidChangeAnimated:(BOOL)animated;
- (void)setEnabled:(BOOL)enabled;
- (void)_setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setHighlighted:(BOOL)highlighted;
- (void)_highlightedDidChangeAnimated:(BOOL)animated;
- (void)_animateNextHighlightChange;
- (void)selectAll;
- (void)_clearSelectionUI;
- (void)_resetSelectionUI;
- (void)clearText;
- (id)_tvTypingAttributes;
- (void)_forceObscureAllText;
- (BOOL)_blurEnabled;
- (void)_setBlurEnabled:(BOOL)enabled;
- (BOOL)_visualEffectViewEnabled;
- (void)_setVisualEffectViewEnabled:(BOOL)enabled backgroundColor:(id)color;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (void)setSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setIcon:(id)icon;
- (struct CGSize { double x0; double x1; })clearButtonOffset;
- (void)setBecomesFirstResponderOnClearButtonTap:(BOOL)tap;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })iconRect;
- (void)setProgress:(float)progress;
- (BOOL)hasMarkedText;
- (void)setLabelOffset:(float)offset;
- (id)textLabel;
- (void)setLabel:(id)label;
- (void)setTextCentersHorizontally:(BOOL)horizontally;
- (void)setTextCentersVertically:(BOOL)vertically;
- (BOOL)isUndoEnabled;
- (void)_clearButtonClicked:(id)clicked;
- (void)setClearButtonOffset:(struct CGSize { double x0; double x1; })offset;
- (id)undoManager;
- (struct CGPoint { double x0; double x1; })_originForTextFieldLabel:(id)label;
- (void)removeFromSuperview;
- (void)didMoveToWindow;
- (void)_didMoveFromWindow:(id)window toWindow:(id)window;
- (BOOL)_textShouldUseVibrancy;
- (id)_currentTextColor;
- (BOOL)_hasFloatingFieldEditor;
- (BOOL)_inVibrantContentView;
- (double)_fieldEditorHeight;
- (BOOL)_textShouldFillFieldEditorHeight;
- (BOOL)_shouldOverrideEditingFont;
- (id)_textStorageTextColor;
- (BOOL)_uiktest_shouldDisableTextColorUpdateOnTraitCollectionChange;
- (BOOL)_uiktest_tvUseVibrancy;
- (id)_uiktest_placeholderLabelColor;
- (id)_uiktest_tvCustomTextColor;
- (BOOL)isEditable;
- (BOOL)_useGesturesForEditableContent;
- (void)beginSelectionChange;
- (void)endSelectionChange;
- (BOOL)hasSelection;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })autoscroll;
- (void)cancelAutoscroll;
- (BOOL)_restoreFirstResponder;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })point animated:(BOOL)animated;
- (void)endFloatingCursor;
- (BOOL)_tvHasFloatingFieldEditor;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (id)selectedText;
- (id)selectedAttributedText;
- (id)_activityItemsConfigurationAtLocation:(struct CGPoint { double x0; double x1; })location;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x0; double x1; })point;
- (unsigned long long)offsetInMarkedTextForSelection:(id)selection;
- (struct CGPoint { double x0; double x1; })constrainedPoint:(struct CGPoint { double x0; double x1; })point;
- (id)webView;
- (void)layoutTilesNow;
- (id)_proxyTextInput;
- (void)cut:(id)cut;
- (void)copy:(id)copy;
- (void)_define:(id)_define;
- (void)_translate:(id)_translate;
- (void)_share:(id)_share;
- (BOOL)_isDisplayingTextService;
- (BOOL)_isDisplayingShortcutViewController;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (BOOL)_isDisplayingShareViewController;
- (BOOL)_isDisplayingLookupViewController;
- (void)_selectionMayChange:(id)change;
- (id)_systemBackgroundView;
- (void)_setBackgroundStrokeColor:(id)color;
- (id)_backgroundStrokeColor;
- (void)_setBackgroundFillColor:(id)color;
- (id)_backgroundFillColor;
- (void)_setBackgroundStrokeWidth:(double)width;
- (double)_backgroundStrokeWidth;
- (void)setAttributes:(id)attributes range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_insertAttributedTextWithoutClosingTyping:(id)typing;
- (void)_addShortcut:(id)shortcut;
- (void)paste:(id)paste;
- (void)pasteAndMatchStyle:(id)style;
- (void)select:(id)select;
- (void)selectAll:(id)all;
- (void)makeTextWritingDirectionRightToLeft:(id)left;
- (void)makeTextWritingDirectionNatural:(id)natural;
- (void)makeTextWritingDirectionLeftToRight:(id)right;
- (void)toggleBoldface:(id)boldface;
- (void)toggleItalics:(id)italics;
- (void)toggleUnderline:(id)underline;
- (void)increaseSize:(id)size;
- (void)decreaseSize:(id)size;
- (void)replace:(id)replace;
- (void)_promptForReplace:(id)replace;
- (void)_transliterateChinese:(id)chinese;
- (void)captureTextFromCamera:(id)camera;
- (void)validateCommand:(id)command;
- (BOOL)_inPopover;
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender;
- (id)_inputController;
- (id)textInRange:(id)range;
- (void)insertAttributedText:(id)text;
- (id)attributedTextInRange:(id)range;
- (void)replaceRange:(id)range withText:(id)text;
- (void)replaceRange:(id)range withAttributedText:(id)text;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)typing replacementText:(id)text;
- (id)_rangeForTextKitRanges:(id)ranges;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)unmarkText;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset;
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (id)positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (id)characterRangeByExtendingPosition:(id)position inDirection:(long long)direction;
- (id)_visualSelectionRangeForExtent:(id)extent forPoint:(struct CGPoint { double x0; double x1; })point fromPosition:(id)position inDirection:(long long)direction;
- (long long)baseWritingDirectionForPosition:(id)position inDirection:(long long)direction;
- (void)setBaseWritingDirection:(long long)direction forRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (id)textStylingAtPosition:(id)position inDirection:(long long)direction;
- (id)selectionRectsForRange:(id)range;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point withinRange:(id)range;
- (void)_ensureSelectionContainerViewSubviewOrdering;
- (id)selectionContainerView;
- (id)_selectionContainerViewAboveText;
- (id)_rangeAdjustmentGestureView;
- (void)_setCursorAccessories:(id)accessories;
- (id)_textInputViewForAddingGestureRecognizers;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)metadataDictionariesForDictationResults;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })size;
- (void)removeTextPlaceholder:(id)placeholder;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)placeholder;
- (void)removeDictationResultPlaceholder:(id)placeholder willInsertResult:(BOOL)result;
- (void)_setForceDisplayOverridePlaceholder:(BOOL)placeholder;
- (BOOL)_forceDisplayOverridePlaceholder;
- (void)_setOverridePlaceholder:(id)placeholder alignment:(long long)alignment;
- (id)rangeWithTextAlternatives:(id *)alternatives atPosition:(id)position;
- (BOOL)_shouldResignOnEditingDidEndOnExit;
- (BOOL)_shouldIgnoreBaseWritingDirectionChanges;
- (void)_setShouldDisplayDictationPlaceholderMessage:(BOOL)message;
- (void)_updateHelpMessageOverrideWithMessage:(id)message;
- (BOOL)_delegateShouldBeginEditing;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeForSetText;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeForClearButton;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_textRangeForTextStorageRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (BOOL)_delegateShouldEndEditing;
- (BOOL)_delegateShouldScrollToVisibleWhenBecomingFirstResponder;
- (BOOL)_delegateShouldClear;
- (BOOL)_delegateShouldChangeCharactersInTextStorageRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementString:(id)string delegateCares:(BOOL *)cares;
- (void)insertText:(id)text;
- (void)insertText:(id)text alternatives:(id)alternatives style:(long long)style;
- (void)insertText:(id)text style:(long long)style alternatives:(id)alternatives;
- (void)addTextAlternatives:(id)alternatives;
- (void)removeEmojiAlternatives;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })insertFilteredText:(id)text;
- (void)deleteBackward;
- (void)_deleteBackwardAndNotify:(BOOL)notify;
- (unsigned long long)_textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (void)setContinuousSpellCheckingEnabled:(BOOL)enabled;
- (id)_textCanvasView;
- (double)_preferredBackgroundCornerRadius;
- (void)_setRoundedRectBackgroundCornerRadius:(double)radius;
- (void)_didSetFont:(id)font;
- (BOOL)_shouldDetermineInterfaceStyleTextColor;
- (void)_tvUpdateTextColor;
- (void)_updateLabelAppearance;
- (id)_contentBackdropView;
- (void)_tvUpdateContentBackdropView;
- (long long)_blurEffectStyle;
- (void)_updateSelectionGestures;
- (void)addGhostedRange:(id)range;
- (void)removeAllGhostedRanges;
- (void)addInvisibleRange:(id)range;
- (void)removeInvisibleRange:(id)range;
- (BOOL)isTextDragActive;
- (BOOL)isTextDropActive;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_visibleRangeWithLayout:(BOOL)layout;
- (void)_initTextStorage;
- (void)_initTextLayoutController;
- (void)_initTextCanvasView;
- (void)_addTextCanvasViewAdjustingFrame:(BOOL)frame;
- (id)_contentFloatingContainerView;
- (void)_createInteractionAssistant;
- (void)willMoveToWindow:(id)window;
- (long long)_keyboardAppearance;
- (long long)_userInterfaceStyle;
- (BOOL)_isFocused;
- (BOOL)drawTextInRectIfNeeded:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })needed;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_unobscuredSecureRange;
- (id)editMenuForTextRange:(id)range suggestedActions:(id)actions;
- (BOOL)_implementsEditMenu;
- (void)_logWarningForMenuControllerUsage;
- (BOOL)_isPasscodeStyle;
- (void)_setOverridePasscodeStyle:(BOOL)style;
- (void)_setPasscodeStyleAlpha:(double)alpha;
- (id)_contentSnapshot;
- (void)_applyHighlightedAnimated:(BOOL)animated;
@end

#endif /* UITextField_h */
