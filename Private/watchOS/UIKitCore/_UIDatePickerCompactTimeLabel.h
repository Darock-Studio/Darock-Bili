//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UIDatePickerCompactTimeLabel_h
#define _UIDatePickerCompactTimeLabel_h
@import Foundation;

#include "_UIDatePickerCalendarTimeLabel.h"
#include "UIButton.h"
#include "UIGestureRecognizerDelegateInternal-Protocol.h"
#include "UILabel.h"
#include "UIView.h"
#include "_UIControlEventsGestureRecognizerDelegate-Protocol.h"
#include "_UIDatePickerCalendarTime.h"
#include "_UIDatePickerCalendarTimeLabelDelegate-Protocol.h"
#include "_UIDatePickerCompactTimeLabelDelegate-Protocol.h"
#include "_UIDatePickerOverlayPresentation.h"
#include "_UIPassthroughScrollInteraction.h"
#include "_UIPassthroughScrollInteractionDelegate-Protocol.h"

@class NSDateFormatter, NSDictionary, NSString, NSTextContentStorage;
@protocol _UITextLayoutControllerBase<_UITextLayoutController;

@interface _UIDatePickerCompactTimeLabel : _UIDatePickerCalendarTimeLabel<_UIDatePickerCalendarTimeLabelDelegate, _UIPassthroughScrollInteractionDelegate, _UIControlEventsGestureRecognizerDelegate, UIGestureRecognizerDelegateInternal> {
  /* instance variables */
  struct { unsigned int x :1 needsLabelUpdateOnResignFirstResponder; unsigned int x :1 deferringHoverStateUpdate; unsigned int x :1 highlightedForTouch; } _flags;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _hourRect;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _minuteRect;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _timeOfDayRect;
  NSDateFormatter *_formatter;
  _UITextLayoutControllerBase<_UITextLayoutController> *_textLayoutController;
  NSTextContentStorage *_textContentStorage;
  long long _highlightedScope;
  UIView *_touchHighlightedView;
}

@property (readonly, nonatomic) UILabel *label;
@property (readonly, nonatomic) UILabel *hourLabel;
@property (readonly, nonatomic) UILabel *minuteLabel;
@property (readonly, nonatomic) UILabel *timeOfDayLabel;
@property (readonly, nonatomic) UIButton *backgroundView;
@property (readonly, nonatomic) UIView *inputBackgroundView;
@property (readonly, nonatomic) unsigned long long currentState;
@property (readonly, nonatomic) _UIPassthroughScrollInteraction *passthroughInteraction;
@property (nonatomic) BOOL passthroughInteractionEnabled;
@property (nonatomic) BOOL enabled;
@property (weak, nonatomic) NSObject<_UIDatePickerCompactTimeLabelDelegate> *selectionDelegate;
@property (retain, nonatomic) _UIDatePickerOverlayPresentation *overlayPresentation;
@property (readonly, nonatomic) _UIDatePickerCalendarTime *selectedTime;
@property (nonatomic) double minimumScaleFactor;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) BOOL tapInteractionControlledExternally;
@property (retain, nonatomic) NSDictionary *overrideAttributes;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithTimeFormat:(id)format minuteInterval:(long long)interval;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })hourRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })minuteRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })timeOfDayRect;
- (void)setFont:(id)font;
- (id)font;
- (void)_updateEnabledStyling;
- (void)applyTextAttributesForState:(unsigned long long)state inputScope:(long long)scope updater:(id /* block */)updater;
- (void)_gestureRecognizerFailed:(id)failed;
- (void)controlEventsGestureRecognizer:(id)recognizer recognizedControlEvent:(unsigned long long)event withEvent:(id)event;
- (void)setHighlightedForTouch:(BOOL)touch;
- (void)_updateHoverStateLabelsIfNeeded;
- (id)updateHoverLabelForAttributedString:(id)string ranges:(struct { struct _NSRange { unsigned long long x0; unsigned long long x1; } x0; struct _NSRange { unsigned long long x0; unsigned long long x1; } x1; struct _NSRange { unsigned long long x0; unsigned long long x1; } x2; struct _NSRange { unsigned long long x0; unsigned long long x1; } x3; })ranges;
- (void)pushCurrentStateIntoUI;
- (void)pushCurrentStateIntoUIAndNotify;
- (void)stateMachineUpdateFromState:(unsigned long long)state toState:(unsigned long long)state;
- (void)_updateTimeFormatIfNeeded;
- (void)_updateInputFieldLayoutForCurrentState;
- (void)_updateTextContentStorage;
- (void)_updateLayoutRectsForRanges:(struct { struct _NSRange { unsigned long long x0; unsigned long long x1; } x0; struct _NSRange { unsigned long long x0; unsigned long long x1; } x1; struct _NSRange { unsigned long long x0; unsigned long long x1; } x2; struct _NSRange { unsigned long long x0; unsigned long long x1; } x3; })ranges;
- (id)_currentDateForInput;
- (void)_activateCompactLabelForGestureRecognizer:(id)recognizer;
- (void)activateLabel;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (void)reloadWithCalendar:(id)calendar locale:(id)locale followsSystemHourCycle:(BOOL)cycle displaysTimeZone:(BOOL)zone;
- (void)reloadWithDate:(id)date;
- (void)_reloadWithDate:(id)date notify:(BOOL)notify;
- (void)willBeginWritingInScribbleInteraction;
- (void)_updateInputFieldFromSelectedDateComponents;
- (void)_updateSelectedDateComponentsFromInput;
- (BOOL)isPassthroughInteractionEnabled;
- (BOOL)passthroughScrollInteractionDidRecognize:(id)recognize;
- (BOOL)passthroughScrollInteraction:(id)interaction shouldInteractAtLocation:(struct CGPoint { double x0; double x1; })location withEvent:(id)event;
- (BOOL)timeLabel:(id)label didReceiveText:(id)text;
- (void)timeLabel:(id)label didUpdateText:(id)text;
- (long long)keyboardTypeForTimeLabel:(id)label;
- (BOOL)timeLabelShouldSuppressSoftwareKeyboard:(id)keyboard;
- (BOOL)timeLabelCanBecomeFirstResponder:(id)responder;
- (void)timeLabelWillBecomeFirstResponder:(id)responder;
- (void)timeLabelDidBecomeFirstResponder:(id)responder;
- (void)timeLabelDidFailToBecomeFirstResponder:(id)responder;
- (void)timeLabelDidResignFirstResponder:(id)responder;
- (void)timeLabelDidBeginEditing:(id)editing;
- (void)timeLabelDidEndEditing:(id)editing;
- (void)_expandedComponentRectForHours:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)hours minuteRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect timeOfDayRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect;
- (long long)_inputScopeForPointerLocation:(struct CGPoint { double x0; double x1; })location;
- (id)_viewForInputScope:(long long)scope;
- (BOOL)isEnabled;
@end

#endif /* _UIDatePickerCompactTimeLabel_h */
