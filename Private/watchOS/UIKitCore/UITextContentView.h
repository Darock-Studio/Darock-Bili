//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UITextContentView_h
#define UITextContentView_h
@import Foundation;

#include "UIView.h"
#include "UIColor.h"
#include "UITextInput-Protocol.h"
#include "UITextInputDelegate-Protocol.h"
#include "UITextInputPasswordRules.h"
#include "UITextInputTokenizer-Protocol.h"
#include "UITextInputTraits-Protocol.h"
#include "UITextInteractionAssistant.h"
#include "UITextLinkInteraction-Protocol.h"
#include "UITextPosition.h"
#include "UITextRange.h"
#include "UIView.h"
#include "UIWebDocumentView.h"
#include "WebEditingDelegate-Protocol.h"
#include "WebPolicyDelegate-Protocol.h"

@class DOMHTMLElement, NSAttributedString, NSDictionary, NSString, UIFont, WebFrame;
@protocol UITextContentViewDelegate;

@interface UITextContentView : UIView<WebPolicyDelegate, WebEditingDelegate, UITextInput, UITextLinkInteraction, UITextInputTraits> {
  /* instance variables */
  id m_delegate;
  WebFrame *m_frame;
  DOMHTMLElement *m_body;
  int m_marginTop;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } m_selectionInset;
  double m_bottomBufferHeight;
  BOOL m_editable;
  BOOL m_editing;
  BOOL m_becomesEditableWithGestures;
  BOOL m_becomingFirstResponder;
  BOOL m_reentrancyGuard;
  BOOL m_scrollsSelectionOnWebDocumentChanges;
  BOOL m_hasExplicitTextAlignment;
  BOOL m_allowsEditingTextAttributes;
  BOOL m_usesAttributedText;
  UITextInteractionAssistant *m_interactionAssistant;
  UIWebDocumentView *m_webView;
  UIFont *m_font;
  UIColor *m_textColor;
  long long m_textAlignment;
}

@property (nonatomic) BOOL editing;
@property (weak, nonatomic) NSObject<UITextContentViewDelegate> *delegate;
@property (copy, nonatomic) NSString *text;
@property (retain, nonatomic) UIFont *font;
@property (retain, nonatomic) UIColor *textColor;
@property (nonatomic) long long textAlignment;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } selectedRange;
@property (nonatomic) BOOL editable;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionInset;
@property (nonatomic) BOOL scrollsSelectionOnWebDocumentChanges;
@property (nonatomic) BOOL allowsEditingTextAttributes;
@property (copy, nonatomic) NSAttributedString *attributedText;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) NSObject<UITextInputDelegate> *inputDelegate;
@property (readonly, nonatomic) NSObject<UITextInputTokenizer> *tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (@dynamic, nonatomic) long long autocapitalizationType;
@property (@dynamic, nonatomic) long long autocorrectionType;
@property (@dynamic, nonatomic) long long spellCheckingType;
@property (@dynamic, nonatomic) long long smartQuotesType;
@property (@dynamic, nonatomic) long long smartDashesType;
@property (@dynamic, nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long inlinePredictionType;
@property (@dynamic, nonatomic) long long keyboardType;
@property (@dynamic, nonatomic) long long keyboardAppearance;
@property (@dynamic, nonatomic) long long returnKeyType;
@property (@dynamic, nonatomic) BOOL enablesReturnKeyAutomatically;
@property (@dynamic, nonatomic) BOOL secureTextEntry;
@property (copy, @dynamic, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;

/* class methods */
+ (id)excludedElementsForHTML;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame webView:(id)view;
- (id)initWithCoder:(id)coder;
- (void)_populateArchivedSubviews:(id)subviews;
- (void)encodeWithCoder:(id)coder;
- (void)updateContentEditableAttribute:(BOOL)attribute;
- (void)commonInitWithWebDocumentView:(id)view isDecoding:(BOOL)decoding;
- (void)dealloc;
- (void)removeFromSuperview;
- (void)keyboardDidShow:(id)show;
- (id)styleString;
- (void)recalculateStyle;
- (void)didMoveToSuperview;
- (void)setSelectionChangeCallbacksDisabled:(BOOL)disabled;
- (id)_keyboardResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)canBecomeFirstResponder;
- (BOOL)canResignFirstResponder;
- (BOOL)isFirstResponder;
- (void)ensureSelection;
- (struct CGPoint { double x0; double x1; })constrainedPoint:(struct CGPoint { double x0; double x1; })point;
- (id)automaticallySelectedOverlay;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (void)_scrollViewWillBeginDragging;
- (void)_scrollViewDidEndDraggingWithDeceleration:(BOOL)deceleration;
- (void)_scrollViewDidEndDecelerating;
- (void)beginSelectionChange;
- (void)updateSelection;
- (void)endSelectionChange;
- (BOOL)hasSelection;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })autoscroll;
- (void)cancelAutoscroll;
- (id)interactionAssistant;
- (BOOL)_restoreFirstResponder;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForVisiblePosition:(id)position;
- (id)selectionRectsForRange:(id)range;
- (id)selectedText;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x0; double x1; })point;
- (unsigned long long)offsetInMarkedTextForSelection:(id)selection;
- (BOOL)hasMarkedText;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (id)fontForCaretSelection;
- (void)_hideSelectionCommands;
- (id)undoManagerForWebView:(id)view;
- (id)undoManager;
- (void)makeTextWritingDirectionNatural:(id)natural;
- (void)makeTextWritingDirectionRightToLeft:(id)left;
- (void)makeTextWritingDirectionLeftToRight:(id)right;
- (void)cut:(id)cut;
- (void)copy:(id)copy;
- (void)paste:(id)paste;
- (void)pasteAndMatchStyle:(id)style;
- (void)select:(id)select;
- (void)selectAll:(id)all;
- (void)increaseSize:(id)size;
- (void)decreaseSize:(id)size;
- (void)replace:(id)replace;
- (void)_promptForReplace:(id)replace;
- (void)_transliterateChinese:(id)chinese;
- (void)_define:(id)_define;
- (void)_translate:(id)_translate;
- (void)_share:(id)_share;
- (void)_insertAttributedTextWithoutClosingTyping:(id)typing;
- (void)_addShortcut:(id)shortcut;
- (id)textStylingAtPosition:(id)position inDirection:(long long)direction;
- (void)toggleBoldface:(id)boldface;
- (void)toggleItalics:(id)italics;
- (void)toggleUnderline:(id)underline;
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender;
- (void)selectAll;
- (id)supportedPasteboardTypesForCurrentSelection;
- (id)documentFragmentForPasteboardItemAtIndex:(long long)index;
- (void)scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visible animated:(BOOL)animated;
- (void)webViewDidChange:(id)change;
- (void)performBecomeEditableTasks;
- (void)_sizeChanged;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)setSelectionWithPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setSelectionToStart;
- (void)setSelectionToEnd;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSelection:(struct _NSRange { unsigned long long x0; unsigned long long x1; })selection;
- (void)scrollSelectionToVisible:(BOOL)visible;
- (void)performScrollSelectionToVisible:(BOOL)visible;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForScrollToVisible;
- (void)setContentToHTMLString:(id)htmlstring;
- (id)contentAsHTMLString;
- (void)setContentToAttributedString:(id)string;
- (id)contentAsAttributedString;
- (id)textInputTraits;
- (void)forwardInvocation:(id)invocation;
- (id)methodSignatureForSelector:(SEL)selector;
- (void)_removeAttribute:(id)attribute fromString:(id)string andSetPropertyWith:(id /* block */)with usingValueClass:(Class)class;
- (void)_removeTextViewPropertiesFromText:(id)text;
- (BOOL)isEditable;
- (BOOL)isEditing;
- (BOOL)becomesEditableWithGestures;
- (void)setBecomesEditableWithGestures:(BOOL)gestures;
- (int)marginTop;
- (void)setMarginTop:(int)top;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleTextRect;
- (id)webView;
- (void)_didScroll;
- (void)scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })visible;
- (BOOL)shouldStartDataDetectors;
- (void)cancelDataDetectorsWithWebLock;
- (void)startDataDetectorsWithWebLock;
- (void)resetDataDetectorsResultsWithWebLock;
- (unsigned long long)dataDetectorTypes;
- (void)setDataDetectorTypes:(unsigned long long)types;
- (BOOL)mightHaveLinks;
- (unsigned long long)_allowedLinkTypes;
- (void)tapLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)startInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)validateInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)cancelInteractionWithLink;
- (void)startLongInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)isInteractingWithLink;
- (BOOL)willInteractWithLinkAtPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)keyboardInput:(id)input shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (BOOL)keyboardInput:(id)input shouldInsertText:(id)text isMarkedText:(BOOL)text;
- (BOOL)keyboardInputShouldDelete:(id)delete;
- (BOOL)keyboardInputChanged:(id)changed;
- (void)keyboardInputChangedSelection:(id)selection;
- (void)webView:(id)view decidePolicyForNavigationAction:(id)action request:(id)request frame:(id)frame decisionListener:(id)listener;
- (void)setBottomBufferHeight:(double)height;
- (double)bottomBufferHeight;
- (void)displayScrollerIndicators;
- (void)setOffset:(struct CGPoint { double x0; double x1; })offset;
- (struct CGPoint { double x0; double x1; })offset;
- (id)_proxyTextInput;
- (void)deleteBackward;
- (void)insertText:(id)text;
- (void)removeDictationResultPlaceholder:(id)placeholder willInsertResult:(BOOL)result;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)placeholder;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })size;
- (void)removeTextPlaceholder:(id)placeholder;
- (id)metadataDictionariesForDictationResults;
- (id)textInRange:(id)range;
- (void)replaceRange:(id)range withText:(id)text;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)unmarkText;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset;
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (id)positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (id)characterRangeByExtendingPosition:(id)position inDirection:(long long)direction;
- (long long)baseWritingDirectionForPosition:(id)position inDirection:(long long)direction;
- (void)setBaseWritingDirection:(long long)direction forRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point withinRange:(id)range;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (long long)selectionGranularity;
- (void)setSelectionGranularity:(long long)granularity;
@end

#endif /* UITextContentView_h */
