//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UITextChecker_h
#define UITextChecker_h
@import Foundation;

@class NSArray, NSString;

@interface UITextChecker : NSObject {
  /* instance variables */
  long long _usdt;
  NSString *_checkerWarmingLanguage;
}

@property (retain, nonatomic) NSArray *ignoredWords;

/* class methods */
+ (long long)uniqueSpellDocumentTag;
+ (id)availableLanguages;
+ (id)keyboardLanguages;
+ (id)grammarAutocorrectionForWord:(id)word;
+ (void)handleGrammarCorrectionEntries:(id)entries;
+ (BOOL)grammarCheckingEnabled;
+ (void)noteWordTerminator:(id)terminator replacement:(id)replacement;
+ (void)noteTextReplacement:(id)replacement;
+ (void)performFinalGrammarChecking;
+ (id)bestLanguageForString:(id)string fromAlternatives:(id)alternatives currentLanguage:(id)language insertionPointIndex:(unsigned long long)index scriptForBestLanguage:(id *)language;
+ (id)bestLanguageForString:(id)string fromAlternatives:(id)alternatives currentLanguage:(id)language;
+ (struct __CFSet *)createDictHashTable:(BOOL)table;
+ (id)openUserDictionary:(id)dictionary;
+ (id)_dictionaryEntryForName:(id)name;
+ (void)_setDictionaryEntry:(id)entry forName:(id)name;
+ (id)dictionaryInfo:(id)info;
+ (BOOL)_learnWord:(id)word inDictionary:(id)dictionary;
+ (BOOL)_forgetWord:(id)word inDictionary:(id)dictionary;
+ (BOOL)_isWord:(id)word inDictionary:(id)dictionary;
+ (id)_wordsInDictionary:(id)dictionary;
+ (void)_setWords:(id)words inDictionary:(id)dictionary;
+ (void)learnWord:(id)word;
+ (BOOL)hasLearnedWord:(id)word;
+ (void)unlearnWord:(id)word;
+ (void)setString:(id)string isExemptFromChecker:(BOOL)checker;

/* instance methods */
- (id)_nameOfDictionaryForDocumentTag:(long long)tag;
- (void)_setLanguageDictionaryName:(id)name;
- (void)_setDocumentDictionaryName:(id)name;
- (void)initUserDictionaries;
- (void)initGlobalsWithAsynchronousLoading:(BOOL)loading;
- (id)init;
- (id)_initWithAsynchronousLoading:(BOOL)loading;
- (BOOL)_doneLoading;
- (void)dealloc;
- (id)_checker;
- (void)resetAllLanguageModels;
- (void)releaseAllLexicons;
- (long long)adjustOffsetToNextWordBoundaryInString:(id)string startingAt:(long long)at;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_chunkAndCheckGrammarInString:(id)string language:(id)language usingChecker:(id)checker details:(id *)details;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_chunkAndFindMisspelledWordInString:(id)string languages:(id)languages learnedDictionaries:(id)dictionaries wordCount:(long long *)count correction:(id *)correction usingChecker:(id)checker;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfMisspelledWordInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range startingAt:(long long)at wrap:(BOOL)wrap languages:(id)languages;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfMisspelledWordInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range startingAt:(long long)at wrap:(BOOL)wrap language:(id)language;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })checkSpellingOfString:(id)string startingAt:(long long)at language:(id)language wrap:(BOOL)wrap correction:(id *)correction;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })checkSpellingOfString:(id)string startingAt:(long long)at languages:(id)languages wrap:(BOOL)wrap correction:(id *)correction;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })checkGrammarOfString:(id)string startingAt:(long long)at language:(id)language wrap:(BOOL)wrap details:(id *)details;
- (long long)requestGrammarCheckingOfString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range language:(id)language options:(id)options completionHandler:(id /* block */)handler;
- (id)finalResultsFromCheckingString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range language:(id)language options:(id)options;
- (id)grammarAlternativesForString:(id)string;
- (id)grammarGuessesForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language;
- (void)recordResponse:(unsigned long long)response toGrammarDetailInAnnotatedString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)checkString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range types:(unsigned long long)types languages:(id)languages options:(id)options;
- (id)correctionForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language;
- (id)guessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language;
- (id)completionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language;
- (id)suggestWordInLanguage:(id)language;
- (BOOL)canChangeCaseOfFirstLetterInString:(id)string toUpperCase:(BOOL)case language:(id)language;
- (id)stringForInputString:(id)string language:(id)language;
- (id)alternativesForPinyinInputString:(id)string;
- (void)ignoreWord:(id)word;
- (BOOL)isWordInUserDictionaries:(id)dictionaries caseSensitive:(BOOL)sensitive;
@end

#endif /* UITextChecker_h */
