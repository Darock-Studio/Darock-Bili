//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UIRectangularBoundingPath_h
#define _UIRectangularBoundingPath_h
@import Foundation;

#include "_UIBoundingPath.h"

@interface _UIRectangularBoundingPath : _UIBoundingPath

@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } boundingRect;

/* class methods */
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (id)initWithCoordinateSpace:(id)space boundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)boundingPathForCoordinateSpace:(id)space;
- (id)boundingPathForCoordinateSpace:(id)space withCornerRadii:(struct UIRectCornerRadii { double x0; double x1; double x2; double x3; })radii orientation:(long long)orientation scale:(double)scale;
- (BOOL)_validateBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forCoordinateSpace:(id)space;
- (BOOL)validateForCoordinateSpace;
- (void)setCoordinateSpace:(id)space;
- (BOOL)isNonRectangular;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_inscribedRectInBoundingPathAndRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect byInsettingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect onEdges:(unsigned long long)edges withOptions:(unsigned long long)options;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_largestInscribedRectInBoundingPathAndRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect withCenter:(struct CGPoint { double x0; double x1; })center aspectRatio:(double)ratio;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectTuckedInCorner:(unsigned long long)corner ofBoundingPathAndRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect withSize:(struct CGSize { double x0; double x1; })size cornerRadii:(struct UIRectCornerRadii { double x0; double x1; double x2; double x3; })radii minimumPadding:(double)padding;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectTuckedAgainstEdge:(unsigned long long)edge ofBoundingPathAndRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect withSize:(double)size cornerRadii:(struct UIRectCornerRadii { double x0; double x1; double x2; double x3; })radii minimumPadding:(double)padding;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_centerEdgeInsetsOfBoundingPathAndRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)description;
- (id)_imageRepresentation;
@end

#endif /* _UIRectangularBoundingPath_h */
