//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIWebBrowserView_h
#define UIWebBrowserView_h
@import Foundation;

#include "UIWebDocumentView.h"
#include "UIFormPeripheral-Protocol.h"
#include "UIResponder.h"
#include "UIWebFormAccessory.h"
#include "UIWebFormAccessoryDelegate-Protocol.h"
#include "UIWebFormDelegate.h"
#include "UIWebTouchEventsGestureRecognizer.h"
#include "UIWebTouchEventsGestureRecognizerDelegate-Protocol.h"
#include "_UIWebRotationDelegate-Protocol.h"

@class DOMNode, NSHashTable, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString;
@protocol UIWebAutoFillDelegate;

@interface UIWebBrowserView : UIWebDocumentView<UIWebTouchEventsGestureRecognizerDelegate, UIWebFormAccessoryDelegate, _UIWebRotationDelegate> {
  /* instance variables */
  UIWebFormAccessory *_accessory;
  NSObject<UIFormPeripheral> *_input;
  DOMNode *_currentAssistedNode;
  DOMNode *_assistedNodeStartingFocusRedirects;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _inputViewBounds;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _addressViewBounds;
  double _lastAdjustmentForScroller;
  unsigned int x :1 _forceInputView;
  unsigned int x :1 _formIsAutoFilling;
  UIWebTouchEventsGestureRecognizer *_webTouchEventsGestureRecognizer;
  UIWebFormDelegate *_formDelegate;
  UIResponder *_editingDelegateForEverythingExceptForms;
  unsigned long long _dispatchedTouchEvents;
  NSMutableArray *_deferredTouchEvents;
  NSHashTable *_activeHighlighters;
  NSMutableSet *_overflowScrollViewsPendingInsertion;
  NSMutableSet *_overflowScrollViewsPendingDeletion;
  NSMutableSet *_overflowScrollViews;
  NSLock *_pendingOverflowDataLock;
  NSMutableArray *_pendingOverflowScrolls;
  BOOL _pendingGeometryChangeAfterOverflowScroll;
  NSMutableDictionary *_focusPreservingTokens;
  struct { NSMutableArray *all; NSMutableArray *html; NSMutableArray *javascript; NSMutableArray *css; NSMutableArray *error; NSMutableArray *warning; NSMutableArray *tip; NSMutableArray *log; } _messages;
  struct { UIWebPDFView *view; NSTimer *timer; } _pdf;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) UIWebFormAccessory *_accessory;
@property (retain, nonatomic) NSObject<UIFormPeripheral> *_input;
@property (retain, nonatomic) DOMNode *_currentAssistedNode;
@property (nonatomic) BOOL accessoryEnabled;
@property (nonatomic) BOOL inputViewObeysDOMFocus;
@property (nonatomic) BOOL allowDOMFocusRedirects;
@property (readonly, nonatomic) BOOL hasEditedTextField;
@property (nonatomic) UIResponder *_editingDelegateForEverythingExceptForms;
@property (nonatomic) BOOL allowsInlineMediaPlayback;
@property (nonatomic) BOOL mediaPlaybackRequiresUserAction;
@property (readonly, nonatomic) BOOL isDispatchingTouchEvents;
@property (nonatomic) BOOL alwaysDispatchesScrollEvents;
@property (nonatomic) NSObject<UIWebAutoFillDelegate> *autoFillDelegate;
@property (nonatomic) unsigned int audioSessionCategoryOverride;
@property (nonatomic) NSString *networkInterfaceName;
@property (nonatomic) BOOL allowsPictureInPictureVideo;
@property (nonatomic) BOOL allowsLinkPreview;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)initialize;
+ (id)getUIWebBrowserViewForWebFrame:(id)frame;

/* instance methods */
- (BOOL)shouldIgnoreWebTouch;
- (BOOL)isAnyTouchOverActiveArea:(id)area;
- (id)initWithWebView:(id)view frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (void)installGestureRecognizers;
- (BOOL)isEditable;
- (BOOL)_keepKeyboardVisibleDuringFocusRedirects;
- (BOOL)_requiresKeyboardWhenFirstResponder;
- (BOOL)_requiresKeyboardResetOnReload;
- (id)_keyboardResponder;
- (id)textDocument;
- (BOOL)resignFirstResponder;
- (BOOL)_resignFirstResponderAndBlurFocusedElement;
- (id)keyCommands;
- (void)_nextAccessoryTab:(id)tab;
- (void)_prevAccessoryTab:(id)tab;
- (id)inputAccessoryView;
- (id)inputView;
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender;
- (void)copy:(id)copy;
- (id)_editingDelegate;
- (BOOL)playsNicelyWithGestures;
- (void)_promptForReplace:(id)replace;
- (void)_transliterateChinese:(id)chinese;
- (void)_startAssistingKeyboard;
- (void)_stopAssistingKeyboard;
- (void)_startAssistingNode:(id)node;
- (void)_stopAssistingNode:(id)node;
- (void)_startRelinquishingFirstResponderToFocusedElement;
- (void)_stopRelinquishingFirstResponderToFocusedElement;
- (void)_setInputViewBoundsForAutomaticKeyboardInfo:(id)info adjustScrollView:(BOOL)view;
- (void)_keyboardWillChangeFrame:(id)frame;
- (void)_keyboardDidChangeFrame:(id)frame;
- (void)_keyboardWillShow:(id)show;
- (void)_keyboardWillHide:(id)hide;
- (void)_keyboardDidHide:(id)hide;
- (void)_updateFixedPositioningObjectsLayoutDuringScroll;
- (void)_updateFixedPositioningObjectsLayoutAfterScroll;
- (void)_updateFixedPositioningObjectsLayoutAfterVisibleGeometryChange;
- (void)_updateFixedPositionContent;
- (void)_updateFixedPositioningObjectsLayoutSoon;
- (void)_updateScrollerViewForInputView:(id)view;
- (void)_didScroll;
- (void)simulateDidScroll;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_stopAssistingFormNode;
- (void)_displayFormNodeInputView;
- (void)_updateAutoFillButton;
- (void)_updateAccessory;
- (void)_focusAndAssistFormNode:(id)node;
- (void)_beginAllowingFocusRedirects;
- (void)_endAllowingFocusRedirects;
- (void)_assistFormNode:(id)node;
- (void)assistFormNode:(id)node;
- (void)_reloadInputViewsAfterPotentialFocusRedirect;
- (void)_preserveFocusWithToken:(id)token destructively:(BOOL)destructively;
- (BOOL)_restoreFocusWithToken:(id)token;
- (void)_clearToken:(id)token;
- (void)accessoryDone;
- (void)accessoryTab:(BOOL)tab;
- (void)accessoryAutoFill;
- (void)accessoryClear;
- (void)_scrollCaretToVisible:(id)visible;
- (void)formDelegateTextDidChange;
- (id)formElement;
- (id)textFormElement;
- (void)_resetFormDataForFrame:(id)frame;
- (void)_autoFillFrame:(id)frame;
- (void)webView:(id)view willCloseFrame:(id)frame;
- (void)_clearFormAutoFillStateForFrame:(id)frame;
- (void)webView:(id)view didStartProvisionalLoadForFrame:(id)frame;
- (void)webView:(id)view didFinishLoadForFrame:(id)frame;
- (void)webView:(id)view didFailLoadWithError:(id)error forFrame:(id)frame;
- (void)webView:(id)view didFirstLayoutInFrame:(id)frame;
- (void)acceptedAutoFillWord:(id)word;
- (BOOL)isAutoFillMode;
- (BOOL)_isAutoFilling;
- (void)_webViewFormEditedStatusHasChanged:(id)changed;
- (void)webView:(id)view elementDidFocusNode:(id)node;
- (void)webView:(id)view elementDidBlurNode:(id)node;
- (BOOL)_shouldDeferEvents;
- (void)_dispatchWebEvent:(id)event;
- (void)_startDeferringEvents;
- (void)_endDeferringEvents;
- (void)_deferWebEvent:(id)event;
- (void)_handleDeferredEvents;
- (void)_webTouchEventsRecognized:(id)recognized;
- (struct CGPoint { double x0; double x1; })_convertWindowPointToViewport:(struct CGPoint { double x0; double x1; })viewport;
- (void)webViewDidPreventDefaultForEvent:(id)event;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_activeRectForRectToCenter:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })center;
- (void)_centerRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forSizeChange:(BOOL)change withVisibleHeight:(double)height pinningEdge:(unsigned long long)edge toValue:(double)value;
- (void)_centerRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forSizeChange:(BOOL)change withVisibleHeight:(double)height pinningEdge:(unsigned long long)edge;
- (void)_zoomToNode:(id)node forceScroll:(BOOL)scroll;
- (void)_zoomToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect ensuringVisibilityOfRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect withScale:(double)scale forceScroll:(BOOL)scroll;
- (void)_zoomToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect ensuringVisibilityOfRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect withScale:(double)scale forceScroll:(BOOL)scroll formAssistantFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame animationDuration:(double)duration;
- (void)_zoomToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect withScale:(double)scale;
- (struct CGSize { double x0; double x1; })_defaultScrollViewContentSize;
- (void)rotateEnclosingScrollViewToFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)webView:(id)view addMessageToConsole:(id)console withSource:(id)source;
- (id)messagesMatchingMask:(int)mask;
- (void)clearMessagesMatchingMask:(int)mask;
- (void)_clearAllConsoleMessages;
- (BOOL)_dumpWebArchiveAtPath:(id)path;
- (void)_clearSelectionAndUI;
- (void)_setSelectedDOMRangeAndUpdateUI:(id)ui;
- (void)_startURLificationIfNeededCoalesce:(BOOL)coalesce;
- (id)_absoluteUrlRelativeToDocumentURL:(id)url;
- (void)webView:(id)view didFirstVisuallyNonEmptyLayoutInFrame:(id)frame;
- (struct { double x0; double x1; double x2; })scalesForContainerSize:(struct CGSize { double x0; double x1; })size;
- (void)updateBoundariesOfScrollView:(id)view withScales:(struct { double x0; double x1; double x2; })scales;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectOfInterestForRotation;
- (double)minimumVerticalContentOffset;
- (double)heightToKeepVisible;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })activeRectForRectOfInterest:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interest;
- (double)scaleForProposedNewScale:(double)scale andOldScale:(double)scale;
- (struct CGSize { double x0; double x1; })contentSizeForScrollView:(id)view;
- (BOOL)considerHeightOfRectOfInterestForRotation;
- (id)addFindOnPageHighlighter;
- (void)_removeFindOnPageHighlighter:(id)highlighter;
- (void)redrawScaledDocument;
- (void)_didMoveFromWindow:(id)window toWindow:(id)window;
- (void)webView:(id)view didCreateOrUpdateScrollingLayer:(id)layer withContentsLayer:(id)layer scrollSize:(id)size forNode:(id)node allowHorizontalScrollbar:(BOOL)scrollbar allowVerticalScrollbar:(BOOL)scrollbar;
- (void)webView:(id)view willRemoveScrollingLayer:(id)layer withContentsLayer:(id)layer forNode:(id)node;
- (void)_overflowScrollView:(id)view willStartScrollingForNode:(id)node;
- (void)_webThreadOverflowScrollOffsetChanged;
- (BOOL)appendOverflowScrollForNode:(id)node offset:(struct CGPoint { double x0; double x1; })offset whileScrolling:(BOOL)scrolling;
- (void)_overflowScrollView:(id)view scrollOffsetChangedForNode:(id)node whileScrolling:(BOOL)scrolling;
- (void)_overflowScrollView:(id)view didEndScrollingForNode:(id)node;
- (BOOL)_hasSubviewContainingWebContent:(id)content;
- (void)_noteOverflowScrollViewPendingInsertion:(id)insertion;
- (void)_noteOverflowScrollViewPendingDeletion:(id)deletion;
- (void)_addAdditionalSubview:(id)subview;
- (void)_removeAdditionalSubview:(id)subview;
- (void)webViewDidCommitCompositingLayerChanges:(id)changes;
- (id)_collectAdditionalSubviews;
- (void)_setUnobscuredSafeAreaInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (BOOL)_shouldRestorationInputViewsOnlyWhenKeepingFirstResponder;
- (BOOL)isAccessoryEnabled;
@end

#endif /* UIWebBrowserView_h */
