//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UITextInputController_h
#define UITextInputController_h
@import Foundation;

#include "UIColor.h"
#include "UIImage.h"
#include "UIInputContextHistory.h"
#include "UIResponderStandardEditActions-Protocol.h"
#include "UITextChecker.h"
#include "UITextCheckingController.h"
#include "UITextInput-Protocol.h"
#include "UITextInputAdditions-Protocol.h"
#include "UITextInputControllerDelegate-Protocol.h"
#include "UITextInputDelegate-Protocol.h"
#include "UITextInputPasswordRules.h"
#include "UITextInputPrivate-Protocol.h"
#include "UITextInputSuggestionDelegate-Protocol.h"
#include "UITextInputTokenizer-Protocol.h"
#include "UITextInputTraits.h"
#include "UITextInput_Internal-Protocol.h"
#include "UITextInteractionAssistant.h"
#include "UITextPlaceholder.h"
#include "UITextPosition.h"
#include "UITextRange.h"
#include "UIView.h"
#include "_UITextInputControllerTokenizer.h"
#include "_UITextServiceSession.h"
#include "_UITextUndoManager.h"
#include "_UITextUndoOperationTyping.h"

@class NSAttributedString, NSDictionary, NSHashTable, NSIndexSet, NSLayoutManager, NSSet, NSString, RTIInputSystemSourceSession;
@protocol UIResponder<UITextInput, UIView<UITextInput, UIView<UITextInputPrivate, _UITextLayoutControllerBase<_UITextLayoutController;

@interface UITextInputController : NSObject<UITextInput_Internal, UITextInput, UITextInputAdditions, UIResponderStandardEditActions, UITextInputPrivate> {
  /* instance variables */
  BOOL _inputDelegateRespondsToInlineCompletionAsMarkedText;
  NSLayoutManager *_layoutManager;
  NSHashTable *_observedScrollViews;
  _UITextServiceSession *_learnSession;
  _UITextServiceSession *_shareSession;
  _UITextServiceSession *_lookupSession;
  _UITextServiceSession *_translateSession;
  UITextInputTraits *_textInputTraits;
  struct _NSRange { unsigned long long location; unsigned long long length; } _markedTextSelection;
  NSAttributedString *_markedText;
  struct { unsigned int x :1 delegateRespondsToTextInputShouldBeginEditing; unsigned int x :1 delegateRespondsToTextInputShouldChangeCharactersInRangeReplacementText; unsigned int x :1 delegateRespondsToTextInputDidChange; unsigned int x :1 delegateRespondsToTextInputDidChangeSelection; unsigned int x :1 delegateRespondsToTextInputWillChangeSelectionFromCharacterRangeToCharacterRange; unsigned int x :1 delegateRespondsToTextInputEditorDidChangeSelection; unsigned int x :1 delegateRespondsToTextInputPrepareAttributedTextForInsertion; unsigned int x :1 delegateRespondsToTextInputShouldExtendCaretHeight; unsigned int x :1 delegateRespondsToIsSingleLine; unsigned int x :1 textOrSelectionChangeOriginatesWithKeyboard; unsigned int x :1 undoRedoInProgress; unsigned int x :1 textOrSelectionChangeOriginatesWithMarkedText; unsigned int x :1 nextSelectionChangeMustUpdate; unsigned int x :1 hasTextAlternatives; unsigned int x :1 hasDictationResultMetadata; unsigned int x :1 suppressDelegateChangeNotifications; } _tiFlags;
  UIView<UITextInput> *_firstTextView;
  _UITextUndoManager *_undoManager;
  _UITextUndoOperationTyping *_undoOperationForCoalescing;
  UITextChecker *_textChecker;
  UITextCheckingController *_textCheckingController;
  NSSet *_allowedTypingAttributes;
  unsigned long long _dontRemoveAllActionsCount;
  UITextPlaceholder *_textPlaceholder;
}

@property (readonly, nonatomic) UIResponder<UITextInput> *__content;
@property (readonly, nonatomic) UIView<UITextInputPrivate> *_textSelectingContainer;
@property (retain, nonatomic) UITextRange *previousSelectedTextRange;
@property (copy, nonatomic) NSDictionary *emptyStringAttributes;
@property (nonatomic) int currentUndoGroupType;
@property (nonatomic) BOOL shouldStartUndoGroup;
@property (weak, nonatomic) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } selectedRange;
@property (nonatomic) BOOL allowsEditingTextAttributes;
@property (copy, nonatomic) NSDictionary *typingAttributes;
@property (weak, nonatomic) NSObject<UITextInputControllerDelegate> *delegate;
@property (nonatomic) BOOL continuousSpellCheckingEnabled;
@property (copy, nonatomic) NSSet *_allowedTypingAttributes;
@property (readonly, nonatomic) NSAttributedString *filteredAttributedText;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) NSObject<UITextInputDelegate> *inputDelegate;
@property (readonly, nonatomic) NSObject<UITextInputTokenizer> *tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long inlinePredictionType;
@property (nonatomic) long long keyboardType;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL editable;
@property (readonly, nonatomic) BOOL editing;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } caretRect;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) NSObject<UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (nonatomic) BOOL _systemCursorAccessoriesDisabled;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet * textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL isSingleLineDocument;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;

/* class methods */
+ (BOOL)_shouldUseStandardTextScaling:(id)scaling;

/* instance methods */
- (id)_proxyTextInput;
- (id)_keyInput;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_selectedNSRange;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_selectedRangeWithinMarkedText;
- (void)_selectAll;
- (int)_indexForTextPosition:(id)position;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_nsrangeForTextRange:(id)range;
- (id)_textRangeFromNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange;
- (unsigned int)_characterAfterCaretSelection;
- (unsigned int)_characterBeforeCaretSelection;
- (unsigned int)_characterInRelationToCaretSelection:(int)selection;
- (unsigned int)_characterInRelationToRangedSelection:(int)selection;
- (unsigned int)_characterInRelationToPosition:(id)position amount:(int)amount;
- (id)_wordContainingCaretSelection;
- (id)_fullText;
- (void)_setSelectionToPosition:(id)position;
- (BOOL)_selectionAtWordStart;
- (BOOL)_selectionAtDocumentStart;
- (BOOL)_selectionAtDocumentEnd;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (BOOL)_isEmptySelection;
- (BOOL)_hasMarkedTextOrRangedSelection;
- (void)_extendCurrentSelection:(int)selection;
- (void)_moveCurrentSelection:(int)selection;
- (void)_expandSelectionToBackwardDeletionClusterWithReinsertionOut:(id *)out;
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)selection;
- (id)_positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (long long)_opposingDirectionFromDirection:(long long)direction;
- (id)_positionFromPosition:(id)position pastTextUnit:(long long)unit inDirection:(long long)direction;
- (id)_positionAtStartOfWords:(unsigned long long)words beforePosition:(id)position;
- (void)_setCaretSelectionAtEndOfSelection;
- (void)_deleteByWord;
- (void)_deleteForwardByWord;
- (void)_deleteToStartOfLine;
- (void)_deleteToEndOfLine;
- (void)_deleteToEndOfParagraph;
- (void)_deleteTextRange:(id)range;
- (void)_deleteBackwardAndNotify:(BOOL)notify;
- (void)_deleteForwardAndNotify:(BOOL)notify;
- (void)_transpose;
- (void)_replaceCurrentWordWithText:(id)text;
- (void)_replaceDocumentWithText:(id)text;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visible animated:(BOOL)animated;
- (id)_normalizedStringForRangeComparison:(id)comparison;
- (id)_rangeOfText:(id)text endingAtPosition:(id)position;
- (id)_rangeOfTextUnit:(long long)unit enclosingPosition:(id)position;
- (id)_rangeOfEnclosingWord:(id)word;
- (id)_rangeOfLineEnclosingPosition:(id)position;
- (id)_rangeOfSentenceEnclosingPosition:(id)position;
- (id)_rangeOfParagraphEnclosingPosition:(id)position;
- (id)_fullRange;
- (id)_rangeSpanningTextUnit:(long long)unit andPosition:(id)position;
- (BOOL)_range:(id)_range containsRange:(id)range;
- (BOOL)_range:(id)_range intersectsRange:(id)range;
- (id)_intersectionOfRange:(id)range andRange:(id)range;
- (BOOL)_range:(id)_range isEqualToRange:(id)range;
- (id)_findBoundaryPositionClosestToPosition:(id)position withGranularity:(long long)granularity;
- (id)_findPleasingWordBoundaryFromPosition:(id)position;
- (id)_findDocumentBoundaryFromPosition:(id)position;
- (id)_rangeOfSmartSelectionIncludingRange:(id)range;
- (id)_clampedpositionFromPosition:(id)position offset:(int)offset;
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange { unsigned long long x0; unsigned long long x1; })delta;
- (id)_textColorForCaretSelection;
- (id)_fontForCaretSelection;
- (void)_updateSelectionWithTextRange:(id)range withAffinityDownstream:(BOOL)downstream;
- (id)_setSelectionRangeWithHistory:(id)history;
- (id)_setHistory:(id)history withExtending:(BOOL)extending withAnchor:(int)anchor withAffinityDownstream:(BOOL)downstream;
- (id)_moveToStartOfWord:(BOOL)word withHistory:(id)history;
- (id)_moveToEndOfWord:(BOOL)word withHistory:(id)history;
- (id)_moveToStartOfLine:(BOOL)line withHistory:(id)history;
- (id)_moveToEndOfLine:(BOOL)line withHistory:(id)history;
- (id)_moveToStartOfParagraph:(BOOL)paragraph withHistory:(id)history;
- (id)_moveToEndOfParagraph:(BOOL)paragraph withHistory:(id)history;
- (id)_moveToStartOfDocument:(BOOL)document withHistory:(id)history;
- (id)_moveToEndOfDocument:(BOOL)document withHistory:(id)history;
- (id)_moveUp:(BOOL)up withHistory:(id)history;
- (id)_moveDown:(BOOL)down withHistory:(id)history;
- (id)_moveLeft:(BOOL)left withHistory:(id)history;
- (id)_moveRight:(BOOL)right withHistory:(id)history;
- (id)_positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset withAffinityDownstream:(BOOL)downstream;
- (void)_setSelectedTextRange:(id)range withAffinityDownstream:(BOOL)downstream;
- (long long)_selectionAffinity;
- (void)_setGestureRecognizers;
- (BOOL)_usesAsynchronousProtocol;
- (BOOL)_hasMarkedText;
- (void)_setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_unmarkText;
- (BOOL)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)action forText:(id)text checkAutocorrection:(BOOL)autocorrection;
- (id)_selectableText;
- (id)initWithTextLayoutController:(id)controller;
- (void)dealloc;
- (void)_detachFromLayoutManager;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeAfterCancelDictationIfNecessaryForChangeInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_senderForDelegateNotifications;
- (void)_sendDelegateWillChangeNotificationsForText:(BOOL)text selection:(BOOL)selection;
- (void)_sendDelegateChangeNotificationsForText:(BOOL)text selection:(BOOL)selection;
- (BOOL)_delegateShouldChangeTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (id)_textStorage;
- (void)_setInternalGestureRecognizers;
- (void)_textContainerDidChangeView:(id)view;
- (BOOL)_shouldConsiderTextViewForGeometry:(id)geometry;
- (void)_updateFirstTextView;
- (BOOL)supportLetterByLetterUndo;
- (void)_textStorageDidProcessEditing:(id)editing;
- (void)_selectionGeometryChanged;
- (id)_firstTextView;
- (void)_selectionDidScroll:(id)scroll;
- (void)_setSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_selectedRange;
- (void)_ensureSelectionValid;
- (void)_coordinateSelectionChange:(id /* block */)change;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeToReplaceWhenInsertingText;
- (void)_insertText:(id)text fromKeyboard:(BOOL)keyboard;
- (long long)_resolveNaturalDirection:(long long)direction;
- (BOOL)_isInlineCompletionPresentedAsMarkedText:(id)text;
- (id)attributedSubstringForMarkedRange;
- (BOOL)isEditable;
- (BOOL)isEditing;
- (BOOL)_mightHaveSelection;
- (void)removeAlternativesForCurrentWord;
- (void)insertText:(id)text;
- (void)addTextAlternativesDisplayStyle:(long long)style toRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)insertAttributedText:(id)text;
- (void)_insertAttributedText:(id)text fromKeyboard:(BOOL)keyboard;
- (void)_insertAttributedTextWithoutClosingTyping:(id)typing;
- (BOOL)_hasDictationPlaceholder;
- (void)_registerUndoOperationForReplacementWithActionName:(id)name replacementText:(id)text;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeForBackwardsDelete;
- (void)_updateRangeForSmartDelete;
- (unsigned long long)textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (void)removeAllTextAlternatives;
- (void)didEndEditing;
- (void)deleteBackward;
- (void)checkSmartPunctuationForWordInRange:(id)range;
- (id)textChecker;
- (void)preheatTextChecker;
- (void)checkSpellingForWordInRange:(id)range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })nsRangeForTextRange:(id)range;
- (id)textRangeForNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange;
- (void)removeSpellingMarkersFromWordInRange:(id)range;
- (void)removeSpellingMarkersForCurrentWord;
- (void)notifyTextCheckingControllerForSelectionChange;
- (void)checkSpellingForSelectionChangeIfNecessary;
- (BOOL)performFinalGrammarChecking;
- (void)applyGrammarCheckingIndication;
- (void)beginSelectionChange;
- (void)endSelectionChange;
- (void)changingContextWithTrigger:(id)trigger;
- (void)updateSelection;
- (id)selectionRectsForRange:(id)range;
- (id)_rectsForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_characterPositionForPoint:(struct CGPoint { double x0; double x1; })point;
- (unsigned long long)_validCaretPositionFromCharacterIndex:(unsigned long long)index downstream:(BOOL)downstream;
- (id)_parentScrollView;
- (void)scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })visible;
- (void)_ensureSelectionVisible;
- (id)textInRange:(id)range;
- (id)attributedTextInRange:(id)range;
- (void)replaceRange:(id)range withText:(id)text;
- (void)replaceRange:(id)range withAttributedText:(id)text;
- (void)_replaceRange:(id)range withAttributedTextFromKeyboard:(id)keyboard addingUnderlinesForAlternatives:(BOOL)alternatives;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)typing replacementText:(id)text;
- (void)correctedTypedText:(id)text rangeOfReplacement:(id)replacement;
- (void)_performWhileSuppressingDelegateNotifications:(id /* block */)notifications;
- (void)_setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range fromKeyboard:(BOOL)keyboard useTextStyle:(BOOL)style;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_clearMarkedText;
- (void)_forceUnmarkTextDueToEditing;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })markedRange;
- (void)unmarkText;
- (void)unmarkText:(BOOL)text;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset;
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (id)positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (id)characterRangeByExtendingPosition:(id)position inDirection:(long long)direction;
- (void)_setAllowedTypingAttributes:(id)attributes;
- (id)_fixupTypingAttributeForAttributes:(id)attributes;
- (id)_newAttributedStringForInsertionOfText:(id)text inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_newAttributedStringForInsertionOfAttributedText:(id)text inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_attributesForInsertionOfText:(struct _NSRange { unsigned long long x0; unsigned long long x1; })text;
- (id)_attributesForReplacementInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_addToTypingAttributes:(id)attributes value:(id)value;
- (void)_invalidateTypingAttributes;
- (void)_invalidateEmptyStringAttributes;
- (void)_updateEmptyStringAttributes;
- (long long)baseWritingDirectionForPosition:(id)position inDirection:(long long)direction;
- (void)setBaseWritingDirection:(long long)direction forRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_caretRectForOffset:(unsigned long long)offset;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_caretRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point withinRange:(id)range;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)textStylingAtPosition:(id)position inDirection:(long long)direction;
- (id)undoManager;
- (void)_undoManagerWillUndo:(id)undo;
- (void)coalesceInTextView:(id)view actionName:(id)name affectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (void)appendUndoOperation:(id)operation newGroup:(BOOL)group;
- (BOOL)shouldStartNewUndoGroup:(id)group textGranularity:(long long)granularity operationType:(int)type;
- (void)scheduleUndoOperationForType:(int)type actionName:(id)name previousSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (void)registerUndoOperationForType:(int)type actionName:(id)name affectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range replacementText:(id)text;
- (void)undoWillChangeText;
- (void)undoDidChangeText;
- (void)_setUndoRedoInProgress:(BOOL)progress;
- (BOOL)_undoRedoInProgress;
- (BOOL)isCoalescing;
- (void)stopCoalescing;
- (BOOL)dontRemoveAllActions;
- (void)changeWillBeUndone:(id)undone;
- (void)clearText;
- (BOOL)_isSystemAttachment:(id)attachment;
- (void)_setSelectedRangeToEndIfNecessary;
- (void)_insertDictationResult:(id)result withCorrectionIdentifier:(id)identifier replacingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range resultLength:(unsigned long long *)length;
- (void)insertDictationResult:(id)result withCorrectionIdentifier:(id)identifier;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })size embeddingType:(long long)type;
- (void)_layoutManagerDidCompleteLayout;
- (void)_updateRectsForPlaceholder;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForTextPlaceholder:(id)placeholder;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)placeholder;
- (void)removeTextPlaceholder:(id)placeholder notifyInputDelegate:(BOOL)delegate;
- (void)removeTextPlaceholder:(id)placeholder;
- (void)removeDictationResultPlaceholder:(id)placeholder willInsertResult:(BOOL)result;
- (id)rangeWithTextAlternatives:(id *)alternatives atPosition:(id)position;
- (void)addTextAlternatives:(id)alternatives;
- (void)removeEmojiAlternatives;
- (id)_prefixTokensForDictationAttributedText:(id)text lastDictationAttributedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range currentDictationAttributedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_postfixTokensForDictationAttributedText:(id)text currentDictationAttributedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range nextDictationAttributedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)_userEditedTextInfo;
- (id)metadataDictionariesForDictationResults;
- (BOOL)_canHandleResponderAction:(SEL)action;
- (BOOL)_shouldHandleResponderAction:(SEL)action;
- (id)_selectedText;
- (id)_selectedAttributedText;
- (void)selectAll;
- (void)replace:(id)replace;
- (BOOL)_isSecureTextEntry;
- (long long)writingDirectionAtPosition:(id)position;
- (void)makeTextWritingDirectionNatural:(id)natural;
- (void)makeTextWritingDirectionRightToLeft:(id)left;
- (void)makeTextWritingDirectionLeftToRight:(id)right;
- (void)removeTextStylingFromString:(id)string;
- (void)_copySelectionToClipboard;
- (void)_copySelectionToClipboard:(id)clipboard;
- (void)cut:(id)cut;
- (void)copy:(id)copy;
- (void)paste:(id)paste;
- (void)pasteAndMatchStyle:(id)style;
- (void)_pasteAndMatchStyle:(BOOL)style;
- (BOOL)_pasteFromPasteboard:(id)pasteboard andMatchStyle:(BOOL)style;
- (id)_attributedStringForInsertionOfAttributedString:(id)string;
- (void)_pasteAttributedString:(id)string pasteAsRichText:(BOOL)text;
- (void)_pasteAttributedString:(id)string toRange:(id)range completion:(id /* block */)completion;
- (void)_pasteRawAttributedString:(id)string asRichText:(BOOL)text;
- (void)_adjustSizeByIncreasing:(BOOL)increasing;
- (void)increaseSize:(id)size;
- (void)decreaseSize:(id)size;
- (void)updateTextAttributesWithConversionHandler:(id /* block */)handler;
- (void)select:(id)select;
- (void)selectAll:(id)all;
- (void)_promptForReplace:(id)replace;
- (void)_transliterateChinese:(id)chinese;
- (void)_removeShareController;
- (void)_share:(id)_share;
- (void)_removeShortcutController;
- (void)_define:(id)_define;
- (void)_translate:(id)_translate;
- (BOOL)_isDisplayingTextService;
- (BOOL)_isDisplayingShortcutViewController;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (BOOL)_isDisplayingLookupViewController;
- (BOOL)_isDisplayingShareViewController;
- (void)_clearSelectionUI;
- (void)_addShortcut:(id)shortcut;
- (id)_fallbackFont;
- (void)_toggleFontTrait:(unsigned int)trait;
- (void)toggleBoldface:(id)boldface;
- (void)toggleItalics:(id)italics;
- (void)toggleUnderline:(id)underline;
- (void)_changeTextAlignment:(long long)alignment undoString:(id)string;
- (void)alignLeft:(id)left;
- (void)alignCenter:(id)center;
- (void)alignJustified:(id)justified;
- (void)alignRight:(id)right;
- (void)_validateCommand:(id)command forFont:(id)font traits:(int)traits;
- (void)validateCommand:(id)command;
- (id)_textInputTraits;
- (void)forwardInvocation:(id)invocation;
- (BOOL)respondsToSelector:(SEL)selector;
- (id)methodSignatureForSelector:(SEL)selector;
- (id)validAnnotations;
- (id)annotatedSubstringForRange:(id)range;
- (void)replaceRange:(id)range withAnnotatedString:(id)string relativeReplacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)removeAnnotation:(id)annotation forRange:(id)range;
- (void)captureTextFromCamera:(id)camera;
- (id)_emptyStringAttributes;
- (void)_setEmptyStringAttributes:(id)attributes;
@end

#endif /* UITextInputController_h */
