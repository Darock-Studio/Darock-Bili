//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UIFastIndexSet_h
#define _UIFastIndexSet_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSMutableCopying-Protocol.h"

@protocol {variant<_UIBitSet<256>, _UISmallVector<unsigned short, 16>, std::vector<unsigned long>>="__impl_"{__impl<_UIBitSet<256>, _UISmallVector<unsigned short, 16>, std::vector<unsigned long>>="__data"(__union<std::__variant_detail::_Trait::_Available, 0UL, _UIBitSet<256>, _UISmallVector<unsigned short, 16>, std::vector<unsigned long>>="__dummy"c"__head"{__alt<0UL, _UIBitSet<256>>="__value"{_UIBitSet<256UL>="_chunks"[4Q]}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 1UL, _UISmallVector<unsigned short, 16>, std::vector<unsigned long>>="__dummy"c"__head"{__alt<1UL, _UISmallVector<unsigned short, 16>>="__value"{_UISmallVector<unsigned short, 16UL>="_vector""_size"Q}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 2UL, std::vector<unsigned long>>="__dummy"c"__head"{__alt<2UL, std::vector<unsigned long>>="__value"{vector<unsigned long, std::allocator<unsigned long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::allocator<unsigned long>>="__value_"^Q}}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 3UL>=))))"__index"I}};

@interface _UIFastIndexSet : NSObject<NSCopying, NSMutableCopying> {
  /* instance variables */
  struct variant<_UIBitSet<256>, _UISmallVector<unsigned short, 16>, std::vector<unsigned long>> { struct __impl<_UIBitSet<256>, _UISmallVector<unsigned short, 16>, std::vector<unsigned long>> { union __union<std::__variant_detail::_Trait::_Available, 0UL, _UIBitSet<256>, _UISmallVector<unsigned short, 16>, std::vector<unsigned long>> { char __dummy; struct __alt<0UL, _UIBitSet<256>> { struct _UIBitSet<256UL> { unsigned long long x[4] _chunks; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 1UL, _UISmallVector<unsigned short, 16>, std::vector<unsigned long>> { char __dummy; struct __alt<1UL, _UISmallVector<unsigned short, 16>> { struct _UISmallVector<unsigned short, 16UL> { " _vector; _ x0; short x1; int x2; size_t x3; e x4; " x5; unsigned long long x6; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 2UL, std::vector<unsigned long>> { char __dummy; struct __alt<2UL, std::vector<unsigned long>> { struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *__value_; } __end_cap_; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 3UL> __tail; } __tail; } __tail; } __data; unsigned int __index; } __impl_; } _inOutIndexes;
}

/* class methods */
+ (id)indexSet;

/* instance methods */
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)mutableCopyWithZone:(struct _NSZone *)zone;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
@end

#endif /* _UIFastIndexSet_h */
