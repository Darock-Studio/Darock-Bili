//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UIVelocityIntegrator_h
#define _UIVelocityIntegrator_h
@import Foundation;

@protocol {deque<_UIVelocityIntegratorDataSample, std::allocator<_UIVelocityIntegratorDataSample>>="__map_"{__split_buffer<_UIVelocityIntegratorDataSample *, std::allocator<_UIVelocityIntegratorDataSample *>>="__first_"^^{_UIVelocityIntegratorDataSample}"__begin_"^^{_UIVelocityIntegratorDataSample}"__end_"^^{_UIVelocityIntegratorDataSample}"__end_cap_"{__compressed_pair<_UIVelocityIntegratorDataSample **, std::allocator<_UIVelocityIntegratorDataSample *>>="__value_"^^{_UIVelocityIntegratorDataSample}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<_UIVelocityIntegratorDataSample>>="__value_"Q}};

@interface _UIVelocityIntegrator : NSObject {
  /* instance variables */
  struct deque<_UIVelocityIntegratorDataSample, std::allocator<_UIVelocityIntegratorDataSample>> { struct __split_buffer<_UIVelocityIntegratorDataSample *, std::allocator<_UIVelocityIntegratorDataSample *>> { struct _UIVelocityIntegratorDataSample * *__first_; struct _UIVelocityIntegratorDataSample * *__begin_; struct _UIVelocityIntegratorDataSample * *__end_; struct __compressed_pair<_UIVelocityIntegratorDataSample **, std::allocator<_UIVelocityIntegratorDataSample *>> { struct _UIVelocityIntegratorDataSample * *__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<_UIVelocityIntegratorDataSample>> { unsigned long long __value_; } __size_; } _samples;
  BOOL _hasMemoizedVelocity;
  double _resetHysteresisOnSampleThetaDiff;
  id /* block */ _didResetHysteresisOnThetaDiffHandler;
  long long _maxNumberOfSamples;
  union { struct { double x; double y; double z; } x0; } _totalTranslation;
  union { struct { double x; double y; double z; } x0; } _memoizedVelocity;
}

@property (nonatomic) double minimumRequiredMovement;
@property (readonly, nonatomic) struct CGVector { double x0; double x1; } velocity;
@property (readonly, nonatomic) struct CGVector { double x0; double x1; } offset;
@property (nonatomic) double hysteresisTimeInterval;
@property (readonly, nonatomic) union { struct { double x0; double x1; double x2; } x0; } velocity3D;
@property (readonly, nonatomic) union { struct { double x0; double x1; double x2; } x0; } offset3D;

/* instance methods */
- (id)init;
- (void)addSample:(struct CGPoint { double x0; double x1; })sample;
- (void)addSample3D:(union { struct { double x0; double x1; double x2; } x0; })d;
- (BOOL)hasVelocity;
- (void)reset;
@end

#endif /* _UIVelocityIntegrator_h */
