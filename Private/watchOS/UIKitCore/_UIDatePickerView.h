//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UIDatePickerView_h
#define _UIDatePickerView_h
@import Foundation;

#include "UIPickerView.h"
#include "UIColor.h"
#include "UIDatePicker.h"
#include "UIGestureRecognizerDelegateInternal-Protocol.h"
#include "UILabel.h"
#include "UIPickerViewDataSource-Protocol.h"
#include "UIPickerViewDelegate-Protocol.h"
#include "UIPopoverPresentationControllerDelegate-Protocol.h"
#include "_UIControlEventsGestureRecognizer.h"
#include "_UIControlEventsGestureRecognizerDelegate-Protocol.h"
#include "_UIDatePickerCalendarTimeLabelDelegate-Protocol.h"
#include "_UIDatePickerDataModel.h"
#include "_UIDatePickerMode.h"
#include "_UIDatePickerNumericKeyboardViewController.h"
#include "_UIDatePickerWheelsTimeLabel.h"
#include "_UIDatePickerWheelsTimeLabelDelegate-Protocol.h"
#include "_UIDatePickerWheelsViewComponent-Protocol.h"
#include "_UIPassthroughScrollInteraction.h"
#include "_UIPassthroughScrollInteractionDelegate-Protocol.h"

@class NSCalendar, NSLocale, NSString, UIFont;

@interface _UIDatePickerView : UIPickerView<_UIDatePickerCalendarTimeLabelDelegate, _UIDatePickerWheelsTimeLabelDelegate, UIGestureRecognizerDelegateInternal, UIPopoverPresentationControllerDelegate, _UIPassthroughScrollInteractionDelegate, _UIControlEventsGestureRecognizerDelegate, UIPickerViewDelegate, UIPickerViewDataSource, _UIDatePickerWheelsViewComponent> {
  /* instance variables */
  long long _loadingDate;
  _UIDatePickerMode *_mode;
  UILabel *_hourLabel;
  UILabel *_minuteLabel;
  int _expectedAMPM;
  struct { unsigned int x :1 staggerTimeIntervals; unsigned int x :1 loadingDateOrTime; unsigned int x :1 highlightsToday; unsigned int x :1 usesBlackChrome; unsigned int x :1 updatingWithKeyInput; unsigned int x :1 isPendingManualKeyboardPresentation; unsigned int x :1 isPresentingManualKeyboard; unsigned int x :1 selectionBarTableHidden; unsigned int x :1 receivedTextInputUpdate; unsigned int x :1 isPresentingOrDismissingKeyboard; } _datePickerFlags;
  _UIPassthroughScrollInteraction *_passthroughInteraction;
}

@property (readonly, nonatomic) _UIDatePickerNumericKeyboardViewController *numericKeyboardViewController;
@property (readonly, nonatomic) _UIDatePickerWheelsTimeLabel *timeInputLabel;
@property (readonly, nonatomic) _UIControlEventsGestureRecognizer *controlEventsGestureRecognizer;
@property (nonatomic) BOOL passthroughInteractionEnabled;
@property (@dynamic, nonatomic) BOOL highlightsToday;
@property (readonly, @dynamic, nonatomic) NSCalendar *calendar;
@property (readonly, @dynamic, nonatomic) NSLocale *locale;
@property (readonly, @dynamic, nonatomic) long long amPmValue;
@property (readonly, @dynamic, nonatomic) UIFont *hrMinFont;
@property (retain, nonatomic) _UIDatePickerDataModel *data;
@property (nonatomic) double timeInterval;
@property (nonatomic) BOOL usesBlackChrome;
@property (nonatomic) BOOL allowsZeroCountDownDuration;
@property (nonatomic) BOOL allowsZeroTimeInterval;
@property (readonly, @dynamic, nonatomic) double contentWidth;
@property (readonly, @dynamic, nonatomic) BOOL isTimeIntervalMode;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) UIColor *highlightColor;
@property (retain, nonatomic) UIColor *textColor;
@property (retain, nonatomic) UIColor *textShadowColor;
@property (retain, nonatomic) UIColor *magnifierLineColor;
@property (weak, nonatomic) UIDatePicker *datePicker;
@property (readonly, nonatomic) long long datePickerStyle;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } appliedInsetsToEdgeOfContent;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (void)willMoveToWindow:(id)window;
- (void)willMoveToSuperview:(id)superview;
- (void)_enableCustomKeyboardIfNecessary;
- (void)_disableCustomKeyboardIfNecessary;
- (void)didChangeToday;
- (void)didReset;
- (double)_tableRowHeight;
- (void)_doneLoadingDateOrTime;
- (BOOL)_showingDate;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (BOOL)_contentHuggingDefault_isUsuallyFixedWidth;
- (void)didChangeLocale;
- (void)didChangeTimeZone;
- (void)didChangeCalendar;
- (void)_updateLocaleTimeZoneOrCalendar;
- (void)didChangeDateFrom:(id)from animated:(BOOL)animated;
- (void)displaySelectedDateAnimated:(BOOL)animated;
- (void)didChangeMinimumDate;
- (void)didChangeMaximumDate;
- (void)_updateDateForNewDateRange;
- (long long)numberOfComponentsInPickerView:(id)view;
- (BOOL)_isTimeIntervalMode;
- (void)_setMode:(id)mode;
- (void)didChangeMode;
- (void)didChangeMinuteInterval;
- (void)didChangeRoundsToMinuteInterval;
- (void)pickerTableView:(id)view didChangeSelectionBarRowFrom:(long long)from to:(long long)to;
- (long long)pickerView:(id)view numberOfRowsInComponent:(long long)component;
- (void)_loadDateAnimated:(BOOL)animated;
- (void)_selectRow:(long long)row inComponent:(long long)component animated:(BOOL)animated notify:(BOOL)notify;
- (int)_selectedHourForColumn:(int)column;
- (int)_selectedMinuteForColumn:(int)column;
- (id)_componentsSelectedAfterEnforcingValidityOfComponents:(id)components withLastManipulatedComponent:(long long)component;
- (BOOL)_updatedLastSelectedComponentsByValidatingSelectedDateWithLastManipulatedComponent:(long long)component;
- (void)_updateLabels:(BOOL)labels;
- (void)_updateLabelColors;
- (void)_removeUnitLabels;
- (void)_setTextColor:(id)color;
- (void)_UIAppearance_setTextColor:(id)color;
- (id)_labelForCalendarUnit:(unsigned long long)unit createIfNecessary:(BOOL)necessary;
- (void)_setLabel:(id)label forCalendarUnit:(unsigned long long)unit animated:(BOOL)animated;
- (void)_positionLabel:(id)label forCalendarUnit:(unsigned long long)unit relativeTo:(id)to order:(long long)order;
- (id)_contentViewForSizingLabelForPositioningInComponent:(long long)component;
- (id)_makeNewCalendarUnitLabel;
- (void)_updateTextColorForCalendarUnitLabel:(id)label;
- (void)_fadeLabelForCalendarUnit:(unsigned long long)unit toText:(id)text animated:(BOOL)animated;
- (void)pickerView:(id)view didSelectRow:(long long)row inComponent:(long long)component;
- (void)scrollViewWillBeginDragging:(id)dragging;
- (void)_updateEnabledCellsIncludingWMDCells:(BOOL)wmdcells;
- (double)pickerView:(id)view rowHeightForComponent:(long long)component;
- (double)pickerView:(id)view widthForComponent:(long long)component;
- (id)pickerView:(id)view viewForRow:(long long)row forComponent:(long long)component reusingView:(id)view;
- (id)shadowColor;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)layoutSubviews;
- (void)_resetSelectionOfTables;
- (void)_setHidesLabels:(BOOL)labels;
- (void)_setUsesBlackChrome:(BOOL)chrome;
- (BOOL)_usesBlackChrome;
- (void)_setAllowsZeroCountDownDuration:(BOOL)duration;
- (BOOL)_allowsZeroCountDownDuration;
- (void)_setAllowsZeroTimeInterval:(BOOL)interval;
- (BOOL)_allowsZeroTimeInterval;
- (id)_viewForSelectedRowInComponent:(long long)component;
- (void)_updateTimeInputLabelPosition;
- (void)_hidePickerViewSelectionBarForTimeInputLabel:(BOOL)label;
- (void)_updateTimeInputLabelConfiguration;
- (BOOL)_shouldInstallTimeInputLabelForDatePickerMode:(long long)mode;
- (id)_currentTimeFormat;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_currentTimeInputLabelFrame;
- (void)_installTimeInputLabelIfNeeded;
- (void)_uninstallTimeInputLabelIfNeeded;
- (void)controlEventsGestureRecognizer:(id)recognizer recognizedControlEvent:(unsigned long long)event withEvent:(id)event;
- (BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (void)_gestureRecognizerFailed:(id)failed;
- (void)_updateWheelsForUpdatedTextInputWithForcedUpdate:(BOOL)update;
- (BOOL)timeLabel:(id)label didReceiveText:(id)text;
- (void)timeLabel:(id)label didUpdateText:(id)text;
- (long long)keyboardTypeForTimeLabel:(id)label;
- (BOOL)timeLabelShouldSuppressSoftwareKeyboard:(id)keyboard;
- (BOOL)timeLabelCanBecomeFirstResponder:(id)responder;
- (void)timeLabelWillBecomeFirstResponder:(id)responder;
- (unsigned long long)_permittedArrowDirectionForKeyboardPopover;
- (id)primaryFirstResponder;
- (void)timeLabelDidBecomeFirstResponder:(id)responder;
- (void)timeLabelDidFailToBecomeFirstResponder:(id)responder;
- (void)timeLabelDidResignFirstResponder:(id)responder;
- (void)timeLabelDidBeginEditing:(id)editing;
- (void)timeLabelDidEndEditing:(id)editing;
- (void)_updateWheelsLabelForCurrentDateComponents;
- (BOOL)wheelsTimeLabelShouldReceiveInteraction:(id)interaction;
- (void)wheelsTimeLabel:(id)label didChangeVisibility:(BOOL)visibility;
- (BOOL)passthroughScrollInteraction:(id)interaction shouldInteractAtLocation:(struct CGPoint { double x0; double x1; })location withEvent:(id)event;
- (BOOL)passthroughScrollInteractionDidRecognize:(id)recognize;
- (void)_hardwareKeyboardAvailabilityChanged:(id)changed;
- (void)_dismissManualKeyboard;
- (void)popoverPresentationController:(id)controller willRepositionPopoverToRect:(inout struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect inView:(inout id *)view;
- (void)presentationControllerWillDismiss:(id)dismiss;
- (void)presentationControllerDidDismiss:(id)dismiss;
- (BOOL)staggerTimeIntervals;
- (id)_selectedTextForCalendarUnit:(unsigned long long)unit;
- (id)_labelTextForCalendarUnit:(unsigned long long)unit;
- (id)_existingLabelForCalendarUnit:(unsigned long long)unit;
- (long long)_amPmValue;
- (BOOL)_updateDateOrTime;
- (BOOL)hasDefaultSize;
- (long long)_selectionBarRowInComponent:(long long)component;
- (id)_minutesStringForHour:(long long)hour minutes:(long long)minutes;
- (id)_hoursStringForHour:(long long)hour;
- (id)_hrMinFont;
- (long long)datePickerMode;
@end

#endif /* _UIDatePickerView_h */
