//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIDefaultKeyboardInput_h
#define UIDefaultKeyboardInput_h
@import Foundation;

#include "UIView.h"
#include "UIColor.h"
#include "UIImage.h"
#include "UIInputContextHistory.h"
#include "UIKeyboardInput-Protocol.h"
#include "UITextInputDelegate-Protocol.h"
#include "UITextInputPasswordRules.h"
#include "UITextInputPrivate-Protocol.h"
#include "UITextInputSuggestionDelegate-Protocol.h"
#include "UITextInputTokenizer-Protocol.h"
#include "UITextInputTraits.h"
#include "UITextInteractionAssistant.h"
#include "UITextPosition.h"
#include "UITextRange.h"
#include "UIView.h"

@class NSDictionary, NSIndexSet, NSString, RTIInputSystemSourceSession;

@interface UIDefaultKeyboardInput : UIView<UIKeyboardInput, UITextInputPrivate> {
  /* instance variables */
  UITextInputTraits *m_traits;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) NSObject<UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (nonatomic) BOOL _systemCursorAccessoriesDisabled;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) NSObject<UITextInputDelegate> *inputDelegate;
@property (readonly, nonatomic) NSObject<UITextInputTokenizer> *tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (@dynamic, nonatomic) long long autocapitalizationType;
@property (@dynamic, nonatomic) long long autocorrectionType;
@property (@dynamic, nonatomic) long long spellCheckingType;
@property (@dynamic, nonatomic) long long smartQuotesType;
@property (@dynamic, nonatomic) long long smartDashesType;
@property (@dynamic, nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long inlinePredictionType;
@property (@dynamic, nonatomic) long long keyboardType;
@property (@dynamic, nonatomic) long long keyboardAppearance;
@property (@dynamic, nonatomic) long long returnKeyType;
@property (@dynamic, nonatomic) BOOL enablesReturnKeyAutomatically;
@property (@dynamic, nonatomic) BOOL secureTextEntry;
@property (copy, @dynamic, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (@dynamic, nonatomic) struct __CFCharacterSet * textTrimmingSet;
@property (retain, @dynamic, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (@dynamic, nonatomic) unsigned long long insertionPointWidth;
@property (@dynamic, nonatomic) int textLoupeVisibility;
@property (@dynamic, nonatomic) int textSelectionBehavior;
@property (@dynamic, nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL isSingleLineDocument;
@property (@dynamic, nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (@dynamic, nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (@dynamic, nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;

/* instance methods */
- (id)textInputTraits;
- (void)forwardInvocation:(id)invocation;
- (id)methodSignatureForSelector:(SEL)selector;
- (void)takeTraitsFrom:(id)from;
- (id)delegate;
- (void)deleteBackward;
- (void)insertText:(id)text;
- (void)replaceCurrentWordWithText:(id)text;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)confirmMarkedText:(id)text;
- (unsigned short)characterInRelationToCaretSelection:(int)selection;
- (unsigned short)characterBeforeCaretSelection;
- (unsigned short)characterAfterCaretSelection;
- (id)fontForCaretSelection;
- (id)textColorForCaretSelection;
- (id)rectsForNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange;
- (int)wordOffsetInRange:(id)range;
- (BOOL)hasContent;
- (BOOL)hasSelection;
- (int)selectionState;
- (BOOL)selectionAtDocumentStart;
- (BOOL)selectionAtWordStart;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (id)rangeByMovingCurrentSelection:(int)selection;
- (id)rangeByExtendingCurrentSelection:(int)selection;
- (void)extendCurrentSelection:(int)selection;
- (void)selectAll;
- (void)setText:(id)text;
- (id)text;
- (void)setSelectionWithPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertCaretRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)isShowingPlaceholder;
- (void)setupPlaceholderTextIfNeeded;
- (BOOL)isSecure;
- (void)setSecure:(BOOL)secure;
- (id)selectionView;
- (BOOL)isEditable;
- (BOOL)isEditing;
- (void)updateSelection;
- (BOOL)becomesEditableWithGestures;
- (void)setBecomesEditableWithGestures:(BOOL)gestures;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleBounds;
- (id)textInRange:(id)range;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (void)replaceRange:(id)range withText:(id)text;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point withinRange:(id)range;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (id)characterRangeByExtendingPosition:(id)position inDirection:(long long)direction;
- (long long)baseWritingDirectionForPosition:(id)position inDirection:(long long)direction;
- (void)setBaseWritingDirection:(long long)direction forRange:(id)range;
- (void)unmarkText;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset;
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset;
- (BOOL)isPosition:(id)position atBoundary:(long long)boundary inDirection:(long long)direction;
- (id)positionFromPosition:(id)position toBoundary:(long long)boundary inDirection:(long long)direction;
- (BOOL)isPosition:(id)position withinTextUnit:(long long)unit inDirection:(long long)direction;
- (id)rangeEnclosingPosition:(id)position withGranularity:(long long)granularity inDirection:(long long)direction;
- (id)selectionRectsForRange:(id)range;
@end

#endif /* UIDefaultKeyboardInput_h */
