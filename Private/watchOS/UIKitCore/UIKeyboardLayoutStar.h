//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIKeyboardLayoutStar_h
#define UIKeyboardLayoutStar_h
@import Foundation;

#include "UIKeyboardLayout.h"
#include "UIButton.h"
#include "UIDelayedAction.h"
#include "UIGestureKeyboardIntroduction.h"
#include "UIImageView.h"
#include "UIKBBackgroundView.h"
#include "UIKBEmojiHitTestResponder-Protocol.h"
#include "UIKBKeyViewAnimator.h"
#include "UIKBKeyplaneView.h"
#include "UIKBKeyplaneViewDelegate-Protocol.h"
#include "UIKBRenderConfig.h"
#include "UIKBResizingKeyplaneCoordinator.h"
#include "UIKBResizingKeyplaneCoordinatorCoordinatorDelegate-Protocol.h"
#include "UIKBTree.h"
#include "UIKeyboardEmojiKeyDisplayController.h"
#include "UIKeyboardKeyplaneTransitionDelegate-Protocol.h"
#include "UIKeyboardLayoutStarDelegate-Protocol.h"
#include "UIKeyboardPathEffectView.h"
#include "UIKeyboardPinchGestureRecognizer.h"
#include "UIKeyboardPinchGestureRecognizerDelegate-Protocol.h"
#include "UIKeyboardSplitTransitionView.h"
#include "UIKeyboardTypingStyleEstimatorDelegate-Protocol.h"
#include "UISwipeGestureRecognizer.h"
#include "UITextCursorAssertion-Protocol.h"
#include "UIView.h"
#include "_UIKeyboardTypingSpeedLogger.h"

@class CADisplayLink, NSArray, NSDate, NSLayoutConstraint, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimer, TUIKeyplaneView;

@interface UIKeyboardLayoutStar : UIKeyboardLayout<UIKBEmojiHitTestResponder, UIKBResizingKeyplaneCoordinatorCoordinatorDelegate, UIKeyboardPinchGestureRecognizerDelegate, UIKeyboardTypingStyleEstimatorDelegate, UIKBKeyplaneViewDelegate, UIKeyboardKeyplaneTransitionDelegate> {
  /* instance variables */
  long long _appearance;
  UIKBTree *_inactiveLanguageIndicator;
  UIKBKeyplaneView *_keyplaneView;
  UIKBBackgroundView *_backgroundView;
  UIKBKeyViewAnimator *_keyViewAnimator;
  double _prevTouchUpTime;
  double _prevTouchUpFinishedTime;
  double _prevTouchDownTime;
  unsigned long long _prevUpActions;
  NSMutableDictionary *_keyboards;
  NSMutableDictionary *_allKeyplaneViews;
  NSMutableSet *_allKeyplaneKeycaps;
  NSMutableSet *_validInputStrings;
  int _preferredTrackingChangeCount;
  int _shiftTrackingChangeCount;
  NSMutableSet *_accentInfo;
  NSMutableSet *_hasAccents;
  id _spaceTarget;
  SEL _spaceAction;
  SEL _spaceLongAction;
  id _returnTarget;
  SEL _returnAction;
  SEL _returnLongAction;
  id _deleteTarget;
  SEL _deleteAction;
  SEL _deleteLongAction;
  BOOL _autoshift;
  BOOL _settingShift;
  BOOL _holdingShift;
  BOOL _revertKeyplaneAfterTouch;
  BOOL _wasShifted;
  BOOL _swipeDetected;
  BOOL _showIntlKey;
  BOOL _showDictationKey;
  BOOL _suppressDeactivateKeys;
  BOOL _suppressShiftKeyplaneAnimation;
  BOOL _isTrackpadMode;
  BOOL _shiftLockReady;
  double _shiftLockFirstTapTime;
  UISwipeGestureRecognizer *_rightSwipeRecognizer;
  UISwipeGestureRecognizer *_leftSwipeRecognizer;
  UISwipeGestureRecognizer *_upSwipeRecognizer;
  UIKeyboardPinchGestureRecognizer *_pinchGestureRecognizer;
  UIKeyboardSplitTransitionView *_transitionView;
  double _initialSplitProgress;
  double _finalSplitProgress;
  double _autoSplitLastUpdate;
  double _autoSplitElapsedTime;
  CADisplayLink *_displayLink;
  BOOL _ghostKeysEnabled;
  UIDelayedAction *_delayedCentroidUpdate;
  BOOL _isRebuilding;
  long long _currentHandBias;
  BOOL _preRotateShift;
  NSString *_preRotateKeyplaneName;
  BOOL _preRotateTrackpadMode;
  UIDelayedAction *_multitapAction;
  BOOL _unshiftAfterMultitap;
  int _multitapCount;
  UIKBTree *_multitapKey;
  UIView *_flickPopupView;
  NSMutableDictionary *_compositeImages;
  NSTimer *_flickPopuptimer;
  id _touchInfo;
  UIView *_dimKeyboardImageView;
  BOOL _keyboardImageViewIsDim;
  BOOL _isOutOfBounds;
  UIDelayedAction *_dismissModalDoubleConsonantKeys;
  BOOL _inDealloc;
  NSMutableSet *_keysUnderIndicator;
  _UIKeyboardTypingSpeedLogger *_typingSpeedLogger;
  UIKBRenderConfig *_passcodeRenderConfig;
  long long _setKeyplaneViewCount;
  BOOL _inputTraitsPreventInitialReuse;
  BOOL _settingFloat;
  NSMutableSet *_leftKeySet;
  NSMutableSet *_rightKeySet;
  struct CGPoint { double x; double y; } _leftDriftOffset;
  struct CGPoint { double x; double y; } _rightDriftOffset;
  NSMutableArray *_leftSideReachability;
  NSMutableArray *_rightSideReachability;
  NSNumber *_homeRowHint;
  double _touchDownTimeSpan;
  NSDate *_prevTouchMoreKeyTime;
  NSDate *_prevProgressiveCandidateRequestTime;
  NSTimer *_progressiveCandidateUpdateTimer;
  NSString *_lastInputMode;
  BOOL _pendingDictationReload;
  BOOL _hasPeekedGestureKey;
  BOOL _lastInputIsGestureKey;
  UIGestureKeyboardIntroduction *_gestureKeyboardIntroduction;
  BOOL _dictationUsingServerManualEndpointing;
  BOOL _splitTransitionNeedsRebuild;
  BOOL _selectedVariantIndexChanged;
  NSMutableDictionary *_extendedTouchInfoMap;
  UIKBResizingKeyplaneCoordinator *_resizingKeyplaneCoordinator;
  UIButton *_biasEscapeButton;
  NSLayoutConstraint *_biasEscapeButtonLeftConstraint;
  NSLayoutConstraint *_biasEscapeButtonRightConstraint;
  NSMutableSet *_keyplaneTransformations;
  UIImageView *_pathEffectGlowView;
  NSArray *_pathEffectViewConstraints;
  BOOL _isContinuousPathUnderway;
  UIView *_keyplaneTransformationAreaView;
  BOOL _externalDictationAndInternationalKeys;
  BOOL _showsPunctuationKeysOnPrimaryKeyplane;
  TUIKeyplaneView *_liveKeyplaneView;
  BOOL _layoutSupportsCrescendo;
  NSArray *_liveKeyplaneConstraints;
}

@property (retain, nonatomic) UIKeyboardPathEffectView *pathEffectView;
@property (nonatomic) int playKeyClickSoundOn;
@property (nonatomic) BOOL muteNextKeyClickSound;
@property (retain, nonatomic) NSObject<UITextCursorAssertion> *blinkAssertion;
@property (weak, nonatomic) NSObject<UIKeyboardKeyplaneTransitionDelegate> *splitKeyplaneTransitionDelegate;
@property (nonatomic) NSObject<UIKeyboardLayoutStarDelegate> *delegate;
@property (readonly, nonatomic) UIKBTree *keyboard;
@property (readonly, nonatomic) UIKBTree *keyplane;
@property (readonly, nonatomic) UIKeyboardEmojiKeyDisplayController *emojiKeyManager;
@property (copy, nonatomic) NSString *keyboardName;
@property (copy, nonatomic) NSString *keyplaneName;
@property (readonly, nonatomic) NSString *localizedInputMode;
@property (copy, nonatomic) NSString *localizedInputKey;
@property (retain, nonatomic) UIKBTree *activeKey;
@property (nonatomic) BOOL shift;
@property (nonatomic) BOOL autoShift;
@property (nonatomic) BOOL didLongPress;
@property (readonly, nonatomic) BOOL rotating;
@property (readonly, nonatomic) BOOL showsInternationalKey;
@property (readonly, nonatomic) BOOL showsDictationKey;
@property (copy, nonatomic) NSString *preTouchKeyplaneName;
@property (retain, nonatomic) UIKBRenderConfig *renderConfig;
@property (retain, nonatomic) NSString *layoutTag;
@property (retain, nonatomic) UIView *modalDisplayView;
@property (nonatomic) double lastTwoFingerTapTimestamp;
@property (readonly, nonatomic) BOOL hasActiveKeys;
@property (nonatomic) BOOL preventPaddlesForPointerTouches;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (Class)_subclassForScreenTraits:(id)traits;
+ (void)accessibilitySensitivityChanged;
+ (id)keyboardFromFactoryWithName:(id)name screenTraits:(id)traits;
+ (id)keyboardWithName:(id)name screenTraits:(id)traits;
+ (struct CGSize { double x0; double x1; })keyboardSizeForInputMode:(id)mode screenTraits:(id)traits keyboardType:(long long)type;
+ (id)sharedRivenKeyplaneGenerator;
+ (id)sharedPunctuationCharacterSet;

/* instance methods */
- (BOOL)_continuousPathSpotlightEffectEnabled;
- (BOOL)_continuousPathModalPunctuationPlaneEnabled;
- (void)didMoveToWindow;
- (void)_transitionToContinuousPathState:(long long)state forTouchInfo:(id)info;
- (void)transitionToPunctuationKeysVisible:(BOOL)visible;
- (void)didBeginContinuousPath;
- (void)addContinuousPathPoint:(struct CGPoint { double x0; double x1; })point withTimestamp:(double)timestamp;
- (void)clearContinuousPathView;
- (void)finishContinuousPathView:(BOOL)view;
- (void)touchModalDoubleConsonantKeysTimer;
- (void)handleDoubleConsonantKeysTimerFired;
- (void)cancelModalDoubleConsonantKeysTimer;
- (id)flickPopupStringForKey:(id)key withString:(id)string;
- (id)flickStringForInputKey:(id)key direction:(long long)direction;
- (void)populateFlickPopupsForKey:(id)key;
- (BOOL)handleFlick:(id)flick;
- (void)showFlickView:(long long)view withKey:(id)key flickString:(id)string;
- (void)handlePopupView:(id)view;
- (void)handlePopupView;
- (void)handleDismissFlickView:(id)view;
- (void)handleDismissFlickView;
- (void)dismissGestureKeyboardIntroduction;
- (void)setKeyboardDim:(BOOL)dim amount:(double)amount withDuration:(double)duration;
- (void)setDisableInteraction:(BOOL)interaction;
- (void)setPreferredHeight:(double)height;
- (void)setKeyboardDim:(BOOL)dim;
- (void)showPopupView:(long long)view withKey:(id)key popupInfo:(id)info force:(BOOL)force;
- (void)_didChangeKeyplaneWithContext:(id)context;
- (id)keyplaneView:(id)view containingViewForActiveKey:(id)key;
- (id)keyWithRepresentedString:(id)string;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeyWithRepresentedString:(id)string;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForLastKeyWithRepresentedString:(id)string;
- (id)popupKeyViews;
- (void)setKeyForTouchInfo:(id)info key:(id)key;
- (BOOL)isRotating;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (void)removePathEffectViewConstraintsIfNeeded;
- (void)accessibilitySensitivityChanged;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (void)willMoveToWindow:(id)window;
- (void)clearUnusedObjects:(BOOL)objects;
- (void)clearTransientState;
- (void)removeFromSuperview;
- (void)flushKeyCache:(id)cache;
- (SEL)handlerForNotification:(id)notification;
- (id)defaultNameForKeyplaneName:(id)name;
- (id)splitNameForKeyplaneName:(id)name;
- (id)splitNameForKeyplane:(id)keyplane;
- (id)defaultKeyplaneForKeyplane:(id)keyplane;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })dragGestureRectInView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)name onKeyplaneName:(id)name;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)name;
- (void)tearDownSplitTransitionView;
- (void)refreshForRivenPreferences;
- (int)visualStyleForKeyboardIfSplit:(BOOL)split;
- (void)setKeyboardAppearance:(long long)appearance;
- (BOOL)allKeyplanesHaveSameHeight;
- (struct CGSize { double x0; double x1; })sizeForKeyplane:(id)keyplane;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keyplanePadding;
- (void)updateKeyboardForKeyplane:(id)keyplane;
- (id)keyForKeyboardName:(id)name screenTraits:(id)traits;
- (void)setKeyboardName:(id)name appearance:(long long)appearance;
- (double)lastTouchUpTimestamp;
- (double)lastTouchDownTimestamp;
- (BOOL)canProduceString:(id)string;
- (void)updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane:(id)keyplane withInputMode:(id)mode;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (void)nextToUseInputModeDidChange:(id)change;
- (void)updateLocalizedKeysOnKeyplane:(id)keyplane;
- (void)updateAutolocalizedKeysForKeyplane:(id)keyplane;
- (void)updateLocalizedDisplayStringsForKeys:(id)keys;
- (void)updateInputModeLocalizedKeysForKeyplane:(id)keyplane;
- (void)updateLocalizedKeys:(BOOL)keys;
- (void)updateLocalizedKeysForKeyplane:(id)keyplane updateAllKeyplanes:(BOOL)keyplanes;
- (BOOL)shouldMatchCaseForDomainKeys;
- (void)rebuildSplitTransitionView;
- (struct CGImage *)cachedCompositeImageWithCacheKey:(id)key;
- (struct CGImage *)renderedImageWithStateFallbacksForToken:(id)token;
- (struct CGImage *)renderedImageWithToken:(id)token;
- (struct CGImage *)renderedKeyplaneWithToken:(id)token split:(BOOL)split;
- (void)traitCollectionDidChange;
- (void)setRenderConfig:(id)config updateKeyplane:(BOOL)keyplane;
- (void)didTriggerDestructiveRenderConfigChange;
- (void)setPasscodeOutlineAlpha:(double)alpha;
- (void)willBeginIndirectSelectionGesture;
- (void)willBeginIndirectSelectionGesture:(BOOL)gesture;
- (void)cancelTouchesForTwoFingerTapGesture:(id)gesture;
- (void)didEndIndirectSelectionGesture;
- (BOOL)isDeveloperGestureKeybaord;
- (void)didEndIndirectSelectionGesture:(BOOL)gesture;
- (void)willBeginTrackpadModeForServerSideDictation;
- (void)didEndTrackpadModeForServerSideDictation;
- (void)setTrackpadMode:(BOOL)mode animated:(BOOL)animated;
- (BOOL)isHandwritingPlane;
- (void)updateBackgroundCorners;
- (void)updateBackgroundIfNeeded;
- (BOOL)shouldShowDictationKey;
- (BOOL)canReuseKeyplaneView;
- (BOOL)supportsEmoji;
- (BOOL)isResizing;
- (BOOL)isResized;
- (BOOL)shouldAllowSelectionGestures:(BOOL)gestures atPoint:(struct CGPoint { double x0; double x1; })point toBegin:(BOOL)begin;
- (void)setTwoFingerTapTimestamp:(double)timestamp;
- (void)updateGlobeKeyDisplayString;
- (BOOL)globeKeyDisplaysAsEmojiKey;
- (BOOL)showsDedicatedEmojiKeyAlongsideGlobeButton;
- (BOOL)stretchKeyboardToFit;
- (BOOL)stretchKeyboardToFitKeyplane:(id)keyplane;
- (double)stretchFactorHeight;
- (struct CGSize { double x0; double x1; })stretchFactor;
- (BOOL)shouldMergeAssistantBarWithKeyboardLayout;
- (BOOL)shouldAllowCurrentKeyplaneReload;
- (unsigned long long)keyplaneShiftState;
- (BOOL)_allowStartingContinuousPathForTouchInfo:(id)info alreadyActiveKeyExisting:(BOOL)existing;
- (BOOL)shouldIgnoreContinuousPathRequirements;
- (BOOL)_allowContinuousPathUI;
- (BOOL)_allowPaddle;
- (void)reloadCurrentKeyplane;
- (BOOL)useCrescendoLayout;
- (void)createLayoutFromName:(id)name;
- (void)updateAllKeyStates;
- (void)updateStateForKey:(id)key;
- (void)annotateKeysWithDeveloperPunctuation;
- (BOOL)ignoreWriteboard;
- (BOOL)useDismissForMessagesWriteboard;
- (BOOL)useUndoForMessagesWriteboard;
- (void)annotateWriteboardDisplayTypeHintForKeyIfNeeded;
- (void)clearKeyAnnotationsIfNecessary;
- (void)updateTransitionWithFlags:(unsigned long long)flags;
- (void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)name withType:(int)type;
- (void)_setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)name withType:(int)type;
- (BOOL)_stringContainsCurrencyCharacters:(id)characters;
- (void)updateCurrencySymbolForKey:(id)key withCurrencyString:(id)string;
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)keyplane;
- (void)setPercentSignKeysForCurrentLocaleOnKeyplane:(id)keyplane;
- (int)displayTypeHintForMoreKey;
- (int)displayTypeHintForShiftKey;
- (int)stateForMultitapReverseKey:(id)key;
- (int)stateForMultitapForwardKey:(id)key;
- (int)stateForCandidateListKey:(id)key;
- (int)stateForDictationKey:(id)key;
- (BOOL)supportStylingWithKey:(id)key;
- (int)stateForStylingKey:(id)key;
- (id)highlightedVariantListForStylingKey:(id)key;
- (int)stateForManipulationKey:(id)key;
- (unsigned long long)textEditingKeyMask;
- (void)setTextEditingTraits:(id)traits;
- (int)stateForKeyplaneSwitchKey:(id)key;
- (id)keylistContainingKey:(id)key;
- (void)mergeKeysIfNeeded;
- (BOOL)_shouldSwapGlobeAndMore;
- (void)_swapGlobeAndMoreKeysIfNecessary;
- (void)_updateSupplementaryKeys;
- (BOOL)_shouldAttemptToAddSupplementaryControlKeys;
- (id)_currentKeyplaneTransformationContext;
- (void)_addExtraControlKeysIfNecessary;
- (void)_addResizeTransformationsIfNecessary;
- (void)_transformFloatingKeyboardIfNecessary;
- (void)_transformCarPlayIfNecessary;
- (void)_transformWatchIfNecessary;
- (void)recenterMonolithKeyplaneSwitchKeys;
- (void)updateMoreAndInternationalKeys;
- (void)updateReturnKeysIfNeeded;
- (void)transitionToModalContinuousPathKeyplane;
- (void)relayoutForWriteboardKey;
- (BOOL)canAddRomanSwitchKey;
- (id)inputModeToMergeCapsLockKey;
- (BOOL)shouldMergeKey:(id)key;
- (void)refreshForDictationAvailablityDidChange;
- (id)keyplaneFactory;
- (id)viewForKey:(id)key;
- (int)stateForKey:(id)key;
- (void)setState:(int)state forKey:(id)key;
- (void)updateState:(int)state forKey:(id)key;
- (id)keyViewAnimator;
- (id)cacheIdentifierForKeyplaneNamed:(id)named;
- (id)cacheTokenForKeyplane:(id)keyplane caseAlternates:(BOOL)alternates;
- (void)updateCachedKeyplaneKeycaps;
- (BOOL)_shouldInheritScreenScaleAsContentScaleFactor;
- (void)showKeyboardWithInputMode:(id)mode renderConfig:(id)config inputTraits:(id)traits screenTraits:(id)traits splitTraits:(id)traits;
- (void)showKeyboardWithInputMode:(id)mode renderConfig:(id)config inputTraits:(id)traits screenTraits:(id)traits splitTraits:(id)traits reload:(BOOL)reload;
- (void)reloadKeyboardWithInputTraits:(id)traits screenTraits:(id)traits splitTraits:(id)traits;
- (void)showKeyboardWithInputTraits:(id)traits screenTraits:(id)traits splitTraits:(id)traits;
- (void)setToInitialKeyplane;
- (BOOL)shouldUseDefaultShiftStateFromLayout;
- (id)initialKeyplaneNameWithKBStarName:(id)name;
- (void)cleanupPreviousKeyboardWithNewInputTraits:(id)traits;
- (void)deactivateActiveKeysClearingTouchInfo:(BOOL)info clearingDimming:(BOOL)dimming;
- (void)deactivateActiveKeys;
- (void)deactivateActiveKey;
- (BOOL)isTrackpadMode;
- (void)prepareSliderBehaviorFeedback;
- (void)provideSliderBehaviorFeedback;
- (void)finishSliderBehaviorFeedback;
- (BOOL)shouldHitTestKey:(id)key;
- (id)keyViewHitTestForPoint:(struct CGPoint { double x0; double x1; })point;
- (id)keyHitTestContainingPoint:(struct CGPoint { double x0; double x1; })point;
- (id)keyHitTestClosestToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)keyHitTestClosestToPoint:(struct CGPoint { double x0; double x1; })point inKeys:(id)keys;
- (id)keyHitTestWithoutCharging:(struct CGPoint { double x0; double x1; })charging;
- (id)keyHitTest:(struct CGPoint { double x0; double x1; })test;
- (BOOL)isGeometricShiftOrMoreKeyForTouch:(id)touch;
- (BOOL)shouldPreventInputManagerHitTestingForKey:(id)key;
- (BOOL)shouldIgnoreDistantKey;
- (int)keycodeForKey:(id)key;
- (id)unprocessedTouchEventsForTouchInfo:(id)info touchStage:(int)stage forcedKeyCode:(int)code;
- (void)playKeyFeedbackIfNecessaryForTouchDownOnKey:(id)key touchInfo:(id)info;
- (void)performHitTestForTouchInfo:(id)info touchStage:(int)stage executionContextPassingUIKBTree:(id)uikbtree;
- (BOOL)isDeadkeyInput:(id)input;
- (void)updatePhysicalKeyboardEvent:(id)event withMarkedInput:(id)input;
- (id)currentRepresentedStringForDualDisplayKey:(id)key;
- (id)createKeyEventForStringAction:(id)action forKey:(id)key touchInfo:(id)info inputFlags:(int)flags;
- (id)createKeyEventForStringAction:(id)action forKey:(id)key inputFlags:(int)flags;
- (void)clearHandwritingStrokesIfNeededAndNotify:(BOOL)notify;
- (void)deleteHandwritingStrokesAtIndexes:(id)indexes;
- (void)logHandwritingData;
- (id)candidateList;
- (BOOL)hasCandidateKeys;
- (BOOL)hasAccentKey;
- (id)activeMultitapCompleteKey;
- (id)multitapCompleteKeys;
- (id)multitapForwardKeys;
- (BOOL)canMultitap;
- (void)multitapInterrupted;
- (void)endMultitapForKey:(id)key;
- (void)multitapExpired;
- (void)handleMultitapTimerFired;
- (BOOL)isMultitapKey:(id)key;
- (void)cancelMultitapTimer;
- (void)touchMultitapTimer;
- (void)didClearInput;
- (void)updateLayoutTags;
- (void)setLabel:(id)label forKey:(id)key;
- (void)setTarget:(id)target forKey:(id)key;
- (void)setAction:(SEL)action forKey:(id)key;
- (void)setLongPressAction:(SEL)action forKey:(id)key;
- (void)restoreDefaultsForKey:(id)key;
- (void)restoreDefaultsForAllKeys;
- (BOOL)isShiftKeyPlaneChooser;
- (BOOL)isLongPressedKey:(id)key;
- (BOOL)shouldShowInternationalMenuForKey:(id)key;
- (void)showMenu:(id)menu forKey:(id)key;
- (void)longPressAction;
- (id)_keyboardLongPressInteractionRegions;
- (id)_keyplaneVariantsKeyForString:(id)string;
- (id)_appendingSecondaryStringToVariantsTop:(id)top secondaryString:(id)string withDirection:(id)direction;
- (id)_variantsByAppendingDualStringKey:(id)key toVariants:(id)variants;
- (id)_variantsOfCurrencyKey:(id)key language:(id)language;
- (void)preparePopupVariantsForKey:(id)key onKeyplane:(id)keyplane;
- (void)showPopupVariantsForKey:(id)key;
- (BOOL)shouldShowIndicator;
- (void)setHideKeysUnderIndicator:(BOOL)indicator;
- (id)activationIndicatorView;
- (void)fadeActivationIndicatorWithDuration:(double)duration withDelay:(double)delay;
- (BOOL)shouldDeactivateWithoutWindow;
- (unsigned long long)targetEdgesForScreenGestureRecognition;
- (void)layoutSubviews;
- (unsigned char)getHandRestRecognizerState;
- (BOOL)handRestRecognizerShouldNeverIgnoreTouchState:(id)state fromPoint:(struct CGPoint { double x0; double x1; })point toPoint:(struct CGPoint { double x0; double x1; })point forRestingState:(unsigned long long)state otherRestedTouchLocations:(id)locations;
- (id)getSortedKeysForDisplayRowHint:(int)hint;
- (id)handRestRecognizerGetHomeRowHint;
- (struct CGSize { double x0; double x1; })handRestRecognizerStandardKeyPixelSize;
- (id /* block */)handRestRecognizerSilenceNextTouchDown;
- (void)handRestRecognizerNotifyRestForBegin:(BOOL)begin location:(struct CGPoint { double x0; double x1; })location timestamp:(double)timestamp pathIndex:(int)index touchUUID:(id)uuid context:(id)context;
- (struct CGPoint { double x0; double x1; })getCenterForKeyUnderLeftIndexFinger;
- (struct CGPoint { double x0; double x1; })getCenterForKeyUnderRightIndexFinger;
- (id)getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:(long long)row;
- (BOOL)_handRestRecognizerCancelShouldBeEnd;
- (void)setNeedsVirtualDriftUpdate;
- (void)resetHRRLayoutState;
- (void)calculateReachabilityScoreWithKey:(id)key keyError:(struct CGPoint { double x0; double x1; })error;
- (double)biasedKeyboardWidthRatio;
- (long long)currentHandBias;
- (void)setKeyboardBias:(long long)bias;
- (void)_setBiasEscapeButtonVisible:(BOOL)visible;
- (void)_didTapBiasEscapeButton:(id)button;
- (BOOL)keyplaneUsesResizingOffset;
- (BOOL)keyplaneSupportsResizingGesture;
- (void)resizeKeyplaneAndRedraw:(BOOL)redraw;
- (id)hostViewForResizingKeyplane:(id)keyplane;
- (id)splitTransitionDelegate;
- (void)prepareForSplitTransition;
- (void)showSplitTransitionView:(BOOL)view;
- (void)finishSplitWithCompletion:(id /* block */)completion;
- (void)finishSplitTransition;
- (void)finishSplitTransitionWithCompletion:(id /* block */)completion;
- (void)finishSplitTransitionWithProgress:(double)progress;
- (BOOL)pinchDetected;
- (BOOL)pinchSplitGestureEnabled;
- (BOOL)pinchCanBeginWithTouches:(id)touches andScale:(double)scale;
- (void)didDetectPinchWithSeparation:(double)separation;
- (void)pinchDidConsumeTouch:(id)touch;
- (void)pinchHandler:(id)handler;
- (void)setSplitProgress:(double)progress;
- (void)_autoSplit:(id)split;
- (void)setSplit:(BOOL)split animated:(BOOL)animated;
- (void)prepareForFloatingTransition:(BOOL)transition;
- (BOOL)_handleTouchForEmojiInputView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_paddedKeyUnionFrame;
- (double)hitBuffer;
- (BOOL)_pointAllowedInStaticHitBuffer:(struct CGPoint { double x0; double x1; })buffer;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })inside withEvent:(id)event;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })inside forEvent:(struct __GSEvent *)event;
- (void)touchDown:(id)down executionContext:(id)context;
- (void)completeHitTestForTouchDown:(id)down executionContext:(id)context;
- (void)playKeyReleaseSoundForKey:(id)key;
- (void)playKeyClickSoundForKey:(id)key;
- (void)playKeyClickSoundOnDownForKey:(id)key;
- (void)playKeyClickSoundOnUpForKey:(id)key;
- (BOOL)shouldSkipResponseToGlobeKey:(id)key atPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)isKeyScriptSwitchKey:(id)key;
- (void)_cleanUpBlinkAssertionIfNecessary;
- (void)touchDownWithKey:(id)key withTouchInfo:(id)info atPoint:(struct CGPoint { double x0; double x1; })point executionContext:(id)context;
- (BOOL)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned long long)actions;
- (void)incrementPunctuationIfNeeded:(id)needed;
- (void)completeCommitTouchesPrecedingTouchDownWithKey:(id)key withActions:(unsigned long long)actions executionContext:(id)context;
- (id)keyplaneNameForRevertAfterTouch;
- (id)synthesizeTouchUpEventForKey:(id)key;
- (BOOL)shouldShowGestureKeyboardIntroduction;
- (BOOL)showGestureKeyboardIntroductionIfNeeded;
- (void)completeSendStringActionForTouchDownWithKey:(id)key withActions:(unsigned long long)actions executionContext:(id)context;
- (void)completeDeleteActionForTouchDownWithActions:(unsigned long long)actions executionContext:(id)context;
- (BOOL)canForceTouchUUIDCommit:(id)uuidcommit inWindow:(id)window;
- (BOOL)touchPassesDragThreshold:(id)threshold;
- (void)touchDragged:(id)dragged;
- (void)touchDragged:(id)dragged executionContext:(id)context;
- (void)completeHitTestForTouchDragged:(id)dragged hitKey:(id)key;
- (long long)defaultSelectedVariantIndexForKey:(id)key withActions:(unsigned long long)actions;
- (void)updateSelectedVariantIndexForKey:(id)key withActions:(unsigned long long)actions withPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updatePanAlternativesForTouchInfo:(id)info;
- (void)resetPanAlternativesForEndedTouch:(id)touch;
- (BOOL)performReturnAction;
- (BOOL)performSpaceAction;
- (void)refreshGhostKeyState;
- (void)cancelDelayedCentroidUpdate;
- (void)handleDelayedCentroidUpdate;
- (BOOL)shouldRetestTouchUp:(id)up;
- (void)touchUp:(id)up executionContext:(id)context;
- (void)handleKeyboardMenusForTouch:(id)touch;
- (BOOL)shouldSendTouchUpToInputManager:(id)manager;
- (void)_recordKeystrokeStatisticForKeyPress;
- (void)completeRetestForTouchUp:(id)up timestamp:(double)timestamp interval:(double)interval executionContext:(id)context;
- (void)presentModalDisplayForKey:(id)key;
- (BOOL)shouldYieldToControlCenterForFlickWithInitialPoint:(struct CGPoint { double x0; double x1; })point finalPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)shouldSendStringForFlick:(id)flick;
- (void)completeSendStringActionForTouchUp:(id)up withActions:(unsigned long long)actions timestamp:(double)timestamp interval:(double)interval didLongPress:(BOOL)press prevActions:(unsigned long long)actions executionContext:(id)context;
- (void)continueFromInternationalActionForTouchUp:(id)up withActions:(unsigned long long)actions timestamp:(double)timestamp interval:(double)interval didLongPress:(BOOL)press prevActions:(unsigned long long)actions executionContext:(id)context;
- (void)touchCancelled:(id)cancelled executionContext:(id)context;
- (void)touchCancelled:(id)cancelled forResting:(BOOL)resting executionContext:(id)context;
- (void)touchChanged:(id)changed executionContext:(id)context;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (void)_gestureRecognizerFailed:(id)failed;
- (void)installGestureRecognizers;
- (void)uninstallGestureRecognizers;
- (void)swipeDetected:(id)detected;
- (id)infoForTouchUUID:(id)uuid;
- (id)infoForTouch:(id)touch;
- (id)generateInfoForTouch:(id)touch;
- (void)cancelTouchIfNecessaryForInfo:(id)info forResting:(BOOL)resting;
- (void)clearInfoForTouch:(id)touch;
- (void)clearInfoForTouch:(id)touch forResting:(BOOL)resting;
- (void)clearAllTouchInfo;
- (id)touchInfoForKey:(id)key;
- (id)activeTouchInfoForShift;
- (BOOL)hasActiveContinuousPathInput;
- (BOOL)keyHasAccentedVariants:(id)variants;
- (unsigned long long)downActionFlagsForKey:(id)key;
- (unsigned long long)upActionFlagsForKey:(id)key;
- (void)refreshDualStringKeys;
- (void)downActionShiftWithKey:(id)key;
- (void)upActionShift;
- (BOOL)usesAutoShift;
- (BOOL)ignoresShiftState;
- (BOOL)isAlphabeticPlane;
- (BOOL)isKanaPlane;
- (BOOL)supportsContinuousPath;
- (BOOL)diacriticForwardCompose;
- (int)stateForShiftKey:(id)key;
- (void)updateShiftKeyState;
- (void)setMultitapReverseKeyState;
- (void)updateUndoKeyState;
- (void)setAutoshift:(BOOL)autoshift;
- (BOOL)isShiftKeyBeingHeld;
- (void)divideKeysIntoLeft:(id)left right:(id)right;
- (void)updateKeyCentroids;
- (void)willRotate;
- (void)didRotate;
- (BOOL)shouldRetestTouchDraggedFromKey:(id)key;
- (BOOL)shouldRetestKey:(id)key slidOffKey:(id)key withKeyplane:(id)keyplane;
- (id)baseKeyForString:(id)string;
- (id)keyplaneForKey:(id)key;
- (id)keyplaneNamed:(id)named;
- (void)changeToKeyplane:(id)keyplane;
- (void)switchKeyplane:(id)keyplane;
- (struct CGPoint { double x0; double x1; })applyError:(struct CGPoint { double x0; double x1; })error toKey:(id)key;
- (id)simulateTouch:(struct CGPoint { double x0; double x1; })touch;
- (id)simulateTouchForCharacter:(id)character errorVector:(struct CGPoint { double x0; double x1; })vector shouldTypeVariants:(BOOL)variants baseKeyForVariants:(BOOL)variants;
- (void)fadeWithInvocation:(id)invocation;
- (id)currentKeyplane;
- (id)currentKeyplaneView;
- (void)updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:(id)view;
- (BOOL)keyplaneContainsDismissKey;
- (BOOL)keyplaneContainsEmojiKey;
- (BOOL)isEmojiKeyplane;
- (BOOL)is10KeyRendering;
- (void)triggerSpaceKeyplaneSwitchIfNecessary;
- (void)typingStyleEstimator:(id)estimator didChangeTypingStyleEstimate:(unsigned long long)estimate;
@end

#endif /* UIKeyboardLayoutStar_h */
