//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIBezierPath_h
#define UIBezierPath_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@interface UIBezierPath : NSObject<NSCopying, NSSecureCoding> {
  /* instance variables */
  struct CGPath * _path;
  double * _lineDashPattern;
  unsigned long long _lineDashPatternCount;
  double _lineDashPhase;
  struct CGPath * _immutablePath;
  BOOL _immutablePathIsValid;
  BOOL _isRoundedRect;
  double _cornerRadius;
  BOOL _hasContinuousCorners;
  unsigned long long _cornerMask;
}

@property (nonatomic) struct CGPath * CGPath;
@property (readonly) BOOL empty;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } currentPoint;
@property (nonatomic) double lineWidth;
@property (nonatomic) int lineCapStyle;
@property (nonatomic) int lineJoinStyle;
@property (nonatomic) double miterLimit;
@property (nonatomic) double flatness;
@property (nonatomic) BOOL usesEvenOddFillRule;

/* class methods */
+ (id)shadowBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withRoundedEdges:(unsigned long long)edges;
+ (BOOL)supportsSecureCoding;
+ (id)bezierPath;
+ (id)bezierPathWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (id)bezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (id)bezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadius:(double)radius;
+ (id)_bezierPathWithArcRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadius:(double)radius;
+ (id)bezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect byRoundingCorners:(unsigned long long)corners cornerRadii:(struct CGSize { double x0; double x1; })radii;
+ (id)bezierPathWithArcCenter:(struct CGPoint { double x0; double x1; })center radius:(double)radius startAngle:(double)angle endAngle:(double)angle clockwise:(BOOL)clockwise;
+ (id)bezierPathWithCGPath:(struct CGPath *)cgpath;
+ (id)roundedRectBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withTopCornerRadius:(double)radius withBottomCornerRadius:(double)radius;
+ (id)_bezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect byRoundingCorners:(unsigned long long)corners cornerRadius:(double)radius;
+ (id)roundedRectBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withRoundedEdges:(unsigned long long)edges;
+ (id)roundedRectBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withRoundedCorners:(unsigned long long)corners withCornerRadius:(double)radius;
+ (id)roundedRectBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withRoundedCorners:(unsigned long long)corners withCornerRadii:(id)radii;
+ (id)_roundedRectBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withRoundedCorners:(unsigned long long)corners cornerRadius:(double)radius segments:(int)segments;
+ (id)_roundedRectBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withRoundedCorners:(unsigned long long)corners cornerRadius:(double)radius segments:(int)segments legacyCorners:(BOOL)corners;
+ (id)_bezierPathWithPillRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadius:(double)radius;
+ (id)_continuousRoundedRectBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withRoundedCorners:(unsigned long long)corners cornerRadius:(struct CGSize { double x0; double x1; })radius segments:(int)segments;
+ (id)_continuousRoundedRectBezierPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })path withRoundedCorners:(unsigned long long)corners cornerRadii:(id)radii segments:(int)segments smoothPillShapes:(BOOL)shapes;

/* instance methods */
- (id)init;
- (id)_initWithCGMutablePath:(struct CGPath *)path;
- (void)dealloc;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isEqual:(id)equal;
- (void)moveToPoint:(struct CGPoint { double x0; double x1; })point;
- (void)addLineToPoint:(struct CGPoint { double x0; double x1; })point;
- (void)addCurveToPoint:(struct CGPoint { double x0; double x1; })point controlPoint1:(struct CGPoint { double x0; double x1; })point1 controlPoint2:(struct CGPoint { double x0; double x1; })point2;
- (void)addQuadCurveToPoint:(struct CGPoint { double x0; double x1; })point controlPoint:(struct CGPoint { double x0; double x1; })point;
- (void)addArcWithCenter:(struct CGPoint { double x0; double x1; })center radius:(double)radius startAngle:(double)angle endAngle:(double)angle clockwise:(BOOL)clockwise;
- (void)appendPath:(id)path;
- (void)applyTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)closePath;
- (void)removeAllPoints;
- (void)_invalidatePathMetadata;
- (void)_invalidatePathMetadataIncludingCornerRadius:(BOOL)radius;
- (id)bezierPathByReversingPath;
- (BOOL)isEmpty;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })point;
- (void)setLineDash:(const double *)dash count:(long long)count phase:(double)phase;
- (void)getLineDash:(double *)dash count:(long long *)count phase:(double *)phase;
- (void)fill;
- (void)stroke;
- (void)fillWithBlendMode:(int)mode alpha:(double)alpha;
- (void)strokeWithBlendMode:(int)mode alpha:(double)alpha;
- (void)addClip;
- (struct CGPath *)_mutablePath;
- (struct CGPath *)_createMutablePathByDecodingData:(id)data;
- (void)_addRoundedCornerWithTrueCorner:(struct CGPoint { double x0; double x1; })corner radius:(struct CGSize { double x0; double x1; })radius corner:(unsigned long long)corner clockwise:(BOOL)clockwise;
- (void)_addRoundedCornerWithTrueCorner:(struct CGPoint { double x0; double x1; })corner radius:(struct CGSize { double x0; double x1; })radius corner:(unsigned long long)corner clockwise:(BOOL)clockwise leadInIsContinuous:(BOOL)continuous leadOutIsContinuous:(BOOL)continuous;
- (id)description;
- (id)_objcCodeDescription;
- (struct CGPath *)_pathRef;
- (void)lineToPoint:(struct CGPoint { double x0; double x1; })point;
- (void)clip;
- (void)appendBezierPath:(id)path;
- (void)appendBezierPathWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)appendBezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)appendBezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { double x0; double x1; })center radius:(double)radius startAngle:(double)angle endAngle:(double)angle clockwise:(BOOL)clockwise;
- (id)_bezierPathConvertedFromCoordinateSpace:(id)space toCoordinateSpace:(id)space;
- (BOOL)_isRoundedRect;
- (double)_cornerRadius;
- (BOOL)_hasContinuousCorners;
- (unsigned long long)_cornerMask;
@end

#endif /* UIBezierPath_h */
