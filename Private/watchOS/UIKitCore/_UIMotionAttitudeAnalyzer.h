//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UIMotionAttitudeAnalyzer_h
#define _UIMotionAttitudeAnalyzer_h
@import Foundation;

#include "_UIMotionAnalyzer.h"
#include "UILabel.h"
#include "UIView.h"
#include "UIWindow.h"
#include "_UISettingsKeyObserver-Protocol.h"

@class BOOL *, NSString;

@interface _UIMotionAttitudeAnalyzer : _UIMotionAnalyzer<_UISettingsKeyObserver> {
  /* instance variables */
  double _smoothingDegree;
  double _referenceShiftSpeed;
  double _distanceMultiplier;
  BOOL _hasReferenceQuaternion;
  union _GLKQuaternion { struct { float x; float y; float z; float w; } x0; struct { union _GLKVector3 { struct { float x; float y; float z; } x0; struct { float r; float g; float b; } x1; struct { float s; float t; float p; } x2; float x[3] v; } v; float s; } x1; float x[4] q; } _referenceQuaternion;
  union _GLKQuaternion { struct { float x; float y; float z; float w; } x0; struct { union _GLKVector3 { struct { float x; float y; float z; } x0; struct { float r; float g; float b; } x1; struct { float s; float t; float p; } x2; float x[3] v; } v; float s; } x1; float x[4] q; } _absoluteQuaternion;
  double _lastUpdate;
  double _idleStartTime;
  struct UIOffset { double horizontal; double vertical; } _idleStartOffset;
  double _jumpThreshold;
  double _idleLeeway;
  double _secondsBeforeIdle;
  double _lockValue;
  double _lockStrength;
  UIWindow *_diagnosticsWindow;
  UILabel *_idleIndicator;
  UIView *_horizontalLockIndicator;
  UIView *_verticalLockIndicator;
  BOOL _hasHistory;
  struct UIOffset { double horizontal; double vertical; } _lastAppliedViewerOffset;
  union _GLKQuaternion { struct { float x; float y; float z; float w; } x0; struct { union _GLKVector3 { struct { float x; float y; float z; } x0; struct { float r; float g; float b; } x1; struct { float s; float t; float p; } x2; float x[3] v; } v; float s; } x1; float x[4] q; } _lastAppliedRelativeQuaternion;
  BOOL _isApplyingHysteresis;
  union _GLKQuaternion { struct { float x; float y; float z; float w; } x0; struct { union _GLKVector3 { struct { float x; float y; float z; } x0; struct { float r; float g; float b; } x1; struct { float s; float t; float p; } x2; float x[3] v; } v; float s; } x1; float x[4] q; } _relativeQuaternionOnHysteresisEntry;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithSettings:(id)settings;
- (void)dealloc;
- (void)updateWithEvent:(id)event;
- (void)reset;
- (void)_updateSmoothedOffsetForRawOffset:(struct UIOffset { double x0; double x1; })offset;
- (void)_updateAcceleratedOutputRangeFixingOffset:(struct UIOffset { double x0; double x1; })offset;
- (struct UIOffset { double x0; double x1; })_currentRawOffset:(union _GLKQuaternion { struct { float x0; float x1; float x2; float x3; } x0; struct { union _GLKVector3 { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; float x3[3] } x0; float x1; } x1; float x2[4] })offset;
- (void)_updateReferenceAttitude:(union _GLKQuaternion { struct { float x0; float x1; float x2; float x3; } x0; struct { union _GLKVector3 { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; float x3[3] } x0; float x1; } x1; float x2[4] })attitude timestamp:(double)timestamp;
- (float)_referenceShiftRadiansPerSecondForAngle:(float)angle;
- (union _GLKQuaternion { struct { float x0; float x1; float x2; float x3; } x0; struct { union _GLKVector3 { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; float x3[3] } x0; float x1; } x1; float x2[4] })_relativeQuaternion;
- (void)_shiftReferenceToYieldRelativeQuaternion:(union _GLKQuaternion { struct { float x0; float x1; float x2; float x3; } x0; struct { union _GLKVector3 { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; float x3[3] } x0; float x1; } x1; float x2[4] })quaternion;
- (void)_resetDirectionalLockWithViewerOffset:(struct UIOffset { double x0; double x1; })offset;
- (long long)_directionLockStatus;
- (double)_directionLockStrength;
- (void)_updateIdleStateForRawOffset:(struct UIOffset { double x0; double x1; })offset timestamp:(double)timestamp;
- (BOOL)_isIdleGivenTimestamp:(double)timestamp;
- (BOOL)applyHysteresisWithReceivedEventTimestamp:(double)timestamp timeSinceLastNewMotionEvent:(double)event slowUpdatesEnabled:(BOOL)enabled returningShouldToggleSlowUpdates:(BOOL *)updates logger:(id)logger;
- (BOOL)_shouldSuspendApplicationForHysteresisGivenNewViewerOffset:(struct UIOffset { double x0; double x1; })offset wasSuspendingApplicationForHysteresis:(BOOL)hysteresis;
- (void)updateHistory;
- (void)resetHysteresis;
- (void)settings:(id)settings changedValueForKey:(id)key;
- (void)_updateSettings;
- (void)_showIdleUI:(BOOL)ui;
- (void)_updateDirectionalLockIndicators;
- (void)_createIdleIndicator;
- (void)_tearDownIdleIndicator;
- (void)_createDirectionLockIndicators;
- (void)_tearDownDirectionLockIndicators;
- (void)_createDiagnosticsWindow;
- (void)_tearDownDiagnosticsWindow;
@end

#endif /* _UIMotionAttitudeAnalyzer_h */
