//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef _UISlideriOSVisualElement_h
#define _UISlideriOSVisualElement_h
@import Foundation;

#include "UIView.h"
#include "UIImageView.h"
#include "UISlider.h"
#include "UISliderDataModel.h"
#include "UIView.h"
#include "_UISliderVisualElement-Protocol.h"

@class NSArray, NSString;

@interface _UISlideriOSVisualElement : UIView<_UISliderVisualElement> {
  /* instance variables */
  UIImageView *_innerThumbView;
  UIImageView *_minValueImageView;
  UIImageView *_maxValueImageView;
  UIImageView *_thumbView;
  UIImageView *_minTrackView;
  UIImageView *_maxTrackView;
  UIView *_minTrackClipView;
  UIView *_maxTrackClipView;
  struct { unsigned int x :1 animating; unsigned int x :1 preparingToAnimate; unsigned int x :1 overridesModifiedTrackRect; } _sliderFlags;
  double _hitOffset;
  UIView *_thumbViewNeue;
  NSArray *_trackColors;
  BOOL _trackIsArtworkBased;
  BOOL _thumbIsArtworkBased;
  BOOL _maxColorIsValid;
}

@property (weak, nonatomic) UISlider *slider;
@property (retain, nonatomic) UISliderDataModel *data;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)_modernThumbImageWithTraitCollection:(id)collection tintColor:(id)color;
+ (struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGSize { double x0; double x1; } x1; double x2; double x3; })drawingMetricsForPlatform;

/* instance methods */
- (id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)_listenForContentSizeCategoryChangesIfNecessary;
- (void)_contentSizeCategoryChanged:(id)changed;
- (void)_bounceMinMaxValueImageViewsIfNeeded;
- (id)createThumbViewNeue;
- (void)_initImages;
- (void)_initSubviews;
- (double)_cornerRadiusForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_buildTrackArtwork;
- (void)_rebuildControlThumb:(BOOL)thumb track:(BOOL)track;
- (void)dealloc;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (void)didSetThumbImageForState:(unsigned long long)state;
- (id)thumbTintColor;
- (void)didSetThumbTintColor;
- (void)didSetMinimumTrackImageForState:(unsigned long long)state;
- (void)_updateMinimumTrackTintColor;
- (void)didSetMinimumTrackTintColor;
- (void)didSetMaximumTrackImageForState:(unsigned long long)state;
- (void)didSetMaximumTrackTintColor;
- (void)didSetMinimumValueImage;
- (void)didSetMaximumValueImage;
- (id)maximumValueImage;
- (void)tintColorDidChange;
- (id)currentThumbImage;
- (id)currentMinimumTrackImage;
- (id)currentMaximumTrackImage;
- (unsigned long long)state;
- (void)didUpdateTraitCollection;
- (void)didUpdateExpansionFactor;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })minimumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })maximumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trackRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (double)thumbDimensionNeue;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds trackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect value:(float)value;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)didPerformLayout;
- (void)_setSliderNeedsLayout;
- (void)_traitCollectionDidChangeInternal:(const struct _UITraitCollectionChangeDescription { id x0; id x1; id x2; BOOL x3; struct _UITraitCollectionTraitChanges { BOOL x0; BOOL x1; } x4; } *)internal;
- (void)_updateMaxTrackColorForInitialization:(BOOL)initialization;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_modifiedTrackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_layoutSubviewsForBoundsChange:(BOOL)change;
- (void)_updateAppearanceForEnabled:(BOOL)enabled;
- (void)setValue:(float)value animated:(BOOL)animated;
- (void)_setValue:(float)value andSendAction:(BOOL)action;
- (void)_sliderAnimationWillStart;
- (void)_sliderAnimationDidStop:(BOOL)stop;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (BOOL)cancelMouseTracking;
- (BOOL)_shouldBeginTrackingAtPoint:(struct CGPoint { double x0; double x1; })point pointInKnob:(struct CGPoint { double x0; double x1; } *)knob inKnob:(BOOL *)knob;
- (BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
- (BOOL)continueTrackingWithTouch:(id)touch withEvent:(id)event;
- (void)endTrackingWithTouch:(id)touch withEvent:(id)event;
- (void)_controlTouchBegan:(id)began withEvent:(id)event;
- (void)_controlTouchMoved:(id)moved withEvent:(id)event;
- (void)_controlTouchEnded:(id)ended withEvent:(id)event;
- (BOOL)cancelTouchTracking;
- (BOOL)isAnimatingValueChange;
- (void)showValueDidChange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })valueTextRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)createThumbView;
- (void)didSetThumbImageForStates;
- (void)didSetMinimumTrackImageForStates;
- (void)didSetMaximumTrackImageForStates;
- (void)didSetThumbEnabled;
- (void)didChangeMinimumTrackVisibleWithDuration:(double)duration;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })thumbHitEdgeInsets;
- (id)minTrackView;
- (id)maxTrackView;
- (id)_minTrackClipView;
- (id)_maxTrackClipView;
- (void)didSetEnabled;
- (void)didSetHighlighted;
- (void)didSetSelected;
- (void)didSetContinuous;
- (void)didSetShowValue;
- (void)didSetValues;
- (id)maxValueImageView;
- (id)minValueImageView;
- (id)thumbView;
- (id)thumbViewNeue;
@end

#endif /* _UISlideriOSVisualElement_h */
