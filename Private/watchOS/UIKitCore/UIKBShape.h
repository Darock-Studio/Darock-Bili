//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIKBShape_h
#define UIKBShape_h
@import Foundation;

#include "NSCoding-Protocol.h"
#include "NSCopying-Protocol.h"
#include "UIKBGeometry.h"
#include "UIKBShape.h"

@interface UIKBShape : NSObject<NSCoding, NSCopying> {
  /* instance variables */
  UIKBGeometry *m_geometry;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } m_frame;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } m_paddedFrame;
  unsigned long long m_concaveCorner;
  struct CGSize { double width; double height; } m_concaveCornerOffset;
  unsigned long long m_uid;
  BOOL m_scaled;
  UIKBShape *m_originalShape;
}

@property (nonatomic) BOOL scaled;
@property (retain, nonatomic) UIKBShape *originalShape;
@property (retain, nonatomic) UIKBGeometry *geometry;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } paddedFrame;
@property (nonatomic) unsigned long long concaveCorner;
@property (nonatomic) struct CGSize { double x0; double x1; } concaveCornerOffset;
@property (readonly, nonatomic) unsigned long long uid;

/* class methods */
+ (id)shape;
+ (id)shapeByCombining:(id)combining withShape:(id)shape;
+ (id)shapeByResizingShape:(id)shape byAmount:(struct CGSize { double x0; double x1; })amount;

/* instance methods */
- (id)init;
- (id)initWithGeometry:(id)geometry frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame paddedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithGeometry:(id)geometry frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame paddedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame concaveCorner:(unsigned long long)corner concaveCornerOffset:(struct CGSize { double x0; double x1; })offset;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)makeLikeOther:(id)other;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)setConcaveCornerSize:(struct CGSize { double x0; double x1; })size;
- (BOOL)isEmpty;
- (BOOL)shouldUseGeometry;
- (id)description;
- (void)addRectFrom:(id)from;
- (void)addRectFrom:(id)from widthFraction:(double)fraction heightFraction:(double)fraction adjustOriginXFactor:(double)xfactor adjustOriginYFactor:(double)yfactor;
- (void)addRectFrom:(id)from widthFraction:(double)fraction heightFraction:(double)fraction adjustOriginXFactor:(double)xfactor adjustOriginYFactor:(double)yfactor absoluteOriginFactors:(BOOL)factors;
- (void)addRectFrom:(id)from mergeActionFactors:(id)factors inRightToLeft:(BOOL)left;
- (void)scaleWidth:(double)width;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scaleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inYAxis:(BOOL)yaxis;
- (void)scaleIfNeeded:(double)needed onlyYAxis:(BOOL)yaxis;
@end

#endif /* UIKBShape_h */
