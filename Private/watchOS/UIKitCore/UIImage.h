//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIImage_h
#define UIImage_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSItemProviderReading-Protocol.h"
#include "NSItemProviderWriting-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "UIGraphicsImageRendererFormat.h"
#include "UIImage.h"
#include "UIImageAsset.h"
#include "UIImageConfiguration.h"
#include "UIImageSymbolConfiguration.h"
#include "UITraitCollection.h"
#include "_UIImageContent.h"
#include "_UIMenuImageOrName-Protocol.h"

@class CIImage, NSArray, NSMapTable, NSString;

@interface UIImage : NSObject<NSItemProviderReading, NSItemProviderWriting, _UIMenuImageOrName, NSCopying, NSSecureCoding> {
  /* instance variables */
  NSMapTable *_siblingImages;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _contentInsets;
  struct CGSize { double width; double height; } _sizeInPixels;
  double _capHeight;
  struct { unsigned int x :1 named; unsigned int x :1 asksContentForImageOrientation; unsigned int x :3 imageOrientation; unsigned int x :1 cached; unsigned int x :1 hasPattern; unsigned int x :1 isCIImage; unsigned int x :2 renderingMode; unsigned int x :1 suppressesAccessibilityHairlineThickening; unsigned int x :1 isSymbolConfiguration; unsigned int x :1 hasBaseline; unsigned int x :1 isBaselineExplicit; unsigned int x :1 areContentInsetsExplicit; unsigned int x :1 areAlignmentRectInsetsExplicit; unsigned int x :1 flipsForRightToLeftLayoutDirection; unsigned int x :1 hasCapHeight; } _imageFlags;
  _UIImageContent *_content;
}

@property (readonly, nonatomic) long long leftCapWidth;
@property (readonly, nonatomic) long long topCapHeight;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;
@property (readonly, nonatomic) BOOL fromStatusBarImageProvider;
@property (readonly, nonatomic) UIImage *_asMenuElementImage;
@property (readonly, nonatomic) NSString *_asMenuElementImageName;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _subimageInsets;
@property (readonly, nonatomic) UIImageSymbolConfiguration *_automaticSymbolConfiguration;
@property (retain, nonatomic) UIImageAsset *imageAsset;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _contentInsets;
@property (readonly, nonatomic) BOOL _hasContentInsets;
@property (readonly, nonatomic) double _capHeight;
@property (readonly, nonatomic) struct CGPDFPage * CGPDFPage;
@property (readonly, nonatomic) struct CGSVGDocument * CGSVGDocument;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } size;
@property (readonly, nonatomic) struct CGImage * CGImage;
@property (readonly, nonatomic) CIImage *CIImage;
@property (readonly, nonatomic) long long imageOrientation;
@property (readonly, nonatomic) double scale;
@property (readonly, nonatomic) BOOL symbolImage;
@property (readonly, nonatomic) NSArray *images;
@property (readonly, nonatomic) double duration;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } capInsets;
@property (readonly, nonatomic) long long resizingMode;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } alignmentRectInsets;
@property (readonly, nonatomic) long long renderingMode;
@property (readonly, nonatomic) UIGraphicsImageRendererFormat *imageRendererFormat;
@property (readonly, copy, nonatomic) UITraitCollection *traitCollection;
@property (readonly, nonatomic) BOOL flipsForRightToLeftLayoutDirection;
@property (readonly, nonatomic) double baselineOffsetFromBottom;
@property (readonly, nonatomic) BOOL hasBaseline;
@property (readonly, copy, nonatomic) UIImageConfiguration *configuration;
@property (readonly, copy, nonatomic) UIImageSymbolConfiguration *symbolConfiguration;
@property (readonly, nonatomic) BOOL isHighDynamicRange;

/* class methods */
+ (id)readableTypeIdentifiersForItemProvider;
+ (id)objectWithItemProviderData:(id)data typeIdentifier:(id)identifier error:(id *)error;
+ (id)writableTypeIdentifiersForItemProvider;
+ (struct CGSize { double x0; double x1; })_legibilityImageSizeForSize:(struct CGSize { double x0; double x1; })size style:(long long)style;
+ (id)_tintedImageForSize:(struct CGSize { double x0; double x1; })size withTint:(id)tint effectsImage:(id)image maskImage:(id)image style:(int)style;
+ (id)_tintedImageForSize:(struct CGSize { double x0; double x1; })size withTint:(id)tint maskImage:(id)image effectsImage:(id)image style:(int)style;
+ (id)_tintedImageForSize:(struct CGSize { double x0; double x1; })size withTint:(id)tint maskImage:(id)image effectsImage:(id)image style:(int)style edgeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
+ (id)_cachedImageForKey:(id)key fromBlock:(id /* block */)block;
+ (id)_systemImageNamed:(id)named variant:(unsigned long long)variant;
+ (id)_systemImageNamed:(id)named variant:(unsigned long long)variant withConfiguration:(id)configuration;
+ (id)_systemImageNamed:(id)named shape:(long long)shape;
+ (id)_systemImageNamed:(id)named shape:(long long)shape fill:(long long)fill;
+ (id)_systemImageNamed:(id)named shape:(long long)shape fill:(long long)fill withConfiguration:(id)configuration;
+ (id)actionsImage;
+ (id)addImage;
+ (id)removeImage;
+ (id)checkmarkImage;
+ (id)strokedCheckmarkImage;
+ (int)_iconVariantForUIApplicationIconFormat:(int)format scale:(double *)scale;
+ (int)_iconVariantForUIApplicationIconFormat:(int)format idiom:(long long)idiom scale:(double *)scale;
+ (id)_applicationIconImageForBundleIdentifier:(id)identifier format:(int)format;
+ (id)_applicationIconImageForBundleIdentifier:(id)identifier format:(int)format scale:(double)scale;
+ (id)_iconForResourceProxy:(id)proxy variant:(int)variant variantsScale:(double)scale;
+ (id)_iconForResourceProxy:(id)proxy variant:(int)variant options:(int)options variantsScale:(double)scale;
+ (id)_iconForResourceProxy:(id)proxy format:(int)format;
+ (id)_iconForResourceProxy:(id)proxy format:(int)format options:(unsigned long long)options;
+ (id)_ISImageDescriptorNameForUIApplicationIconFormat:(int)format;
+ (void)_flushSharedImageCache;
+ (void)_flushCache:(id)cache;
+ (unsigned long long)_scaleDefinedByPath:(id)path;
+ (long long)_idiomDefinedByPath:(id)path;
+ (id)imageAtPath:(id)path;
+ (void)initialize;
+ (id)imageNamed:(id)named;
+ (id)imageNamed:(id)named withConfiguration:(id)configuration;
+ (id)_imageNamed:(id)named withTrait:(id)trait;
+ (id)imageNamed:(id)named inBundle:(id)bundle compatibleWithTraitCollection:(id)collection;
+ (id)imageNamed:(id)named inBundle:(id)bundle withConfiguration:(id)configuration;
+ (id)_systemImageNamed:(id)named;
+ (id)__systemImageNamed:(id)named;
+ (id)__systemImageNamedSwift:(id)swift;
+ (id)__systemImageNamed:(id)named compatibleWithTraitCollection:(id)collection;
+ (id)__systemImageNamed:(id)named withConfiguration:(id)configuration;
+ (id)systemImageNamed:(id)named;
+ (id)systemImageNamed:(id)named compatibleWithTraitCollection:(id)collection;
+ (id)systemImageNamed:(id)named withConfiguration:(id)configuration;
+ (id)_systemImageNamed:(id)named withConfiguration:(id)configuration;
+ (id)_systemImageNamed:(id)named withConfiguration:(id)configuration allowPrivate:(BOOL)private;
+ (id)systemImageNamed:(id)named variableValue:(double)value withConfiguration:(id)configuration;
+ (id)_systemImageNamed:(id)named variableValue:(double)value withConfiguration:(id)configuration;
+ (id)imageNamed:(id)named inBundle:(id)bundle variableValue:(double)value withConfiguration:(id)configuration;
+ (id)_systemImageNamed:(id)named fallback:(id)fallback;
+ (id)_systemImageNamed:(id)named fallback:(id)fallback withConfiguration:(id)configuration;
+ (id)_generateCompositedSymbolImageForAsset:(id)asset usingLayers:(id)layers configuration:(id)configuration alignUsingBaselines:(BOOL)baselines;
+ (id)imageWithContentsOfFile:(id)file;
+ (id)imageWithData:(id)data;
+ (id)imageWithData:(id)data scale:(double)scale;
+ (id)imageWithCGImage:(struct CGImage *)cgimage;
+ (id)imageWithCGImage:(struct CGImage *)cgimage scale:(double)scale orientation:(long long)orientation;
+ (id)imageWithCIImage:(id)ciimage;
+ (id)imageWithCIImage:(id)ciimage scale:(double)scale orientation:(long long)orientation;
+ (void)_loadImageFromURL:(id)url completionHandler:(id /* block */)handler;
+ (BOOL)supportsSecureCoding;
+ (struct CGSize { double x0; double x1; })_applyOrientation:(long long)orientation toContentSizeInPixels:(struct CGSize { double x0; double x1; })pixels;
+ (long long)_mirroredImageOrientationForOrientation:(long long)orientation;
+ (long long)_horizontallyFlippedOrientationForOrientation:(long long)orientation;
+ (id)_imageWithCGPDFPage:(struct CGPDFPage *)cgpdfpage;
+ (id)_imageWithCGPDFPage:(struct CGPDFPage *)cgpdfpage scale:(double)scale orientation:(long long)orientation;
+ (id)_imageWithCGSVGDocument:(struct CGSVGDocument *)cgsvgdocument;
+ (id)_imageWithCGSVGDocument:(struct CGSVGDocument *)cgsvgdocument scale:(double)scale orientation:(long long)orientation;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_edgeInsetsForStylePresetNames:(id)names scale:(double)scale traitCollection:(id)collection;
+ (id)animatedImageNamed:(id)named duration:(double)duration;
+ (id)_animatedImageNamed:(id)named inBundle:(id)bundle compatibleWithTraitCollection:(id)collection duration:(double)duration;
+ (id)animatedResizableImageNamed:(id)named capInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets duration:(double)duration;
+ (id)animatedResizableImageNamed:(id)named capInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets resizingMode:(long long)mode duration:(double)duration;
+ (id)_animatedResizableImageNamed:(id)named inBundle:(id)bundle compatibleWithTraitCollection:(id)collection capInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets resizingMode:(long long)mode duration:(double)duration;
+ (id)animatedImageWithImages:(id)images duration:(double)duration;
+ (void)_clearAssetCaches;
+ (void)_dropResourceReferencesForURL:(id)url;
+ (BOOL)_isCGImageAlphaMask:(struct CGImage *)mask;
+ (id)kitImageNamed:(id)named;
+ (id)_kitImageNamed:(id)named withTrait:(id)trait;
+ (id)imageNamed:(id)named inBundle:(id)bundle;
+ (id)symbolImageNamed:(id)named;
+ (id)symbolImageNamed:(id)named size:(long long)size weight:(long long)weight compatibleWithFontSize:(double)size;
+ (id)symbolImageNamed:(id)named size:(long long)size weight:(long long)weight compatibleWithFontSize:(double)size traitCollection:(id)collection inBundle:(id)bundle;
+ (id)preferredSymbolImageNamed:(id)named;
+ (id)preferredSymbolImageNamed:(id)named size:(long long)size compatibleWithTextStyle:(id)style;
+ (id)preferredSymbolImageNamed:(id)named size:(long long)size compatibleWithTextStyle:(id)style traitCollection:(id)collection inBundle:(id)bundle;
+ (id)symbolImageNamed:(id)named size:(long long)size compatibleWithFont:(id)font;
+ (id)symbolImageNamed:(id)named size:(long long)size compatibleWithFont:(id)font traitCollection:(id)collection inBundle:(id)bundle;
+ (id)_backgroundGradientWithStartColor:(id)color andEndColor:(id)color;
+ (id)_defaultBackgroundGradient;
+ (id)imageFromAlbumArtData:(id)data height:(int)height width:(int)width bytesPerRow:(int)row cache:(BOOL)cache;
+ (id)imageWithContentsOfCPBitmapFile:(id)file flags:(int)flags;
+ (id)_deviceSpecificImageNamed:(id)named;
+ (id)_deviceSpecificImageNamed:(id)named inBundle:(id)bundle;
+ (id)_noiseImage;

/* instance methods */
- (BOOL)isFromStatusBarImageProvider;
- (id)initWithItemProviderData:(id)data typeIdentifier:(id)identifier error:(id *)error;
- (id)loadDataWithTypeIdentifier:(id)identifier forItemProviderCompletionHandler:(id /* block */)handler;
- (id)_imageForLegibilityStyle:(long long)style;
- (id)_imageForLegibilitySettings:(id)settings strength:(double)strength;
- (id)_imageForLegibilitySettings:(id)settings strength:(double)strength alphaOnly:(BOOL)only;
- (void)_drawImageForLegibilityStyle:(long long)style size:(struct CGSize { double x0; double x1; })size;
- (void)_drawImageForLegibilitySettings:(id)settings strength:(double)strength size:(struct CGSize { double x0; double x1; })size;
- (void)_drawImageForLegibilitySettings:(id)settings strength:(double)strength size:(struct CGSize { double x0; double x1; })size alphaOnly:(BOOL)only;
- (id)_imageWithBrightnessModifiedForLegibilityStyle:(long long)style;
- (id)_applyBackdropViewSettings:(id)settings allowImageResizing:(BOOL)resizing;
- (id)_applyBackdropViewSettings:(id)settings;
- (id)_applyBackdropViewSettings:(id)settings includeTints:(BOOL)tints includeBlur:(BOOL)blur;
- (id)_applyBackdropViewSettings:(id)settings includeTints:(BOOL)tints includeBlur:(BOOL)blur allowImageResizing:(BOOL)resizing;
- (id)_applyBackdropViewStyle:(long long)style includeTints:(BOOL)tints includeBlur:(BOOL)blur;
- (id)_applyBackdropViewStyle:(long long)style includeTints:(BOOL)tints includeBlur:(BOOL)blur graphicsQuality:(long long)quality;
- (id)_applyBackdropViewStyle:(long long)style includeTints:(BOOL)tints includeBlur:(BOOL)blur graphicsQuality:(long long)quality allowImageResizing:(BOOL)resizing;
- (id)_imageByApplyingVariant:(unsigned long long)variant allowNone:(BOOL)none;
- (void)_preheatBitmapData;
- (id)_applicationIconImageForFormat:(int)format precomposed:(BOOL)precomposed;
- (id)_applicationIconImageForFormat:(int)format precomposed:(BOOL)precomposed scale:(double)scale;
- (id)_applicationIconImageForFormat:(int)format precomposed:(BOOL)precomposed idiom:(long long)idiom scale:(double)scale;
- (id)_resizableImageWithCapMask:(int)mask;
- (id)content;
- (id)_swizzleContent:(id)content;
- (void)_setCached:(BOOL)cached;
- (BOOL)_isCached;
- (void)_setNamed:(BOOL)named;
- (BOOL)_isNamed;
- (BOOL)_isInvisibleAndGetIsTranslucent:(BOOL *)translucent;
- (BOOL)_hasVisibleContentInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect atScale:(double)scale;
- (BOOL)_probeIsSeeThrough;
- (id)_bezeledImageWithShadowRed:(double)red green:(double)green blue:(double)blue alpha:(double)alpha fillRed:(double)red green:(double)green blue:(double)blue alpha:(double)alpha drawShadow:(BOOL)shadow;
- (id)_doubleBezeledImageWithExteriorShadowRed:(double)red green:(double)green blue:(double)blue alpha:(double)alpha interiorShadowRed:(double)red green:(double)green blue:(double)blue alpha:(double)alpha fillRed:(double)red green:(double)green blue:(double)blue alpha:(double)alpha;
- (id)_imageScaledToProportion:(double)proportion interpolationQuality:(int)quality;
- (id)_serializedData;
- (id)initWithData:(id)data cache:(BOOL)cache;
- (struct CGImage *)imageRef;
- (void)compositeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect operation:(int)operation fraction:(double)fraction;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })point fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect operation:(int)operation fraction:(double)fraction;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })point operation:(int)operation fraction:(double)fraction;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })point operation:(int)operation;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x0; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x1; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x2; })rects inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x0; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x1; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x2; })rects inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fraction:(double)fraction;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x0; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x1; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x2; })rects inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect operation:(int)operation fraction:(double)fraction;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; })rects inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; })rects inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fraction:(double)fraction;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; })rects inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect operation:(int)operation fraction:(double)fraction;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fraction:(double)fraction;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fraction:(double)fraction operation:(int)operation;
- (id)patternColor;
- (struct CGColor *)_tiledPatternColor;
- (id)stretchableImageWithLeftCapWidth:(long long)width topCapHeight:(long long)height;
- (id)_initWithData:(id)data immediateLoadWithMaxSize:(struct CGSize { double x0; double x1; })size scale:(double)scale renderingIntent:(unsigned long long)intent;
- (id)_initWithData:(id)data immediateLoadWithMaxSize:(struct CGSize { double x0; double x1; })size scale:(double)scale renderingIntent:(unsigned long long)intent cache:(BOOL)cache;
- (BOOL)_isDecompressing;
- (id)_defaultConfiguration;
- (id)_imageWithVariableValue:(double)value;
- (double)variableValue;
- (id)_initWithFilledSystemImageNamed:(id)named fillColor:(id)color;
- (id)_initWithFilledSystemImageNamed:(id)named fillColor:(id)color symbolColor:(id)color;
- (id)_initWithFilledSystemImageNamed:(id)named fillColor:(id)color symbolColor:(id)color withName:(id)name;
- (id)_initWithCompositedSymbolImageLayers:(id)layers name:(id)name;
- (id)_initWithCompositedSymbolImageLayers:(id)layers name:(id)name alignUsingBaselines:(BOOL)baselines;
- (id)init;
- (id)initWithContentsOfFile:(id)file;
- (id)initWithData:(id)data;
- (id)initWithData:(id)data scale:(double)scale;
- (id)initWithCGImage:(struct CGImage *)cgimage;
- (id)initWithCGImage:(struct CGImage *)cgimage scale:(double)scale orientation:(long long)orientation;
- (id)initWithCIImage:(id)ciimage;
- (id)initWithCIImage:(id)ciimage scale:(double)scale orientation:(long long)orientation;
- (id)_initWithContent:(id)content orientation:(long long)orientation;
- (id)_initWithOtherImage:(id)image;
- (void)_configureImage:(id)image assumePreconfigured:(BOOL)preconfigured;
- (id)_imageWithContent:(id)content;
- (BOOL)_canEncodeWithName:(id)name coder:(id)coder;
- (void)_encodeDataWithCoder:(id)coder imageName:(id)name;
- (void)_encodePropertiesWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)dealloc;
- (BOOL)_isCGImageOnly;
- (struct CGSize { double x0; double x1; })_sizeInPixels;
- (long long)_imageOrientationConsideringRTL;
- (long long)_imageOrientationConsideringRTLForUserInterfaceLayoutDirection:(long long)direction;
- (BOOL)_isRTLImage;
- (void)_horizontallyFlipImageOrientation;
- (void)_mirrorImageOrientation;
- (id)imageWithHorizontallyFlippedOrientation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentStretchInPixels;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentRectInPixels;
- (BOOL)_isSubimage;
- (BOOL)_isResizable;
- (BOOL)_isTiledWhenStretchedToSize:(struct CGSize { double x0; double x1; })size;
- (void)_setCapInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)_setSubimageInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)_setAlwaysStretches:(BOOL)stretches;
- (id)_initWithCGPDFPage:(struct CGPDFPage *)cgpdfpage;
- (id)_initWithCGPDFPage:(struct CGPDFPage *)cgpdfpage scale:(double)scale orientation:(long long)orientation;
- (struct CGPDFPage *)_CGPDFPage;
- (BOOL)_isPDFVector;
- (struct CGSize { double x0; double x1; })_CGPDFPageSize;
- (double)_scaleFromPDF;
- (struct CGSize { double x0; double x1; })_sizeInPixelsFromPDF;
- (id)_initWithCGSVGDocument:(struct CGSVGDocument *)cgsvgdocument;
- (id)_initWithCGSVGDocument:(struct CGSVGDocument *)cgsvgdocument scale:(double)scale orientation:(long long)orientation;
- (struct CGSVGDocument *)_CGSVGDocument;
- (BOOL)_isSVGVector;
- (struct CGSize { double x0; double x1; })_CGSVGDocumentSize;
- (id)resizableImageWithCapInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)resizableImageWithCapInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets resizingMode:(long long)mode;
- (id)imageWithRenderingMode:(long long)mode;
- (void)_setRenderingMode:(long long)mode;
- (long long)_effectiveRenderingModeWithSymbolConfiguration:(id)configuration;
- (id)imageRestrictedToStandardDynamicRange;
- (id)_imageWithStylePresets:(id)presets tintColor:(id)color traitCollection:(id)collection;
- (struct CGSize { double x0; double x1; })_sizeWithHairlineThickening:(BOOL)thickening renderingEffects:(unsigned long long)effects forTraitCollection:(id)collection;
- (void)_setSuppressesAccessibilityHairlineThickening:(BOOL)thickening;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_inverseAlignmentRectInsets;
- (void)_setAlignmentRectInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)_setAlignmentRectInsetsExplicitly:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })explicitly;
- (id)imageWithAlignmentRectInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (BOOL)_hasExplicitAlignmentRectInsets;
- (BOOL)_isSymbolImage;
- (BOOL)isSymbolImage;
- (BOOL)_isColoredSymbolImage;
- (BOOL)_isMultiColorSymbolImage;
- (BOOL)_isHierarchicalColorSymbolImage;
- (unsigned long long)_numberOfHierarchyLayers;
- (id)_outlinePath;
- (BOOL)_isSameSymbolImageExceptVariableValue:(id)value;
- (double)_baselineOffsetFromBottom;
- (double)__baselineOffsetFromBottom;
- (void)_setBaselineOffsetFromBottom:(double)bottom;
- (void)_setBaselineOffsetFromBottomExplicitly:(double)explicitly;
- (void)_setCapHeight:(double)height;
- (id)imageWithBaselineOffsetFromBottom:(double)bottom;
- (id)imageWithoutBaseline;
- (void)_removeBaseline;
- (void)_removeBaselineExplicitly;
- (BOOL)_hasBaseline;
- (BOOL)_hasExplicitBaseline;
- (id)_imageWithSymbolMetricsFromNamedVectorGlyph:(id)glyph;
- (void)_setSymbolMetricsFromNamedVectorGlyph:(id)glyph;
- (double)midlineOffsetFromCenter;
- (void)_setMidlineOffsetFromCenter:(double)center;
- (id)imageWithMidlineOffsetFromCenter:(double)center;
- (id)imageWithoutMidline;
- (BOOL)hasMidline;
- (id)imageWithSymbolConfiguration:(id)configuration;
- (id)imageByApplyingSymbolConfiguration:(id)configuration;
- (id)imageWithConfiguration:(id)configuration;
- (void)_setConfiguration:(id)configuration;
- (id)imageWithTintColor:(id)color renderingMode:(long long)mode;
- (id)imageWithTintColor:(id)color;
- (id)_flatImageWithColor:(id)color;
- (id)_flatImageWithWhite:(double)white alpha:(double)alpha;
- (id)flattenedImageWithColor:(id)color;
- (id)_imageTintedWithColor:(id)color renderingMode:(long long)mode withUpdatedCGImage:(BOOL)cgimage;
- (id)_colorForFlattening;
- (void)_setColorForFlattening:(id)flattening;
- (id)_colorForName:(id)name withTraitCollection:(id)collection;
- (id)_imageWithContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)_imageWithContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets withUpdatedCGImage:(BOOL)cgimage;
- (void)_setContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)_setContentInsetsExplicitly:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })explicitly;
- (BOOL)_hasExplicitContentInsets;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })contentInsets;
- (BOOL)hasContentInsets;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding;
- (BOOL)hasPadding;
- (id)imageWithContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)imageWithPadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding;
- (id)imageByAddingContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)imageByAddingPadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding;
- (void)drawAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)drawAtPoint:(struct CGPoint { double x0; double x1; })point blendMode:(int)mode alpha:(double)alpha;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect blendMode:(int)mode alpha:(double)alpha;
- (void)drawAsPatternInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)_primitiveImageAsset;
- (id)_imageWithImageAsset:(id)asset;
- (id)_imageWithImageAsset:(id)asset configuration:(id)configuration;
- (BOOL)isEqual:(id)equal;
- (id)_metricsDescription;
- (id)_identityDescription;
- (id)imageFlippedForRightToLeftLayoutDirection;
- (void)_setIsFlippedInRightToLeft;
- (BOOL)_isAlphaMask;
- (BOOL)_representsLayeredImage;
- (BOOL)_representsCIImageWhichSupportsIOSurfaceRendering;
- (id)initWithContentsOfFile:(id)file cache:(BOOL)cache;
- (id)_initWithContentsOfLCRFile:(id)lcrfile;
- (id)_initWithData:(id)data preserveScale:(BOOL)scale cache:(BOOL)cache;
- (id)_initWithData:(id)data preserveScale:(BOOL)scale cache:(BOOL)cache scale:(double)scale;
- (id)_initWithData:(id)data preserveScale:(BOOL)scale;
- (id)_initWithData:(id)data scale:(double)scale;
- (id)initWithCGImage:(struct CGImage *)cgimage imageOrientation:(long long)orientation;
- (id)_initWithIOSurface:(struct __IOSurface *)iosurface scale:(double)scale orientation:(long long)orientation;
- (id)_initWithIOSurface:(struct __IOSurface *)iosurface imageOrientation:(long long)orientation;
- (id)initWithIOSurface:(struct __IOSurface *)iosurface;
- (struct __IOSurface *)ioSurface;
- (struct __IOSurface *)_copyIOSurface;
- (BOOL)writeToCPBitmapFile:(id)file flags:(int)flags;
- (id)_stretchableImageWithCapInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)_resizableImageWithSubimageInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets resizeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; })_calculateStatistics;
- (struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; })_calculateEdgeStatistics;
- (struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; })_calculateStatisticsOfEdge:(BOOL)edge;
- (id)_imagePaddedByInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)_rasterizedImage;
- (id)_imageWithSize:(struct CGSize { double x0; double x1; })size;
- (id)_imageWithSize:(struct CGSize { double x0; double x1; })size content:(id)content;
- (id)_imageThatSuppressesAccessibilityHairlineThickening;
- (BOOL)_suppressesAccessibilityHairlineThickening;
- (id)imageByPreparingForDisplay;
- (void)prepareForDisplayWithCompletionHandler:(id /* block */)handler;
- (id)imageByPreparingThumbnailOfSize:(struct CGSize { double x0; double x1; })size;
- (void)prepareThumbnailOfSize:(struct CGSize { double x0; double x1; })size completionHandler:(id /* block */)handler;
- (id)_imageByResizingToSize:(struct CGSize { double x0; double x1; })size;
- (id)_imagePreparedForScreen:(id)screen;
- (void)_prepareForScreen:(id)screen completionHandler:(id /* block */)handler;
- (id)_imageWithBitmapRepresentation;
- (void)_imageByCreatingBitmapRepresentationWithCompletionHandler:(id /* block */)handler;
- (void)_setImageAsset:(id)asset;
@end

#endif /* UIImage_h */
