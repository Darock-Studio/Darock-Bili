//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIKBTree_h
#define UIKBTree_h
@import Foundation;

#include "NSCopying-Protocol.h"

@class NSMutableArray, NSMutableDictionary, NSString;

@interface UIKBTree : NSObject<NSCopying>

@property (retain, nonatomic) NSString *effectiveLayoutTag;
@property (nonatomic) int type;
@property (retain, nonatomic) NSString *name;
@property (retain, nonatomic) NSMutableDictionary *properties;
@property (retain, nonatomic) NSMutableArray *subtrees;
@property (retain, nonatomic) NSMutableDictionary *cache;
@property (retain, nonatomic) NSString *layoutTag;
@property (nonatomic) BOOL isFloating;

/* class methods */
+ (BOOL)typeIsPersistent:(int)persistent;
+ (id)uniqueName;
+ (id)treeOfType:(int)type;
+ (id)stringForType:(int)type;
+ (BOOL)shouldSkipCacheString:(id)string;
+ (id)mergeStringForKeyName:(id)name;
+ (id)shapesForControlKeyShapes:(id)shapes options:(int)options;
+ (id)key;
+ (id)keyboard;

/* instance methods */
- (id)nameFromAttributes;
- (id)unhashedName;
- (id)componentName;
- (BOOL)isHashed;
- (id)initWithType:(int)type;
- (id)initWithType:(int)type withName:(id)name withProperties:(id)properties withSubtrees:(id)subtrees withCache:(id)cache;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isSameAsTree:(id)tree;
- (BOOL)isEqualToTree:(id)tree;
- (BOOL)isDuplicateOfTree:(id)tree;
- (BOOL)setObject:(id)object forProperty:(id)property;
- (id)objectForProperty:(id)property;
- (id)stringForProperty:(id)property;
- (long long)intForProperty:(id)property;
- (BOOL)boolForProperty:(id)property;
- (id)numberForProperty:(id)property;
- (id)description;
- (id)recursiveDescription;
- (id)subtreeWithType:(int)type;
- (id)subtreeWithName:(id)name;
- (id)subtreeWithName:(id)name rows:(id)rows;
- (id)subtreesWithProperty:(id)property value:(id)value;
- (int)indexOfSubtree:(id)subtree;
- (BOOL)_needsScaling;
- (void)mergeReturnKey:(id)key withReturnKey:(id)key;
- (void)updateFlickKeycapOnKeys;
- (void)zipGeometries:(BOOL)geometries attributes:(BOOL)attributes;
- (void)zipGeometrySet;
- (void)zipOnlyGeometrySet;
- (void)zipAttributes;
- (long long)_keyCountOnNamedRow:(id)row;
- (void)elaborateLayoutWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (void)elaborateLayoutWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale origin:(struct CGPoint { double x0; double x1; })origin;
- (id)rowSet;
- (id)rowSetOfType:(long long)type;
- (void)updateKeysForType:(long long)type;
- (id)orderedRowsForType:(long long)type;
- (id)_keysForDynamicRows:(id)rows;
- (id)_keysForDynamicRow;
- (long long)rowSetType;
- (void)swapToggleKeys:(id)keys;
- (void)applyDynamicAttributes;
- (BOOL)isLeafType;
- (BOOL)subtreesAreOrdered;
- (id)shape;
- (void)setShape:(id)shape;
- (id)geometry;
- (void)setGeometry:(id)geometry;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_keyplaneFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_originalKeyplaneFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })originalFrame;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })paddedFrame;
- (void)setPaddedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (struct CGPoint { double x0; double x1; })navigationPointOfKey;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keyUnionFramePadded:(BOOL)padded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keyUnionFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keyUnionPaddedFrame;
- (int)visualStyle;
- (void)setVisualStyle:(int)style;
- (struct { unsigned int x0 :6; unsigned int x1 :1; unsigned int x2 :1; unsigned int x3 :8; unsigned int x4 :8; unsigned int x5 :8; })stylingFromVisualStyle;
- (struct { unsigned int x0 :6; unsigned int x1 :1; unsigned int x2 :1; unsigned int x3 :8; unsigned int x4 :8; unsigned int x5 :8; })visualStylingForScreenTraits:(id)traits;
- (struct { unsigned int x0 :6; unsigned int x1 :1; unsigned int x2 :1; unsigned int x3 :8; unsigned int x4 :8; unsigned int x5 :8; })visualStyling;
- (void)setVisualStyling:(struct { unsigned int x0 :6; unsigned int x1 :1; unsigned int x2 :1; unsigned int x3 :8; unsigned int x4 :8; unsigned int x5 :8; })styling;
- (id)cachedKeysByKeyName:(id)name;
- (id)firstCachedKeyWithName:(id)name;
- (id)firstKeyplaneSwitchKey;
- (id)keyplaneSwitchKeys;
- (id)keyplaneSwitchKeysWithoutCurrentKeyplane:(id)keyplane;
- (id)scriptSwitchKey;
- (unsigned long long)numberOfRows;
- (id)_cacheRootNameForKey:(id)key;
- (void)cacheKey:(id)key;
- (id)layoutName;
- (void)precacheLayoutName:(id)name;
- (id)keyForString:(id)string;
- (id)keyplaneForKey:(id)key;
- (void)setAttributes:(id)attributes;
- (void)_addKeylayoutKeys:(id)keys;
- (id)keys;
- (void)addkeyToCachedKeyList:(id)list;
- (void)removeKeyFromCachedKeyList:(id)list;
- (void)removeKeyFromAllCachedLists:(id)lists;
- (id)geometries;
- (id)keyAttributes;
- (void)clearTransientCaches;
- (id)keysOrderedByPositionWithoutZip;
- (id)keysOrderedByPosition;
- (id)keysOrderedByPositionRTL;
- (id)geometriesOrderedByPosition;
- (id)keyByKeyName:(id)name;
- (id)keysByKeyName:(id)name;
- (id)keysWithString:(id)string;
- (id)keysWithInteractionTypes:(id)types;
- (id)keysExcludingEmptyKeys;
- (BOOL)usesAutoShift;
- (id)alternateKeyplaneName;
- (id)gestureKeyplaneName;
- (id)shiftAlternateKeyplaneName;
- (BOOL)isShiftKeyplane;
- (BOOL)isAlphabeticPlane;
- (BOOL)isKanaPlane;
- (BOOL)diacriticForwardCompose;
- (BOOL)shouldSkipCandidateSelection;
- (BOOL)shouldSkipCandidateSelectionForVariants;
- (BOOL)shouldSuppressDragRetest;
- (BOOL)notUseCandidateSelection;
- (BOOL)noLanguageIndicator;
- (BOOL)isShiftKeyPlaneChooser;
- (BOOL)usesAdaptiveKeys;
- (BOOL)usesKeyCharging;
- (BOOL)looksLikeShiftAlternate;
- (BOOL)looksExactlyLikeShiftAlternate;
- (BOOL)isLetters;
- (BOOL)isGenerated;
- (void)setIsGenerated:(BOOL)generated;
- (double)resizingOffset;
- (void)setResizingOffset:(double)offset;
- (long long)nativeIdiom;
- (void)cacheNativeIdiomIfNecessaryForScreenTraits:(id)traits;
- (BOOL)isSplit;
- (double)primaryKeylayoutWidthRatio;
- (double)primaryKeylayoutOffset;
- (int)dragThreshold;
- (id)autolocalizedKeyCacheIterator;
- (BOOL)supportsContinuousPath;
- (BOOL)supportsMultitap;
- (BOOL)supportsType:(long long)type;
- (BOOL)looksLike:(id)like;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)name;
- (id)findLeftMoreKey;
- (void)updateDictationKeyOnNumberPads:(BOOL)pads;
- (id)keysForMergeConditions;
- (void)subsumeDisappearingKeyName:(id)name intoKeyName:(id)name factors:(id)factors inRightToLeft:(BOOL)left;
- (id)mergeKeyNames:(id)names inRightToLeft:(BOOL)left;
- (id)rightSpaceKey;
- (void)clearManualAddedKey;
- (id)keysetCanContainWriteboardKey;
- (id)shapeFromFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame leftPadding:(double)padding rightPadding:(double)padding;
- (BOOL)addMessagesWriteboardKeyOrRomanSwitchIfDismissKey:(BOOL)key;
- (BOOL)addMessagesWriteboardKeyOrRomanSwitchIfNoDismissKey:(BOOL)key;
- (void)addWriteboardKeyToCachedKeyListWithShape:(id)shape rendering:(int)rendering;
- (void)addRomanSwitchToCachedKeyListWithShape:(id)shape rendering:(int)rendering;
- (BOOL)addMessagesWriteboardKeyOrRomanSwitch:(BOOL)switch;
- (void)_mutateKeys:(id)keys scale:(double)scale withShapeOperation:(id /* block */)operation;
- (id)_horizontallyCoincidentKeysWithKey:(id)key;
- (void)centerKeys:(id)keys inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale;
- (void)centerWhilePreservingLayoutWithKeys:(id)keys inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale;
- (void)centerHorizontallyWhilePreservingLayoutWithKeys:(id)keys inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale;
- (void)centerVerticallyWhilePreservingLayoutWithKeys:(id)keys inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale;
- (void)repositionKeys:(id)keys withOffset:(struct CGPoint { double x0; double x1; })offset scale:(double)scale;
- (void)resizeKeys:(id)keys withOffset:(struct CGPoint { double x0; double x1; })offset scale:(double)scale;
- (void)insetKeys:(id)keys withInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets scale:(double)scale;
- (void)scaleKeys:(id)keys withFactor:(struct CGSize { double x0; double x1; })factor scale:(double)scale;
- (void)removeKey:(id)key;
- (void)insertKey:(id)key withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame andShiftKeys:(id)keys scale:(double)scale;
- (void)removeKey:(id)key andShiftKeys:(id)keys scale:(double)scale;
- (void)replaceKey:(id)key withKey:(id)key;
- (void)shiftRowAndResizeLeadingControlKey:(id)key toSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (void)updateMoreAndInternationalKeysWithOptions:(int)options;
- (id)keySet;
- (id)geometrySet:(BOOL)set;
- (id)attributeSet:(BOOL)set;
- (id)supplementaryKeyList;
- (void)centerKeyplaneInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale;
- (id)listShapes;
- (id)shapesForKeys:(id)keys;
- (id)geometriesList;
- (void)setGeometriesList:(id)list;
- (id)activeGeometriesList;
- (void)setActiveGeometriesList:(id)list;
- (id)activeShapesFromOutputShapes:(id)shapes inputShapes:(id)shapes inRTL:(BOOL)rtl;
- (int)state;
- (void)setState:(int)state;
- (int)_variantType;
- (void)updateVariantTypeForActions:(unsigned int)actions;
- (id)representedString;
- (void)setRepresentedString:(id)string;
- (id)fullRepresentedString;
- (id)displayString;
- (void)setDisplayString:(id)string;
- (id)gestureKey;
- (void)setGestureKey:(id)key;
- (id)cachedGestureLayout;
- (void)setCachedGestureLayout:(id)layout;
- (id)secondaryDisplayStrings;
- (void)setSecondaryDisplayStrings:(id)strings;
- (id)secondaryRepresentedStrings;
- (void)setSecondaryRepresentedStrings:(id)strings;
- (id)highlightedVariantsList;
- (void)setHighlightedVariantsList:(id)list;
- (id)selectedVariantIndices;
- (void)setSelectedVariantIndices:(id)indices;
- (id)localizationKey;
- (void)setLocalizationKey:(id)key;
- (int)displayType;
- (void)setDisplayType:(int)type;
- (int)interactionType;
- (void)setInteractionType:(int)type;
- (int)variantType;
- (void)setVariantType:(int)type;
- (int)displayTypeHint;
- (void)setDisplayTypeHint:(int)hint;
- (long long)selectedVariantIndex;
- (long long)highlightedVariantIndex;
- (void)setSelectedVariantIndex:(long long)index;
- (long long)textAlignment;
- (void)setTextAlignment:(long long)alignment;
- (int)displayRowHint;
- (void)setDisplayRowHint:(int)hint;
- (int)rendering;
- (void)setRendering:(int)rendering;
- (id)overrideDisplayString;
- (void)setOverrideDisplayString:(id)string;
- (BOOL)visible;
- (void)setVisible:(BOOL)visible;
- (BOOL)ghost;
- (void)setGhost:(BOOL)ghost;
- (void)setVariantPopupBias:(id)bias;
- (id)variantPopupBias;
- (long long)flickDirection;
- (void)setFlickDirection:(long long)direction;
- (long long)popupDirection;
- (void)setPopupDirection:(long long)direction;
- (BOOL)disabled;
- (void)setDisabled:(BOOL)disabled;
- (int)splitMode;
- (void)setSplitMode:(int)mode;
- (unsigned long long)clipCorners;
- (void)setClipCorners:(unsigned long long)corners;
- (BOOL)forceMultitap;
- (void)setForceMultitap:(BOOL)multitap;
- (BOOL)mergeAsMoreKey;
- (void)setMergeAsMoreKey:(BOOL)key;
- (id)parentKey;
- (void)setParentKey:(id)key;
- (BOOL)isExemptFromInputManagerLayout;
- (BOOL)isExemptFromInputManagerHitTesting;
- (BOOL)allowsStartingContinuousPath;
- (BOOL)allowsDelayedTapForContinuousPathDisambiguation;
- (BOOL)allowRetestAfterCommittingDownActions;
- (BOOL)avoidsLanguageIndicator;
- (BOOL)modifiesKeyplane;
- (BOOL)dynamicDisplayTypeHint;
- (BOOL)avoidAutoDeactivation;
- (BOOL)behavesAsShiftKey;
- (BOOL)disablesEdgeSwipe;
- (BOOL)isRightToLeftSensitive;
- (BOOL)containsDividerVariant;
- (unsigned long long)groupNeighbor;
- (void)setGroupNeighbor:(unsigned long long)neighbor;
- (BOOL)preventPaddle;
- (void)setPreventPaddle:(BOOL)paddle;
- (BOOL)dynamicLayout;
- (void)setDynamicLayout:(BOOL)layout;
- (unsigned long long)dynamicDisplayCorner;
- (void)setDynamicDisplayCorner:(unsigned long long)corner;
- (long long)currentKeyboardType;
- (void)setCurrentKeyboardType:(long long)type;
- (id)toggleKeysForKeyName:(id)name;
- (void)setToggleKeys:(id)keys forKeyName:(id)name;
- (void)orderVariantKeys:(BOOL)keys;
- (id)variantDisplayString;
- (BOOL)hasLayoutTag:(id)tag;
- (BOOL)containsKeyThatIgnoresHandBias;
- (void)setLayoutTag:(id)tag passingKeyTest:(id /* block */)test;
- (BOOL)shouldCacheKey;
- (id)cacheDisplayString;
- (id)cacheSecondaryDisplayString;
- (BOOL)_renderAsStringKey;
- (BOOL)renderKeyInKeyplane:(id)keyplane;
- (id)keysForDisplayRowAtIndex:(unsigned long long)index;
@end

#endif /* UIKBTree_h */
