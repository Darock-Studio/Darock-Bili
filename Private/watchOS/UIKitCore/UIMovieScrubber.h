//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIMovieScrubber_h
#define UIMovieScrubber_h
@import Foundation;

#include "UIControl.h"
#include "UIImage.h"
#include "UIImageView.h"
#include "UILabel.h"
#include "UIMovieScrubberEditingView.h"
#include "UIMovieScrubberTrackView.h"
#include "UIMovieScrubberTrackViewDataSource-Protocol.h"
#include "UIMovieScrubberTrackViewDelegate-Protocol.h"
#include "UIPanGestureRecognizer.h"

@class NSString;
@protocol UIMovieScrubberDataSource, UIMovieScrubberDelegate;

@interface UIMovieScrubber : UIControl<UIMovieScrubberTrackViewDataSource, UIMovieScrubberTrackViewDelegate> {
  /* instance variables */
  UIImageView *_thumbView;
  UIMovieScrubberTrackView *_trackView;
  UIMovieScrubberEditingView *_editingView;
  UILabel *_elapsedLabel;
  UILabel *_remainingLabel;
  int _timeComponents;
  UIImage *_fillImage;
  UIImage *_innerShadowImage;
  UIImage *_maskImage;
  UIImage *_shadowImage;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _trackRect;
  double _hitOffset;
  double _maximumValue;
  double _minimumValue;
  struct CGPoint { double x; double y; } _touchLocationWhenTrackPressBegan;
  double _minTrimmedLength;
  double _maxTrimmedLength;
  double _zoomAnimationDuration;
  double _zoomAnimationDelay;
  struct { unsigned int x :1 continuous; unsigned int x :1 animating; unsigned int x :1 creatingSnapshot; unsigned int x :1 needsReload; unsigned int x :1 layoutTimeViews; unsigned int x :1 computeTrackRect; unsigned int clampingTrimRange; unsigned int x :1 zoomed; unsigned int x :1 zoomAnimating; unsigned int x :1 trackIsPressed; unsigned int x :1 trackAnimating; unsigned int x :1 thumbIsVisible; unsigned int x :1 handleIsPressed; unsigned int x :1 willBeginEditing; unsigned int x :1 editing; unsigned int editingHandle; unsigned int rotationDisabled; unsigned int x :1 isInNavigationBar; unsigned int x :1 delegateValueDidChange; unsigned int x :1 delegateStartValueDidChange; unsigned int x :1 delegateEndValueDidChange; unsigned int x :1 delegateWillBeginRequestingThumbnails; unsigned int x :1 delegateDidFinishRequestingThumbnails; unsigned int x :1 delegateWillBeginEditing; unsigned int x :1 delegateDidBeginEditing; unsigned int x :1 delegateDidCancelEditing; unsigned int x :1 delegateEditingAnimationFinished; unsigned int x :1 delegateWidthDeltaOriginXDelta; unsigned int x :1 delegateDidBeginAnimatingZoom; unsigned int x :1 delegateDidEndAnimatingZoom; unsigned int x :1 delegateWillZoom; unsigned int x :1 dataSourceRequestThumbnailImageIsSummmary; } _sliderFlags;
  UIPanGestureRecognizer *_panGestureRecognizer;
}

@property (nonatomic) double value;
@property (@dynamic, nonatomic) double duration;
@property (nonatomic) double minimumTrimLength;
@property (nonatomic) double maximumTrimLength;
@property (nonatomic) double trimStartValue;
@property (nonatomic) double trimEndValue;
@property (readonly, nonatomic) double zoomMinimumValue;
@property (readonly, nonatomic) double zoomMaximumValue;
@property (readonly, nonatomic) BOOL zoomAnimating;
@property (nonatomic) BOOL thumbIsVisible;
@property (nonatomic) BOOL editable;
@property (nonatomic) BOOL continuous;
@property (nonatomic) NSObject<UIMovieScrubberDataSource> *dataSource;
@property (nonatomic) NSObject<UIMovieScrubberDelegate> *delegate;
@property (nonatomic) double zoomDelay;
@property (nonatomic) BOOL showTimeViews;
@property (readonly, nonatomic) BOOL isInsideNavigationBar;
@property (nonatomic) double edgeInset;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } alignmentMargins;
@property (nonatomic) BOOL editing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)_allowActionsToQueue;
+ (id)timeStringForSeconds:(int)seconds forceFullWidthComponents:(BOOL)components isElapsed:(BOOL)elapsed;

/* instance methods */
- (id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (void)reloadData;
- (BOOL)isEditable;
- (BOOL)isContinuous;
- (void)_animateAfterEdit:(BOOL)edit;
- (void)setEditing:(BOOL)editing animated:(BOOL)animated;
- (void)animateAfterEdit;
- (void)animateCancelEdit;
- (void)_trimAnimationDidStop:(BOOL)stop glassView:(id)view;
- (BOOL)isEditing;
- (void)setZoomAnimationDuration:(double)duration;
- (void)_computeTrackRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trackRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_editingRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_editingRectForStartTime:(double)time endTime:(double)time;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })thumbRectForValue:(double)value;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (void)layoutSubviews;
- (void)_initSubviews;
- (void)_updateTimes;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)setValue:(double)value animated:(BOOL)animated;
- (void)_updateThumbLocation;
- (void)_setValue:(double)value andSendAction:(BOOL)action;
- (void)_sliderAnimationWillStart;
- (void)_sliderAnimationDidStop:(BOOL)stop;
- (double)_valueForLocatable:(id)locatable;
- (void)setRotationDisabled:(BOOL)disabled;
- (void)_setZoomAnimating:(BOOL)animating;
- (BOOL)forceZoom;
- (void)forceUnzoom;
- (void)_trackPressWasHeld;
- (void)_beginTrackPressWithLocatable:(id)locatable touchesBegan:(BOOL)began;
- (void)_cancelTrackPress:(BOOL)press;
- (void)_cancelTrackPressIfNeccessaryWithLocatable:(id)locatable;
- (BOOL)pointInsideThumb:(struct CGPoint { double x0; double x1; })thumb withEvent:(id)event;
- (int)_editingHandleWithLocatable:(id)locatable;
- (void)_handlePanGesture:(id)gesture;
- (void)beginTrackingWithLocatable:(id)locatable;
- (void)continueTrackingWithLocatable:(id)locatable;
- (void)endTrackingWithLocatable:(id)locatable;
- (void)_controlTouchBegan:(id)began withEvent:(id)event;
- (void)_controlTouchMoved:(id)moved withEvent:(id)event;
- (void)_controlTouchEnded:(id)ended withEvent:(id)event;
- (BOOL)cancelTouchTracking;
- (BOOL)_alwaysHandleScrollerMouseEvent;
- (BOOL)isAnimatingValueChange;
- (void)_sliderValueDidChange:(id)change;
- (double)movieScrubberTrackViewDuration:(id)duration;
- (id)movieScrubberTrackView:(id)view evenlySpacedTimestamps:(int)timestamps startingAt:(id)at endingAt:(id)at;
- (void)movieScrubberTrackView:(id)view requestThumbnailImageForTimestamp:(id)timestamp isSummaryThumbnail:(BOOL)thumbnail;
- (void)setThumbnailImage:(struct CGImage *)image forTimestamp:(id)timestamp;
- (double)movieScrubberTrackViewThumbnailAspectRatio:(id)ratio;
- (double)movieScrubberTrackViewZoomAnimationDuration:(id)duration;
- (double)movieScrubberTrackViewZoomAnimationDelay:(id)delay;
- (void)movieScrubberTrackView:(id)view clampedSizeWidthDelta:(double)delta actualSizeWidthDelta:(double)delta originXDelta:(double)xdelta minimumVisibleValue:(double)value maximumVisibleValue:(double)value;
- (void)movieScrubberTrackViewDidExpand:(id)expand;
- (void)movieScrubberTrackViewDidCollapse:(id)collapse;
- (void)movieScrubberTrackViewWillBeginRequestingThumbnails:(id)thumbnails;
- (void)movieScrubberTrackViewDidFinishRequestingThumbnails:(id)thumbnails;
- (BOOL)isZoomAnimating;
@end

#endif /* UIMovieScrubber_h */
