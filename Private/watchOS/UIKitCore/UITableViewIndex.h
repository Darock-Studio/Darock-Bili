//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UITableViewIndex_h
#define UITableViewIndex_h
@import Foundation;

#include "UIControl.h"
#include "UIAccessibilityHUDGestureDelegate-Protocol.h"
#include "UIAccessibilityHUDGestureManager.h"
#include "UIColor.h"
#include "UITableViewIndexVisualStyle-Protocol.h"

@class NSArray, NSString, UIFont;

@interface UITableViewIndex : UIControl<UIAccessibilityHUDGestureDelegate> {
  /* instance variables */
  struct CGSize { double width; double height; } _cachedSize;
  struct CGSize { double width; double height; } _cachedSizeToFit;
  double _topPadding;
  double _bottomPadding;
  double _verticalTextHeightEstimate;
  NSArray *_entries;
  long long _idiom;
  UIAccessibilityHUDGestureManager *_axHUDGestureManager;
}

@property (retain, nonatomic) NSArray *titles;
@property (retain, nonatomic) UIFont *font;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } drawingInsets;
@property (retain, nonatomic) UIColor *indexColor;
@property (retain, nonatomic) UIColor *indexBackgroundColor;
@property (retain, nonatomic) UIColor *indexTrackingBackgroundColor;
@property (readonly, nonatomic) long long selectedSection;
@property (readonly, nonatomic) NSString *selectedSectionTitle;
@property (readonly, nonatomic) BOOL pastTop;
@property (readonly, nonatomic) BOOL pastBottom;
@property (retain, nonatomic) NSObject<UITableViewIndexVisualStyle> *visualStyle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)makeTableViewIndex:(id *)index containerView:(id *)view forTraits:(id)traits;
+ (void)registerVisualStyle:(Class)style forIdiom:(long long)idiom;
+ (id)visualStyleForTableViewIndex:(id)index;

/* instance methods */
- (long long)_coreIdiom;
- (long long)_idiom;
- (void)_setIdiom:(long long)idiom;
- (double)_minLineSpacingForIdiom:(long long)idiom;
- (void)_willChangeToIdiom:(long long)idiom onScreen:(id)screen;
- (id)_displayTitles;
- (void)_cacheAndMeasureTitles;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_effectiveBounds;
- (unsigned long long)maximumNumberOfTitlesWithoutTruncationForHeight:(double)height;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleBoundsForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect stride:(double *)stride;
- (BOOL)_shouldAnimatePropertyWithKey:(id)key;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)_updateSectionForTouch:(id)touch withEvent:(id)event;
- (BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
- (BOOL)continueTrackingWithTouch:(id)touch withEvent:(id)event;
- (void)endTrackingWithTouch:(id)touch withEvent:(id)event;
- (void)cancelTrackingWithEvent:(id)event;
- (void)touchesBegan:(id)began withEvent:(id)event;
- (void)touchesMoved:(id)moved withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (void)_handleTouches:(id)touches withEvent:(id)event;
- (void)tintColorDidChange;
- (id)_dotImage;
- (id)_externalDotImage;
- (BOOL)canBecomeFocused;
- (void)didMoveToWindow;
- (void)_setupAXHUDGestureIfNecessary;
- (id)_accessibilityHUDGestureManager:(id)manager HUDItemForPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)_accessibilityHUDGestureManager:(id)manager shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)recognizer;
- (void)_accessibilityHUDGestureManager:(id)manager gestureLiftedAtPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)_accessibilityHUDGestureManagerCancelsTouchesInView:(id)view;
- (long long)_indexForEntryAtPoint:(struct CGPoint { double x0; double x1; })point;
@end

#endif /* UITableViewIndex_h */
