//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 7209.1.301.0.0
//
#ifndef UIKeyboardImpl_h
#define UIKeyboardImpl_h
@import Foundation;

#include "UIView.h"
#include "TIKeyboardInputManagerToImplProtocol-Protocol.h"
#include "UIAutocorrectBubbleContainer.h"
#include "UIAutocorrectInlinePrompt.h"
#include "UIContinuousPathIntroductionView.h"
#include "UIDelayedAction.h"
#include "UIDictationPopoverController.h"
#include "UIInlineTextCompletionController.h"
#include "UIInlineTextCompletionControllerDelegate-Protocol.h"
#include "UIKBAutofillController.h"
#include "UIKBEditingGesturesIntroduction.h"
#include "UIKBInputDelegateManager.h"
#include "UIKBRTIPartner.h"
#include "UIKBRTIPartnerDelegate-Protocol.h"
#include "UIKeyInput-Protocol.h"
#include "UIKeyboardAutocorrectionController.h"
#include "UIKeyboardCandidateController.h"
#include "UIKeyboardCandidateControllerDelegate-Protocol.h"
#include "UIKeyboardCandidateList-Protocol.h"
#include "UIKeyboardCandidateListDelegate-Protocol.h"
#include "UIKeyboardEmojiPopoverController.h"
#include "UIKeyboardImplGeometryDelegate-Protocol.h"
#include "UIKeyboardImplStateProtocol-Protocol.h"
#include "UIKeyboardInputModeIndicatorController.h"
#include "UIKeyboardInputModeIndicatorControllerDelegate-Protocol.h"
#include "UIKeyboardLayout.h"
#include "UIKeyboardLayoutSizeDelegate-Protocol.h"
#include "UIKeyboardScheduledTask.h"
#include "UIKeyboardTaskQueue.h"
#include "UILexicon.h"
#include "UIPhysicalKeyboardEvent.h"
#include "UIPopoverPresentationControllerDelegate-Protocol.h"
#include "UIPressAndHoldPopoverController.h"
#include "UITextCursorAssertion-Protocol.h"
#include "UITextInputArrowKeyHistory.h"
#include "UITextInputDelegatePrivate-Protocol.h"
#include "UITextInputTraits.h"
#include "UITextInteractionAssistant.h"
#include "UITextInteractionSelectableInputDelegate.h"
#include "UITextRange.h"
#include "UIView.h"
#include "_UIActionWhenIdle.h"
#include "_UIIVCResponseDelegateImpl-Protocol.h"
#include "_UIInvalidatable-Protocol.h"
#include "_UIKeyboardImplHeldOperation.h"
#include "_UIKeyboardImplProxy.h"
#include "_UIKeyboardTextSelectionController.h"
#include "_UIKeyboardTextSelectionGestureControllerDelegate-Protocol.h"
#include "_UIKeyboardTextSelectionInteraction.h"
#include "_UIStickerPickerKeyboardSession.h"
#include "_UIStickerPickerKeyboardSessionDelegate-Protocol.h"
#include "_UIStringAndPositionPair.h"
#include "_UITextChoiceAccelerationAssistant.h"
#include "_UITextChoicesAssistantDelegate-Protocol.h"
#include "_UITextInputUserInteractionDelegate-Protocol.h"

@class BOOL *, NSArray, NSAttributedString, NSDictionary, NSMutableArray, NSMutableDictionary, NSNumber, NSString, NSUUID, TICandidateRequestToken, TIDocumentState, TIKeyboardCandidate, TIKeyboardCandidateResultSet, TIKeyboardInputManagerState, TIKeyboardInputManagerStub, TIKeyboardLayout, TIKeyboardState, TIKeyboardTouchEvent, TISmartPunctuationController;
@protocol AFUIPanel_Staging, UIInlineTextCompletionLearning, UIResponder<UIKeyInput;

@interface UIKeyboardImpl : UIView<_UIIVCResponseDelegateImpl, _UIKeyboardTextSelectionGestureControllerDelegate, UIKeyboardCandidateControllerDelegate, TIKeyboardInputManagerToImplProtocol, UIPopoverPresentationControllerDelegate, UIKeyboardInputModeIndicatorControllerDelegate, UIInlineTextCompletionControllerDelegate, _UITextChoicesAssistantDelegate, _UIStickerPickerKeyboardSessionDelegate, UIKeyboardImplStateProtocol, UIKBRTIPartnerDelegate, UIKeyboardCandidateListDelegate, UIKeyboardLayoutSizeDelegate, UITextInputDelegatePrivate> {
  /* instance variables */
  NSObject<UIKeyInput> *m_delegate;
  UITextInteractionSelectableInputDelegate *m_selectableDelegate;
  UIKeyboardTaskQueue *m_taskQueue;
  id /* block */ m_externalTask;
  TIKeyboardState *m_keyboardState;
  TIKeyboardInputManagerState *m_inputManagerState;
  BOOL m_keyboardDelegateStateNeedsRefresh;
  long long m_textInputSource;
  UIView *m_languageIndicator;
  NSString *m_previousInputString;
  UIKeyboardAutocorrectionController *m_autocorrectionController;
  UIAutocorrectInlinePrompt *m_autocorrectPrompt;
  TIKeyboardCandidateResultSet *m_candidateResultSet;
  NSObject<UIKeyboardCandidateList> *m_candidateList;
  UIView *m_markedTextOverlay;
  NSObject<UIKeyboardImplGeometryDelegate> *m_geometryDelegate;
  UIKeyboardLayout *m_layout;
  NSMutableDictionary *m_keyedLayouts;
  UIKeyboardScheduledTask *m_autoDeleteTask;
  unsigned int m_autoDeleteCount;
  double m_autoDeleteLastDelete;
  double m_autoDeleteInterval;
  unsigned int m_autoDeleteShiftCharacter;
  double m_autoDeleteCurrentForceMultipler;
  double m_autoDeleteCurrentForce;
  BOOL m_autoDeleteUseForce;
  UIDelayedAction *m_longPressAction;
  long long m_originalOrientation;
  struct CGPoint { double x; double y; } m_inputPoint;
  int m_changeCount;
  double m_changeTime;
  id m_changedDelegate;
  struct __CFRunLoopObserver * m_observer;
  unsigned long long m_textInputChangingCount;
  BOOL m_textInputChangingText;
  BOOL m_textInputChangingDirection;
  BOOL m_textInputChangesIgnored;
  BOOL m_textInputUpdatingSelection;
  BOOL m_disableSyncTextChanged;
  BOOL m_disableClearingTextSuggestions;
  BOOL m_wasDelegateSetupWithRTIClient;
  UITextInputTraits *m_defaultTraits;
  UITextInputTraits *m_traits;
  UITextInputTraits *m_overrideTraits;
  int m_returnKeyState;
  BOOL m_returnKeyEnabledInLayout;
  long long m_currentDirection;
  UILexicon *m_recentInputs;
  BOOL m_autoDeleteOK;
  BOOL m_autocapitalizationPreference;
  BOOL m_autocorrectionPreference;
  BOOL m_autoshift;
  BOOL m_caretShowingNow;
  BOOL m_changeNotificationDisabled;
  BOOL m_correctionLearningAllowed;
  BOOL m_delegateIsSMSTextView;
  BOOL m_delegateRequiresKeyEvents;
  BOOL m_doubleSpacePeriodWasAppliedInCurrentContext;
  BOOL m_doubleSpacePeriodPreference;
  BOOL m_hardwareKeyboardAttached;
  BOOL m_inDealloc;
  BOOL m_initializationDone;
  BOOL m_selecting;
  BOOL m_shift;
  BOOL m_shiftLocked;
  BOOL m_shiftLockedEnabled;
  BOOL m_settingShift;
  BOOL m_suggestionsShownForCurrentDeletion;
  BOOL m_originalShouldSkipCandidateSelection;
  BOOL m_updatingPreferences;
  BOOL m_suppressGeometryChangeNotifications;
  BOOL m_acceptingCandidate;
  BOOL m_didAutomaticallyInsertSpace;
  BOOL m_didSyncDocumentStateToInputDelegate;
  BOOL m_userChangedSelection;
  BOOL m_shouldChargeKeys;
  BOOL m_longPress;
  BOOL m_replacingWord;
  BOOL m_shiftNeedsUpdate;
  BOOL m_shiftPreventAutoshift;
  BOOL m_shiftHeldDownNeedsUpdated;
  BOOL m_clientVariantSupportEnabled;
  BOOL m_clientVariantSupportEnabledEver;
  NSMutableArray *m_keyplaneNamesPreviousDelegate;
  NSMutableArray *m_keyplaneNamesCurrentDelegate;
  UITextInputArrowKeyHistory *m_arrowKeyHistory;
  BOOL m_isRotating;
  BOOL m_preRotateShift;
  BOOL m_preRotateShiftLocked;
  BOOL m_showInputModeIndicator;
  BOOL m_suppressUpdateCandidateView;
  BOOL m_shouldUpdateCacheOnInputModesChange;
  BOOL m_rivenCenterFilled;
  double m_splitProgress;
  BOOL m_needsCandidates;
  BOOL m_shouldSkipCandidateGeneration;
  BOOL m_updateLayoutOnShowKeyboard;
  BOOL m_receivedCandidatesInCurrentInputMode;
  int _currentAlertReason;
  BOOL m_layoutAllowsCP;
  BOOL m_needsPasteSupportUpdate;
  BOOL m_delegateSupportsImagePaste;
  BOOL m_remoteDelegateSupportsImagePaste;
  BOOL m_didUpdateCapsLockLanguageSwitchSetting;
  BOOL m_shouldEnableCapsLockLanguageSwitchByDefault;
  UIPhysicalKeyboardEvent *m_previousGlobeKeyEvent;
  BOOL m_delegateAdoptsKeyboardInput;
  BOOL m_delegateAdoptsTextInput;
  BOOL m_delegateAdoptsTextInputPrivate;
  BOOL m_delegateAdoptsWebTextInputPrivate;
  BOOL m_delegateAdoptsWKInteraction;
  BOOL m_delegateAdoptsKeyInputPrivate;
  BOOL m_delegateAdoptsRTISourceSession;
  BOOL m_firstResponderAdoptsTextInput;
  UIResponder<UIKeyInput> *_forwardingInputDelegate;
  BOOL _forwardingInputDelegateConformsToWKInteraction;
  BOOL _shouldRespectForwardingInputDelegate;
  BOOL m_scrolling;
  BOOL m_hasInputOnAcceptCandidate;
  BOOL m_maximizing;
  BOOL m_usesAutoShiftFor3PK;
  unsigned long long m_previousSpaceKeyBehavior;
  unsigned long long m_previousReturnKeyBehavior;
  BOOL m_usesCandidateSelection;
  BOOL m_UsedCandidateSelection;
  BOOL m_hasEditedMarkedTextInExtendedView;
  BOOL m_updatingLayout;
  BOOL m_suppressUpdateLayout;
  BOOL m_suppressUpdateShiftState;
  BOOL m_animateUpdateBars;
  BOOL m_needsToRecomputeDesirableModes;
  BOOL m_isCapsLocked;
  UITextInputTraits *m_traitsForPreviousDelegate;
  UIDelayedAction *m_detachHardwareKeyboardAction;
  UIDelayedAction *m_updateLastUsedInputModeAction;
  UIDelayedAction *m_idleDetection;
  UIDelayedAction *m_resumeDictationForResponderChange;
  UIDelayedAction *m_showCursorAccessory;
  NSObject<_UIInvalidatable> *m_hideCursorAccessoriesAssertion;
  UIView *m_capsLockSign;
  long long m_userInteraction;
  BOOL m_didAutomaticallyInsertSpaceBeforeChangingInputMode;
  BOOL m_disableSmartInsertDelete;
  BOOL m_didExtendLongPressDelayForContinuousPath;
  BOOL m_inHandleKeyTextCommandForCurrentEvent;
  BOOL m_inHandleKeyAppCommandForCurrentEvent;
  BOOL m_webEventWasHandledAsKeyCommand;
  BOOL m_webEventWasHandledByInputManager;
  BOOL m_webEventIsKeyDown;
  BOOL m_needsOneShotGenerateCandidatesAfterStoppingAutoDelete;
  BOOL m_disableAutocapitalization;
  int m_predictionType;
  BOOL m_repeatDeleteFromHardwareKeyboard;
  UIKBAutofillController *m_autofillController;
  long long m_cachedAutofillMode;
  long long m_autofillSubMode;
  BOOL m_isAutofilling;
  long long m_pendingAutofillIndex;
  BOOL m_ignoreSelectionChange;
  BOOL m_suppressingDocumentAssertions;
  BOOL m_repeatDeleteWord;
  struct _NSRange { unsigned long long location; unsigned long long length; } m_textAlternativesRange;
  NSDictionary *m_autofillCustomInfo;
  unsigned long long m_numCPwords;
  _UIKeyboardImplProxy *m_implProxy;
  UIKeyboardScheduledTask *m_delayDeleteTask;
  id /* block */ _deferredUpdateTask;
  UIContinuousPathIntroductionView *_continuousPathIntroductionView;
  UIKBEditingGesturesIntroduction *_editingGestureIntroductionView;
  BOOL m_editingTraitsMarkedDirty;
  BOOL m_selectionIsEmpty;
  NSMutableDictionary *m_hardwareKeyDownCodeToEventMap;
  UIKeyboardEmojiPopoverController *_emojiPopoverController;
  UIDictationPopoverController *_dictationPopoverController;
  UIPressAndHoldPopoverController *_pressAndHoldPopoverController;
  NSObject<AFUIPanel_Staging> *_autoFillPanel;
  BOOL _emojiPopoverToRestoreAfterRotation;
  BOOL _isSettingExtensionInputMode;
  BOOL _needsUpdateAssistantView;
  double m_bottomPadding;
  UITextInputTraits *_remoteTextInputTraits;
  BOOL m_policyDelegateResult;
  BOOL m_shouldSuppressAssistantBar;
  BOOL m_shouldSuppressSoftwareKeyboard;
  BOOL m_inputModeSwitcherVisible;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } m_editMenuFrame;
  UIView *m_keyboardWindowSnapshot;
  UIDelayedAction *m_dictationMenuAction;
  int m_keyboardMenuType;
  int m_presentingKeyboardMenuType;
  NSObject<UITextCursorAssertion> *m_dictationIndicatorAssertion;
  _UIStickerPickerKeyboardSession *_stickerPickerSession;
  NSAttributedString *_inlineCompletionAsMarkedText;
  id /* block */ _waitingOnPerformAutocorrect;
  UITextRange *_pendingAutocorrectRange;
  BOOL m_shouldClearTextSuggestions;
  BOOL m_pendingRestoreTextSuggestions;
  _UIKeyboardImplHeldOperation *_pendingKeyupOperation;
  BOOL m_usesSystemKeyboardForASP;
  BOOL m_isAutoFillMenuPresented;
  BOOL m_shouldSuppressSelectionCommands;
  long long _id;
  BOOL m_showsCandidateBar;
  BOOL m_showsCandidateInline;
  BOOL m_automaticMinimizationEnabled;
  BOOL _mimicShiftBeingHeld;
  UIPhysicalKeyboardEvent *m_currentEventForKeyCommand;
  UIInlineTextCompletionController *m_inlineTextCompletionController;
  UIKeyboardCandidateController *m_candidateController;
  TISmartPunctuationController *m_smartPunctuationController;
  TIKeyboardTouchEvent *m_touchEventWaitingForKeyInputEvent;
  _UIActionWhenIdle *m_delayedCandidateRequest;
  _UIActionWhenIdle *m_deferredDidSetDelegateAction;
  UIView *m_internationalKeyIntroductionView;
  UIDelayedAction *m_updateCapsLockDelayOverrideForNonTyping;
  _UIStringAndPositionPair *m_lastMatchedSupplementalCandidate;
  _UIStringAndPositionPair *m_pendingSupplementalCandidateToInsert;
  unsigned long long m_lastChooseSupplementalItemToInsertCallbackIdentifier;
}

@property (readonly, nonatomic) TIKeyboardInputManagerStub *inputManager;
@property (retain, @dynamic, nonatomic) id changedDelegate;
@property (readonly, nonatomic) UIKeyboardAutocorrectionController *autocorrectionController;
@property (readonly, nonatomic) UIKeyboardCandidateController *candidateController;
@property (retain, nonatomic) TIKeyboardInputManagerState *inputManagerState;
@property (nonatomic) BOOL _shouldSuppressAssistantBar;
@property (readonly, nonatomic) BOOL _backdropVisible;
@property (readonly, nonatomic) UITextInteractionAssistant *textInteractionAssistant;
@property (readonly, nonatomic) _UITextInteractionEditMenuAssistant *_editMenuAssistant;
@property (readonly, nonatomic) _UITextChoiceAccelerationAssistant *_textChoicesAssistant;
@property (readonly, nonatomic) UIKeyboardInputModeIndicatorController *inputModeIndicatorController;
@property (readonly, nonatomic) UIKBRTIPartner *remoteTextInputPartner;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long serviceRole;
@property (nonatomic) BOOL skipRecomputeInputMode;
@property (nonatomic) BOOL prewarmsPredictiveCandidates;
@property (retain, nonatomic) UITextInputArrowKeyHistory *arrowKeyHistory;
@property (readonly, nonatomic) TIKeyboardInputManagerStub *inputManager;
@property (retain, nonatomic) TIKeyboardInputManagerState *inputManagerState;
@property (retain, nonatomic) UIKBInputDelegateManager *inputDelegateManager;
@property (copy, nonatomic) id /* block */ externalTask;
@property (retain, nonatomic) UIPhysicalKeyboardEvent *eventForCurrentWebEvent;
@property (readonly, nonatomic) UIKeyboardAutocorrectionController *autocorrectionController;
@property (readonly, nonatomic) UIKeyboardCandidateController *candidateController;
@property (readonly, nonatomic) TISmartPunctuationController *smartPunctuationController;
@property (retain, nonatomic) TIKeyboardTouchEvent *touchEventWaitingForKeyInputEvent;
@property (retain, nonatomic) _UIActionWhenIdle *delayedCandidateRequest;
@property (retain, nonatomic) UIKeyboardScheduledTask *autocorrectPromptTask;
@property (readonly, nonatomic) UIInlineTextCompletionController *inlineTextCompletionController;
@property (retain, nonatomic) _UITextChoiceAccelerationAssistant *customInputDelegateChoiceAccelerationAssistant;
@property (retain, nonatomic) _UIKeyboardTextSelectionController *customInputDelegateSelectionController;
@property (retain, nonatomic) _UIKeyboardTextSelectionInteraction *customInputDelegateSelectionInteraction;
@property (retain, nonatomic) NSObject<UITextCursorAssertion> *cursorAssertion;
@property (retain, nonatomic) NSObject<UITextCursorAssertion> *capslockAssertion;
@property (retain, nonatomic) NSObject<UITextCursorAssertion> *inputModeAssertion;
@property (retain, nonatomic) _UIActionWhenIdle *deferredDidSetDelegateAction;
@property (retain, nonatomic) id changedDelegate;
@property (retain, nonatomic) NSUUID *resigningRTISessionIdentifier;
@property (retain, nonatomic) UIView *internationalKeyIntroductionView;
@property (nonatomic) BOOL committingCandidate;
@property (nonatomic) BOOL hardwareKeyboardIsSeen;
@property (nonatomic) BOOL handlingKeyCommandFromHardwareKeyboard;
@property (nonatomic) BOOL disableSmartInsertDelete;
@property (retain, nonatomic) UIKBAutofillController *autofillController;
@property (readonly, nonatomic) BOOL canShowPredictionBar;
@property (retain, nonatomic) TICandidateRequestToken *currentCandidateRequest;
@property (retain, nonatomic) NSDictionary *currentCandidateRequestInfo;
@property (retain, nonatomic) TIKeyboardCandidate *autocorrectionToAcceptBeforeProgressiveCandidates;
@property (retain, nonatomic) UIDelayedAction *updateCapsLockDelayOverrideForNonTyping;
@property (nonatomic) long long candidateViewOffset;
@property (retain, nonatomic) NSString *deletedString;
@property (nonatomic) BOOL floatingForced;
@property (nonatomic) BOOL syncingDictationLanguageForInputModeSwitch;
@property (copy, nonatomic) NSArray *characterRectsForCharacterRange;
@property (readonly, nonatomic) UIKeyboardLayout *activeLayout;
@property (retain, nonatomic) NSNumber *isAttachedHardwareKeyboard;
@property (retain, nonatomic) UIAutocorrectBubbleContainer *autocorrectBubbleContainer;
@property (retain, nonatomic) UIKeyboardInputModeIndicatorController *inputModeIndicatorController;
@property (copy, nonatomic) id /* block */ chooseSupplementalCandidateCompletion;
@property (nonatomic) unsigned long long lastDeletionCountForFastDelete;
@property (weak, nonatomic) UIView *overlayContainerObserved;
@property (nonatomic) void * skippedEndInputSession;
@property (retain, nonatomic) NSUUID *skippedEndInputSessionID;
@property (nonatomic) BOOL _mimicShiftBeingHeld;
@property (readonly, nonatomic) BOOL isSettingDelegate;
@property (nonatomic) BOOL hasPreviousKeyResponder;
@property (nonatomic) BOOL hasNextKeyResponder;
@property (readonly, nonatomic) TIKeyboardState *keyboardState;
@property (weak, nonatomic) NSObject<_UITextInputUserInteractionDelegate> *userInteractionDelegate;
@property (nonatomic) BOOL shouldIgnoreTextInputChanges;
@property (copy, nonatomic) id /* block */ didTeardownExistingDelegate;
@property (copy, nonatomic) id /* block */ willSetupNewDelegate;
@property (nonatomic) BOOL forCustomInputView;
@property (nonatomic) BOOL showInputModeIndicator;
@property (nonatomic) BOOL showsCandidateBar;
@property (readonly, nonatomic) BOOL shouldShowCandidateBar;
@property (nonatomic) BOOL receivedCandidatesInCurrentInputMode;
@property (nonatomic) BOOL showsCandidateInline;
@property (nonatomic) BOOL geometryIsChanging;
@property (readonly, nonatomic) BOOL continuousPathUnderway;
@property (readonly, nonatomic) BOOL isRotating;
@property (readonly, nonatomic) BOOL updatingPreferences;
@property (nonatomic) BOOL automaticMinimizationEnabled;
@property (nonatomic) double deleteWordLastDelete;
@property (nonatomic) BOOL autocorrectionBubbleDisabled;
@property (nonatomic) BOOL shouldSkipCandidateSelection;
@property (readonly, nonatomic) BOOL isDefaultPrediction;
@property (readonly, nonatomic) BOOL isAutofillPrediction;
@property (readonly, nonatomic) UIKeyboardTaskQueue *taskQueue;
@property (readonly, nonatomic) _UIKeyboardTextSelectionController *textSelectionController;
@property (nonatomic) BOOL suppressUpdateLayout;
@property (nonatomic) BOOL suppressUpdateShiftState;
@property (nonatomic) BOOL suppressUpdateAssistantView;
@property (nonatomic) BOOL suppressUpdateInputMode;
@property (nonatomic) BOOL animateUpdateBars;
@property (readonly, nonatomic) BOOL delegateRequiresKeyEvents;
@property (nonatomic) BOOL shouldUpdateLayoutAutomatically;
@property (nonatomic) BOOL isCallingTextChangedDuringInputModeSwitch;
@property (retain, @dynamic, nonatomic) UIResponder<UIKeyInput> *delegate;
@property (retain, nonatomic) NSString *activeDictationLanguage;
@property (readonly) BOOL centerFilled;
@property BOOL rivenSplitLock;
@property (readonly) unsigned long long minimumTouchesForTranslation;
@property (readonly, nonatomic) BOOL splitTransitionInProgress;
@property BOOL lockFloating;
@property (nonatomic) BOOL inHardwareKeyboardMode;
@property (nonatomic) unsigned long long requestedInteractionModel;
@property (weak, nonatomic) NSObject<UIKeyboardImplGeometryDelegate> *geometryDelegate;
@property (retain, nonatomic) _UIStringAndPositionPair *lastMatchedSupplementalCandidate;
@property (retain, nonatomic) _UIStringAndPositionPair *pendingSupplementalCandidateToInsert;
@property (nonatomic) unsigned long long lastChooseSupplementalItemToInsertCallbackIdentifier;
@property (retain, nonatomic) TIKeyboardLayout *layoutForKeyHitTest;
@property (readonly, nonatomic) double timestampOfLastTouchesEnded;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSObject<UIInlineTextCompletionLearning> *inlineTextCompletionLearner;
@property (readonly, nonatomic) UITextInputTraits *textInputTraits;
@property (readonly, nonatomic) TIDocumentState *documentState;
@property (readonly, nonatomic) UIView *inputOverlayContainer;
@property (readonly, nonatomic) BOOL delegateSupportsCorrectionUI;
@property (readonly, nonatomic) BOOL inlineTextCompletionAllowedForAutocorrectionType;
@property (readonly, nonatomic) BOOL isSelecting;
@property (readonly, nonatomic) BOOL showingEmojiSearch;
@property (nonatomic) BOOL performingRemoteTextOperations;
@property (readonly, nonatomic) BOOL needAutofillLogin;
@property (nonatomic) BOOL canSuggestSupplementalItemsForCurrentSelection;

/* class methods */
+ (id)keyboardWindow;
+ (id)keyboardScreen;
+ (BOOL)overrideNativeScreen;
+ (void)_clearHardwareKeyboardMinimizationPreference;
+ (void)setParentTestForProfiling:(id)profiling;
+ (void)sendPerformanceNotification:(id)notification;
+ (void)sendPerformanceNotification:(id)notification userInfo:(id)info;
+ (id)sharedInstance;
+ (id)sharedInstanceForCustomInputView:(BOOL)view;
+ (id)activeInstance;
+ (void)releaseSharedInstance;
+ (void)purgeImageCache;
+ (void)applicationWillSuspend:(id)suspend;
+ (void)applicationWillResignActive:(id)active;
+ (void)applicationDidBecomeActive:(id)active;
+ (void)applicationDidEnterBackground:(id)background;
+ (void)applicationWillEnterForeground:(id)foreground;
+ (void)applicationDidReceiveMemoryWarning:(id)warning;
+ (void)switchControlStatusDidChange:(id)change;
+ (BOOL)isActivatingForeground;
+ (Class)layoutClassForCurrentInputMode;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })deviceSpecificPaddingForInterfaceOrientation:(long long)orientation inputMode:(id)mode;
+ (id)_applicationClientComponent;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })deviceSpecificStaticHitBufferForInterfaceOrientation:(long long)orientation inputMode:(id)mode;
+ (struct CGSize { double x0; double x1; })defaultSizeForInterfaceOrientation:(long long)orientation;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)orientation;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)orientation ignoreInputView:(BOOL)view;
+ (BOOL)keyboardOrientation:(long long)orientation isEquivalentToOrientation:(long long)orientation;
+ (struct CGSize { double x0; double x1; })keyboardSizeForInterfaceOrientation:(long long)orientation;
+ (id)normalizedInputModesFromPreference;
+ (double)topMarginForInterfaceOrientation:(long long)orientation;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)orientation hasInputView:(BOOL)view;
+ (double)additionalInstanceHeight;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)orientation;
+ (BOOL)shouldMergeAssistantBarWithKeyboardLayout;
+ (BOOL)showsGlobeAndDictationKeysExternally;
+ (void)refreshRivenStateWithTraits:(id)traits isKeyboard:(BOOL)keyboard;
+ (BOOL)rivenInstalled;
+ (BOOL)rivenPreference;
+ (BOOL)rivenTranslationPreference;
+ (BOOL)rivenShouldUndock;
+ (BOOL)isSplit;
+ (BOOL)supportsSplit;
+ (BOOL)supportsFloating;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })requestedFloatingInsets;
+ (BOOL)isFloatingForced;
+ (void)performWithoutFloatingLock:(id /* block */)lock;
+ (BOOL)isFloating;
+ (void)setFloating:(BOOL)floating;
+ (void)setFloating:(BOOL)floating positionedAtDefaultOffsetAnimated:(BOOL)animated;
+ (void)setFloating:(BOOL)floating positionedAtOffset:(struct CGPoint { double x0; double x1; })offset animated:(BOOL)animated;
+ (long long)floatingIdiom;
+ (double)floatingWidth;
+ (double)floatingHeight;
+ (double)floatingScreenWidthToEmulate;
+ (double)keyboardWidthForScreen:(id)screen withOrientation:(long long)orientation;
+ (double)persistentSplitProgress;
+ (double)splitProgress;
+ (void)setPersistentSplitProgress:(double)progress;
+ (void)suppressSetPersistentOffset:(BOOL)offset;
+ (struct CGPoint { double x0; double x1; })_normalizedScreenPoint:(struct CGPoint { double x0; double x1; })point;
+ (struct CGPoint { double x0; double x1; })_screenPointFromNormalizedPoint:(struct CGPoint { double x0; double x1; })point;
+ (void)setPersistentOffset:(struct CGPoint { double x0; double x1; })offset;
+ (struct CGPoint { double x0; double x1; })normalizedPersistentOffset;
+ (struct CGPoint { double x0; double x1; })normalizedPersistentOffsetIgnoringState;
+ (struct CGPoint { double x0; double x1; })persistentOffset;
+ (struct CGPoint { double x0; double x1; })defaultUndockedOffsetForFloating:(BOOL)floating;
+ (struct CGPoint { double x0; double x1; })floatingNormalizedPersistentOffset;
+ (struct CGPoint { double x0; double x1; })floatingPersistentOffset;
+ (void)setFloatingPersistentOffset:(struct CGPoint { double x0; double x1; })offset;
+ (BOOL)smartInsertDeleteIsEnabled;
+ (BOOL)isDictationPopoverEnabled;
+ (Class)layoutClassForInputMode:(id)mode keyboardType:(long long)type screenTraits:(id)traits;
+ (BOOL)shouldAccessInputManagerService;
+ (id)uniqueNumberPadInputModesFromInputModes:(id)modes forKeyboardType:(long long)type;
+ (BOOL)_isInputEligibleForSpaceAutodelete:(id)autodelete;

/* instance methods */
- (id)_getCurrentKeyplaneName;
- (id)_getCurrentKeyboardName;
- (id)_getLocalizedInputMode;
- (void)_setAutocorrects:(BOOL)autocorrects;
- (id)_getAutocorrection;
- (id)_getAutocorrectionList;
- (id)_getCandidateList;
- (BOOL)_hasCandidates;
- (long long)_positionInCandidateList:(id)list;
- (void)_setNeedsCandidates:(BOOL)candidates;
- (BOOL)_needsCandidates;
- (void)forwardStickerEvent_presentCard;
- (void)handleStickerEvent_presentCard;
- (void)stickerPickerKeyboardSessionDidFinish;
- (void)forwardKeyboardCameraEvent_startCameraInput:(id)input;
- (void)forwardKeyboardCameraEvent_selfDestruct;
- (void)forwardKeyboardCameraEvent_updatePreviewText:(id)text asMarkedText:(BOOL)text;
- (void)forwardDictationEvent_switchToDictationInputModeWithOptions:(id)options;
- (void)forwardDictationEvent_handleDictationShouldPause:(BOOL)pause withNewDelagate:(BOOL)delagate;
- (void)forwardDictationEvent_switchToDictationLanguage:(id)language;
- (void)forwardDictationEvent_startDictation;
- (void)forwardDictationEvent_stopDictation:(BOOL)dictation;
- (void)forwardDictationEvent_cancelDictation;
- (void)forwardDictationEvent_movePopoverView:(id)view;
- (void)forwardDictationEvent_handleTip:(id)tip title:(id)title;
- (void)forwardDictationEvent_updateIdleDetection:(long long)detection;
- (void)forwardDictationEvent_stopDictationIgnoreFinalizePhrases;
- (void)forwardDictationEvent_resumeDictation;
- (void)updateIdleDetection:(long long)detection;
- (void)handleIdleDetectionAction;
- (void)clearIdleDetectionAction;
- (void)textSelectionInteractionWillBegin:(id)begin;
- (BOOL)isOutOfProcess;
- (id)keyboardWindowSnapshot;
- (void)clearKeyboardWindowSnapshot;
- (id)implProxy;
- (id)currentKey;
- (void)restoreFocusFromEntryPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_performInputViewControllerOutput:(id)output;
- (void)_requestInputManagerSync;
- (void)_tagTouchForTypingMenu:(unsigned int)menu;
- (void)clearExcessKeyboardMemory;
- (BOOL)keyboardDrawsOpaque;
- (void)clearLanguageIndicator;
- (BOOL)_shouldMinimizeForHardwareKeyboard;
- (BOOL)_showsScribbleIconsInAssistantView;
- (BOOL)_shouldSuppressSoftwareKeyboardByDictation;
- (BOOL)_shouldSuppressSoftwareKeyboardAndAssistantView;
- (BOOL)_shouldSuppressSoftwareKeyboard;
- (BOOL)_shouldSuppressSoftwareKeyboardIgnoringPolicyDelegate:(BOOL)delegate;
- (void)_setShouldSuppressSoftwareKeyboard:(BOOL)keyboard;
- (BOOL)_shouldSuppressSoftwareKeyboardForResponder:(id)responder ignoringPolicyDelegate:(BOOL)delegate;
- (void)_updateKeyboardLanguage:(id)language;
- (void)_setShouldSuppressAssistantBar:(BOOL)bar;
- (void)_updateKeyboardSuppression:(id)suppression;
- (void)_suppressSoftwareKeyboardStateChangedIgnoringPolicyDelegate:(BOOL)delegate;
- (void)setInitialDirection;
- (void)setSplit:(BOOL)split animated:(BOOL)animated;
- (void)traitCollectionDidChange;
- (void)_dynamicUserInterfaceTraitDidChange;
- (void)finishSplitTransitionWithProgress:(double)progress;
- (void)setTextInputChangesIgnored:(BOOL)ignored;
- (BOOL)isUsingDictationLayout;
- (id)_layout;
- (BOOL)allowsReachableKeyboard;
- (long long)currentHandBias;
- (double)biasedKeyboardWidthRatio;
- (void)acceptAutocorrectionAndEndComposition;
- (BOOL)globeKeyDisplaysAsEmojiKey;
- (BOOL)showsDedicatedEmojiKeyAlongsideGlobeButton;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (id)_autofillContext;
- (id)_remoteAppId;
- (id)_remoteLocalizedAppName;
- (id)_remoteUnlocalizedAppName;
- (id)_remoteAssociatedDomains;
- (id)_passwordRules;
- (BOOL)shouldLoadAutofillSignUpInputViewController;
- (BOOL)_shouldLoadAutofillSignUpInputViewController;
- (void)_showAutofillExtras;
- (void)_deactiveActiveKeys;
- (void)performBlockWithTextInputChangesIgnoredForNonMacOS:(id /* block */)os;
- (BOOL)hardwareKeyboardAttached;
- (BOOL)isShiftKeyBeingHeld;
- (void)moveCursorLeftShifted:(BOOL)shifted;
- (void)moveCursorRightShifted:(BOOL)shifted;
- (void)lookUpResponderChainForCustomInputView;
- (double)lastTouchDownTimestamp;
- (id)attributedText;
- (void)showTextAlternativesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)showFirstTextAlternativeWithRangeAdjustment:(long long)adjustment;
- (void)clearTextAlternativesRange;
- (BOOL)callShouldInsertText:(id)text onDelegate:(id)delegate;
- (BOOL)keyboardLayoutIsInAnotherProcess;
- (BOOL)shouldApplyKeyboardCommandToUIHost;
- (BOOL)shouldApplyKeyboardInputToUIHost;
- (BOOL)isRTIClient;
- (void)performKeyboardOutputOnInputSourceSession:(id /* block */)session;
- (void)performKeyboardOutputOnInputSourceSession:(id /* block */)session shouldFlush:(BOOL)flush;
- (void)flushKeyboardOutputOnInputSourceSession;
- (void)performOnInputSourceSessionActionSelector:(SEL)selector;
- (BOOL)playInputClick;
- (BOOL)_isBackdropVisible;
- (BOOL)shouldShowContinuousPathIntroductionView;
- (void)presentContinuousPathIntroductionView;
- (void)dismissContinuousPathIntroductionView;
- (BOOL)shouldShowEditingIntroductionView;
- (void)presentEditingIntroductionView;
- (void)dismissEditingIntroductionView;
- (void)_shouldClearTextSuggestions:(BOOL)suggestions;
- (void)restoreTextSuggestions;
- (void)createTypoTrackerReport;
- (void)presentKeyboardFeedbackAssistantViewControllerForLogURL:(id)url;
- (void)_setInputManager:(id)manager;
- (void)_setShiftLockedEnabled:(BOOL)enabled;
- (void)updateFromTextInputTraits;
- (BOOL)_isShowingCandidateUIWithAvailableCandidates;
- (int)textInputChangingCount;
- (BOOL)isAutoDeleteActive;
- (void)logHandwritingData;
- (long long)_needAutofillCandidate:(id)candidate;
- (void)_clearAutofillGroup;
- (void)_setAutofillGroup:(id)group;
- (id)_autofillGroup;
- (id)_fallbackAutofillGroup;
- (BOOL)_containsUsernamePasswordPairsInAutofillGroup:(id)group;
- (void)_setCandidateController:(id)controller;
- (struct CGSize { double x0; double x1; })defaultSizeForInterfaceOrientation:(long long)orientation;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })deviceSpecificStaticHitBufferForInterfaceOrientation:(long long)orientation inputMode:(id)mode;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })deviceSpecificPaddingForInterfaceOrientation:(long long)orientation inputMode:(id)mode;
- (void)didMoveToWindow;
- (void)setCapsLockSign;
- (void)setCapsLockIfNeeded;
- (BOOL)isCapsLockSignOn;
- (void)_resetCapsLock;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame forCustomInputView:(BOOL)view;
- (void)delayedInit;
- (void)keyboardDidHide:(id)hide;
- (void)detach;
- (void)dealloc;
- (id)layoutState;
- (unsigned long long)maxNumberOfProactiveCells;
- (id)updateSecureCandidateRenderTraits;
- (BOOL)shouldSwitchFromInputManagerMode:(id)mode toInputMode:(id)mode;
- (void)updateInputManagerMode;
- (void)refreshKeyboardState;
- (void)refreshKeyboardStateUpdatingSecureCandidateRenderTraits:(BOOL)traits;
- (id)textContentTypeForCurrentInputDelegate;
- (BOOL)textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact;
- (BOOL)textInputTraitsNeedAutofill;
- (BOOL)textInputTraitsNeedSignup;
- (BOOL)textInputTraitsNeedOneTimeCode;
- (BOOL)textInputTraitsNeedContactAutoFill;
- (BOOL)needOneTimeCodeAutofill;
- (long long)needAutofill;
- (long long)autofillSubMode;
- (id)_contentsOfUsernameField;
- (void)generateAutofillCandidate;
- (void)generateAutofillCandidateByAddingTask:(BOOL)task;
- (void)refreshAutofillModeIfNecessary;
- (void)refreshSecureCandidatesIfNecessary;
- (void)setPendingAutofillIndex:(long long)index;
- (BOOL)preferFallbackAutofillGroup;
- (long long)needAutofillCandidate:(id)candidate;
- (BOOL)delegateAlreadyInAutofillGroup;
- (BOOL)isMemberOfAutofillGroup:(id)group;
- (BOOL)isMemberOfPossibleAutofillGroup:(id)group;
- (void)clearAutofillGroup;
- (void)removeASPVisualEffectsIfNecessary:(id)necessary;
- (void)handleAutofillCredentialSaveIfNeeded:(id)needed;
- (void)trackResponderForAutofillIfNeeded:(id)needed;
- (BOOL)suppressOptOutASPCandidateUpdateForDelegate:(id)delegate;
- (void)provideAutoFillTypingUpdatesIfNecessary;
- (void)clearLayouts;
- (void)deactivateLayout;
- (void)removeFromSuperview;
- (void)applicationSuspendedEventsOnly:(id)only;
- (void)applicationResumed:(id)resumed;
- (void)applicationResumedEventsOnly:(id)only;
- (void)selectionScrolling:(id)scrolling;
- (void)textWillScroll;
- (void)textDidScroll;
- (BOOL)selectionScrolling;
- (void)_selectionScrolling:(BOOL)scrolling scroller:(id)scroller;
- (void)updateDefaultsWithResults:(id /* block */)results;
- (void)defaultsDidChange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)name;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })dragGestureRectInView:(id)view;
- (void)refreshRivenPreferences;
- (void)beginFloatingTransitionFromPanGestureRecognizer:(id)recognizer;
- (BOOL)shouldAllowTwoFingerSelectionGestureOnView:(id)view;
- (void)setInSplitKeyboardMode:(BOOL)mode;
- (void)setSplitProgress:(double)progress;
- (BOOL)hideAccessoryViewsDuringSplit;
- (void)cancelSplitTransition;
- (BOOL)autocorrectionPreference;
- (BOOL)keyboardIsKeyPad;
- (long long)_textInputSourceForDelegate:(id)delegate;
- (void)performReturn;
- (void)performDelete;
- (void)performOperations:(id /* block */)operations withTextInputSource:(long long)source;
- (void)_updateTextInputPencilSource;
- (void)updateTextInputKeyboardSource;
- (void)updateTextInputKeyboardSource:(id)source;
- (unsigned long long)autocorrectionPreferenceForTraits;
- (unsigned long long)_updateAutocorrectionPreferenceForTraitsWithCurrentPreference:(BOOL)preference;
- (BOOL)_shouldLoadPredictionsBasedOnCurrentTraits;
- (id)keyboardViewController;
- (BOOL)isPredictionViewControllerVisible;
- (BOOL)disableInputBars;
- (BOOL)candidateSelectionPredictionForTraits;
- (BOOL)autocapitalizationPreference;
- (BOOL)smartInsertDeleteIsEnabled;
- (BOOL)liveConversionEnabled;
- (BOOL)delayedCandidateList;
- (BOOL)checkSpellingPreference;
- (BOOL)checkSpellingPreferenceForTraits;
- (BOOL)doubleSpacePeriodPreference;
- (id)UILanguagePreference;
- (BOOL)keyboardsExpandedPreference;
- (void)saveInputModesPreference:(id)preference;
- (id)inputModePreference;
- (id)inputModeLastUsedPreference;
- (void)updateInputModeLastChosenPreference;
- (void)setShouldUpdateCacheOnInputModesChange:(BOOL)change;
- (id)hardwareKeyboardsSeenPreference;
- (void)setHardwareKeyboardsSeenPreference:(id)preference;
- (BOOL)shiftLockPreference;
- (void)setInputMode:(id)mode;
- (void)setInputMode:(id)mode userInitiated:(BOOL)initiated;
- (void)setInputMode:(id)mode userInitiated:(BOOL)initiated updateIndicator:(BOOL)indicator executionContext:(id)context;
- (void)_setKeyboardInputMode:(id)mode userInitiated:(BOOL)initiated force:(BOOL)force;
- (void)setKeyboardInputMode:(id)mode userInitiated:(BOOL)initiated;
- (void)postInputViewControllerShouldUpdateNotification:(id)notification;
- (void)reloadCurrentInputMode;
- (void)setKeyboardInputMode:(id)mode userInitiated:(BOOL)initiated updateIndicator:(BOOL)indicator executionContext:(id)context;
- (void)_setKeyboardInputMode:(id)mode userInitiated:(BOOL)initiated updateIndicator:(BOOL)indicator force:(BOOL)force executionContext:(id)context;
- (void)cleanUpBeforeInputModeSwitch;
- (void)updateSmartPunctuationOptionsForLocaleIdentifier:(id)identifier;
- (void)updateForHandBiasChange;
- (void)reinitializeAfterInputModeSwitch:(BOOL)switch;
- (BOOL)presentationControllerShouldDismiss:(id)dismiss;
- (void)presentationControllerDidDismiss:(id)dismiss;
- (BOOL)isEmojiPopoverBeingPresented;
- (BOOL)isEmojiPopoverBeingDismissed;
- (BOOL)isEmojiPopoverPresented;
- (BOOL)isPressAndHoldPopoverPresented;
- (BOOL)isEmojiPopoverVisibleOrDismissing;
- (BOOL)canPresentEmojiPopover;
- (BOOL)canPresentOrDismissEmojiPopover;
- (BOOL)canPresentPressAndHoldPopover:(id)popover;
- (void)presentEmojiPopoverViaTrigger:(id)trigger completion:(id /* block */)completion;
- (void)handleAutoFillContactPopoverCommand;
- (void)handleAutoFillCreditCardPopoverCommand;
- (void)handleAutoFillPasswordPopoverCommand;
- (void)handleAutoFillContactDetected;
- (void)handleAutoFillCreditCardDetected;
- (void)handleAutoFillPasswordDetected;
- (void)_handleAutoFillPopoverCommandWithType:(int)type action:(SEL)action;
- (long long)_autoFillModeForPopoverType:(int)type;
- (BOOL)_isAutoFillPopoverTypeExplicit:(int)explicit;
- (void)_performTextOperationsForAutoFill:(id)fill;
- (void)displayAutoFillPopoverIfAutoFillModeDetected;
- (void)cleanupKeyboardPopover:(id)popover;
- (void)representDictationMenu;
- (void)_presentDictationMenuIfAllowed;
- (void)clearDictationMenuTimer;
- (void)_clearDictationMenuTimer:(BOOL)timer;
- (void)touchDictationMenuTimer;
- (void)touchDictationMenuTimer:(BOOL)timer;
- (void)showDictationMenuIfNeeded;
- (void)hideDictationMenuIfNeeded:(BOOL)needed;
- (id)stopDictationMenuElementsForTextInputView:(id)view;
- (id)stopDictationMenuElementsShowingTitle:(BOOL)title;
- (void)updateDictationIgnoreKeyboardDidHideNotification;
- (BOOL)isDictationLanguageMenuPresented;
- (void)willDismissEditMenu;
- (id)keyboardMenuElements;
- (void)presentKeyboardMenu:(int)menu;
- (void)presentDictationPopover;
- (id)keyboardMenuTipIdentifier;
- (BOOL)canPresentDictationMenuWithAnimationStyle:(long long)style;
- (void)presentDictationMenuWithAnimationStyle:(long long)style;
- (void)presentDictationMenu;
- (void)_dictationDidRecieveDidBeginDictationNotification:(id)notification;
- (void)presentPressAndHoldPopoverWithKeyString:(id)string;
- (void)dismissPressAndHoldPopover;
- (void)setRemoteDictationPopover:(id)popover;
- (BOOL)isDictationPopoverPresented;
- (BOOL)isDictationMenuPresented;
- (void)dismissDictationPopoverAndCancelDictation;
- (void)dismissDictationPopover;
- (void)dismissDictationMenu;
- (void)dismissDictationTip;
- (void)dismissEducationTip;
- (BOOL)keyboardInputModeIndicatorControllerShouldPresentIndicator:(id)indicator;
- (void)keyboardInputModeIndicatorControllerPresentIndicator:(id)indicator reason:(id)reason;
- (void)keyboardInputModeIndicatorControllerDismissIndicator:(id)indicator;
- (void)dismissInputModeIndicator;
- (id)emojiPopoverController;
- (void)presentKeyboardPopoverWithType:(int)type keyString:(id)string completion:(id /* block */)completion;
- (void)_presentKeyboardPopoverWithType:(int)type keyString:(id)string popoverController:(id)controller textInputView:(id)view caretRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect isVerticalText:(BOOL)text completion:(id /* block */)completion;
- (long long)adaptivePresentationStyleForPresentationController:(id)controller traitCollection:(id)collection;
- (void)popoverPresentationController:(id)controller willRepositionPopoverToRect:(inout struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect inView:(inout id *)view;
- (void)updateDictationPopoverLocationIfNeeded;
- (void)setEditMenuFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)updateDictationPopoverLocationForCandidateInlineView:(id)view yOffset:(double)offset;
- (void)dismissEmojiPopoverIfNecessaryWithCompletion:(id /* block */)completion;
- (void)dismissEmojiPopoverBeforeCleanup:(BOOL)cleanup;
- (void)dismissAutoFillPopover;
- (void)dismissKeyboardPopover:(id)popover beforeCleanup:(BOOL)cleanup completion:(id /* block */)completion;
- (void)didPresentMemojiCard;
- (void)didDismissMemojiCard;
- (void)dismissCursorAccessory;
- (void)finishSetKeyboardInputMode:(id)mode previousInputMode:(id)mode didChangeDirection:(BOOL)direction;
- (void)finishSetExtensionInputMode:(id)mode didChangeDirection:(BOOL)direction;
- (void)finishSetInputMode:(id)mode didChangeDirection:(BOOL)direction;
- (void)setInputModeFromPreferences;
- (void)prepareKeyboardInputModeFromPreferences:(id)preferences;
- (void)setKeyboardInputModeFromPreferences:(id)preferences;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)only preserveIfPossible:(BOOL)possible;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)only;
- (BOOL)shouldShowInternationalKeyIntroduction;
- (void)showInternationalKeyIntroductionIfNeededWithPreviousInputMode:(id)mode;
- (void)hideInternationalKeyIntroductionIfNeeded;
- (BOOL)shouldShowModelessInputTip;
- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)context;
- (void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)context withPreviousInputMode:(id)mode;
- (void)setInputModeToNextASCIICapableInPreferredList;
- (void)_updateSoundPreheatingForWindow:(id)window;
- (void)updateLayoutIfNecessary;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)prepareLayoutForInterfaceOrientation:(long long)orientation;
- (void)updateLayoutToCurrentInterfaceOrientation;
- (void)finishLayoutToCurrentInterfaceOrientation;
- (void)setCorrectionLearningAllowed:(BOOL)allowed;
- (void)_updateCanSuggestSupplementalItemsForCurrentSelection;
- (void)takeTextInputTraitsFromDelegate;
- (void)setLayoutRenderConfig:(id)config;
- (void)addSupplementalLexicon:(id)lexicon;
- (void)removeSupplementalLexicon:(id)lexicon;
- (id)_sessionIdentifier;
- (id)documentIdentifierForInputDelegate:(id)delegate;
- (void)_postInputResponderChangedNotification;
- (void)_postInputResponderCapabilitiesChangedNotificationWithOutput:(id)output selectionChanged:(BOOL)changed;
- (void)postInputResponderCapabilitiesChangedNotification;
- (id)delegateAsResponder;
- (id)inputDelegate;
- (void)dismissFloatingKeyboardFromPencilKitIfNeeded;
- (void)_updateDelegateRequiresKeyEventsFromRemoteTextInput;
- (void)setDelegate:(id)delegate force:(BOOL)force;
- (void)willSetupNewDelegate:(id /* block */)delegate;
- (void)_notifyDidTeardownExistingDelegate:(id)delegate newDelegate:(id)delegate;
- (void)_notifyWillSetupNewDelegate:(id)delegate existingDelegate:(id)delegate;
- (void)setDelegate:(id)delegate force:(BOOL)force delayEndInputSession:(BOOL)session;
- (void)_reloadInputViewsForSameDelegate:(id)delegate existingDelegate:(id)delegate force:(BOOL)force delayEndInputSession:(BOOL)session;
- (void)_teardownExistingDelegate:(id)delegate forSetDelegate:(id)delegate force:(BOOL)force delayEndInputSession:(BOOL)session;
- (void)_setDelegate:(id)delegate existingDelegate:(id)delegate force:(BOOL)force delayEndInputSession:(BOOL)session;
- (void)_setupDelegate:(id)delegate delegateSame:(BOOL)same hardwareKeyboardStateChanged:(BOOL)changed endingInputSessionIdentifier:(id)identifier force:(BOOL)force delayEndInputSession:(BOOL)session;
- (void)didSetDelegate;
- (void)keyboardSceneDelegate:(id)delegate startedPinningInputViewsOnBehalfOfResponder:(id)responder;
- (void)keyboardSceneDelegate:(id)delegate stoppedPinningInputViewsOnBehalfOfResponder:(id)responder;
- (BOOL)delegateIsSMSTextView;
- (void)updateDelegatePasteSupport;
- (BOOL)delegateSupportsImagePaste;
- (void)setRemoteDelegateSupportsImagePaste:(BOOL)paste;
- (BOOL)uncachedDelegateSupportsImagePaste;
- (BOOL)imageSuggestionEnabled;
- (void)queueDelayedTask:(id /* block */)task;
- (void)flushDelayedTasks;
- (void)setAutocorrectSpellingEnabled:(BOOL)enabled;
- (BOOL)autocorrectSpellingEnabled;
- (BOOL)hasDelegate;
- (void)textWillChange:(id)change;
- (void)layoutHasChanged;
- (void)textChanged:(id)changed;
- (void)textChanged:(id)changed executionContext:(id)context;
- (void)finishTextChanged;
- (void)textSuggestionDidChange:(id)change;
- (void)textDidChange:(id)change;
- (void)setDefaultTextInputTraits:(id)traits;
- (void)setOverrideTextInputTraits:(id)traits;
- (void)enable;
- (BOOL)predictionFromPreference;
- (id)textSuggestions;
- (void)setSuggestions:(id)suggestions;
- (void)_setSuggestions:(id)suggestions;
- (void)insertCustomTextSuggestion:(id)suggestion;
- (void)insertSticker:(id)sticker;
- (id)_payloadForSticker:(id)sticker;
- (void)handleWebViewCredentialsSaveForWebsiteURL:(id)url user:(id)user password:(id)password passwordIsAutoGenerated:(BOOL)generated;
- (id)keyplaneView;
- (void)prepareForFloatingTransition:(BOOL)transition;
- (BOOL)isTrackpadMode;
- (void)updateAssistantView;
- (BOOL)isSyncingDictationLanguageForInputModeSwitch;
- (void)adjustCapsLockDelayOverride;
- (void)removeCapsLockDelayOverride;
- (void)clearCapsLockDelayOverrideTimer;
- (void)showCursorAccessory;
- (void)clearCursorAccessory;
- (void)performKeyboardOutputAsInputViewControllerOutput:(id)output;
- (void)performKeyboardOutputAsInputViewControllerOutput:(id)output textInputSource:(long long)source;
- (BOOL)_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:(id)callbacks;
- (void)_updateInputViewControllerOutput:(id)output forKeyboardOutput:(id)output;
- (void)_processInputViewControllerKeyboardOutput:(id)output executionContext:(id)context;
- (void)_completePerformInputViewControllerOutput:(id)output executionContext:(id)context;
- (id)physicalKeyboardEventWithInput:(id)input inputFlags:(int)flags;
- (void)optOutASPInTextField;
- (void)performTextOperationActionSelector:(SEL)selector;
- (id)_rtiDocumentStateForAutoFillPopover;
- (void)didClearText;
- (BOOL)callShouldInsertText:(id)text;
- (BOOL)insertTextIfShould:(id)should;
- (void)performSendAction;
- (BOOL)usesAutoDeleteWord;
- (BOOL)shouldRapidDelete;
- (BOOL)shouldRapidDeleteWithDelegate;
- (BOOL)callShouldDeleteWithWordCountForRapidDelete:(int)delete characterCountForRapidDelete:(int)delete;
- (void)callChanged;
- (void)textFrameChanged:(id)changed;
- (void)setChanged;
- (BOOL)changeNotificationDisabled;
- (void)setChangeNotificationDisabled:(BOOL)disabled;
- (void)updateObserverState;
- (void)handleObserverCallback;
- (BOOL)shouldAllowRepeatEvent:(id)event;
- (id)_targetForResponderCommand:(SEL)command;
- (BOOL)_canHandleResponderCommand:(SEL)command;
- (BOOL)_canHandleResponderCommandConservatively:(SEL)conservatively;
- (BOOL)_cancelOperation:(BOOL)operation testOnly:(BOOL)only;
- (BOOL)isCurrentEditResponderWebKit;
- (BOOL)isCurrentEditResponderInEditingMode;
- (BOOL)handleKeyCommand:(id)command repeatOkay:(BOOL *)okay beforePublicKeyCommands:(BOOL)commands;
- (BOOL)shouldShowKeyboardMenu;
- (BOOL)inputModeSwitcherVisible;
- (void)setInputModeSwitcherVisibleInRemote:(BOOL)remote;
- (unsigned long long)handleKeyCommand:(id)command repeatOkay:(BOOL *)okay options:(unsigned long long)options;
- (BOOL)handleInputManagerBasedKeybind:(id)keybind testOnly:(BOOL)only;
- (BOOL)handleCandidateListNavigation:(unsigned int)navigation hasCandidatesForTypedInput:(BOOL)input shiftDown:(BOOL)down keyCommandTypeHandled:(unsigned long long *)handled allowRepeat:(BOOL *)repeat beforePublic:(BOOL)public keyEvent:(id)event;
- (BOOL)handleReturnKey:(BOOL)key;
- (void)handleEmojiPopoverKeyCommand;
- (id)window;
- (void)updateLayoutIfNeeded;
- (void)releaseSuppressUpdateCandidateView;
- (void)prepareForGeometryChange;
- (void)geometryChangeDone:(BOOL)done;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })subtractKeyboardFrameFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inView:(id)view;
- (void)layoutSubviews;
- (BOOL)currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:(BOOL)trait;
- (BOOL)shouldShowCandidateBarIfReceivedCandidatesInCurrentInputMode:(BOOL)mode ignoreHidePredictionTrait:(BOOL)trait;
- (BOOL)shouldShowLongPredictionList;
- (void)finishLayoutChangeWithArguments:(id)arguments;
- (void)updateLayout;
- (BOOL)shouldAllowSelectionGestures:(BOOL)gestures atPoint:(struct CGPoint { double x0; double x1; })point toBegin:(BOOL)begin;
- (void)setTwoFingerTapTimestamp:(double)timestamp;
- (BOOL)transitionInProgress;
- (void)_updateExternalDeviceInputSettingForWindow:(id)window;
- (void)willMoveToWindow:(id)window;
- (void)didMoveToSuperview;
- (void)updateInputAssistantButtonItems;
- (void)_didChangeKeyplaneWithContext:(id)context;
- (unsigned long long)_clipCornersOfView:(id)view;
- (unsigned int)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inputString:(id)string lastInputString:(id)string searchString:(id)string candidateOffset:(long long)offset liveConversionSegments:(id)segments highlighSegmentIndex:(unsigned long long)index;
- (void)_configureMarkedTextAttributesForConversion:(id)conversion selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range highlightRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inputString:(id)string searchString:(id)string;
- (void)setInlineCompletionAsMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inputString:(id)string searchString:(id)string;
- (unsigned int)_setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inputString:(id)string lastInputString:(id)string searchString:(id)string compareAttributes:(BOOL)attributes;
- (void)clearInputForMarkedText;
- (BOOL)supportsSetPhraseBoundary;
- (BOOL)hasEditableMarkedText;
- (BOOL)hasInlineCompletionAsMarkedText;
- (id)inputForMarkedText;
- (void)smartSelectionForTextInDocument:(id)document inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range options:(unsigned long long)options completion:(id /* block */)completion;
- (id)markedTextOverlay;
- (id)searchStringForMarkedText;
- (id)inputStringFromPhraseBoundary;
- (BOOL)cursorIsAtEndOfMarkedText;
- (BOOL)cursorIsAtStartOfInlineCompletionMarkedText;
- (void)syncDocumentStateToInputDelegate;
- (void)documentStateFromInputDelegate:(id /* block */)delegate;
- (void)syncDocumentStateToInputDelegateWithExecutionContext:(id)context;
- (void)prepareForSelectionChange;
- (void)selectionWillChange:(id)change;
- (void)setSelectionWithPoint:(struct CGPoint { double x0; double x1; })point;
- (void)updateForChangedSelection;
- (void)updateForChangedSelectionWithExecutionContext:(id)context;
- (BOOL)shouldGenerateCandidatesAfterSelectionChange;
- (void)completeUpdateForChangedSelection:(BOOL)selection;
- (void)selectionDidChange:(id)change;
- (void)updateTextChoicePromptSelection:(id)selection toRange:(id)range;
- (void)deleteHandwritingStrokesAtIndexes:(id)indexes;
- (void)showSelectionCommands;
- (void)acceptingCandidateWithTrigger:(id)trigger;
- (void)changingContextWithTrigger:(id)trigger;
- (void)syncInputManagerToKeyboardState;
- (void)syncInputManagerToKeyboardStateWithExecutionContext:(id)context;
- (void)syncKeyboardToConfiguration:(id)configuration;
- (void)setLabel:(id)label forKey:(id)key;
- (void)handleKeyboardInput:(id)input executionContext:(id)context;
- (void)updateKeyboardOutput:(id)output withInputForSmartPunctuation:(id)punctuation keyboardConfiguration:(id)configuration;
- (void)replaceAllTextInResponder:(id)responder withText:(id)text;
- (BOOL)dontPushOneTimeCode;
- (BOOL)insertAutoFillTextSuggestion:(id)suggestion;
- (void)performKeyboardOutputInfo:(id)info;
- (void)_cancelPendingSupplementalCandidateInsertion;
- (void)insertDictationResult:(id)result;
- (void)handleRemoteIndirectGestureWithState:(id)state;
- (void)performKeyboardOutput:(id)output;
- (void)performKeyboardOutput:(id)output forwardToRemoteInputSource:(BOOL)source;
- (BOOL)performKeyboardEvent:(id)event;
- (void)performKeyboardOutputAsRTIClient:(id)rticlient;
- (void)performKeyboardOutput:(id)output checkingDelegate:(BOOL)delegate;
- (BOOL)performKeyboardOutput:(id)output checkingDelegate:(BOOL)delegate forwardToRemoteInputSource:(BOOL)source;
- (void)generateCandidatesAsynchronously;
- (void)generateCandidatesAsynchronouslyWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range selectedCandidate:(id)candidate;
- (void)cancelCandidateRequests;
- (BOOL)shouldPrioritizeTextSuggestionsOverCandidateResultSet:(id)set;
- (long long)preferredCandidateViewTypeForCandidateResultSet:(id)set;
- (id)_rangeForSupplementalItemText:(id)text;
- (void)_dispatchInsertionPointEnteredText:(id)text range:(id)range withSupplementalCandidate:(id)candidate;
- (void)_inputManagerDidGenerateSupplementalCandidates:(id)candidates;
- (void)inputManagerDidGenerateCandidateResultSet:(id)set;
- (void)generateAutocorrectionWithExecutionContext:(id)context;
- (void)generateAutocorrectionsWithCompletionHandler:(id /* block */)handler;
- (BOOL)shouldAcceptContinuousPathConversion:(id)conversion;
- (void)_insertionPointExitedRangeWithSupplementalCandidate;
- (void)_dispatchInsertionPointExitedRangeWithSupplementalCandidate;
- (void)inputManagerDidGenerateAutocorrections:(id)autocorrections executionContext:(id)context;
- (void)inputManagerDidGenerateAutocorrections:(id)autocorrections forPredictiveInput:(id)input executionContext:(id)context;
- (BOOL)_insertSupplementalCandidate:(id)candidate overridingCandidateText:(id)text;
- (void)_willReplaceText:(id)text withSupplementalCandidate:(id)candidate;
- (void)_didReplaceText:(id)text withSupplementalCandidate:(id)candidate;
- (void)handleAcceptedCandidate:(id)candidate executionContext:(id)context;
- (void)generateReplacementsForString:(id)string candidatesHandler:(id /* block */)handler executionContext:(id)context;
- (void)skipHitTestForTouchEvent:(id)event;
- (void)skipHitTestForTouchEvents:(id)events;
- (void)skipHitTestForTouchEvent:(id)event delayed:(BOOL)delayed;
- (void)performHitTestForTouchEvent:(id)event executionContextPassingNSNumber:(id)nsnumber;
- (void)performHitTestForTouchEvents:(id)events executionContextPassingNSNumber:(id)nsnumber;
- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)direction granularity:(int)granularity executionContext:(id)context;
- (void)removeAllDynamicDictionaries;
- (void)setInputManagerFromCurrentInputMode;
- (void)releaseInputManager;
- (void)releaseInputManagerIfInactive;
- (BOOL)shouldUseCarPlayModes;
- (BOOL)shouldSwitchInputMode:(id)mode;
- (id)desirableInputModesWithExtensions:(BOOL)extensions;
- (void)recomputeActiveInputModesWithExtensions:(BOOL)extensions;
- (void)recomputeActiveInputModesWithExtensions:(BOOL)extensions allowNonLinguisticInputModes:(BOOL)modes;
- (void)updateInputManagerAutocapitalizationType;
- (void)notifyShiftState;
- (void)updateShiftState;
- (void)_forwardNeededShiftStatesToDestination;
- (id)responderStylingTraitsForceEditingMask:(BOOL)mask;
- (void)updateStylingTraitsIfNeeded;
- (BOOL)editingTraitsMarkedDirty;
- (void)setEditingTraitsMarkedDirty:(BOOL)dirty;
- (void)cutOperation;
- (void)copyOperation;
- (void)pasteOperation;
- (BOOL)canPasteImage;
- (BOOL)isSelectionAtSentenceAutoshiftBoundary;
- (BOOL)nextInputWouldStartSentence;
- (void)setShiftOffIfNeeded;
- (void)toggleShift;
- (void)setShift:(BOOL)shift;
- (void)setShift:(BOOL)shift autoshift:(BOOL)autoshift;
- (void)setShiftPreventAutoshift:(BOOL)autoshift;
- (void)setShiftNeedsUpdate;
- (void)setShiftLocked:(BOOL)locked;
- (void)setShiftLockedForced:(BOOL)forced;
- (BOOL)isShifted;
- (BOOL)isAutoShifted;
- (BOOL)isShiftLocked;
- (void)setShiftStatesNeededInDestination:(BOOL)destination autoShifted:(BOOL)shifted shiftLocked:(BOOL)locked;
- (BOOL)shiftLockedEnabled;
- (BOOL)isCapsLockASCIIToggle;
- (BOOL)isCapsLockSwitchEnabled;
- (BOOL)capsLockKeyHasLanguageSwitchLabel;
- (void)clearShiftState;
- (void)forceShiftUpdate;
- (void)forceShiftUpdateIfKeyboardStateChanged;
- (void)setShouldSkipCandidateSelection:(BOOL)selection userInitiated:(BOOL)initiated;
- (void)updateShowCandidateBar;
- (BOOL)usesCandidateSelection;
- (void)setUsesCandidateSelection:(BOOL)selection;
- (BOOL)usesContinuousPath;
- (BOOL)usesContinuousPathProgressiveCandidates;
- (void)setLayoutAllowsContinuousPath:(BOOL)path;
- (BOOL)accessibilityUsesExtendedKeyboardPredictionsEnabled;
- (BOOL)usesAutocorrectionLists;
- (BOOL)suppliesCompletions;
- (BOOL)supportsNumberKeySelection;
- (BOOL)shouldUsePinyinStyleRowNavigation;
- (void)keyActivated;
- (void)keyDeactivated;
- (void)setInputPoint:(struct CGPoint { double x0; double x1; })point;
- (void)playDeleteKeyFeedbackIfNecessaryRepeat:(BOOL)repeat rapid:(BOOL)rapid;
- (void)playDeleteKeyFeedbackRepeat:(BOOL)repeat rapid:(BOOL)rapid;
- (void)handleDeleteAsRepeat:(BOOL)repeat executionContext:(id)context;
- (void)startDelayDeleteTimer;
- (void)handleDeleteWithExecutionContext:(id)context;
- (void)completeDelete;
- (BOOL)shouldUseAdaptiveDelete;
- (void)handleDeleteWordWithExecutionContext:(id)context;
- (void)handleDelete;
- (BOOL)canHandleDelete;
- (void)handleClearWithInsertBeforeAdvance:(id)advance;
- (void)handleClear;
- (void)handleClearWithExecutionContext:(id)context;
- (BOOL)handleMoveCursorToStartOfLine:(BOOL)line beforePublicKeyCommands:(BOOL)commands testOnly:(BOOL)only savedHistory:(id)history force:(BOOL)force canHandleSelectableInputDelegateCommand:(id /* block */)command keyEvent:(id)event;
- (BOOL)handleMoveCursorToEndOfLine:(BOOL)line beforePublicKeyCommands:(BOOL)commands testOnly:(BOOL)only savedHistory:(id)history force:(BOOL)force canHandleSelectableInputDelegateCommand:(id /* block */)command keyEvent:(id)event;
- (void)forwardKeyboardEventBackToDestination:(id)destination;
- (BOOL)handleHorizontalArrow:(BOOL)arrow shiftDown:(BOOL)down beforePublicKeyCommands:(BOOL)commands testOnly:(BOOL)only isVerticalCandidate:(BOOL)candidate hasCandidatesForTypedInput:(BOOL)input shouldNavigateCandidateList:(BOOL)list canHandleInputDelegateCommand:(id /* block */)command savedHistory:(id)history keyCommandTypeHandled:(unsigned long long *)handled keyEvent:(id)event;
- (BOOL)handleKeyCommandsBeforePublicAsInputUIHost:(id)uihost;
- (BOOL)handleInputSwitcherForKeyEvent:(id)event;
- (BOOL)handleVerticalArrow:(BOOL)arrow shiftDown:(BOOL)down beforePublicKeyCommands:(BOOL)commands testOnly:(BOOL)only isVerticalCandidate:(BOOL)candidate hasCandidatesForTypedInput:(BOOL)input inputDelegateCommandEnabled:(BOOL)enabled canHandleInputDelegateCommand:(id /* block */)command savedHistory:(id)history keyCommandTypeHandled:(unsigned long long *)handled keyEvent:(id)event;
- (BOOL)handleTabWithShift:(BOOL)shift;
- (BOOL)handleMoveResponderWithShift:(BOOL)shift;
- (BOOL)handleTabWithShift:(BOOL)shift beforePublicKeyCommands:(BOOL)commands;
- (BOOL)inputUIHandleTabWithShift:(BOOL)shift testOnly:(BOOL)only;
- (void)becomeFirstResponderAndMakeVisible:(BOOL)visible;
- (BOOL)handleTabWithShift:(BOOL)shift beforePublicKeyCommands:(BOOL)commands isMoveAction:(BOOL)action testOnly:(BOOL)only;
- (void)handleStringInput:(id)input withFlags:(unsigned long long)flags withInputManagerHint:(id)hint executionContext:(id)context;
- (BOOL)acceptInputString:(id)string;
- (void)setPreviousInputString:(id)string;
- (void)setPreviousGlobeKeyEvent:(id)event;
- (void)updateKeyboardStateForReplacingText:(id)text withText:(id)text;
- (void)updateKeyboardStateForInsertion:(id)insertion;
- (void)moveCursorByAmount:(long long)amount;
- (void)deleteBackwardAndNotify:(BOOL)notify;
- (void)deleteBackwardAndNotifyAtEnd:(BOOL)end deletionCount:(unsigned long long)count reinsertTextInLoop:(BOOL)loop;
- (unsigned long long)textLengthToDeleteBeforeSelectedRangeForSmartDelete;
- (void)updateKeyboardStateForDeletion;
- (BOOL)_canDeleteForward;
- (BOOL)deleteForwardAndNotify:(BOOL)notify;
- (BOOL)deleteForwardAndNotify:(BOOL)notify producedByDeleteInput:(BOOL)input;
- (void)deleteBackward;
- (BOOL)isCallingInputDelegate;
- (BOOL)_handleKeyInputMethodCommandForEvent:(id)event canHandleAppKeyCommand:(BOOL)command;
- (BOOL)handleKeyInputMethodCommandForCurrentEvent;
- (BOOL)handleKeyTextCommandForCurrentEvent;
- (BOOL)handleKeyAppCommandForCurrentEvent;
- (void)addInputString:(id)string;
- (void)addInputString:(id)string fromVariantKey:(BOOL)key;
- (id)inputEventForInputString:(id)string;
- (void)updateDoubleSpacePeriodStateForCharacter:(unsigned int)character;
- (void)updateDoubleSpacePeriodStateForString:(id)string;
- (BOOL)willDoubleSpacePeriodForInputString:(id)string afterSpace:(BOOL)space elapsedTime:(double)time;
- (BOOL)shouldDeleteAutospaceBeforeTerminator:(id)terminator;
- (id)handleDeleteAutospaceForInputString:(id)string afterSpace:(BOOL)space;
- (id)handleReplacement:(id)replacement forSpaceAndInput:(id)input;
- (BOOL)shouldAcceptCandidate:(id)candidate beforeInputString:(id)string;
- (void)removeSpaceAfterEmojiForInputString:(id)string;
- (void)_scheduleInputAdditionOrDeletion:(id /* block */)deletion;
- (void)addInputString:(id)string withFlags:(unsigned long long)flags;
- (void)addInputString:(id)string withFlags:(unsigned long long)flags withInputManagerHint:(id)hint;
- (void)_addInputString:(id)string withFlags:(unsigned long long)flags withInputManagerHint:(id)hint withInputSource:(long long)source;
- (void)addInputString:(id)string withFlags:(unsigned long long)flags executionContext:(id)context;
- (void)addInputString:(id)string withFlags:(unsigned long long)flags withInputManagerHint:(id)hint executionContext:(id)context;
- (void)addInputString:(id)string withFlags:(unsigned long long)flags withInputManagerHint:(id)hint withInputSource:(long long)source executionContext:(id)context;
- (void)addInputEvent:(id)event executionContext:(id)context;
- (id)acceptAutocorrectionForWordTerminator:(id)terminator;
- (void)acceptAutocorrectionForWordTerminator:(id)terminator executionContextPassingTIKeyboardCandidate:(id)candidate;
- (id)inputWordForTerminatorAtSelection;
- (void)didAcceptAutocorrection:(id)autocorrection inputCandidate:(id)candidate wordTerminator:(id)terminator;
- (void)didAcceptAutocorrection:(id)autocorrection inputCandidate:(id)candidate wordTerminator:(id)terminator learningFlagsMask:(unsigned long long)mask;
- (void)syncInputManagerToAcceptedAutocorrection:(id)autocorrection forInput:(id)input;
- (void)setDocumentStateForAutocorrection:(id)autocorrection;
- (void)insertedEmojiFromPopover:(id)popover selectionMethod:(id)method;
- (void)insertedAccentVariantFromPopover:(id)popover;
- (void)emojiSearchWillInsertEmoji:(id)emoji forSearchQuery:(id)query;
- (void)emojiSearchWillInsertEmoji:(id)emoji forSearchQuery:(id)query selectionMethod:(id)method inputType:(id)type;
- (void)handleEmojiInput:(id)input keyboardState:(id)state;
- (void)acceptAutocorrection:(id)autocorrection executionContextPassingTIKeyboardCandidate:(id)candidate;
- (BOOL)shouldApplyAcceptedAutocorrection:(id)autocorrection;
- (void)didApplyAutocorrection:(id)autocorrection autocorrectPromptFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)addWordTerminator:(id)terminator afterSpace:(BOOL)space afterAcceptingCandidate:(id)candidate elapsedTime:(double)time executionContext:(id)context;
- (void)completeAddInputString:(id)string;
- (void)completeAddInputString:(id)string generateCandidates:(BOOL)candidates;
- (void)updateDocumentViewsAfterKeyboardOutput:(id)output;
- (void)didChangePhraseBoundary;
- (unsigned long long)phraseBoundary;
- (void)adjustSegmentSize:(long long)size;
- (void)movePhraseBoundaryToDirection:(long long)direction granularity:(long long)granularity;
- (void)updateLayoutAndSetShift;
- (void)deleteOnceFromInputWithExecutionContext:(id)context;
- (BOOL)nextCharacterIsWordCharacter;
- (void)collapseSelection;
- (BOOL)supportsScheduleReplacementsAfterDeletionToEndOfWord;
- (void)scheduleReplacementsAfterDeletionToEndOfWord;
- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned int)before;
- (void)deleteFromInput;
- (void)_deleteFromInputWithFlags:(unsigned long long)flags;
- (void)deleteFromInputWithFlags:(unsigned long long)flags;
- (void)undoWithKeyboardInput:(id)input;
- (void)performAutoDeleteNumberOfTimes:(unsigned long long)times deleteOneWord:(BOOL)word forwardToInputSource:(BOOL)source;
- (void)deleteFromInputWithFlags:(unsigned long long)flags executionContext:(id)context;
- (void)completeDeleteFromInput;
- (void)willReplaceTextInRangedSelectionWithKeyboardInput;
- (id /* block */)_acquireWaitingOnPerformAutocorrect;
- (void)_setWaitingOnPerformAutocorrect:(id /* block */)autocorrect;
- (BOOL)_shouldAcceptAutocorrectionOnSelectionChange;
- (void)acceptAutocorrectionWithCompletionHandler:(id /* block */)handler;
- (void)acceptInlineCompletionWithCompletionHandler:(id /* block */)handler;
- (void)beginAcceptingInlineCompletionByDirectTap;
- (void)endAcceptingInlineCompletionByDirectTap;
- (void)acceptAutocorrectionWithCompletionHandler:(id /* block */)handler requestedByRemoteInputDestination:(BOOL)destination;
- (void)_local_acceptAutocorrection;
- (void)_acceptAutocorrection;
- (void)acceptAutocorrection;
- (void)removeAutocorrection;
- (void)insertTextSuggestionCandidate:(id)candidate;
- (id)emojiCandidate:(id)candidate;
- (void)_acceptSupplementalCandidate:(id)candidate completion:(id /* block */)completion;
- (void)acceptPredictiveInput:(id)input;
- (void)acceptPredictiveInput:(id)input appendSeparator:(BOOL)separator;
- (void)rejectAutocorrection:(id)autocorrection;
- (BOOL)insertsSpaceAfterPredictiveInput;
- (void)textAccepted:(id)accepted;
- (void)textAccepted:(id)accepted executionContext:(id)context;
- (BOOL)shouldForwardInsertSpaceAfterAcceptingPredictiveInput:(id)input;
- (BOOL)acceptAutofillExtraCandidateIfNeeded:(id)needed;
- (void)acceptPredictiveInput:(id)input executionContext:(id)context;
- (void)acceptPredictiveInput:(id)input appendSeparator:(BOOL)separator executionContext:(id)context;
- (void)acceptCandidate:(id)candidate;
- (void)acceptCandidate:(id)candidate forInput:(id)input;
- (void)handleDeletionForCandidate:(id)candidate;
- (void)acceptHandwritingCandidate;
- (id)acceptCurrentCandidate;
- (id)acceptInlineCandidate;
- (id)acceptCurrentCandidateForInput:(id)input;
- (id)acceptInlineCandidateForInput:(id)input;
- (void)acceptCandidate:(id)candidate forInput:(id)input executionContext:(id)context;
- (void)acceptFirstCandidate;
- (BOOL)userSelectedCurrentCandidate;
- (void)setUserSelectedCurrentCandidate:(BOOL)candidate;
- (void)acceptCurrentCandidateIfSelected;
- (void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)context;
- (void)completeAcceptCandidate:(id)candidate;
- (void)showNextCandidates;
- (void)showPreviousCandidate;
- (void)showNextPage;
- (void)jumpToCompositions;
- (void)revealHiddenCandidates;
- (void)candidateListAcceptCandidate:(id)candidate;
- (void)candidateListSelectionDidChange:(id)change;
- (void)candidateListInvalidateSelection:(id)selection;
- (id)candidateList;
- (void)clearInput;
- (void)clearInputWithCandidatesCleared:(BOOL)cleared;
- (void)clearRecentInput;
- (void)removeRecentInput:(id)input completionHandler:(id /* block */)handler;
- (void)acceptRecentInput:(id)input;
- (void)addInputObject:(id)object;
- (void)addInputObject:(id)object executionContext:(id)context;
- (void)completeAcceptCandidateBeforeAddingInputObject:(id)object executionContext:(id)context;
- (void)clearTransientState;
- (void)clearAnimations;
- (void)clearDelegate;
- (void)clearRemoteTextInputPartner;
- (void)replaceText:(id)text;
- (void)scheduleReplacementsWithOptions:(unsigned long long)options;
- (BOOL)acceptWord:(id)word firstDelete:(unsigned long long)delete;
- (BOOL)acceptWord:(id)word firstDelete:(unsigned long long)delete forInput:(id)input;
- (void)processPayloadInfo:(id)info;
- (void)pushAutocorrections:(id)autocorrections requestToken:(id)token;
- (void)pushCandidateResultSet:(id)set requestToken:(id)token;
- (void)setCandidateList:(id)list;
- (BOOL)displaysCandidates;
- (void)_conditionallyNotifyPredictionsAreAvailableForCandidates:(id)candidates containingProactiveTriggers:(BOOL)triggers;
- (void)setCandidateDisplayIsExtended:(BOOL)extended;
- (void)updateCandidateDisplayAsyncWithCandidateSet:(id)set;
- (unsigned int)assertIntermediateText:(id)text;
- (BOOL)presentTextCompletionAsMarkedText:(id)text;
- (void)removeTextCompletionFromMarkedText:(id)text;
- (BOOL)needsToDeferUpdateTextCandidateView;
- (void)updateCandidateDisplay;
- (BOOL)canUseCandidateBarAsSupplementToInlineView;
- (void)candidateBarDidExtendWithGesture;
- (BOOL)isMinimized;
- (BOOL)maximizing;
- (BOOL)layoutIsResizing;
- (void)layoutDidResize;
- (void)responseContextDidChange;
- (void)setAutocorrection:(id)autocorrection;
- (id)_supplementalCandidateIcon:(id)icon;
- (void)setAutocorrectionList:(id)list;
- (id)autocorrectPrompt;
- (BOOL)hasAutocorrectPrompt;
- (void)removeAutocorrectPrompt;
- (void)removeCandidateList;
- (void)removeAutocorrectPromptAndCandidateList;
- (void)removeInlineTextCompletionPrompt;
- (void)removeTextChoicePromptWithUnderline;
- (void)removeTextChoicePrompt;
- (void)removeTextChoicePromptAndAutocorrection;
- (void)removeTextChoiceUnderlines;
- (void)removeTextChoiceUnderlinesInRange:(id)range;
- (id)_autocorrectionListDemotingAutocorrectionFromList:(id)list;
- (void)dismissTextChoicePrompt;
- (void)presentTextChoicePromptForRange:(id)range;
- (void)setCandidates:(id)candidates;
- (BOOL)noContent;
- (int)returnKeyType;
- (id)returnKeyDisplayName;
- (BOOL)returnKeyEnabled;
- (void)setReturnKeyEnabled:(BOOL)enabled;
- (void)updateReturnKey;
- (void)updateReturnKey:(BOOL)key;
- (BOOL)shouldShowInternationalKey;
- (BOOL)shouldShowDictationKey;
- (void)_nop;
- (void)_handleKeyBehavior:(unsigned long long)behavior forKeyType:(id)type;
- (void)performKeyBehaviorConfirm;
- (void)performKeyBehaviorConfirmFirstCandidate;
- (void)performKeyBehaviorCommitInline;
- (id)_keyboardBehaviorState;
- (id)updateKeyBehaviors:(id)behaviors withBehaviors:(id)behaviors forState:(id)state;
- (id)updatedKeyBehaviors;
- (void)_updateKeyboardConfigurations;
- (void)updateKeyboardConfigurations;
- (void)callLayoutUpdateReturnKey;
- (BOOL)callLayoutUsesAutoShift;
- (BOOL)callLayoutIgnoresShiftState;
- (BOOL)callLayoutIsShiftKeyPlaneChooser;
- (BOOL)callLayoutIsShiftKeyBeingHeld;
- (void)callLayoutSetShift:(BOOL)shift;
- (void)callLayoutSetAutoshift:(BOOL)autoshift;
- (void)callLayoutLongPressAction;
- (void)callLayoutUpdateLocalizedKeys;
- (void)callLayoutUpdateAllLocalizedKeys;
- (void)callLayoutUpdateRecentInputs;
- (BOOL)callLayoutIsGeometricShiftOrMoreKeyForTouch:(id)touch;
- (id)inputOverlayContainerForCandidateView:(BOOL)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })correctionRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })getCorrectionRectIsVertical:(BOOL *)vertical;
- (void)updateTextCandidateView;
- (void)beginObservingInputOverlayContainerFrame;
- (void)endObservingInputOverlayContainerFrame;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)updateInputOverlayForContainerFrameChange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToAutocorrectRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect delegateView:(id)view container:(id)container;
- (void)sendCallbacksForPreCorrectionsDisplay;
- (void)sendCallbacksForPostCorrectionsRemoval;
- (void)touchAutocorrectPromptTimer;
- (void)clearDelayDeleteTimer;
- (void)touchDelayDeleteTimerWithThreshold:(double)threshold;
- (void)clearAutocorrectPromptTimer;
- (id)_rangeForAutocorrectionText:(id)text;
- (id)autocorrectPromptRectsFromFirstDelegateRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lastDelegateRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)updateAutocorrectPrompt:(id)prompt;
- (void)updateAutocorrectPrompt:(id)prompt executionContext:(id)context;
- (id)autocorrectPromptRectsForInput:(id)input;
- (void)updateAutocorrectPrompt:(id)prompt correctionRects:(id)rects;
- (void)updateLegacyAutocorrectPromptWithAutocorrection:(id)autocorrection parentView:(id)view correctionRects:(id)rects;
- (void)updateAutocorrectContainerWithAutocorrection:(id)autocorrection parentView:(id)view correctionRects:(id)rects;
- (void)insertText:(id)text withAlternativePredictions:(id)predictions;
- (BOOL)applyAutocorrection:(id)autocorrection;
- (void)animateAutocorrectionToText:(id)text fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)animateAutocorrectionToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)fadeAutocorrectPrompt;
- (void)autocorrectionAnimationDidStopWithAutocorrectionView:(id)view;
- (void)underlineCandidate:(id)candidate;
- (BOOL)shouldUnderlineCandidate:(id)candidate;
- (id)autocorrectionRecordForWord:(id)word;
- (BOOL)delegateSuggestionsForCurrentInput;
- (BOOL)canShowAppConnections;
- (void)generateCandidates;
- (void)generateCandidatesWithOptions:(int)options;
- (BOOL)_isShowingSuggestionForKeyboardCamera;
- (void)_generateTextSuggestionForKeyboardCamera;
- (id)replacementsFromSelectedText;
- (void)generateCandidatesFromReplacements;
- (id)generateAutocorrectionReplacements:(id)replacements;
- (id)generateAutocorrectionListForSelectedText;
- (id)savedAutocorrectionListForCandidate:(id)candidate;
- (void)clearAutoDeleteTimer;
- (void)touchAutoDeleteTimerWithThreshold:(double)threshold adjustForPartialCompletion:(BOOL)completion;
- (void)handleAutoDeleteContinuationOnDestinationWithDeletionCount:(unsigned long long)count;
- (void)performStopAutoDeleteAtDocumentStart;
- (void)_stopAutoDeleteAtDocumentStart;
- (void)handleAutoDeleteWithExecutionContext:(id)context;
- (void)completeHandleAutoDelete;
- (void)startAutoDeleteTimer;
- (double)convertForceToGrams:(double)grams;
- (double)scaleCurrentForceFrom:(double)from to:(double)to;
- (double)timeoutForCurrentForce;
- (void)startAutoDeleteTimerForForce:(double)force;
- (void)adjustAutoDeleteTimerForForce:(double)force;
- (void)stopAutoDelete;
- (void)touchUpdateLastUsedInputModeAction;
- (void)clearUpdateLastUsedInputModeAction;
- (void)handleUpdateLastUsedInputModeAction:(id)action;
- (void)touchLongPressTimerWithDelay:(double)delay userInfo:(id)info;
- (void)touchLongPressTimerWithDelay:(double)delay;
- (void)touchLongPressTimer;
- (void)clearLongPressTimer;
- (double)shouldExtendLongPressAction:(id)action;
- (void)handleDelayedActionLongPress:(id)press;
- (void)longPressAction:(id)action;
- (void)longPressAction;
- (BOOL)isLongPress;
- (void)clearTimers;
- (void)clearChangeTimeAndCount;
- (void)updateChangeTimeAndIncrementCount;
- (int)changeCount;
- (void)updateHardwareKeyboardLayout;
- (void)updateHardwareKeyboardLayout:(BOOL)layout;
- (void)clearDetachHardwareKeyboardAction;
- (void)detachHardwareKeyboard;
- (void)hardwareKeyboardAvailabilityDidChange:(id)change;
- (void)hardwareKeyboardAvailabilityChanged;
- (void)hideKeyboardWithoutPreflightChecks;
- (void)hideKeyboard;
- (void)hideKeyboardIgnoringHardwareLayouts:(BOOL)layouts;
- (void)showKeyboard;
- (void)showKeyboardWithoutSuppressionPolicy;
- (void)_showKeyboardIgnoringPolicyDelegate:(BOOL)delegate;
- (void)setInHardwareKeyboardMode:(BOOL)mode forceRebuild:(BOOL)rebuild;
- (void)setInHardwareKeyboardMode:(BOOL)mode shouldMoveKeyboard:(BOOL)keyboard;
- (void)setInHardwareKeyboardMode:(BOOL)mode forceRebuild:(BOOL)rebuild shouldMoveKeyboard:(BOOL)keyboard;
- (BOOL)isInHardwareKeyboardMode;
- (void)proceedShouldReturnIfNeededForASP;
- (void)nonDestructivelyDismissKeyboard;
- (void)sendKeyboardDismissalNotification;
- (void)dismissKeyboard;
- (void)_attemptAuthenticationWithMessage:(id)message;
- (void)cancelAllKeyEvents;
- (BOOL)_isValidKeyInput:(id)input;
- (void)updateKeyboardEventsLagging:(id)lagging;
- (void)_handleWebKeyEvent:(id)event withEventType:(unsigned long long)type withInputString:(id)string withInputStringIgnoringModifiers:(id)modifiers;
- (void)_handleWebKeyEvent:(id)event withEventType:(int)type withInputString:(id)string withInputStringIgnoringModifiers:(id)modifiers executionContext:(id)context;
- (void)_handleWebKeyEvent:(id)event withIndex:(unsigned long long)index inInputString:(id)string;
- (void)_handleWebKeyEvent:(id)event withIndex:(unsigned long long)index inInputString:(id)string executionContext:(id)context;
- (void)triggerPendingKeyup;
- (void)_handleWebKeyEvent:(id)event withInputString:(id)string executionContext:(id)context;
- (void)_remapKeyEvent:(id)event withKeyEventMap:(id)map;
- (void)flushTouchEventWaitingForKeyInputEventIfNecessary;
- (void)_handleKeyEvent:(id)event executionContext:(id)context;
- (void)handleKeyEvent:(id)event;
- (BOOL)_isKeyCommand:(id)command;
- (BOOL)_handlesKeyCommandForEvent:(id)event;
- (BOOL)_handleKeyCommand:(id)command;
- (unsigned long long)_handleKeyCommandCommon:(id)common options:(unsigned long long)options;
- (BOOL)_shouldEmitString:(id)string forKeyEvent:(id)event;
- (void)handleKeyEvent:(id)event executionContext:(id)context;
- (void)handleModifiersChangeForKeyEvent:(id)event executionContext:(id)context;
- (void)cancelDictationOnSendReturnKeyPressed;
- (void)handleKeyWithString:(id)string forKeyEvent:(id)event executionContext:(id)context;
- (void)completeHandleKeyEvent:(id)event;
- (void)toggleSoftwareKeyboard;
- (void)ejectKeyDown;
- (void)updateIsAttachedHardwareKeyboard;
- (void)setKeyboardMinimizedByDictation:(BOOL)dictation;
- (void)showKeyboardIfNeeded;
- (void)remoteControlReceivedWithEvent:(id)event;
- (void)_wheelChangedWithEvent:(id)event;
- (void)_moveWithEvent:(id)event;
- (BOOL)canHandlePresses:(id)presses withEvent:(id)event;
- (id)_activeAssertionController;
- (void)setCaretBlinks:(BOOL)blinks;
- (void)setCaretVisible:(BOOL)visible;
- (BOOL)caretBlinks;
- (BOOL)caretVisible;
- (void)clearSelection;
- (id)dynamicCaretList;
- (void)updateNoContentViews;
- (BOOL)canHandleKeyHitTest;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })inside withEvent:(id)event;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })inside forEvent:(struct __GSEvent *)event;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (BOOL)isAutoFillMode;
- (void)trackUsageForAcceptedAutocorrection:(id)autocorrection promptWasShowing:(BOOL)showing;
- (void)trackUsageForPromptedCorrection:(id)correction inputString:(id)string previousPrompt:(id)prompt;
- (void)trackUsageForCandidateAcceptedAction:(id)action;
- (id)responderForSendCurrentLocation;
- (void)performSendCurrentLocation;
- (void)enableTransientInputDelegateSelectionMode;
- (void)enableTransientSelectionMode;
- (void)disableTransientSelectionMode;
- (void)clearForwardingInputDelegateAndResign:(BOOL)resign;
- (void)didChangeForwardingInputDelegate:(id)delegate;
- (void)_setTransientSelectionModeEnabled:(BOOL)enabled forInputDelegate:(id)delegate;
- (void)_performKeyboardOutput:(id /* block */)output respectingForwardingDelegate:(BOOL)delegate;
- (void)_ensureRTIConnection;
- (id)remoteTextInputPartnerPrivate;
- (id)buildInputSourceState;
- (void)notifyInputSourceStateChangeIfNeeded;
- (id)remoteTextEditingMetadata;
- (unsigned long long)delegateConformanceType;
- (void)resetInputDelegate;
- (id)inputSystemSourceSession;
- (void)modifyTextInputTraits:(id /* block */)traits forceSync:(BOOL)sync;
- (void)updateInputDelegateForRemoteTraitChange:(id)change forceSync:(BOOL)sync;
- (void)updateInputDelegateForRemoteDocumentStateChange:(id)change selectedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range hasText:(BOOL)text forceSync:(BOOL)sync;
- (void)updateForExpectedRemoteDocumentStateChange:(id)change selectedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range forceSync:(BOOL)sync;
- (BOOL)assertTextForRemoteDocument:(id)document withSelectionDelta:(struct _NSRange { unsigned long long x0; unsigned long long x1; })delta updatingSelection:(BOOL)selection;
- (id)asynchronousInputDelegate;
- (void)insertAttributedText:(id)text;
- (void)updateAssistantViewInfo:(id)info;
- (void)applyAssistantItem:(id)item;
- (void)unmarkText:(id)text;
- (BOOL)hasMarkedText;
- (id)markedText;
- (void)handleRemoteDictationEvent_switchToDictationInputModeWithOptions:(id)options;
- (void)handleRemoteDictationEvent_switchToDictationLanguage:(id)language;
- (void)handleRemoteDictationEvent_startDictation;
- (void)handleRemoteDictationEvent_stopDictation:(BOOL)dictation;
- (void)handleRemoteDictationEvent_cancelDictation;
- (void)handleRemoteDictationEvent_handleTip:(id)tip;
- (void)handleRemoteDictationEvent_movePopoverView:(id)view;
- (void)handleRemoteDictationEvent_setEditMenuFrame:(id)frame;
- (void)handleRemoteDictationEvent_updateIdleDetection:(long long)detection;
- (void)handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases;
- (void)handleRemoteDictationEvent_resumeDictation;
- (void)handleRemoteKeyboardCameraEvent_startCameraInput:(id)input;
- (void)handleEventFromRemoteSource_insertSupplementalCandidate:(id)candidate textToCommit:(id)commit;
- (void)handleEventFromRemoteSource_chooseSupplementalItem:(id)item toReplaceText:(id)text;
- (void)handleEventCallbackFromRemoteDestination_didChooseSupplementalItem:(id)item toReplaceText:(id)text;
- (void)handleEventFromRemoteSource_cancelChooseSupplementalItemToInsert;
- (void)handleEventFromRemoteSource_insertionPointEnteredText:(id)text withSupplementalCandidate:(id)candidate;
- (void)handleEventFromRemoteSource_insertionPointExitedTextWithSupplementalItems;
- (void)handleEventFromRemoteDestination_canSuggestSupplementalItemsForCurrentSelection:(BOOL)selection;
- (void)handleEventFromRemoteSource_insertAutofillContent:(id)content;
- (void)handleEventFromRemoteSource_autoFillIsMenuPresented:(BOOL)presented;
- (void)dismissAutoFillMenu;
- (BOOL)shouldSuppressSelectionCommands;
- (void)pauseDictationForResponderChange;
- (void)handleDictationForResponderChange;
- (void)resumeDictationForResponderChange;
- (void)assertTextForDictation;
- (BOOL)inlineTextCompletionAllowedForTraits;
- (id)rangeForTextCompletionInput:(id)input;
- (id)textCompletionInputRectsFromFirstRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lastRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_noteInlineCompletionAsMarkedText:(id)text;
- (id)inlineCompletionAsMarkedText;
- (void)handleGrammarCorrectionEntries:(id)entries;
- (BOOL)isFloatingLocked;
@end

#endif /* UIKeyboardImpl_h */
