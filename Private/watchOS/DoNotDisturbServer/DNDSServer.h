//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 371.14.0.0.0
//
#ifndef DNDSServer_h
#define DNDSServer_h
@import Foundation;

#include "DNDSAppConfigurationManager.h"
#include "DNDSAppFocusConfigurationCoordinator.h"
#include "DNDSAppFocusConfigurationCoordinatorDelegate-Protocol.h"
#include "DNDSAppForegroundTriggerManager.h"
#include "DNDSAppForegroundTriggerManagerDataSource-Protocol.h"
#include "DNDSAppInfoCache.h"
#include "DNDSAssertionSyncManager-Protocol.h"
#include "DNDSAssertionSyncManagerDataSource-Protocol.h"
#include "DNDSAssertionSyncManagerDelegate-Protocol.h"
#include "DNDSAuxiliaryStateMonitor.h"
#include "DNDSBiomeDonationManager.h"
#include "DNDSCalendarEventLifetimeMonitor.h"
#include "DNDSClientDetailsProvider.h"
#include "DNDSContactMonitor.h"
#include "DNDSDrivingTriggerManager.h"
#include "DNDSDrivingTriggerManagerDataSource-Protocol.h"
#include "DNDSEventBehaviorResolver.h"
#include "DNDSEventBehaviorResolverDataSource-Protocol.h"
#include "DNDSGamingTriggerManager.h"
#include "DNDSGamingTriggerManagerDataSource-Protocol.h"
#include "DNDSGlobalConfigurationManager.h"
#include "DNDSGlobalConfigurationManagerDelegate-Protocol.h"
#include "DNDSGlobalConfigurationStore.h"
#include "DNDSIDSSyncEngine.h"
#include "DNDSKeybagStateProviding-Protocol.h"
#include "DNDSLegacyAssertionSyncManagerDataSource-Protocol.h"
#include "DNDSLifetimeMonitorDataSource-Protocol.h"
#include "DNDSLifetimeMonitorDelegate-Protocol.h"
#include "DNDSLocationLifetimeMonitor.h"
#include "DNDSLocationLifetimeMonitorDataSource-Protocol.h"
#include "DNDSMeDeviceService.h"
#include "DNDSMeDeviceServiceListener-Protocol.h"
#include "DNDSMetricsManager.h"
#include "DNDSMindfulnessTriggerManager.h"
#include "DNDSMindfulnessTriggerManagerDataSource-Protocol.h"
#include "DNDSModeAssertionManager.h"
#include "DNDSModeConfigurationManager.h"
#include "DNDSModeConfigurationManagerDelegate-Protocol.h"
#include "DNDSModeConfigurationsStore.h"
#include "DNDSPairedDeviceStateMonitor.h"
#include "DNDSPairedDeviceStateMonitorDelegate-Protocol.h"
#include "DNDSPlaceholderModeManager.h"
#include "DNDSReachability.h"
#include "DNDSReachabilityDelegate-Protocol.h"
#include "DNDSRemoteAppConfigurationServiceProvider.h"
#include "DNDSRemoteAppConfigurationServiceProviderDelegate-Protocol.h"
#include "DNDSRemoteAvailabilityServiceProvider.h"
#include "DNDSRemoteAvailabilityServiceProviderDelegate-Protocol.h"
#include "DNDSRemoteServiceProvider.h"
#include "DNDSRemoteServiceProviderDelegate-Protocol.h"
#include "DNDSScheduleLifetimeMonitor.h"
#include "DNDSScheduleLifetimeMonitorDataSource-Protocol.h"
#include "DNDSScheduleManager.h"
#include "DNDSScheduleManagerDataSource-Protocol.h"
#include "DNDSSettingsManager.h"
#include "DNDSSettingsManagerDelegate-Protocol.h"
#include "DNDSSettingsSyncManager-Protocol.h"
#include "DNDSSettingsSyncManagerDataSource-Protocol.h"
#include "DNDSSettingsSyncManagerDelegate-Protocol.h"
#include "DNDSSleepingTriggerManager.h"
#include "DNDSSleepingTriggerManagerDataSource-Protocol.h"
#include "DNDSSmartTriggerManager.h"
#include "DNDSSmartTriggerManagerDataSource-Protocol.h"
#include "DNDSStateProvider.h"
#include "DNDSSyncEngine.h"
#include "DNDSSystemFocusConfigurationCoordinator.h"
#include "DNDSSystemFocusConfigurationCoordinatorDelegate-Protocol.h"
#include "DNDSUserAvailabilityCoordinator.h"
#include "DNDSWorkoutTriggerManager.h"
#include "DNDSWorkoutTriggerManagerDataSource-Protocol.h"
#include "DNDSXPCEventPublisher.h"
#include "DNDSXPCEventStream.h"

@class FBSDisplayLayoutMonitor, IDSService, NSArray, NSString;
@protocol OS_dispatch_queue;

@interface DNDSServer : NSObject<DNDSAppForegroundTriggerManagerDataSource, DNDSDrivingTriggerManagerDataSource, DNDSGamingTriggerManagerDataSource, DNDSMindfulnessTriggerManagerDataSource, DNDSSleepingTriggerManagerDataSource, DNDSSmartTriggerManagerDataSource, DNDSWorkoutTriggerManagerDataSource, DNDSGlobalConfigurationManagerDelegate, DNDSEventBehaviorResolverDataSource, DNDSLifetimeMonitorDataSource, DNDSLocationLifetimeMonitorDataSource, DNDSScheduleLifetimeMonitorDataSource, DNDSLifetimeMonitorDelegate, DNDSRemoteServiceProviderDelegate, DNDSRemoteAvailabilityServiceProviderDelegate, DNDSRemoteAppConfigurationServiceProviderDelegate, DNDSAssertionSyncManagerDataSource, DNDSAssertionSyncManagerDelegate, DNDSLegacyAssertionSyncManagerDataSource, DNDSSettingsSyncManagerDataSource, DNDSSettingsSyncManagerDelegate, DNDSScheduleManagerDataSource, DNDSSettingsManagerDelegate, DNDSPairedDeviceStateMonitorDelegate, DNDSModeConfigurationManagerDelegate, DNDSReachabilityDelegate, DNDSMeDeviceServiceListener, DNDSAppFocusConfigurationCoordinatorDelegate, DNDSSystemFocusConfigurationCoordinatorDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  DNDSCalendarEventLifetimeMonitor *_calendarEventLifetimeMonitor;
  DNDSScheduleLifetimeMonitor *_scheduleLifetimeMonitor;
  DNDSLocationLifetimeMonitor *_locationLifetimeMonitor;
  NSArray *_lifetimeMonitors;
  DNDSScheduleManager *_scheduleManager;
  DNDSAppFocusConfigurationCoordinator *_appFocusConfigurationCoordinator;
  DNDSSystemFocusConfigurationCoordinator *_systemFocusConfigurationCoordinator;
  DNDSAppForegroundTriggerManager *_appForegroundTriggerManager;
  DNDSAuxiliaryStateMonitor *_auxiliaryStateMonitor;
  DNDSBiomeDonationManager *_biomeDonationManager;
  DNDSDrivingTriggerManager *_drivingTriggerManager;
  DNDSGamingTriggerManager *_gamingTriggerManager;
  DNDSMindfulnessTriggerManager *_mindfulnessTriggerManager;
  DNDSSleepingTriggerManager *_sleepingTriggerManager;
  DNDSSmartTriggerManager *_smartTriggerManager;
  DNDSWorkoutTriggerManager *_workoutTriggerManager;
  DNDSMeDeviceService *_meDeviceService;
  DNDSStateProvider *_stateProvider;
  DNDSEventBehaviorResolver *_eventBehaviorResolver;
  DNDSRemoteServiceProvider *_serviceProvider;
  DNDSRemoteAvailabilityServiceProvider *_availabilityServiceProvider;
  DNDSRemoteAppConfigurationServiceProvider *_appConfigurationServiceProvider;
  NSObject<DNDSAssertionSyncManager> *_assertionSyncManager;
  NSObject<DNDSAssertionSyncManager> *_legacyAssertionSyncManager;
  NSObject<DNDSSettingsSyncManager> *_settingsSyncManager;
  DNDSSettingsManager *_settingsManager;
  IDSService *_idsLocalService;
  IDSService *_idsCloudService;
  DNDSPairedDeviceStateMonitor *_pairedDeviceStateMonitor;
  DNDSSyncEngine *_syncEngine;
  DNDSIDSSyncEngine *_idsSyncEngine;
  DNDSReachability *_reachability;
  NSObject<DNDSKeybagStateProviding> *_keybag;
  DNDSXPCEventStream *_eventStream;
  DNDSXPCEventPublisher *_focusConfigurationEventPublisher;
  FBSDisplayLayoutMonitor *_layoutMonitor;
  DNDSGlobalConfigurationStore *_globalConfigurationStore;
  DNDSGlobalConfigurationManager *_globalConfigurationManager;
  DNDSModeConfigurationsStore *_modeConfigurationsStore;
  DNDSPlaceholderModeManager *_placeholderModeManager;
  DNDSContactMonitor *_contactMonitor;
  DNDSAppInfoCache *_appInfoCache;
  DNDSAppConfigurationManager *_appConfigurationManager;
  DNDSUserAvailabilityCoordinator *_userAvailabilityCoordinator;
  DNDSClientDetailsProvider *_clientDetailsProvider;
  DNDSModeAssertionManager *_modeAssertionManager;
  DNDSModeConfigurationManager *_modeConfigurationManager;
  DNDSMetricsManager *_metricsManager;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property unsigned long long lockState;
@property unsigned long long lostModeState;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void)globalConfigurationManager:(id)manager didUpdatePhoneCallBypassSettings:(id)settings;
- (void)globalConfigurationManager:(id)manager didUpdatePreventAutoReplySetting:(BOOL)setting;
- (void)globalConfigurationManager:(id)manager didUpdateModesCanImpactAvailabilitySetting:(BOOL)setting;
- (id)workoutModeForWorkoutTriggerManager:(id)manager;
- (id)createWorkoutModeForWorkoutTriggerManager:(id)manager;
- (void)setWorkoutTriggerEnabled:(BOOL)enabled forWorkoutTriggerManager:(id)manager;
- (id)modesSupportingSmartEntryForSmartTriggerManager:(id)manager;
- (id)sleepingModeForSleepingTriggerManager:(id)manager;
- (id)mindfulnessModeForMindfulnessTriggerManager:(id)manager;
- (id)gamingModeForGamingTriggerManager:(id)manager;
- (id)drivingModeForDrivingTriggerManager:(id)manager;
- (id)appForegroundTriggerConfigurationForAppForegroundTriggerManager:(id)manager;
- (id)triggerManager:(id)manager performModeAssertionUpdatesWithHandler:(id /* block */)handler;
- (id)triggerManager:(id)manager assertionsWithClientIdentifer:(id)identifer error:(id *)error;
- (id)triggerManager:(id)manager takeModeAssertionWithDetails:(id)details clientIdentifier:(id)identifier error:(id *)error;
- (id)triggerManager:(id)manager invalidateModeAssertionWithUUID:(id)uuid reason:(unsigned long long)reason reasonOverride:(unsigned long long)override clientIdentifier:(id)identifier error:(id *)error;
- (id)triggerManager:(id)manager latestInvalidationWithClientIdentifer:(id)identifer error:(id *)error;
- (id)init;
- (void)resume;
- (void)_handleSignificantTimeChange;
- (BOOL)setUILockState:(unsigned long long)state error:(id *)error;
- (BOOL)_setLostModeState:(unsigned long long)state error:(id *)error;
- (id)currentStateForEventBehaviorResolver:(id)resolver;
- (unsigned long long)currentUILockStateForEventBehaviorResolver:(id)resolver;
- (id)eventBehaviorResolver:(id)resolver bypassSettingsForClientIdentifier:(id)identifier;
- (id)eventBehaviorResolver:(id)resolver configurationForModeIdentifier:(id)identifier;
- (BOOL)eventBehaviorResolver:(id)resolver isAvailabilityActiveForBundleIdentifier:(id)identifier;
- (id)eventBehaviorResolver:(id)resolver appPredicateForApplicationIdentifier:(id)identifier modeIdentifier:(id)identifier;
- (void)keybagDidUnlockForTheFirstTime:(id)time;
- (id)lifetimeMonitor:(id)monitor modeAssertionsWithLifetimeClass:(Class)class;
- (id)locationTriggerConfigurationForLifetimeMonitor:(id)monitor;
- (id)scheduleSettingsByModeIdentifierForScheduleLifetimeMonitor:(id)monitor;
- (void)activeAssertionsDidChangeForLifetimeMonitor:(id)monitor;
- (id)lifetimeMonitor:(id)monitor takeModeAssertionWithDetails:(id)details clientIdentifier:(id)identifier error:(id *)error;
- (void)lifetimeMonitor:(id)monitor lifetimeDidExpireForAssertionUUIDs:(id)uuids expirationDate:(id)date;
- (void)lifetimeMonitor:(id)monitor setTimer:(id)timer;
- (void)lifetimeMonitor:(id)monitor registerTimerHandlerWithServiceIdentifier:(id)identifier handler:(id /* block */)handler;
- (id)remoteServiceProvider:(id)provider resolveBehaviorForEventDetails:(id)details clientDetails:(id)details date:(id)date error:(id *)error;
- (id)remoteServiceProvider:(id)provider activeAssertionWithClientIdentifer:(id)identifer error:(id *)error;
- (id)remoteServiceProvider:(id)provider assertionWithClientIdentifer:(id)identifer error:(id *)error;
- (id)remoteServiceProvider:(id)provider takeModeAssertionWithDetails:(id)details clientIdentifier:(id)identifier error:(id *)error;
- (id)remoteServiceProvider:(id)provider invalidateModeAssertionWithUUID:(id)uuid reason:(unsigned long long)reason reasonOverride:(unsigned long long)override clientIdentifier:(id)identifier error:(id *)error;
- (id)remoteServiceProvider:(id)provider invalidateModeAssertionForClientIdentifier:(id)identifier reason:(unsigned long long)reason reasonOverride:(unsigned long long)override details:(id)details error:(id *)error;
- (id)_invalidateModeAssertionForClientIdentifier:(id)identifier reason:(unsigned long long)reason reasonOverride:(unsigned long long)override details:(id)details error:(id *)error;
- (id)remoteServiceProvider:(id)provider latestInvalidationWithClientIdentifer:(id)identifer error:(id *)error;
- (id)remoteServiceProvider:(id)provider invalidateAllModeAssertionsTakenBeforeDate:(id)date forReason:(unsigned long long)reason clientIdentifier:(id)identifier error:(id *)error;
- (id)remoteServiceProvider:(id)provider allActiveModeAssertionsWithError:(id *)error;
- (id)remoteServiceProvider:(id)provider currentStateWithError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setScreenIsShared:(BOOL)shared screenIsMirrored:(BOOL)mirrored withError:(id *)error;
- (void)appFocusConfigurationCoordinator:(id)coordinator didUpdateAppConfigurationContextForModeIdentifier:(id)identifier;
- (id)currentStateForAppFocusConfigurationCoordinator:(id)coordinator;
- (id)currentStateForSystemFocusConfigurationCoordinator:(id)coordinator;
- (id)remoteServiceProvider:(id)provider behaviorSettingsWithError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setBehaviorSettings:(id)settings withError:(id *)error;
- (id)remoteServiceProvider:(id)provider scheduleSettingsWithError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setScheduleSettings:(id)settings withError:(id *)error;
- (id)currentlyActivePairedDeviceForSyncManager:(id)manager;
- (id)pairedCloudDevicesForSyncManager:(id)manager;
- (id)pairedDevicesForSyncManager:(id)manager;
- (id)syncManager:(id)manager deviceForDeviceIdentifier:(id)identifier;
- (id)syncManager:(id)manager updateOutboundModeAssertion:(id)assertion;
- (id)syncManager:(id)manager scheduleSettingsForModeIdentifier:(id)identifier;
- (BOOL)isCloudSyncDisabledForSyncManager:(id)manager;
- (void)syncManager:(id)manager performModeAssertionUpdatesWithHandler:(id /* block */)handler;
- (void)syncManager:(id)manager prepareForSyncToDevices:(id)devices;
- (id)currentStateForLegacyAssertionSyncManager:(id)manager;
- (id)phoneCallBypassSettingsForSyncManager:(id)manager;
- (id)scheduleSettingsForSyncManager:(id)manager;
- (void)syncManager:(id)manager didReceiveUpdatedPhoneCallBypassSettings:(id)settings;
- (void)syncManager:(id)manager didReceiveUpdatedScheduleSettings:(id)settings;
- (id)scheduleSettingsByModeIdentifierForScheduleManager:(id)manager;
- (void)settingsManager:(id)manager didReceiveUpdatedBehaviorSettings:(id)settings;
- (void)settingsManager:(id)manager didReceiveUpdatedPhoneCallBypassSettings:(id)settings;
- (void)settingsManager:(id)manager didReceiveUpdatedScheduleSettings:(id)settings;
- (void)settingsManager:(id)manager didReceiveUpdatedSyncSettings:(id)settings;
- (void)modeConfigurationManager:(id)manager didUpdateAvailableModes:(id)modes;
- (void)modeConfigurationManager:(id)manager didModifyAvailableMode:(id)mode;
- (void)modeConfigurationManager:(id)manager didModifyExceptionsForContacts:(id)contacts forModeConfiguration:(id)configuration;
- (void)pairedDeviceStateMonitor:(id)monitor pairingChangedFromDevice:(id)device toDevice:(id)device;
- (void)pairedDeviceStateMonitor:(id)monitor cloudPairingChangedFromDevices:(id)devices toDevices:(id)devices;
- (BOOL)remoteServiceProvider:(id)provider setPreventAutoReply:(BOOL)reply withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider getPreventAutoReplyReturningError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setModesCanImpactAvailability:(BOOL)availability withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider getModesCanImpactAvailabilityReturningError:(id *)error;
- (unsigned long long)remoteServiceProvider:(id)provider getCloudSyncStateReturningError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setCloudSyncPreferenceEnabled:(BOOL)enabled withError:(id *)error;
- (unsigned long long)remoteServiceProvider:(id)provider getPairSyncStateReturningError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setPairSyncPreferenceEnabled:(BOOL)enabled withError:(id *)error;
- (id)remoteServiceProvider:(id)provider getAccountFeatureSupportWithError:(id *)error;
- (void)remoteServiceProvider:(id)provider didChangeFocusStatusSharingSettingForApplicationIdentifier:(id)identifier;
- (id)remoteServiceProvider:(id)provider modeConfigurationForModeIdentifier:(id)identifier withError:(id *)error;
- (id)remoteServiceProvider:(id)provider modeConfigurationsWithError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider removeModeConfigurationWithModeIdentifier:(id)identifier deletePlaceholder:(BOOL)placeholder withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setModeConfiguration:(id)configuration withError:(id *)error;
- (id)remoteServiceProvider:(id)provider allModesReturningError:(id *)error;
- (id)remoteServiceProvider:(id)provider availableModesReturningError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider syncModeConfigurationsReturningError:(id *)error;
- (id)remoteServiceProvider:(id)provider allowedModesForContactHandle:(id)handle withError:(id *)error;
- (id)remoteServiceProvider:(id)provider silencedModesForContactHandle:(id)handle withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider userAvailabilityInActiveModeForContactHandle:(id)handle withError:(id *)error;
- (id)remoteServiceProvider:(id)provider publishStatusKitAvailabilityReturningError:(id *)error;
- (BOOL)remoteAvailabilityServiceProvider:(id)provider isLocalUserAvailableForApplicationIdentifier:(id)identifier withError:(out id *)error;
- (id)remoteAppConfigurationServiceProvider:(id)provider getCurrentAppConfigurationForActionIdentifier:(id)identifier bundleIdentifier:(id)identifier withError:(out id *)error;
- (BOOL)remoteAppConfigurationServiceProvider:(id)provider invalidateAppContextForActionIdentifier:(id)identifier bundleIdentifier:(id)identifier withError:(out id *)error;
- (id)remoteServiceProvider:(id)provider getAppInfoForBundleIdentifier:(id)identifier withError:(id *)error;
- (id)remoteServiceProvider:(id)provider getAppInfoForBundleIdentifiers:(id)identifiers withError:(id *)error;
- (id)remoteServiceProvider:(id)provider currentMeDeviceStateWithError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setAppConfigurationPredicate:(id)predicate forActionIdentifier:(id)identifier forApplicationIdentifier:(id)identifier modeIdentifier:(id)identifier withError:(id *)error;
- (id)remoteServiceProvider:(id)provider getAppConfigurationPredicateForActionIdentifier:(id)identifier forApplicationIdentifier:(id)identifier modeIdentifier:(id)identifier withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setAppConfigurationTargetContentIdentifierPrefix:(id)prefix forActionIdentifier:(id)identifier forApplicationIdentifier:(id)identifier modeIdentifier:(id)identifier withError:(id *)error;
- (id)remoteServiceProvider:(id)provider getAppConfigurationTargetContentIdentifierPrefixesForModeIdentifier:(id)identifier withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider clearSystemConfigurationActionWithIdentifier:(id)identifier modeIdentifier:(id)identifier withError:(id *)error;
- (id)remoteServiceProvider:(id)provider getAppActionsForModeIdentifier:(id)identifier withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setAppAction:(id)action forApplicationIdentifier:(id)identifier modeIdentifier:(id)identifier withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider clearAppActionWithIdentifier:(id)identifier forApplicationIdentifier:(id)identifier modeIdentifier:(id)identifier withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider setSystemAction:(id)action forModeIdentifier:(id)identifier withError:(id *)error;
- (BOOL)remoteServiceProvider:(id)provider clearSystemActionWithIdentifier:(id)identifier forModeIdentifier:(id)identifier withError:(id *)error;
- (id)remoteServiceProvider:(id)provider getSystemActionsForModeIdentifier:(id)identifier withError:(id *)error;
- (void)meDeviceService:(id)service didReceiveMeDeviceStateUpdate:(id)update;
- (void)reachabilityChangedTo:(BOOL)to;
- (void)_queue_resume;
- (void)_queue_updateScheduleManagerLifetimeMonitorsAndStateForReason:(unsigned long long)reason source:(long long)source;
- (void)_queue_updateScheduleManagerLifetimeMonitorsAndStateForReason:(unsigned long long)reason source:(long long)source options:(long long)options;
- (void)_queue_validateIDSSyncEngine;
- (void)_migrateBypassSettingsIfNeeded;
- (void)_migrateDefaultDoNotDisturbModeIfNeeded;
- (id)_createDefaultModeForWorkoutTriggerIfNecessary;
- (BOOL)_setDimsLockScreenSetting:(unsigned long long)setting forModeConfigurationWithIdentifier:(id)identifier;
- (BOOL)_setScheduleTrigger:(id)trigger forModeConfigurationWithIdentifier:(id)identifier;
- (BOOL)_setDefaultScheduleTriggerWithScheduleSettings:(id)settings;
- (id)_scheduleSettingsForModeConfigurations;
- (id)_scheduleSettingsFromDefaultScheduleTrigger;
- (id)_scheduleSettingsMatchingTrigger:(id)trigger;
- (id)_scheduleTriggerMatchingSettings:(id)settings;
- (id)_stateSystemSnapshot;
- (id)_activeDateIntervalForModeAssertion:(id)assertion currentlyActive:(BOOL)active;
- (void)_forceConfigurationSyncIfNeededWithUpdateResult:(id)result;
- (id)_updateModeAssertionManagerAndRefreshLifetimesAndStateWithHandler:(id /* block */)handler error:(id *)error;
- (id)_allModes;
- (void)_queue_handlePairedDeviceAndSyncSettingsChange;
- (BOOL)layoutIsLocked:(id)locked;
@end

#endif /* DNDSServer_h */
