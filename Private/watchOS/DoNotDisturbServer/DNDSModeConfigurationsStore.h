//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 371.14.0.0.0
//
#ifndef DNDSModeConfigurationsStore_h
#define DNDSModeConfigurationsStore_h
@import Foundation;

#include "DNDSBackingStore-Protocol.h"
#include "DNDSCachedBackingStoreDelegate-Protocol.h"
#include "DNDSContactMonitorListener-Protocol.h"
#include "DNDSContactMonitoring-Protocol.h"
#include "DNDSIDSSyncEngine.h"
#include "DNDSIDSSyncEngineDataSource-Protocol.h"
#include "DNDSModeConfigurationsStoreDelegate-Protocol.h"
#include "DNDSModeConfigurationsStoring-Protocol.h"
#include "DNDSSyncEngine.h"
#include "DNDSSyncEngineDataSource-Protocol.h"

@class NSData, NSMutableSet, NSNumber, NSSet, NSString;

@interface DNDSModeConfigurationsStore : NSObject<DNDSCachedBackingStoreDelegate, DNDSSyncEngineDataSource, DNDSIDSSyncEngineDataSource, DNDSModeConfigurationsStoring, DNDSContactMonitorListener> {
  /* instance variables */
  NSObject<DNDSBackingStore> *_backingStore;
  NSObject<DNDSContactMonitoring> *_contactMonitor;
  DNDSSyncEngine *_syncEngine;
  DNDSIDSSyncEngine *_idsSyncEngine;
  NSMutableSet *_ckRecordIDsToForceSave;
  NSMutableSet *_idsRecordIDsToForceSave;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (retain, nonatomic) NSNumber *compatibilityVersion;
@property (weak, nonatomic) NSObject<DNDSModeConfigurationsStoreDelegate> *delegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy, nonatomic) NSData *contactHistoryToken;
@property (readonly, copy, nonatomic) NSSet *monitoredContacts;

/* instance methods */
- (id)initWithBackingStore:(id)store syncEngine:(id)engine idsSyncEngine:(id)engine;
- (id)readRecordWithError:(id *)error;
- (unsigned long long)writeRecord:(id)record error:(id *)error;
- (unsigned long long)writeRecord:(id)record writePartition:(BOOL)partition error:(id *)error;
- (id)backingStore:(id)store migrateDictionaryRepresentation:(id)representation fromVersionNumber:(unsigned long long)number toVersionNumber:(unsigned long long)number;
- (void)cachedBackingStoreDidPurgeCache:(id)cache;
- (long long)syncEngine:(id)engine wantsRecord:(id)record;
- (BOOL)_lock_mergeLocalConfigurationRecord:(id)record withRemoteConfigurationRecord:(id)record modeIdentifier:(id)identifier sourceDeviceIdentifier:(id)identifier sourceFrameworkVersion:(struct { long long x0; long long x1; long long x2; })version sourceIsCloud:(BOOL)cloud sourceWantsToForce:(BOOL)force deleteModeOnCorruption:(BOOL)corruption;
- (BOOL)_lock_mergeLocalConfigurationRecord:(id)record withRemoteCKRecord:(id)ckrecord deleteModeOnCorruption:(BOOL)corruption;
- (void)syncEngine:(id)engine didFetchRecord:(id)record;
- (void)syncEngine:(id)engine failedToDeleteRecordWithID:(id)id error:(id)error;
- (void)syncEngine:(id)engine resolveConflictBetweenClientRecord:(id)record andServerRecord:(id)record;
- (long long)syncEngine:(id)engine prepareRecordToSave:(inout id)save;
- (void)syncEngine:(id)engine recordWithIDWasDeleted:(id)deleted;
- (id)syncEngine:(id)engine recordTypeForRecordID:(id)id;
- (void)syncEngine:(id)engine zoneWithIDWasDeleted:(id)deleted removingRecordIDs:(id)ids;
- (id)recordIDsForSyncEngine:(id)engine;
- (void)purgeRecordsForSyncEngine:(id)engine;
- (void)idsSyncEngine:(id)engine prepareRecordToSave:(inout id)save;
- (void)idsSyncEngine:(id)engine didFetchRecord:(id)record;
- (void)idsSyncEngine:(id)engine recordWithIDWasDeleted:(id)deleted;
- (id)recordIDsForIDSSyncEngine:(id)engine;
- (void)purgeRecordsForIDSSyncEngine:(id)engine;
- (void)contactMonitor:(id)monitor didReceiveUpdatedContactsForContactsWithoutIdentifiers:(id)identifiers;
- (void)contactMonitor:(id)monitor didReceiveUpdatedContacts:(id)contacts deletedContactIdentifiers:(id)identifiers withContactHistoryToken:(id)token;
- (id)_lock_mutableExistingConfigurations;
- (id)_lock_existingConfigurations;
- (BOOL)_lock_populateDNDSIDSRecord:(id)dndsidsrecord;
- (long long)_lock_populateCKRecord:(id)ckrecord lastChanceRecord:(id)record;
- (id)_lock_modeConfigurationForDNDSIDSRecordID:(id)id;
- (id)_lock_modeConfigurationForCKRecordID:(id)id;
- (id)_lock_modeConfigurationForModeIdentifier:(id)identifier;
- (void)_lock_removeModeConfigurationWithCKRecordID:(id)id;
- (void)_lock_removeModeConfigurationWithModeIdentifier:(id)identifier;
- (void)_lock_updateModeConfigurationWithConfiguration:(id)configuration;
- (unsigned long long)_lock_writeRecord:(id)record writePartition:(BOOL)partition error:(id *)error;
- (void)_lock_purgeRecordIDs:(id)ids;
- (void)_lock_purgeData;
- (id)_lock_modeIdentifiers;
- (id)_lock_recordIDsForIDSSyncEngine:(id)engine;
- (void)_notifyDelegateOfAvailableModes;
- (void)_purgeData;
- (void)_purgeRecordIDs:(id)ids;
@end

#endif /* DNDSModeConfigurationsStore_h */
