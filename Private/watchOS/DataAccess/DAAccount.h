//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2653.2.1.0.0
//
#ifndef DAAccount_h
#define DAAccount_h
@import Foundation;

#include "DATaskManager.h"
#include "DATrustHandler.h"

@class ACAccount, DAStatusReport, NSArray, NSData, NSDate, NSMapTable, NSMutableArray, NSMutableDictionary, NSSet, NSString, NSURL;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface DAAccount : NSObject {
  /* instance variables */
  BOOL _hasInitted;
  NSMapTable *_consumers;
  struct __CFURLStorageSession * _storageSession;
  NSObject<OS_xpc_object> *_xpcActivity;
  int _continueCount;
  BOOL _isFetchingAutomatically;
}

@property (retain, nonatomic) NSMutableDictionary *dataclassPropertyURLsByDataclass;
@property (retain, nonatomic) DAStatusReport *statusReport;
@property (retain, nonatomic) DATrustHandler *trustHandler;
@property (nonatomic) BOOL shouldUseOpportunisticSockets;
@property (nonatomic) BOOL wasUserInitiated;
@property (retain, nonatomic) NSMutableArray *pendingQueries;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *pendingQueryQueue;
@property (retain, nonatomic) NSDate *lastQueryStartedTime;
@property (readonly, nonatomic) NSString *accountID;
@property (nonatomic) int daAccountVersion;
@property (readonly, copy, nonatomic) NSString *persistentUUID;
@property (copy, nonatomic) NSString *accountDescription;
@property (readonly, nonatomic) NSString *publicDescription;
@property (copy, nonatomic) NSString *username;
@property (copy, nonatomic) NSString *user;
@property (copy, nonatomic) NSString *host;
@property (readonly, nonatomic) NSString *hostWithoutPath;
@property (nonatomic) long long port;
@property (copy, nonatomic) NSString *password;
@property (nonatomic) BOOL useSSL;
@property (readonly, nonatomic) long long enabledDataclassesBitmask;
@property (readonly, nonatomic) BOOL isChildAccount;
@property (readonly, nonatomic) ACAccount *backingAccountInfo;
@property (readonly, nonatomic) DATaskManager *taskManager;
@property (readonly, nonatomic) NSString *changeTrackingID;
@property (readonly, nonatomic) int keychainAccessibilityType;
@property (readonly, nonatomic) NSString *scheduleIdentifier;
@property (retain, nonatomic) NSData *signingIdentityPersistentReference;
@property (retain, nonatomic) NSData *encryptionIdentityPersistentReference;
@property (nonatomic) BOOL shouldDoInitialAutodiscovery;
@property (readonly, nonatomic) BOOL shouldAutodiscoverAccountProperties;
@property (readonly, copy, nonatomic) NSString *scheme;
@property (copy, nonatomic) NSURL *principalURL;
@property (copy, nonatomic) NSString *principalPath;
@property (readonly, copy, nonatomic) NSString *clientToken;
@property (copy, nonatomic) NSString *emailAddress;
@property (copy, nonatomic) NSArray *emailAddresses;
@property (readonly, nonatomic) NSString *preferredAddress;
@property (readonly, nonatomic) NSArray *appIdsForPasswordPrompt;
@property (readonly, nonatomic) BOOL shouldFailAllTasks;
@property (readonly, copy, nonatomic) NSData *identityPersist;
@property (nonatomic) BOOL isValidating;
@property (readonly, nonatomic) NSString *userAgentHeader;
@property (readonly, nonatomic) NSSet *serverComplianceClasses;
@property (readonly, nonatomic) NSString *serverRoot;
@property (copy, nonatomic) NSString *sourceApplicationBundleIdentifier;

/* class methods */
+ (id)_leafAccountTypes;
+ (id)_leafAccountTypes;
+ (id)oneshotListOfAccountIDs;
+ (void)reacquireClientRestrictions:(id)restrictions;
+ (id)daAccountSubclassWithBackingAccountInfo:(id)info;
+ (BOOL)shouldCreateAccountForBackingAccountInfo:(id)info;

/* instance methods */
- (id)defaultNotesFolder;
- (id)notesFolders;
- (void)synchronizeNotesFolder:(id)folder noteContext:(id)context previousTag:(id)tag actions:(id)actions changeSet:(id)set notesToDeleteAfterSync:(id)sync isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed moreLocalChangesAvailable:(BOOL)available consumer:(id)consumer;
- (id)defaultToDosFolder;
- (id)toDosFolders;
- (void)synchronizeToDosFolder:(id)folder previousTag:(id)tag actions:(id)actions highestIdContext:(id)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed moreLocalChangesAvailable:(BOOL)available consumer:(id)consumer;
- (int)toDosNumberOfPastDaysToSync;
- (void)setToDosNumberOfPastDaysToSync:(int)sync;
- (void)_reallyPerformSearchQuery:(id)query;
- (void)_reallyCancelSearchQuery:(id)query;
- (void)_reallyCancelPendingSearchQuery:(id)query;
- (void)_reallyCancelAllSearchQueries;
- (BOOL)_reallySearchQueriesRunning;
- (id)getPendingQueryQueue;
- (void)_dequeueQuery;
- (void)performSearchQuery:(id)query;
- (void)cancelSearchQuery:(id)query;
- (void)cancelAllSearchQueries;
- (BOOL)searchQueriesRunning;
- (int)supportsMailboxSearch;
- (int)supportsEmailFlagging;
- (void)updateOofSettingsWithParams:(id)params consumer:(id)consumer;
- (void)retrieveOofSettingsForConsumer:(id)consumer;
- (BOOL)isOofSupported;
- (BOOL)reattemptInvitationLinkageForMetaData:(id)data inFolderWithId:(id)id;
- (id)unactionableICSRepresentationForMetaData:(id)data inFolderWithId:(id)id outSummary:(id *)summary;
- (id)inboxFolder;
- (id)sentItemsFolder;
- (id)deletedItemsFolder;
- (id)draftsFolder;
- (id)defaultContactsFolder;
- (id)contactsFolders;
- (void)synchronizeContactsFolder:(id)folder previousTag:(id)tag previousSyncToken:(id)token actions:(id)actions highestIdContext:(id)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed previousTagIsSuspect:(BOOL)suspect moreLocalChangesAvailable:(BOOL)available consumer:(id)consumer;
- (id)defaultEventsFolder;
- (id)eventsFolders;
- (void)synchronizeEventsFolder:(id)folder previousTag:(id)tag actions:(id)actions highestIdContext:(id)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed moreLocalChangesAvailable:(BOOL)available consumer:(id)consumer;
- (BOOL)sendEmailsForCalEvents:(id)events consumer:(id)consumer;
- (id)beginDownloadingAttachmentWithUUID:(id)uuid consumer:(id)consumer;
- (void)cancelDownloadingInstance:(id)instance error:(id)error;
- (id)requestCalendarAvailabilityForStartDate:(id)date endDate:(id)date ignoredEventID:(id)id addresses:(id)addresses consumer:(id)consumer;
- (void)cancelCalendarAvailabilityRequestWithID:(id)id;
- (id)requestGrantedDelegatesListWithConsumer:(id)consumer;
- (void)cancelGrantedDelegatesListRequestWithID:(id)id;
- (id)updateGrantedDelegatePermission:(id)permission consumer:(id)consumer;
- (void)cancelUpdateGrantedDelegatePermissionRequestWithID:(id)id;
- (id)performCalendarDirectorySearchForTerms:(id)terms recordTypes:(id)types resultLimit:(unsigned long long)limit consumer:(id)consumer;
- (void)performGroupExpansionForPrincipalPath:(id)path consumer:(id)consumer;
- (void)cancelCalendarDirectorySearchWithID:(id)id;
- (id)respondToShareRequestForCalendar:(id)calendar withResponse:(long long)response consumer:(id)consumer;
- (id)reportShareRequestAsJunkForCalendar:(id)calendar consumer:(id)consumer;
- (void)cancelShareResponseInstance:(id)instance error:(id)error;
- (id)fetchOfficeHoursWithConsumer:(id)consumer error:(id *)error;
- (id)setOfficeHours:(id)hours withConsumer:(id)consumer error:(id *)error;
- (void)cancelOfficeHoursRequestWithID:(id)id;
- (BOOL)accountHasSignificantPropertyChangesFromOldAccountInfo:(id)info;
- (void)accountDidChangeFromOldAccountInfo:(id)info;
- (id)localizedIdenticalAccountFailureMessage;
- (id)localizedInvalidPasswordMessage;
- (void)dropAssertionsAndRenewCredentialsInQueue:(id)queue withHandler:(id /* block */)handler;
- (void)_webLoginRequestedAtURL:(id)url reasonString:(id)string inQueue:(id)queue completionBlock:(id /* block */)block;
- (void)webLoginRequestedAtURL:(id)url reasonString:(id)string inQueue:(id)queue completionBlock:(id /* block */)block;
- (void)handleValidationError:(id)error completion:(id /* block */)completion;
- (void)addToCoreDAVLoggingDelegates;
- (void)removeFromCoreDAVLoggingDelegates;
- (id)getAppleIDSession;
- (BOOL)handleTrustChallenge:(id)challenge;
- (BOOL)handleTrustChallenge:(id)challenge completionHandler:(id /* block */)handler;
- (void)dealloc;
- (id)initWithBackingAccountInfo:(id)info;
- (void)_refreshCredential;
- (void)ingestBackingAccountInfoProperties;
- (id)accountsProviderWithDBHelper:(id)dbhelper;
- (id)containerProviderWithDBHelper:(id)dbhelper;
- (void)setDAAccountVersion:(int)version;
- (BOOL)upgradeAccount;
- (void)resetAccountID;
- (id)syncStoreIdentifier;
- (void)_setPersistentUUID:(id)uuid;
- (id)redactedDescription;
- (id)displayName;
- (BOOL)isDisabled;
- (BOOL)isEnabledForDataclass:(id)dataclass;
- (void)setEnabled:(BOOL)enabled forDataclass:(id)dataclass;
- (BOOL)enabledForAnyDADataclasses:(long long)dadataclasses;
- (BOOL)enabledForDADataclass:(long long)dadataclass;
- (void)setEnabled:(BOOL)enabled forDADataclass:(long long)dadataclass;
- (id)dataclassProperties;
- (id)spinnerIdentifiers;
- (id)accountPropertyForKey:(id)key;
- (void)setAccountProperty:(id)property forKey:(id)key;
- (void)removeAccountPropertyForKey:(id)key;
- (void)setObject:(id)object forKeyedSubscript:(id)subscript;
- (id)objectForKeyedSubscript:(id)subscript;
- (BOOL)accountBoolPropertyForKey:(id)key;
- (void)setAccountBoolProperty:(BOOL)property forKey:(id)key;
- (int)accountIntPropertyForKey:(id)key;
- (void)setAccountIntProperty:(int)property forKey:(id)key;
- (void)resumeMonitoringFoldersWithIDs:(id)ids;
- (void)suspendMonitoringFoldersWithIDs:(id)ids;
- (void)stopMonitoringFolderWithID:(id)id;
- (id)stateString;
- (void)setConsumer:(id)consumer forTask:(id)task;
- (id)consumerForTask:(id)task;
- (void)removeConsumerForTask:(id)task;
- (void)clientTokenRequestedByServer;
- (id)passwordWithExpected:(BOOL)expected;
- (void)performUsingAccountPersona:(id /* block */)persona;
- (id)urlFromDataclassPropertiesForDataclass:(id)dataclass;
- (id)hostFromDataclassPropertiesForDataclass:(id)dataclass;
- (BOOL)useSSLFromDataclassPropertiesForDataclass:(id)dataclass;
- (long long)portFromDataclassPropertiesForDataclass:(id)dataclass;
- (id)usernameWithoutDomain;
- (id)domainOnly;
- (BOOL)accountContainsEmailAddress:(id)address;
- (void)checkValidityOnAccountStore:(id)store withConsumer:(id)consumer;
- (void)checkValidityOnAccountStore:(id)store withConsumer:(id)consumer inQueue:(id)queue;
- (BOOL)saveModifiedPropertiesOnBackingAccount;
- (void)discoverInitialPropertiesWithConsumer:(id)consumer;
- (BOOL)autodiscoverAccountConfigurationWithConsumer:(id)consumer;
- (id)onBehalfOfBundleIdentifier;
- (BOOL)shouldRemoveDBSyncDataOnAccountChange;
- (void)removeDBSyncDataForAccountChange:(id)change;
- (void)accountDidChangeWithChangeInfo:(id)info;
- (void)_handleSignificantPropertyChanges:(id)changes;
- (BOOL)handleCertificateError:(id)error;
- (id)additionalHeaderValues;
- (id)customConnectionProperties;
- (id)oauth2Token;
- (id)oauthInfoProvider;
- (void)tearDown;
- (BOOL)monitorFoldersWithIDs:(id)ids;
- (BOOL)monitorFolderWithID:(id)id;
- (void)stopMonitoringFoldersWithIDs:(id)ids;
- (void)stopMonitoringFolders;
- (id)defaultContainerIdentifierForDADataclass:(long long)dadataclass;
- (void)removeClientCertificateData;
- (BOOL)saveAccountPropertiesWithError:(id *)error;
- (BOOL)saveAccountProperties;
- (void)updateExistingAccountProperties;
- (id)addUsernameToURL:(id)url;
- (BOOL)preflightSaveWithAccountProvider:(id /* block */)provider;
- (BOOL)canSaveWithAccountProvider:(id /* block */)provider;
- (void)setIdentityCertificatePersistentID:(id)id managedByProfile:(BOOL)profile;
- (BOOL)_isIdentityManagedByProfile;
- (id)exceptionsDict;
- (struct __CFData *)exceptionsForDigest:(id)digest;
- (void)setExceptions:(struct __CFData *)exceptions forDigest:(id)digest;
- (void)cleanupAccountFiles;
- (BOOL)resetCertWarnings;
- (void)resetStatusReport;
- (BOOL)isEqualToAccount:(id)account;
- (BOOL)accountHasSignificantPropertyChangesWithChangeInfo:(id)info;
- (BOOL)isActiveSyncAccount;
- (BOOL)isLDAPAccount;
- (BOOL)isCalDAVAccount;
- (BOOL)isCardDAVAccount;
- (BOOL)isDelegateAccount;
- (BOOL)isCalDAVChildAccount;
- (BOOL)isHotmailAccount;
- (BOOL)isGoogleAccount;
- (BOOL)isSubscribedCalendarAccount;
- (struct __CFURLStorageSession *)copyStorageSession;
- (id)description;
- (void)shutdown;
- (void)reload;
- (id)protocolVersion;
- (id)accountTypeIdentifier;
- (BOOL)shouldCancelTaskDueToOnPowerFetchMode;
- (void)saveXpcActivity:(id)activity;
- (BOOL)hasXpcActivity;
- (void)incrementXpcActivityContinueCount;
- (void)decrementXpcActivityContinueCount;
- (void)removeXpcActivity;
- (void)saveFetchingAutomaticallyState:(BOOL)state;
- (BOOL)getFetchingAutomaticallyState;
@end

#endif /* DAAccount_h */
