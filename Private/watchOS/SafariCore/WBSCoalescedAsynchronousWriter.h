//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WBSCoalescedAsynchronousWriter_h
#define WBSCoalescedAsynchronousWriter_h
@import Foundation;

@class NSDictionary, NSString, NSURL;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source, WBSCoalescedAsynchronousWriterDelegate, {unique_ptr<SafariShared::SuddenTerminationDisabler, std::default_delete<SafariShared::SuddenTerminationDisabler>>="__ptr_"{__compressed_pair<SafariShared::SuddenTerminationDisabler *, std::default_delete<SafariShared::SuddenTerminationDisabler>>="__value_"^{SuddenTerminationDisabler}}};

@interface WBSCoalescedAsynchronousWriter : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_diskAccessQueue;
  NSURL *_fileURL;
  id /* block */ _writerBlock;
  id /* block */ _dataSourceBlock;
  NSObject<OS_dispatch_queue> *_dataSourceQueue;
  NSDictionary *_fileResourceValues;
  id /* block */ _plistDictionarySourceBlock;
  unsigned long long _plistFormat;
  NSObject<OS_dispatch_queue> *_internalQueue;
  NSObject<OS_dispatch_source> *_timer;
  double _writeDelayInterval;
  NSObject<OS_dispatch_group> *_writeGroup;
  struct unique_ptr<SafariShared::SuddenTerminationDisabler, std::default_delete<SafariShared::SuddenTerminationDisabler>> { struct __compressed_pair<SafariShared::SuddenTerminationDisabler *, std::default_delete<SafariShared::SuddenTerminationDisabler>> { struct SuddenTerminationDisabler *__value_; } __ptr_; } _suddenTerminationDisabler;
  BOOL _done;
  NSString *_name;
}

@property (weak, nonatomic) NSObject<WBSCoalescedAsynchronousWriterDelegate> *delegate;

/* instance methods */
- (id)initWithName:(id)name fileURL:(id)url dataSourceBlock:(id /* block */)block;
- (id)initWithName:(id)name fileURL:(id)url dataSourceBlock:(id /* block */)block writeDelayInterval:(double)interval;
- (id)initWithName:(id)name writerBlock:(id /* block */)block dataSourceBlock:(id /* block */)block;
- (id)initWithName:(id)name fileURL:(id)url dataSourceQueue:(id)queue dataSourceBlock:(id /* block */)block;
- (id)initWithName:(id)name fileURL:(id)url dataSourceQueue:(id)queue dataSourceBlock:(id /* block */)block fileResourceValues:(id)values;
- (id)initWithName:(id)name writerBlock:(id /* block */)block dataSourceQueue:(id)queue dataSourceBlock:(id /* block */)block;
- (id)initWithName:(id)name fileURL:(id)url dataSourceQueue:(id)queue plistFormat:(unsigned long long)format plistDictionarySourceBlock:(id /* block */)block;
- (id)initWithName:(id)name writerBlock:(id /* block */)block dataSourceQueue:(id)queue plistFormat:(unsigned long long)format plistDictionarySourceBlock:(id /* block */)block;
- (id)_initWithName:(id)name fileURL:(id)url writerBlock:(id /* block */)block dataSourceQueue:(id)queue dataSourceBlock:(id /* block */)block writeDelayInterval:(double)interval fileResourceValues:(id)values;
- (id)_initWithName:(id)name fileURL:(id)url writerBlock:(id /* block */)block dataSourceQueue:(id)queue dataSourceBlock:(id /* block */)block plistDictionarySourceBlock:(id /* block */)block plistFormat:(unsigned long long)format writeDelayInterval:(double)interval fileResourceValues:(id)values;
- (void)dealloc;
- (void)_invalidateTimer;
- (void)_timerFired;
- (void)_scheduleTimer;
- (id)_dataFromDataSourceOnDataSourceQueue;
- (id)_plistDictionaryFromDataSourceOnDataSourceQueue;
- (id)_dataForPlistDictionary:(id)dictionary;
- (id)_synchronousDataOnDataSourceQueue;
- (void)_waitForWriteCompletion;
- (void)_writeData:(id)data;
- (void)_asynchronouslyWriteData:(id)data orPlistDictionary:(id)dictionary completionHandler:(id /* block */)handler;
- (void)_cancelPendingWriteSynchronouslyLeavingSuddenTerminationIntact;
- (void)scheduleWrite;
- (void)startScheduledWriteNow;
- (void)startScheduledWriteNowWithCompletionHandler:(id /* block */)handler;
- (void)performScheduledWriteSynchronously;
- (void)completePendingWriteSynchronously;
- (void)cancelPendingWriteSynchronously;
@end

#endif /* WBSCoalescedAsynchronousWriter_h */
