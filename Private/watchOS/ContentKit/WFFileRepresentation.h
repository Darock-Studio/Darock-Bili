//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2206.0.5.0.0
//
#ifndef WFFileRepresentation_h
#define WFFileRepresentation_h
@import Foundation;

#include "WFRepresentation.h"

@class NSData, NSDate, NSString, NSURL, WFFileType;

@interface WFFileRepresentation : WFRepresentation

@property (retain, nonatomic) NSString *filename;
@property (readonly, nonatomic) NSString *wfName;
@property (readonly, nonatomic) WFFileType *wfType;
@property (readonly, nonatomic) NSDate *creationDate;
@property (readonly, nonatomic) NSDate *modificationDate;
@property (readonly, nonatomic) NSURL *originalURL;
@property (readonly, nonatomic) long long fileSize;
@property (readonly, nonatomic) NSData *data;
@property (readonly, nonatomic) NSURL *fileURL;
@property (readonly, nonatomic) long long representationType;
@property (readonly, nonatomic) BOOL deletesFileOnDeallocation;
@property (readonly, nonatomic) BOOL securityScopedResource;
@property (readonly, nonatomic) BOOL isTemporaryFile;

/* class methods */
+ (id)fileWithData:(id)data ofType:(id)type proposedFilename:(id)filename;
+ (id)fileWithData:(id)data ofType:(id)type proposedFilename:(id)filename originalURL:(id)url;
+ (id)fileWithURL:(id)url options:(long long)options;
+ (id)fileWithURL:(id)url options:(long long)options ofType:(id)type;
+ (id)fileWithURL:(id)url options:(long long)options ofType:(id)type proposedFilename:(id)filename;
+ (id)fileWithURL:(id)url options:(long long)options ofType:(id)type proposedFilename:(id)filename originalURL:(id)url;
+ (id)disallowedDirectoryURLs;
+ (void)addDisallowedDirectory:(id)directory;
+ (BOOL)sandboxAllowsRepresentingFileURL:(id)url;
+ (BOOL)fileIsInDisallowedDirectory:(id)directory;
+ (BOOL)isAllowedToRepresentFileURL:(id)url;
+ (id)typeOfData:(id)data;
+ (id)typeOfFile:(id)file;
+ (id)sanitizedFilename:(id)filename withExtension:(id)extension;
+ (id)sanitizedFilename:(id)filename withExtension:(id)extension unsanitizedName:(id *)name;
+ (id)proposedFilenameForFile:(id)file ofType:(id)type;
+ (id)proposedFilenameForFile:(id)file ofType:(id)type unsanitizedName:(id *)name;
+ (BOOL)coordinateFileOperation:(unsigned long long)operation shouldCoordinate:(BOOL)coordinate fileURL:(id)url destinationURL:(id)url accessor:(id /* block */)accessor;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)initWithData:(id)data ofType:(id)type proposedFilename:(id)filename originalURL:(id)url;
- (id)initWithFileURL:(id)url options:(long long)options ofType:(id)type proposedFilename:(id)filename originalURL:(id)url;
- (void)dealloc;
- (BOOL)writeToTemporaryFileURL:(id)url error:(id *)error;
- (BOOL)writeToFileURL:(id)url copy:(BOOL)copy overwrite:(BOOL)overwrite error:(id *)error;
- (BOOL)writeToFileURL:(id)url overwriting:(BOOL)overwriting error:(id *)error;
- (BOOL)atomicReplaceAcrossVolumesIfNeededWithURLForReplacing:(id)replacing sourceURL:(id)url error:(id *)error;
- (id)inputStream;
- (id)mappedData;
- (id)mappedDataWithError:(id *)error;
- (id)description;
- (id)typeForUserEnteredName:(id)name addingExtensionIfNecessary:(BOOL)necessary;
- (id)updatedFilenameForUserEnteredName:(id)name addingExtensionIfNecessary:(BOOL)necessary;
- (id)copyWithName:(id)name zone:(struct _NSZone *)zone;
- (id)copyWithName:(id)name addingExtensionIfNecessary:(BOOL)necessary zone:(struct _NSZone *)zone;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)isEncodable;
@end

#endif /* WFFileRepresentation_h */
