//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.23.5.2.1
//
#ifndef AFMyriadMonitor_h
#define AFMyriadMonitor_h
@import Foundation;

#include "AFInstanceContext.h"
#include "AFNotifyObserver.h"
#include "AFNotifyObserverDelegate-Protocol.h"
#include "AFQueue.h"
#include "AFWatchdogTimer.h"

@class NSString;
@protocol OS_dispatch_queue;

@interface AFMyriadMonitor : NSObject<AFNotifyObserverDelegate> {
  /* instance variables */
  long long _state;
  AFInstanceContext *_instanceContext;
  AFQueue *_completions;
  AFNotifyObserver *_beginObserver;
  AFNotifyObserver *_wonObserver;
  AFNotifyObserver *_lostObserver;
  AFNotifyObserver *_repostedWonObserver;
  AFWatchdogTimer *_timer;
  AFWatchdogTimer *_fetchRepostedMyriadDecisionTimer;
  NSObject<OS_dispatch_queue> *_myriadMonitorQueue;
  double _myriadEventMonitorTimeout;
  BOOL _isRegisteredForMyriadEventNotification;
  BOOL _ignoreMyriadEvents;
  BOOL _isMonitoring;
  BOOL _ignoreRepostMyriadNotification;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedMonitor;

/* instance methods */
- (id)init;
- (void)waitForMyriadDecisionWithCompletion:(id /* block */)completion;
- (void)_enqueueBlock:(id /* block */)block forReason:(id)reason;
- (void)waitForMyriadDecisionForReason:(id)reason withCompletion:(id /* block */)completion;
- (void)startMonitoringWithTimeoutInterval:(double)interval;
- (void)startMonitoringWithTimeoutInterval:(double)interval instanceContext:(id)context;
- (void)ignoreMyriadEvents:(BOOL)events;
- (void)dequeueBlocksWaitingForMyriadDecision;
- (void)stopMonitoring;
- (BOOL)isMonitoring;
- (BOOL)didWin;
- (void)dealloc;
- (id)_myriadStateToString:(long long)string;
- (void)_registerForMyriadEvents;
- (void)_cancelRepostedMyriadDecisionTimer;
- (id)_fetchCurrentMyriadDecisionWithWaitTime:(double)time;
- (void)_deregisterFromMyriadEventNotifications;
- (void)_deregisterFromRepostedDecisionResultsObservers;
- (void)notifyObserver:(id)observer didReceiveNotificationWithToken:(int)token;
- (void)notifyObserver:(id)observer didChangeStateFrom:(unsigned long long)from to:(unsigned long long)to;
- (void)_setDecisionIsPending;
- (void)_dequeueBlocksWithSignal:(long long)signal;
- (void)_clear;
- (void)_flushCompletions:(BOOL)completions;
- (void)_resultSeenWithValue:(BOOL)value;
- (void)_ignoreRepostMyriadNotification:(BOOL)notification;
@end

#endif /* AFMyriadMonitor_h */
