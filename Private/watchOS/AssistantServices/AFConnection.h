//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.23.5.2.1
//
#ifndef AFConnection_h
#define AFConnection_h
@import Foundation;

#include "AFAccessibilityListening-Protocol.h"
#include "AFAnalytics.h"
#include "AFAudioPowerUpdater.h"
#include "AFAudioPowerUpdaterDelegate-Protocol.h"
#include "AFCallSiteInfo.h"
#include "AFClientConfiguration.h"
#include "AFDeviceRingerSwitchListening-Protocol.h"
#include "AFInstanceContext.h"
#include "AFInterstitialProvider.h"
#include "AFInterstitialProviderDelegate-Protocol.h"
#include "AFOneArgumentSafetyBlock.h"
#include "AFPreferences.h"
#include "AFQueue.h"
#include "AFSiriClientStateManager.h"
#include "AFWatchdogTimer.h"
#include "NSXPCListenerDelegate-Protocol.h"

@class NSArray, NSError, NSMutableDictionary, NSString, NSUUID, NSXPCConnection;
@protocol AFAssistantUIService, AFSpeechDelegate, OS_dispatch_group, OS_dispatch_queue;

@interface AFConnection : NSObject<NSXPCListenerDelegate, AFAudioPowerUpdaterDelegate, AFAccessibilityListening, AFDeviceRingerSwitchListening, AFInterstitialProviderDelegate> {
  /* instance variables */
  NSXPCConnection *_connection;
  NSObject<OS_dispatch_queue> *_targetQueue;
  NSString *_outstandingRequestClass;
  void * _clientID;
  AFCallSiteInfo *_initiationCallSiteInfo;
  NSArray *_cachedBulletins;
  NSUUID *_activeRequestUUID;
  long long _activeRequestType;
  long long _activeRequestUsefulUserResultType;
  AFWatchdogTimer *_requestTimeoutTimer;
  AFOneArgumentSafetyBlock *_requestCompletion;
  long long _activeRequestActivationEvent;
  long long _activeRequestSpeechEvent;
  int _activeRequestTypeForRequestCategorization;
  BOOL _activeRequestHasSpeechRecognition;
  BOOL _activeRequestIsDucking;
  BOOL _activeRequestIsTwoShot;
  double _activeRequestBeginTime;
  unsigned long long _activeRequestSpeechEndHostTime;
  unsigned long long _activeRequestNumberOfPresentedInterstitials;
  double _activeRequestStartSpeechTimeRequested;
  double _activeRequestStartSpeechTimeAPICalled;
  double _activeRequestStopSpeechTimeRequested;
  double _activeRequestStopSpeechTimeAPICalled;
  double _activeRequestSpeechRecordingEndTimeInterval;
  double _activeRequestSpeechRecognitionTimeInterval;
  double _activeRequestInitialInterstitialBeginTimeInterval;
  NSUUID *_activeTurnIdentifier;
  NSMutableDictionary *_replyHandlerForAceId;
  unsigned int x :1 _stateInSync;
  unsigned int x :1 _shouldSpeak;
  unsigned int x :1 _isCapturingSpeech;
  unsigned int x :1 _hasOutstandingRequest;
  unsigned int _audioSessionID;
  NSString *_recordRoute;
  NSString *_playbackRoute;
  AFAudioPowerUpdater *_inputAudioPowerUpdater;
  AFClientConfiguration *_clientConfiguration;
  AFInterstitialProvider *_interstitialProvider;
  AFQueue *_interstitialCommandQueue;
  unsigned int x :1 _clientConfigurationIsInSync;
  unsigned int x :1 _voiceOverIsActive;
  NSError *_lastRetryError;
  unsigned long long _pendingSpeechRequestCounter;
  NSObject<OS_dispatch_group> *_speechCallbackGroup;
  unsigned long long _uufrID;
  AFPreferences *_preferences;
  AFInstanceContext *_instanceContext;
  AFAnalytics *_analytics;
  AFSiriClientStateManager *_siriClientStateManager;
  atomic unsigned long long _activePlaybackCount;
}

@property (weak, nonatomic) NSObject<AFAssistantUIService> *delegate;
@property (weak, nonatomic) NSObject<AFSpeechDelegate> *speechDelegate;
@property (readonly, nonatomic) BOOL isRecording;
@property (readonly, nonatomic) BOOL hasActiveRequest;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)userDataSyncNeeded;
+ (void)initialize;
+ (BOOL)assistantIsSupportedForLanguageCode:(id)code error:(id *)error;
+ (BOOL)siriIsSupportedForLanguageCode:(id)code deviceProductVersion:(id)version error:(id *)error;
+ (BOOL)siriIsSupportedForLanguageCode:(id)code productName:(id)name productVersion:(id)version error:(id *)error;
+ (BOOL)assistantIsSupported;
+ (void)beginMonitoringAvailability;
+ (BOOL)isNetworkAvailable;
+ (BOOL)isAvailable;
+ (void)stopMonitoringAvailability;
+ (id)currentLanguageCode;
+ (id)outputVoice;
+ (void)defrost;

/* instance methods */
- (id)_activeRequestUUID;
- (void)_barrier;
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;
- (id)_clientService;
- (id)_clientServiceWithErrorHandler:(id /* block */)handler;
- (id)_cachedBulletins;
- (id)_clientConfiguration;
- (void)startUIRequest;
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url;
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url isNarrowBand:(BOOL)band;
- (void)requestBarrier:(id /* block */)barrier;
- (void)sendFeedbackToAppPreferencesPredictorForMetricsContext:(id)context selectedBundleId:(id)id;
- (void)broadcastCommandDictionary:(id)dictionary;
- (id)initWithTargetQueue:(id)queue instanceContext:(id)context;
- (id)initWithTargetQueue:(id)queue;
- (id)init;
- (void)dealloc;
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;
- (void)_requestWillBeginWithRequestClass:(id)class isSpeechRequest:(BOOL)request speechRequestOptions:(id)options requestInfo:(id)info analyticsEventProvider:(id /* block */)provider;
- (void)_requestWillBeginWithRequestClass:(id)class isSpeechRequest:(BOOL)request speechRequestOptions:(id)options requestInfo:(id)info isBackgroundRequest:(BOOL)request analyticsEventProvider:(id /* block */)provider;
- (void)_requestDidEnd;
- (void)_startUIRequestWithText:(id)text completion:(id /* block */)completion;
- (void)_startUIRequestWithInfo:(id)info completion:(id /* block */)completion;
- (void)_handleCommand:(id)command reply:(id /* block */)reply;
- (void)_dispatchCommand:(id)command isInterstitial:(BOOL)interstitial interstitialPhase:(long long)phase interstitialDelay:(double)delay reply:(id /* block */)reply;
- (void)_setShouldSpeak:(BOOL)speak;
- (void)_aceConnectionWillRetryOnError:(id)error;
- (BOOL)_startInputAudioPowerUpdatesWithXPCWrapper:(id)xpcwrapper;
- (void)_stopInputAudioPowerUpdates;
- (void)_setAudioSessionID:(unsigned int)id;
- (void)_setRecordRoute:(id)route;
- (void)_markIsDucking;
- (void)_markIsTwoShot;
- (void)_markSpeechRecognized;
- (void)_updateSpeechEndHostTime:(unsigned long long)time;
- (id)_siriClientStateManager;
- (long long)_getActiveSpeechEvent;
- (void)_tellDelegateRequestWillStart;
- (void)_completeRequestWithUUID:(id)uuid forReason:(long long)reason error:(id)error;
- (void)_tellDelegateShouldSpeakChanged:(BOOL)changed;
- (void)_tellDelegateAudioSessionIDChanged:(unsigned int)idchanged;
- (void)_tellDelegateWillStartAcousticIDRequest;
- (void)_tellDelegateDidDetectMusic;
- (void)_tellDelegateDidFinishAcousticIDRequestWithSuccess:(BOOL)success;
- (void)_tellDelegateSetUserActivityInfo:(id)info webpageURL:(id)url;
- (void)_tellDelegateInvalidateCurrentUserActivity;
- (void)_tellDelegateCacheImage:(id)image;
- (void)_tellDelegateExtensionRequestWillStartForApplication:(id)application;
- (void)_tellDelegateExtensionRequestFinishedForApplication:(id)application error:(id)error;
- (void)_tellDelegateAudioSessionDidBeginInterruptionWithUserInfo:(id)info;
- (void)_tellDelegateAudioSessionDidEndInterruption:(BOOL)interruption userInfo:(id)info;
- (void)_tellDelegateAudioPlaybackRequestWillStart:(id)start;
- (void)_tellDelegateAudioPlaybackRequestDidStart:(id)start;
- (void)_tellDelegateAudioPlaybackRequestDidStop:(id)stop error:(id)error;
- (void)_tellDelegateWillProcessStartPlayback:(long long)playback intent:(id)intent completion:(id /* block */)completion;
- (void)_tellDelegateStartPlaybackDidFail:(long long)fail;
- (void)_tellDelegateAudioSessionWillBecomeActive:(BOOL)active;
- (void)_tellDelegateAudioSessionDidBecomeActive:(BOOL)active;
- (void)_tellDelegateWillProcessAppLaunchWithBundleIdentifier:(id)identifier;
- (void)_tellDelegateFailedToLaunchAppWithBundleIdentifier:(id)identifier;
- (void)_dispatchCallbackGroupBlock:(id /* block */)block;
- (void)_tellSpeechDelegateRecordingWillBeginWithInputAudioPowerXPCWrapper:(id)xpcwrapper;
- (void)_tellSpeechDelegateRecordingDidBeginOnAVRecordRoute:(id)route audioSessionID:(unsigned int)id;
- (void)_tellSpeechDelegateRecordingDidChangeAVRecordRoute:(id)route;
- (void)_tellSpeechDelegateRecordingDidDetectStartpoint;
- (void)_tellSpeechDelegateToPerformTwoShotPromptWithType:(long long)type reply:(id /* block */)reply;
- (void)_tellSpeechDelegateRecordingDidEnd;
- (void)_tellSpeechDelegateRecordingDidCancel;
- (void)_tellSpeechDelegateRecordingDidFail:(id)fail;
- (void)_tellSpeechDelegateSpeechRecognized:(id)recognized;
- (void)_tellSpeechDelegateRecognizedAdditionalSpeechInterpretation:(id)interpretation refId:(id)id;
- (void)_tellSpeechDelegateRecordingDidUpdateRecognitionPhrases:(id)phrases utterances:(id)utterances refId:(id)id;
- (void)_tellSpeechDelegateRecognitionUpdateWillBeginForTask:(id)task;
- (void)_tellSpeechDelegateSpeechRecognizedPartialResult:(id)result;
- (void)_tellSpeechDelegateRecognitionDidFail:(id)fail;
- (void)audioPowerUpdaterDidUpdate:(id)update averagePower:(float)power peakPower:(float)power;
- (void)accessibilityObserver:(id)observer stateDidChangeFrom:(id)from to:(id)to;
- (void)deviceRingerObserver:(id)observer didChangeState:(long long)state;
- (void)interstitialProvider:(id)provider handlePhase:(long long)phase displayText:(id)text speakableText:(id)text expectedDelay:(double)delay context:(id)context completion:(id /* block */)completion;
- (void)_connectionFailedWithError:(id)error;
- (void)_clearConnection;
- (id)_connection;
- (void)_scheduleRequestTimeoutForReason:(id)reason;
- (void)_invokeRequestTimeoutForReason:(id)reason;
- (void)_pauseRequestTimeoutForReason:(id)reason;
- (void)_resumeRequestTimeoutForReason:(id)reason;
- (void)_cancelRequestTimeoutForReason:(id)reason;
- (void)_extendRequestTimeoutForReason:(id)reason;
- (void)_extendExistingRequestTimeoutForReason:(id)reason;
- (void)_updateStateIfNotInSync;
- (void)_fetchShouldSpeak:(id /* block */)speak;
- (void)_updateState;
- (void)_updateClientConfiguration;
- (BOOL)_shouldEmitUEIRequestLinkForRequestInfo:(id)info speechRequestOptions:(id)options;
- (void)_willStartRequestWithSpeech:(BOOL)speech speechRequestOptions:(id)options requestInfo:(id)info analyticsEventProvider:(id /* block */)provider;
- (void)_willEndSession;
- (void)_willCancelRequest;
- (void)_willFailRequestWithError:(id)error;
- (void)_willCompleteRequest;
- (void)_willPresentUsefulUserResultWithType:(long long)type;
- (void)_enqueueInterstitialCommand:(id)command;
- (void)_beginInterstitialsForReason:(id)reason;
- (void)_handleInterstitialPhase:(long long)phase fromProvider:(id)provider displayText:(id)text speakableText:(id)text expectedDelay:(double)delay context:(id)context completion:(id /* block */)completion;
- (void)_endInterstitialsForReason:(id)reason;
- (void)endSession;
- (void)invalidate;
- (void)preheatWithStyle:(long long)style;
- (void)preheatWithStyle:(long long)style forOptions:(id)options;
- (void)boostedPreheatWithStyle:(long long)style completion:(id /* block */)completion;
- (void)forceAudioSessionActive;
- (void)forceAudioSessionActiveWithOptions:(unsigned long long)options completion:(id /* block */)completion;
- (void)forceAudioSessionActiveWithOptions:(unsigned long long)options reason:(long long)reason completion:(id /* block */)completion;
- (void)forceAudioSessionActiveWithOptions:(unsigned long long)options reason:(long long)reason speechRequestOptions:(id)options completion:(id /* block */)completion;
- (void)forceAudioSessionActiveWithContext:(id)context completion:(id /* block */)completion;
- (void)acquireAudioSessionWithContext:(id)context completion:(id /* block */)completion;
- (void)forceAudioSessionInactive;
- (void)forceAudioSessionInactiveWithOptions:(unsigned long long)options completion:(id /* block */)completion;
- (void)resumeInterruptedAudioPlaybackIfNeeded;
- (void)willPresentUI;
- (void)didDismissUI;
- (void)setLockState:(BOOL)state screenLocked:(BOOL)locked;
- (void)setIsDeviceInStarkMode:(BOOL)mode;
- (void)setCarDNDActive:(BOOL)dndactive;
- (void)setModesConfiguration:(id)configuration;
- (void)setAnnouncementRequestsPermittedByPresentationWhileActive:(BOOL)active;
- (void)setWatchAuthenticated:(BOOL)authenticated;
- (void)setAccessibilityState:(id)state;
- (void)setDeviceRingerSwitchState:(long long)state;
- (void)setShouldWaitForMyriad:(BOOL)myriad;
- (void)setMyriadDecisionResult:(BOOL)result;
- (void)setVoiceOverIsActive:(BOOL)active;
- (void)setConfiguration:(id)configuration;
- (void)startRequestWithText:(id)text;
- (void)startDirectActionRequestWithString:(id)string;
- (void)startContinuationRequestWithUserInfo:(id)info;
- (void)startRequestWithAceCommand:(id)command;
- (void)startRequestWithCorrectedText:(id)text forSpeechIdentifier:(id)identifier userSelectionResults:(id)results;
- (void)startRequestWithCorrectedText:(id)text forSpeechIdentifier:(id)identifier userSelectionResults:(id)results turnIdentifier:(id)identifier;
- (void)startRequestWithInfo:(id)info;
- (void)startRequestWithInfo:(id)info activationEvent:(long long)event;
- (void)_startRequestWithInfo:(id)info;
- (id)_startRequestMetricSettings;
- (id)_metricContextValueForUseDeviceSpeakerForTTS:(long long)tts;
- (void)_startRequestWithAceCommand:(id)command turnIdentifier:(id)identifier suppressAlert:(BOOL)alert;
- (void)startSpeechRequestWithOptions:(id)options;
- (void)startRecordingForPendingSpeechRequestWithOptions:(id)options completion:(id /* block */)completion;
- (id /* block */)startRecordingAndGetContinueBlockForPendingSpeechRequestWithOptions:(id)options;
- (void)startSpeechPronunciationRequestWithOptions:(id)options pronunciationContext:(id)context;
- (void)startAcousticIDRequestWithOptions:(id)options;
- (void)cancelSpeech;
- (void)cancelRequest;
- (void)cancelRequestForReason:(long long)reason;
- (void)failRequestWithError:(id)error;
- (void)reportIssueForError:(id)error type:(long long)type context:(id)context;
- (void)reportIssueForError:(id)error type:(long long)type subtype:(id)subtype context:(id)context;
- (void)reportIssueForType:(id)type subtype:(id)subtype context:(id)context;
- (void)stopSpeech;
- (void)stopSpeechWithOptions:(id)options;
- (void)updateSpeechOptions:(id)options;
- (void)recordUIMetrics:(id)uimetrics;
- (void)recordRequestMetric:(id)metric withTimestamp:(double)timestamp;
- (void)rollbackClearContext;
- (void)rollbackRequest;
- (BOOL)shouldSpeak;
- (unsigned int)audioSessionID;
- (float)averagePower;
- (float)peakPower;
- (void)sendGenericAceCommand:(id)command;
- (void)sendGenericAceCommand:(id)command conflictHandler:(id /* block */)handler;
- (void)sendGenericAceCommand:(id)command turnIdentifier:(id)identifier conflictHandler:(id /* block */)handler;
- (void)sendReplyCommand:(id)command;
- (void)getDeferredObjectsWithIdentifiers:(id)identifiers completion:(id /* block */)completion;
- (void)getCachedObjectsWithIdentifiers:(id)identifiers completion:(id /* block */)completion;
- (void)getRemoteClockTimerSnapshotWithCompletion:(id /* block */)completion;
- (void)clearContext;
- (void)willSetApplicationContextWithRefId:(id)id;
- (void)setApplicationContext:(id)context;
- (void)fetchAppicationContextForApplicationInfo:(id)info supplementalContext:(id)context refID:(id)id;
- (void)setApplicationContextForApplicationInfos:(id)infos withRefId:(id)id;
- (void)setApplicationContextForApplicationInfos:(id)infos;
- (void)setOverriddenApplicationContext:(id)context withContext:(id)context;
- (void)setAlertContextWithBulletins:(id)bulletins;
- (void)prepareForPhoneCall;
- (void)telephonyRequestCompleted;
- (void)usefulUserResultWillPresent;
- (void)willPresentUsefulUserResultWithType:(long long)type;
- (void)willPresentUsefulUserResultWithType:(long long)type forCommand:(id)command;
- (void)checkLanguageReady:(id)ready completion:(id /* block */)completion;
- (void)startAudioPlaybackRequest:(id)request options:(unsigned long long)options completion:(id /* block */)completion;
- (void)stopAudioPlaybackRequest:(id)request immediately:(BOOL)immediately;
- (void)stopAllAudioPlaybackRequests:(BOOL)requests;
- (void)updateSpeechSynthesisRecord:(id)record;
- (void)adviseSessionArbiterToContinueWithPreviousWinner:(BOOL)winner;
- (void)fetchShouldSpeak:(id /* block */)speak;
- (void)_speechRecordingDidFailWithError:(id)error;
- (void)_willStopRecordingWithSignpostID:(unsigned long long)id;
- (id)acquireUserInteractionAssertion;
@end

#endif /* AFConnection_h */
