//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 205.6.1.0.0
//
#ifndef VCPVideoTrackSyncDecoder_h
#define VCPVideoTrackSyncDecoder_h
@import Foundation;

#include "VCPVideoTrackDecoder.h"

@class AVAssetReader, AVAssetReaderSampleReferenceOutput;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_semaphore;

@interface VCPVideoTrackSyncDecoder : VCPVideoTrackDecoder {
  /* instance variables */
  AVAssetReader *_assetReader;
  AVAssetReaderSampleReferenceOutput *_trackReader;
  struct { struct { long long value; int timescale; unsigned int flags; long long epoch; } start; struct { long long value; int timescale; unsigned int flags; long long epoch; } duration; } _timerange;
  BOOL _launchOnce;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<OS_dispatch_group> *_group;
  NSObject<OS_dispatch_semaphore> *_inputSemaphore;
  NSObject<OS_dispatch_semaphore> *_outputSemaphore;
  BOOL _cancelDecode;
  int _decodeError;
  BOOL _decodeFinished;
  int _decodedFrames;
  int _outputFrameIdx;
  struct opaqueCMSampleBuffer * _sampleBuffer[2];
}

/* instance methods */
- (id)initWithTrack:(id)track timerange:(const struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; } *)timerange;
- (void)dealloc;
- (long long)status;
- (int)findNextSample:(BOOL)sample timerange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; } *)timerange;
- (int)decodeSample:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })sample sample:(struct opaqueCMSampleBuffer * *)sample;
- (void)decodeTask;
- (struct opaqueCMSampleBuffer *)copyNextSampleBuffer;
@end

#endif /* VCPVideoTrackSyncDecoder_h */
