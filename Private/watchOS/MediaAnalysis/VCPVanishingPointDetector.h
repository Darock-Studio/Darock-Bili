//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 205.6.1.0.0
//
#ifndef VCPVanishingPointDetector_h
#define VCPVanishingPointDetector_h
@import Foundation;

#include "VCPGaborFilter.h"

@protocol {Scaler="pool_"{CF<__CVPixelBufferPool *>="value_"^{__CVPixelBufferPool}}"width_"i"height_"i"format_"I"transfer_session_"{CF<OpaqueVTPixelTransferSession *>="value_"^{OpaqueVTPixelTransferSession}}};

@interface VCPVanishingPointDetector : NSObject {
  /* instance variables */
  float * _image;
  float * _orientationResponses[8];
  float * _orientionMap;
  float * _confidenceMap;
  float * _edgeWeightMap;
  unsigned long long _width;
  unsigned long long _height;
  long long _stride;
  unsigned long long _widthPadded;
  unsigned long long _heightPadded;
  long long _stridePadded;
  long long _offset;
  BOOL _validDimension;
  float _pixelMean;
  float _pixelVar;
  VCPGaborFilter *_gaborFilter;
  struct Scaler { struct CF<__CVPixelBufferPool *> { struct __CVPixelBufferPool *value_; } pool_; int width_; int height_; unsigned int format_; struct CF<OpaqueVTPixelTransferSession *> { struct OpaqueVTPixelTransferSession *value_; } transfer_session_; } _scaler;
}

/* instance methods */
- (id)initWithImage:(struct __CVBuffer *)image;
- (int)detect:(struct CGPoint { double x0; double x1; } *)detect withConfidence:(float *)confidence dominantLine:(id *)line;
- (void)dealloc;
- (int)prepareImage:(struct __CVBuffer *)image;
- (int)calculateOrientationResponses;
- (void)extractUsefulAreaFrom:(float *)from to:(float *)to withOffset:(unsigned long long)offset stridePadded:(unsigned long long)padded width:(unsigned long long)width height:(unsigned long long)height;
- (void)averageOrientationResponses:(int)responses withCurrentMap:(float *)map;
- (int)generateOrientationMap;
- (void)smoothFiltering:(float *)filtering width:(unsigned long long)width height:(unsigned long long)height;
- (int)voteVanishingPoint:(float *)point;
- (int)searchVanishingPointandDominantLine:(float *)line lineGroup:(id)group vanishingPoint:(struct CGPoint { double x0; double x1; } *)point vanishingPointConfidence:(float *)confidence dominantLine:(id *)line;
- (int)calculateConfidence:(id)confidence lineDistance:(float)distance vaninshingPoint:(struct CGPoint { double x0; double x1; })point vanishingPointConfidence:(float *)confidence;
- (BOOL)isVerticalOrHorizontal:(int)horizontal;
- (int)generateLineWeightMap:(id)map weightMap:(float *)map;
@end

#endif /* VCPVanishingPointDetector_h */
