//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 148.0.0.0.0
//
#ifndef PTSettings_h
#define PTSettings_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "PTSettingsClassStructure.h"
#include "PTSettingsKeyPathObserver-Protocol.h"
#include "_PTSettingsRestoreDefaultsObserver-Protocol.h"

@class NSHashTable, NSString;

@interface PTSettings : NSObject<PTSettingsKeyPathObserver, NSCopying> {
  /* instance variables */
  PTSettingsClassStructure *__classStructure;
  NSHashTable *__keyObservers;
  NSHashTable *__keyPathObservers;
  NSObject<_PTSettingsRestoreDefaultsObserver> *__restoreDefaultsObserver;
  BOOL __observationEnabled;
  BOOL __isObservingProperties;
  BOOL __isObservingChildren;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)settingsFromArchiveDictionary:(id)dictionary;
+ (id)settingsControllerModule;
+ (unsigned long long)settingsVersionNumber;
+ (BOOL)ignoresKey:(id)key;
+ (BOOL)_supportsArchivingCustomClass:(Class)class;
+ (BOOL)_supportsArchivingStructType:(id)type;
+ (id)_archiveDictionaryForObject:(id)object ofCustomClass:(Class)class;
+ (id)_archiveDictionaryForValue:(id)value ofStructType:(id)type;
+ (id)_objectOfCustomClass:(Class)class fromArchiveDictionary:(id)dictionary;
+ (id)_valueOfStructType:(id)type fromArchiveDictionary:(id)dictionary;
+ (id)emptyArchiveForSettingsClassName:(id)name;
+ (void)_applyArchiveValue:(id)value forKeyPath:(id)path toArchive:(id)archive;

/* instance methods */
- (BOOL)suppressesIntrospectionOnCustomerInstalls;
- (id)init;
- (id)initWithDefaultValues;
- (id)_initWithClassStructure:(id)structure;
- (void)_createChildrenAndOutlets;
- (void)_createChildren;
- (void)_createOutlets;
- (void)_validateChildren;
- (id)_initWithArchiveDictionary:(id)dictionary;
- (void)_applyArchiveDictionary:(id)dictionary;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)archiveDictionary;
- (void)restoreDefaultValues;
- (void)restoreFromArchiveDictionary:(id)dictionary;
- (void)applySettings:(id)settings;
- (void)_safeSetValue:(id)value forLeafKey:(id)key;
- (void)addKeyObserver:(id)observer;
- (void)removeKeyObserver:(id)observer;
- (void)addKeyPathObserver:(id)observer;
- (void)removeKeyPathObserver:(id)observer;
- (void)invalidateValueForKey:(id)key;
- (id)module;
- (id)_createChildForKey:(id)key;
- (void)createChildren;
- (void)setDefaultValues;
- (id)drillDownSummary;
- (void)applyArchiveValue:(id)value forKey:(id)key;
- (id)archiveValueForKey:(id)key;
- (id)_allKeys;
- (void)_setObservationEnabled:(BOOL)enabled;
- (void)_setRestoreDefaultsObserver:(id)observer;
- (BOOL)_hasObservers;
- (BOOL)_hasKeyPathObservers;
- (void)_startOrStopObservingPropertiesAndChildren;
- (void)_startObservingProperties;
- (void)_stopObservingProperties;
- (void)_startObservingChildren;
- (void)_stopObservingChildren;
- (id)_allChildAndLeafKeys;
- (BOOL)_applyArchiveValue:(id)value forLeafKey:(id)key error:(id *)error;
- (id)_archiveValueForLeafKey:(id)key;
- (void)_enumerateLeafValuesWithBlock:(id /* block */)block;
- (void)_enumerateChildrenWithBlock:(id /* block */)block;
- (void)_enumerateOutletsWithBlock:(id /* block */)block;
- (id)_ensureChildForKey:(id)key;
- (BOOL)_getChild:(id *)child create:(BOOL)create leafKey:(id *)key forKeyPath:(id)path error:(id *)error;
- (BOOL)_applyArchiveValue:(id)value forKeyPath:(id)path error:(id *)error;
- (id)_archiveValueForKeyPath:(id)path;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)settings:(id)settings changedValueForKeyPath:(id)path;
- (id)_keyForChild:(id)child;
- (void)_sendKeyChanged:(id)changed;
- (void)_sendKeyPathChanged:(id)changed;
- (void)_sendWillRestoreDefaults;
- (void)_sendDidRestoreDefaults;
@end

#endif /* PTSettings_h */
