//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.0.0.0.0
//
#ifndef FCRecordSource_h
#define FCRecordSource_h
@import Foundation;

#include "FCAppActivityMonitor-Protocol.h"
#include "FCCKContentDatabase.h"
#include "FCCacheCoordinator.h"
#include "FCCacheCoordinatorDelegate-Protocol.h"
#include "FCCacheFlushing-Protocol.h"
#include "FCFetchCoordinator.h"
#include "FCFetchCoordinatorDelegate-Protocol.h"
#include "FCJSONEncodableObjectProviding-Protocol.h"
#include "FCKeyValueStore.h"
#include "FCThreadSafeMutableDictionary.h"

@class NFUnfairLock, NSArray, NSDictionary, NSString;
@protocol FCBackgroundTaskable;

@interface FCRecordSource : NSObject<FCCacheCoordinatorDelegate, FCFetchCoordinatorDelegate, FCCacheFlushing, FCJSONEncodableObjectProviding> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _derivedKeysLock;
  NFUnfairLock *_initializationLock;
  FCCKContentDatabase *_contentDatabase;
  NSString *_contentDirectory;
  NSObject<FCAppActivityMonitor> *_appActivityMonitor;
  NSObject<FCBackgroundTaskable> *_backgroundTaskable;
  FCKeyValueStore *_localStore;
  FCCacheCoordinator *_cacheCoordinator;
  FCFetchCoordinator *_fetchCoordinator;
}

@property (readonly, nonatomic) FCThreadSafeMutableDictionary *fetchErrorsByKey;
@property (readonly, nonatomic) NSString *experimentalizableFieldsPostfix;
@property (readonly, nonatomic) NSString *activeTreatmentID;
@property (readonly, nonatomic) NSArray *nonLocalizableKeys;
@property (readonly, nonatomic) NSArray *localizableKeys;
@property (readonly, nonatomic) NSArray *alwaysLocalizedKeys;
@property (readonly, nonatomic) NSArray *experimentalizableKeys;
@property (readonly, nonatomic) NSArray *localizableExperimentalizableKeys;
@property (readonly, nonatomic) NSArray *localizableLanguageSpecificKeys;
@property (readonly, nonatomic) NSDictionary *localizedKeysByOriginalKey;
@property (readonly, nonatomic) NSDictionary *experimentalizedKeysByOriginalKey;
@property (readonly, nonatomic) NSDictionary *localizedExperimentalizedKeysByOriginalKey;
@property (readonly, nonatomic) NSDictionary *localizedLanguageSpecificKeysByOriginalKey;
@property (readonly, nonatomic) NSArray *desiredKeys;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)defaultCachePolicy;
+ (BOOL)supportsDeletions;
+ (id)canaryRecordName;
+ (id)identifierFromCKRecord:(id)ckrecord;
+ (id)changeTagFromCKRecord:(id)ckrecord;
+ (id)modificationDateFromCKRecord:(id)ckrecord;
+ (BOOL)recognizesRecordID:(id)id inRecordIDPrefixes:(id)idprefixes;

/* instance methods */
- (id)init;
- (id)initWithContentDatabase:(id)database contentDirectory:(id)directory appActivityMonitor:(id)monitor backgroundTaskable:(id)taskable;
- (id)initWithContentDatabase:(id)database contentDirectory:(id)directory appActivityMonitor:(id)monitor backgroundTaskable:(id)taskable experimentalizableFieldsPostfix:(id)postfix activeTreatmentID:(id)id;
- (id)recordType;
- (int)pbRecordType;
- (id)storeFilename;
- (unsigned long long)storeVersion;
- (unsigned long long)lowThresholdDataSizeLimit;
- (unsigned long long)highThresholdDataSizeLimit;
- (id)recordIDPrefixes;
- (id)recordFromCKRecord:(id)ckrecord base:(id)base;
- (id)keyValueRepresentationOfRecord:(id)record;
- (id)resolveLocalizableExperimentalizableFieldforKey:(id)key inRecord:(id)record activeExperimentIDKey:(id)idkey;
- (id)valueFromCKRecord:(id)ckrecord baseKey:(id)key localizedKeys:(id)keys localizedLanguageSpecificKeys:(id)keys;
- (id)_localizedKeysByOriginalKeyForContentStoreFrontID:(id)id;
- (id)_experimentalizedKeysByOriginalKeyForExperimentPostfix:(id)postfix;
- (id)_localizedExperimentalizedKeysByOriginalKeyForContentStoreFrontID:(id)id experimentPostfix:(id)postfix;
- (id)fetchOperationForRecordsWithIDs:(id)ids;
- (id)fetchOperationForRecordsWithIDs:(id)ids ignoreCacheForRecordIDs:(id)ids;
- (id)cachedRecordWithID:(id)id;
- (id)cachedRecordsWithIDs:(id)ids;
- (id)interestTokenForRecordIDs:(id)ids;
- (id)saveRecords:(id)records;
- (id)savePBRecords:(id)pbrecords;
- (id)convertRecords:(id)records;
- (id)deleteRecordsWithIDs:(id)ids;
- (void)updateFetchDateForRecordIDs:(id)ids;
- (BOOL)isRecordStale:(id)stale withCachePolicy:(id)policy;
- (BOOL)recognizesRecordID:(id)id;
- (void)enableFlushingWithFlushingThreshold:(unsigned long long)threshold;
- (unsigned long long)cacheCoordinatorCurrentSizeWithReadLock:(id)lock;
- (void)cacheCoordinator:(id)coordinator flushKeysWithWriteLock:(id)lock;
- (void)fetchCoordinator:(id)coordinator filterKeysToFetch:(id)fetch isFirstAttempt:(BOOL)attempt context:(id)context;
- (id)fetchCoordinator:(id)coordinator fetchOperationForKeys:(id)keys context:(id)context qualityOfService:(long long)service relativePriority:(long long)priority;
- (void)fetchCoordinator:(id)coordinator addFetchOperation:(id)operation context:(id)context;
- (void)forceRefreshDesiredKeys;
- (void)t_startOverridingExperimentalizableFieldsPostfix:(id)postfix treatmentID:(id)id;
- (void)t_stopOverridingExperimentalizableFieldsPostfixAndTreatmentID;
- (id)jsonEncodableObject;
@end

#endif /* FCRecordSource_h */
