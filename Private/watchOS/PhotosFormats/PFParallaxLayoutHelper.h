//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PFParallaxLayoutHelper_h
#define PFParallaxLayoutHelper_h
@import Foundation;

#include "PFParallaxLayoutConfiguration.h"

@interface PFParallaxLayoutHelper : NSObject

@property (readonly, nonatomic) unsigned long long classification;
@property (readonly, nonatomic) unsigned long long layoutType;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } initialRect;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } originalImageSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } extendedImageSize;
@property (readonly, nonatomic) BOOL headroomFeasible;
@property (readonly, nonatomic) BOOL hasTopEdgeContact;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } pixelValidBounds;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } pixelEffectiveAcceptable;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } pixelEffectivePreferred;
@property (readonly, nonatomic) PFParallaxLayoutConfiguration *layoutConfiguration;
@property (readonly, nonatomic) BOOL canInflate;

/* class methods */
+ (double)targetZoomPercentWithLayoutType:(unsigned long long)type;
+ (double)targetZoomFactorLimitWithLayoutType:(unsigned long long)type;
+ (double)scoreBonusZoomHeadroomWithLayoutType:(unsigned long long)type;
+ (double)scoreBonusZoomTargetWithLayoutType:(unsigned long long)type;
+ (double)scoreBonusZoomNoneWithLayoutType:(unsigned long long)type;
+ (double)scoreBonusOverlapTargetWithLayoutType:(unsigned long long)type;
+ (double)scoreBonusInactiveWithLayoutType:(unsigned long long)type;
+ (double)scoreBonusOverlapAvoid;
+ (void)setTargetZoomPercent:(double)percent;
+ (void)setTargetZoomFactorLimit:(double)limit;
+ (void)setScoreBonusZoomTarget:(double)target;
+ (void)setScoreBonusZoomHeadroom:(double)headroom;
+ (void)setScoreBonusOverlapTarget:(double)target;
+ (void)setScoreBonusOverlapAvoid:(double)avoid;
+ (void)setScoreBonusInactive:(double)inactive;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })inflatePersonFaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;

/* instance methods */
- (id)initWithPosterClassification:(unsigned long long)classification initialRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect imageSize:(struct CGSize { double x0; double x1; })size effectiveAcceptableRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect effectivePreferredRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect validBoundsNormalized:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })normalized headroomFeasible:(BOOL)feasible hasTopEdgeContact:(BOOL)contact layoutType:(unsigned long long)type layoutConfiguration:(id)configuration;
- (struct CGSize { double x0; double x1; })imageSizeWithHeadroomStrategy:(unsigned long long)strategy;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })unsafeAreaInImageSpaceWithVisibleFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (double)computeCropScoreForIntermediate:(id)intermediate;
- (id)intermediateWithZoomStrategy:(unsigned long long)strategy intermediate:(id)intermediate;
- (id)bestLayout:(id)layout;
- (id)intermediateWithOverlapStrategy:(unsigned long long)strategy intermediate:(id)intermediate;
- (id)intermediateWithParallaxStrategy:(unsigned long long)strategy intermediate:(id)intermediate;
- (id)intermediateWithInactiveStrategy:(unsigned long long)strategy intermediate:(id)intermediate;
- (id)intermediateWithHeadroomStrategy:(unsigned long long)strategy intermediate:(id)intermediate;
- (id)scoreIntermediate:(id)intermediate;
- (double)scoreAdjustmentWithUnscoredIntermediate:(id)intermediate unsafeAreaOverlap:(double)overlap timeBottomOverlap:(double)overlap timeTopOverlap:(double)overlap;
@end

#endif /* PFParallaxLayoutHelper_h */
