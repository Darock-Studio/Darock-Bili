//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PFPosterOrientedLayout_h
#define PFPosterOrientedLayout_h
@import Foundation;

#include "PFParallaxLayoutConfiguration.h"

@class NSArray, NSString;

@interface PFPosterOrientedLayout : NSObject

@property (readonly, nonatomic) struct CGSize { double x0; double x1; } imageSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } extendedImageSize;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } extendedImageExtent;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } deviceResolution;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } parallaxPadding;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } visibleFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } inactiveFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } parallaxVisibleFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } parallaxInactiveFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } normalizedVisibleFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } timeFrame;
@property (readonly, nonatomic) NSString *clockLayerOrder;
@property (readonly, nonatomic) unsigned long long clockIntersection;
@property (readonly, nonatomic) BOOL canApplyParallax;
@property (readonly, nonatomic) BOOL canApplyHeadroom;
@property (readonly, nonatomic) BOOL isUsingHeadroom;
@property (readonly, nonatomic) BOOL hasTopEdgeContact;
@property (readonly, nonatomic) BOOL headroomDisabled;
@property (readonly, nonatomic) long long orientation;
@property (readonly, nonatomic) PFParallaxLayoutConfiguration *configuration;
@property (readonly, copy, nonatomic) NSArray *debugLayouts;

/* class methods */
+ (id)layoutWithDictionaryRepresentation:(id)representation;

/* instance methods */
- (id)initWithImageSize:(struct CGSize { double x0; double x1; })size deviceResolution:(struct CGSize { double x0; double x1; })resolution parallaxPadding:(struct CGSize { double x0; double x1; })padding visibleFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame inactiveFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame timeFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame clockLayerOrder:(id)order clockIntersection:(unsigned long long)intersection hasTopEdgeContact:(BOOL)contact headroomDisabled:(BOOL)disabled debugLayouts:(id)layouts;
- (id)initWithImageSize:(struct CGSize { double x0; double x1; })size deviceResolution:(struct CGSize { double x0; double x1; })resolution parallaxPadding:(struct CGSize { double x0; double x1; })padding visibleFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame inactiveFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame timeFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame clockLayerOrder:(id)order clockIntersection:(unsigned long long)intersection debugLayouts:(id)layouts;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })imageExtent;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })screenExtent;
- (id)layoutByUpdatingVisibleFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)layoutByUpdatingInactiveFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)layoutByUpdatingClockLayerOrder:(id)order;
- (id)layoutByUpdatingClockIntersection:(unsigned long long)intersection;
- (id)layoutByUpdatingImageSize:(struct CGSize { double x0; double x1; })size;
- (id)layoutByUpdatingNormalizedVisibleFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)layoutByUpdatingHeadroomDisabled:(BOOL)disabled;
- (id)layoutByUpdatingConfiguration:(id)configuration;
- (id)layoutByConformingGenericConfigurationToDevice:(id)device;
- (id)layoutByUpgradingToConfiguration:(id)configuration;
- (id)description;
- (id)debugDescription;
- (id)dictionaryRepresentation;
- (id)debugSwiftCode;
@end

#endif /* PFPosterOrientedLayout_h */
