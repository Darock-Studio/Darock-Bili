//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PFLivePhotoEditSession_h
#define PFLivePhotoEditSession_h
@import Foundation;

@class AVAsset, AVAssetExportSession, CIContext, CIImage, NSDictionary, NSString, NSURL;
@protocol OS_dispatch_queue;

@interface PFLivePhotoEditSession : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_stateQueue;
  NSObject<OS_dispatch_queue> *_renderQueue;
  AVAsset *_videoAsset;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _inputVideoDuration;
  struct CGImageSource * _inputImageSource;
  unsigned int _inputOrientation;
  NSDictionary *_inputImageProperties;
  CIContext *_renderContext;
  AVAssetExportSession *_exportSession;
  CIImage *_subsampledInputImage;
  long long _subsampleFactor;
  CIImage *_outputImage;
  CIImage *_scaledOutputImage;
  double _inputVideoScale;
  struct CGSize { double width; double height; } _inputVideoScaleRoundingError;
  NSString *_temporaryDirectory;
  NSURL *_lastTemporaryVideoURL;
  NSString *_uniqueIdentifier;
  BOOL _isExporting;
}

@property (readonly) struct { long long x0; int x1; unsigned int x2; long long x3; } duration;
@property (readonly) struct { long long x0; int x1; unsigned int x2; long long x3; } photoTime;
@property (readonly) unsigned int orientation;
@property (readonly) CIImage *inputImage;
@property (copy) id /* block */ frameProcessor;
@property float audioVolume;
@property (readonly) struct CGSize { double x0; double x1; } outputImageSize;
@property (readonly) struct CGSize { double x0; double x1; } outputVideoSize;

/* class methods */
+ (id)temporaryDirectory;
+ (id)_createTemporaryDirectory;

/* instance methods */
- (id)init;
- (id)initWithPhotoURL:(id)url videoURL:(id)url photoTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time photoOrientation:(unsigned int)orientation;
- (void)dealloc;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })_inputVideoDuration;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })_loadInputVideoDuration;
- (unsigned int)_inputOrientation;
- (unsigned int)_loadInputImageOrientation;
- (id)imageProperties;
- (id)_inputImageProperties;
- (id)_loadInputImageProperties;
- (id)_inputImage;
- (id)_loadInputImage;
- (id)_loadInputImageWithSubsampleFactor:(long long)factor;
- (id)_scaledInputImageForTargetScale:(double)scale;
- (id)inputImageForRenderScale:(double)scale;
- (struct CGSize { double x0; double x1; })_inputImageSize;
- (id)_inputVideoTrack;
- (struct CGSize { double x0; double x1; })_inputVideoSize;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_inputVideoTransform;
- (double)_inputVideoScale;
- (id)outputImage;
- (id)_outputImage;
- (struct CGSize { double x0; double x1; })_outputImageSize;
- (struct CGSize { double x0; double x1; })_outputVideoSize;
- (id)_videoCompositionForTargetSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })_outputVideoSizeForScale:(double)scale;
- (id)_processImage:(id)image scale:(double)scale error:(id *)error;
- (void)prepareForPlaybackWithTargetSize:(struct CGSize { double x0; double x1; })size options:(id)options completionHandler:(id /* block */)handler;
- (void)_cancelCurrentExportIfNeeded;
- (void)_prepareForPlaybackWithTargetSize:(struct CGSize { double x0; double x1; })size options:(id)options completionHandler:(id /* block */)handler;
- (BOOL)_canRenderAtPlaybackTime;
- (void)_renderImageToURL:(id)url fileType:(id)type targetSize:(struct CGSize { double x0; double x1; })size completionHandler:(id /* block */)handler;
- (void)_renderImageWithTargetSize:(struct CGSize { double x0; double x1; })size completionHandler:(id /* block */)handler;
- (double)_targetScaleForTargetSize:(struct CGSize { double x0; double x1; })size;
- (id)_outputImageProperties;
- (void)_renderVideoToURL:(id)url fileType:(id)type targetSize:(struct CGSize { double x0; double x1; })size volume:(float)volume completionHandler:(id /* block */)handler;
- (id)_outputVideoMetadata;
- (id)_temporaryURLOfType:(id)type;
- (void)exportToDestination:(id)destination options:(id)options completionHandler:(id /* block */)handler;
- (void)_exportToDestination:(id)destination options:(id)options completionHandler:(id /* block */)handler;
- (void)cancel;
@end

#endif /* PFLivePhotoEditSession_h */
