//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 43.4.0.0.0
//
#ifndef NUIContainerView_h
#define NUIContainerView_h
@import Foundation;

#include "UIView.h"

@class NSArray, NSMutableArray, UIView;
@protocol NUIContainerViewDelegate, {map<UIView *, _NUIContainerViewArrangedSubview, std::less<UIView *>, std::allocator<std::pair<UIView *const, _NUIContainerViewArrangedSubview>>>="__tree_"{__tree<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>>, std::allocator<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>>>="__value_"Q}}}, {vector<CALayer *, std::allocator<CALayer *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<CALayer **, std::allocator<CALayer *>>="__value_"^@}};

@interface NUIContainerView : UIView {
  /* instance variables */
  BOOL _isRTL;
  struct map<UIView *, _NUIContainerViewArrangedSubview, std::less<UIView *>, std::allocator<std::pair<UIView *const, _NUIContainerViewArrangedSubview>>> { struct __tree<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>>, std::allocator<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>>> { unsigned long long __value_; } __pair3_; } __tree_; } _arrangedSubviewInfo;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _effectiveLayoutMargins;
  UIView *_firstBaselineView;
  UIView *_lastBaselineView;
  struct vector<CALayer *, std::allocator<CALayer *>> { __end_ * *__begin_; __end_cap_ * * x0; struct __compressed_pair<CALayer **, std::allocator<CALayer *>> { id *__value_; } x1; } _debugBoundingBoxLayers;
  struct { unsigned int x :16 hiddenArrangedSubviewCount; unsigned int x :8 delaydInvalidation; unsigned int x :4 batchDepth; unsigned int x :2 inLayoutPass; unsigned int x :2 inMeasurementPass; unsigned int x :2 layoutDependency; unsigned int x :2 removalPolicy; unsigned int x :1 removalPolicyHasBeenSet; unsigned int x :1 additionPolicy; unsigned int x :1 inEnsureArranged; unsigned int x :1 inEffectiveSize; unsigned int x :1 hasMargins; unsigned int x :1 debugBoundingBoxes; unsigned int x :1 baselineRelative; unsigned int x :1 layoutMarginsRelative; unsigned int x :1 baselineLayoutMargins; unsigned int x :1 mustRestart; unsigned int x :1 delegateSystemLayoutSizeFittingSizeForArrangedSubview; unsigned int x :1 delegateLayoutFrameForArrangedSubview; unsigned int x :1 delegateWillMeasureFitting; unsigned int x :1 delegateShouldRestart; unsigned int x :1 delegateDidLayout; } _containerFlags;
}

@property (nonatomic) BOOL debugBoundingBoxesEnabled;
@property (copy, nonatomic) NSArray *arrangedSubviews;
@property (readonly, nonatomic) NSArray *visibleArrangedSubviews;
@property (nonatomic) long long arrangedSubviewRemovalPolicy;
@property (nonatomic) long long arrangedSubviewAdditionPolicy;
@property (weak, nonatomic) NSObject<NUIContainerViewDelegate> *delegate;
@property (nonatomic) BOOL baselineRelativeArrangement;
@property (nonatomic) BOOL layoutMarginsRelativeArrangement;
@property (nonatomic) BOOL baselineRelativeLayoutMarginsForArrangement;

/* class methods */
+ (id)debugVersion;
+ (BOOL)enableAPIMisuseAssertions;
+ (void)setEnableAPIMisuseAssertions:(BOOL)assertions;
+ (BOOL)requiresConstraintBasedLayout;
+ (BOOL)isDebugBoundingBoxesEnabled;
+ (void)initialize;
+ (Class)layerClass;

/* instance methods */
- (id)arrangedDebugDescription;
- (id)debugDictionaryForVisibleArrangedSubview:(id)subview;
- (id)debugSetDelegateRespondsToSelectors;
- (id)debugSetEnabledFlags;
- (BOOL)isDebugBoundingBoxesEnabled;
- (id)debugDictionary;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })effectiveLayoutBounds;
- (BOOL)isInBatchUpdate;
- (void)ensureArrangedSubviewsAreValid;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })effectiveLayoutMargins;
- (void)setNeedsLayout;
- (void)invalidateInternalStateForInvalidation:(long long)invalidation;
- (BOOL)setNeedsInvalidation:(long long)invalidation;
- (void)visibilityDidChangeForArrangedSubview:(id)subview;
- (void)intrinsicContentSizeDidInvalidateForArrangedSubview:(id)subview;
- (struct CGSize { double x0; double x1; })contentLayoutSizeFittingSize:(struct CGSize { double x0; double x1; })size forArrangedSubview:(id)subview;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutFrameForArrangedSubview:(id)subview withProposedContentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)assertNotInLayoutPass:(BOOL)pass;
- (void)didInsertArrangedSubview:(id)subview atIndex:(long long)index;
- (void)didRemoveArrangedSubview:(id)subview atIndex:(long long)index;
- (struct CGSize { double x0; double x1; })calculateArrangedSizeFittingSize:(struct CGSize { double x0; double x1; })size;
- (id)calculateViewForFirstBaselineLayout;
- (id)calculateViewForLastBaselineLayout;
- (void)layoutArrangedSubviewsInBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (BOOL)mustRestartMeasurement;
- (BOOL)isLayoutSizeDependentOnPerpendicularAxis;
- (BOOL)_layoutHeightDependsOnWidth;
- (unsigned long long)_axesForDerivingIntrinsicContentSizeFromLayoutSize;
- (struct { double x0; double x1; })_baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })size;
- (BOOL)_isContainerView;
- (BOOL)needsBaselineDebugBoundingBoxesForArrangedSubview:(id)subview;
- (id)initWithCoder:(id)coder;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithArrangedSubviews:(id)subviews;
- (void)dealloc;
- (void)performBatchUpdates:(id /* block */)updates;
- (void)addArrangedSubview:(id)subview;
- (void)willRemoveSubview:(id)subview;
- (void)removeArrangedSubview:(id)subview;
- (void)insertArrangedSubview:(id)subview atIndex:(unsigned long long)index;
- (void)replaceArrangedSubviewAtIndex:(unsigned long long)index withView:(id)view;
- (void)replaceArrangedSubview:(id)subview atIndex:(unsigned long long)index;
- (unsigned long long)indexOfArrangedSubview:(id)subview;
- (BOOL)isBaselineRelativeArrangement;
- (BOOL)isLayoutMarginsRelativeArrangement;
- (BOOL)hasBaselineRelativeLayoutMarginsForArrangement;
- (long long)alignmentForView:(id)view inAxis:(long long)axis;
- (void)setAlignment:(long long)alignment forView:(id)view inAxis:(long long)axis;
- (struct CGPoint { double x0; double x1; })positionAdjustmentOffsetForView:(id)view;
- (void)setPositionAdjustmentOffset:(struct CGPoint { double x0; double x1; })offset forView:(id)view;
- (struct NSDirectionalEdgeInsets { double x0; double x1; double x2; double x3; })minimumSpacingAdjacentToView:(id)view;
- (void)setMinimumSpacing:(struct NSDirectionalEdgeInsets { double x0; double x1; double x2; double x3; })spacing adjacentToView:(id)view;
- (struct CGSize { double x0; double x1; })effectiveLayoutSizeFittingSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (struct CGSize { double x0; double x1; })_layoutSizeThatFits:(struct CGSize { double x0; double x1; })fits fixedAxes:(unsigned long long)axes;
- (struct CGSize { double x0; double x1; })systemLayoutSizeFittingSize:(struct CGSize { double x0; double x1; })size withHorizontalFittingPriority:(float)priority verticalFittingPriority:(float)priority;
- (void)layoutSubviews;
- (void)invalidateIntrinsicContentSize;
- (void)layoutMarginsDidChange;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)_intrinsicContentSizeInvalidatedForChildView:(id)view;
- (id)viewForFirstBaselineLayout;
- (id)viewForLastBaselineLayout;
- (id)description;
- (id)debugDescription;
- (BOOL)canCancelMeasurementForCompression;
- (BOOL)shouldCancelMeasurementForCompressionInAxis:(long long)axis;
@end

#endif /* NUIContainerView_h */
