//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 43.4.0.0.0
//
#ifndef NUIContainerStackView_h
#define NUIContainerStackView_h
@import Foundation;

#include "NUIContainerView.h"
#include "_NUIGridArrangementContainer-Protocol.h"

@class NSString;
@protocol {_NUIGridArrangement="container"@"<_NUIGridArrangementContainer>""horzDist"b8"vertDist"b8"baselineRelative"B"hasValidMeasurement"B"cells"{vector<_NUIGridArrangementCell, std::allocator<_NUIGridArrangementCell>>="__begin_"^{_NUIGridArrangementCell}"__end_"^{_NUIGridArrangementCell}"__end_cap_"{__compressed_pair<_NUIGridArrangementCell *, std::allocator<_NUIGridArrangementCell>>="__value_"^{_NUIGridArrangementCell}}}"columns"{vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>>="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>>="__value_"^{_NUIGridArrangementDimension}}}"rows"{vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>>="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>>="__value_"^{_NUIGridArrangementDimension}}}"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}}, {map<UIView *, double, std::less<UIView *>, std::allocator<std::pair<UIView *const, double>>>="__tree_"{__tree<std::__value_type<UIView *, double>, std::__map_value_compare<UIView *, std::__value_type<UIView *, double>, std::less<UIView *>>, std::allocator<std::__value_type<UIView *, double>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, double>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, double>, std::less<UIView *>>>="__value_"Q}}};

@interface NUIContainerStackView : NUIContainerView<_NUIGridArrangementContainer> {
  /* instance variables */
  struct _NUIGridArrangement { <_NUIGridArrangementContainer> *container; unsigned int x :8 horzDist; unsigned int x :8 vertDist; BOOL baselineRelative; BOOL hasValidMeasurement; struct vector<_NUIGridArrangementCell, std::allocator<_NUIGridArrangementCell>> { struct _NUIGridArrangementCell *__begin_; struct _NUIGridArrangementCell *__end_; struct __compressed_pair<_NUIGridArrangementCell *, std::allocator<_NUIGridArrangementCell>> { struct _NUIGridArrangementCell *__value_; } __end_cap_; } cells; struct vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>> { struct _NUIGridArrangementDimension *__begin_; struct _NUIGridArrangementDimension *__end_; struct __compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>> { struct _NUIGridArrangementDimension *__value_; } __end_cap_; } columns; struct vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>> { struct _NUIGridArrangementDimension *__begin_; struct _NUIGridArrangementDimension *__end_; struct __compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>> { struct _NUIGridArrangementDimension *__value_; } __end_cap_; } rows; struct vector<CGRect, std::allocator<CGRect>> { struct CGRect *__begin_; struct CGRect *__end_; struct __compressed_pair<CGRect *, std::allocator<CGRect>> { struct CGRect *__value_; } __end_cap_; } viewFrames; } _arrangement;
  struct { unsigned short width; unsigned short height; } _visibleCount;
  struct map<UIView *, double, std::less<UIView *>, std::allocator<std::pair<UIView *const, double>>> { struct __tree<std::__value_type<UIView *, double>, std::__map_value_compare<UIView *, std::__value_type<UIView *, double>, std::less<UIView *>>, std::allocator<std::__value_type<UIView *, double>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, double>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, double>, std::less<UIView *>>> { unsigned long long __value_; } __pair3_; } __tree_; } _customSpacings;
  struct { unsigned int x :8 alignment; unsigned int x :8 distribution; unsigned int x :4 axis; } _stackViewFlags;
}

@property (nonatomic) long long axis;
@property (nonatomic) long long distribution;
@property (nonatomic) long long alignment;
@property (nonatomic) double spacing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)containerStackViewWithAxis:(long long)axis arrangedSubviews:(id)subviews;
+ (id)horizontalContainerStackViewWithArrangedSubviews:(id)subviews;
+ (id)verticalContainerStackViewWithArrangedSubviews:(id)subviews;

/* instance methods */
- (BOOL)needsBaselineDebugBoundingBoxesForArrangedSubview:(id)subview;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithArrangedSubviews:(id)subviews;
- (void)dealloc;
- (id)calculateViewForFirstBaselineLayout;
- (id)calculateViewForLastBaselineLayout;
- (void)setBaselineRelativeArrangement:(BOOL)arrangement;
- (double)customSpacingAfterView:(id)view;
- (void)setCustomSpacing:(double)spacing afterView:(id)view;
- (void)setSpacing:(double)spacing afterArrangedSubviewAtIndex:(long long)index;
- (void)didRemoveArrangedSubview:(id)subview atIndex:(long long)index;
- (void)invalidateInternalStateForInvalidation:(long long)invalidation;
- (void)populateGridArrangementCells:(void *)cells;
- (void)populateGridArrangementDimension:(void *)dimension withCells:(const void *)cells axis:(long long)axis;
- (struct CGSize { double x0; double x1; })calculateArrangedSizeFittingSize:(struct CGSize { double x0; double x1; })size;
- (void)layoutArrangedSubviewsInBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)arrangedDebugDescription;
- (id)debugDictionary;
@end

#endif /* NUIContainerStackView_h */
