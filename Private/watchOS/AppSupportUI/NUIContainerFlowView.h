//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 43.4.0.0.0
//
#ifndef NUIContainerFlowView_h
#define NUIContainerFlowView_h
@import Foundation;

#include "NUIContainerView.h"
#include "_NUIFlowArrangementContainer-Protocol.h"

@class NSString;
@protocol {_NUIFlowArrangement="container"@"<_NUIFlowArrangementContainer>""horzDist"b8"vertDist"b8"baselineRelative"B"columns"Q"rowSpacing"d"itemSpacing"d"rowHeight"d"itemWidth"d"cells"{vector<_NUIFlowArrangementCell, std::allocator<_NUIFlowArrangementCell>>="__begin_"^{_NUIFlowArrangementCell}"__end_"^{_NUIFlowArrangementCell}"__end_cap_"{__compressed_pair<_NUIFlowArrangementCell *, std::allocator<_NUIFlowArrangementCell>>="__value_"^{_NUIFlowArrangementCell}}}"rows"{vector<_NUIFlowRowContainer *, std::allocator<_NUIFlowRowContainer *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<_NUIFlowRowContainer **, std::allocator<_NUIFlowRowContainer *>>="__value_"^@}}"flowContainer"@"_NUIFlowContainer""measuredWidth"d"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}"maxBaseLinePair"{?="baseLineFromTop"d"baseLineFromBottom"d}};

@interface NUIContainerFlowView : NUIContainerView<_NUIFlowArrangementContainer> {
  /* instance variables */
  struct _NUIFlowArrangement { <_NUIFlowArrangementContainer> *container; unsigned int x :8 horzDist; unsigned int x :8 vertDist; BOOL baselineRelative; unsigned long long columns; double rowSpacing; double itemSpacing; double rowHeight; double itemWidth; struct vector<_NUIFlowArrangementCell, std::allocator<_NUIFlowArrangementCell>> { struct _NUIFlowArrangementCell *__begin_; struct _NUIFlowArrangementCell *__end_; struct __compressed_pair<_NUIFlowArrangementCell *, std::allocator<_NUIFlowArrangementCell>> { struct _NUIFlowArrangementCell *__value_; } __end_cap_; } cells; struct vector<_NUIFlowRowContainer *, std::allocator<_NUIFlowRowContainer *>> { __end_ * *__begin_; __end_cap_ * * x0; struct __compressed_pair<_NUIFlowRowContainer **, std::allocator<_NUIFlowRowContainer *>> { id *__value_; } x1; } rows; _NUIFlowContainer *flowContainer; double measuredWidth; struct vector<CGRect, std::allocator<CGRect>> { struct CGRect *__begin_; struct CGRect *__end_; struct __compressed_pair<CGRect *, std::allocator<CGRect>> { struct CGRect *__value_; } __end_cap_; } viewFrames; struct { double baseLineFromTop; double baseLineFromBottom; } maxBaseLinePair; } _arrangement;
  struct { unsigned int x :8 horzAlign; unsigned int x :8 vertAlign; } _flowFlags;
}

@property (nonatomic) long long numberOfColumns;
@property (nonatomic) long long horizontalAlignment;
@property (nonatomic) long long verticalAlignment;
@property (nonatomic) long long horizontalDistribution;
@property (nonatomic) long long verticalDistribution;
@property (nonatomic) double rowSpacing;
@property (nonatomic) double columnSpacing;
@property (nonatomic) double itemSpacing;
@property (nonatomic) double rowHeight;
@property (nonatomic) double itemWidth;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)containerFlowViewWithArrangedSubviews:(id)subviews;
+ (id)containerFlowViewWithNumberOfColumns:(long long)columns arrangedSubviews:(id)subviews;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithArrangedSubviews:(id)subviews;
- (void)dealloc;
- (long long)alignmentForCell:(const struct _NUIFlowArrangementCell { id x0; struct CGSize { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct { double x0; double x1; } x3; unsigned int x4 :8; unsigned int x5 :8; } *)cell inAxis:(long long)axis;
- (BOOL)isLayoutSizeDependentOnPerpendicularAxis;
- (id)calculateViewForFirstBaselineLayout;
- (id)calculateViewForLastBaselineLayout;
- (void)populateFlowArrangementCells:(void *)cells;
- (void)invalidateInternalStateForInvalidation:(long long)invalidation;
- (struct CGSize { double x0; double x1; })calculateArrangedSizeFittingSize:(struct CGSize { double x0; double x1; })size;
- (void)layoutArrangedSubviewsInBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)arrangedDebugDescription;
- (id)debugDictionary;
- (BOOL)respondsToSelector:(SEL)selector;
- (struct CGSize { double x0; double x1; })fittingSizeForFlowPositioningOfArrangedSubview:(id)subview withProposedSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })fittingSizeForCell:(const struct _NUIFlowArrangementCell { id x0; struct CGSize { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct { double x0; double x1; } x3; unsigned int x4 :8; unsigned int x5 :8; } *)cell withProposedSize:(struct CGSize { double x0; double x1; })size;
- (long long)distributionForRowAtIndex:(long long)index ofTotalRowCount:(long long)count withArrangedSubviews:(id)subviews;
- (long long)distributionForRowAtIndex:(long long)index ofTotalRowCount:(long long)count withCells:(const void *)cells;
@end

#endif /* NUIContainerFlowView_h */
