//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 43.4.0.0.0
//
#ifndef UIView_NUIContainerView_h
#define UIView_NUIContainerView_h
@import Foundation;

#include "UIView.h"

@class NSArray, NSMutableArray, UIView;
@protocol NUIContainerViewDelegate, {map<UIView *, _NUIContainerViewArrangedSubview, std::less<UIView *>, std::allocator<std::pair<UIView *const, _NUIContainerViewArrangedSubview>>>="__tree_"{__tree<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>>, std::allocator<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>>>="__value_"Q}}}, {vector<CALayer *, std::allocator<CALayer *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<CALayer **, std::allocator<CALayer *>>="__value_"^@}};

@interface UIView (NUIContainerView) <NUIArrangementItem, _UIMultilineTextContentSizing>
/* instance methods */
- (struct CGSize { double x0; double x1; })sizeToBestFitAndLayoutIfNeeded;
- (struct CGSize { double x0; double x1; })testableSizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (struct CGSize { double x0; double x1; })testableEffectiveLayoutSizeFittingSize:(struct CGSize { double x0; double x1; })size;
- (void)_intrinsicContentSizeInvalidatedForChildView:(id)view;
- (BOOL)_isContainerView;
- (long long)_nui_baselineViewType;
- (id)contentLayoutSizeCacheDescription;
- (id)debugSizeCacheDict;
- (id)debugSizeCache;
- (BOOL)canUseFastLayoutSizeCalulation;
- (struct CGSize { double x0; double x1; })calculateLayoutSizeFittingSize:(struct CGSize { double x0; double x1; })size;
- (double)effectiveScreenScale;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })effectiveAlignmentRectInsets;
- (double)effectiveBaselineOffsetFromContentBottom;
- (double)effectiveFirstBaselineOffsetFromContentTop;
- (void)setCurrentEffectiveLayoutSizeFittingSizeShouldNotBeCached;
- (double)systemSpacingToAdjecentSiblingView:(id)view axis:(long long)axis baselineRelative:(BOOL)relative multiplier:(double)multiplier;
- (double)systemSpacingToSuperView:(id)view edge:(unsigned long long)edge baselineRelative:(BOOL)relative multiplier:(double)multiplier;
- (void)_didInvalidateIntrinsicContentSize;
- (void)nukeContentLayoutSizeCacheFromOrbit;
- (struct CGSize { double x0; double x1; })effectiveLayoutSizeFittingSize:(struct CGSize { double x0; double x1; })size;
- (double)effectiveBaselineOffsetFromBottom;
- (double)effectiveFirstBaselineOffsetFromTop;
- (BOOL)isLayoutSizeDependentOnPerpendicularAxis;
- (void)setNeverCacheEffectiveLayoutSize:(BOOL)size;
- (BOOL)neverCacheEffectiveLayoutSize;
- (void)setMinimumLayoutSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })minimumLayoutSize;
- (void)setMaximumLayoutSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })maximumLayoutSize;
- (void)setLayoutSize:(struct CGSize { double x0; double x1; })size withContentPriority:(float)priority;
- (void)setLayoutSize:(struct CGSize { double x0; double x1; })size withHorizontalContentPriority:(float)priority verticalContentPriority:(float)priority;
- (void)setCustomAlignmentRectInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })customAlignmentRectInsets;
- (void)setCustomBaselineOffsetFromBottom:(double)bottom;
- (double)customBaselineOffsetFromBottom;
- (void)setCustomFirstBaselineOffsetFromTop:(double)top;
- (double)customFirstBaselineOffsetFromTop;
- (void)setInvalidatingIntrinsicContentSizeAlsoInvalidatesSuperview:(BOOL)superview;
- (BOOL)invalidatingIntrinsicContentSizeAlsoInvalidatesSuperview;
- (void)setUntransformedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
@end

#endif /* UIView_NUIContainerView_h */
