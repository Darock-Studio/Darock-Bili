//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 43.4.0.0.0
//
#ifndef _NUIFlowRowContainer_h
#define _NUIFlowRowContainer_h
@import Foundation;

#include "NUIArrangementItem-Protocol.h"
#include "_NUIGridArrangementContainer-Protocol.h"

@class NSString;
@protocol {_NUIGridArrangement="container"@"<_NUIGridArrangementContainer>""horzDist"b8"vertDist"b8"baselineRelative"B"hasValidMeasurement"B"cells"{vector<_NUIGridArrangementCell, std::allocator<_NUIGridArrangementCell>>="__begin_"^{_NUIGridArrangementCell}"__end_"^{_NUIGridArrangementCell}"__end_cap_"{__compressed_pair<_NUIGridArrangementCell *, std::allocator<_NUIGridArrangementCell>>="__value_"^{_NUIGridArrangementCell}}}"columns"{vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>>="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>>="__value_"^{_NUIGridArrangementDimension}}}"rows"{vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>>="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>>="__value_"^{_NUIGridArrangementDimension}}}"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}};

@interface _NUIFlowRowContainer : NSObject<_NUIGridArrangementContainer, NUIArrangementItem> {
  /* instance variables */
  struct _NUIGridArrangement { <_NUIGridArrangementContainer> *container; unsigned int x :8 horzDist; unsigned int x :8 vertDist; BOOL baselineRelative; BOOL hasValidMeasurement; struct vector<_NUIGridArrangementCell, std::allocator<_NUIGridArrangementCell>> { struct _NUIGridArrangementCell *__begin_; struct _NUIGridArrangementCell *__end_; struct __compressed_pair<_NUIGridArrangementCell *, std::allocator<_NUIGridArrangementCell>> { struct _NUIGridArrangementCell *__value_; } __end_cap_; } cells; struct vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>> { struct _NUIGridArrangementDimension *__begin_; struct _NUIGridArrangementDimension *__end_; struct __compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>> { struct _NUIGridArrangementDimension *__value_; } __end_cap_; } columns; struct vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>> { struct _NUIGridArrangementDimension *__begin_; struct _NUIGridArrangementDimension *__end_; struct __compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>> { struct _NUIGridArrangementDimension *__value_; } __end_cap_; } rows; struct vector<CGRect, std::allocator<CGRect>> { struct CGRect *__begin_; struct CGRect *__end_; struct __compressed_pair<CGRect *, std::allocator<CGRect>> { struct CGRect *__value_; } __end_cap_; } viewFrames; } _gridArrangement;
  struct _NSRange { unsigned long long location; unsigned long long length; } _range;
  const void * _flowArrangement;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void)dealloc;
- (struct CGSize { double x0; double x1; })contentLayoutSizeFittingSize:(struct CGSize { double x0; double x1; })size forArrangedSubview:(id)subview;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutFrameForArrangedSubview:(id)subview withProposedContentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)populateGridArrangementCells:(void *)cells;
- (void)populateGridArrangementDimension:(void *)dimension withCells:(const void *)cells axis:(long long)axis;
- (float)contentCompressionResistancePriorityForAxis:(long long)axis;
- (float)contentHuggingPriorityForAxis:(long long)axis;
- (double)effectiveBaselineOffsetFromContentBottom;
- (double)effectiveFirstBaselineOffsetFromContentTop;
- (BOOL)isLayoutSizeDependentOnPerpendicularAxis;
@end

#endif /* _NUIFlowRowContainer_h */
