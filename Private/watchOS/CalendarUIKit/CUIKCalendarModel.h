//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1205.1.1.2.0
//
#ifndef CUIKCalendarModel_h
#define CUIKCalendarModel_h
@import Foundation;

#include "CUIKCalendarModelSceneState.h"
#include "CUIKEventLoader.h"
#include "CUIKEventLoaderDelegate-Protocol.h"
#include "CUIKOccurrenceCacheDataSourceProtocol-Protocol.h"
#include "CUIKPasteboardManager.h"
#include "CUIKPasteboardManagerCalendarProvider-Protocol.h"
#include "CUIKPasteboardManagerEventStoreProvider-Protocol.h"
#include "CUIKUndoManager.h"

@class BOOL *, EKCalendarDate, EKEvent, EKEventStore, EKSource, NSArray, NSCalendar, NSLock, NSMutableArray, NSMutableDictionary, NSSet, NSString, _EKNotificationMonitor;

@interface CUIKCalendarModel : NSObject<CUIKEventLoaderDelegate, CUIKPasteboardManagerCalendarProvider, CUIKPasteboardManagerEventStoreProvider> {
  /* instance variables */
  BOOL _modelLocked;
  BOOL _notificationMonitorSetUp;
  CUIKEventLoader *_eventLoader;
  NSLock *_filterLock;
  NSArray *_visibleCalendars;
  BOOL _hasLoadedUnselectedCalendarsForFocusMode;
  NSArray *_delegateSources;
  long long _invitationBearingStoresExist;
  _EKNotificationMonitor *_notificationMonitor;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _dataSourceLock;
  NSObject<CUIKOccurrenceCacheDataSourceProtocol> *_occurrenceCacheDataSource;
  NSObject<CUIKOccurrenceCacheDataSourceProtocol> *_occurrenceCacheFilteredDataSource;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _cachedFakeTodayIndexLock;
  long long _cachedFakeTodayIndex;
  NSMutableDictionary *_displayableAccountErrorCounts;
  long long _initialAccountSyncCount;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _selectedDateLock;
  BOOL _suspendSelectedDateChanges;
  EKCalendarDate *_suspendedSelectedDate;
  CUIKCalendarModelSceneState *_persistedSceneState;
}

@property (readonly, nonatomic) EKEventStore *eventStore;
@property (copy, nonatomic) NSCalendar *calendar;
@property (readonly, nonatomic) CUIKPasteboardManager *pasteboardManager;
@property (readonly, nonatomic) CUIKUndoManager *undoManager;
@property (copy, nonatomic) EKCalendarDate *selectedDate;
@property (readonly, nonatomic) EKCalendarDate *selectedDay;
@property (readonly, nonatomic) long long readWriteCalendarCount;
@property (readonly, nonatomic) long long accountsInInitialSyncCount;
@property (readonly, nonatomic) BOOL currentlyLocked;
@property (nonatomic) unsigned long long firstVisibleSecond;
@property (retain, nonatomic) EKEvent *selectedOccurrence;
@property (copy, nonatomic) NSArray *selectedOccurrences;
@property (retain, nonatomic) NSSet *selectedCalendars;
@property (readonly, nonatomic) NSSet *selectedCalendarsIgnoringFocus;
@property (copy, nonatomic) NSSet *unselectedCalendars;
@property (readonly, nonatomic) NSSet *unselectedCalendarsIgnoringFocus;
@property (readonly, nonatomic) NSSet *unselectedCalendarsForFocusMode;
@property (nonatomic) unsigned long long focusFilterMode;
@property (nonatomic) BOOL disableFocusFiltering;
@property (retain, nonatomic) NSString *searchString;
@property (nonatomic) BOOL showDayAsList;
@property (nonatomic) BOOL showMonthAsDivided;
@property (readonly, retain, nonatomic) EKSource *sourceForSelectedIdentity;
@property (retain, nonatomic) NSArray *sortedEnabledDelegates;
@property (readonly, nonatomic) BOOL containsDelegateSources;
@property (copy, nonatomic) NSString *sceneIdentifier;
@property (nonatomic) BOOL autoStartNotificationMonitor;
@property (nonatomic) BOOL allowEventLocationPrediction;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sortedEnabledDelegateSourcesFromStore:(id)store;
+ (void)temporarilyIgnoreInvalidCredentialsErrorForSource:(id)source;
+ (void)temporarilyIgnoreInsecureConnectionErrorsForCalendars:(id)calendars;
+ (unsigned long long)errorForSource:(id)source;
+ (unsigned long long)errorForSubscribedCalendarChildrenOfSource:(id)source;

/* instance methods */
- (id)initWithPasteboardManager:(id)manager;
- (id)initWithEventStore:(id)store pasteboardManager:(id)manager;
- (id)initWithDataPath:(id)path pasteboardManager:(id)manager;
- (void)_performCommonInitializationWithPasteboardManager:(id)manager;
- (void)_setupUndoManager;
- (void)dealloc;
- (id)allCalendarsForCurrentIdentity;
- (id)_calendarsEnabledInFocus:(id)focus;
- (id)_calendarsForCurrentIdentityFromCalendars:(id)calendars lock:(BOOL)lock;
- (id)calendarsForCurrentIdentityFromCalendars:(id)calendars;
- (void)setFocusFilterMode:(unsigned long long)mode force:(BOOL)force;
- (void)_setFocusFilterMode:(unsigned long long)mode force:(BOOL)force;
- (BOOL)_setSelectedCalendars:(id)calendars;
- (void)postSelectedCalendarsChanged;
- (void)_focusModeConfigurationChanged:(id)changed;
- (void)setSelectedCalendarsAndRequestPreferenceSave:(id)save reason:(id)reason;
- (BOOL)_eventBelongsToCurrentIdentity:(id)identity;
- (void)updateSourceForSelectedIdentity:(id)identity selectedCalendars:(id)calendars;
- (BOOL)selectedOccurrenceIsSearchMatch;
- (void)checkLocationAuthorizationAndAllowEventLocationPrediction;
- (void)locationPrecisionDeterminedNotification:(id)notification;
- (void)_loadVisibleCalendarsIfNeeded;
- (id)_unselectedCalendarsForFocusMode;
- (void)ensureCalendarVisibleWithId:(id)id;
- (BOOL)isCalendarVisibleWithID:(id)id;
- (id)defaultCalendarForNewEvents;
- (id)refreshAccountListIfNeeded:(BOOL)needed;
- (id)refreshCalendarDataIfNeeded:(BOOL)needed;
- (void)setSelectedDateChangesDelayedUntilAfterTransition:(BOOL)transition;
- (void)updateSelectedDateTimeZone;
- (void)addOccurrenceAwaitingRefresh:(id)refresh;
- (void)addOccurrenceAwaitingDeletion:(id)deletion;
- (id)occurrencesForStartDate:(id)date endDate:(id)date preSorted:(BOOL)sorted waitForLoad:(BOOL)load;
- (id)selectedDateOccurrences:(BOOL)occurrences loadIsComplete:(BOOL *)complete;
- (id)occurrencesForStartDay:(id)day endDay:(id)day preSorted:(BOOL)sorted waitForLoad:(BOOL)load;
- (id)occurrencesForDay:(id)day waitForLoad:(BOOL)load;
- (double)_tomorrow;
- (id)closestOccurrenceToTomorrowForEventObjectID:(id)id;
- (void)setDesiredPaddingDays:(unsigned int)days;
- (void)setMaxCachedDays:(unsigned int)days;
- (void)setComponentForExpandingPadding:(unsigned long long)padding;
- (void)setPreferredReloadStartDate:(id)date endDate:(id)date;
- (void)_occurrenceCacheChangedNotificationHandler;
- (BOOL)cachedOccurrencesAreLoaded;
- (long long)numberOfDaysWithCachedOccurrences;
- (id)_dataSourceUsingFilter:(BOOL)filter;
- (long long)numberOfDaysWithCachedOccurrencesUsingFilter:(BOOL)filter;
- (long long)numberOfCachedOccurrencesInSection:(long long)section;
- (long long)numberOfCachedOccurrencesInSection:(long long)section usingFilter:(BOOL)filter;
- (id)dateForCachedOccurrencesInSection:(long long)section;
- (id)dateForCachedOccurrencesInSection:(long long)section usingFilter:(BOOL)filter;
- (id)dateForCachedOccurrencesInSection:(long long)section usingFilter:(BOOL)filter holdingCachedFakeTodayIndexLock:(BOOL)lock;
- (id)cachedOccurrenceAtIndexPath:(id)path;
- (id)cachedOccurrenceAtIndexPath:(id)path usingFilter:(BOOL)filter;
- (long long)sectionForCachedOccurrencesOnDate:(id)date sectionExistsForDay:(BOOL *)day;
- (long long)_sectionForCachedOccurrencesOnDate:(id)date sectionExistsForDay:(BOOL *)day usingFilter:(BOOL)filter;
- (id)indexPathsForOccurrence:(id)occurrence usingFilter:(BOOL)filter;
- (long long)sectionForCachedOccurrencesOnDate:(id)date;
- (long long)sectionForCachedOccurrencesOnDate:(id)date usingFilter:(BOOL)filter;
- (long long)_cachedFakeTodayIndexLocked;
- (void)fetchCachedDaysInBackgroundStartingFromSection:(long long)section usingFilter:(BOOL)filter;
- (void)fetchDaysStartingFromSection:(long long)section sectionsToLoadInBothDirections:(long long)directions;
- (id)cachedSpecialDayDataForSection:(long long)section;
- (void)_searchResultsAvailable:(id)available;
- (void)_recreateOccurrenceCacheDataSources;
- (void)_createOccurrenceCacheDataSources;
- (void)_executeBlockWithOccurrenceCacheDataSources:(id /* block */)sources;
- (void)_invalidateCachedOccurrences;
- (void)_invalidateOccurrenceCacheDataSources;
- (void)_processReloadForCacheOnly:(BOOL)only includingCalendars:(BOOL)calendars checkCalendarsValid:(BOOL)valid checkSources:(BOOL)sources;
- (void)_checkSources;
- (long long)displayableAccountErrorsForSource:(id)source;
- (BOOL)countSourcesWithErrors;
- (long long)countAccountsInInitialSync;
- (void)simulateFirstLoadFinished;
- (void)_finishedFirstLoad;
- (void)calendarEventLoader:(id)loader occurrencesDidUpdateBetweenStart:(double)start end:(double)end generation:(int)generation wasEmptyLoad:(BOOL)load;
- (void)_notificationBlacklisted;
- (void)_eventStoreChanged:(id)changed;
- (void)_ignoredErrorsChanged;
- (void)_occurrenceCacheChanged;
- (void)updateAfterAppResume;
- (void)prepareForAppSuspend;
- (void)_reloadIfTodayDetermined;
- (void)_tzSupportTodayRolledOver;
- (void)_significantTimeChange;
- (void)_sceneEnteredBackground:(id)background;
- (void)_sceneEnteredForeground:(id)foreground;
- (void)_localeChanged:(id)changed;
- (void)_timeZoneChanged:(id)changed;
- (void)_systemWake;
- (void)setSelectedOccurrence:(id)occurrence forceChange:(BOOL)change;
- (void)_setSelectedOccurrences:(id)occurrences forceChange:(BOOL)change;
- (void)selectOccurrence:(id)occurrence;
- (void)_selectOccurrence:(id)occurrence notify:(BOOL)notify;
- (void)deselectOccurrence:(id)occurrence;
- (void)_deselectOccurrence:(id)occurrence notify:(BOOL)notify;
- (id)persistedSceneState;
- (BOOL)removeEvent:(id)event withSpan:(long long)span error:(id *)error;
- (void)startNotificationMonitor;
- (id)_notificationMonitor;
- (BOOL)invitationBearingStoresExistForEvents;
- (void)_notificationsExpired:(id)expired;
- (void)_notificationsLoaded:(id)loaded;
- (BOOL)_shouldShowNotification:(id)notification;
- (unsigned long long)allEventNotificationsCount;
- (id)allEventNotificationReferences;
- (unsigned long long)_eventNotificationCountForCurrentIdentityIgnoringFilter:(BOOL)filter;
- (id)_eventNotificationsForCurrentIdentityIgnoringFilter:(BOOL)filter;
- (unsigned long long)eventNotificationsForCurrentIdentityCount;
- (id)eventNotificationReferencesForCurrentIdentity;
- (unsigned long long)eventNotificationsForCurrentIdentityIgnoringFilterCount;
- (id)eventNotificationReferencesForCurrentIdentityIgnoringFilter;
- (id)eventNotificationReferencesForIdentity:(id)identity;
- (id)eventNotificationReferencesForIdentity:(id)identity ignoringFilter:(BOOL)filter;
- (BOOL)searchingOccurrences;
- (void)addRespondedNotificationObjectID:(id)id;
@end

#endif /* CUIKCalendarModel_h */
