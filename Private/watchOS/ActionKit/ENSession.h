//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2206.0.5.0.0
//
#ifndef ENSession_h
#define ENSession_h
@import Foundation;

#include "EDAMUser.h"
#include "ENAuthCache.h"
#include "ENAuthenticator-Protocol.h"
#include "ENAuthenticatorDelegate-Protocol.h"
#include "ENBusinessNoteStoreClient.h"
#include "ENBusinessNoteStoreClientDelegate-Protocol.h"
#include "ENLinkedNoteStoreClientDelegate-Protocol.h"
#include "ENNoteStoreClient.h"
#include "ENPreferencesStore.h"
#include "ENSDKLogging-Protocol.h"
#include "ENUserStoreClient.h"

@class NSArray, NSDate, NSString;
@protocol OS_dispatch_queue;

@interface ENSession : NSObject<ENLinkedNoteStoreClientDelegate, ENBusinessNoteStoreClientDelegate, ENAuthenticatorDelegate>

@property (nonatomic) BOOL supportsLinkedAppNotebook;
@property (retain, nonatomic) EDAMUser *businessUser;
@property (retain, nonatomic) ENPreferencesStore *preferences;
@property (retain, nonatomic) ENUserStoreClient *userStore;
@property (retain, nonatomic) ENNoteStoreClient *primaryNoteStore;
@property (retain, nonatomic) ENBusinessNoteStoreClient *businessNoteStore;
@property (retain, nonatomic) ENAuthCache *authCache;
@property (retain, nonatomic) NSArray *notebooksCache;
@property (retain, nonatomic) NSDate *notebooksCacheDate;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *thumbnailQueue;
@property (retain, nonatomic) ENUserStoreClient *userStorePendingRevocation;
@property (nonatomic) long long personalUploadUsage;
@property (nonatomic) long long personalUploadLimit;
@property (nonatomic) long long businessUploadUsage;
@property (nonatomic) long long businessUploadLimit;
@property (retain, nonatomic) NSObject<ENSDKLogging> *logger;
@property (copy, nonatomic) NSString *sourceApplication;
@property (nonatomic) BOOL isAuthenticated;
@property (readonly, nonatomic) BOOL isAuthenticationInProgress;
@property (readonly, nonatomic) BOOL isPremiumUser;
@property (readonly, nonatomic) BOOL isBusinessUser;
@property (readonly, nonatomic) NSString *userDisplayName;
@property (readonly, nonatomic) NSString *businessDisplayName;
@property (retain, nonatomic) NSObject<ENAuthenticator> *authenticator;
@property (copy, nonatomic) id /* block */ authorizationBlock;
@property (copy, nonatomic) id /* block */ authenticationCompletion;
@property (copy, nonatomic) NSString *sessionHost;
@property (retain, nonatomic) EDAMUser *user;
@property (copy, nonatomic) NSString *primaryAuthenticationToken;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)setSharedSessionConsumerKey:(id)key consumerSecret:(id)secret optionalHost:(id)host;
+ (void)setSharedSessionDeveloperToken:(id)token noteStoreUrl:(id)url;
+ (id)sharedSession;
+ (void)setDisableRefreshingNotebooksCacheOnLaunch:(BOOL)launch;
+ (void)setSecurityApplicationGroupIdentifier:(id)identifier;
+ (void)setKeychainGroup:(id)group;
+ (id)keychainAccessGroup;
+ (id)sessionHostOverride;
+ (id)consumerKey;
+ (id)consumerSecret;
+ (id)developerToken;
+ (BOOL)checkSharedSessionSettings;
+ (id)bundleSeedID;

/* instance methods */
- (void)authenticateWithAuthorizationBlock:(id /* block */)block preferRegistration:(BOOL)registration completion:(id /* block */)completion;
- (id)init;
- (void)dealloc;
- (void)startup;
- (void)selectInitialSessionHost;
- (void)performPostAuthentication;
- (void)refreshUploadUsage;
- (void)completeAuthenticationWithError:(id)error;
- (int)userID;
- (BOOL)appNotebookIsLinked;
- (void)unauthenticate;
- (void)unauthenticateWithoutRevokingAccessToken;
- (void)unauthenticateAndRevokeAccessToken:(BOOL)token;
- (BOOL)handleOpenURL:(id)url;
- (void)listNotebooksWithCompletion:(id /* block */)completion;
- (void)listWritableNotebooksWithCompletion:(id /* block */)completion;
- (void)listNotebooks_listNotebooksWithContext:(id)context;
- (void)listNotebooks_listSharedNotebooksWithContext:(id)context;
- (void)listNotebooks_listLinkedNotebooksWithContext:(id)context;
- (void)listNotebooks_fetchSharedBusinessNotebooksWithContext:(id)context;
- (void)listNotebooks_fetchBusinessNotebooksWithContext:(id)context;
- (void)listNotebooks_processBusinessNotebooksWithContext:(id)context;
- (void)listNotebooks_fetchSharedNotebooksWithContext:(id)context;
- (void)listNotebooks_completePendingSharedNotebookWithContext:(id)context;
- (void)listNotebooks_processSharedNotebooksWithContext:(id)context;
- (void)listNotebooks_prepareResultsWithContext:(id)context;
- (void)listNotebooks_completeWithContext:(id)context error:(id)error;
- (void)listNotebooks_cleanCache;
- (void)uploadNote:(id)note notebook:(id)notebook completion:(id /* block */)completion;
- (void)uploadNote:(id)note policy:(long long)policy toNotebook:(id)notebook orReplaceNote:(id)note progress:(id /* block */)progress completion:(id /* block */)completion;
- (void)uploadNote_determineDestinationWithContext:(id)context;
- (void)uploadNote_updateWithContext:(id)context;
- (void)uploadNote_findLinkedAppNotebookWithContext:(id)context;
- (void)uploadNote_findSharedAppNotebookWithContext:(id)context;
- (void)uploadNote_createWithContext:(id)context;
- (void)uploadNote_completeWithContext:(id)context error:(id)error;
- (void)shareNote:(id)note completion:(id /* block */)completion;
- (void)deleteNote:(id)note completion:(id /* block */)completion;
- (void)findNotesWithSearch:(id)search inNotebook:(id)notebook orScope:(unsigned long long)scope sortOrder:(unsigned long long)order maxResults:(unsigned long long)results completion:(id /* block */)completion;
- (void)findNotes_listNotebooksWithContext:(id)context;
- (void)findNotes_findInPersonalScopeWithContext:(id)context;
- (void)findNotes_findInBusinessScopeWithContext:(id)context;
- (void)findNotes_findInLinkedScopeWithContext:(id)context;
- (void)findNotes_nextFindInLinkedScopeWithContext:(id)context;
- (void)findNotes_processResultsWithContext:(id)context;
- (void)findNotes_completeWithContext:(id)context error:(id)error;
- (void)downloadNote:(id)note progress:(id /* block */)progress completion:(id /* block */)completion;
- (void)downloadThumbnailForNote:(id)note maxDimension:(unsigned long long)dimension completion:(id /* block */)completion;
- (BOOL)isErrorDueToRestrictedAuth:(id)auth;
- (id)credentialStore;
- (id)credentialsForHost:(id)host;
- (void)addCredentials:(id)credentials;
- (void)saveCredentialStore:(id)store;
- (id)primaryCredentials;
- (id)validBusinessAuthenticationResult;
- (void)notifyAuthenticationChanged;
- (id)noteStoreForLinkedNotebook:(id)notebook;
- (id)noteStoreForNoteRef:(id)ref;
- (id)noteStoreForNotebook:(id)notebook;
- (id)shardIdForNoteRef:(id)ref;
- (id)authenticationTokenForNoteRef:(id)ref;
- (id)currentProfileName;
- (void)setCurrentProfileNameFromHost:(id)host;
- (id)userStoreUrl;
- (id)authenticationTokenForBusinessStoreClient:(id)client;
- (id)noteStoreUrlForBusinessStoreClient:(id)client;
- (id)authenticationTokenForLinkedNotebookRef:(id)ref;
- (id)userStoreClientForBootstrapping;
- (void)authenticatorShouldShowAuthorizationUIWithURL:(id)url callbackPrefix:(id)prefix completionBlock:(id /* block */)block;
- (void)authenticatorDidAuthenticateWithCredentials:(id)credentials authInfo:(id)info;
- (void)authenticatorDidFailWithError:(id)error;
- (void)storeClientFailedAuthentication:(id)authentication;
@end

#endif /* ENSession_h */
