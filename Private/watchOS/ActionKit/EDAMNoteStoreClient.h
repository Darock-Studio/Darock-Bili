//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2206.0.5.0.0
//
#ifndef EDAMNoteStoreClient_h
#define EDAMNoteStoreClient_h
@import Foundation;

#include "EDAMNoteStore-Protocol.h"
#include "ENTProtocol-Protocol.h"

@class NSString;

@interface EDAMNoteStoreClient : NSObject<EDAMNoteStore> {
  /* instance variables */
  NSObject<ENTProtocol> *_inProtocol;
  NSObject<ENTProtocol> *_outProtocol;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void)cancel;
- (void)setUploadProgressBlock:(id /* block */)block;
- (void)setDownloadProgressBlock:(id /* block */)block;
- (id)initWithProtocol:(id)protocol;
- (id)initWithInProtocol:(id)protocol outProtocol:(id)protocol;
- (id)getSyncState:(id)state;
- (id)getSyncStateWithMetrics:(id)metrics clientMetrics:(id)metrics;
- (id)getSyncChunk:(id)chunk afterUSN:(int)usn maxEntries:(int)entries fullSyncOnly:(BOOL)only;
- (id)getFilteredSyncChunk:(id)chunk afterUSN:(int)usn maxEntries:(int)entries filter:(id)filter;
- (id)getLinkedNotebookSyncState:(id)state linkedNotebook:(id)notebook;
- (id)getLinkedNotebookSyncChunk:(id)chunk linkedNotebook:(id)notebook afterUSN:(int)usn maxEntries:(int)entries fullSyncOnly:(BOOL)only;
- (id)listNotebooks:(id)notebooks;
- (id)listPublishedBusinessNotebooks:(id)notebooks;
- (id)listAccessibleBusinessNotebooks:(id)notebooks;
- (id)getNotebook:(id)notebook guid:(id)guid;
- (id)getDefaultNotebook:(id)notebook;
- (id)createNotebook:(id)notebook notebook:(id)notebook;
- (int)updateNotebook:(id)notebook notebook:(id)notebook;
- (int)expungeNotebook:(id)notebook guid:(id)guid;
- (id)listTags:(id)tags;
- (id)listTagsByNotebook:(id)notebook notebookGuid:(id)guid;
- (id)getTag:(id)tag guid:(id)guid;
- (id)createTag:(id)tag tag:(id)tag;
- (int)updateTag:(id)tag tag:(id)tag;
- (void)untagAll:(id)all guid:(id)guid;
- (int)expungeTag:(id)tag guid:(id)guid;
- (id)listSearches:(id)searches;
- (id)getSearch:(id)search guid:(id)guid;
- (id)createSearch:(id)search search:(id)search;
- (int)updateSearch:(id)search search:(id)search;
- (int)expungeSearch:(id)search guid:(id)guid;
- (id)findNotes:(id)notes filter:(id)filter offset:(int)offset maxNotes:(int)notes;
- (int)findNoteOffset:(id)offset filter:(id)filter guid:(id)guid;
- (id)findNotesMetadata:(id)metadata filter:(id)filter offset:(int)offset maxNotes:(int)notes resultSpec:(id)spec;
- (id)getNoteSnippets:(id)snippets noteGuids:(id)guids maxSnippetLength:(int)length;
- (id)findNoteCounts:(id)counts filter:(id)filter withTrash:(BOOL)trash;
- (id)getNoteWithResultSpec:(id)spec guid:(id)guid resultSpec:(id)spec;
- (id)getNote:(id)note guid:(id)guid withContent:(BOOL)content withResourcesData:(BOOL)data withResourcesRecognition:(BOOL)recognition withResourcesAlternateData:(BOOL)data;
- (id)getPreferences:(id)preferences preferenceNames:(id)names;
- (int)updatePreferences:(id)preferences preferencesToUpdate:(id)update;
- (id)getNoteApplicationData:(id)data guid:(id)guid;
- (id)getNoteApplicationDataEntry:(id)entry guid:(id)guid key:(id)key;
- (int)setNoteApplicationDataEntry:(id)entry guid:(id)guid key:(id)key value:(id)value;
- (int)unsetNoteApplicationDataEntry:(id)entry guid:(id)guid key:(id)key;
- (id)getNoteContent:(id)content guid:(id)guid;
- (id)getNoteSearchText:(id)text guid:(id)guid noteOnly:(BOOL)only tokenizeForIndexing:(BOOL)indexing;
- (id)getResourceSearchText:(id)text guid:(id)guid;
- (id)getNoteTagNames:(id)names guid:(id)guid;
- (id)createNote:(id)note note:(id)note;
- (id)updateNote:(id)note note:(id)note;
- (int)deleteNote:(id)note guid:(id)guid;
- (int)expungeNote:(id)note guid:(id)guid;
- (int)expungeNotes:(id)notes noteGuids:(id)guids;
- (int)expungeInactiveNotes:(id)notes;
- (id)copyNote:(id)note noteGuid:(id)guid toNotebookGuid:(id)guid;
- (id)listNoteVersions:(id)versions noteGuid:(id)guid;
- (id)getNoteVersion:(id)version noteGuid:(id)guid updateSequenceNum:(int)num withResourcesData:(BOOL)data withResourcesRecognition:(BOOL)recognition withResourcesAlternateData:(BOOL)data;
- (id)getResource:(id)resource guid:(id)guid withData:(BOOL)data withRecognition:(BOOL)recognition withAttributes:(BOOL)attributes withAlternateData:(BOOL)data;
- (id)getResourceApplicationData:(id)data guid:(id)guid;
- (id)getResourceApplicationDataEntry:(id)entry guid:(id)guid key:(id)key;
- (int)setResourceApplicationDataEntry:(id)entry guid:(id)guid key:(id)key value:(id)value;
- (int)unsetResourceApplicationDataEntry:(id)entry guid:(id)guid key:(id)key;
- (int)updateResource:(id)resource resource:(id)resource;
- (id)getResourceData:(id)data guid:(id)guid;
- (id)getResourceByHash:(id)hash noteGuid:(id)guid contentHash:(id)hash withData:(BOOL)data withRecognition:(BOOL)recognition withAlternateData:(BOOL)data;
- (id)getResourceRecognition:(id)recognition guid:(id)guid;
- (id)getResourceAlternateData:(id)data guid:(id)guid;
- (id)getResourceAttributes:(id)attributes guid:(id)guid;
- (id)getAds:(id)ads adParameters:(id)parameters;
- (id)getRandomAd:(id)ad adParameters:(id)parameters;
- (id)getPublicNotebook:(int)notebook publicUri:(id)uri;
- (id)createSharedNotebook:(id)notebook sharedNotebook:(id)notebook;
- (id)shareNotebook:(id)notebook sharedNotebook:(id)notebook message:(id)message;
- (id)createOrUpdateNotebookShares:(id)shares shareTemplate:(id)template;
- (int)updateSharedNotebook:(id)notebook sharedNotebook:(id)notebook;
- (int)setSharedNotebookRecipientSettings:(id)settings sharedNotebookId:(long long)id recipientSettings:(id)settings;
- (id)setNotebookRecipientSettings:(id)settings notebookGuid:(id)guid recipientSettings:(id)settings;
- (int)sendMessageToSharedNotebookMembers:(id)members notebookGuid:(id)guid messageText:(id)text recipients:(id)recipients;
- (id)listSharedNotebooks:(id)notebooks;
- (int)expungeSharedNotebooks:(id)notebooks sharedNotebookIds:(id)ids;
- (id)createLinkedNotebook:(id)notebook linkedNotebook:(id)notebook;
- (int)updateLinkedNotebook:(id)notebook linkedNotebook:(id)notebook;
- (id)listLinkedNotebooks:(id)notebooks;
- (int)expungeLinkedNotebook:(id)notebook guid:(id)guid;
- (id)authenticateToSharedNotebook:(id)notebook authenticationToken:(id)token;
- (id)getSharedNotebookByAuth:(id)auth;
- (void)emailNote:(id)note parameters:(id)parameters;
- (id)shareNote:(id)note guid:(id)guid;
- (void)stopSharingNote:(id)note guid:(id)guid;
- (void)stopSharingNoteWithRecipients:(id)recipients guid:(id)guid;
- (id)authenticateToSharedNote:(id)note noteKey:(id)key authenticationToken:(id)token;
- (id)createOrUpdateSharedNotes:(id)notes shareTemplate:(id)template;
- (id)findRelated:(id)related query:(id)query resultSpec:(id)spec;
- (id)findSearchSuggestions:(id)suggestions query:(id)query resultSpec:(id)spec;
- (void)updateUserSetting:(id)setting setting:(int)setting value:(id)value;
- (id)findTimeZones:(id)zones timeZoneSpec:(id)spec maxTimeZones:(int)zones;
- (id)findContacts:(id)contacts query:(id)query;
- (id)findInBusiness:(id)business query:(id)query;
- (int)shareNoteWithBusiness:(id)business noteGuid:(id)guid;
- (int)stopSharingNoteWithBusiness:(id)business noteGuid:(id)guid;
- (void)requestAccessToNotebook:(id)notebook notebookGuid:(id)guid privilegeLevel:(int)level;
- (id)getNoteLockStatus:(id)status noteGuid:(id)guid;
- (id)acquireNoteLock:(id)lock noteGuid:(id)guid;
- (id)releaseNoteLock:(id)lock noteGuid:(id)guid;
- (id)getViewersForNotes:(id)notes noteGuids:(id)guids;
- (id)updateNoteIfUsnMatches:(id)matches note:(id)note;
- (id)manageNotebookShares:(id)shares parameters:(id)parameters;
- (id)getNotebookShares:(id)shares notebookGuid:(id)guid;
- (id)getNoteShares:(id)shares noteGuid:(id)guid;
- (id)manageNoteShares:(id)shares parameters:(id)parameters;
- (id)joinPublishedBusinessNotebook:(id)notebook notebookGuid:(id)guid;
- (void)unpublishNotebook:(id)notebook notebookGuid:(id)guid convertGroupSharesToIndividual:(BOOL)individual;
- (id)getNotebookSharesEmailAddresses:(id)addresses notebookGuid:(id)guid identities:(id)identities skipUnknownUserIdentities:(BOOL)identities;
- (int)renameNotebook:(id)notebook notebookGuid:(id)guid name:(id)name;
- (id)sendLogRequest:(id)request logRequest:(id)request;
- (id)getLinkedAccountSyncState:(id)state linkedAccount:(id)account;
@end

#endif /* EDAMNoteStoreClient_h */
