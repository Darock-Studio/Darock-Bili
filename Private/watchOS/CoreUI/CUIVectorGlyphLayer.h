//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 866.4.0.0.0
//
#ifndef CUIVectorGlyphLayer_h
#define CUIVectorGlyphLayer_h
@import Foundation;

#include "CUIVectorGlyhLayerDelegate-Protocol.h"

@class NSArray, NSString;

@interface CUIVectorGlyphLayer : NSObject {
  /* instance variables */
  struct CGPath * _clipPathFromSublayers;
}

@property (weak, nonatomic) NSObject<CUIVectorGlyhLayerDelegate> *delegate;
@property (readonly, nonatomic) BOOL needsWideGamut;
@property (readonly, retain, nonatomic) NSString *name;
@property (readonly, nonatomic) unsigned long long index;
@property (readonly, nonatomic) unsigned long long motionGroup;
@property (readonly, nonatomic) BOOL alwaysPulses;
@property (readonly, nonatomic) double opacity;
@property (readonly, nonatomic) double valueThreshold;
@property (readonly, nonatomic) BOOL isEraserLayer;
@property (readonly, nonatomic) double strokeWidth;
@property (readonly, retain, nonatomic) id referenceShape;
@property (readonly, retain, nonatomic) NSArray *sublayers;

/* class methods */
+ (unsigned int)_subpathIndicesAtom;
+ (id)_createShapeLayerWithLayerTreeNode:(struct CGSVGNode *)node layerName:(id)name index:(unsigned long long)index shapes:(id)shapes delegate:(id)delegate;
+ (id)createLayerGroupWithLayerTree:(struct CGSVGNode *)tree layerNames:(id)names shapes:(id)shapes delegate:(id)delegate;
+ (id)createLayerGroupWithLayerNames:(id)names delegate:(id)delegate;
+ (struct CGColor *)_fillColorFromStyle:(struct CGSVGAttributeMap *)style;
+ (id)_colorNameForRenderingStyle:(id)style;
+ (id)_layerHierarchyStyleNames;

/* instance methods */
- (void)_readCSSAttributes:(struct CGSVGAttributeMap *)cssattributes;
- (id)_initWithName:(id)name index:(unsigned long long)index shape:(struct CGPath *)shape style:(struct CGSVGAttributeMap *)style delegate:(id)delegate;
- (id)_initWithName:(id)name index:(unsigned long long)index sublayers:(id)sublayers style:(struct CGSVGAttributeMap *)style delegate:(id)delegate;
- (void)dealloc;
- (id)debugDescriptionWithIndentLevel:(unsigned long long)level;
- (id)debugDescription;
- (struct CGPath *)shape;
- (struct CGPath *)shapeAtScale:(double)scale;
- (void)_setAlwaysPulses:(BOOL)pulses;
- (BOOL)_anyLayerAlwaysPulses;
- (void)_setAllLayersAlwaysPulse:(BOOL)pulse;
- (BOOL)anyLayerNeedsWideGamutColor;
- (struct CGColor *)_colorForVariableThreshold:(double)threshold variableMinValue:(double)value variableMaxValue:(double)value onFillColor:(struct CGColor *)color offFillColor:(struct CGColor *)color;
- (void)drawInContext:(struct CGContext *)context scaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size variableMinValue:(double)value variableMaxValue:(double)value onFillColor:(struct CGColor *)color offFillColor:(struct CGColor *)color;
- (struct CGImage *)createImageUsingScaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size variableMinValue:(double)value variableMaxValue:(double)value onFillColor:(struct CGColor *)color offFillColor:(struct CGColor *)color;
- (struct CGImage *)createSublayerMaskUsingScaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size maskColor:(struct CGColor *)color;
- (struct CGPath *)copyClipShape;
@end

#endif /* CUIVectorGlyphLayer_h */
