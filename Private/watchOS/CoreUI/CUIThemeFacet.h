//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 866.4.0.0.0
//
#ifndef CUIThemeFacet_h
#define CUIThemeFacet_h
@import Foundation;

#include "CUIThemeImageSource-Protocol.h"
#include "NSCoding-Protocol.h"
#include "NSCopying-Protocol.h"

@class BOOL *, NSString;

@interface CUIThemeFacet : NSObject<CUIThemeImageSource, NSCopying, NSCoding> {
  /* instance variables */
  struct _renditionkeytoken { unsigned short x0; unsigned short x1; } * _renditionKeyList;
  unsigned long long _themeIndex;
  long long _renditionType;
  struct CGSize { double width; double height; } _thumbnailSize;
  struct CGPoint { double x; double y; } _hotSpot;
  int _isTintable;
  struct { unsigned int x :1 hasCheckedButtonGlyph; unsigned int x :1 isButtonGlyph; unsigned int x :14 reserved; } _fFlags;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)_invalidateArtworkCaches;
+ (id)_themeStoreForThemeIndex:(unsigned long long)index;
+ (void)initialize;
+ (unsigned long long)themeNamed:(id)named forBundleIdentifier:(id)identifier error:(id *)error;
+ (unsigned long long)themeForBundleIdentifier:(id)identifier error:(id *)error;
+ (unsigned long long)themeWithContentsOfURL:(id)url error:(id *)error;
+ (unsigned long long)themeWithBytes:(const void *)bytes length:(unsigned long long)length error:(id *)error;
+ (void)themeUnregisterThemeRef:(unsigned long long)ref;
+ (id)_bundleIdentifierForThemeRef:(unsigned long long)ref;
+ (id)facetWithElement:(long long)element part:(long long)part fromTheme:(unsigned long long)theme;
+ (id)facetWithElement:(long long)element part:(long long)part dimension1:(long long)dimension1 dimension2:(long long)dimension2 fromTheme:(unsigned long long)theme;
+ (id)facetWithRenditionKey:(id)key fromTheme:(unsigned long long)theme;
+ (id)_facetWithKeyList:(const struct _renditionkeytoken { unsigned short x0; unsigned short x1; } *)list andRenditionKeyClass:(Class)class orRenditionKey:(id)key fromTheme:(unsigned long long)theme;
+ (id)cursorFacetWithName:(id)name fromTheme:(unsigned long long)theme;
+ (BOOL)assetExistsForRenditionKey:(id)key fromTheme:(unsigned long long)theme;

/* instance methods */
- (id)_themeStore;
- (struct CGPoint { double x0; double x1; })_hotSpot;
- (void)_updateSpecificRenditionKey:(id)key isFocused:(BOOL *)focused owner:(id)owner userInfo:(id)info;
- (id)_renditionForSpecificKey:(id)key;
- (id)_rendition;
- (struct CGSize { double x0; double x1; })_thumbnailSizeForRendition:(id)rendition;
- (void)_setHasCheckedButtonGlyph:(BOOL)glyph;
- (void)_setIsButtonGlyph:(BOOL)glyph;
- (BOOL)_isButtonGlyph;
- (id)initWithRenditionKey:(id)key fromTheme:(unsigned long long)theme;
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)dealloc;
- (struct CGImage *)copyLayerImageContentsAndCenter:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)center renditionKey:(id)key;
- (struct CGImage *)copyLayerImageContentsAndCenter:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)center;
- (id)makeLayer;
- (void)updateLayer:(id)layer;
- (void)updateLayer:(id)layer effects:(id)effects;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isFocused:(int)focused context:(struct CGContext *)context;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context effects:(id)effects;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context effects:(id)effects;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha operation:(int)operation isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context effects:(id)effects;
- (void)drawAsOnePartWithSlice:(int)slice inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context effects:(id)effects;
- (void)drawAbsoluteAnimationFrame:(double)frame destinationFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context;
- (void)drawAnimationFrameMappedFrom0_1RangedValue:(double)value destinationFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context;
- (void)drawAnimationFrameMappedFrom0_1RangedValue:(double)value destinationFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isFocused:(int)focused focusRingColor:(struct CGColor *)color context:(struct CGContext *)context effects:(id)effects;
- (void)drawSegmentInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isFocused:(int)focused focusRingColor:(struct CGColor *)color segmentType:(int)type context:(struct CGContext *)context effects:(id)effects;
- (void)updateSegmentBezelLeadingCapLayer:(id)layer bezelFillLayer:(id)layer trailingBezelCapLayer:(id)layer forSegmentType:(int)type segmentBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds leadingSeparatorWidth:(double)width trailingSeparatorWidth:(double)width renditionKey:(id)key effects:(id)effects;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (void)drawMaskInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (BOOL)_canGetRenditionForKey:(id)key withDrawingLayer:(long long)layer;
- (BOOL)hitTestAtPoint:(struct CGPoint { double x0; double x1; })point inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame owner:(id)owner userInfo:(id)info;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (void)drawMaskInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (void)drawPulseInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame pulseValue:(double)value owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha operation:(int)operation owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha operation:(int)operation owner:(id)owner userInfo:(id)info context:(struct CGContext *)context;
- (void)drawGradientInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame angle:(double)angle alpha:(double)alpha operation:(int)operation isFocused:(int)focused focusRingColor:(struct CGColor *)color keyAdjustment:(id)adjustment context:(struct CGContext *)context effects:(id)effects;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha isFocused:(int)focused focusRingColor:(struct CGColor *)color keyAdjustment:(id)adjustment context:(struct CGContext *)context;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha operation:(int)operation isFocused:(int)focused focusRingColor:(struct CGColor *)color keyAdjustment:(id)adjustment context:(struct CGContext *)context;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha keyAdjustment:(id)adjustment context:(struct CGContext *)context;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha operation:(int)operation keyAdjustment:(id)adjustment context:(struct CGContext *)context;
- (void)drawMaskInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha isFocused:(int)focused focusRingColor:(struct CGColor *)color keyAdjustment:(id)adjustment context:(struct CGContext *)context;
- (void)drawMaskInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame alpha:(double)alpha operation:(int)operation isFocused:(int)focused focusRingColor:(struct CGColor *)color keyAdjustment:(id)adjustment context:(struct CGContext *)context;
- (void)drawPulseInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame pulseValue:(double)value isFocused:(int)focused focusRingColor:(struct CGColor *)color keyAdjustment:(id)adjustment context:(struct CGContext *)context;
- (id)renditionForSpecificKeyWrapper:(id)wrapper;
- (void)_drawSlice:(long long)slice inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame withKeyAdjustment:(id)adjustment context:(struct CGContext *)context;
- (id)renditionMetricsWithKeyAdjustment:(id)adjustment;
- (id)renditionSliceInformationForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect keyAdjustment:(id)adjustment;
- (id)imageForState:(long long)state;
- (id)imageForState:(long long)state withValue:(long long)value;
- (BOOL)hasValueSlices;
- (BOOL)isValidButtonImageSource;
- (id)imageForState:(long long)state value:(long long)value;
- (id)imageForState:(long long)state value:(long long)value size:(unsigned long long)size;
- (id)imageForSliceIndex:(long long)index;
- (id)image;
- (double)alphaWithKeyAdjustment:(id)adjustment;
- (double)alpha;
- (int)blendModeWithKeyAdjustment:(id)adjustment;
- (int)blendMode;
- (id)blendModeAsCAFilterStringWithKeyAjustment:(id)ajustment;
- (id)blendModeAsCAFilterString;
- (struct CGSize { double x0; double x1; })imageSize;
- (struct CGSize { double x0; double x1; })sizeForSegmentOfType:(int)type;
- (id)gradientWithKeyAdjustment:(id)adjustment angle:(double *)angle style:(unsigned long long *)style;
- (void)_setThemeIndex:(unsigned long long)index;
- (unsigned long long)themeIndex;
- (id)themeRendition;
- (id)renditionKey;
- (long long)renditionType;
- (BOOL)isTintable;
- (id)properties;
- (id)displayName;
- (id)thumbnail;
- (struct CGSize { double x0; double x1; })thumbnailSize;
- (struct CGSize { double x0; double x1; })topLeftCapSize;
- (void)_applyFixedAttributesToKey:(id)key;
- (long long)_sliceIndexForSlice:(long long)slice ofRendition:(id)rendition;
- (id)maskForSlice:(long long)slice withKeyAdjustment:(id)adjustment;
- (id)imageForSlice:(long long)slice withKeyAdjustment:(id)adjustment;
- (id)imageWithSize:(struct CGSize { double x0; double x1; })size keyAdjustment:(id)adjustment;
- (id)highlightWithSize:(struct CGSize { double x0; double x1; })size keyAdjustment:(id)adjustment;
- (id)maskWithSize:(struct CGSize { double x0; double x1; })size keyAdjustment:(id)adjustment;
@end

#endif /* CUIThemeFacet_h */
