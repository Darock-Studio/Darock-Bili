//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 866.4.0.0.0
//
#ifndef CUINamedVectorGlyph_h
#define CUINamedVectorGlyph_h
@import Foundation;

#include "CUINamedLookup.h"
#include "CUICatalog.h"
#include "CUINamedLookup.h"
#include "CUIVectorGlyhLayerDelegate-Protocol.h"
#include "CUIVectorGlyphHierarchicalLayer.h"
#include "CUIVectorGlyphLayer.h"
#include "CUIVectorGlyphMulticolorLayer.h"
#include "NSCopying-Protocol.h"

@interface CUINamedVectorGlyph : CUINamedLookup<CUIVectorGlyhLayerDelegate, NSCopying> {
  /* instance variables */
  double _pointSize;
  double _lookedupScaleFactor;
  struct CGImage * _cgImageRef;
  CUICatalog *_catalog;
  long long _layoutDirection;
  unsigned int x :1 _generatedImage;
  unsigned int x :1 _flippable;
  unsigned int x :1 _canUsePathConcatenation;
  short _containsNamedColorStyles;
  long long _glyphSize;
  long long _glyphWeight;
  CUINamedLookup *_ultralightInterpolationSource;
  CUINamedLookup *_blackInterpolationSource;
  CUIVectorGlyphLayer *_monochromeLayerGroup;
  CUIVectorGlyphMulticolorLayer *_multicolorLayerGroup;
  CUIVectorGlyphHierarchicalLayer *_hierarchicalLayerGroup;
}

@property (nonatomic) double fontMatchingScaleFactor;
@property (readonly, nonatomic) double baselineOffset;
@property (readonly, nonatomic) double capHeight;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRect;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentBounds;
@property (readonly, nonatomic) BOOL isFlippable;
@property (readonly, nonatomic) float templateVersion;
@property (readonly, nonatomic) double baselineOffsetUnrounded;
@property (readonly, nonatomic) double capHeightUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentBoundsUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRectUnrounded;
@property (readonly, nonatomic) long long preferredRenderingMode;
@property (readonly, nonatomic) BOOL interpolatable;
@property double variableMinValue;
@property double variableMaxValue;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } interiorAlignmentRectUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } interiorAlignmentRect;

/* class methods */
+ (id)_colorStyleNames;
+ (id)_knockoutStyleNames;
+ (id)_layerHierarchyStyleNames;

/* instance methods */
- (struct CGPath *)_interpolatedPathWithWeight:(long long)weight glyphSize:(long long)size fromUltralightSmall:(struct CGPath *)small regularSmall:(struct CGPath *)small blackSmall:(struct CGPath *)small;
- (double)_interpolatedBaselineOffsetWithWeight:(long long)weight glyphSize:(long long)size fromUltralight:(double)ultralight regular:(double)regular black:(double)black;
- (double)_interpolatedCapHeightWithWeight:(long long)weight glyphSize:(long long)size fromUltralight:(double)ultralight regular:(double)regular black:(double)black;
- (struct CGSize { double x0; double x1; })_interpolatedCanvasSizeWithWeight:(long long)weight glyphSize:(long long)size fromUltralight:(struct CGSize { double x0; double x1; })ultralight regular:(struct CGSize { double x0; double x1; })regular black:(struct CGSize { double x0; double x1; })black;
- (struct { double x0; double x1; double x2; double x3; })_interpolatedAlignmentRectInsetsWithWeight:(long long)weight glyphSize:(long long)size fromUltralight:(struct { double x0; double x1; double x2; double x3; })ultralight regular:(struct { double x0; double x1; double x2; double x3; })regular black:(struct { double x0; double x1; double x2; double x3; })black;
- (id)edgeDefinitionTextureWithBufferAllocator:(id)allocator;
- (id)gradientTextureWithBufferAllocator:(id)allocator;
- (id)intWithName:(id)name scaleFactor:(double)factor deviceIdiom:(long long)idiom pointSize:(double)size weight:(long long)weight glyphSize:(long long)size interpolatedFromRegular:(id)regular ultralight:(id)ultralight black:(id)black fromCatalog:(id)catalog themeRef:(unsigned long long)ref;
- (id)initWithName:(id)name scaleFactor:(double)factor deviceIdiom:(long long)idiom pointSize:(double)size fromCatalog:(id)catalog usingRenditionKey:(id)key fromTheme:(unsigned long long)theme;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)_lookupCatalogImageForIdiom:(long long)idiom;
- (void)dealloc;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (id)_catalog;
- (void)_setCatalog:(id)catalog;
- (id)_ultralightInterpolationSource;
- (void)_setUltralightInterpolationSource:(id)source;
- (id)_blackInterpolationSource;
- (void)_setBlackInterpolationSource:(id)source;
- (BOOL)_canUsePathConcatenation;
- (void)_setCanUsePathConcatenation:(BOOL)concatenation;
- (void)setRepresentsOnDemandContent:(BOOL)content;
- (struct CGSVGDocument *)referenceGlyph;
- (BOOL)isInterpolatable;
- (BOOL)canBeInterpolatedWith:(id)with;
- (double)scale;
- (void)_setScale:(double)scale;
- (long long)glyphSize;
- (void)_setGlyphSize:(long long)size;
- (long long)glyphWeight;
- (void)_setGlyphWeight:(long long)weight;
- (double)pointSize;
- (void)_setPointSize:(double)size;
- (double)_requestedPointSizeRatio;
- (double)referencePointSize;
- (struct CGSize { double x0; double x1; })referenceCanvasSize;
- (void)_setFlippable:(BOOL)flippable;
- (id)knownAvailableVectorSizes;
- (long long)layoutDirection;
- (void)_setLayoutDirection:(long long)direction;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRectForTargetSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (BOOL)generatedImage;
- (BOOL)_containsWideGamutColor;
- (unsigned long long)numberOfTemplateLayers;
- (id)templateLayerThresholds;
- (struct CGImage *)image;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size;
- (void)drawInContext:(struct CGContext *)context;
- (struct CGPath *)CGPath;
- (struct CGPath *)maskShape;
- (unsigned long long)numberOfMulticolorLayers;
- (id)multicolorLayerThresholds;
- (struct CGImage *)imageWithColorResolver:(id /* block */)resolver;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size withColorResolver:(id /* block */)resolver;
- (id)makeLayerWithColorResolver:(id /* block */)resolver;
- (void)drawMulticolorLayerAtIndex:(unsigned long long)index inContext:(struct CGContext *)context withColorResolver:(id /* block */)resolver;
- (void)_setContainsNamedColorStyles:(short)styles;
- (BOOL)containsNamedColorStyles;
- (BOOL)containsNamedColorStyle:(id)style;
- (id)multicolorColorNames;
- (id)multicolorLayerColorNames;
- (BOOL)isKnockoutEnabledForMulticolorLayerAtIndex:(long long)index opacity:(double *)opacity;
- (unsigned long long)numberOfHierarchyLayers;
- (id)hierarchicalLayerThresholds;
- (id)hierarchyLayers;
- (id)hierarchyLevels;
- (struct CGImage *)imageWithHierarchyColorResolver:(id /* block */)resolver;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size withHierarchyColorResolver:(id /* block */)resolver;
- (void)drawHierarchyLayerAtIndex:(unsigned long long)index inContext:(struct CGContext *)context withColorResolver:(id /* block */)resolver;
- (struct CGImage *)imageWithHierarchicalPrimaryColor:(struct CGColor *)color;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size hierarchicalPrimaryColor:(struct CGColor *)color;
- (BOOL)isKnockoutEnabledForHierarchicalLayerAtIndex:(long long)index opacity:(double *)opacity;
- (unsigned long long)numberOfPaletteLayers;
- (id)paletteLayerThresholds;
- (id)paletteLevels;
- (struct CGImage *)imageWithPaletteColorResolver:(id /* block */)resolver;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size withPaletteColorResolver:(id /* block */)resolver;
- (void)drawPaletteLayerAtIndex:(unsigned long long)index inContext:(struct CGContext *)context withColorResolver:(id /* block */)resolver;
- (struct CGImage *)imageWithPaletteColors:(id)colors;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size withPaletteColors:(id)colors;
- (void)drawInContext:(struct CGContext *)context withPaletteColors:(id)colors;
- (BOOL)isKnockoutEnabledForPaletteLayerAtIndex:(long long)index opacity:(double *)opacity;
- (id)graphicVariantWithOptions:(id)options;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRectForTargetSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (void)_drawMulticolorLayersInContext:(struct CGContext *)context scaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size colorResolver:(id /* block */)resolver;
- (void)_drawHierarchicalLayersInContext:(struct CGContext *)context scaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size colorResolver:(id /* block */)resolver;
- (void)_drawPaletteLayersInContext:(struct CGContext *)context scaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size colorResolver:(id /* block */)resolver;
- (void)_legacy_drawMonochromeLayerNamed:(id)named inContext:(struct CGContext *)context scaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size onFillColor:(struct CGColor *)color offFillColor:(struct CGColor *)color;
- (void)_legacy_drawMulticolorLayerNamed:(id)named inContext:(struct CGContext *)context scaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size colorResolver:(id /* block */)resolver;
- (void)_legacy_drawHierarchicalLayerNamed:(id)named inContext:(struct CGContext *)context scaleFactor:(double)factor targetSize:(struct CGSize { double x0; double x1; })size colorResolver:(id /* block */)resolver;
- (id)_createShapeGroupSubpaths;
- (id)monochromeLayers;
- (id)multicolorLayers;
- (id)hierarchicalLayers;
- (id)paletteLayers;
- (id)_stylePrefixForRenderingMode:(int)mode;
- (id)_layerNamesForRenderingMode:(int)mode inRendition:(id)rendition;
- (id)monochromeLayerNamesInRendition:(id)rendition;
- (struct CGPath *)pathForLayerNamed:(id)named;
- (struct CGSVGAttributeMap *)styleForLayerName:(id)name;
- (id)debugDescription;
@end

#endif /* CUINamedVectorGlyph_h */
