//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 866.4.0.0.0
//
#ifndef _CUIGraphicVariantVectorGlyph_h
#define _CUIGraphicVariantVectorGlyph_h
@import Foundation;

#include "CUINamedVectorGlyph.h"
#include "CUIVectorGlyphGraphicVariantOptions.h"

@interface _CUIGraphicVariantVectorGlyph : CUINamedVectorGlyph

@property (retain, nonatomic) CUIVectorGlyphGraphicVariantOptions *options;

/* instance methods */
- (id)_initWithBaseGlyph:(id)glyph options:(id)options;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)dealloc;
- (id)graphicVariantWithOptions:(id)options;
- (double)baselineOffsetUnrounded;
- (double)baselineOffset;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRectUnrounded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRectForTargetSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentBoundsUnrounded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentBounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRectUnrounded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_interiorAlignmentRectUnroundedForTargetSize:(struct CGSize { double x0; double x1; })size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRectForTargetSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (BOOL)_containsWideGamutColor;
- (struct CGPath *)CGPath;
- (struct CGImage *)image;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size;
- (void)drawInContext:(struct CGContext *)context;
- (struct CGImage *)imageWithColorResolver:(id /* block */)resolver;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size withColorResolver:(id /* block */)resolver;
- (unsigned long long)numberOfMulticolorLayers;
- (void)drawMulticolorLayerAtIndex:(unsigned long long)index inContext:(struct CGContext *)context withColorResolver:(id /* block */)resolver;
- (struct CGImage *)imageWithHierarchyColorResolver:(id /* block */)resolver;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size withHierarchyColorResolver:(id /* block */)resolver;
- (unsigned long long)numberOfHierarchyLayers;
- (void)drawHierarchyLayerAtIndex:(unsigned long long)index inContext:(struct CGContext *)context withColorResolver:(id /* block */)resolver;
- (struct CGImage *)imageWithPaletteColorResolver:(id /* block */)resolver;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size withPaletteColorResolver:(id /* block */)resolver;
- (void)drawPaletteLayerAtIndex:(unsigned long long)index inContext:(struct CGContext *)context withColorResolver:(id /* block */)resolver;
- (struct CGImage *)imageWithPaletteColors:(id)colors;
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)factor forTargetSize:(struct CGSize { double x0; double x1; })size withPaletteColors:(id)colors;
- (void)drawInContext:(struct CGContext *)context withPaletteColors:(id)colors;
- (struct CGSize { double x0; double x1; })_sizeOfBackgroundShape;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_safeContentAreaBounds;
- (long long)_effectiveCenteringStyle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_safeContentAreaBoundsForBackgroundSize:(struct CGSize { double x0; double x1; })size;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_defaultScaledContentRectForBackgroundSize:(struct CGSize { double x0; double x1; })size safeContentArea:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })area;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scaledContentRectForBackgroundSize:(struct CGSize { double x0; double x1; })size baseContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect snappingScale:(double)scale;
- (struct CGImage *)_createGraphicVariantImageAtScale:(double)scale backgroundImage:(struct CGImage *)image symbolImage:(struct CGImage *)image destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect disableColorFill:(BOOL)fill outputScale:(double)scale;
- (struct CGImage *)_createBackgroundImageOfSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (struct CGPath *)_createBackgroundShapeInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale;
- (struct CGGradient *)_createBackgroundGradientWithColors:(id)colors;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_backgroundShapeBoundsForTargetSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (void)_drawBackgroundShapeInContext:(struct CGContext *)context targetSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (id)_createContentEffectsForTargetSize:(struct CGSize { double x0; double x1; })size scale:(double *)scale;
- (id)_createShapeEffectsForTargetSize:(struct CGSize { double x0; double x1; })size scale:(double *)scale;
@end

#endif /* _CUIGraphicVariantVectorGlyph_h */
