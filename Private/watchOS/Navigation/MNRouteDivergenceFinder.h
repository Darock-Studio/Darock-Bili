//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2298.42.9.28.5
//
#ifndef MNRouteDivergenceFinder_h
#define MNRouteDivergenceFinder_h
@import Foundation;

@interface MNRouteDivergenceFinder : NSObject {
  /* instance variables */
  double _distancePaddingWhenAlternating;
}

@property (nonatomic) double toleranceMeters;
@property (nonatomic) double minLengthMetersForConvergence;

/* instance methods */
- (id)init;
- (id)findFirstDivergenceBetweenRoute:(id)route andRoute:(id)route;
- (id)findFirstConvergenceBetweenRoute:(id)route andRoute:(id)route;
- (id)findFirstDivergenceBetweenRoute:(id)route fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate andRoute:(id)route fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (id)findFirstConvergenceBetweenRoute:(id)route fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate andRoute:(id)route fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (id)findFirstUniqueRangeBetweenRoute:(id)route andRoute:(id)route;
- (id)findAllDivergenceConvergenceBetweenRoute:(id)route andRoute:(id)route;
- (id)findAllOverlapRangesBetweenRoutes:(id)routes;
- (id)findOverlappingSectionsForRoutes:(id)routes;
- (void)_findFirstDivergenceBetweenRoute:(id)route range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range andRoute:(id)route range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range outRouteCoordinate:(out struct PolylineCoordinate { unsigned int x0; float x1; } *)coordinate outRouteCoordinate:(out struct PolylineCoordinate { unsigned int x0; float x1; } *)coordinate;
- (BOOL)_pathsDivergeBetweenRoute:(id)route from:(struct PolylineCoordinate { unsigned int x0; float x1; })from andRoute:(id)route from:(struct PolylineCoordinate { unsigned int x0; float x1; })from withinDistance:(double)distance;
- (void)_findFirstConvergenceBetweenRoute:(id)route fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate andRoute:(id)route fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate outRouteCoordinate:(out struct PolylineCoordinate { unsigned int x0; float x1; } *)coordinate outRouteCoordinate:(out struct PolylineCoordinate { unsigned int x0; float x1; } *)coordinate;
- (void)_findFirstConvergenceBetweenRoute:(id)route range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range andRoute:(id)route range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range outRouteCoordinate:(out struct PolylineCoordinate { unsigned int x0; float x1; } *)coordinate outRouteCoordinate:(out struct PolylineCoordinate { unsigned int x0; float x1; } *)coordinate;
- (void)_populateConvergencePoints:(void *)points route:(id)route range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range isRouteA:(BOOL)a;
- (BOOL)_pointMeetsConvergenceThreshold:(const struct _MNRouteConvergencePoint { struct { double x0; double x1; double x2; } x0; struct { double x0; double x1; double x2; } x1; struct { double x0; double x1; double x2; } x2; struct PolylineCoordinate { unsigned int x0; float x1; } x3; struct PolylineCoordinate { unsigned int x0; float x1; } x4; BOOL x5; BOOL x6; } *)threshold withOtherPoint:(const struct _MNRouteConvergencePoint { struct { double x0; double x1; double x2; } x0; struct { double x0; double x1; double x2; } x1; struct { double x0; double x1; double x2; } x2; struct PolylineCoordinate { unsigned int x0; float x1; } x3; struct PolylineCoordinate { unsigned int x0; float x1; } x4; BOOL x5; BOOL x6; } *)point outRouteCoordinateA:(out struct PolylineCoordinate { unsigned int x0; float x1; } *)a outRouteCoordinateB:(out struct PolylineCoordinate { unsigned int x0; float x1; } *)b outDistance:(out double *)distance;
- (struct PolylineCoordinate { unsigned int x0; float x1; })_firstRouteCoordinateWithinToleranceOnRoute:(id)route nearCoordinate:(struct { double x0; double x1; double x2; })coordinate range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (double)_distanceFromCoordinate:(struct { double x0; double x1; double x2; })coordinate toSegmentStart:(struct { double x0; double x1; double x2; })start segmentEnd:(struct { double x0; double x1; double x2; })end;
- (struct PolylineCoordinate { unsigned int x0; float x1; })_closestRouteCoordinateOnRoute:(id)route toLocationCoordinate:(struct { double x0; double x1; double x2; })coordinate inRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (struct PolylineCoordinate { unsigned int x0; float x1; })_routeCoordinateForLocationCoordinate:(struct { double x0; double x1; double x2; })coordinate route:(id)route startIndex:(unsigned long long)index;
- (double)_offsetForCoordinate:(struct { double x0; double x1; double x2; })coordinate alongSegmentStart:(struct { double x0; double x1; double x2; })start segmentEnd:(struct { double x0; double x1; double x2; })end;
- (id)_stringForCoordinate:(struct { double x0; double x1; double x2; })coordinate;
- (id)_routesArrayIdentifierStrings:(id)strings;
@end

#endif /* MNRouteDivergenceFinder_h */
