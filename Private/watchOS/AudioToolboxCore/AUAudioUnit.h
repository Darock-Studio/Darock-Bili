//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1387.3.4.0.0
//
#ifndef AUAudioUnit_h
#define AUAudioUnit_h
@import Foundation;

#include "AUAudioUnitBusArray.h"
#include "AUAudioUnitPreset.h"
#include "AUParameterTree.h"

@class NSArray, NSDictionary, NSMutableArray, NSString, UIViewController;
@protocol OS_dispatch_queue, OS_dispatch_source, {RealtimeState="mMultipleRenderMutex"{pooled_semaphore_mutex="mCountAndSema"{atomic<caulk::pooled_semaphore_mutex::CountAndSema>="__a_"{__cxx_atomic_impl<caulk::pooled_semaphore_mutex::CountAndSema, std::__cxx_atomic_base_impl<caulk::pooled_semaphore_mutex::CountAndSema>>="__a_value"A{CountAndSema}}}}"mResetVsRenderMutex"{pooled_semaphore_mutex="mCountAndSema"{atomic<caulk::pooled_semaphore_mutex::CountAndSema>="__a_"{__cxx_atomic_impl<caulk::pooled_semaphore_mutex::CountAndSema, std::__cxx_atomic_base_impl<caulk::pooled_semaphore_mutex::CountAndSema>>="__a_value"A{CountAndSema}}}}"renderObserverList"{RenderObserverList="mObservers"{TThreadSafeList<RenderObserver>="mActiveList"{NodeStack="mHead"^{Node}}"mPendingList"{NodeStack="mHead"^{Node}}"mFreeList"{NodeStack="mHead"^{Node}}}"mTouched"B}"eventSchedule"{AUEventSchedule="mAUv2GetParameterSynchronizer"^{AUv2GetParameterSynchronizer}"mAllocator"^{AURenderEventAllocator}"mScheduledParameterRefresher"^{AUScheduledParameterRefresher2}"mAddedEventQueue"{lf_mpsc_queue<AURenderEventNode, caulk::concurrent::intrusive_single_link_member<AURenderEventNode, &AURenderEventNode::next>, true>="mEnqueueHead"{atomic<AURenderEventNode *>="__a_"{__cxx_atomic_impl<AURenderEventNode *, std::__cxx_atomic_base_impl<AURenderEventNode *>>="__a_value"A^{AURenderEventNode}}}"mDequeueHead"{prepadded_t<AURenderEventNode *, 56UL>="padding"[56C]"value"^{AURenderEventNode}}}"mHavePendingSetParameter"{atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}}"mScheduleHead"^(AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime="mSampleRate"d"mLastRender"{atomic<PreviousRenderTime::Snapshot>="__a_"{__cxx_atomic_impl<PreviousRenderTime::Snapshot, std::__cxx_atomic_base_impl<PreviousRenderTime::Snapshot>>="__a_value"A{Snapshot}}}}}"auv2GetParameterSynchronizer"{AUv2GetParameterSynchronizer="mSeqNums"{atomic<AUv2GetParameterSynchronizer::SeqNumPair>="__a_"{__cxx_atomic_impl<AUv2GetParameterSynchronizer::SeqNumPair, std::__cxx_atomic_base_impl<AUv2GetParameterSynchronizer::SeqNumPair>>="__a_value"A{SeqNumPair}}}"mSyncGetParamSema"{semaphore="mImpl"{semaphore="mMachSem"I"mOwned"B}"mCounter"{atomic<int>="__a_"{__cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>>="__a_value"Ai}}"mOriginalCounter"i}}"contextChangeGenerator"{optional<RenderContextChangeGenerator>=""(?="__null_state_"c"__val_"{RenderContextChangeGenerator="mLastWorkgroup"^v"mObserver"@?})"__engaged_"B}"renderBlockType"i"cachedMIDIProtocol"i}, {weak_ptr<APComponent>="__ptr_"^{APComponent}"__cntrl_"^{__shared_weak_count}};

@interface AUAudioUnit : NSObject {
  /* instance variables */
  UIViewController *_cachedViewController;
  struct RealtimeState { struct pooled_semaphore_mutex { struct atomic<caulk::pooled_semaphore_mutex::CountAndSema> { struct __cxx_atomic_impl<caulk::pooled_semaphore_mutex::CountAndSema, std::__cxx_atomic_base_impl<caulk::pooled_semaphore_mutex::CountAndSema>> { atomic  __a_value; struct CountAndSema x0; } __a_; } mCountAndSema; } mMultipleRenderMutex; struct pooled_semaphore_mutex { struct atomic<caulk::pooled_semaphore_mutex::CountAndSema> { struct __cxx_atomic_impl<caulk::pooled_semaphore_mutex::CountAndSema, std::__cxx_atomic_base_impl<caulk::pooled_semaphore_mutex::CountAndSema>> { atomic  __a_value; struct CountAndSema x0; } __a_; } mCountAndSema; } mResetVsRenderMutex; struct RenderObserverList { struct TThreadSafeList<RenderObserver> { struct NodeStack { struct Node *mHead; } mActiveList; struct NodeStack { struct Node *mHead; } mPendingList; struct NodeStack { struct Node *mHead; } mFreeList; } mObservers; BOOL mTouched; } renderObserverList; struct AUEventSchedule { struct AUv2GetParameterSynchronizer *mAUv2GetParameterSynchronizer; struct AURenderEventAllocator *mAllocator; struct AUScheduledParameterRefresher2 *mScheduledParameterRefresher; struct lf_mpsc_queue<AURenderEventNode, caulk::concurrent::intrusive_single_link_member<AURenderEventNode, &AURenderEventNode::next>, true> { struct atomic<AURenderEventNode *> { struct __cxx_atomic_impl<AURenderEventNode *, std::__cxx_atomic_base_impl<AURenderEventNode *>> { atomic  __a_value; struct AURenderEventNode * x0; } __a_; } mEnqueueHead; struct prepadded_t<AURenderEventNode *, 56UL> { unsigned char x[56] padding; struct AURenderEventNode *value; } mDequeueHead; } mAddedEventQueue; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } mHavePendingSetParameter; union AURenderEvent *mScheduleHead; void *mOwningAU; id /* block */ mRenderBlock; struct PreviousRenderTime { double mSampleRate; struct atomic<PreviousRenderTime::Snapshot> { struct __cxx_atomic_impl<PreviousRenderTime::Snapshot, std::__cxx_atomic_base_impl<PreviousRenderTime::Snapshot>> { atomic  __a_value; struct Snapshot x0; } __a_; } mLastRender; } mPreviousRenderTime; } eventSchedule; struct AUv2GetParameterSynchronizer { struct atomic<AUv2GetParameterSynchronizer::SeqNumPair> { struct __cxx_atomic_impl<AUv2GetParameterSynchronizer::SeqNumPair, std::__cxx_atomic_base_impl<AUv2GetParameterSynchronizer::SeqNumPair>> { atomic  __a_value; struct SeqNumPair x0; } __a_; } mSeqNums; struct semaphore { struct semaphore { unsigned int mMachSem; BOOL mOwned; } mImpl; struct atomic<int> { struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> { atomic  __a_value; int x0; } __a_; } mCounter; int mOriginalCounter; } mSyncGetParamSema; } auv2GetParameterSynchronizer; struct optional<RenderContextChangeGenerator> { union { char __null_state_; struct RenderContextChangeGenerator { void *mLastWorkgroup; id /* block */ mObserver; } __val_; } x0; BOOL __engaged_; } contextChangeGenerator; int renderBlockType; int cachedMIDIProtocol; } _realtimeState;
  NSObject<OS_dispatch_queue> *_presetMonitoringQueue;
  NSObject<OS_dispatch_source> *_presetFolderWatcher;
  id /* block */ _MIDIOutputEventHostBlock;
  id /* block */ _MIDIOutputEventListHostBlock;
  BOOL _shouldUseMIDI2;
}

@property (readonly, nonatomic) id /* block */ internalRenderBlock;
@property (readonly, nonatomic) id /* block */ renderContextObserver;
@property (nonatomic) long long MIDIOutputBufferSizeHint;
@property (nonatomic) BOOL requestViewControllerSynchronously;
@property (readonly, nonatomic) NSArray *migrateFromPlugin;
@property (readonly, nonatomic) struct AudioComponentDescription { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; } componentDescription;
@property (readonly, nonatomic) struct OpaqueAudioComponent * component;
@property (readonly, copy, nonatomic) NSString *componentName;
@property (readonly, copy, nonatomic) NSString *audioUnitName;
@property (readonly, copy, nonatomic) NSString *manufacturerName;
@property (readonly, copy, nonatomic) NSString *audioUnitShortName;
@property (readonly, nonatomic) unsigned int componentVersion;
@property (readonly, nonatomic) BOOL renderResourcesAllocated;
@property (readonly, nonatomic) AUAudioUnitBusArray *inputBusses;
@property (readonly, nonatomic) AUAudioUnitBusArray *outputBusses;
@property (readonly, nonatomic) id /* block */ renderBlock;
@property (readonly, nonatomic) id /* block */ scheduleParameterBlock;
@property (nonatomic) unsigned int maximumFramesToRender;
@property (retain, nonatomic) AUParameterTree *parameterTree;
@property (readonly, nonatomic) BOOL allParameterValues;
@property (readonly, nonatomic) BOOL musicDeviceOrEffect;
@property (readonly, nonatomic) long long virtualMIDICableCount;
@property (readonly, nonatomic) id /* block */ scheduleMIDIEventBlock;
@property (readonly, nonatomic) id /* block */ scheduleMIDIEventListBlock;
@property (readonly, copy, nonatomic) NSArray *MIDIOutputNames;
@property (readonly, nonatomic) BOOL providesUserInterface;
@property (copy, nonatomic) id /* block */ MIDIOutputEventBlock;
@property (copy, nonatomic) id /* block */ MIDIOutputEventListBlock;
@property (readonly, nonatomic) int AudioUnitMIDIProtocol;
@property (nonatomic) int hostMIDIProtocol;
@property (copy, nonatomic) NSDictionary *fullState;
@property (copy, nonatomic) NSDictionary *fullStateForDocument;
@property (readonly, copy, nonatomic) NSArray *factoryPresets;
@property (readonly, copy, nonatomic) NSArray *userPresets;
@property (readonly, nonatomic) BOOL supportsUserPresets;
@property (readonly, nonatomic) BOOL isLoadedInProcess;
@property (retain, nonatomic) AUAudioUnitPreset *currentPreset;
@property (readonly, nonatomic) double latency;
@property (readonly, nonatomic) double tailTime;
@property (nonatomic) long long renderQuality;
@property (nonatomic) BOOL shouldBypassEffect;
@property (readonly, nonatomic) BOOL canProcessInPlace;
@property (nonatomic) BOOL renderingOffline;
@property (readonly, copy, nonatomic) NSArray *channelCapabilities;
@property (copy, nonatomic) id /* block */ musicalContextBlock;
@property (copy, nonatomic) id /* block */ transportStateBlock;
@property (copy, nonatomic) NSString *contextName;
@property (readonly, nonatomic) BOOL supportsMPE;
@property (copy, nonatomic) NSArray *channelMap;
@property (copy, nonatomic) id /* block */ profileChangedBlock;

/* class methods */
+ (void)registerSubclass:(Class)subclass asComponentDescription:(struct AudioComponentDescription { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })description name:(id)name version:(unsigned int)version;
+ (id)__presetFromPath:(id)path;
+ (id)__sanitizeFileName:(id)name;
+ (void)__sanitizePresetNumber:(id)number;
+ (id)__userPresetPath:(id)path error:(id *)error;
+ (BOOL)_saveUserPreset:(id)preset state:(id)state error:(id *)error;
+ (BOOL)_deleteUserPreset:(id)preset error:(id *)error;
+ (id)_presetStateFor:(id)for error:(id *)error;
+ (void)_loadUserPresets:(id)presets error:(id *)error;
+ (id)_monitorUserPresets:(id)presets callback:(id /* block */)callback;
+ (void)instantiateWithComponentDescription:(struct AudioComponentDescription { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })description options:(unsigned int)options connectionProvider:(struct function<NSXPCConnection *(NSUUID *)> { struct __value_func<NSXPCConnection *(NSUUID *)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })provider completionHandler:(id /* block */)handler;
+ (void)instantiateWithComponentDescription:(struct AudioComponentDescription { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })description options:(unsigned int)options completionHandler:(id /* block */)handler;
+ (id)auAudioUnitForAudioUnit:(struct OpaqueAudioComponentInstance *)unit;
+ (id)keyPathsForValuesAffectingAllParameterValues;

/* instance methods */
- (BOOL)shouldChangeToFormat:(id)format forBus:(id)bus;
- (id)init;
- (id)initWithComponentDescription:(struct AudioComponentDescription { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })description options:(unsigned int)options error:(id *)error;
- (void)setLoadedOutOfProcess;
- (id)initWithComponentDescription:(struct AudioComponentDescription { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })description error:(id *)error;
- (void)dealloc;
- (void)invalidateAudioUnit;
- (struct OpaqueAudioComponentInstance *)audioUnit;
- (void)resolveComponent;
- (void *)eventSchedule;
- (void *)scheduledParameterRefresher;
- (void *)auv2GetParameterSynchronizer;
- (void)deliverV2Parameters:(const union AURenderEvent { struct AURenderEventHeader { union AURenderEvent * x0; long long x1; unsigned char x2; unsigned char x3; } x0; struct AUParameterEvent { union AURenderEvent * x0; long long x1; unsigned char x2; unsigned char x3[3] unsigned int x4; unsigned long long x5; float x6; } x1; struct AUMIDIEvent { union AURenderEvent * x0; long long x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned char x5; unsigned char x6[3] } x2; struct AUMIDIEventList { union AURenderEvent * x0; long long x1; unsigned char x2; unsigned char x3; unsigned char x4; struct MIDIEventList { int x0; unsigned int x1; I]} x2[1{MIDIEventPacket=QI[64] } x5; } x3; } *)parameters;
- (void)setV2Parameter:(unsigned long long)parameter value:(float)value bufferOffset:(unsigned int)offset sequenceNumber:(unsigned int)number;
- (float)getV2Parameter:(unsigned long long)parameter sequenceNumber:(unsigned int)number;
- (BOOL)isMusicDeviceOrEffect;
- (long long)tokenByAddingRenderObserver:(id /* block */)observer;
- (void)removeRenderObserver:(long long)observer;
- (void)addRenderObserver:(undefined *)observer userData:(void *)data;
- (void)removeRenderObserver:(undefined *)observer userData:(void *)data;
- (BOOL)allocateRenderResourcesAndReturnError:(id *)error;
- (void)deallocateRenderResources;
- (void)internalDeallocateRenderResources;
- (id)parametersForOverviewWithCount:(long long)count;
- (void)reset;
- (void)flushEventSchedule;
- (id)cachedViewController;
- (void)setCachedViewController:(id)controller;
- (void)requestViewControllerWithCompletionHandler:(id /* block */)handler;
- (void)setupMIDIConversion;
- (id)valueForUndefinedKey:(id)key;
- (void)setValue:(id)value forUndefinedKey:(id)key;
- (id)_valueForProperty:(id)property error:(id *)error;
- (void)_setValue:(id)value forKey:(id)key error:(id *)error;
- (id)supportedViewConfigurations:(id)configurations;
- (void)selectViewConfiguration:(id)configuration;
- (id)profileStateForCable:(unsigned char)cable channel:(unsigned char)channel;
- (BOOL)enableProfile:(id)profile cable:(unsigned char)cable onChannel:(unsigned char)channel error:(id *)error;
- (BOOL)disableProfile:(id)profile cable:(unsigned char)cable onChannel:(unsigned char)channel error:(id *)error;
- (void)tearDownExtension;
- (BOOL)saveUserPreset:(id)preset error:(id *)error;
- (id)presetStateFor:(id)for error:(id *)error;
- (BOOL)deleteUserPreset:(id)preset error:(id *)error;
- (void)startUserPresetFolderMonitoring;
- (id)osWorkgroup;
- (int)remoteProcessIdentifier;
- (struct { unsigned int x0[8] })remoteProcessAuditToken;
- (BOOL)isSpeechSynthesisProvider;
- (id)messageChannelFor:(id)for;
- (BOOL)isRenderingOffline;
@end

#endif /* AUAudioUnit_h */
