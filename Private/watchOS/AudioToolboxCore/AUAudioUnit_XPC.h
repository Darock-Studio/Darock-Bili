//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1387.3.4.0.0
//
#ifndef AUAudioUnit_XPC_h
#define AUAudioUnit_XPC_h
@import Foundation;

#include "AUAudioUnit.h"
#include "AUAudioUnitBusArray_XPC.h"
#include "AUCrashHandler.h"
#include "AUParameterTree.h"

@class NSArray, NSXPCConnection;
@protocol {optional<auoop::RenderPipeUser>=""(?="__null_state_"c"__val_"{RenderPipeUser="mPipeSubPool"^{PipeSubPool}"mRenderClientUser"{AUOOPRenderClientUser="au"@"AUAudioUnit_XPC""xpcConnection"@"NSXPCConnection""musicalContextBlock"@?"transportStateBlock"@?"MIDIOutputEventBlock"@?"MIDIOutputEventListBlock"@?"serviceProcessAUInstanceToken"I"isOffline"B"isMIDIProcessor"B}"mInvalidated"{atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}}})"__engaged_"B}, {shared_ptr<caulk::synchronized<auoop::RenderPipePool, std::recursive_mutex>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}, {unique_ptr<AUProcAndUserData, std::default_delete<AUProcAndUserData>>="__ptr_"{__compressed_pair<AUProcAndUserData *, std::default_delete<AUProcAndUserData>>="__value_"^{AUProcAndUserData}}}, {vector<AUAudioUnit_XPC_PropListener, std::allocator<AUAudioUnit_XPC_PropListener>>="__begin_"^{AUAudioUnit_XPC_PropListener}"__end_"^{AUAudioUnit_XPC_PropListener}"__end_cap_"{__compressed_pair<AUAudioUnit_XPC_PropListener *, std::allocator<AUAudioUnit_XPC_PropListener>>="__value_"^{AUAudioUnit_XPC_PropListener}}};

@interface AUAudioUnit_XPC : AUAudioUnit {
  /* instance variables */
  struct recursive_mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _propListenerMutex;
  struct OpaqueAudioComponentInstance * _componentInstance;
  NSXPCConnection *_xpcConnection;
  int _remotePID;
  struct mach_timebase_info { unsigned int numer; unsigned int denom; } _remoteMachTimebaseInfo;
  AUCrashHandler *_crashHandler;
  BOOL _canRender;
  BOOL _canProcess;
  BOOL _removingObserverWithContext;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _parameterTreeMutex;
  AUAudioUnitBusArray_XPC *_inputBusses;
  AUAudioUnitBusArray_XPC *_outputBusses;
  struct unique_ptr<AUProcAndUserData, std::default_delete<AUProcAndUserData>> { struct __compressed_pair<AUProcAndUserData *, std::default_delete<AUProcAndUserData>> { struct AUProcAndUserData *__value_; } __ptr_; } _elementCountListenerToken;
  struct vector<AUAudioUnit_XPC_PropListener, std::allocator<AUAudioUnit_XPC_PropListener>> { struct AUAudioUnit_XPC_PropListener *__begin_; struct AUAudioUnit_XPC_PropListener *__end_; struct __compressed_pair<AUAudioUnit_XPC_PropListener *, std::allocator<AUAudioUnit_XPC_PropListener>> { struct AUAudioUnit_XPC_PropListener *__value_; } __end_cap_; } _propListeners;
  struct shared_ptr<caulk::synchronized<auoop::RenderPipePool, std::recursive_mutex>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _renderPipePool;
  struct optional<auoop::RenderPipeUser> { union { char __null_state_; struct RenderPipeUser { struct PipeSubPool *mPipeSubPool; struct AUOOPRenderClientUser { AUAudioUnit_XPC *au; NSXPCConnection *xpcConnection; id /* block */ musicalContextBlock; id /* block */ transportStateBlock; id /* block */ MIDIOutputEventBlock; id /* block */ MIDIOutputEventListBlock; unsigned int serviceProcessAUInstanceToken; BOOL isOffline; BOOL isMIDIProcessor; } mRenderClientUser; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } mInvalidated; } __val_; } x0; BOOL __engaged_; } _renderPipeUser;
  AUParameterTree *_cachedParameterTree;
  NSArray *_userPresets;
}

/* class methods */
+ (BOOL)automaticallyNotifiesObserversForKey:(id)key;

/* instance methods */
- (void)_setComponentInstance:(struct OpaqueAudioComponentInstance *)instance;
- (void)_doOpen:(id)open completion:(id /* block */)completion;
- (void)_invalidatePipePoolAndUser;
- (id)_getInvalidationNotificationInfo;
- (void)didInvalidate;
- (void)didCrash:(id)crash;
- (void)dealloc;
- (void)_parameterTreeChanged;
- (id)inputBusses;
- (id)outputBusses;
- (BOOL)_setBusCount:(unsigned long long)count scope:(unsigned int)scope error:(id *)error;
- (void)setMusicalContextBlock:(id /* block */)block;
- (void)setTransportStateBlock:(id /* block */)block;
- (BOOL)allocateRenderResourcesAndReturnError:(id *)error;
- (void)internalDeallocateRenderResources;
- (void)remoteReset;
- (void)reset;
- (id /* block */)internalRenderBlock;
- (id)_getValueForProperty:(id)property error:(id *)error;
- (id)_getValueForKey:(id)key;
- (void)_setValue:(id)value forProperty:(id)property error:(id *)error;
- (id)valueForUndefinedKey:(id)key;
- (void)setValue:(id)value forUndefinedKey:(id)key;
- (void)_refreshBusses:(unsigned int)busses;
- (void)addObserver:(id)observer forKeyPath:(id)path options:(unsigned long long)options context:(void *)context;
- (void)removeObserver:(id)observer forKeyPath:(id)path context:(void *)context;
- (void)removeObserver:(id)observer forKeyPath:(id)path;
- (id)_getBus:(unsigned int)bus scope:(unsigned int)scope error:(id *)error;
- (void)propertiesChanged:(id)changed;
- (id)parameterTree;
- (float)getV2Parameter:(unsigned long long)parameter sequenceNumber:(unsigned int)number;
- (id)parametersForOverviewWithCount:(long long)count;
- (id)supportedViewConfigurations:(id)configurations;
- (void)selectViewConfiguration:(id)configuration;
- (BOOL)providesUserInterface;
- (id)profileStateForCable:(unsigned char)cable channel:(unsigned char)channel;
- (BOOL)enableProfile:(id)profile cable:(unsigned char)cable onChannel:(unsigned char)channel error:(id *)error;
- (BOOL)disableProfile:(id)profile cable:(unsigned char)cable onChannel:(unsigned char)channel error:(id *)error;
- (void)invalidateAllParameters;
- (void)_setState:(id)state forKey:(id)key error:(id *)error;
- (void)setFullState:(id)state;
- (void)setFullStateForDocument:(id)document;
- (void)setCurrentPreset:(id)preset;
- (BOOL)saveUserPreset:(id)preset error:(id *)error;
- (BOOL)deleteUserPreset:(id)preset error:(id *)error;
- (id)presetStateFor:(id)for error:(id *)error;
- (id)userPresets;
- (BOOL)isLoadedInProcess;
- (int)remoteProcessIdentifier;
- (struct { unsigned int x0[8] })remoteProcessAuditToken;
- (id)messageChannelFor:(id)for;
- (void)synthesizeSpeechRequest:(id)request;
- (void)cancelSpeechRequest;
- (id)speechVoices;
@end

#endif /* AUAudioUnit_XPC_h */
