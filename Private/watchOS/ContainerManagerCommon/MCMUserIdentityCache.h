//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 582.60.2.0.0
//
#ifndef MCMUserIdentityCache_h
#define MCMUserIdentityCache_h
@import Foundation;

#include "MCMUserIdentity.h"
#include "MCMUserIdentityCache-Protocol.h"

@class NSDictionary, NSHashTable, NSMutableDictionary, NSSet, NSString;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface MCMUserIdentityCache : NSObject<MCMUserIdentityCache> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  NSObject<OS_dispatch_queue> *_flushQueue;
  NSObject<OS_xpc_object> *_listener;
}

@property (nonatomic) BOOL cacheInvalid;
@property (readonly, nonatomic) NSDictionary *lock_bundleToDataSeparatedIdentitiesMap;
@property (readonly, nonatomic) NSDictionary *lock_personaUniqueStringToUserIdentityMap;
@property (readonly, nonatomic) NSDictionary *lock_personaIDToUserIdentityMap;
@property (readonly, nonatomic) MCMUserIdentity *lock_userIdentityForPersonalPersona;
@property (readonly, nonatomic) MCMUserIdentity *lock_userIdentityForUnspecificPersona;
@property (readonly, nonatomic) NSMutableDictionary *lock_managedPathRegistryForUserIdentity;
@property (readonly, nonatomic) NSMutableDictionary *lock_libraryRepairForUserIdentity;
@property (readonly, nonatomic) NSHashTable *observers;
@property (retain, nonatomic) NSSet *previousUserIdentities;
@property (nonatomic) unsigned long long savedGeneration;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)defaultUserIdentity;
+ (BOOL)personasAreSupported;
+ (id)globalBundleUserIdentity;
+ (id)globalSystemUserIdentity;

/* instance methods */
- (id)init;
- (void)_refreshFromUserManagementIfNecessary;
- (id)userIdentitiesForBundleIdentifier:(id)identifier;
- (id)userIdentityForCurrentUserWithPersonaUniqueString:(id)string;
- (id)userIdentityForPersonaUniqueString:(id)string POSIXUser:(id)posixuser;
- (id)userIdentityForClient:(struct container_client { char * x0; unsigned int x1; char * x2; unsigned int x3; unsigned int x4; struct { unsigned int x0[8] } x5; int x6; BOOL x7; BOOL x8; BOOL x9; id x10; } *)client error:(id *)error;
- (id)userIdentityForPersonalPersona;
- (id)unspecificUserIdentity;
- (id)userIdentityForPersonalPersonaWithPOSIXUser:(id)posixuser;
- (id)userIdentityWithPersonaID:(unsigned int)id;
- (void)flush;
- (id)allAccessibleUserIdentities;
- (void)forEachAccessibleUserIdentitySynchronouslyExecuteBlock:(id /* block */)block;
- (id)defaultUserIdentity;
- (id)globalBundleUserIdentity;
- (id)globalSystemUserIdentity;
- (id)personaUniqueStringForCurrentContext;
- (id)userIdentityForCurrentContext;
- (id)userIdentityForLegacyMobileUser;
- (void)flushAndRepopulateWithUserIdentities:(id)identities;
- (void)addObserver:(id)observer;
- (void)removeObserver:(id)observer;
- (id)managedUserPathRegistryForUserIdentity:(id)identity;
- (id)libraryRepairForUserIdentity:(id)identity;
- (id)_lock_userIdentitiesForBundleIdentifier:(id)identifier;
- (id)_lock_userIdentityForCurrentUserWithPersonaUniqueString:(id)string;
- (void)_lock_resync;
- (void)_lock_flush;
- (void)_lock_flushAndRepopulateWithUserIdentities:(id)identities;
- (void)_notifyObserversOfChangesWithUserIdentities:(id)identities;
@end

#endif /* MCMUserIdentityCache_h */
