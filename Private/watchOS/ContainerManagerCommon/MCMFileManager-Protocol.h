//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 582.60.2.0.0
//
#ifndef MCMFileManager_Protocol_h
#define MCMFileManager_Protocol_h
@import Foundation;

#include "MCMFileManager-Protocol.h"

@class BOOL *;

@protocol MCMFileManager 
/* instance methods */
- (BOOL)removeItemAtURL:(id)url error:(id *)error;
- (BOOL)createDirectoryAtURL:(id)url withIntermediateDirectories:(BOOL)directories mode:(unsigned short)mode owner:(id)owner dataProtectionClass:(int)class error:(id *)error;
- (BOOL)createDirectoryAtURL:(id)url withIntermediateDirectories:(BOOL)directories mode:(unsigned short)mode owner:(id)owner error:(id *)error;
- (BOOL)createDirectoryAtURL:(id)url withIntermediateDirectories:(BOOL)directories mode:(unsigned short)mode owner:(id)owner dataProtectionClass:(int)class fsNode:(id *)node error:(id *)error;
- (BOOL)createDirectoryAtURL:(id)url withIntermediateDirectories:(BOOL)directories mode:(unsigned short)mode dataProtectionClass:(int)class error:(id *)error;
- (BOOL)createDirectoryAtURL:(id)url withIntermediateDirectories:(BOOL)directories mode:(unsigned short)mode error:(id *)error;
- (BOOL)symbolicallyLinkURL:(id)url toSymlinkTarget:(id)target error:(id *)error;
- (id)targetOfSymbolicLinkAtURL:(id)url error:(id *)error;
- (BOOL)copyItemIfExistsAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)moveItemIfExistsAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)copyItemAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)moveItemAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)replaceItemAtDestinationURL:(id)url withSourceURL:(id)url swapped:(BOOL *)swapped error:(id *)error;
- (id)createTemporaryDirectoryInDirectoryURL:(id)url error:(id *)error;
- (id)createTemporaryDirectoryInDirectoryURL:(id)url withNamePrefix:(id)prefix error:(id *)error;
- (BOOL)standardizeOwnershipAtURL:(id)url toPOSIXUser:(id)posixuser error:(id *)error;
- (id)urlsForItemsInDirectoryAtURL:(id)url error:(id *)error;
- (BOOL)itemExistsAtURL:(id)url;
- (BOOL)itemAtURL:(id)url exists:(BOOL *)exists error:(id *)error;
- (BOOL)itemExistsAtURL:(id)url isDirectory:(BOOL *)directory;
- (BOOL)itemAtURL:(id)url exists:(BOOL *)exists isDirectory:(BOOL *)directory error:(id *)error;
- (BOOL)itemAtURL:(id)url followSymlinks:(BOOL)symlinks exists:(BOOL *)exists isDirectory:(BOOL *)directory error:(id *)error;
- (BOOL)itemAtURL:(id)url followSymlinks:(BOOL)symlinks exists:(BOOL *)exists isDirectory:(BOOL *)directory fsNode:(id *)node error:(id *)error;
- (BOOL)itemDoesNotExistAtURL:(id)url;
- (BOOL)dataProtectionClassOfItemAtURL:(id)url dataProtectionClass:(int *)class error:(id *)error;
- (BOOL)setDataProtectionClassOfItemAtURL:(id)url toDataProtectionClass:(int)class ifPredicate:(id /* block */)predicate error:(id *)error;
- (void)printDirectoryStructureAtURL:(id)url;
- (BOOL)enableFastDiskUsageForURL:(id)url error:(id *)error;
- (struct { unsigned long long x0; unsigned long long x1; })diskUsageForURL:(id)url;
- (struct { unsigned long long x0; unsigned long long x1; })fastDiskUsageForURL:(id)url;
- (BOOL)setTopLevelSystemContainerACLAtURL:(id)url error:(id *)error;
- (BOOL)standardizeACLsAtURL:(id)url isSystemContainer:(BOOL)container error:(id *)error;
- (BOOL)standardizeACLsForSystemContainerAtURL:(id)url error:(id *)error;
- (BOOL)standardizeAllSystemContainerACLsAtURL:(id)url error:(id *)error;
- (id)realPathForURL:(id)url ifChildOfURL:(id)url;
- (id)realPathForURL:(id)url isDirectory:(BOOL)directory error:(id *)error;
- (id)readDataFromURL:(id)url options:(unsigned long long)options fsNode:(id *)node error:(id *)error;
- (id)readDataFromURL:(id)url options:(unsigned long long)options error:(id *)error;
- (BOOL)writeData:(id)data toURL:(id)url options:(unsigned long long)options mode:(unsigned short)mode error:(id *)error;
- (BOOL)compareVolumeForURL:(id)url versusURL:(id)url isSameVolume:(BOOL *)volume error:(id *)error;
- (BOOL)checkFileSystemAtURL:(id)url isCaseSensitive:(BOOL *)sensitive canAtomicSwap:(BOOL *)swap error:(id *)error;
- (BOOL)checkFileSystemAtURL:(id)url supportsPerFileKeys:(BOOL *)keys error:(id *)error;
- (BOOL)stripACLFromURL:(id)url error:(id *)error;
- (unsigned long long)dataWritingOptionsForFileAtURL:(id)url;
- (BOOL)fixUserPermissionsAtURL:(id)url limitToTopLevelURL:(id)url error:(id *)error;
- (BOOL)removeExclusionFromBackupFromURL:(id)url error:(id *)error;
- (id)copyDescriptionOfURL:(id)url;
- (id)fsNodeOfURL:(id)url followSymlinks:(BOOL)symlinks error:(id *)error;
- (id)fsSanitizedStringFromString:(id)string allowSpaces:(BOOL)spaces;
- (BOOL)repairPermissionsAtURL:(id)url uid:(unsigned int)uid gid:(unsigned int)gid options:(unsigned long long)options error:(id *)error;
@end

#endif /* MCMFileManager_Protocol_h */
