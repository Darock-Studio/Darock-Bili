//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3093.2.4.4.10
//
#ifndef AXBackBoardServer_h
#define AXBackBoardServer_h
@import Foundation;

#include "AXServer.h"

@class NSMutableArray;

@interface AXBackBoardServer : AXServer {
  /* instance variables */
  BOOL _overrideGestureRecognition;
  NSMutableArray *_eventListeners;
  NSMutableArray *_zoomAttributeListeners;
}

@property (@dynamic, nonatomic) BOOL invertColorsEnabled;
@property (nonatomic) BOOL inPreboardMode;
@property (nonatomic) BOOL inCheckerBoardMode;
@property (nonatomic) BOOL preferenceRetrievalRequiresValidConnection;

/* class methods */
+ (id)server;

/* instance methods */
- (id)init;
- (void)dealloc;
- (id)_serviceName;
- (void)registerGestureConflictWithZoom:(id)zoom;
- (void)adjustSystemZoom:(int)zoom;
- (void)setLockScreenDimTimerEnabled:(BOOL)enabled;
- (void)registerSiriViewServicePID:(int)pid;
- (int)accessibilityAssistiveTouchPID;
- (int)accessibilityFullKeyboardAccessDaemonPID;
- (int)accessibilityUIServicePID;
- (void)registerFullKeyboardAccessDaemonPID:(int)pid;
- (void)registerAccessibilityUIServicePID:(int)pid;
- (int)hearingAidServerPID;
- (void)registerHearingAidServerPID:(int)pid;
- (BOOL)_shouldDispatchLocally;
- (id)backboardServiceInstance;
- (void)setSessionIsLoginSession:(BOOL)session;
- (void)sessionIsLoginSessionWithResult:(id /* block */)result;
- (void)registerAssistiveTouchPID:(int)pid;
- (void)postEvent:(id)event afterNamedTap:(id)tap includeTaps:(id)taps;
- (void)postEvent:(id)event systemEvent:(BOOL)event;
- (unsigned int)contextIdForPosition:(struct CGPoint { double x0; double x1; })position;
- (unsigned int)contextIdHostingContextId:(unsigned int)id;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame fromContextId:(unsigned int)id toContextId:(unsigned int)id;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame toContextId:(unsigned int)id;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame fromContextId:(unsigned int)id;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame fromContextId:(unsigned int)id toContextId:(unsigned int)id displayId:(unsigned int)id;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame toContextId:(unsigned int)id displayId:(unsigned int)id;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame fromContextId:(unsigned int)id displayId:(unsigned int)id;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromContextId:(unsigned int)id;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toContextId:(unsigned int)id;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromContextId:(unsigned int)id displayId:(unsigned int)id;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toContextId:(unsigned int)id displayId:(unsigned int)id;
- (void)userEventOccurred;
- (void)setCapsLockLightOn:(BOOL)on;
- (void)setHearingAidControlIsVisible:(BOOL)visible;
- (void)setSwitchControlRendersDeviceUnusable:(BOOL)unusable;
- (void)setSwitchControlHasScreenSwitch:(BOOL)switch;
- (id)accessibilityPreferenceAsMobile:(id)mobile;
- (void)setAccessibilityPreferenceAsMobile:(id)mobile value:(id)value notification:(id)notification;
- (void)setZoomInitialFocusRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromContext:(unsigned int)context;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })zoomInitialFocusRectWithQueryingContext:(unsigned int)context;
- (BOOL)tripleClickHomeButtonPress;
- (void)homeClickSwallowedForGuidedAccess;
- (id)_springboardParametersForGuidedAccessAvailability;
- (BOOL)isGuidedAccessActive;
- (BOOL)isGuidedAccessInWorkspace;
- (id)guidedAccessEffectiveAppBundleIdentifier;
- (void)guidedAccessEffectiveAppBundleIdentifier:(id /* block */)identifier;
- (id)performGuidedAccessAutomationCommand:(id)command error:(id *)error;
- (unsigned long long)guidedAccessAvailability;
- (void)_sendRequestGuidedAccessSessionMessage:(id)message numberOfRetryAttempts:(unsigned long long)attempts completion:(id /* block */)completion;
- (void)requestGuidedAccessSessionStartWithConfigurationDictionary:(id)dictionary completion:(id /* block */)completion;
- (void)requestGuidedAccessSessionEndWithCompletion:(id /* block */)completion;
- (BOOL)isGuidedAccessSelfLockedToApp:(id)app;
- (BOOL)isGuidedAccessUnmanagedSelfLocked;
- (BOOL)isRestrictedForAAC;
- (void)toggleGuidedAccess;
- (id)guidedAccessIgnoredRegions;
- (unsigned long long)currentGuidedAccessModeAndSessionApp:(id *)app;
- (void)jetsamThirdPartyApps;
- (void)disableBrightnessFilters;
- (BOOL)brightnessFiltersEnabled;
- (BOOL)blueLightStatusEnabled;
- (void)restoreCachedBrightnessFilters;
- (BOOL)adaptationEnabled;
- (BOOL)supportsAdaptation;
- (BOOL)supportsAccessibilityDisplayFilters;
- (BOOL)loadGAXBundleForUnmanagedASAM;
- (void)resetAccessibilityFeatures;
- (struct AXBColorFilterDescription { d] x0[3[3] })colorFilterFromLastUpdate;
- (void)setIsSpeakScreenHighlightVisible:(BOOL)visible;
- (void)setDeviceOrientation:(long long)orientation;
@end

#endif /* AXBackBoardServer_h */
