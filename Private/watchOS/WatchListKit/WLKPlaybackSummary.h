//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 800.20.10.0.0
//
#ifndef WLKPlaybackSummary_h
#define WLKPlaybackSummary_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"

@class NSDate, NSNumber, NSString;

@interface WLKPlaybackSummary : NSObject<NSSecureCoding>

@property (nonatomic) BOOL isAlwaysLive;
@property (nonatomic) BOOL isTimerDerived;
@property (nonatomic) BOOL fromActivePlayerPath;
@property (readonly, nonatomic) NSString *bundleID;
@property (readonly, nonatomic) NSString *channelID;
@property (readonly, nonatomic) NSDate *timestamp;
@property (readonly, nonatomic) NSDate *currentPlaybackDate;
@property (readonly, nonatomic) NSNumber *duration;
@property (readonly, nonatomic) NSNumber *elapsedTime;
@property (readonly, nonatomic) NSNumber *featureDuration;
@property (readonly, nonatomic) NSNumber *featureElapsedTime;
@property (readonly, nonatomic) NSString *accountID;
@property (readonly, nonatomic) NSNumber *accountIDAsNumber;
@property (readonly, nonatomic) NSString *externalProfileID;
@property (readonly, nonatomic) NSString *contentID;
@property (readonly, nonatomic) NSString *serviceID;
@property (readonly, nonatomic) long long playbackState;
@property (readonly, nonatomic) NSNumber *playbackRate;
@property (readonly, nonatomic) long long completionState;
@property (readonly, nonatomic) long long playbackType;

/* class methods */
+ (double)playedThresholdTimeForDuration:(double)duration;
+ (long long)completionStateForDuration:(double)duration elapsedTime:(double)time;
+ (id)debugStringForCompletionState:(long long)state;
+ (id)VODSummaryWithBundleID:(id)id channelID:(id)id contentID:(id)id accountID:(id)id externalProfileID:(id)id timestamp:(id)timestamp duration:(id)duration elapsedTime:(id)time playbackState:(long long)state playbackRate:(id)rate completionState:(long long)state;
+ (id)VODSummaryWithBundleID:(id)id channelID:(id)id contentID:(id)id accountID:(id)id externalProfileID:(id)id timestamp:(id)timestamp duration:(id)duration elapsedTime:(id)time featureDuration:(id)duration featureElapsedTime:(id)time playbackState:(long long)state playbackRate:(id)rate completionState:(long long)state;
+ (id)liveSummaryWithBundleID:(id)id channelID:(id)id serviceID:(id)id accountID:(id)id externalProfileID:(id)id timestamp:(id)timestamp playbackState:(long long)state playbackRate:(id)rate currentPlaybackDate:(id)date;
+ (id)EBSSummaryWithBundleID:(id)id channelID:(id)id externalId:(id)id accountID:(id)id externalProfileID:(id)id timestamp:(id)timestamp playbackState:(long long)state playbackRate:(id)rate currentPlaybackDate:(id)date;
+ (id)debugStringForPlaybackState:(long long)state;
+ (id)_debugStringForPlaybackType:(long long)type;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)elapsedTimeSummaryWithPlaybackState:(long long)state timerDerived:(BOOL)derived;
- (void)resolveChannelID:(id /* block */)id;
- (id)initWithBundleID:(id)id timestamp:(id)timestamp duration:(id)duration elapsedTime:(id)time featureDuration:(id)duration featureElapsedTime:(id)time externalProfileID:(id)id contentID:(id)id accountID:(id)id playbackState:(long long)state playbackRate:(id)rate completionState:(long long)state isAlwaysLive:(BOOL)live serviceID:(id)id currentPlaybackDate:(id)date playbackType:(long long)type isTimerDerived:(BOOL)derived isFromActivePlayerPath:(BOOL)path channelID:(id)id;
- (id)initWithMediaRemoteDictionary:(id)dictionary bundleID:(id)id accountID:(id)id isFromActivePlayerPath:(BOOL)path;
- (BOOL)isEqual:(id)equal;
- (BOOL)isEqualToSummary:(id)summary;
- (BOOL)isEquivalentToSummaryExcludingCursor:(id)cursor;
- (BOOL)isEquivalentToSummaryExcludingTimestamp:(id)timestamp;
- (BOOL)isSameContent:(id)content;
- (unsigned long long)hash;
- (BOOL)isLiveType;
- (id)shortDescription;
- (id)description;
- (id)dictionaryRepresentation;
- (id)JSONRepresentation;
- (id)sanitizedCopy;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)_compareOptional:(id)optional with:(id)with;
- (BOOL)_compareOptionalTemporalValue:(id)value with:(id)with fuzzy:(BOOL)fuzzy;
- (BOOL)_validate:(id)_validate identifier:(id)identifier expectedClass:(Class)class;
- (BOOL)_isValid;
- (BOOL)isFromActivePlayerPath;
@end

#endif /* WLKPlaybackSummary_h */
