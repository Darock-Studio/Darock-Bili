//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 858.60.5.0.0
//
#ifndef RBSConnection_h
#define RBSConnection_h
@import Foundation;

#include "OS_xpc_object-Protocol.h"
#include "RBSClientProtocol-Protocol.h"
#include "RBSConnectionServiceDelegate-Protocol.h"
#include "RBSProcessHandle.h"
#include "RBSServiceLocalProtocol-Protocol.h"

@class NSHashTable, NSMapTable, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet;
@protocol OS_dispatch_queue;

@interface RBSConnection : NSObject<RBSClientProtocol, RBSServiceLocalProtocol> {
  /* instance variables */
  NSObject<OS_xpc_object> *_connection;
  NSObject<OS_xpc_object> *_handleConnection;
  RBSProcessHandle *_handle;
  NSObject<RBSConnectionServiceDelegate> *_serviceDelegate;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _assertionLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _processExpirationLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _savedEndowmentLock;
  NSObject<OS_dispatch_queue> *_connectionQueue;
  NSObject<OS_dispatch_queue> *_handshakeQueue;
  NSMapTable *_acquiredAssertionsByIdentifier;
  NSHashTable *_processMonitors;
  NSMutableDictionary *_stateByIdentity;
  NSSet *_preventLaunchPredicates;
  NSMutableSet *_inheritances;
  NSHashTable *_expirationWarningClients;
  NSMutableDictionary *_deathHandlers;
  NSMutableArray *_savedEndowments;
  unsigned long long _state;
}

/* class methods */
+ (id)sharedInstance;
+ (id)testConnectionWithConnection:(id)connection;
+ (id)handshakeQueue;
+ (id)connectionQueue;
+ (void)setInDaemon;

/* instance methods */
- (id)init;
- (void)dealloc;
- (id)acquireAssertion:(id)assertion error:(out id *)error;
- (BOOL)invalidateAssertion:(id)assertion error:(out id *)error;
- (id)assertionDescriptorsByPidWithFlattenedAttributes:(BOOL)attributes error:(out id *)error;
- (BOOL)executeLaunchRequest:(id)request process:(out id *)process assertion:(out id *)assertion error:(out id *)error;
- (BOOL)executeTerminateRequest:(id)request assertion:(out id *)assertion error:(out id *)error;
- (id)handleForKey:(id)key;
- (id)processName:(id)name;
- (id)portForIdentifier:(id)identifier;
- (id)handleForPredicate:(id)predicate error:(out id *)error;
- (void)subscribeToProcessDeath:(id)death handler:(id /* block */)handler;
- (BOOL)subscribeProcessStateMonitor:(id)monitor configuration:(id)configuration error:(out id *)error;
- (void)unsubscribeProcessStateMonitor:(id)monitor configuration:(id)configuration;
- (id)statesForPredicate:(id)predicate withDescriptor:(id)descriptor error:(out id *)error;
- (void)intendToExit:(id)exit withStatus:(id)status;
- (id)lastExitContextForInstance:(id)instance error:(out id *)error;
- (id)limitationsForInstance:(id)instance error:(out id *)error;
- (id)hostProcessForInstance:(id)instance error:(out id *)error;
- (id)infoPlistResultForInstance:(id)instance forKeys:(id)keys error:(out id *)error;
- (id)captureStateForSubsystem:(id)subsystem error:(out id *)error;
- (id)identifiersForStateCaptureSubsystems:(out id *)subsystems;
- (id)busyExtensionInstancesFromSet:(id)set error:(out id *)error;
- (id)preventLaunchPredicatesWithError:(out id *)error;
- (void)reset;
- (BOOL)saveEndowment:(id)endowment withError:(out id *)error;
- (void)async_willExpireAssertionsSoon;
- (void)async_didChangeInheritances:(id)inheritances completion:(id /* block */)completion;
- (void)async_assertionsDidInvalidate:(id)invalidate withError:(id)error;
- (void)async_assertionWillInvalidate:(id)invalidate;
- (void)async_observedProcessStatesDidChange:(id)change completion:(id /* block */)completion;
- (void)async_observedProcessExitEvents:(id)events completion:(id /* block */)completion;
- (void)async_observedPreventLaunchPredicatesUpdate:(id)update completion:(id /* block */)completion;
- (void)async_processDidExit:(id)exit withContext:(id)context;
- (BOOL)invalidateAssertionWithIdentifier:(id)identifier error:(out id *)error;
- (BOOL)isIdentityAnAngel:(id)angel withError:(out id *)error;
@end

#endif /* RBSConnection_h */
