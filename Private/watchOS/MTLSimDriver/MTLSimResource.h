//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 341.35.0.0.0
//
#ifndef MTLSimResource_h
#define MTLSimResource_h
@import Foundation;

#include "MTLDevice-Protocol.h"
#include "MTLHeap-Protocol.h"
#include "MTLResourceSPI-Protocol.h"
#include "MTLSerializerResource-Protocol.h"
#include "MTLSimDevice.h"
#include "MTLSimHeap.h"

@class NSString;

@interface MTLSimResource : NSObject<MTLResourceSPI, MTLSerializerResource> {
  /* instance variables */
  unsigned long long _purgeableState;
  unsigned int _resourceRef;
  unsigned long long _options;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _labelLock;
  BOOL _isAliasable;
}

@property (readonly, @dynamic) unsigned long long resourceOptions;
@property int responsibleProcess;
@property (readonly) unsigned long long allocationID;
@property (readonly) unsigned long long protectionOptions;
@property (readonly, @dynamic) unsigned long long unfilteredResourceOptions;
@property (copy, @dynamic) NSString *label;
@property (readonly, @dynamic) NSObject<MTLDevice> *device;
@property (readonly) unsigned long long cpuCacheMode;
@property (readonly) unsigned long long storageMode;
@property (readonly, @dynamic) unsigned long long hazardTrackingMode;
@property (readonly, @dynamic) NSObject<MTLHeap> *heap;
@property (readonly) unsigned long long heapOffset;
@property (readonly) unsigned long long allocatedSize;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned int serializerResourceRef;

/* instance methods */
- (id)initWithResourceRef:(unsigned int)ref options:(unsigned long long)options device:(id)device heap:(id)heap;
- (void)dealloc;
- (id)retainedLabel;
- (BOOL)isAliasable;
- (void)makeAliasable;
- (unsigned long long)setPurgeableState:(unsigned long long)state;
- (BOOL)doesAliasResources:(const id *)resources count:(unsigned long long)count all:(BOOL)all;
- (BOOL)doesAliasAllResources:(const id *)resources count:(unsigned long long)count;
- (BOOL)doesAliasAnyResources:(const id *)resources count:(unsigned long long)count;
- (BOOL)doesAliasResource:(id)resource;
- (BOOL)isComplete;
- (BOOL)isPurgeable;
- (void)waitUntilComplete;
@end

#endif /* MTLSimResource_h */
