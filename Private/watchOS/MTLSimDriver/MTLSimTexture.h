//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 341.35.0.0.0
//
#ifndef MTLSimTexture_h
#define MTLSimTexture_h
@import Foundation;

#include "MTLSimResource.h"
#include "MTLBuffer-Protocol.h"
#include "MTLDevice-Protocol.h"
#include "MTLHeap-Protocol.h"
#include "MTLResource-Protocol.h"
#include "MTLSerializerResource-Protocol.h"
#include "MTLSerializerTexture-Protocol.h"
#include "MTLSimBuffer.h"
#include "MTLSimTexture.h"
#include "MTLTexture-Protocol.h"
#include "MTLTextureImplementation-Protocol.h"
#include "MTLTextureSPI-Protocol.h"

@class NSString;

@interface MTLSimTexture : MTLSimResource<MTLSerializerTexture, MTLSerializerResource, MTLTextureSPI, MTLTextureImplementation> {
  /* instance variables */
  unsigned long long _backingBufferSize;
  BOOL _isInternalTextureView;
}

@property (retain, @dynamic) NSObject<MTLTexture> *parentTexture;
@property BOOL shareable;
@property (readonly) unsigned long long decompressedPixelFormat;
@property (readonly) NSObject<MTLBuffer> *backingBuffer;
@property (readonly) NSObject<MTLTexture> *decompressedTextureView;
@property (readonly) unsigned int textureRef;
@property (readonly) unsigned long long pixelFormat;
@property (readonly) unsigned int serializerResourceRef;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) struct __IOSurface * iosurface;
@property (readonly) unsigned long long iosurfacePlane;
@property (readonly) unsigned long long rotation;
@property (readonly) BOOL isCompressed;
@property (readonly, @dynamic) long long compressionFeedback;
@property (readonly) unsigned long long uniqueIdentifier;
@property (readonly, nonatomic) unsigned long long resourceIndex;
@property (readonly, nonatomic) unsigned long long gpuAddress;
@property (readonly) unsigned int swizzleKey;
@property (readonly) unsigned long long numFaces;
@property (readonly) BOOL isDrawable;
@property (readonly) unsigned long long sparseSurfaceDefaultValue;
@property (readonly, nonatomic) unsigned long long compressionFootprint;
@property (readonly) unsigned long long gpuHandle;
@property (readonly) NSObject<MTLResource> *rootResource;
@property (readonly) unsigned long long parentRelativeLevel;
@property (readonly) unsigned long long parentRelativeSlice;
@property (readonly, @dynamic) NSObject<MTLBuffer> *buffer;
@property (readonly, @dynamic) unsigned long long bufferOffset;
@property (readonly) unsigned long long bufferBytesPerRow;
@property (readonly) unsigned long long textureType;
@property (readonly) unsigned long long width;
@property (readonly) unsigned long long height;
@property (readonly) unsigned long long depth;
@property (readonly) unsigned long long mipmapLevelCount;
@property (readonly) unsigned long long sampleCount;
@property (readonly) unsigned long long arrayLength;
@property (readonly) unsigned long long usage;
@property (readonly) BOOL framebufferOnly;
@property (readonly) unsigned long long firstMipmapInTail;
@property (readonly) unsigned long long tailSizeInBytes;
@property (readonly) BOOL isSparse;
@property (readonly) BOOL allowGPUOptimizedContents;
@property (readonly) long long compressionType;
@property (readonly) struct MTLResourceID { unsigned long long x0; } gpuResourceID;
@property (readonly, @dynamic, nonatomic) struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; } swizzle;
@property (copy) NSString *label;
@property (readonly) NSObject<MTLDevice> *device;
@property (readonly) unsigned long long cpuCacheMode;
@property (readonly) unsigned long long storageMode;
@property (readonly) unsigned long long hazardTrackingMode;
@property (readonly) unsigned long long resourceOptions;
@property (readonly) NSObject<MTLHeap> *heap;
@property (readonly) unsigned long long heapOffset;
@property (readonly) unsigned long long allocatedSize;
@property int responsibleProcess;
@property (readonly) unsigned long long allocationID;
@property (readonly) unsigned long long protectionOptions;
@property (readonly) unsigned long long unfilteredResourceOptions;

/* class methods */
+ (unsigned long long)getDecompressedFormat:(unsigned long long)format;
+ (void)decompress:(const char *)decompress expandedTex:(char *)tex srcFormat:(unsigned long long)format destFormat:(unsigned long long)format width:(unsigned long long)width height:(unsigned long long)height destRowBytes:(unsigned long long)bytes srcRowBytes:(unsigned long long)bytes;

/* instance methods */
- (void)decompressPlaceholder:(const char *)placeholder expandedTex:(char *)tex srcFormat:(unsigned long long)format destFormat:(unsigned long long)format width:(unsigned long long)width height:(unsigned long long)height destRowBytes:(unsigned long long)bytes srcRowBytes:(unsigned long long)bytes;
- (unsigned long long)calculateOffsetToRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })region level:(unsigned long long)level slice:(unsigned long long)slice;
- (id)initWithTextureInternal:(id)internal pixelFormat:(unsigned long long)format decompressedPixelFormat:(unsigned long long)format textureType:(unsigned long long)type levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })levels slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })slices swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })swizzle compressedView:(BOOL)view textureRef:(unsigned int)ref isInternalTextureView:(BOOL)view;
- (id)initWithTexture:(id)texture pixelFormat:(unsigned long long)format decompressedPixelFormat:(unsigned long long)format textureType:(unsigned long long)type levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })levels slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })slices swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })swizzle textureRef:(unsigned int)ref isInternalTextureView:(BOOL)view;
- (id)initWithTexture:(id)texture pixelFormat:(unsigned long long)format decompressedPixelFormat:(unsigned long long)format textureRef:(unsigned int)ref isInternalTextureView:(BOOL)view;
- (id)initWithBuffer:(id)buffer offset:(unsigned long long)offset bytesPerRow:(unsigned long long)row descriptor:(id)descriptor textureRef:(unsigned int)ref;
- (id)initWithDescriptor:(id)descriptor decompressedPixelFormat:(unsigned long long)format iosurface:(struct __IOSurface *)iosurface plane:(unsigned long long)plane textureRef:(unsigned int)ref heap:(id)heap device:(id)device;
- (id)initWithDescriptor:(id)descriptor decompressedPixelFormat:(unsigned long long)format iosurface:(struct __IOSurface *)iosurface plane:(unsigned long long)plane textureRef:(unsigned int)ref heap:(id)heap device:(id)device shareable:(BOOL)shareable;
- (id)initWithTexture:(id)texture device:(id)device;
- (void)dealloc;
- (id)formattedDescription:(unsigned long long)description;
- (void)_simSetParentTexture:(id)texture;
- (unsigned long long)setPurgeableState:(unsigned long long)state;
- (void)getBytes:(void *)bytes bytesPerRow:(unsigned long long)row bytesPerImage:(unsigned long long)image fromRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })region mipmapLevel:(unsigned long long)level slice:(unsigned long long)slice;
- (void)getBytes:(void *)bytes bytesPerRow:(unsigned long long)row fromRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })region mipmapLevel:(unsigned long long)level;
- (id)newRemoteTextureViewForDevice:(id)device;
- (id)newTextureViewWithPixelFormatInternal:(unsigned long long)internal isInternalTextureView:(BOOL)view;
- (id)newTextureViewWithPixelFormat:(unsigned long long)format;
- (id)newTextureViewWithPixelFormat:(unsigned long long)format textureType:(unsigned long long)type levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })levels slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })slices;
- (void)replaceRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })region mipmapLevel:(unsigned long long)level slice:(unsigned long long)slice withBytes:(const void *)bytes bytesPerRow:(unsigned long long)row bytesPerImage:(unsigned long long)image;
- (void)replaceRegion:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; })region mipmapLevel:(unsigned long long)level withBytes:(const void *)bytes bytesPerRow:(unsigned long long)row;
- (void)didModifyData;
- (id)newTextureViewWithPixelFormat:(unsigned long long)format textureType:(unsigned long long)type levels:(struct _NSRange { unsigned long long x0; unsigned long long x1; })levels slices:(struct _NSRange { unsigned long long x0; unsigned long long x1; })slices swizzle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; })swizzle;
- (void)_swapDecompressedPropertiesWith:(id)with;
- (BOOL)isFramebufferOnly;
- (BOOL)isShareable;
- (void)_simSetShareable:(BOOL)shareable;
@end

#endif /* MTLSimTexture_h */
