//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 123.2.7.0.1
//
#ifndef BMStreamDatastoreBase_h
#define BMStreamDatastoreBase_h
@import Foundation;

#include "BMFileManagerDelegate-Protocol.h"
#include "BMFrameStore.h"
#include "BMPruningPolicy.h"
#include "BMSegmentManager.h"
#include "BMSegmentManagerDelegate-Protocol.h"
#include "BMStoreConfig.h"
#include "BMStreamDatastorePruningDelegate-Protocol.h"
#include "BMStreamMetadata.h"

@class BMFileManager, NSString;

@interface BMStreamDatastoreBase : NSObject<BMSegmentManagerDelegate, BMFileManagerDelegate> {
  /* instance variables */
  BMFileManager *_fileManager;
  Class _eventDataClass;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  BOOL _biomeLibrary;
}

@property (readonly, nonatomic) BMFrameStore *currentFrameStore;
@property (readonly, nonatomic) unsigned long long permission;
@property (readonly, nonatomic) unsigned long long maxFileSize;
@property (readonly, nonatomic) NSString *streamPath;
@property (readonly, nonatomic) NSString *remoteStreamName;
@property (readonly, nonatomic) BMPruningPolicy *pruningPolicy;
@property (readonly, nonatomic) BMSegmentManager *segmentManager;
@property (readonly, copy, nonatomic) NSString *streamId;
@property (readonly, nonatomic) BOOL isDataAccessible;
@property (readonly, nonatomic) BMStreamMetadata *metadata;
@property (readonly, nonatomic) BMStoreConfig *config;
@property (weak, nonatomic) NSObject<BMStreamDatastorePruningDelegate> *delegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (BOOL)verifyStreamHealthFrom:(double)from to:(double)to error:(id *)error;
- (BOOL)verifyStreamHealthFromV1:(double)v1 to:(double)to frameStore:(id)store error:(id *)error;
- (BOOL)verifyStreamHealthFromV2:(double)v2 to:(double)to frameStore:(id)store error:(id *)error;
- (id)initWithStream:(id)stream permission:(unsigned long long)permission config:(id)config;
- (id)initWithStream:(id)stream streamPath:(id)path permission:(unsigned long long)permission config:(id)config;
- (id)initWithStream:(id)stream streamPath:(id)path permission:(unsigned long long)permission config:(id)config eventDataClass:(Class)class useCase:(id)case;
- (BOOL)isTombstone;
- (id)segmentNames;
- (Class)eventBodyClass;
- (BOOL)writeEventWithEventBody:(id)body;
- (BOOL)writeEventWithEventBody:(id)body timestamp:(double)timestamp;
- (BOOL)writeEventWithEventBody:(id)body timestamp:(double)timestamp outEventSize:(unsigned long long *)size;
- (BOOL)writeEventWithEventBody:(id)body timestamp:(double)timestamp outBookmark:(id *)bookmark;
- (BOOL)writeEventWithEventBody:(id)body timestamp:(double)timestamp outEventSize:(unsigned long long *)size outBookmark:(id *)bookmark;
- (id)fetchEventsFrom:(double)from to:(double)to;
- (id)fetchEventsFrom:(double)from to:(double)to options:(unsigned long long)options;
- (void)removeEventsFrom:(double)from to:(double)to reason:(unsigned long long)reason pruneFutureEvents:(BOOL)events usingBlock:(id /* block */)block;
- (void)removeEventsFrom:(double)from to:(double)to reason:(unsigned long long)reason pruneFutureEvents:(BOOL)events shouldDeleteUsingBlock:(id /* block */)block;
- (void)eventsFrom:(double)from to:(double)to reason:(unsigned long long)reason shouldDeleteUsingBlock:(id /* block */)block;
- (void)syncMappedFiles;
- (id)newEnumeratorFromStartTime:(double)time;
- (id)newEnumeratorFromStartTime:(double)time options:(unsigned long long)options;
- (id)newEnumeratorFromStartTime:(double)time endTime:(double)time options:(unsigned long long)options;
- (id)newEnumeratorFromStartTime:(double)time endTime:(double)time maxEvents:(unsigned long long)events options:(unsigned long long)options;
- (id)newEnumeratorFromStartTime:(double)time endTime:(double)time maxEvents:(unsigned long long)events lastN:(unsigned long long)n options:(unsigned long long)options;
- (id)newEnumeratorFromBookmark:(id)bookmark;
- (double)timestampFromSegmentName:(id)name;
- (id)newEnumeratorFromBookmark:(id)bookmark options:(unsigned long long)options;
- (id)newEnumeratorFromBookmark:(id)bookmark options:(unsigned long long)options error:(id *)error;
- (BOOL)deleteEventAtBookmark:(id)bookmark outTombstoneBookmark:(id *)bookmark;
- (void)enumerateEventsFrom:(double)from to:(double)to options:(unsigned long long)options usingBlock:(id /* block */)block;
- (BOOL)writeEventData:(id)data dataVersion:(unsigned int)version timestamp:(double)timestamp;
- (BOOL)writeEventBytes:(const void *)bytes length:(unsigned long long)length dataVersion:(unsigned int)version timestamp:(double)timestamp;
- (BOOL)writeEventData:(id)data dataVersion:(unsigned int)version timestamp:(double)timestamp outBookmark:(id *)bookmark;
- (id)_bookmarkWithSegmentName:(id)name offset:(unsigned long long)offset datastoreVersion:(unsigned int)version;
- (BOOL)writeEventBytes:(const void *)bytes length:(unsigned long long)length dataVersion:(unsigned int)version timestamp:(double)timestamp outBookmark:(id *)bookmark;
- (void)fetchEventFromFrameStore:(id)store atOffset:(unsigned long long)offset withOptions:(unsigned long long)options callback:(id /* block */)callback;
- (void)didMarkFrameAsRemovedWithSegmentName:(id)name frame:(id)frame reason:(unsigned long long)reason outTombstoneBookmark:(id *)bookmark;
- (id)metadataPath;
- (BOOL)updateMetadata:(Class)metadata;
- (BOOL)updateMetadata:(Class)metadata pruningPolicy:(id)policy;
- (id)loadMetadata;
- (BOOL)saveMetadata:(id)metadata;
- (long long)cachingOptionsForFileHandleWithAttributes:(id)attributes;
- (void)pruneStreamToMaxStreamSizeInBytes:(unsigned long long)bytes;
- (void)pruneStreamToMaxSegmentAge:(double)age;
- (id)segmentContainingTimestamp:(double)timestamp;
- (id)segmentWithFilename:(id)filename error:(id *)error;
- (void)segmentManager:(id)manager willDeleteSegmentName:(id)name frameStore:(id)store;
@end

#endif /* BMStreamDatastoreBase_h */
