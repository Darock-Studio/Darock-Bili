//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCSession_h
#define VCSession_h
@import Foundation;

#include "VCObject.h"
#include "AVCRateController.h"
#include "AVCRateControllerDelegate-Protocol.h"
#include "RTCPReportProvider-Protocol.h"
#include "VCConnectionChangedHandler-Protocol.h"
#include "VCConnectionProtocol-Protocol.h"
#include "VCControlChannelMultiWay.h"
#include "VCMediaRecorder.h"
#include "VCMediaRecorderTransportDelegate-Protocol.h"
#include "VCNetworkFeedbackController.h"
#include "VCNetworkFeedbackControllerDelegate-Protocol.h"
#include "VCRateControlMediaController.h"
#include "VCRateControlMediaControllerDelegate-Protocol.h"
#include "VCSecurityEventHandler-Protocol.h"
#include "VCSecurityKeyManager.h"
#include "VCSessionBitrateArbiter.h"
#include "VCSessionConfiguration.h"
#include "VCSessionDelegate-Protocol.h"
#include "VCSessionDownlinkBandwidthAllocator.h"
#include "VCSessionMessaging.h"
#include "VCSessionParticipant.h"
#include "VCSessionParticipantDelegate-Protocol.h"
#include "VCSessionParticipantLocal.h"
#include "VCSessionParticipantRemote.h"
#include "VCSessionParticipantStreamDelegate-Protocol.h"
#include "VCSessionPresentationInfo.h"
#include "VCSessionStatsController.h"
#include "VCSessionStatsControllerDelegate-Protocol.h"
#include "VCSwitchManager.h"
#include "VCTransportSession.h"

@class NSArray, NSDate, NSDictionary, NSError, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, VCAudioCaptionsCoordinator;
@protocol OS_dispatch_queue, OS_dispatch_semaphore, OS_nw_activity;

@interface VCSession : VCObject<VCSessionParticipantStreamDelegate, AVCRateControllerDelegate, VCRateControlMediaControllerDelegate, RTCPReportProvider, VCSecurityEventHandler, VCSessionParticipantDelegate, VCNetworkFeedbackControllerDelegate, VCSessionStatsControllerDelegate, VCConnectionChangedHandler, VCMediaRecorderTransportDelegate> {
  /* instance variables */
  unsigned int _state;
  NSObject<OS_dispatch_queue> *_sessionQueue;
  NSObject<OS_dispatch_queue> *_notificationQueue;
  VCControlChannelMultiWay *_controlChannel;
  VCSessionConfiguration *_configuration;
  NSMutableDictionary *_remoteParticipantsMapByUUID;
  int _reportUpdateInterval;
  int _reportReportFrequency;
  VCNetworkFeedbackController *_feedbackController;
  NSMutableArray *_startingParticipants;
  NSMutableSet *_stoppingParticipants;
  NSMutableArray *_initializingParticipants;
  VCSecurityKeyManager *_securityKeyManager;
  BOOL _localSourceNeedsReset;
  struct _VCSessionOneToOneSettings { AVCRateController *rateController; VCRateControlMediaController *mediaController; struct tagHANDLE *mediaQueue; struct tagVCMediaQueue *vcMediaQueue; BOOL receivedFirstConnection; BOOL startedOneToOne; } _oneToOneSettings;
  BOOL _switchFromGFTToOneToOneEnabled;
  double _remoteMediaStallReconnectTimeout;
  double _oneToOneSwitchStartTime;
  BOOL _isOneToOneInitiator;
  BOOL _isReconnectPending;
  unsigned short _maxConnectionMTU;
  BOOL _useReducedSizeRTCP;
  AVCRateController *_uplinkRateController;
  unsigned int _uplinkTargetBitrate;
  unsigned int _downlinkTargetBitrate;
  VCRateControlMediaController *_uplinkMediaController;
  unsigned int _basebandFlushTransactionID;
  VCSessionDownlinkBandwidthAllocator *_downlinkBandwidthAllocator;
  double _sessionStartTime;
  struct { unsigned int numberOfInternalQueues; double maxWaitTimeToSchedulePackets; double queueSizeThreshold; double queueSizeThresholdForScreen; double queueSizeQuantizationStep; double queueSizeCallbackInterval; double instantPeakBitrateFactor; double packetSendPacingInterval; unsigned int packetBurstSize; unsigned int minBitrateWithoutThrottling; int schedulePolicy; int bundlePolicy; BOOL useExternalDataBuffer; char *dumpID; BOOL isDumpFileEnabled; struct opaqueRTCReporting *reportingAgent; BOOL isRTXEnabled; BOOL enableDynamicPeakBitrate; } _mediaQueueConfiguration;
  BOOL _forceDisableMediaPriority;
  NSError *_stopError;
  void * _spatialMetadata;
  BOOL _isGKVoiceChat;
  double _remoteMediaStallDisconnectTimeout;
  BOOL _shouldCreateSecondAggregator;
  VCAudioCaptionsCoordinator *_captionsCoordinator;
  BOOL _isECNEnabled;
  NSObject<OS_nw_activity> *_nwActivityActiveSession;
  VCSessionPresentationInfo *_presentationInfo;
  VCSessionBitrateArbiter *_bitrateArbiter;
  NSString *_conversationID;
  NSDate *_conversationTimeBase;
  NSDate *_conversationTimeBaseTruncated;
  BOOL _forceFixedEncryptionLabel;
  VCSwitchManager *_switchManager;
  int _currentConnectionType;
  struct __CFDictionary * _mediaTypeToSpatialMetadataEntryMap;
  unsigned long long _siriSpatialAudioSourceID;
  NSObject<OS_dispatch_semaphore> *_stopCompletedSemaphore;
  BOOL _didServerDie;
  BOOL _isServerPacketRetransmissionForVideoEnabled;
  BOOL _isUplinkRetransmissionForVideoEnabled;
  BOOL _isSSRCCollisionDetectionEnabled;
  VCMediaRecorder *_mediaRecorder;
}

@property (retain) NSMutableDictionary *optInDictionary;
@property (nonatomic) BOOL isOneToOneRemoteMediaStalling;
@property (nonatomic) struct tagVCMediaQueue * mediaQueue;
@property (nonatomic) NSObject<OS_nw_activity> *parentNWActivity;
@property (retain, nonatomic) NSObject<OS_nw_activity> *nwActivity;
@property (readonly, nonatomic) NSDictionary *capabilities;
@property (readonly, nonatomic) NSDictionary *transportMetadata;
@property (readonly, nonatomic) VCSessionParticipant *localParticipant;
@property (readonly, nonatomic) NSArray *remoteParticipants;
@property (readonly, nonatomic) VCSessionParticipantRemote *oneToOneRemoteParticipant;
@property (readonly, nonatomic) NSObject<VCSessionDelegate> *delegate;
@property (readonly, nonatomic) NSString *idsDestination;
@property (readonly, nonatomic) NSString *uuid;
@property (readonly, nonatomic) unsigned int transportSessionID;
@property (retain, nonatomic) NSObject<VCConnectionProtocol> *currentActiveConnection;
@property (readonly, nonatomic) VCTransportSession *transportSession;
@property (readonly, nonatomic) VCSessionStatsController *sessionStatsController;
@property (readonly, nonatomic) AVCRateController *downlinkRateController;
@property (retain, nonatomic) NSMutableDictionary *remoteParticipantsMapByServerID;
@property (retain, nonatomic) VCSessionMessaging *sessionMessaging;
@property (nonatomic) BOOL oneToOneModeEnabled;
@property (nonatomic) BOOL sharingEnabled;
@property (nonatomic) BOOL screenAndCameraMixingEnabled;
@property (readonly, nonatomic) int reportingClientType;
@property (readonly, nonatomic) int reportingModuleID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)mediaStateMessageStreamGroupKeysForMediaType:(unsigned int)type;
+ (id)mediaStateMessageKeyForMediaType:(unsigned int)type;
+ (unsigned int)mediaTypeForMediaStateMessageKey:(id)key;
+ (id)mediaStateMessageValueForMediaState:(unsigned int)state;
+ (unsigned int)mediaStateForMediaStateMessageValue:(id)value;
+ (void)terminateProcess:(id)process terminateSource:(id)source agent:(struct opaqueRTCReporting *)agent;
+ (int)deviceRoleForSessionMode:(long long)mode;
+ (void)addUUIDToMutableData:(id)data fromUUIDString:(id)uuidstring;
+ (void)cleanupControlChannelParticipantConfig:(struct { int x0; struct tagVCSecurityKeyHolder * x1; struct tagVCSecurityKeyHolder * x2; struct __CFData * x3; struct __CFData * x4; BOOL x5; } *)config;
+ (BOOL)isServerPacketRetransmissionEnabledForVideo;
+ (BOOL)isUplinkRetransmissionEnabledForVideo;

/* instance methods */
- (void)createSessionMessaging;
- (void)destroySessionMessaging;
- (void)startSessionMessaging;
- (void)stopSessionMessaging;
- (void)broadcastMessage:(id)message withTopic:(id)topic;
- (void)broadcastMessageDictionary:(id)dictionary withTopic:(id)topic;
- (void)broadcastSingleStateMessage:(id)message withTopic:(id)topic;
- (void)setupAudioEnabledMessages;
- (void)setupVideoEnabledMessages;
- (void)setupStreamGroupStateFetchMessage;
- (void)setupAudioPausedMessages;
- (void)setupOneToOneEnabledMessages;
- (void)setupVideoPausedMessages;
- (void)setupKeyFrameGenerationMessages;
- (void)processSymptomFromMessage:(id)message participantID:(id)id isLocalInitiated:(BOOL)initiated isLocalSideOnly:(BOOL)only;
- (void)setupSymptomEnabledMessages;
- (void)setupWRMAlertUpdateMessage;
- (void)setupMomentsMessages;
- (void)setupVideoRedundancyMessages;
- (void)setupPreferredInterfaceMessage;
- (void)setupPiPStateChangeMessage;
- (void)setupDisconnectMessage;
- (void)setupMediaQualityDegradedMessage;
- (void)setupNetworkQualityDegradedMessage;
- (void)handleNetworkCapabilityMessage:(id)message forParticipantId:(id)id;
- (void)setupNetworkCapabilityMessage;
- (void)remoteCellTechStateUpdate:(int)update maxRemoteBitrate:(unsigned int)bitrate;
- (void)setupCellTechChangeMessages;
- (void)setupLinkConstrainsChangedMessages;
- (void)setupReactionMessages;
- (void)updateStateMessage:(id)message stateState:(unsigned int)state streamGroupKey:(id)key;
- (id)stateMessageWithSupportsNestedDictionary:(BOOL)dictionary;
- (void)appendMediaTypeMixingListToMessageDictionary:(id)dictionary;
- (void)broadcastMediaStateUpdateMessage;
- (void)sendMediaStateUpdateMessageToRemoteParticipant:(id)participant;
- (BOOL)validateStreamGroup:(id)group state:(id)state;
- (void)setupMediaStateUpdateMessage;
- (void)processStreamGroupStateMessageKey:(id)key value:(id)value mediaTypeStates:(id)states;
- (void)processMediaTypeStatesWithMessage:(id)message mediaTypeStates:(id)states;
- (void)processMediaStateMessage:(id)message remoteParticipantID:(id)id;
- (void)processMediaTypeMixingList:(id)list forRemoteParticipant:(id)participant;
- (int)setupOneToOne;
- (int)setupOneToOneMediaQueue;
- (id)newNegotiatorForOneToOneWithRemoteParticipant:(id)participant;
- (BOOL)setOneToOneConfigOnRemoteParticipant:(id)participant;
- (int)setupRateControllerOneToOne;
- (void)updateOneToOneRateControllerForVideoEnabled:(BOOL)enabled screenEnabled:(BOOL)enabled;
- (void)updateOneToOneRateControllerForVideoEnabled:(BOOL)enabled;
- (void)initWithRelevantStorebagEntries;
- (void)cleanupRateControllerOneToOne;
- (BOOL)configureLocalParticipantWithOneToOneRemoteParticipant:(id)participant isInitialConfiguration:(BOOL)configuration;
- (int)setupOneToOneMediaControlInfoGeneratorsWithVersion:(unsigned char)version oneToOneConfig:(id)config videoEnabled:(BOOL)enabled;
- (id)newParticipantOneToOneConfigWithIDSParticipantID:(unsigned long long)id isLocal:(BOOL)local mediaControlInfoVersion:(unsigned char)version videoEnabled:(BOOL)enabled screenEnabled:(BOOL)enabled remoteParticipant:(id)participant;
- (void)startRateControllerOneToOne;
- (void)stopRateControllerOneToOne;
- (BOOL)isOneToOneUsingVideo;
- (BOOL)isOneToOneUsingScreen;
- (BOOL)isOneToOneRemoteParticipantUsingScreen;
- (BOOL)configureRemoteParticipantForOneToOne:(id)one;
- (void)reportExistingParticipantsAnew;
- (void)reportStartedSwitchingToOneToOne:(BOOL)one;
- (void)reportCompletedSwitchingToOneToOne:(BOOL)one;
- (void)reportSwitchingError:(BOOL)error errorEvent:(unsigned int)event;
- (void)oneToOneToMultiwaySwitchSuspend;
- (void)oneToOneToMultiwaySwitchResume;
- (void)oneToOneToMultiwaySwitchConfigure;
- (BOOL)switchFromOneToOneToMultiway;
- (void)messageExistingParticipantsPostOneToOneModeSwitch;
- (void)multiwayToOneToOneSwitchSuspend;
- (void)multiwayToOneToOneSwitchResume;
- (BOOL)multiwayToOneToOneSwitchConfigure;
- (BOOL)switchFromMultiwayToOneToOne;
- (void)cleanupOneToOneMediaQueue;
- (void)cleanupOneToOne;
- (void)cleanupOneToOneDelegates;
- (void)cleanupOneToOneVideoReceiverDelegate;
- (void)cleanUpOneToOneVideoStreamDelegate;
- (void)startReportingForOneToOneEnabled:(BOOL)enabled;
- (void)renewOneToOneMediaQueue;
- (void)setupOneToOneAdaptiveLearning;
- (BOOL)negotiateOneToOneWithRemoteParticipant:(id)participant;
- (void)configureOneToOneRateController:(id)controller isUsingCamera:(BOOL)camera isUsingScreen:(BOOL)screen;
- (unsigned int)vcrcServerBagProfileNumber;
- (BOOL)addOneToOneParticipant:(id)participant;
- (BOOL)completeTransitionToOneToOneEnabled:(BOOL)enabled;
- (void)completionHandlerOneToOneEnabled:(BOOL)enabled didSucceed:(BOOL)succeed configurationDict:(id)dict;
- (void)dispatchedSetOneToOneModeEnabled:(BOOL)enabled isLocal:(BOOL)local configurationDict:(id)dict;
- (void)applyNegotiatedOneToOneFaceTimeSettings;
- (void)setupOneToOneABTesting;
- (void)startOneToOne;
- (void)reportActiveConnectionOneToOne;
- (void)notifyDelegateActiveConnectionDidChange;
- (void)handleActiveConnectionChangeForOneToOne:(id)one;
- (void)configureOneToOneReportingOnVideoEnabled;
- (id)initWithIDSDestination:(id)idsdestination configurationDict:(id)dict negotiationData:(id)data delegate:(id)delegate processId:(int)id isGKVoiceChat:(BOOL)chat;
- (void)dealloc;
- (void)setReportingConfig:(struct { unsigned int x0; struct __CFString * x1; struct __CFDate * x2; int x3; BOOL x4; void * x5; id x6; struct __CFString * x7; struct __CFString * x8; struct __CFDictionary * x9; id /* block */ x10; id x11; BOOL x12; struct tagABCSymptomsReportingTelemetryThresholdValues { int x0; int x1; int x2; int x3; int x4; } x13; } *)config;
- (void)stopTimeoutTimer;
- (void)startDeallocTimer;
- (void)setTransportConnectionSelectionVersionWithLocalFrameWorkVersion:(id)version remoteFrameworkVersion:(id)version;
- (int)selectDataPath;
- (void)setupTransportSessionWithDestination:(id)destination;
- (void)setState:(unsigned int)state;
- (char *)sessionStateToString:(unsigned int)string;
- (id)participantsToString;
- (void)addParticipantConfigurations:(id)configurations;
- (void)removeParticipant:(id)participant;
- (void)start;
- (void)stopWithError:(id)error;
- (void)stopWithError:(id)error didRemoteCancel:(BOOL)cancel;
- (void)updateConfiguration:(id)configuration;
- (id)participantForID:(id)id;
- (void)mediaStateChangedForParticipant:(id)participant;
- (struct __CFString *)configurationSpecificReportingServiceName;
- (void)reportingSetUserInfo;
- (void)setOneToOneModeEnabled:(BOOL)enabled configurationDict:(id)dict;
- (void)setRemoteScreenControlEnabled:(BOOL)enabled;
- (void)generateKeyFrameWithReceivedMessage:(id)message forParticipant:(id)participant;
- (void)setOneToOneModeEnabledFromRemoteSignal:(BOOL)signal;
- (void)dispatchedSetSharingEnabled:(BOOL)enabled;
- (void)dispatchedSetScreenAndCameraMixingEnabled:(BOOL)enabled;
- (void)sendStreamGroupStateToParticipant:(id)participant;
- (int)getStorebagValueForIntegerKey:(id)key defaultValue:(id)value;
- (void)readAndSetABCSymptomsReportingThresholdsFromStorebags:(struct { unsigned int x0; struct __CFString * x1; struct __CFDate * x2; int x3; BOOL x4; void * x5; id x6; struct __CFString * x7; struct __CFString * x8; struct __CFDictionary * x9; id /* block */ x10; id x11; BOOL x12; struct tagABCSymptomsReportingTelemetryThresholdValues { int x0; int x1; int x2; int x3; int x4; } x13; } *)storebags;
- (void)setTransportSessionEventHandler;
- (void)applyLinkConstrains:(id)constrains;
- (void)applyRemoteLinkConstrains:(id)constrains;
- (void)notifyRemoteOfCellTechChange:(id)change remoteParticipant:(id)participant;
- (void)handleCellTechChange:(int)change connection:(id)connection;
- (void)handlePrimaryConnectionChanged:(id)changed;
- (void)handleCellularMTUChanged:(unsigned short)mtuchanged connection:(id)connection;
- (void)handleActiveConnectionChange:(id)change;
- (void)dispatchedHandleActiveConnectionChange:(id)change;
- (void)dispatchedSetRemoteScreenControlEnabled:(BOOL)enabled isLocal:(BOOL)local;
- (void)handleActiveConnectionChangeForMultiway:(id)multiway;
- (void)handlePreferredInterfaceForDuplicationUpdate:(unsigned char)update notifyPeer:(BOOL)peer enableDuplication:(BOOL)duplication isMediaUnrecoverableSignal:(BOOL)signal;
- (unsigned int)calculateExpectedTotalNetworkBitrateDownlink;
- (unsigned int)calculateExpectedTotalNetworkBitrateUplink;
- (void)setOneToOneVideoStreamBandwidthProbing:(BOOL)probing;
- (void)vcSessionParticipant:(id)participant didStart:(BOOL)start error:(id)error;
- (void)vcSessionParticipant:(id)participant didStopWithError:(id)error;
- (void)vcSessionParticipant:(id)participant audioEnabled:(BOOL)enabled didSucceed:(BOOL)succeed error:(id)error;
- (void)updateOneToOneVideoReceiverDelegate:(BOOL)delegate;
- (void)vcSessionParticipant:(id)participant videoEnabled:(BOOL)enabled didSucceed:(BOOL)succeed error:(id)error;
- (void)vcSessionParticipant:(id)participant screenEnabled:(BOOL)enabled didSucceed:(BOOL)succeed error:(id)error;
- (void)vcSessionParticipantFetchStreamGroupState:(id)state;
- (void)vcSessionParticipant:(id)participant remoteAudioEnabledDidChange:(BOOL)change;
- (void)vcSessionParticipant:(id)participant remoteVideoEnabledDidChange:(BOOL)change;
- (void)vcSessionParticipant:(id)participant remoteScreenEnabledDidChange:(BOOL)change;
- (void)vcSessionParticipant:(id)participant audioPaused:(BOOL)paused didSucceed:(BOOL)succeed error:(id)error;
- (void)vcSessionParticipant:(id)participant videoPaused:(BOOL)paused didSucceed:(BOOL)succeed error:(id)error;
- (void)vcSessionParticipant:(id)participant remoteAudioPausedDidChange:(BOOL)change;
- (void)vcSessionParticipant:(id)participant remoteVideoPausedDidChange:(BOOL)change;
- (void)vcSessionParticipant:(id)participant didChangeMediaPriority:(unsigned char)priority description:(id)description;
- (void)vcSessionParticipant:(id)participant didChangeActualNetworkBitrateForStreamGroupID:(unsigned int)id;
- (void)vcSessionParticipant:(id)participant requestKeyFrameGenerationWithStreamID:(unsigned short)id streamGroupID:(unsigned int)id firType:(int)type;
- (void)vcSessionParticipant:(id)participant didSwitchFromStreamID:(unsigned short)id toStreamID:(unsigned short)id;
- (void)vcSessionParticipant:(id)participant didRequestVideoRedundancy:(BOOL)redundancy;
- (void)vcSessionParticipantDidChangeSendingStreams:(id)streams;
- (void)vcSessionParticipantDidChangeReceivingStreams:(id)streams;
- (void)vcSessionParticipantDidMediaDecryptionTimeOut:(id)out;
- (void)vcSessionParticipantDidMediaDecryptionTimeOutForMKMRecovery:(id)mkmrecovery;
- (void)vcSessionParticipantDidRemoteMediaStallTimeout:(id)timeout duration:(double)duration;
- (void)vcSessionParticipant:(id)participant oneToOneModeDidChange:(BOOL)change;
- (void)vcSessionParticipant:(id)participant didDetectError:(id)error;
- (void)vcSessionParticipant:(id)participant mediaStateDidChange:(unsigned int)change forMediaType:(unsigned int)type didSucceed:(BOOL)succeed error:(id)error;
- (void)vcSessionParticipant:(id)participant remoteMediaStateDidChange:(unsigned int)change forMediaType:(unsigned int)type;
- (void)vcSessionParticipant:(id)participant mediaMixingDidChangeForMediaType:(unsigned int)type mixingMediaType:(unsigned int)type;
- (void)vcSessionParticipant:(id)participant reactionDidStart:(id)start;
- (void)vcSessionParticipantDidStopReacting:(id)reacting;
- (void)vcSessionParticipantDidMediaReceiveFlushRequestWithPayloads:(id)payloads;
- (void)serverDidDie;
- (void)didReceivedSessionStatsAtTime:(double)time;
- (void)updateNetworkFeedbackControllerReport:(struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)report;
- (void)rateController:(id)controller targetBitrateDidChange:(unsigned int)change rateChangeCounter:(unsigned int)counter;
- (int)learntBitrateForSegment:(id)segment defaultValue:(int)value;
- (void)rateController:(id)controller isECNEnabled:(BOOL)ecnenabled;
- (void)mediaController:(void *)controller mediaSuggestionDidChange:(struct VCRateControlMediaSuggestion { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; })change;
- (int)flushBasebandWithPayloads:(id)payloads;
- (void)updatePresentationInfo:(id)info;
- (void)applySpatialMetadata;
- (BOOL)isTLEEnabledOnPrimaryConnection;
- (void)sendNetworkCapabilitiesMessageToParticipant:(id)participant;
- (void)updateParticipantWindowState;
- (void)updateParticipantConfigurations:(id)configurations;
- (void)distributeBitrateAndOptInToStreamIDsWithSeamlessTransition:(BOOL)transition;
- (void)reportingSessionDownlinkOptInEvent:(id)event selectedMediaEntriesForParticipants:(id)participants;
- (void)reportingSessionStopEventWithError:(id)error;
- (void)setSessionInfoSynchronizerCallbacks;
- (void)setSessionInfoSynchronizerErrorResponseCallback;
- (void)setSessionInfoSynchronizerPeerSubscribedStreamsCallback;
- (id)vcrcServerBagWithOperatingMode:(int)mode;
- (void)setupRateControllersMultiway;
- (void)didRemoveSpatialMetadataEntry;
- (int)setupSpatialAudio;
- (int)reserveAudioChannelForMediaType:(unsigned int)type spatialAudioSourceID:(unsigned long long)id;
- (void)cleanupSpatialAudio;
- (void)updateMultiwayRateControllerWithActiveConnection:(id)connection isScreenEnabled:(BOOL)enabled isLocal:(BOOL)local;
- (void)startRateControllersMultiwayFromOneToOne:(BOOL)one;
- (void)setupUplinkBitrateCaps;
- (void)createMediaQueue;
- (void)handleMediaQueueSizeExceedThresholdWithQueueSize:(double)size mediaQueueStreamId:(unsigned int)id type:(int)type;
- (void)setMediaQueuePeakBitrateWithTargetBitrate:(unsigned int)bitrate;
- (int)maxRemoteParticipants30fps;
- (void)updateLocalVideoCaptureFrameRate;
- (void)updateLocalStreamConfiguration;
- (void)optInStreamWithIDSStreamIDs:(id)ids;
- (void)optOutStreamWithIDSStreamIDs:(id)ids;
- (BOOL)detectSSRCCollision:(id)ssrccollision resetNeeded:(BOOL *)needed;
- (BOOL)detectSSRCCollisionWithRemoteMediaStream:(id)stream remoteBlobCreationTime:(union tagNTP { unsigned long long x0; struct { unsigned int x0; unsigned int x1; } x1; })time resetNeeded:(BOOL *)needed;
- (void)handleEncryptionInfoEvent:(id)event;
- (void)handleMembershipChangeInfoEvent:(id)event;
- (void)setDelegatesForRemoteParticipant:(id)participant;
- (void)messageMediaInitialStateToParticipant:(id)participant;
- (void)broadcastInitialMediaState;
- (id)newEncryptionLabelWithLocalUUID:(id)uuid remoteUUID:(id)uuid;
- (BOOL)composeControlChannelParticipantConfig:(struct { int x0; struct tagVCSecurityKeyHolder * x1; struct tagVCSecurityKeyHolder * x2; struct __CFData * x3; struct __CFData * x4; BOOL x5; } *)config withRemoteParticipant:(id)participant;
- (BOOL)isECNCapableWithRemoteParticipant:(id)participant;
- (BOOL)registerRemoteParticipantToSession:(id)session;
- (void)removeDelegatesForRemoteParticipant:(id)participant;
- (void)unregisterRemoteParticipantFromSession:(id)session;
- (void)sendSymptomsToRemoteParticipants:(id)participants symptom:(id)symptom groupID:(id)id;
- (void)setReportingClientExperimentSettings;
- (void)cleanupVCRC;
- (void)cleanupNwActivity;
- (void)setupMultiwayABTesting;
- (BOOL)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned char x8; } *)list reportCount:(char *)count;
- (BOOL)handleEncryptionInfoChange:(id)change;
- (void)resetDecryptionTimeout;
- (void)didEncryptionKeyRollTimeout;
- (id)computeConversationTimeBaseTruncated;
- (struct __CFDictionary *)getClientSpecificUserInfo;
- (void)reportingSessionParticipantEvent:(unsigned short)event withParticipant:(id)participant withStreamGroupID:(unsigned int)id withStreamID:(unsigned short)id;
- (void)reportingSessionParticipantEvent:(unsigned short)event withParticipant:(id)participant;
- (void)reportingSessionParticipantEvent:(unsigned short)event keyChangeReason:(id)reason newMKI:(id)mki;
- (void)reportingSessionParticipantEvent:(unsigned short)event withParticipant:(id)participant keyChangeReason:(id)reason newMKI:(id)mki;
- (void)reportingSessionParticipantEvent:(unsigned short)event withParticipant:(id)participant keyChangeReason:(id)reason newMKI:(id)mki withStreamGroupID:(unsigned int)id withStreamID:(unsigned short)id;
- (void)reportingMomentsToGreenTeaWithRequest:(id)request;
- (void)collectSessionEventKeyFieldsAndSubtype:(struct __CFDictionary *)subtype eventType:(unsigned short)type withParticipant:(id)participant keyChangeReason:(id)reason newMKI:(id)mki withStreamGroupID:(unsigned int)id withStreamID:(unsigned short)id collectSubtype:(unsigned short *)subtype;
- (void)reportingSessionRemoteParticipantEvent:(unsigned short)event withParticipant:(id)participant value:(id)value;
- (void)reportLocalRateControlExperimentConfiguration;
- (void)dispatchedAddParticipantWithConfig:(id)config;
- (BOOL)configureRemoteParticipant:(id)participant withConfig:(id)config;
- (void)dispatchedAddParticipantConfigurations:(id)configurations;
- (void)dispatchedRemoveParticipant:(id)participant;
- (void)dispatchedStart;
- (void)stopMediaQueueOneToOne;
- (void)dispatchedStopWithError:(id)error;
- (void)dispatchedStopWithError:(id)error didRemoteCancel:(BOOL)cancel;
- (void)dispatchedTransportStop;
- (void)tearDown;
- (void)dispatchedUpdateConfiguration:(id)configuration;
- (void)stopAllParticipants;
- (void)dispatchedParticipant:(id)participant didStart:(BOOL)start error:(id)error;
- (void)setupOneToOneVideoReceiverDelegate;
- (void)setupOneToOneVideoStreamDelegate;
- (void)processDidStop;
- (void)dispatchedParticipant:(id)participant didStopWithError:(id)error;
- (id)newNetworkBitrateString:(const struct { unsigned int x0; unsigned int x1[5] unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)string;
- (void)generateReportDictionary:(struct __CFDictionary *)dictionary;
- (void)registerReportingTask;
- (void)unregisterReportingTask;
- (void)recommendedSettingsChanged:(id)changed;
- (void)reportingIntervalChanged:(double)changed;
- (void)preWarmStateChanged:(BOOL)changed;
- (void)mediaQualityDegraded:(BOOL)degraded;
- (void)setIsUplinkRetransmissionEnabled:(BOOL)enabled;
- (void)didLocalNetworkConditionChange:(BOOL)change isLocalNetworkQualityDegraded:(BOOL)degraded isRemoteNetworkQualityDegraded:(BOOL)degraded;
- (void)mediaRecorder:(id)recorder shouldProcessRequest:(id)request recipientID:(id)id;
- (void)didReceiveMomentsRequest:(id)request;
- (void)updateMediaRecorderCapabillities:(unsigned int)capabillities imageType:(int)type videoCodec:(int)codec;
- (void)additionalFlushCountToOneToOneRateController:(unsigned int)controller;
@end

#endif /* VCSession_h */
