//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCVideoTransmitterDefault_h
#define VCVideoTransmitterDefault_h
@import Foundation;

#include "VCVideoTransmitterBase.h"
#include "VCVideoHardwareDumpCollector.h"
#include "VCVideoReceiverFeedbackDelegate-Protocol.h"

@class NSString;

@interface VCVideoTransmitterDefault : VCVideoTransmitterBase<VCVideoReceiverFeedbackDelegate> {
  /* instance variables */
  unsigned int _audioTimestampRate;
  int _transmitterMode;
  BOOL _canLocalResizePIP;
  BOOL _canRemoteResizePIP;
  struct CGSize { double width; double height; } _remoteScreenPortraitAspectRatio;
  struct CGSize { double width; double height; } _remoteScreenLandscapeAspectRatio;
  struct CGSize { double width; double height; } _remoteExpectedPortraitAspectRatio;
  struct CGSize { double width; double height; } _remoteExpectedLandscapeAspectRatio;
  double _lastSentVideoHostTime;
  VCVideoHardwareDumpCollector *_verificationContext;
}

@property (readonly) struct tagHANDLE { int x0; } * videoTransmitterHandle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)setupBandwidthEstimationOptions:(struct tagBWEOPTION { int x0; int x1; int x2; int x3; } *)options;
+ (void)setupBandwidthEstimationOptions:(struct tagBWEOPTION { int x0; int x1; int x2; int x3; } *)options featureString:(id)string;

/* instance methods */
- (id)initWithConfig:(id)config;
- (void)setUpAspectRatios:(BOOL)ratios;
- (void)dealloc;
- (void)setUpAspectRatiosFromFeatureListString:(const char *)string;
- (void)startVideo;
- (void)stopVideo;
- (void)generateKeyFrameWithFIRType:(int)firtype;
- (unsigned int)setTemporaryMaximumBitrate:(unsigned int)bitrate;
- (void)setTargetBitrate:(unsigned int)bitrate;
- (void)setTemporalBitrateArray:(id)array;
- (void)setHighestActiveQualityIndex:(unsigned int)index;
- (void)setKeyFrameOnlyStreamID:(unsigned short)id;
- (void)setStreamIDs:(unsigned short *)ids numOfStreamIDs:(unsigned char)ids repairedStreamIDs:(unsigned short *)ids numOfRepairedStreamIDs:(unsigned char)ids;
- (void)setFECRatio:(double)fecratio;
- (void)setFECRedundancyVector:(const struct { unsigned short x0; struct { unsigned char x10; unsigned char x1; } x[32] } *)vector;
- (void)setIsServerBasedBandwidthProbingEnabled:(BOOL)enabled;
- (void)setIsEndToEndBasedBandwidthProbingEnabled:(BOOL)enabled;
- (void)collectChannelMetrics:(struct { unsigned int x0; unsigned int x1[5] unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)metrics interval:(float)interval;
- (void)setMediaSuggestion:(struct VCRateControlMediaSuggestion { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; } *)suggestion;
- (BOOL)setEncodingMode:(int)mode;
- (void)handleThermalLevelChange:(int)change;
- (void)updateWindowState:(int)state isLocal:(BOOL)local windowRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)handleActiveConnectionChangeDefault:(id)default;
- (void)handleActiveConnectionChangeMultiway:(id)multiway;
- (void)handleActiveConnectionChange:(id)change;
- (BOOL)isRtxEnabled;
- (void)setRtxEnabled:(BOOL)enabled;
@end

#endif /* VCVideoTransmitterDefault_h */
