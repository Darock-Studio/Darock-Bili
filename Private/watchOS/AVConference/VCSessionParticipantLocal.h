//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCSessionParticipantLocal_h
#define VCSessionParticipantLocal_h
@import Foundation;

#include "VCSessionParticipant.h"
#include "VCAudioPowerSpectrumSource.h"
#include "VCIDSStreamIDGenerator-Protocol.h"
#include "VCSessionUplinkBandwidthAllocator-Protocol.h"
#include "VCSessionUplinkBandwidthAllocatorClient-Protocol.h"
#include "VCSystemAudioCaptureSession.h"
#include "VCVideoCaptureClient-Protocol.h"
#include "VCVideoRule.h"
#include "VCVideoSink-Protocol.h"

@class NSArray, NSMutableDictionary, NSMutableSet, NSSet, NSString;

@interface VCSessionParticipantLocal : VCSessionParticipant<VCVideoSink, VCVideoCaptureClient, VCIDSStreamIDGenerator, VCSessionUplinkBandwidthAllocatorClient> {
  /* instance variables */
  NSArray *_uplinkBandwidthAllocators;
  NSObject<VCSessionUplinkBandwidthAllocator> *_uplinkBandwidthAllocator;
  unsigned int _currentVCMediaQueueSize;
  unsigned int _currentUplinkTargetBitrate;
  unsigned int _currentRateChangeCounter;
  unsigned int _lastSentAudioSampleTime;
  double _lastSentAudioHostTime;
  struct _opaque_pthread_rwlock_t { long long __sig; char x[192] __opaque; } _audioTimestampRWLock;
  unsigned char _lastAudioPriority;
  unsigned char _lastVideoPriority;
  atomic unsigned char _videoPriority;
  BOOL _videoPriorityEnabled;
  BOOL _shouldResize;
  BOOL _enableRedundancy;
  BOOL _isVCMediaQueueScheduledForServerBasedStreams;
  NSMutableSet *_localPublishedStreams;
  float _averageSilenceAudioPower;
  unsigned char _audioPriorityRampUp;
  unsigned char _audioPriorityDecaySlow;
  unsigned char _audioPriorityDecayFast;
  float _audioVoiceDetectionSensitivity;
  float _audioSilencePowerAverageMultiplier;
  unsigned char _forcedAudioPriorityValue;
  double _forcedAudioPriorityLastUpdateTime;
  BOOL _forcedAudioPriorityEnabled;
  VCVideoRule *_videoRule;
  BOOL _speechDetected;
  struct opaqueVCVoiceDetector * _voiceDetector;
  double _fecRatio;
  VCAudioPowerSpectrumSource *_powerSpectrumSource;
  int _maxSupportedMultiwayCameraFrameRate;
  long long _maxSupportedMultiwayVideoResolution;
  unsigned char _remotePresentationState;
  BOOL _isRemotePresentationLarge;
  int _videoCaptureSource;
  BOOL _forceMinBitrate;
  unsigned int _minBitrate;
  NSMutableDictionary *_streamInputIDToCaptureSourceIDMap;
  VCSystemAudioCaptureSession *_systemAudioCaptureSession;
  BOOL _isMixingSystemAudio;
  double _spatialAudioDisabledLastUpdateTime;
  NSMutableSet *_generatedStreamIDs;
  NSMutableSet *_generatedSSRCs;
  double _initTime;
  BOOL _isVoiceProcessingEnabled;
  double _lastVideoEnabledChangedTime;
}

@property (nonatomic) BOOL encryptionInfoReceived;
@property (readonly, nonatomic) unsigned short connectionStatsStreamID;
@property (nonatomic) unsigned int uplinkBitrateCapWifi;
@property (nonatomic) unsigned int uplinkBitrateCapCell;
@property (nonatomic) BOOL enableVADFiltering;
@property (copy, nonatomic) NSArray *peerSubscribedStreams;
@property (readonly, nonatomic) NSSet *audioPayloadTypes;
@property (readonly, nonatomic) NSSet *videoPayloadTypes;
@property (readonly, nonatomic) unsigned int currentUplinkTotalBitrate;
@property (nonatomic) int currentVideoCaptureFrameRate;
@property (readonly, nonatomic) struct __CFString * activeStreamKeys;
@property (readonly, nonatomic) struct _VCSessionParticipantLocalOneToOneSettings { id x0; id x1; id x2; id x3; unsigned int x4; unsigned int x5; BOOL x6; } oneToOneSettings;
@property (nonatomic) BOOL isRemoteOnPeace;
@property (copy, nonatomic) NSArray *remoteParticipants;
@property (nonatomic) BOOL isRetransmissionEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)negotiatorCipherSuite:(unsigned int *)suite fromMediaStreamConfig:(id)config;
+ (BOOL)updateBandwidthAllocator:(id)allocator activeStream:(id)stream peerSubscribedStreams:(id)streams streamGroup:(id)group;
+ (BOOL)updateUplinkStreamsForPeerSubscribedStreams:(id)streams streamGroup:(id)group uplinkBandwidthAllocator:(id)allocator;

/* instance methods */
- (id)initWithConfig:(id)config delegate:(id)delegate;
- (void)dealloc;
- (void)logDashboardLinks;
- (id)newUplinkBandwidthAllocators;
- (id)processCachedParticipantData:(id)data;
- (void)updateAudioSpectrumState;
- (unsigned int)mediaStateForMediaType:(unsigned int)type;
- (BOOL)setupAudioStreamGroupWithStreamConfigs:(id)configs negotiatorConfig:(id)config streamGroupConfiguration:(id)configuration;
- (BOOL)setupCameraStreamGroupWithStreamConfigs:(id)configs negotiatorConfig:(id)config streamGroupConfiguration:(id)configuration;
- (void)setupSystemAudioCapture;
- (int)captureSourceIDFromStreamGroupID:(unsigned int)id;
- (int)captureSourceIDFromStreamGroupConfig:(id)config;
- (BOOL)setupStreamGroupWithStreamGroupConfig:(id)config negotiatorConfig:(id)config;
- (BOOL)setupStreamGroupMediaSync;
- (BOOL)setupStreamGroupsWithConfig:(id)config negotiatorConfig:(id)config;
- (BOOL)setupStreamInputsWithConfig:(id)config;
- (void)cleanupStreamInputs;
- (void)start;
- (void)dispatchedStartOneToOneStreams;
- (void)stop;
- (long long)maxCaptureResolution;
- (void)dispatchedSetAudioEnabled:(BOOL)enabled;
- (int)maxCaptureCameraFrameRate;
- (BOOL)reconfigureOneToOneAudioStream:(id)stream error:(id *)error;
- (BOOL)reconfigureAudioIOForVideoEnabled:(BOOL)enabled error:(id *)error;
- (id)startMicStreamGroups;
- (id)startCameraStreamGroups;
- (id)applyVideoEnabledSetting:(BOOL)setting;
- (void)applyScreenEnabledSetting:(BOOL)setting;
- (void)updateVideoPaused:(BOOL)paused;
- (void)updateActiveVoiceOnly;
- (struct CGSize { double x0; double x1; })captureEncodingSize;
- (void)registerForVideoCapture:(int)capture;
- (void)deregisterForVideoCapture;
- (void)resetOneToOneSettings;
- (void)suspendStreamsOnOneToOneModeSwitch;
- (void)resumeStreamsOnOneToOneModeSwitch;
- (void)startMultiwayStreams;
- (void)setOneToOneModeEnabled:(BOOL)enabled;
- (BOOL)isOneToOneModeEnabled;
- (void)stopVideoCaptureClient;
- (BOOL)setState:(unsigned int)state;
- (void)startSystemAudioCapture;
- (void)stopSystemAudioCapture;
- (void)stopAudioIOCompletion;
- (void)collectVideoChannelMetrics:(struct { unsigned int x0; unsigned int x1[5] unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)metrics;
- (void)collectAudioChannelMetrics:(struct { unsigned int x0; unsigned int x1[5] unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)metrics;
- (unsigned int)calculateUplinkTotalBitrateForMediaStreams:(id)streams;
- (void)updateMediaSettingsWithConfig:(id)config;
- (struct tagVCAudioIOConfiguration { unsigned int x0; unsigned int x1; int x2; int x3; unsigned int x4; unsigned char x5; BOOL x6; id x7; int x8; unsigned int x9; unsigned int x10; BOOL x11; unsigned long long x12; unsigned int x13; long long x14; long long x15; unsigned long long x16; BOOL x17; BOOL x18; struct tagVCAudioIODelegateContext { id x0; undefined * x1; void * x2; id x3; long long x4; } x19; struct tagVCAudioIODelegateContext { id x0; undefined * x1; void * x2; id x3; long long x4; } x20; })audioIOConfigWithDeviceRole:(int)role operatingMode:(int)mode;
- (BOOL)configureAudioIOWithDeviceRole:(int)role operatingMode:(int)mode;
- (void)setMediaSuggestion:(struct VCRateControlMediaSuggestion { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; } *)suggestion;
- (void)setCellularUniqueTag:(unsigned int)tag;
- (BOOL)isActiveMediaType:(unsigned int)type;
- (BOOL)nativeParticipantSupportsStreamGroupID:(unsigned int)id;
- (BOOL)webParticipantSupportsStreamGroupID:(unsigned int)id;
- (BOOL)wolfParticipantSupportsStreamGroupID:(unsigned int)id;
- (BOOL)remoteParticipantsSupportStreamGroupID:(unsigned int)id;
- (BOOL)isOneToOneStreamGroup:(unsigned int)group;
- (BOOL)isStreamGroupActive:(id)active;
- (BOOL)applyCachedMediaStreams:(id)streams toMultiwayConfig:(id)config;
- (BOOL)applyCachedStreamGroupMediaStreams:(id)streams toMultiwayConfig:(id)config;
- (BOOL)setupVideoStreamsWithStreamConfigurations:(id)configurations mediaNegotiatorConfig:(id)config streamGroupConfiguration:(id)configuration;
- (BOOL)applyCachedMediaStreamsWithStreamConfigurations:(id)configurations mediaNegotiatorConfig:(id)config;
- (BOOL)setupAudioStreamsWithStreamConfigurations:(id)configurations mediaNegotiatorConfig:(id)config streamGroupConfiguration:(id)configuration;
- (id)newVideoSendGroupConfigWithStreamGroupID:(unsigned int)id streamGroupConfiguration:(id)configuration;
- (id)newAudioSendGroupConfigWithStreamGroupID:(unsigned int)id streamGroupConfiguration:(id)configuration;
- (struct opaqueCMFormatDescription *)getAudioFormatDescriptionForStreamGroupID:(unsigned int)id;
- (struct opaqueCMFormatDescription *)getCaptionsFormatDescription;
- (BOOL)setupVideoStreamsWithStreamConfiguration:(id)configuration streamGroupConfiguration:(id)configuration;
- (BOOL)setupVideoMediaStreamsWithStreamGroupConfiguration:(id)configuration streamGroupConfig:(id)config streamGroupID:(unsigned int)id mediaType:(unsigned int)type;
- (BOOL)setupAudioStreamsWithStreamConfiguration:(id)configuration streamGroupConfiguration:(id)configuration;
- (id)newAudioStreamSendGroupWithConfig:(id)config streamGroupID:(unsigned int)id;
- (id)newStreamInfoWithVideoStreamWithConfiguration:(id)configuration streamGroupID:(unsigned int)id;
- (void)updateMultiwayBandwithAllocationTable:(id)table mediaType:(unsigned int)type streamGroupID:(unsigned int)id encoderGroupID:(unsigned int)id minNetworkBitrate:(unsigned int)bitrate maxNetworkBitrate:(unsigned int)bitrate;
- (id)newStreamInfoWithAudioStreamWithConfiguration:(id)configuration streamToken:(long long)token isMultiway:(BOOL)multiway streamGroupID:(unsigned int)id;
- (BOOL)completeStreamSetup:(id)setup;
- (id)multiwayAudioStreamNegotiatorConfigForStreamConfig:(id)config;
- (id)multiwayVideoStreamNegotiatorConfigForStreamConfig:(id)config isSubstream:(BOOL)substream;
- (id)newMediaNegotiatorAudioConfigurationForMediaType:(unsigned int)type;
- (void)streamGroupNegotiationVideoConfigForStreamGroup:(id)group streamConfig:(id)config mediaConfig:(id)config;
- (id)newStreamGroupNegotiationConfigForStreamGroup:(id)group;
- (void)initializeMultiwayAudioStreamGroup:(id)group forLocalConfig:(id)config;
- (void)initializeMultiwayVideoStreamGroup:(id)group forLocalConfig:(id)config;
- (BOOL)initializeStreamGroupsForLocalConfig:(id)config;
- (BOOL)initializeOneToOneStreamGroup:(id)group forLocalConfig:(id)config;
- (id)featureListString:(id)string removingPayload:(int)payload andPayload:(int)payload;
- (BOOL)initializeMediaNegotiator;
- (void)updatePayloadTypesWithVideoConfigs:(id)configs;
- (void)updatePayloadTypesWithAudioConfigs:(id)configs;
- (unsigned int)oneToOneVideoStreamRedundancyPercentage;
- (unsigned int)oneToOneVideoStreamRedundancyMode;
- (int)negotiateOneToOne:(id)one;
- (void)logRemoteParticipantInfo:(id)info;
- (void)overrideVideoStreamConfigWithDefaults:(id)defaults streamGroupID:(unsigned int)id;
- (BOOL)setupOneToOneVideoStreamWithConfig:(id)config streamGroupID:(unsigned int)id;
- (void)setupOneToOneAudioStreamWithConfig:(id)config streamGroupID:(unsigned int)id;
- (BOOL)configureMultiwayStreamGroups;
- (BOOL)configureWithOneToOneParticipantConfig:(id)config shouldConfigureGFTStreams:(BOOL)gftstreams;
- (BOOL)configureOneToOneVideoStreamsWithDeviceRole:(int)role;
- (BOOL)configureOneToOneAudioStreamsWithDeviceRole:(int)role;
- (void)updateOneToOneBandwidthAllocationTable:(id)table mediaType:(unsigned char)type streamGroupID:(unsigned int)id;
- (void)setupOneToOneEncryptionInfoWithConfiguration:(id)configuration;
- (id)newAudioStreamOneToOneConfigurationWithStreamGroupId:(unsigned int)id;
- (id)newVideoStreamOneToOneConfigurationWithStreamGroupId:(unsigned int)id;
- (id)supportedAudioRules;
- (void)updateSupportedAudioRules:(id)rules;
- (BOOL)containsStreamWithSSRC:(unsigned int)ssrc;
- (BOOL)isRemotePresentationLarge:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })large;
- (void)updateWindowState:(int)state isLocal:(BOOL)local windowRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)audioRuleCollectionWithAudioStreamConfig:(id)config;
- (id)setupStreamRTP:(id)rtp;
- (void)addCallInfoBlobToParticipantInfo:(id)info;
- (BOOL)createParticipantInfo;
- (void)createOpaqueData;
- (void)setMuted:(BOOL)muted;
- (BOOL)isHighPriorityAudioWithPower:(float)power voiceActive:(BOOL)active;
- (void)startVoiceActivityDetection;
- (void)stopVoiceActivityDetection;
- (void)updateAudioPriorityWithSampleBuffer:(struct opaqueVCAudioBufferList *)buffer;
- (id)getAudioDumpName;
- (id)newStreamInfoWithVideoStreamWithConfiguration:(id)configuration idsDestination:(id)destination groupID:(unsigned int)id;
- (BOOL)shouldEnableUplinkRetransmissionForStreamGroupID:(unsigned int)id;
- (id)newVideoStreamWithConfig:(id)config groupID:(unsigned int)id;
- (id)newStreamInfoWithAudioStreamWithConfiguration:(id)configuration idsDestination:(id)destination isMultiway:(BOOL)multiway streamGroupID:(unsigned int)id;
- (void)setupEncodingModeWithVideoStreamConfig:(id)config;
- (void)generateKeyFrameWithStreamID:(id)id streamGroupID:(unsigned int)id firType:(int)type;
- (BOOL)checkSubscribedStreamsConsistency:(id)consistency;
- (void)updateRedundancyEnabledForPeerSubscribedStreams:(id)streams;
- (void)updatePeerSubscribedStreams:(id)streams streamGroup:(id)group;
- (BOOL)enableRedundancy:(BOOL)redundancy;
- (void)setRetransmissionEnabled:(BOOL)enabled;
- (void)redundancyController:(id)controller redundancyPercentageDidChange:(unsigned int)change;
- (void)redundancyController:(id)controller redundancyIntervalDidChange:(double)change;
- (void)redundancyController:(id)controller redundancyVectorDidChange:(struct { unsigned short x0; struct { unsigned char x10; unsigned char x1; } x[32] })change;
- (void)updateUplinkTargetBitrate:(unsigned int)bitrate rateChangeCounter:(unsigned int)counter;
- (void)updateUplinkTargetBitrateForStreamGroups;
- (void)dispatchedUpdateUplinkTargetBitrate:(unsigned int)bitrate rateChangeCounter:(unsigned int)counter;
- (void)updateTargetBitrateOneToOne:(unsigned int)one rateChangeCounter:(unsigned int)counter;
- (void)updateVCMediaQueueSize:(unsigned int)size;
- (void)dispatchedUpdateVCMediaQueueSize:(unsigned int)size;
- (unsigned short)generateIDSStreamID;
- (unsigned int)generateSSRC;
- (struct tagVCNetworkStreamIdentifiers { unsigned int x0; unsigned short x1; unsigned short x2; })generateSSRC:(BOOL)ssrc streamID:(BOOL)id repairStreamID:(BOOL)id;
- (BOOL)onVideoFrame:(struct opaqueCMSampleBuffer *)frame frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time attribute:(struct { BOOL x0; BOOL x1; int x2; BOOL x3; BOOL x4; int x5; unsigned char x6; })attribute;
- (void)sourceFrameRateDidChange:(unsigned int)change;
- (id /* block */)copyOnVideoFrameBlock;
- (void)avConferencePreviewError:(id)error;
- (id)clientCaptureRule;
- (void)thermalLevelDidChange:(int)change;
- (void)cameraAvailabilityDidChange:(BOOL)change;
- (void)captureSourcePositionDidChange:(BOOL)change;
- (void)captureSourceCenterStageEnabledDidChange:(BOOL)change;
- (void)captureSourcePortraitBlurEnabledDidChange:(BOOL)change;
- (void)frameRateIsBeingThrottled:(int)throttled thermalLevelDidChange:(BOOL)change powerLevelDidChange:(BOOL)change;
- (void)captureSource1080pAvailabilityDidChange:(BOOL)change;
- (void)reactionDidStart:(id)start;
- (void)didStopReacting;
- (void)reportVideoEnabledStatsWithVideoEnabled:(BOOL)enabled;
- (void)dispatchedHandleActiveConnectionChangeForStreamGroups:(id)groups;
- (void)updateMediaStreamsForStreamGroup:(id)group uplinkBitrateCap:(unsigned int)cap rateChangeCounter:(unsigned int)counter;
- (void)serverDidDie;
- (void)handleActiveConnectionChange:(id)change;
- (void)didReceiveReportPacket:(struct tagRTCPPACKET { struct tagRTCPCOMMON { unsigned int x0 :5; unsigned int x1 :1; unsigned int x2 :2; unsigned int x3 :8; unsigned short x4; } x0; union { struct tagSR_RTCP { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; IIII} x6[1{tagRTCP_RRB=Ib8b24] } x0; struct tagRR_RTCP { unsigned int x0; IIII} x1[1{tagRTCP_RRB=Ib8b24] } x1; struct tagSDES_RTCP { unsigned int x0; struct tagRTCPSDES { unsigned char x0; unsigned char x1; char x2[258] } x1; } x2; struct tagBYE_RTCP { unsigned int x0; } x3; struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x4; struct tagRTCP_APP_LTRP { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x5; struct tagFIR_RTCP { unsigned int x0; unsigned short x1[10] } x6; struct tagNACK_RTCP { unsigned int x0; unsigned short x1; unsigned short x2; } x7; struct tagRTCP_PSFB_PLI { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; } x8; struct tagRTCP_PSFB_SLI { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x9; struct tagRTCP_PSFB_FIR { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned char x2; unsigned char x3[3] } x10; struct tagRTCP_PSFB_TST { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x11; struct tagRTCP_PSFB_TST { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x12; struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x13; struct tagRTCP_PSFB_LOSSFB { struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x0; struct tagRTCP_CUSTOM_PSFB_LOSS_FB_INFO { unsigned int x0; unsigned short x1; unsigned char x2; unsigned char x3; } x1; } x14; struct tagRTCP_PSFB_LTRACK { struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x15; struct tagRTCP_RTPFB_GNACK { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; struct tagRTCP_RTPFB_INDIVIDUAL_GNACK { unsigned short x10; unsigned short x1; } x[256] } x16; struct tagRTCP_RTPFB_TMMB { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x17; struct tagRTCP_RTPFB_TMMB { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x18; struct tagVCRTCPXR { unsigned int x0; unsigned int x1[0] } x19; struct tagRTCP_CUSTOM_SR { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; struct tagRTCP_CUSTOM_SENDER_INFO { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4 :4; unsigned int x5 :4; } x2; SSCC} x3[1{tagRTCP_CUSTOM_RECEPTION_REPORT=Ib4b12] } x20; struct tagRTCP_CUSTOM_RR { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; struct tagRTCP_CUSTOM_RECEIVER_INFO { unsigned int x0 :4; unsigned int x1 :4; } x2; SSCC} x3[1{tagRTCP_CUSTOM_RECEPTION_REPORT=Ib4b12] } x21; struct tagRTCP_CUSTOM_RCTL { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; struct tagRTCP_CUSTOM_RATE_CONTROL_INFO { unsigned char x0[20] } x1; } x22; } x1; } *)packet arrivalNTPTime:(union tagNTP { unsigned long long x0; struct { unsigned int x0; unsigned int x1; } x1; })ntptime;
- (void)didReceiveCustomReportPacket:(struct tagRTCPPACKET { struct tagRTCPCOMMON { unsigned int x0 :5; unsigned int x1 :1; unsigned int x2 :2; unsigned int x3 :8; unsigned short x4; } x0; union { struct tagSR_RTCP { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; IIII} x6[1{tagRTCP_RRB=Ib8b24] } x0; struct tagRR_RTCP { unsigned int x0; IIII} x1[1{tagRTCP_RRB=Ib8b24] } x1; struct tagSDES_RTCP { unsigned int x0; struct tagRTCPSDES { unsigned char x0; unsigned char x1; char x2[258] } x1; } x2; struct tagBYE_RTCP { unsigned int x0; } x3; struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x4; struct tagRTCP_APP_LTRP { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x5; struct tagFIR_RTCP { unsigned int x0; unsigned short x1[10] } x6; struct tagNACK_RTCP { unsigned int x0; unsigned short x1; unsigned short x2; } x7; struct tagRTCP_PSFB_PLI { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; } x8; struct tagRTCP_PSFB_SLI { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x9; struct tagRTCP_PSFB_FIR { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned char x2; unsigned char x3[3] } x10; struct tagRTCP_PSFB_TST { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x11; struct tagRTCP_PSFB_TST { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x12; struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x13; struct tagRTCP_PSFB_LOSSFB { struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x0; struct tagRTCP_CUSTOM_PSFB_LOSS_FB_INFO { unsigned int x0; unsigned short x1; unsigned char x2; unsigned char x3; } x1; } x14; struct tagRTCP_PSFB_LTRACK { struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x15; struct tagRTCP_RTPFB_GNACK { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; struct tagRTCP_RTPFB_INDIVIDUAL_GNACK { unsigned short x10; unsigned short x1; } x[256] } x16; struct tagRTCP_RTPFB_TMMB { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x17; struct tagRTCP_RTPFB_TMMB { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x18; struct tagVCRTCPXR { unsigned int x0; unsigned int x1[0] } x19; struct tagRTCP_CUSTOM_SR { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; struct tagRTCP_CUSTOM_SENDER_INFO { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4 :4; unsigned int x5 :4; } x2; SSCC} x3[1{tagRTCP_CUSTOM_RECEPTION_REPORT=Ib4b12] } x20; struct tagRTCP_CUSTOM_RR { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; struct tagRTCP_CUSTOM_RECEIVER_INFO { unsigned int x0 :4; unsigned int x1 :4; } x2; SSCC} x3[1{tagRTCP_CUSTOM_RECEPTION_REPORT=Ib4b12] } x21; struct tagRTCP_CUSTOM_RCTL { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; struct tagRTCP_CUSTOM_RATE_CONTROL_INFO { unsigned char x0[20] } x1; } x22; } x1; } *)packet arrivalNTPTime:(union tagNTP { unsigned long long x0; struct { unsigned int x0; unsigned int x1; } x1; })ntptime;
- (void)streamGroup:(id)group didSuspendStreams:(BOOL)streams;
- (void)streamGroup:(id)group didChangeState:(unsigned int)state;
- (void)reportCameraCompositionEnabled:(BOOL)enabled;
- (id)qualityTierTableForStreamToken:(long long)token;
- (BOOL)shouldCapStream:(long long)stream cappedBitrate:(unsigned int *)bitrate;
- (unsigned int)remainderBitrateSplitForStreamToken:(long long)token;
@end

#endif /* VCSessionParticipantLocal_h */
