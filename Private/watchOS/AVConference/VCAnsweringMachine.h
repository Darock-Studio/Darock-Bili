//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCAnsweringMachine_h
#define VCAnsweringMachine_h
@import Foundation;

#include "VCMediaDevice.h"
#include "AVCAnsweringMachineConfiguration.h"
#include "VCAnsweringMachineDelegate-Protocol.h"
#include "VCAudioIO.h"
#include "VCAudioIODelegate-Protocol.h"
#include "VCMediaRecorderDelegate-Protocol.h"
#include "VCMediaRecorderTransportDelegate-Protocol.h"

@class NSString, NSURL;
@protocol OS_dispatch_queue;

@interface VCAnsweringMachine : VCMediaDevice<VCAudioIODelegate, VCMediaRecorderTransportDelegate, VCMediaRecorderDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_dispatchQueue;
  NSObject<VCAnsweringMachineDelegate> *_delegate;
  NSObject<OS_dispatch_queue> *_delegateQueue;
  struct tagVCAnsweringMachineRealtimeContext { VCCannedAudioInjector *announcementAssetInjector; unsigned int blockCounter; unsigned int blocksToDelay; struct tagVCAnsweringMachineCommonRealtimeContext { unsigned char flags; unsigned int latestTimestamp; float averageAudioPower; } sourceCommonContext; VCAudioCaptionsCoordinator *captionsCoordinator; struct tagVCAnsweringMachineCommonRealtimeContext { unsigned char flags; unsigned int latestTimestamp; float averageAudioPower; } sinkCommonContext; VCMediaRecorder *mediaRecorder; NSString *mediaRecorderRequesterID; NSString *mediaRecorderTransactionID; long long audioToken; } _realtimeContext;
  NSString *_uuid;
  int _deviceRole;
  VCAudioIO *_audioIO;
  int _reportingModuleID;
  struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } format; unsigned int samplesPerFrame; } _internalFormat;
  BOOL _stopIsAsync;
  BOOL _didInvalidate;
}

@property (readonly, nonatomic) long long messageAudioToken;
@property (readonly, nonatomic) AVCAnsweringMachineConfiguration *configuration;
@property (readonly, nonatomic) NSURL *recordingURL;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)terminateProcess:(id)process terminateSource:(id)source agent:(struct opaqueRTCReporting *)agent;

/* instance methods */
- (BOOL)setUpConfigurationIndependentInternalState;
- (BOOL)setUpInternalStateWithConfiguration:(id)configuration;
- (id)initWithConfiguration:(id)configuration delegate:(id)delegate delegateQueue:(id)queue;
- (void)dealloc;
- (void)invalidate;
- (id)start;
- (id)stop;
- (void)setUpRealtimeDefaults;
- (id)onStart;
- (id)onStop;
- (BOOL)autoRunOnStart;
- (void)setupPeriodicReporting;
- (void)cleanupPeriodicReporting;
- (struct __CFDictionary *)reportingInitialConfiguration;
- (BOOL)setupReportingAgentWithCallID:(unsigned int)id;
- (struct __CFDictionary *)clientSpecificUserInfo;
- (void)setupInternalFormat;
- (BOOL)setupRealtimeContextWithToken:(long long)token;
- (void)cleanupRealtimeContext;
- (int)deviceRoleForCallSource:(unsigned char)source;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })defaultAudioFormat;
- (struct tagVCAudioIOConfiguration { unsigned int x0; unsigned int x1; int x2; int x3; unsigned int x4; unsigned char x5; BOOL x6; id x7; int x8; unsigned int x9; unsigned int x10; BOOL x11; unsigned long long x12; unsigned int x13; long long x14; long long x15; unsigned long long x16; BOOL x17; BOOL x18; struct tagVCAudioIODelegateContext { id x0; undefined * x1; void * x2; id x3; long long x4; } x19; struct tagVCAudioIODelegateContext { id x0; undefined * x1; void * x2; id x3; long long x4; } x20; })defaultAudioIOConfiguration;
- (BOOL)configureAudioIO;
- (id)newInjectorConfigurationForAnnouncementAsset:(id)asset;
- (BOOL)setUpAnnouncementAssetInjection;
- (void)cleanupAnnouncementAssetInjection;
- (BOOL)setupCaptionsCoordinator;
- (void)cleanupCaptionsCoordinator;
- (BOOL)setupMediaRecorder;
- (void)cleanupMediaRecorder;
- (void)stopMediaRecording;
- (void)mediaRecorder:(id)recorder shouldProcessRequest:(id)request recipientID:(id)id;
- (void)streamToken:(long long)token didStartProcessingRequest:(id)request error:(id)error;
- (void)streamToken:(long long)token didEndProcessingRequest:(id)request stillImageURL:(id)url movieURL:(id)url error:(id)error;
- (void)streamToken:(long long)token didFinishRequest:(id)request didSucceed:(BOOL)succeed;
- (void)streamTokenDidCleanupAllRequests:(long long)requests;
- (void)streamToken:(long long)token didUpdateCapabilities:(unsigned int)capabilities;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x0; double x1; } *)codec;
- (void)serverDidDie;
- (void)didResumeAudioIO:(id)io;
- (void)didSuspendAudioIO:(id)io;
@end

#endif /* VCAnsweringMachine_h */
