//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCMockIDSDatagramChannel_h
#define VCMockIDSDatagramChannel_h
@import Foundation;

#include "IDSDatagramChannel.h"
#include "VCMockIDSDataChannelLinkContext.h"

@class NSDictionary, NSLock;
@protocol OS_dispatch_queue;

@interface VCMockIDSDatagramChannel : IDSDatagramChannel {
  /* instance variables */
  NSDictionary *_subscribedStreamsByParticipantID;
  int _socket;
  BOOL _isValid;
  VCMockIDSDataChannelLinkContext *_linkContext;
  id /* block */ _eventHandler;
  id /* block */ _readHandler;
  id /* block */ _sharedWriteCompletionHandler;
  id /* block */ _readHandlerWithOptions;
  id /* block */ _writeDatagramsBlock;
  id /* block */ _writeDatagramBlock;
  id /* block */ _readyToReadBlock;
  NSLock *_blockSettingLock;
  NSLock *_writeDirectPathIDSLock;
  NSLock *_flushDatagramPacketsLock;
  struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry *head; BOOL initialized; undefined *compare; unsigned long long countEntries; } _datagramPackets;
  struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry *head; BOOL initialized; undefined *compare; unsigned long long countEntries; } _datagramPacketsDirectIDSPath;
  struct __CFAllocator * _datagramPacketAllocator;
  unsigned long long _datagramPacketNextSequenceNumber;
  BOOL _usingOptions;
  double _emulatedRxPLR;
  BOOL _doNotDropNackOrRetransmitted;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _streamSubscriptionLock;
  long long _participantGenerationCounter;
  unsigned short numPacketSent;
  unsigned short numPacketReceived;
  int _dataPath;
  BOOL _isNackEnabled;
  C] x[2048[1500] _packetBuffer;
  unsigned short _packetBufferDataSize[2048];
  C]"retransmittedPacket"B"nonRetransmittablePacket"B} x[2048{?="options_flags"I"participantID"Q"probeGroupID"S"channelPriority"C"streamIDCount"c"streamIDs"[12S]"generationCounterLSB"C"statsID"S"statsPayload"{?="serverTimestamp"S"serverPacketInterval"S"totalServerPacketReceived"S"totalServerPacketSent"S"uplinkBandwidth"S}"arrivalTime"d"expireTimestamp"Q"encryptedHBH"B"encryptionSequenceNumber"Q"packetUUID"[16] _packetDatagramOptions;
  BOOL _isServerStatsCached;
  struct { unsigned int options_flags; unsigned long long participantID; unsigned short probeGroupID; unsigned char channelPriority; char streamIDCount; unsigned short x[12] streamIDs; unsigned char generationCounterLSB; unsigned short statsID; struct { unsigned short serverTimestamp; unsigned short serverPacketInterval; unsigned short totalServerPacketReceived; unsigned short totalServerPacketSent; unsigned short uplinkBandwidth; } statsPayload; double arrivalTime; unsigned long long expireTimestamp; BOOL encryptedHBH; unsigned long long encryptionSequenceNumber; unsigned char x[16] packetUUID; BOOL retransmittedPacket; BOOL nonRetransmittablePacket; } _datagramOptionsCached;
  NSObject<OS_dispatch_queue> *_directPathReadQueue;
  NSObject<OS_dispatch_queue> *_directPathRTXQueue;
  BOOL _isSourceParticipantIDOnFanOutPacketsEnabled;
  BOOL _isWrongParticipantIDOnFanOutPacketsEnabled;
  BOOL _isECNEnabled;
}

@property (readonly) BOOL idsUPlusOneMode;

/* class methods */
+ (void)extractRTPData:(char *)rtpdata ssrc:(unsigned int *)ssrc sequenceNumber:(unsigned short *)number;

/* instance methods */
- (BOOL)setupMockIDSDatagramChannelRequiresOptions:(BOOL)options;
- (id)initRequiresOptions:(BOOL)options;
- (id)initCreateSocketRequiresOptions:(BOOL)options dataPath:(int)path;
- (void)flushDatagramPacketsList;
- (void)flushDatagramPacketsListDIrectIDSPath;
- (void)cleanup;
- (void)dealloc;
- (void)readDatagram:(const void *)datagram datagramSize:(unsigned int)size datagramOptions:(struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } *)options;
- (void)setWriteDatagramsBlock:(id /* block */)block;
- (void)setWriteDatagramBlock:(id /* block */)block;
- (void)setReadyToReadBlock:(id /* block */)block;
- (void)signalUnderlyingFileDescriptor;
- (BOOL)enqueueDatagramPacket:(const void *)packet datagramSize:(unsigned int)size options:(struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } *)options error:(id *)error;
- (BOOL)isControlChannelDatagram:(struct _VCMockIDSDatagramChannelPacket { struct _VCSingleLinkedListEntry { struct _VCSingleLinkedListEntry * x0; } x0; unsigned char x1[1500] unsigned long long x2; BOOL x3; struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } x4; unsigned long long x5; } *)datagram;
- (id)newArrayOfStreamIdsForPacket:(struct _VCMockIDSDatagramChannelPacket { struct _VCSingleLinkedListEntry { struct _VCSingleLinkedListEntry * x0; } x0; unsigned char x1[1500] unsigned long long x2; BOOL x3; struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } x4; unsigned long long x5; } *)packet;
- (BOOL)shouldReadPacket:(struct _VCMockIDSDatagramChannelPacket { struct _VCSingleLinkedListEntry { struct _VCSingleLinkedListEntry * x0; } x0; unsigned char x1[1500] unsigned long long x2; BOOL x3; struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } x4; unsigned long long x5; } *)packet;
- (void)dequeueDatagramPacket:(id /* block */)packet;
- (BOOL)isMediaPacket:(char *)packet length:(unsigned long long)length;
- (BOOL)isRTCPPacket:(char *)rtcppacket length:(unsigned long long)length;
- (BOOL)isNACKPacket:(char *)nackpacket length:(unsigned long long)length;
- (void)readDatagramWithCompletionHandler:(id /* block */)handler;
- (void)processWriteCompletionCallback:(id /* block */)callback forDatagramWithSize:(unsigned long long)size error:(id)error;
- (void)writeDatagram:(const void *)datagram datagramSize:(unsigned int)size flags:(struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; })flags completionHandler:(id /* block */)handler;
- (void)readDatagramsWithCompletionHandler:(id /* block */)handler;
- (void)writeDatagram:(const void *)datagram datagramSize:(unsigned int)size datagramInfo:(struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; })info options:(struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } *)options completionHandler:(id /* block */)handler;
- (void)writeDatagrams:(const void * *)datagrams datagramsSize:(unsigned int *)size datagramsInfo:(struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; } *)info datagramsCount:(int)count options:(struct  * *)options completionHandler:(id /* block */)handler;
- (BOOL)processDatagramForDirectIDSDataPath:(const void *)path datagramSize:(unsigned int)size datagramOptions:(struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } *)options error:(id *)error;
- (void)invalidate;
- (void)start;
- (void)setEventHandler:(id /* block */)handler;
- (void)setWriteCompletionHandler:(id /* block */)handler;
- (void)setReadHandler:(id /* block */)handler;
- (void)setReadHandlerWithOptions:(id /* block */)options;
- (void)setChannelPreferences:(id)preferences;
- (void)requestSessionInfoWithOptions:(id)options;
- (void)reportFirstPacketTimeForMKI:(id)mki;
- (BOOL)createSocket;
- (int)underlyingFileDescriptor;
- (int)drainUnderlyingFileDescriptor;
- (int)readyToRead;
- (struct _VCMockIDSDatagramChannelPacket { struct _VCSingleLinkedListEntry { struct _VCSingleLinkedListEntry * x0; } x0; unsigned char x1[1500] unsigned long long x2; BOOL x3; struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } x4; unsigned long long x5; } *)constructPacket:(struct _VCMockIDSDatagramChannelPacket { struct _VCSingleLinkedListEntry { struct _VCSingleLinkedListEntry * x0; } x0; unsigned char x1[1500] unsigned long long x2; BOOL x3; struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } x4; unsigned long long x5; } *)packet datagram:(const void *)datagram datagramSize:(unsigned int)size datagramOptions:(struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } *)options;
- (void)printDroppedPacketInfo:(struct _VCMockIDSDatagramChannelPacket { struct _VCSingleLinkedListEntry { struct _VCSingleLinkedListEntry * x0; } x0; unsigned char x1[1500] unsigned long long x2; BOOL x3; struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } x4; unsigned long long x5; } *)info;
- (void)processPacket:(struct _VCMockIDSDatagramChannelPacket { struct _VCSingleLinkedListEntry { struct _VCSingleLinkedListEntry * x0; } x0; unsigned char x1[1500] unsigned long long x2; BOOL x3; struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } x4; unsigned long long x5; } *)packet packetHandler:(id /* block */)handler;
- (void)addMediaPacketToBuffer:(char *)buffer length:(unsigned long long)length datagramOptions:(struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; })options;
- (void)retrieveAndProcesOnePacket:(unsigned int)packet seq:(unsigned short)seq count:(int)count index:(int)index;
- (void)retrieveAndProcessMediaPacketsFromBuffer:(struct tagRTCPPACKET { struct tagRTCPCOMMON { unsigned int x0 :5; unsigned int x1 :1; unsigned int x2 :2; unsigned int x3 :8; unsigned short x4; } x0; union { struct tagSR_RTCP { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; IIII} x6[1{tagRTCP_RRB=Ib8b24] } x0; struct tagRR_RTCP { unsigned int x0; IIII} x1[1{tagRTCP_RRB=Ib8b24] } x1; struct tagSDES_RTCP { unsigned int x0; struct tagRTCPSDES { unsigned char x0; unsigned char x1; char x2[258] } x1; } x2; struct tagBYE_RTCP { unsigned int x0; } x3; struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x4; struct tagRTCP_APP_LTRP { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x5; struct tagFIR_RTCP { unsigned int x0; unsigned short x1[10] } x6; struct tagNACK_RTCP { unsigned int x0; unsigned short x1; unsigned short x2; } x7; struct tagRTCP_PSFB_PLI { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; } x8; struct tagRTCP_PSFB_SLI { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x9; struct tagRTCP_PSFB_FIR { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned char x2; unsigned char x3[3] } x10; struct tagRTCP_PSFB_TST { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x11; struct tagRTCP_PSFB_TST { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x12; struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x13; struct tagRTCP_PSFB_LOSSFB { struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x0; struct tagRTCP_CUSTOM_PSFB_LOSS_FB_INFO { unsigned int x0; unsigned short x1; unsigned char x2; unsigned char x3; } x1; } x14; struct tagRTCP_PSFB_LTRACK { struct tagRTCP_PSFB_ALFB_HEADER { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x15; struct tagRTCP_RTPFB_GNACK { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; struct tagRTCP_RTPFB_INDIVIDUAL_GNACK { unsigned short x10; unsigned short x1; } x[256] } x16; struct tagRTCP_RTPFB_TMMB { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x17; struct tagRTCP_RTPFB_TMMB { struct tagRTCP_FBCOMMON { unsigned int x0; unsigned int x1; } x0; unsigned int x1; unsigned int x2; } x18; struct tagVCRTCPXR { unsigned int x0; unsigned int x1[0] } x19; struct tagRTCP_CUSTOM_SR { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; struct tagRTCP_CUSTOM_SENDER_INFO { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4 :4; unsigned int x5 :4; } x2; SSCC} x3[1{tagRTCP_CUSTOM_RECEPTION_REPORT=Ib4b12] } x20; struct tagRTCP_CUSTOM_RR { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; unsigned int x1; struct tagRTCP_CUSTOM_RECEIVER_INFO { unsigned int x0 :4; unsigned int x1 :4; } x2; SSCC} x3[1{tagRTCP_CUSTOM_RECEPTION_REPORT=Ib4b12] } x21; struct tagRTCP_CUSTOM_RCTL { struct tagRTCP_APP { unsigned int x0; unsigned int x1; } x0; struct tagRTCP_CUSTOM_RATE_CONTROL_INFO { unsigned char x0[20] } x1; } x22; } x1; } *)buffer packetHandler:(id /* block */)handler;
- (void)handlePacket:(struct _VCMockIDSDatagramChannelPacket { struct _VCSingleLinkedListEntry { struct _VCSingleLinkedListEntry * x0; } x0; unsigned char x1[1500] unsigned long long x2; BOOL x3; struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } x4; unsigned long long x5; } *)packet packetHandler:(id /* block */)handler shouldDropThisPacket:(BOOL)packet;
- (void)osChannelInfoLog;
- (void)setWiFiAssist:(BOOL)assist;
- (void)startActiveProbingWithOptions:(id)options;
- (void)queryProbingResultsWithOptions:(id)options;
- (void)stopActiveProbingWithOptions:(id)options;
- (void)queryStatusWithOptions:(id)options;
- (void)flushLinkProbingStatusWithOptions:(id)options;
- (void)setUPlusOneMode:(BOOL)mode isInitiator:(BOOL)initiator;
- (void)setParticipantIDOnOptions:(struct { unsigned int x0; unsigned long long x1; unsigned short x2; unsigned char x3; char x4; unsigned short x5[12] unsigned char x6; unsigned short x7; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; } x8; double x9; unsigned long long x10; BOOL x11; unsigned long long x12; unsigned char x13[16] BOOL x14; BOOL x15; } *)options;
@end

#endif /* VCMockIDSDatagramChannel_h */
