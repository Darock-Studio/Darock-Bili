//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCAudioManager_h
#define VCAudioManager_h
@import Foundation;

#include "VCObject.h"
#include "AVAudioDevice.h"
#include "VCAudioIOControllerControl-Protocol.h"
#include "VCAudioRelay.h"
#include "VCAudioRelayIO.h"
#include "VCAudioSessionDelegate-Protocol.h"
#include "VCAudioSessionMediaProperties.h"
#include "VCAudioUnitProperties.h"
#include "VCAudioUnitSpatialContext.h"

@class ATSpatialStreamDescriptions, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface VCAudioManager : VCObject<VCAudioIOControllerControl, VCAudioSessionDelegate> {
  /* instance variables */
  struct tagHANDLE { int x0; } * _hAUIO;
  NSObject<OS_dispatch_queue> *_dispatchQueue;
  unsigned int _state;
  NSMutableArray *_allClients;
  NSMutableArray *_startingIOClients;
  AVAudioDevice *_inputDevice;
  AVAudioDevice *_outputDevice;
  BOOL _isMicrophoneMuted;
  BOOL _isMixingVoiceWithMediaEnabled;
  BOOL _isInputMeteringEnabled;
  BOOL _isOutputMeteringEnabled;
  BOOL _isSpeakerPhoneEnabled;
  BOOL _isSuspended;
  BOOL _followSystemInput;
  BOOL _followSystemOutput;
  struct _VCAudioIOControllerIOState { BOOL timestampInitialized; double lastHostTime; unsigned int lastInputTimestamp; unsigned int lastInputSampleCount; double lastBlockSize; unsigned long long lastTimestamp; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry *head; BOOL initialized; undefined *compare; unsigned long long countEntries; } clientIOList; struct opaqueCMSimpleQueue *eventQueue; struct opaqueVCAudioLimiter *audioLimiter; struct opaqueVCAudioBufferList *secondarySampleBuffer; struct opaqueVCAudioBufferList *interruptMixDownSampleBuffer; unsigned int audioSessionId; unsigned long long channelStateBitmap; unsigned long long prevUsedChannelStateBitmap; char x[40] logPrefix; BOOL isMuted; BOOL isVoiceActivityEnabled; BOOL isMediaPriorityEnabled; double forcedMediaPriorityLastUpdateTime; BOOL isForcedMediaPriorityEnabled; unsigned char forcedMediaPriority; struct opaqueVCVoiceDetector *voiceDetector; } _sinkData;
  struct _VCAudioIOControllerIOState { BOOL timestampInitialized; double lastHostTime; unsigned int lastInputTimestamp; unsigned int lastInputSampleCount; double lastBlockSize; unsigned long long lastTimestamp; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry *head; BOOL initialized; undefined *compare; unsigned long long countEntries; } clientIOList; struct opaqueCMSimpleQueue *eventQueue; struct opaqueVCAudioLimiter *audioLimiter; struct opaqueVCAudioBufferList *secondarySampleBuffer; struct opaqueVCAudioBufferList *interruptMixDownSampleBuffer; unsigned int audioSessionId; unsigned long long channelStateBitmap; unsigned long long prevUsedChannelStateBitmap; char x[40] logPrefix; BOOL isMuted; BOOL isVoiceActivityEnabled; BOOL isMediaPriorityEnabled; double forcedMediaPriorityLastUpdateTime; BOOL isForcedMediaPriorityEnabled; unsigned char forcedMediaPriority; struct opaqueVCVoiceDetector *voiceDetector; } _sourceData;
  int _interruptThreadState;
  VCAudioRelay *_interruptThread;
  VCAudioRelayIO *_interruptThreadClient;
  BOOL _isInterrupting;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _interruptingMutex;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _inputDeviceMutex;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _outputDeviceMutex;
  BOOL _spatialAudioDisabled;
  void * * _audioSession;
  int _playbackMode;
  NSMutableDictionary *_spatialContexts;
  NSMutableDictionary *_audioSessionSinkMuted;
  VCAudioUnitSpatialContext *_currentSpatialContext;
  id /* block */ _mutedTalkerNotificationHandler;
  NSArray *_stateStrings;
  ATSpatialStreamDescriptions *_spatialStreamDescriptions;
  BOOL _isMediaPlaybackOnExternalDevice;
}

@property (retain, nonatomic) VCAudioSessionMediaProperties *currentAudioSessionMediaProperties;
@property (retain, nonatomic) VCAudioUnitProperties *currentAudioUnitProperties;
@property (retain, nonatomic) NSDictionary *vpOperatingModeToAudioSessionMediaFormatMapping;
@property (retain) AVAudioDevice *currentInputDevice;
@property (retain) AVAudioDevice *currentOutputDevice;
@property (nonatomic) BOOL microphoneMuted;
@property (nonatomic) BOOL mixingVoiceWithMediaEnabled;
@property (nonatomic) BOOL isInDaemon;
@property (nonatomic) BOOL isGKVoiceChat;
@property (nonatomic) BOOL speakerPhoneEnabled;
@property (readonly, nonatomic) struct _VCAudioIOControllerIOState { BOOL x0; double x1; unsigned int x2; unsigned int x3; double x4; unsigned long long x5; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry * x0; BOOL x1; undefined * x2; unsigned long long x3; } x6; struct opaqueCMSimpleQueue * x7; struct opaqueVCAudioLimiter * x8; struct opaqueVCAudioBufferList * x9; struct opaqueVCAudioBufferList * x10; unsigned int x11; unsigned long long x12; unsigned long long x13; char x14[40] BOOL x15; BOOL x16; BOOL x17; double x18; BOOL x19; unsigned char x20; struct opaqueVCVoiceDetector * x21; } * sinkIO;
@property (readonly, nonatomic) struct _VCAudioIOControllerIOState { BOOL x0; double x1; unsigned int x2; unsigned int x3; double x4; unsigned long long x5; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry * x0; BOOL x1; undefined * x2; unsigned long long x3; } x6; struct opaqueCMSimpleQueue * x7; struct opaqueVCAudioLimiter * x8; struct opaqueVCAudioBufferList * x9; struct opaqueVCAudioBufferList * x10; unsigned int x11; unsigned long long x12; unsigned long long x13; char x14[40] BOOL x15; BOOL x16; BOOL x17; double x18; BOOL x19; unsigned char x20; struct opaqueVCVoiceDetector * x21; } * sourceIO;
@property (readonly, nonatomic) BOOL supportsVoiceActivityDetection;
@property (readonly, nonatomic) NSDictionary *reportingStats;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedVoiceChatInstance;
+ (id)sharedSystemAudioOutputInstance;
+ (id)sharedSystemAudioInputInstance;
+ (void)terminateProcess:(id)process terminateSource:(id)source agent:(struct opaqueRTCReporting *)agent;
+ (unsigned char)audioIOType:(id)iotype shouldEnableAudioInput:(BOOL)input;

/* instance methods */
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)retain;
- (unsigned long long)retainCount;
- (void)release;
- (id)autorelease;
- (void)getPreferredFormat:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format blockSize:(double *)size vpOperatingMode:(unsigned int *)mode forOperatingMode:(int)mode deviceRole:(int)role suggestedFormat:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format;
- (id)initWithAudioSessionMode:(int)mode;
- (void)dealloc;
- (void)setMute:(BOOL)mute forClient:(id)client;
- (void)applyAudioSessionMute;
- (void)setInputMetering;
- (void)setOutputMetering;
- (void)computeHardwarePreferences;
- (void)resetAudioTimestamps;
- (int)prewarmingClientOperatingMode;
- (void)flushEventQueue:(struct opaqueCMSimpleQueue *)queue;
- (void)removeAllClientsForIO:(struct _VCAudioIOControllerIOState { BOOL x0; double x1; unsigned int x2; unsigned int x3; double x4; unsigned long long x5; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry * x0; BOOL x1; undefined * x2; unsigned long long x3; } x6; struct opaqueCMSimpleQueue * x7; struct opaqueVCAudioLimiter * x8; struct opaqueVCAudioBufferList * x9; struct opaqueVCAudioBufferList * x10; unsigned int x11; unsigned long long x12; unsigned long long x13; char x14[40] BOOL x15; BOOL x16; BOOL x17; double x18; BOOL x19; unsigned char x20; struct opaqueVCVoiceDetector * x21; } *)io;
- (BOOL)addClient:(id)client;
- (void)waitIdleForClient:(id)client;
- (BOOL)removeClient:(id)client;
- (void)_cleanupDeadClients;
- (unsigned int)vpOperationModeForConferenceOperatingMode:(int)mode deviceRole:(int)role;
- (void)computeFormatDescription:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)description withPreferredClient:(id)client;
- (unsigned int)computeSamplePerFrameWithPreferredClient:(id)client sampleRate:(unsigned int)rate;
- (BOOL)computeAllowAudioRecordingWithPreferredClient:(id)client;
- (id)newAudioUnitPropertiesWithPreferredClient:(id)client;
- (id)newAudioUnitPropertiesForSystemAudioWithPreferredClient:(id)client isInput:(BOOL)input;
- (id)newAudioSessionMediaPropertiesForSystemAudioWithPreferredClient:(id)client audioUnitProperties:(id)properties isInput:(BOOL)input;
- (id)newAudioSessionMediaPropertiesWithPreferredClient:(id)client audioUnitProperties:(id)properties;
- (void)setupIODevicesForAUIO:(struct tagHANDLE { int x0; } *)auio;
- (void)setCurrentInputDeviceInternal:(id)internal;
- (void)updateCurrentInputDevice:(id)device;
- (void)setCurrentOutputDeviceInternal:(id)internal;
- (void)updateCurrentOutputDevice:(id)device;
- (void)setMediaPlaybackOnExternalDevice:(BOOL)device;
- (BOOL)startAUIOWithProperties:(id)properties;
- (BOOL)shouldResetAudioUnitWithProperties:(id)properties;
- (BOOL)shouldResetAudioSessionWithProperties:(id)properties;
- (BOOL)resetAUIOWithProperties:(id)properties;
- (BOOL)resetAudioLimiterWithProperties:(id)properties;
- (void)stopAUIO;
- (BOOL)audioCallbacksRunning;
- (void)registerClientIO:(struct _VCAudioIOControllerClientIO { void * x0; undefined * x1; id x2; unsigned int x3; unsigned int x4; unsigned int x5; struct opaqueVCAudioBufferList * x6; BOOL x7; BOOL x8; } *)io controllerIO:(struct _VCAudioIOControllerIOState { BOOL x0; double x1; unsigned int x2; unsigned int x3; double x4; unsigned long long x5; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry * x0; BOOL x1; undefined * x2; unsigned long long x3; } x6; struct opaqueCMSimpleQueue * x7; struct opaqueVCAudioLimiter * x8; struct opaqueVCAudioBufferList * x9; struct opaqueVCAudioBufferList * x10; unsigned int x11; unsigned long long x12; unsigned long long x13; char x14[40] BOOL x15; BOOL x16; BOOL x17; double x18; BOOL x19; unsigned char x20; struct opaqueVCVoiceDetector * x21; } *)io;
- (void)unregisterClientIO:(struct _VCAudioIOControllerClientIO { void * x0; undefined * x1; id x2; unsigned int x3; unsigned int x4; unsigned int x5; struct opaqueVCAudioBufferList * x6; BOOL x7; BOOL x8; } *)io controllerIO:(struct _VCAudioIOControllerIOState { BOOL x0; double x1; unsigned int x2; unsigned int x3; double x4; unsigned long long x5; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry * x0; BOOL x1; undefined * x2; unsigned long long x3; } x6; struct opaqueCMSimpleQueue * x7; struct opaqueVCAudioLimiter * x8; struct opaqueVCAudioBufferList * x9; struct opaqueVCAudioBufferList * x10; unsigned int x11; unsigned long long x12; unsigned long long x13; char x14[40] BOOL x15; BOOL x16; BOOL x17; double x18; BOOL x19; unsigned char x20; struct opaqueVCVoiceDetector * x21; } *)io;
- (void)completeStartForAllStartingClients;
- (void)activateStartingClient:(id)client applyControllerFormat:(BOOL)format;
- (void)applyControllerFormatToClients:(id)clients;
- (int)registerForMutedTalkerNotificationWithAUIO:(struct tagHANDLE { int x0; } *)auio;
- (int)unregisterForMutedTalkerNotificationWithAUIO:(struct tagHANDLE { int x0; } *)auio;
- (int)registerForMutedTalkerNotification:(id /* block */)notification;
- (int)unregisterFromMutedTalkerNotification;
- (int)registerAudioSessionId:(unsigned int)id maxChannelCountMic:(unsigned int)mic maxChannelCountSpeaker:(unsigned int)speaker spatialMetadata:(struct OpaqueCMBlockBuffer *)metadata;
- (void)unregisterAudioSessionId:(unsigned int)id;
- (void)setSpatialMetadata:(struct OpaqueCMBlockBuffer *)metadata audioSessionId:(unsigned int)id completionHandler:(id /* block */)handler;
- (void)applySessionContextToAudioUnitProperties:(id)properties preferredClient:(id)client;
- (void)applySpatialMetadata:(struct OpaqueCMBlockBuffer *)metadata;
- (void)activateSpatialContext:(id)context shouldApplySpatialMetadata:(BOOL)metadata;
- (BOOL)setupVAD;
- (void)startVADWithAudioUnitProperties:(id)properties;
- (void)resetChannelMask;
- (BOOL)stateIdleWithAudioUnitProperties:(id)properties sessionProperties:(id)properties client:(id)client newState:(unsigned int *)state;
- (void)enterStateStarted;
- (BOOL)stateSessionStartedWithAudioUnitProperties:(id)properties sessionProperties:(id)properties client:(id)client newState:(unsigned int *)state;
- (BOOL)stateRunningShouldTransitionToStarted:(id)started;
- (BOOL)stateRunningShouldTransitionToInterrupted:(id)interrupted;
- (void)stateRunningToSessionStarted;
- (void)stateTransitionRunningToInterrupted;
- (BOOL)stateRunningWithAudioUnitProperties:(id)properties sessionProperties:(id)properties client:(id)client newState:(unsigned int *)state;
- (BOOL)stateInterruptedShouldGoToStarted:(id)started;
- (BOOL)stateInterruptedShouldGoToRunning:(id)running;
- (void)stateTransitionInterruptedToRunning;
- (void)stateTransitionInterruptedToStarted;
- (BOOL)stateInterruptedWithAudioUnitProperties:(id)properties sessionProperties:(id)properties client:(id)client newState:(unsigned int *)state;
- (id)preferredClientWithNewClient:(id)client;
- (BOOL)updateStateWithAudioIOClient:(id)ioclient;
- (void)startClient:(id)client;
- (void)stopClient:(id)client;
- (void)updateDirectionWithClient:(id)client settings:(const struct tagVCAudioIOControllerClientSettings { unsigned char x0; BOOL x1; BOOL x2; BOOL x3; } *)settings isClientRegistered:(BOOL)registered;
- (void)updateSpatialAudioWithClient:(id)client settings:(const struct tagVCAudioIOControllerClientSettings { unsigned char x0; BOOL x1; BOOL x2; BOOL x3; } *)settings isClientRegistered:(BOOL)registered;
- (void)updateVoiceProcessingWithClient:(id)client settings:(const struct tagVCAudioIOControllerClientSettings { unsigned char x0; BOOL x1; BOOL x2; BOOL x3; } *)settings isClientRegistered:(BOOL)registered;
- (void)updateClient:(id)client settings:(const struct tagVCAudioIOControllerClientSettings { unsigned char x0; BOOL x1; BOOL x2; BOOL x3; } *)settings;
- (void)refreshInputMetering;
- (void)refreshOutputMetering;
- (void)refreshRemoteCodecType:(unsigned int)type sampleRate:(double)rate;
- (BOOL)startAudioSessionWithProperties:(id)properties;
- (BOOL)resetAudioSessionWithProperties:(id)properties interruptSuccessful:(BOOL *)successful;
- (void)stopAudioSession;
- (BOOL)setupInterruptThread;
- (void)cleanupInterruptThread;
- (void)startInterruptThread;
- (void)stopInterruptThread;
- (void)didSessionStop;
- (void)didSessionEnd;
- (void)didSessionPause;
- (void)didSessionResume;
- (void)serverDidDie;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x0; double x1; } *)codec;
- (void)setupDynamicDuckingVolumeHandlerForAUIO:(struct tagHANDLE { int x0; } *)auio;
- (int)setVolume:(float)volume withRampTime:(float)time;
- (BOOL)isMicrophoneMuted;
- (BOOL)isMixingVoiceWithMediaEnabled;
- (BOOL)isSpeakerPhoneEnabled;
@end

#endif /* VCAudioManager_h */
