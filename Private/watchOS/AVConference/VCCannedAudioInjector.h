//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCCannedAudioInjector_h
#define VCCannedAudioInjector_h
@import Foundation;

#include "VCObject.h"
#include "VCCannedAVSync.h"

@class NSString;

@interface VCCannedAudioInjector : VCObject {
  /* instance variables */
  unsigned int _audioSampleCount;
  int _assetType;
  NSString *_cannedMoviePath;
  int _position;
  BOOL _fromBeginning;
  BOOL _playbackComplete;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _samplesMutex;
  struct _opaque_pthread_cond_t { long long __sig; char x[40] __opaque; } _samplesConditional;
  struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _outputFormat;
  VCCannedAVSync *_avSync;
  BOOL _isSharedAVSync;
  struct tagVCCannedAudioInjectorConverterProc { struct OpaqueCMBlockBuffer *blockBuffer; struct AudioBufferList { unsigned int mNumberBuffers; struct AudioBuffer { unsigned int mNumberChannels; unsigned int mDataByteSize; void *mData; } x[1] mBuffers; } audioBufferList; struct OpaqueCMBlockBuffer *previousBlockBuffer; struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } streamDesc; } _audioConverterProc;
  struct opaqueVCAudioBufferList * _sampleBuffer;
  unsigned int _maxLoopCount;
  unsigned int _loopCount;
  unsigned int _samplesInLoop;
  double _loopLength;
  BOOL _forceVoiceActive;
}

@property BOOL isReadyToInject;

/* class methods */
+ (BOOL)isAudioAvailable:(id)available fileName:(id)name;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })internalAssetFormatWithFileFormat:(const struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format;
+ (int)setupReader:(id)reader forAsset:(id)asset assetAudioFormat:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format trackOutput:(id *)output;
+ (id)defaultAudioFileNameWithFormat:(const struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format;

/* instance methods */
- (id)initWithConfig:(id)config;
- (void)reportInjectorInitWithPath:(id)path;
- (void)dealloc;
- (id)description;
- (BOOL)setupAssetInjectionWithConfig:(id)config;
- (int)loadAudioSamples;
- (int)setupAVSyncWithStartHostTime:(double)time loopLength:(double)length;
- (void)completeSetupWithSampleBuffer:(struct opaqueVCAudioBufferList * *)buffer;
- (void)setAudioConverterProcAudioBufferList:(const struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x10; unsigned int x1; void * x2; } x[1] } *)list blockBuffer:(struct OpaqueCMBlockBuffer *)buffer;
- (void)cleanupAudioConverterProc;
- (int)setupAudioConverterWithAssetFormat:(const struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format audioConverter:(struct OpaqueAudioConverter * *)converter;
- (int)processSampleBuffer:(struct opaqueCMSampleBuffer *)buffer audioConverter:(struct OpaqueAudioConverter *)converter audioBuffer:(struct opaqueVCAudioBufferList *)buffer;
- (int)loadSamplesFromTrackOutput:(id)output audioConverter:(struct OpaqueAudioConverter *)converter audioBuffer:(struct opaqueVCAudioBufferList *)buffer;
- (int)allocateSampleBufferWithTrackOutput:(id)output assetAudioFormat:(const struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format sampleBuffer:(struct opaqueVCAudioBufferList * *)buffer;
- (void)parseMediaTracksForAsset:(id)asset;
- (int)loadEncodedAudioSamples;
- (int)loadRawAudioSamples;
- (int)setupSineInjectionWithConfig:(id)config;
@end

#endif /* VCCannedAudioInjector_h */
