//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCCallSession_h
#define VCCallSession_h
@import Foundation;

#include "AVCRateController.h"
#include "AVCRateControllerDelegate-Protocol.h"
#include "GKRingBuffer.h"
#include "VCAudioIOSink-Protocol.h"
#include "VCAudioPayload.h"
#include "VCAudioTransmitter.h"
#include "VCBitrateArbiter.h"
#include "VCCallInfo.h"
#include "VCCallLinkCongestionDetector.h"
#include "VCCallSessionDelegate-Protocol.h"
#include "VCCapabilities.h"
#include "VCCaptionsReceiver.h"
#include "VCCaptionsReceiverDelegate-Protocol.h"
#include "VCConnectionManager.h"
#include "VCConnectionProtocol-Protocol.h"
#include "VCControlChannel.h"
#include "VCControlChannelMultiWay.h"
#include "VCDisplayLink.h"
#include "VCImageAttributeRules.h"
#include "VCMediaNegotiator.h"
#include "VCRateControlMediaController.h"
#include "VCRedundancyControllerDelegate-Protocol.h"
#include "VCRedundancyControllerVideo.h"
#include "VCSecureDataChannel.h"
#include "VCSecureDataChannelDelegate-Protocol.h"
#include "VCSessionMessaging.h"
#include "VCSwitchManager.h"
#include "VCTransportSession.h"
#include "VCTransportSessionLegacyDelegate-Protocol.h"
#include "VCVideoRule.h"
#include "VCWCMClient.h"
#include "VideoAttributes.h"
#include "WRMClient.h"

@class NSArray, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSNumber, NSString, TimingCollection;
@protocol OS_dispatch_queue, OS_dispatch_source, VideoConferenceChannelQualityDelegate;

@interface VCCallSession : NSObject<VCSecureDataChannelDelegate, VCCaptionsReceiverDelegate, VCTransportSessionLegacyDelegate, AVCRateControllerDelegate, VCAudioIOSink, VCRedundancyControllerDelegate> {
  /* instance variables */
  VCCallInfo *remoteCallInfo;
  long long packetMultiplexMode;
  struct tagHANDLE { int x0; } * rtpVideo;
  void * videoMediaControlInfoGenerator;
  void * audioMediaControlInfoGenerator;
  NSObject<VCConnectionProtocol> *toBeChangedPrimaryConnection;
  VCMediaNegotiator *_mediaNegotiator;
  VCSwitchManager *_switchManager;
  NSObject<OS_dispatch_queue> *connectionChangeQueue;
  NSMutableArray *negotiatedAudioPayloads;
  VCAudioPayload *currentAudioPayload;
  VCAudioPayload *currentDTXPayload;
  int _currentRedPayloadType;
  VCVideoRule *_currentEncodeRule;
  BOOL _isRedEnabled;
  long long screenPayload;
  struct tagHANDLE { int x0; } * hSIP;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } mutex;
  int iRemoteRTPPort;
  int iRemoteRTCPPort;
  VCCapabilities *caps;
  AVCRateController *_rateController;
  VCRateControlMediaController *_mediaController;
  BOOL useSBR;
  NSDictionary *_allPayloadsLocalFeaturesString;
  NSMutableDictionary *featureListStringDict;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } pauseLock;
  NSObject<OS_dispatch_queue> *videoQueue;
  NSObject<OS_dispatch_queue> *videoAsyncQueue;
  NSObject<OS_dispatch_queue> *audioQueue;
  NSObject<OS_dispatch_queue> *delegateNotificationQueue;
  BOOL allowAudioRecording;
  int aacBlockSize;
  BOOL _isUseCaseWatchContinuity;
  int carrierBitrateCap;
  struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } format; unsigned int samplesPerFrame; } _vpioFormat;
  BOOL allowAudioSwitching;
  BOOL shouldUpdateLastReceivedPacketTimestamp;
  double lastReceivedPacketTimestamp;
  unsigned int _mediaStallCount;
  double _mediaStallTotalTime;
  double _maxMediaStallTime;
  double _lastMediaStallStartTime;
  BOOL _isRemoteMediaStalledShort;
  int packetsSinceStall;
  int packetsSinceShortMediaStall;
  NSObject<OS_dispatch_source> *pausedAudioHeartBeat;
  TimingCollection *perfTimers;
  double timeLastCheckedNetworkConditions;
  double packetLossRateAccum;
  double packetLossRateCount;
  double timeLastPLR5Secs;
  double timeLastKnowGoodNetworkPLR;
  double timeLastKnowGoodNetworkRTT;
  int abnormalOWRDCount;
  int sampleLogCount;
  double timeSinceLastReportedNoPackets;
  double noRemotePacketsTimeout;
  double _remoteMediaStallTimeout;
  BOOL previousNoRemoteInProgress;
  BOOL didAttemptSIPInvite;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } qualityDelegateLock;
  NSObject<OS_dispatch_queue> *qualityQueue;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } srtpLock;
  BOOL didPrepareSRTP;
  BOOL useAFRC;
  BOOL useVCRC;
  VCCallLinkCongestionDetector *congestionDetector;
  BOOL bBWEstOperatingModeInitialized;
  BOOL bBWEstNewBWEstModeEnabled;
  BOOL bBWEstFakeLargeFrameModeEnabled;
  BOOL bBWEstActiveProbingSenderLog;
  struct CGSize { double width; double height; } remoteScreenPortraitAspectRatio;
  struct CGSize { double width; double height; } remoteScreenLandscapeAspectRatio;
  struct CGSize { double width; double height; } remoteExpectedPortraitAspectRatio;
  struct CGSize { double width; double height; } remoteExpectedLandscapeAspectRatio;
  BOOL isInitiator;
  BOOL sentClientSuccessfulDidStart;
  double videoThrottlingTimeout;
  unsigned int awdCallNonce;
  VCSessionMessaging *messaging;
  VCControlChannel *controlChannel;
  VCControlChannelMultiWay *secureControlChannel;
  BOOL isCurrentNetworkBad;
  unsigned int callSessionBitrate;
  NSObject<OS_dispatch_queue> *cellTechQueue;
  NSObject<OS_dispatch_source> *cellTechChangeSource;
  VCBitrateArbiter *callSessionBitrateArbiter;
  NSObject<OS_dispatch_source> *connectionTimeoutSource;
  NSObject<OS_dispatch_source> *firstRemoteFrameTimemoutSource;
  long long initialSentBytes;
  long long initialReceivedBytes;
  VCAudioTransmitter *audioTransmitter;
  VCCaptionsReceiver *_captionsReceiver;
  struct tagHANDLE { int x0; } * hVideoReceiver;
  struct tagHANDLE { int x0; } * hVideoTransmitter;
  VCDisplayLink *_displayLink;
  VCRedundancyControllerVideo *_videoRedundancyController;
  BOOL remoteSupportsVisibleRect;
  BOOL remoteSupportsExpectedAspectRatio;
  BOOL canLocalResizePIP;
  BOOL canRemoteResizePIP;
  BOOL receivedFirstRemoteFrame;
  int fecMode;
  NSObject<OS_dispatch_source> *sessionHealthMonitor;
  double lastVideoQualityNotificationUpdate;
  double lastVideoCallAlarmTime;
  VCWCMClient *vcWCMClient;
  WRMClient *vcWRMClient;
  BOOL iRATSuggestionEnabled;
  struct OpaqueVTPixelTransferSession * hdTransferSession;
  struct __CVPixelBufferPool * hdBufferPool;
  struct CGSize { double width; double height; } expectedDecodeSize;
  int reportingModuleID;
  BOOL didReportNoRemotePackets;
  BOOL didReportLongConnectionTime;
  BOOL didReportAudioStall;
  BOOL enableRateControlDump;
  unsigned int _targetBitrate;
  unsigned int _rateChangeCounter;
  unsigned int awdTime;
  struct SKEStateOpaque * skeState;
  struct __CFData * secretKey;
  VCSecureDataChannel *secureDataChannel;
  unsigned int dwRTT_ice;
  NSObject<OS_dispatch_queue> *timestampQueue;
  BOOL shouldSendBlackFrame;
  unsigned int _peerProtocolVersion;
  struct tagWRMMetricsInfo { BOOL x0; struct tagHANDLE * x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; int x17; undefined * x18; struct { void * x0; undefined * x1; undefined * x2; } x19; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned long long x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; } * wrmInfo;
  BOOL _shouldReportWRMMetrics;
  BOOL _inviteDataRequested;
  unsigned int _transportType;
  VCTransportSession *_transportSession;
  BOOL _cleanupDone;
  BOOL _isLocalCellular_LowestConnectionQuality;
  BOOL _isRemoteCellular_LowestConnectionQuality;
  BOOL _isConnectedOnIPv6_LowestConnectionQuality;
  void * _callLogFile;
  BOOL _isWRMNotificationPending;
  struct { int applicationType; int linkTypeSuggestion; unsigned long long linkTypeChangeReasonCode; char x[128] linkTypeChangeReasonString; unsigned long long linkBandwidthMin; unsigned long long linkBandwidthMax; } _savedWRMNotification;
  double _initTime;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property long long connectionChangeState;
@property (retain) VCConnectionManager *connectionManager;
@property (readonly) VCCallInfo *localCallInfo;
@property (nonatomic) double packetLossRate5Secs;
@property double lastDecodedFrameTime;
@property (copy, nonatomic) NSString *peerCN;
@property (readonly) struct tagVCAudioReceiver { struct tagVCAudioReceiverConfig { unsigned int x0; struct tagVCAudioReceiverStream { struct tagHANDLE * x10; unsigned short x1; BOOL x2; BOOL x3; struct tagVCCryptor * x4; int x5; BOOL x6; struct tagVCAudioReceiver * x7; void * x8; void * x9; } x[4] void * x2; unsigned int x3; int x4; unsigned int x5; int x6; int x7; BOOL x8; struct opaqueRTCReporting * x9; int x10; BOOL x11; struct __CFString * x12; struct __CFString * x13; unsigned short x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; int x20; BOOL x21; void * x22; undefined * x23; undefined * x24; undefined * x25; struct tagVCJBTargetEstimatorSynchronizer * x26; void * x27; void * x28; unsigned int x29; BOOL x30; unsigned int x31; int x32; BOOL x33; BOOL x34; unsigned long long x35; BOOL x36; BOOL x37; struct __CFString * x38; BOOL x39; } x0; void * x1; struct opaqueVCJitterBuffer * x2; BOOL x3; struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x0; unsigned int x1; } x4; double x5; struct { long long x0; int x1; unsigned int x2; long long x3; } x6; struct tagVCRealTimeThread * x7; struct tagVCAudioReceiverReportingTask { struct opaqueRTCReporting * x0; int x1; struct tagHANDLE * x2; } x8; BOOL x9; BOOL x10; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x11; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x12; struct tagVCAudioDecoderList { struct tagDecoderSettings * x0; unsigned int x1; } x13; unsigned int x14; struct tagVCAudioReceiverStatistics { atomic  x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; float x9; atomic  x10; unsigned int x11; } x15; struct tagWRMMetricsInfo * x16; undefined * x17; struct tagVCAudioReceiverCallbackContext { void * x0; undefined * x1; undefined * x2; } x18; undefined * x19; struct tagVCAudioReceiverCallbackContext { void * x0; undefined * x1; undefined * x2; } x20; unsigned int x21; S]CBQ{?=^{_RTCPPacketList}}} x22[2{_RTCPPacketList=(tagNTP=Q{?=II})C[10^{tagRTCPPACKET}]^{OpaqueCMBlockBuffer}*QI[1472C][12] double x23; unsigned int x24; unsigned int x25; struct tagPacketHistoryInfo { unsigned int x260; unsigned short x1; unsigned int x2; BOOL x3; BOOL x4; } x[300] unsigned short x27; unsigned short x28; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x29; struct tagVCAudioReceiverStream * x30; unsigned short x31; unsigned short x32; double x33; BOOL x34; unsigned short x35; unsigned short x36; struct _VCAudioCodecModeChangeEvent { int x0; int x1; int x2; unsigned int x3; struct EVSRFParams { unsigned int x0; unsigned int x1; } x4; } x37; BOOL x38; unsigned short x39; unsigned short x40; unsigned short x41; unsigned int x42; BOOL x43; BOOL x44; unsigned long long x45; BOOL x46; void * x47; undefined * x48; undefined * x49; undefined * x50; struct tagVCJBTargetEstimatorSynchronizer * x51; struct tagVCJitterBufferWRMReportingMetrics { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned int x7; } x52; void * x53; BOOL x54; double x55; int x56; double x57; double x58; unsigned int x59; double x60; struct tagVCAudioIssueDetector * x61; int x62; int x63; unsigned int x64[128] unsigned int x65[128] unsigned int x66; unsigned int x67; unsigned int x68; int x69; struct tagVCAudioDump * x70; struct tagVCAudioDumpPayloadInfo { BOOL x0; int x1; BOOL x2; BOOL x3; struct AudioStreamBasicDescription * x4; } x71; BOOL x72; BOOL x73; long long x74; struct tagVCOverlaySource * x75; } * audioReceiver;
@property (readonly) BOOL isCurrentPayloadTypeValid;
@property (readonly, nonatomic) BOOL isCaller;
@property (copy, nonatomic) NSString *sessionID;
@property (nonatomic) BOOL isStarted;
@property (retain, nonatomic) VCImageAttributeRules *imageAttributeRules;
@property (nonatomic) BOOL shouldSendAudio;
@property (nonatomic) double roundTripTime;
@property (nonatomic) BOOL useRateControl;
@property (nonatomic) BOOL isRTCPFBEnabled;
@property (nonatomic) double packetLossRate;
@property (nonatomic) float packetLateAndMissingRatio;
@property (readonly) double networkQuality;
@property (nonatomic) double networkConditionsTimeoutInSeconds;
@property (nonatomic) int signalStrengthBars;
@property (nonatomic) int signalStrengthDisplayBars;
@property (nonatomic) int signalStrengthMaxDisplayBars;
@property (readonly) unsigned int lastSentAudioSampleTime;
@property (nonatomic) int natType;
@property (nonatomic) BOOL requiresWifi;
@property (nonatomic) BOOL useCompressedConnectionData;
@property (retain) NSObject<VCCallSessionDelegate> *delegate;
@property struct tagHANDLE { int x0; } * rtpHandle;
@property (readonly) int numBufferBytesAvailable;
@property unsigned short maxPacketLength;
@property long long state;
@property long long sipState;
@property BOOL didSend200OK;
@property long long videoPayload;
@property long long sampleRate;
@property (readonly) BOOL isAudioRunning;
@property (readonly) BOOL isVideoRunning;
@property (readonly) BOOL videoIsPaused;
@property (readonly) BOOL audioIsPaused;
@property BOOL isGKVoiceChat;
@property BOOL isWaitingForICEResult;
@property BOOL receivedSIPInvite;
@property struct tagHANDLE { int x0; } * hMediaQueue;
@property struct tagHANDLE { int x0; } * hAFRC;
@property (retain, nonatomic) GKRingBuffer *ringBuf;
@property unsigned int lastReceived;
@property (readonly) int bundledPackets;
@property int packetsPerBundle;
@property int preferredAudioCodec;
@property BOOL useControlByte;
@property BOOL useUEP;
@property unsigned char inputMeter;
@property int bandwidthUpstream;
@property int bandwidthDownstream;
@property (retain, nonatomic) NSArray *mutedPeers;
@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
@property BOOL shouldTimeoutPackets;
@property (retain) NSData *srtpKeyBytes;
@property (retain, nonatomic) VideoAttributes *remoteVideoAttributes;
@property unsigned int remoteFrameWidth;
@property unsigned int remoteFrameHeight;
@property (nonatomic) int operatingMode;
@property (readonly) BOOL isSKEOptimizationEnabled;
@property (readonly) BOOL isRemoteMediaStalled;
@property (retain) VCCapabilities *capabilities;
@property int deviceRole;
@property (copy, nonatomic) NSString *peerReportingID;
@property (retain, nonatomic) NSNumber *basebandCodecSampleRate;
@property (copy, nonatomic) NSString *basebandCodecType;
@property (readonly, nonatomic) int audioTierNetworkBitrate;
@property (readonly, nonatomic) int audioTierAudioCodecBitrate;
@property (readonly, nonatomic) int audioTierPacketsPerBundle;
@property (readonly, nonatomic) int audioTierRedNumPayloads;
@property (readonly, nonatomic) int audioTierPayload;
@property (readonly, nonatomic) NSDictionary *dtxMetrics;
@property (readonly, nonatomic) struct opaqueRTCReporting * reportingAgent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (int)setRxPayloadList:(struct tagHANDLE { int x0; } *)list withPayloadTypes:(id)types;
+ (int)setRxPayloadList:(struct tagHANDLE { int x0; } *)list withPayloadTypes:(id)types isRedEnabled:(BOOL)enabled;
+ (id)getDecodePayloadTypes:(int)types secondaryPayloadTypes:(id)types;
+ (void)stopSecureControlChannel:(id)channel;
+ (id)keyPathsForValuesAffectingNetworkQuality;

/* instance methods */
- (void)processBlackFrame:(struct opaqueCMSampleBuffer *)frame;
- (BOOL)onCaptureFrame:(struct opaqueCMSampleBuffer *)frame audioTS:(unsigned int)ts audioHT:(double)ht videoHT:(struct { long long x0; int x1; unsigned int x2; long long x3; })ht cameraBits:(unsigned char)bits;
- (void)onPlayVideo:(struct __CVBuffer *)video frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time cameraStatusBits:(unsigned char)bits;
- (void)nofityDelegateReceivedRemoteFrame:(struct __CVBuffer *)frame frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time cameraStatusBits:(unsigned char)bits newRemoteVideoAttributes:(id)attributes remoteScreenAttributes:(id)attributes;
- (unsigned int)parameterSetForPayload:(int)payload;
- (struct CGSize { double x0; double x1; })computeVisibleAspectRatioWithRemoteScreenAspectRatio:(struct CGSize { double x0; double x1; })ratio remoteExpectedAspectRatio:(struct CGSize { double x0; double x1; })ratio encodeWidth:(int)width encodeHeight:(int)height;
- (void)cleanUpVideoRTP;
- (void)cleanUpVideoReceiver;
- (void)cleanUpVideoTransmitter;
- (void)cleanUpDisplayLink;
- (BOOL)initializeVideoTransmitter:(id *)transmitter videoRules:(struct VCCSVideoTransmitterVideoRules_t { id x0; id x1; id x2; } *)rules unpausing:(BOOL)unpausing reportingAgent:(struct opaqueRTCReporting *)agent fecHeaderV1Enabled:(BOOL)enabled isFECGeneratorEnabled:(BOOL)enabled;
- (BOOL)initializeVideoReceiver:(id *)receiver reportingAgent:(struct opaqueRTCReporting *)agent fecHeaderV1Enabled:(BOOL)enabled videoJBEnabled:(BOOL)jbenabled;
- (double)sessionTransmittingFramerate;
- (double)sessionTransmittingBitrate;
- (double)sessionReceivingFramerate;
- (double)sessionReceivingBitrate;
- (void)updateVideoQualityNotification:(double)notification;
- (id)newRemoteScreenAttributesForOrientation:(int)orientation;
- (void)processResolutionChangeToVideoRule:(id)rule captureRule:(id)rule featureListString:(id)string;
- (void)callAlarmsWithRTPTimeStamp:(struct { long long x0; int x1; unsigned int x2; long long x3; } *)stamp;
- (void)updateStatistics:(struct tagVCStatisticsMessage { int x0; int x1; double x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; union { struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; double x10; char x11[64] int x12; } x0; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; double x12; double x13; unsigned int x14; unsigned int x15; double x16; unsigned int x17; BOOL x18; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x19; struct { unsigned short x0; BOOL x1; BOOL x2; unsigned int x3; } x20; struct tagVCStatisticsECNStats { unsigned short x0; unsigned short x1; } x21; struct tagVCStatisticsECNStats { unsigned short x0; unsigned short x1; } x22; BOOL x23; } x1; struct { double x0; double x1; double x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned long long x8; unsigned int x9; } x2; struct { unsigned int x0; BOOL x1; BOOL x2; BOOL x3; unsigned int x4; unsigned int x5; double x6; unsigned int x7; BOOL x8; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x9; } x3; struct { unsigned char x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; double x10; double x11; double x12; double x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; } x4; struct { unsigned int x0; unsigned int x1; unsigned int x2; double x3; } x5; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x6; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } x7; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; BOOL x6; unsigned int x7; } x8; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; BOOL x5; BOOL x6; double x7; double x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned long long x12; } x9; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned long long x9; int x10; unsigned int x11; union { struct { unsigned char x0; unsigned char x1; unsigned short x2; unsigned short x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; float x11; BOOL x12; unsigned short x13; unsigned int x14[6] } x0; struct { unsigned char x0; short x1; short x2; char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned short x8; unsigned short x9; unsigned char x10; } x1; } x12; } x10; struct tagVCStatisticsVideoLossFeedback { unsigned int x0; unsigned short x1; unsigned char x2; unsigned char x3; } x11; } x7; })statistics;
- (void)packMeters:(char *)meters withLength:(char *)length;
- (void)mediaController:(void *)controller mediaSuggestionDidChange:(struct VCRateControlMediaSuggestion { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; })change;
- (void)rateController:(id)controller targetBitrateDidChange:(unsigned int)change rateChangeCounter:(unsigned int)counter;
- (int)learntBitrateForSegment:(id)segment defaultValue:(int)value;
- (void)transportSession:(id)session connectionSetupDataDidChange:(id)change;
- (void)transportSession:(id)session cancelRelayRequest:(id)request;
- (void)transportSession:(id)session initiateRelayRequest:(id)request;
- (void)transportSession:(id)session sendRelayResponse:(id)response;
- (void)setupMessaging;
- (void)setupAudioPauseMessages;
- (void)setupVideoPauseMessages;
- (void)setupAudioPausedHBMessages;
- (void)setupAudioOnOffStateMessages;
- (void)setupCallingModeMessages;
- (void)setupBasebandCodecInfoMessages;
- (void)setupDisconnectMessage;
- (void)setupHandoverCandidateChangeMessage;
- (void)setupPiPStateChangeMessage;
- (void)setupCellTechChangeMessages;
- (void)setupMomentsMessages;
- (void)setupPreferredInterfaceMessage;
- (void)processSymptomFromMessage:(id)message participantID:(id)id isLocalInitiated:(BOOL)initiated isLocalSideOnly:(BOOL)only;
- (void)setupSymptomEnabledMessage;
- (void)setupWRMAlertStateUpdateMessage;
- (void)setupWRMCoexMetricsMessage;
- (void)controlChannel:(id)channel receivedData:(id)data transactionID:(unsigned int)id fromParticipant:(id)participant;
- (int)flushBasebandQueueWithPayloads:(id)payloads flushCount:(unsigned int *)count;
- (void)handleMediaReceivedOverPeerToPeerLinkWithConnectionId:(int)id;
- (void)handleMediaReceivedOverRelayLinkWithConnectionId:(int)id;
- (BOOL)setupIDSConnectionForCallID:(unsigned int)id destination:(id)destination socket:(int)socket error:(id *)error;
- (int)setSKEBlobOnTransportSession;
- (BOOL)configureLegacyTransportWithInviteInfo:(id)info error:(id *)error;
- (id)newSKEBlobWithRemoteSKEBlob:(id)skeblob;
- (int)setupEncryptionWithKey:(const struct __CFData * *)key confIndex:(int *)index;
- (void)initWithRelevantStorebagEntries;
- (void)updateNetworkCheckHint:(double)hint;
- (void)logDetailedNetworkInformation;
- (void)setupDTLSDefaults;
- (void)setupPeerInfo:(id)info usingInviteData:(id)data isCaller:(BOOL)caller capabilities:(id)capabilities;
- (struct __SecIdentity *)retrieveIdentity;
- (void)notifyDelegateAndEndCall:(long long)call didRemoteCancel:(BOOL)cancel error:(id)error;
- (long long)calculateSIPEndAction:(BOOL)action currentState:(long long)state error:(id)error;
- (void)reportDashboardEndResult:(BOOL)result;
- (void)cleanupMedia;
- (void)startPausedHeartbeat;
- (void)stopPausedHeartbeat;
- (void)logPerfTimings;
- (void)sendTimings;
- (void)remotePauseDidChangeToState:(BOOL)state forVideo:(BOOL)video;
- (void)processSIPMessage:(char *)sipmessage msgOut:(char *)out optional:(void *)optional confIndex:(int *)index;
- (void)lock;
- (void)unlock;
- (void)resetState;
- (void)setupCalleeSIPStartTimeout:(float)timeout;
- (void)addScreenConfigToSDP:(id)sdp;
- (BOOL)createSDP:(int *)sdp audioPayloadCount:(int)count secondaryPayloadTypes:(int *)types secondaryPayloadCount:(int)count videoPayloadTypes:(int *)types videoPayloadCount:(int)count localFeatureList:(id)list answerBandwidth:(int)bandwidth maxBandwidth:(int)bandwidth imageSizesSend:(struct imageTag * *)send imageSendCount:(int *)count imageSizesRecv:(struct imageTag * *)recv imageRecvCount:(int *)count sdp:(char *)sdp numSDPBytes:(int *)sdpbytes error:(id *)error;
- (void)negotiateMediaMaxBandwidth;
- (void)applyNegotiatedSettings;
- (BOOL)applyNegotiatedAudioSettings:(id *)settings;
- (BOOL)applyNegotiatedVideoSettings:(id *)settings;
- (void)applyNegotiatedCaptionsSettings;
- (void)applyNegotiatedMediaRecorderSettings;
- (BOOL)startMediaWithPreNegotiatedSettings:(id *)settings;
- (int)handleIncomingWithCallID:(unsigned int)id msgIn:(const char *)in msgOut:(char *)out optional:(void *)optional confIndex:(int *)index error:(id *)error;
- (void)getAllPayloadsForAudio:(int * *)audio count:(int *)count secondaryPayloads:(int * *)payloads secondaryCount:(int *)count;
- (void)getAllPayloadsForVideo:(int * *)video count:(int *)count;
- (void)getAllPayloadsForScreen:(int * *)screen count:(int *)count;
- (BOOL)canSendSIPInviteWithError:(id *)error;
- (id)createInviteSDPWithError:(id *)error;
- (BOOL)establishSIPDialogWithSDP:(id)sdp error:(id *)error;
- (BOOL)sendSIPInviteWithError:(id *)error;
- (BOOL)treatAsCellular;
- (int)fillMediaControlInfo:(void *)info;
- (int)processMediaControlInfo:(void *)info isAudio:(BOOL)audio;
- (BOOL)createAudioTransmitter:(id *)transmitter;
- (BOOL)createRTPHandles:(id *)rtphandles;
- (void)releaseRTPHandles;
- (BOOL)prepareSRTPWithError:(id *)error;
- (BOOL)createMediaQueueHandle:(id *)handle;
- (void)negotiateFeaturesString:(id)string forPayload:(int)payload;
- (BOOL)negotiatePayloads:(id *)payloads withError:(id *)error;
- (BOOL)negotiateMaxBandwidth:(int *)bandwidth;
- (BOOL)canNegotiateVideoPayload:(int)payload supportedPayloads:(id)payloads isLocalOnCellular:(BOOL)cellular isRemoteOnCellular:(BOOL)cellular;
- (BOOL)chooseVideoPayload:(id)payload operatingMode:(int)mode isLocalOnCellular:(BOOL)cellular isRemoteOnCellular:(BOOL)cellular;
- (BOOL)isValidVideoPayloadOverride:(id)override;
- (BOOL)doesVideoPayloadMatchRemoteImageAttributeRules:(id)rules;
- (int)getAllCompatibleVideoPayloads:(int * *)payloads forMediaType:(int)type;
- (id)getCompatibleLocalFeatureListForPayloads:(int *)payloads count:(int)count;
- (BOOL)setRTPPayloads:(id)rtppayloads withError:(id *)error;
- (BOOL)setMediaQueueStreamSettings;
- (BOOL)setupCallerRTPChannelWithError:(id *)error;
- (BOOL)sipConnectWithError:(id *)error;
- (void)stopAudioWithCompletionHandler:(id /* block */)handler;
- (void)stopAudioIO:(id /* block */)io;
- (void)startAudioWithCompletionHandler:(id /* block */)handler;
- (void)startAudioIOWithCompletionHandler:(id /* block */)handler;
- (void)enableAudio:(BOOL)audio;
- (void)updateDeviceRole:(int)role;
- (void)sendCallingModeMessage;
- (BOOL)setupAudioCookies;
- (int)interfaceForCurrentCall;
- (BOOL)startVideoSend:(BOOL)send error:(id *)error;
- (BOOL)startVideoReceive:(id *)receive;
- (BOOL)startVideo:(BOOL)video error:(id *)error;
- (BOOL)stopVideoSend:(BOOL)send error:(id *)error;
- (BOOL)stopVideoReceive:(id *)receive isPausing:(BOOL)pausing;
- (BOOL)stopVideo:(BOOL)video error:(id *)error;
- (BOOL)getVideoSettings:(int)settings forInterface:(int)interface payload:(int)payload width:(int *)width height:(int *)height framerate:(int *)framerate bitRate:(int *)rate;
- (BOOL)startMediaQueue:(id *)queue;
- (BOOL)stopMediaQueue:(id *)queue;
- (unsigned int)vcrcServerBagProfileNumber;
- (id)vcrcServerBag;
- (BOOL)startAFRC:(id *)afrc;
- (BOOL)startVCRC:(id *)vcrc;
- (BOOL)startRateControl:(id *)control;
- (BOOL)stopRateControl:(id *)control;
- (void)setupAACELDPayload:(int)aaceldpayload;
- (id)newConfigForPayloadType:(int)type;
- (id)addAudioPayload:(int)payload;
- (id)negotiatedAudioPayloadTypes;
- (BOOL)setupAudioCodecWithPayload:(int)payload;
- (unsigned int)codecBitmapForPayloads:(id)payloads;
- (BOOL)choosePayload:(id)payload;
- (BOOL)chooseSecondaryPayloads:(id)payloads;
- (BOOL)chooseDTXPayloads:(id)dtxpayloads;
- (void)shutdownVoiceChatFromRemoteSIPSignal:(int)sipsignal withReason:(const char *)reason;
- (void)sipConnectThreadProc:(id)proc;
- (BOOL)shouldNotifyDelegateDidStartBeforeAudioSetup;
- (unsigned int)audioRTPID;
- (unsigned int)videoRTPID;
- (void)doSipEndProc:(id)proc;
- (void)disconnectWithNoRemotePackets:(long long)packets;
- (void)disconnectWithNoRemotePackets:(long long)packets timeoutUsed:(double)used;
- (void)doSipEndAction:(int)action callID:(unsigned int)id error:(id)error;
- (void)notifyDelegateSessionStarted;
- (int)Conference_SetBWEstMode:(BOOL)mode bFakeLargeFrameMode:(BOOL)mode;
- (void)setLocalIdentityForKeyExchange;
- (void)logIdentity:(struct __SecIdentity *)identity;
- (id)pickFeaturesStringForPayload:(int)payload featureListDict:(id)dict remote:(BOOL)remote;
- (id)allPayloadsLocalFeaturesString;
- (BOOL)setMatchedFeaturesString:(char *)string localFeaturesString:(id)string remoteFeaturesString:(id)string;
- (const char *)matchedFeaturesStringForPayload:(int)payload;
- (void)setupBitrateNegotiation;
- (void)adjustBitrateForConnectionType;
- (unsigned int)maxBitrateForConnectionType;
- (void)logConnectionSuccess;
- (void)enableSessionHealthMonitor;
- (double)audioReceivingBitrateKbps;
- (double)audioTransmittingBitrateKbps;
- (void)disableSessionHealthMonitor;
- (void)sendBasebandCodecMessage;
- (void)shouldSendBlackFrame:(BOOL)frame;
- (void)sendSymptomToRemote:(id)remote groupID:(id)id;
- (void)setDuplicationFlag:(BOOL)flag withPreferredLocalLinkTypeForDuplication:(int)duplication notifyPeer:(BOOL)peer;
- (void)handleDuplicationEnabled:(BOOL)enabled activeConnection:(id)connection;
- (int)mapPacketMultiplexModeToRTPMode:(long long)rtpmode;
- (int)mapPacketMultiplexModeToSIPMode:(long long)sipmode;
- (BOOL)disconnectInternal:(BOOL)internal disconnectError:(id)error didRemoteCancel:(BOOL)cancel;
- (int)sipCallback:(int)callback callID:(unsigned int)id msgIn:(const char *)in msgOut:(char *)out optional:(void *)optional confIndex:(int *)index;
- (void)didReceiveCaptions:(id)captions;
- (void)wcmSetCallConfig:(unsigned int)config interferenceLevel:(unsigned int)level;
- (void)wcmGetCallConfig:(unsigned int *)config targetBitrate:(unsigned int *)bitrate;
- (void)vcSecureDataChannel:(id)channel messageType:(unsigned int)type receivedData:(id)data;
- (id)init;
- (id)initWithDeviceRole:(int)role transportType:(unsigned int)type isGKVoiceChat:(BOOL)chat reportingHierarchyToken:(id)token;
- (void)gatherRealtimeStats:(struct __CFDictionary *)stats;
- (unsigned int)callID;
- (void)configureRateController;
- (void)startAWDStats;
- (void)updateVideoQualityStatusWithTime:(double)time isRemote:(BOOL)remote;
- (BOOL)isBetterForSIPInviteWithSourceDestinationInfo:(struct tagVCSourceDestinationInfo { int x0; union { struct { struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x0; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x1; struct { BOOL x0; unsigned short x1; } x2; } x0; struct { int x0; int x1; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x2; int x3; } x1; struct { unsigned int x0; struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; } x1; BOOL x2; } x2; struct { id x0; } x3; } x1; unsigned int x2; struct tagVCSourceDestinationInfo * x3; void * x4; } *)info thanSession:(id)session;
- (BOOL)evaluateEnableRRx:(int *)rrx;
- (void)updateMaxPktLength;
- (void)reportHandoverResultsWithDictionary:(id)dictionary localBitrateCap:(int)cap remoteBitrateCap:(int)cap;
- (void)handleCellTechChange:(int)change;
- (void)handleCellularMTUChanged:(unsigned short)mtuchanged;
- (void)thermalLevelDidChange:(int)change;
- (void)remoteCellTechStateUpdate:(int)update maxRemoteBitrate:(unsigned int)bitrate;
- (id)getFeatureListStringForPayload:(int)payload;
- (int)applyFeatureListStringForPayload:(int)payload;
- (BOOL)chooseVideoPayloadForInterface:(int)interface;
- (id)getVideoRuleForVideoMode:(unsigned long long)mode interface:(int)interface sessionBitrate:(int *)bitrate;
- (void)setCurrentEncodeRule:(id)rule;
- (void)resetVideoRulesForInterface:(int)interface videoReportingDictionary:(id)dictionary;
- (void)schedulePrimaryConnectionChange:(id)change oldConnection:(id)connection;
- (void)handlePendingPrimaryConnectionChange;
- (void)primaryConnectionDidChangeTo:(id)to oldConnection:(id)connection;
- (int)getAudioTxBitrate;
- (void)updateRemoteMediaStallState:(double)state;
- (void)updateRemoteMediaStallStateReporting:(double)reporting;
- (void)updateLastReceivedPacketWithTimestamp:(double)timestamp packetType:(int)type;
- (void)checkAbnormalOWRDAndResetLagReference;
- (void)updateLastReceivedAudioTime;
- (void)updateLastReceivedPacket:(BOOL)packet packetType:(int)type;
- (void)dealloc;
- (BOOL)isSIPEnabled;
- (BOOL)isSecureMessagingRequired;
- (unsigned char)mediaControlInfoFECFeedbackVersion;
- (BOOL)isFECGeneratorEnabled;
- (unsigned char)defaultMediaControlInfoFECFeedbackVersion;
- (id)activeControlChannel;
- (void)timeoutUnfinishedConnection;
- (void)cancelConnectionTimeoutTimer;
- (void)setupConnectionTimeoutTimerWithErrorCode:(int)code detailedCode:(int)code description:(id)description reason:(id)reason;
- (void)setUpFirstRemoteFrameTimer;
- (void)cancelFirstRemoteFrameTimer;
- (BOOL)isLocalOrRemoteOnCellular;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList *)samples;
- (void)updateVCRateControlWRMMetrics:(struct tagWRMMetricsInfo { BOOL x0; struct tagHANDLE * x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; int x17; undefined * x18; struct { void * x0; undefined * x1; undefined * x2; } x19; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned long long x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; } *)wrmmetrics;
- (BOOL)startConnectionWithParticipantID:(id)id callID:(unsigned int)id usingInviteData:(id)data isCaller:(BOOL)caller capabilities:(id)capabilities idsSocket:(int)socket destination:(id)destination error:(id *)error;
- (void)verifyFaceTimeClassicNotOnNewerBuilds;
- (void)handleReceivedPiggybackBlobIDS:(id)ids;
- (void)handleReceivedPiggybackBlobLegacy:(id)legacy;
- (void)applyNegotiatedFaceTimeSettings;
- (void)setupABTesting;
- (void)setupWRMClient;
- (void)cleanupWRMClient;
- (void)reportWRMMetrics:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; unsigned long long x17; unsigned long long x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; unsigned long long x22; unsigned long long x23; unsigned long long x24; unsigned long long x25; unsigned long long x26; unsigned long long x27; unsigned long long x28; unsigned long long x29; unsigned long long x30; unsigned long long x31; unsigned long long x32; unsigned long long x33; unsigned long long x34; unsigned long long x35; unsigned long long x36; unsigned long long x37; } *)wrmmetrics;
- (void)reportImmediateWRMMetric:(int)wrmmetric value:(unsigned long long)value;
- (void)setWRMMetricConfig:(struct { unsigned long long x0; } *)config;
- (void)setWRMNotification:(struct { int x0; int x1; unsigned long long x2; char x3[128] unsigned long long x4; unsigned long long x5; } *)wrmnotification;
- (void)setWRMCoexMetrics:(id)metrics;
- (void)setPreWarmState:(BOOL)state;
- (void)sendWRMStatusUpdate:(const struct { int x0; int x1; int x2; unsigned int x3; } *)update;
- (void)requestWRMNotification;
- (BOOL)disconnect:(id)disconnect didRemoteCancel:(BOOL)cancel;
- (BOOL)cancel:(id)cancel;
- (id)newMediaNegotiatorAudioConfigurationWithAllowAudioSwitching:(BOOL)switching useSBR:(BOOL)sbr aacBlockSize:(unsigned int)size;
- (id)newMediaBlobWithRemoteMediaBlob:(id)blob localCallID:(unsigned int)id isLowBitrateCodecPreferred:(BOOL)preferred;
- (void)reportOperatingMode;
- (BOOL)isLowBitrateCodecPreferred:(id)preferred;
- (id)inviteDataForParticipantID:(id)id callID:(unsigned int *)id remoteInviteData:(id)data nonCellularCandidateTimeout:(double)timeout error:(id *)error;
- (void)addLocalCallInfoToInviteDictionary:(id)dictionary;
- (void)setRemoteCallInfoFromInviteDictionary:(id)dictionary;
- (void)processRemoteIPChange:(id)ipchange callID:(unsigned int)id;
- (BOOL)isCallOngoing;
- (void)setSuspendAudio;
- (void)setResumeAudio;
- (BOOL)setPauseAudio:(BOOL)audio force:(BOOL)force error:(id *)error;
- (BOOL)setPauseAudio:(BOOL)audio error:(id *)error;
- (void)setSuspendVideo;
- (void)setResumeVideo;
- (BOOL)setPauseVideo:(BOOL)video force:(BOOL)force error:(id *)error;
- (BOOL)setPauseVideo:(BOOL)video error:(id *)error;
- (BOOL)stillWantsToRelay;
- (void)processRelayRequestResponseDict:(id)dict didOriginateRequest:(BOOL)request;
- (void)processRelayUpdateDict:(id)dict didOriginateRequest:(BOOL)request;
- (void)processCancelRelayRequest:(id)request didOriginateRequest:(BOOL)request;
- (void)rcvdFirstRemoteFrame;
- (void)sendARPLData:(id)arpldata toCallID:(unsigned int)id;
- (void)sendData:(id)data messageType:(unsigned int)type encrypted:(BOOL)encrypted;
- (id)remoteParticipantID;
- (id)localParticipantID;
- (int)negotiatedReceivingFramerate;
- (id)callMetadata;
- (BOOL)pullAudioSamples:(struct opaqueVCAudioBufferList *)samples rtpTimestamp:(unsigned int *)timestamp lastReceivedAudioTime:(double *)time padding:(char *)padding paddingLength:(char *)length silence:(int *)silence;
- (unsigned int)primaryConnectionType;
- (unsigned int)currentAudioCap;
- (void)setSessionConferenceState:(unsigned int)state callID:(unsigned int)id;
- (void)setSessionConferenceVisualRectangle:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectangle callID:(unsigned int)id;
- (void)setPeerProtocolVersion:(unsigned int)version;
- (void)messageVCMomentsRequest:(id)request;
- (void)reportSymptom:(unsigned int)symptom;
- (void)reportingMomentsWithRequest:(id)request;
- (void)triggerInterfaceChange;
- (void)handlePrimaryConnectionChanged:(id)changed oldPrimaryConnection:(id)connection;
- (void)notifyDelegateActiveConnectionDidChange;
- (void)handleNewConnectionSetup:(id)setup isInitialConnection:(BOOL)connection;
- (void)handleFirstConnectionSetup:(id)setup;
- (void)updateCachedConnectionState;
- (void)handleKeyExchangeCompleted;
- (void)setupSecureDataChannel;
- (void)redundancyController:(id)controller redundancyIntervalDidChange:(double)change;
- (void)redundancyController:(id)controller redundancyVectorDidChange:(struct { unsigned short x0; struct { unsigned char x10; unsigned char x1; } x[32] })change;
- (void)redundancyController:(id)controller redundancyPercentageDidChange:(unsigned int)change;
@end

#endif /* VCCallSession_h */
