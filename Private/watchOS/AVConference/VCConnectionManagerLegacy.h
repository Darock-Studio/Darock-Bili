//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCConnectionManagerLegacy_h
#define VCConnectionManagerLegacy_h
@import Foundation;

#include "VCConnectionManager.h"
#include "VCConnectionProtocol-Protocol.h"

@class NSString;

@interface VCConnectionManagerLegacy : VCConnectionManager

@property (retain, nonatomic) NSObject<VCConnectionProtocol> *pendingPrimaryConnection;
@property (retain, nonatomic) NSObject<VCConnectionProtocol> *pendingSecondaryConnection;
@property (copy, nonatomic) NSString *relayConnectionID;

/* instance methods */
- (void)setUpVTable;
- (id)init;
- (void)dealloc;
- (int)shouldNominateCandidatePair:(struct tagCANDIDATEPAIR { struct tagCANDIDATE { int x0; int x1; unsigned int x2; unsigned char x3[8] unsigned short x4; unsigned short x5; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x6; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x7; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x8; unsigned int x9; } x0; struct tagCANDIDATE { int x0; int x1; unsigned int x2; unsigned char x3[8] unsigned short x4; unsigned short x5; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x6; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x7; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x8; unsigned int x9; } x1; int x2; unsigned short x3; unsigned short x4; unsigned char x5[8] struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x6; unsigned int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; int x15; struct tagCANDIDATEPARIR * x16; } *)pair interfaceMask:(int)mask nominated:(int *)nominated demote:(int *)demote connectionPriority:(int *)priority replaceOnly:(int *)only;
- (int)shouldNominateCandidatePairInternal:(struct tagCANDIDATEPAIR { struct tagCANDIDATE { int x0; int x1; unsigned int x2; unsigned char x3[8] unsigned short x4; unsigned short x5; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x6; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x7; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x8; unsigned int x9; } x0; struct tagCANDIDATE { int x0; int x1; unsigned int x2; unsigned char x3[8] unsigned short x4; unsigned short x5; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x6; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x7; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x8; unsigned int x9; } x1; int x2; unsigned short x3; unsigned short x4; unsigned char x5[8] struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x6; unsigned int x7; int x8; int x9; int x10; int x11; int x12; int x13; int x14; int x15; struct tagCANDIDATEPARIR * x16; } *)internal interfaceMask:(int)mask nominated:(int *)nominated demote:(int *)demote connectionPriority:(int *)priority replaceOnly:(int *)only;
- (int)addConnection:(id)connection;
- (int)removeConnection:(id)connection;
- (int)removeConnectionWithIPPort:(struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } *)ipport isLocalInterface:(BOOL)interface;
- (int)removeConnectionWithIPPortInternal:(struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } *)internal isLocalInterface:(BOOL)interface;
- (void)reportConnection:(id)connection isInitialConnection:(BOOL)connection;
- (int)nominateConnection:(id)connection asPrimary:(BOOL)primary interfaceMask:(int)mask demote:(int *)demote connectionPriority:(int *)priority replaceOnly:(int *)only;
- (BOOL)shouldNominateConnection:(id)connection;
- (int)updateStateWithCurrentConnection:(id)connection asPrimary:(BOOL)primary interfaceMask:(int)mask demote:(int *)demote replaceOnly:(int *)only;
- (id)getPrimaryConnectionToBeCompared;
- (id)getSecondaryConnectionToBeCompared;
- (void)updateCellularMTU:(int)mtu;
- (void)updateCellularTech:(int)tech forLocalInterface:(BOOL)interface;
- (BOOL)shouldAcceptDataFromSourceDestinationInfo:(struct tagVCSourceDestinationInfo { int x0; union { struct { struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x0; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x1; struct { BOOL x0; unsigned short x1; } x2; } x0; struct { int x0; int x1; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x2; int x3; } x1; struct { unsigned int x0; struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; } x1; BOOL x2; } x2; struct { id x0; } x3; } x1; unsigned int x2; struct tagVCSourceDestinationInfo * x3; void * x4; } *)info;
- (void)updateSessionStats:(unsigned short)stats;
- (unsigned int)getPacketCountWithIndex:(unsigned char)index isOutgoing:(BOOL)outgoing;
- (unsigned int)getByteCountWithIndex:(unsigned char)index isOutgoing:(BOOL)outgoing;
- (void)reportLinkProbingStatsWithDuplicationJustStarted:(BOOL)started;
- (void)startActiveProbingWithOptions:(id)options;
- (void)stopActiveProbingWithOptions:(id)options;
- (void)queryProbingResultsWithOptions:(id)options;
- (void)flushLinkProbingStatusWithOptions:(id)options;
- (void)updateOneToOneBitrateCapsForConnection:(id)connection;
- (void)updateAllBitrateCapsForConnection:(id)connection;
- (void)updateNegotiatedSettingsOnetoOne:(id)one;
@end

#endif /* VCConnectionManagerLegacy_h */
