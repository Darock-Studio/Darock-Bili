//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef AVConference_h
#define AVConference_h
@import Foundation;

#include "AVConferenceXPCClient.h"

@class BOOL *, CALayer, NSDictionary, NSMutableDictionary, NSTimer;
@protocol AVConferenceDelegate, OS_dispatch_queue;

@interface AVConference : NSObject {
  /* instance variables */
  AVConferenceXPCClient *connection;
  id opaqueConf;
  BOOL useServer;
  NSDictionary *serverBag;
  BOOL _isUsingFrontCamera;
  NSMutableDictionary *_stateCacheForCallID;
  NSObject<OS_dispatch_queue> *_stateQueue;
  NSObject<OS_dispatch_queue> *_callbackQueue;
  BOOL shouldDisplayNetworkQualityGraph_;
  NSTimer *networkQualityUpdateTimer_;
  CALayer *networkQualityGraphLayer_;
}

@property (retain) CALayer *networkQualityGraphLayer;
@property (retain) NSTimer *networkQualityUpdateTimer;
@property BOOL shouldDisplayNetworkQualityGraph;
@property BOOL useViceroyBlobFormat;
@property (nonatomic) NSObject<AVConferenceDelegate> *delegate;
@property (nonatomic) BOOL microphoneMuted;
@property (nonatomic) BOOL inputFrequencyMeteringEnabled;
@property (nonatomic) BOOL outputFrequencyMeteringEnabled;
@property (nonatomic) BOOL outputMeteringEnabled;
@property (nonatomic) BOOL inputMeteringEnabled;
@property (readonly) float outputMeterLevel;
@property (readonly) float inputMeterLevel;
@property (nonatomic) BOOL requiresWifi;
@property (readonly) long long inputAudioPowerSpectrumToken;
@property (readonly) long long outputAudioPowerSpectrumToken;
@property (readonly) int localFrameHeight;
@property (readonly) int localFrameWidth;
@property BOOL enableSpeakerPhone;
@property (readonly) unsigned int natType;

/* class methods */
+ (void)refreshLoggingParameters;
+ (short)addressPointerFromBlob:(id)blob;
+ (id)externalAddressForSelfConnectionBlob:(id)blob;
+ (void)setAudioSessionProperties:(id)properties;
+ (void)startAudioSession;
+ (void)startAudioSessionWithCompletionHandler:(id /* block */)handler;
+ (void)stopAudioSession;
+ (BOOL)hasActiveAudioSession;
+ (unsigned int)doBlockingConnectionCheck;
+ (unsigned int)doBlockingConnectionCheck:(BOOL)check;

/* instance methods */
- (void)registerBlocksForVCNotifications;
- (void)deregisterBlocksForVCNotifications;
- (void)serverReconnected;
- (void)serverDied;
- (id)callStateForCallID:(id)id;
- (void)setCallState:(id)state forCallID:(id)id;
- (void)listenForNotifications;
- (void)stopListeningForNotifications;
- (void)updateGKSConnectivitySettings;
- (void)handleGKSConnectivitySettingsUpdate:(id)update;
- (id)init;
- (id)initWithClientUUID:(id)uuid;
- (id)initWithClientUUID:(id)uuid transportType:(unsigned int)type;
- (long long)initializeNewCall;
- (long long)initializeNewCallWithDeviceRole:(int)role;
- (long long)initializeNewCallWithDeviceRole:(int)role reportingHierarchyToken:(id)token;
- (void)warmupForCall;
- (void)dealloc;
- (BOOL)isUsingViceroyBlobFormat;
- (void)setSetSessionID:(id)id forCallID:(long long)id;
- (void)addGKSCallEvent:(id)event sessionID:(id)id;
- (void)sendARPLData:(id)arpldata toCallID:(long long)id;
- (void)sendData:(id)data forCallID:(long long)id encrypted:(BOOL)encrypted;
- (id)newRandomParticipantID;
- (void)inviteDictionaryForCallID:(long long)id remoteInviteDictionary:(id)dictionary nonCellularCandidateTimeout:(double)timeout block:(id /* block */)block queue:(id)queue;
- (id)callMetadataForCallID:(long long)id;
- (void)setPeerCN:(id)cn callID:(long long)id;
- (void)setPeerReportingIdentifier:(id)identifier sessionIdentifier:(id)identifier forCallID:(long long)id;
- (void)setSessionID:(id)id callID:(long long)id;
- (double)networkQualityForCallID:(long long)id;
- (id)convertBlobtoOldBlob:(id)blob;
- (id)convertBlobtoNewBlob:(id)blob;
- (BOOL)startConnectionWithCallID:(long long)id oldCallID:(long long)id usingInviteData:(id)data isCaller:(BOOL)caller relayResponseDict:(id)dict didOriginateRelayRequest:(BOOL)request capabilities:(id)capabilities idsSocket:(int)socket destination:(id)destination error:(id *)error;
- (BOOL)startConnectionWithCallID:(long long)id oldCallID:(long long)id usingInviteData:(id)data isCaller:(BOOL)caller relayResponseDict:(id)dict didOriginateRelayRequest:(BOOL)request capabilities:(id)capabilities idsSocket:(int)socket error:(id *)error;
- (BOOL)startConnectionWithCallID:(long long)id inviteData:(id)data isCaller:(BOOL)caller capabilities:(id)capabilities destination:(id)destination error:(id *)error;
- (BOOL)startConnectionWithCallID:(long long)id usingInviteData:(id)data isCaller:(BOOL)caller relayResponseDict:(id)dict didOriginateRelayRequest:(BOOL)request capabilities:(id)capabilities idsSocket:(int)socket error:(id *)error;
- (BOOL)startConnectionWithCallID:(long long)id oldCallID:(long long)id usingInviteData:(id)data isCaller:(BOOL)caller relayResponseDict:(id)dict didOriginateRelayRequest:(BOOL)request capabilities:(id)capabilities error:(id *)error;
- (BOOL)startConnectionWithCallID:(long long)id usingInviteData:(id)data isCaller:(BOOL)caller relayResponseDict:(id)dict didOriginateRelayRequest:(BOOL)request capabilities:(id)capabilities error:(id *)error;
- (void)stopCallID:(long long)id;
- (void)cancelCallID:(long long)id;
- (void)remoteCancelledCallID:(long long)id;
- (void)sendProtobuf:(id)protobuf withType:(long long)type forCallID:(long long)id;
- (void)setCallReport:(long long)report withReport:(id)report;
- (BOOL)setActive:(BOOL)active;
- (long long)lastActiveCallID;
- (void)setLastActiveCallID:(long long)id;
- (void)processRemoteIPChange:(id)ipchange callID:(long long)id;
- (BOOL)isOutputMeteringEnabled;
- (BOOL)isInputMeteringEnabled;
- (BOOL)isInputFrequencyMeteringEnabled;
- (BOOL)isOutputFrequencyMeteringEnabled;
- (BOOL)getIsSendingAudio:(BOOL *)audio callID:(long long)id error:(id *)error;
- (BOOL)getIsAudioPaused:(BOOL *)paused callID:(long long)id error:(id *)error;
- (BOOL)getIsVideoPaused:(BOOL *)paused callID:(long long)id error:(id *)error;
- (id)currentAudioInputDevice;
- (id)currentAudioOutputDevice;
- (BOOL)setAudioInputDevice:(id)device;
- (BOOL)setAudioOutputDevice:(id)device;
- (float)networkQuality;
- (BOOL)updateNetworkQualityGraph;
- (void)startNetworkQualityUpdateTimer;
- (void)stopNetworkQualityUpdateTimer;
- (void *)remoteVideoLayer;
- (void *)remoteVideoBackLayer;
- (void)setRemoteVideoLayer:(void *)layer;
- (void)setRemoteVideoBackLayer:(void *)layer;
- (long long)videoStreamTokenForCallID:(long long)id;
- (double)localFramerateForCallID:(long long)id;
- (double)localBitrateForCallID:(long long)id;
- (double)remoteFramerateForCallID:(long long)id;
- (double)remoteBitrateForCallID:(long long)id;
- (int)remoteFrameHeightForCallID:(long long)id;
- (int)remoteFrameWidthForCallID:(long long)id;
- (double)remotePacketLossRateForCallID:(long long)id;
- (double)localPacketLossRateForCallID:(long long)id;
- (double)roundTripTimeForCallID:(long long)id;
- (id)statsForCallID:(long long)id;
- (BOOL)isSpeakerPhoneEnabled;
- (BOOL)setSendingAudio:(BOOL)audio callID:(long long)id error:(id *)error;
- (BOOL)setPauseAudio:(BOOL)audio callID:(long long)id error:(id *)error;
- (BOOL)setPauseVideo:(BOOL)video callID:(long long)id error:(id *)error;
- (void)updateCapabilities:(id)capabilities forCallID:(long long)id;
- (id)capabilitiesForCallID:(long long)id;
- (BOOL)setServerInfo:(id)info;
- (id)localScreenAttributesForVideoAttributes:(id)attributes;
- (void)setLocalScreenAttributes:(id)attributes;
- (unsigned int)doBlockingConnectionCheck;
- (void)videoConference:(id)conference didStartSession:(BOOL)session withCallID:(unsigned int)id error:(id)error;
- (void)videoConference:(id)conference didStartSession:(BOOL)session withCallID:(unsigned int)id withUserInfo:(id)info error:(id)error;
- (void)videoConference:(id)conference didStopWithCallID:(unsigned int)id error:(id)error;
- (void)videoConference:(id)conference withCallID:(long long)id isSendingAudio:(BOOL)audio error:(id)error;
- (void)videoConference:(id)conference withCallID:(long long)id didPauseAudio:(BOOL)audio error:(id)error;
- (void)videoConference:(id)conference withCallID:(long long)id didPauseVideo:(BOOL)video error:(id)error;
- (void)videoConference:(id)conference didStopWithCallID:(unsigned int)id error:(id)error callMetadata:(id)metadata;
- (void)videoConference:(id)conference localIPChange:(id)ipchange withCallID:(unsigned int)id;
- (void)videoConference:(id)conference remoteMediaStalled:(BOOL)stalled callID:(unsigned int)id;
- (void)videoConference:(id)conference didReceiveFirstRemoteFrameForCallID:(unsigned int)id;
- (void)videoConference:(id)conference didRemoteVideoAttributesChange:(id)change forCallID:(unsigned int)id;
- (void)videoConference:(id)conference remoteAudioPaused:(BOOL)paused callID:(unsigned int)id;
- (void)videoConference:(id)conference remoteVideoPaused:(BOOL)paused callID:(unsigned int)id;
- (void)videoConference:(id)conference didRemoteScreenAttributesChange:(id)change forCallID:(unsigned int)id;
- (void)videoConference:(id)conference updateInputFrequencyLevel:(id)level;
- (void)videoConference:(id)conference updateOutputFrequencyLevel:(id)level;
- (void)videoConference:(id)conference updateInputMeterLevel:(float)level;
- (void)videoConference:(id)conference updateOutputMeterLevel:(float)level;
- (void)videoConference:(id)conference isRemoteAudioBelowThreshold:(BOOL)threshold;
- (void)videoConference:(id)conference inititiateRelayRequest:(unsigned int)request requestDict:(id)dict;
- (void)videoConference:(id)conference sendRelayUpdate:(unsigned int)update updateDict:(id)dict;
- (void)videoConference:(id)conference cancelRelayRequest:(unsigned int)request requestDict:(id)dict;
- (void)videoConference:(id)conference videoQualityNotificationForCallID:(unsigned int)id isDegraded:(BOOL)degraded isRemote:(BOOL)remote;
- (void)videoConference:(id)conference withCallID:(unsigned int)id networkHint:(BOOL)hint;
- (void)videoConference:(id)conference didReceiveARPLData:(id)arpldata forCallID:(unsigned int)id;
- (void)videoConference:(id)conference didReceiveData:(id)data forCallID:(unsigned int)id;
- (void)videoConference:(id)conference didChangeLocalVariablesForCallID:(unsigned int)id;
- (void)videoConference:(id)conference remoteAudioEnabled:(BOOL)enabled forCallID:(unsigned int)id;
- (void)videoConference:(id)conference localAudioEnabled:(BOOL)enabled forCallID:(unsigned int)id error:(id)error;
- (void)videoConference:(id)conference remoteCallingModeChanged:(unsigned int)changed forCallID:(unsigned int)id;
- (void)videoConference:(id)conference reinitializeCallForCallID:(unsigned int)id;
- (void)videoConference:(id)conference closeConnectionForCallID:(long long)id;
- (void)processRelayRequestResponse:(long long)response responseDict:(id)dict didOriginateRequest:(BOOL)request;
- (void)processRelayUpdate:(long long)update updateDict:(id)dict didOriginateRequest:(BOOL)request;
- (void)processCancelRelayRequest:(long long)request cancelDict:(id)dict didOriginateRequest:(BOOL)request;
- (void)shouldSendBlackFrames:(BOOL)frames callID:(long long)id;
- (void)setConferenceState:(unsigned int)state forCallID:(long long)id;
- (void)setConferenceVisualRectangle:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectangle forCallID:(long long)id;
- (void)setPeerProtocolVersion:(unsigned int)version forCallID:(long long)id;
- (BOOL)isMicrophoneMuted;
@end

#endif /* AVConference_h */
