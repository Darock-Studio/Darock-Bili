//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCPayloadUtils_h
#define VCPayloadUtils_h
@import Foundation;

@interface VCPayloadUtils : NSObject
/* class methods */
+ (BOOL)isUseCaseWatchContinuity:(int)continuity primaryPayload:(int)payload;
+ (BOOL)isPayloadSupportedInFaceTime:(int)time;
+ (unsigned int)sampleRateForPayload:(int)payload;
+ (unsigned int)sampleRateForCodecBandwidth:(int)bandwidth;
+ (unsigned int)audioCodecTypeForPayload:(int)payload;
+ (unsigned int)codecSamplesPerFrameForPayload:(int)payload blockSize:(double)size;
+ (double)opusSamplesPerFrameForSampleRate:(unsigned int)rate blockSize:(double)size;
+ (double)blockSizeForPayload:(int)payload sampleRate:(unsigned int)rate;
+ (unsigned int)codecSamplesPerFrameForPayload:(int)payload blockSize:(double)size sampleRate:(unsigned int)rate;
+ (BOOL)canSetBitrateForPayload:(int)payload;
+ (int)codecBandwidthForPayload:(int)payload;
+ (id)codecModesForAMR8kHz;
+ (id)codecModesForAMR16kHz;
+ (id)codecModesForEVS8kHz;
+ (id)codecModesForEVS16kHz;
+ (id)codecModesForEVS32kHz;
+ (id)supportedCodecModesForBandwidth:(int)bandwidth payload:(int)payload;
+ (id)allowedBitratesForPayload:(int)payload supportedBitrates:(id)bitrates supportedBandwidths:(id)bandwidths;
+ (int)codecRateModeForDesiredANBR:(unsigned int)anbr payload:(int)payload supportedBitrates:(id)bitrates supportedBandwidths:(id)bandwidths;
+ (BOOL)isEVSCodecModeSupported:(int)supported forBandwidth:(int)bandwidth;
+ (BOOL)isAMRCodecModeSupported:(int)supported forBandwidth:(int)bandwidth;
+ (BOOL)isCodecModeSupported:(int)supported forBandwidth:(int)bandwidth withPayload:(int)payload;
+ (BOOL)isEVSPayload:(int)evspayload;
+ (BOOL)isOpus4Channel48KhzPayload:(int)payload outFormat:(const struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format;
+ (BOOL)isFormatAACELDNonSBR48KHzStereo:(const struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)stereo;
+ (BOOL)skipBandWidthCheckForCodecRateModes:(int)modes supportedBitrates:(id)bitrates;
+ (BOOL)shouldUseCookieForPayload:(int)payload;
+ (BOOL)canBundleExternallyForPayload:(int)payload forBundlingScheme:(int)scheme operatingMode:(int)mode;
+ (unsigned int)internalBundleFactorForPayload:(int)payload;
+ (BOOL)shouldEnablePacketSizeLimitForAudioFormat:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format;
+ (float)qualityForPayload:(int)payload forBitrate:(unsigned int)bitrate;
+ (long long)codecTypeForPayload:(int)payload;
+ (int)payloadForCodecType:(long long)type;
+ (unsigned int)bitrateForCodecType:(long long)type mode:(int)mode;
+ (BOOL)supportsCodecRateModesForCodecType:(long long)type;
+ (BOOL)supportsCodecBandwidthUpdateForCodecType:(long long)type;
+ (unsigned int)bitrateForAMRCodecMode:(int)mode;
+ (unsigned int)bitrateForAMRWBCodecMode:(int)mode;
+ (unsigned int)bitrateForEVSCodecMode:(int)mode;
+ (int)vcAudioCodecBandwidthForAudioCodecBandwidth:(int)bandwidth;
+ (int)audioCodecBandwidthForVCAudioCodecBandwidth:(int)bandwidth;
@end

#endif /* VCPayloadUtils_h */
