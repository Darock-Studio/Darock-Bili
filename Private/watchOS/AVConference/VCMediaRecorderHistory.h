//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCMediaRecorderHistory_h
#define VCMediaRecorderHistory_h
@import Foundation;

#include "VCMediaRecorderHistoryBuffer.h"
#include "VCMediaRecorderHistoryBufferDelegate-Protocol.h"
#include "VCMovieWriterProtocol-Protocol.h"
#include "VideoAttributes.h"

@class NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface VCMediaRecorderHistory : NSObject<VCMediaRecorderHistoryBufferDelegate> {
  /* instance variables */
  NSMutableDictionary *_writers;
  NSObject<VCMovieWriterProtocol> *_writer;
  NSString *_masterTransactionID;
  NSMutableArray *_pendingRequests;
  NSObject<OS_dispatch_queue> *_recordingQueue;
  VCMediaRecorderHistoryBuffer *_frameBuffer;
  VCMediaRecorderHistoryBuffer *_localAudioBuffer;
  VCMediaRecorderHistoryBuffer *_remoteAudioBuffer;
  NSMutableDictionary *_completionHandlers;
  NSMutableDictionary *_stillImageURLs;
  VideoAttributes *_targetScreenAttributes;
  struct __CVPixelBufferPool * _bufferPool;
  struct CGSize { double width; double height; } _bufferPoolResolution;
  struct __CVPixelBufferPool * _copyPool;
  struct OpaqueVTPixelTransferSession * _transferSession;
  struct OpaqueVTPixelTransferSession * _copyTransferSession;
  int _captureHeight;
  int _captureWidth;
  BOOL _resize;
  BOOL _isFirstFrame;
  struct __CFAllocator * _audioSampleBufferAllocator;
  struct tagVCMediaRecorderHistoryAudioFormat { struct opaqueCMFormatDescription *figFormat; struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } basicFormat; } _localFormat;
  struct tagVCMediaRecorderHistoryAudioFormat { struct opaqueCMFormatDescription *figFormat; struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } basicFormat; } _remoteFormat;
  struct __CFAllocator * _frameAllocator;
  BOOL _retainPixelBufferEnabled;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _targetScreenAttributesLock;
}

@property (nonatomic) int imageType;
@property (nonatomic) int videoCodec;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)setFrameRate:(float)rate;
- (void)getPhotoWithTransactionID:(id)id timestamp:(unsigned int)timestamp completionHandler:(id /* block */)handler;
- (void)getLivePhotoWithTransactionID:(id)id timestamp:(unsigned int)timestamp completionHandler:(id /* block */)handler;
- (void)startRecording:(unsigned char)recording transactionID:(id)id timestamp:(unsigned int)timestamp completionHandler:(id /* block */)handler;
- (void)endRecording:(id)recording timestamp:(unsigned int)timestamp completionHandler:(id /* block */)handler;
- (id)_getActiveWriters;
- (void)historyBuffer:(id)buffer didDequeueSample:(struct opaqueCMSampleBuffer *)sample timestamp:(unsigned int)timestamp;
- (void)cancelRequestWithTransactionID:(id)id;
- (BOOL)writeToFileWithTimestamp:(unsigned int)timestamp transactionID:(id)id URL:(id *)url imageType:(int)type;
- (BOOL)writeToLivePhotoToFileWithFrame:(struct __CVBuffer *)frame transactionID:(id)id URL:(id *)url imageType:(int)type cameraStatusBits:(unsigned char)bits;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })setupStillImageWithTimestamp:(unsigned int)timestamp transactionID:(id)id visibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect cameraStatusBit:(char *)bit imageType:(int)type;
- (void)setupResizingSessionsWithVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cameraStatusBit:(unsigned char)bit;
- (void)setupWriterWithTransactionID:(id)id filePath:(id)path stillImageTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time visibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cameraStatusBit:(unsigned char)bit;
- (id)getFilePathWithTransactionID:(id)id type:(unsigned char)type;
- (int)rewriteMovieMetadataWithURL:(id)url transactionID:(id)id;
- (void)handleSinglePendingRequestWithTransactionID:(id)id sourceURL:(id)url;
- (void)handlePendingRequestWithError:(id)error;
- (void)handlePendingRequestSuccessWithSourceURL:(id)url;
- (void)handlePendingRequestsWithSourceURL:(id)url error:(id)error;
- (void)flushHistoryBuffers;
- (unsigned char)_mediaTypeForBuffer:(id)buffer;
- (void)appendSampleWithWriter:(id)writer buffer:(id)buffer sample:(struct opaqueCMSampleBuffer *)sample mediaType:(unsigned char)type;
- (void)registerDirectoryWithFilePath:(id)path;
- (void)setCompletionHandler:(id /* block */)handler forTransactionID:(id)id;
- (void)cleanupTransferSession;
@end

#endif /* VCMediaRecorderHistory_h */
