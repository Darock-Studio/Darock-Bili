//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCConnectionManagerIDS_h
#define VCConnectionManagerIDS_h
@import Foundation;

#include "VCConnectionManager.h"
#include "VCBitrateArbiter.h"
#include "VCSessionBitrateArbiter.h"

@interface VCConnectionManagerIDS : VCConnectionManager {
  /* instance variables */
  double _lastTimestampForRemoteSendingFromNonPrimary;
  double _lastTimestampPreferredRemoteInterfaceUpdated;
  unsigned int _sentPacketCount[256];
  unsigned int _sentByteCount[256];
  unsigned int _receivedPacketCount[256];
  unsigned int _receivedByteCount[256];
  VCSessionBitrateArbiter *_multiwayBitrateArbiter;
  VCBitrateArbiter *_oneToOneBitrateArbiter;
  BOOL _isMultiwaySession;
  BOOL _enableCoreMotionDetection;
  BOOL _optIntoExistingSubscribedStreams;
}

/* instance methods */
- (void)setUpVTable;
- (id)initWithMultiwayEnabled:(BOOL)enabled;
- (void)dealloc;
- (void)reportActiveConnectionOneToOne:(id)one isAudioOnly:(BOOL)only;
- (void)reportFirstActiveConnectionOneToOne:(id)one remoteOSVersion:(id)osversion redState:(BOOL)state isAudioOnly:(BOOL)only;
- (unsigned int)uplinkAudioOnlyBitrateCapOneToOne:(id)one;
- (unsigned int)uplinkBitrateCapOneToOne:(id)one;
- (unsigned int)oneToOneBitrateCapForConnectionWithType:(unsigned int)type;
- (unsigned int)uplinkBitrateCapForConnection:(id)connection;
- (unsigned int)downlinkBitrateCapForConnection:(id)connection;
- (int)addConnection:(id)connection;
- (void)handlePrimaryConnectionRemoved;
- (void)reselectPrimaryConnection;
- (void)handleSecondaryConnectionRemoved;
- (int)removeConnection:(id)connection;
- (void)resetParticipantGenerationCounter;
- (void)optOutAllStreamsForNonPrimaryConnections;
- (unsigned int)getPacketCountWithIndex:(unsigned char)index isOutgoing:(BOOL)outgoing;
- (unsigned int)getByteCountWithIndex:(unsigned char)index isOutgoing:(BOOL)outgoing;
- (id)getPrimaryConnectionToBeCompared;
- (id)getSecondaryConnectionToBeCompared;
- (void)updateCellularMTU:(int)mtu;
- (void)updateAllBitrateCapsForConnection:(id)connection;
- (void)updateAllBitrateCapsForConnectionInternal:(id)internal;
- (void)updateCellularTech:(int)tech forLocalInterface:(BOOL)interface;
- (void)updateOneToOneBitrateCapsForConnection:(id)connection;
- (void)internalUpdateOneToOneBitrateCapsForConnection:(id)connection;
- (void)setPreferredLocalInterfaceForDuplication:(unsigned char)duplication;
- (void)setPreferredRemoteInterfaceForDuplication:(unsigned char)duplication;
- (BOOL)shouldAcceptDataFromSourceDestinationInfo:(struct tagVCSourceDestinationInfo { int x0; union { struct { struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x0; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x1; struct { BOOL x0; unsigned short x1; } x2; } x0; struct { int x0; int x1; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x2; int x3; } x1; struct { unsigned int x0; struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; } x1; BOOL x2; } x2; struct { id x0; } x3; } x1; unsigned int x2; struct tagVCSourceDestinationInfo * x3; void * x4; } *)info;
- (void)updateSessionStats:(unsigned short)stats;
- (void)updateStatResponseResult:(id)result;
- (void)addDuplicationConnectionUpdateTelemetryWithSuggestedLinkTypeCombo:(id)combo payload:(id)payload;
- (void)resetPacketCountAndByteCountWithConnection:(id)connection;
- (BOOL)shouldKeepAllConnections;
- (BOOL)shouldPreferWiredConnections;
- (BOOL)shouldReplaceConnection:(id)connection withConnection:(id)connection;
- (BOOL)addConnectionToConnectionArray:(id)array;
- (void)removeFromConnectionArray:(id)array;
- (void)updateDuplicationStateWithConnectionOperation:(int)operation isLocalOnWiFi:(BOOL)fi isRemoteOnWiFi:(BOOL)fi;
- (void)updateNegotiatedSettingsOnetoOne:(id)one;
- (void)reportConnection:(id)connection isInitialConnection:(BOOL)connection;
- (void)reportCurrentPrimaryConnection;
- (void)useConnectionAsPrimary:(id)primary;
- (BOOL)shouldDropCurrentPrimaryConnectionWithConnectionStats:(struct { double x0; double x1; double x2; double x3; double x4; BOOL x5; int x6; } *)stats;
- (BOOL)shouldUpdateServerBasedConnection:(id)connection;
- (BOOL)canOptOutAllStreamsForConnection:(id)connection;
- (void)startActiveProbingWithOptions:(id)options;
- (void)stopActiveProbingWithOptions:(id)options;
- (void)queryProbingResultsWithOptions:(id)options;
- (void)flushLinkProbingStatusWithOptions:(id)options;
- (void)didUpdateLinkPreferenceOrder:(id)order;
- (void)didLinkProbingLockdownEnd;
- (void)requestStatsWithOptions:(id)options;
- (void)didReceiveStatsResponse:(BOOL)response;
- (struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; } *)getConnectionSelectionPolicy;
- (void)updateConnectionSelectionPolicyWithPreferE2E:(BOOL)e;
- (id)secondaryConnection;
- (id)connectionForDuplication;
- (id)lastPrimaryConnectionInUse;
- (void)setSecondaryConnection:(id)connection;
- (void)setConnectionForDuplication:(id)duplication;
- (void)setLastPrimaryConnectionInUse:(id)use;
- (void)setOptIntoExistingSubscribedStreams:(BOOL)streams;
- (BOOL)optIntoExistingSubscribedStreams;
@end

#endif /* VCConnectionManagerIDS_h */
