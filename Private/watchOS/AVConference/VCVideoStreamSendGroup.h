//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCVideoStreamSendGroup_h
#define VCVideoStreamSendGroup_h
@import Foundation;

#include "VCMediaStreamSendGroup.h"
#include "VCMediaCaptureController-Protocol.h"
#include "VCMediaStreamDelegate-Protocol.h"
#include "VCMediaStreamSendSyncSourceDelegate-Protocol.h"
#include "VCRedundancyControllerDelegate-Protocol.h"
#include "VCSessionUplinkVideoStreamController.h"
#include "VCSessionUplinkVideoStreamControllerDelegate-Protocol.h"
#include "VCVideoCaptureClient-Protocol.h"
#include "VCVideoRule.h"
#include "VCVideoSink-Protocol.h"

@class NSMutableArray, NSMutableDictionary, NSMutableSet, NSString;

@interface VCVideoStreamSendGroup : VCMediaStreamSendGroup<VCMediaStreamDelegate, VCSessionUplinkVideoStreamControllerDelegate, VCRedundancyControllerDelegate, VCMediaCaptureController, VCVideoSink, VCVideoCaptureClient, VCMediaStreamSendSyncSourceDelegate> {
  /* instance variables */
  int _captureSource;
  atomic unsigned char _videoPriority;
  unsigned char _lastVideoPriority;
  BOOL _videoPriorityEnabled;
  long long _maxSupportedMultiwayVideoResolution;
  struct CGSize { double width; double height; } _maxScreenCaptureSize;
  int _maxSupportedCaptureFrameRate;
  NSMutableSet *_videoPayloadTypes;
  VCSessionUplinkVideoStreamController *_uplinkVideoStreamController;
  struct tagVCMemoryPool { struct { void * x0; long long x1; } x0; unsigned long long x1; } * _videoRedundancyPool;
  struct opaqueCMSimpleQueue * _videoRedundancyChangeEventQueue;
  double _fecRatio;
  VCVideoRule *_captureVideoRule;
  NSMutableDictionary *_pendingActiveUplinkStreams;
  NSMutableArray *_temporalStreamsIDs;
  id _clientCaptureController;
  unsigned int _activeTemporalTierBitmap;
  id _videoSinkDelegate;
  BOOL _isStreamInputCaptureSource;
  BOOL _hasPeerSubscribedStreams;
  BOOL _allowSuspendProvisionedStreams;
  unsigned int _totalNumFramesReceived;
  unsigned int _totalNumFramesProcessed;
  BOOL _initTime;
}

@property (nonatomic) int captureFrameRate;
@property (nonatomic) unsigned int mediaQueueSize;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithConfig:(id)config;
- (void)dealloc;
- (BOOL)setupStreamGroupWithConfig:(id)config;
- (BOOL)shouldUseInternalRedundancyController;
- (BOOL)setupRedundancySettings;
- (id)setupRedundancyControllerForMode:(unsigned int)mode;
- (void)setupPayloadTypes;
- (void)cleanupRedundancySettings;
- (long long)maxCaptureResolution;
- (int)maxCaptureFrameRateForMode:(unsigned int)mode;
- (int)maxCaptureCameraFrameRateForMode:(unsigned int)mode;
- (id)uplinkVideoStreamControllerForMode:(unsigned int)mode;
- (BOOL)generateKeyFrameWithStreamID:(id)id firType:(int)type;
- (id)willStart;
- (void)updateEnabledState;
- (void)setupVideoPriority;
- (void)flushVideoRedundancyEventQueue;
- (struct CGSize { double x0; double x1; })getCaptureEncodingSize;
- (void)dispatchedSetCaptureVideoRule:(id)rule;
- (void)registerForVideoCapture:(int)capture;
- (void)deregisterForVideoCapture;
- (unsigned int)getPixelFormat;
- (id)registerForScreenCapture;
- (void)deregisterForScreenCapture;
- (void)updateSuspendedState;
- (void)dispatchedUpdateActiveMediaStreamIDs:(id)ids withTargetBitrate:(unsigned int)bitrate mediaBitrates:(id)bitrates rateChangeCounter:(unsigned int)counter;
- (id)activeStreamKeys;
- (BOOL)updateUplinkStreamsForPeerSubscribedStreams:(id)streams;
- (void)updateUplinkBitrateCapCell:(unsigned int)cell activeStreamIDs:(id)ids;
- (void)updateUplinkBitrateCapWifi:(unsigned int)wifi activeStreamIDs:(id)ids;
- (void)setActiveConnection:(id)connection uplinkBitrateCap:(unsigned int)cap activeMediaStreamIDs:(id)ids mediaBitrates:(id)bitrates rateChangeCounter:(unsigned int)counter;
- (id)streamDescriptionForMediaStreamConfig:(id)config;
- (BOOL)shouldSubscribeToStreamID:(id)id peerSubscribedStreams:(id)streams;
- (BOOL)shouldCompoundListIgnoreStream:(id)stream streamConfig:(id)config activeStreamIds:(id)ids;
- (BOOL)enableRedundancy:(BOOL)redundancy;
- (id)startCapture;
- (id)stopCapture;
- (id)captureConfigForScreenShare;
- (void)registerConfigForScreenShare;
- (void)registerClientForScreenShare;
- (void)deregisterClientForScreenShare;
- (void)controller:(id)controller didChangeActiveVideoStreams:(id)streams;
- (void)sourceFrameRateDidChange:(unsigned int)change;
- (BOOL)onVideoFrame:(struct opaqueCMSampleBuffer *)frame frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time attribute:(struct { BOOL x0; BOOL x1; int x2; BOOL x3; BOOL x4; int x5; unsigned char x6; })attribute;
- (id /* block */)copyOnVideoFrameBlock;
- (void)avConferencePreviewError:(id)error;
- (id)clientCaptureRule;
- (void)thermalLevelDidChange:(int)change;
- (void)cameraAvailabilityDidChange:(BOOL)change;
- (void)reactionDidStart:(id)start;
- (void)frameRateIsBeingThrottled:(int)throttled thermalLevelDidChange:(BOOL)change powerLevelDidChange:(BOOL)change;
- (void)redundancyController:(id)controller redundancyPercentageDidChange:(unsigned int)change;
- (void)redundancyController:(id)controller redundancyIntervalDidChange:(double)change;
- (void)redundancyController:(id)controller redundancyVectorDidChange:(struct { unsigned short x0; struct { unsigned char x10; unsigned char x1; } x[32] })change;
- (void)vcMediaStreamDidRTPTimeOut:(id)out;
- (void)vcMediaStreamDidRTCPTimeOut:(id)out;
- (void)vcMediaStreamDidDecryptionTimeOut:(id)out;
- (void)updateSendSampleRTPTimestamp:(unsigned int)rtptimestamp sampleRate:(double)rate systemTime:(double)time;
- (void)computeMaxScreenCaptureSize;
- (unsigned long long)maxStreamFrameRate;
- (void)collectAndLogChannelMetrics:(struct { unsigned int x0; unsigned int x1[5] unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)metrics;
@end

#endif /* VCVideoStreamSendGroup_h */
