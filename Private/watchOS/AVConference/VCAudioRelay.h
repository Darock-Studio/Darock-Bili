//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCAudioRelay_h
#define VCAudioRelay_h
@import Foundation;

#include "VCAudioRelayIO.h"
#include "VCBasebandCodecNotifications-Protocol.h"

@class NSString;
@protocol OS_dispatch_source;

@interface VCAudioRelay : NSObject<VCBasebandCodecNotifications> {
  /* instance variables */
  struct OpaqueFigThread * _relayThread;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _wakeUpMutex;
  struct _opaque_pthread_cond_t { long long __sig; char x[40] __opaque; } _wakeUpCondition;
  struct tagVCAudioRelayIOInfo { VCAudioRelayIO *relayIO; struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } lock; NSString *ioFriendlyName; NSString *audioRecordingFileName; } _remoteIOInfo;
  struct tagVCAudioRelayIOInfo { VCAudioRelayIO *relayIO; struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } lock; NSString *ioFriendlyName; NSString *audioRecordingFileName; } _clientIOInfo;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _relayLock;
  struct _VCRemoteCodecInfo { unsigned int codecType; double sampleRate; } _remoteCodecInfo;
  struct timespec { long long tv_sec; long long tv_nsec; } _nextWakeUpTime;
  struct timespec { long long tv_sec; long long tv_nsec; } _nextWakeUpInterval;
  unsigned long long _ptpWakeUpTime;
  unsigned long long _nextWakeUpHostMachTime;
}

@property (readonly) struct OpaqueAudioConverter * remoteToClientConverter;
@property (readonly) struct OpaqueAudioConverter * clientToRemoteConverter;
@property (copy, nonatomic) VCAudioRelayIO *remoteIO;
@property (copy, nonatomic) VCAudioRelayIO *clientIO;
@property (readonly) NSObject<OS_dispatch_source> *periodicHealthPrintDispatchSource;
@property (readonly) unsigned int blocksRelayedCount;
@property (readonly) float clientUplinkPowerMovingAverage;
@property (readonly) float clientDownlinkPowerMovingAverage;
@property (readonly) BOOL isRelayRunning;
@property (readonly) double IOBufferDuration;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)releasePTPClock;
- (void)lock;
- (void)unlock;
- (BOOL)setIOBufferDuration:(double)duration withError:(id *)error;
- (double)ioBufferDurationWithFirstIO:(id)io secondIO:(id)io;
- (void)updateRemoteCodecInfo:(const struct _VCRemoteCodecInfo { unsigned int x0; double x1; } *)info;
- (BOOL)setRemoteIO:(id)io withError:(id *)error;
- (BOOL)setClientIO:(id)io withError:(id *)error;
- (BOOL)canSetPropertyWithError:(id *)error;
- (BOOL)startRelayIO:(struct tagVCAudioRelayIOInfo { id x0; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x1; id x2; id x3; } *)io otherRelayIO:(struct tagVCAudioRelayIOInfo { id x0; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x1; id x2; id x3; } *)io;
- (void)internalStopRelayThread;
- (void)stopRelayIO:(struct tagVCAudioRelayIOInfo { id x0; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x1; id x2; id x3; } *)io otherRelayIO:(struct tagVCAudioRelayIOInfo { id x0; struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x1; id x2; id x3; } *)io;
- (BOOL)startClientIO;
- (BOOL)startRemoteIO;
- (void)stopClientIO;
- (void)stopRemoteIO;
- (BOOL)setNetworkClockID:(unsigned long long)id withError:(id *)error;
- (BOOL)startRelayThreadWithError:(id *)error;
- (void)stopRelayThread;
- (BOOL)createAudioConvertersWithError:(id *)error;
- (struct OpaqueAudioConverter *)newAudioConverterWithInputFormat:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format outputFormat:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)format withError:(id *)error;
- (void)destroyAudioConverters;
- (void)printStreamFormats;
- (float)rmsPowerOfBuffer:(float *)buffer numSamples:(unsigned int)samples;
- (void)forwardSamplesFromIO:(id)io toIO:(id)io withConverter:(struct OpaqueAudioConverter *)converter withHostTime:(double)time;
- (void)sleepForTime:(struct timespec { long long x0; long long x1; } *)time;
- (void)updateRealTimeStats;
- (void)startPeriodicHealthPrint;
- (void)relayProcessSamples;
- (void)relayCallback;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x0; double x1; } *)codec;
@end

#endif /* VCAudioRelay_h */
