//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VideoConference_h
#define VideoConference_h
@import Foundation;

#include "VCObject.h"
#include "GKNATObserver.h"
#include "GKNATObserverDelegate-Protocol.h"
#include "VCAudioIO.h"
#include "VCAudioIODelegate-Protocol.h"
#include "VCAudioIOSink-Protocol.h"
#include "VCAudioIOSource-Protocol.h"
#include "VCAudioPowerLevelMonitor.h"
#include "VCAudioPowerLevelMonitorDelegate-Protocol.h"
#include "VCAudioPowerSpectrumSource.h"
#include "VCCallSession.h"
#include "VCCallSessionDelegate-Protocol.h"
#include "VCMediaRecorder.h"
#include "VCMediaRecorderTransportDelegate-Protocol.h"
#include "VCVideoCaptureClient-Protocol.h"
#include "VCVideoRule.h"
#include "VCVideoSink-Protocol.h"
#include "VideoConferenceDelegate-Protocol.h"
#include "VideoConferenceManager.h"

@class BOOL *, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue, VideoConferenceChannelQualityDelegate, VideoConferenceSpeakingDelegate;

@interface VideoConference : VCObject<VCCallSessionDelegate, VCVideoSink, VCVideoCaptureClient, GKNATObserverDelegate, VCAudioIOSource, VCAudioIOSink, VCAudioIODelegate, VCAudioPowerLevelMonitorDelegate, VCMediaRecorderTransportDelegate> {
  /* instance variables */
  int _clientPid;
  id _captionsDelegate;
  VCAudioIO *_audioIO;
  struct opaqueVCAudioBufferList * _sourceBuffer;
  struct opaqueVCAudioBufferList * _sinkBuffer;
  struct opaqueVCAudioBufferList * _sinkBufferMix;
  VideoConferenceManager *manager;
  struct _opaque_pthread_rwlock_t { long long __sig; char x[192] __opaque; } stateLock;
  NSArray *_sessionArray;
  NSMutableArray *_startedSessions;
  struct opaqueVCFFTMeter * _inputFFTMeter;
  struct opaqueVCFFTMeter * _outputFFTMeter;
  VCAudioPowerSpectrumSource *_inputAudioPowerSpectrumSource;
  VCAudioPowerSpectrumSource *_outputAudioPowerSpectrumSource;
  double dAudioHostTime;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } xRemoteLayer;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } xAudioTS;
  unsigned int dwAudioTS;
  BOOL forceNoICE;
  VCCallSession *currentFocusSession;
  NSArray *mutedPeers;
  NSArray *connectedPeers;
  unsigned char speakingArray[16];
  float longTerm;
  float shortTerm;
  BOOL isTalking;
  unsigned int talkTime;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } recvRTPTimeStamp;
  BOOL useRateControl;
  unsigned char requestedCameraType;
  NSDictionary *natTypeDictionary;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } natMutex;
  unsigned int lastSentAudioSampleTime;
  VCAudioPowerLevelMonitor *_remoteAudioPowerLevelMonitor;
  GKNATObserver *natObserver;
  unsigned int mostRecentStartedCall;
  BOOL _isWarmedUp;
  BOOL bweOperatingModeInitialized;
  BOOL useNewBWEMode;
  BOOL useActiveProbingSenderLog;
  BOOL useFakeLargeFrameMode;
  BOOL shouldResumeAudio;
  BOOL shouldResumeVideo;
  unsigned int timeStampUpdateCounter;
  NSObject<OS_dispatch_queue> *delegateNotificationQueue;
  int conferenceOperatingMode;
  void * _spatialMetadataEntry;
  unsigned int _audioChannelIndex;
  void * _spatialMetadata;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) VCMediaRecorder *vcMediaRecorder;
@property (retain, nonatomic) NSMutableDictionary *sessionDict;
@property (nonatomic) BOOL useCompressedConnectionData;
@property BOOL enableSpeakerPhone;
@property (nonatomic) BOOL requiresWifi;
@property (nonatomic) unsigned int transportType;
@property (nonatomic) BOOL shouldPrioritizeParticipantIDForSIPInvite;
@property (nonatomic) NSObject<VideoConferenceDelegate> *delegate;
@property (nonatomic) BOOL useViceroyBlobFormat;
@property (nonatomic) BOOL microphoneMuted;
@property (nonatomic) BOOL outputMeteringEnabled;
@property (nonatomic) BOOL inputMeteringEnabled;
@property (nonatomic) BOOL inputFrequencyMeteringEnabled;
@property (nonatomic) BOOL outputFrequencyMeteringEnabled;
@property (readonly, nonatomic) float outputMeterLevel;
@property (readonly, nonatomic) float inputMeterLevel;
@property (readonly, nonatomic) long long inputAudioPowerSpectrumToken;
@property (readonly, nonatomic) long long outputAudioPowerSpectrumToken;
@property (nonatomic) int chatMode;
@property (nonatomic) BOOL isFocus;
@property (copy, nonatomic) NSString *currentFocus;
@property (nonatomic) int packetsPerBundle;
@property BOOL hasMic;
@property float conferenceVolume;
@property NSObject<VideoConferenceSpeakingDelegate> *speakingDelegate;
@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
@property unsigned int talkingPeersLimit;
@property BOOL disableVAD;
@property BOOL shouldTimeoutPackets;
@property int upstreamBandwidth;
@property int downstreamBandwidth;
@property (readonly) int localFrameHeight;
@property (readonly) int localFrameWidth;
@property (nonatomic) unsigned int preferredCodec;
@property (nonatomic) BOOL isUsingSuppression;
@property (nonatomic) BOOL isGKVoiceChat;
@property (readonly, nonatomic) VCVideoRule *conferenceCaptureRule;
@property unsigned int lastActiveCall;
@property BOOL isValid;
@property (readonly) int deviceRole;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)terminateProcess:(id)process terminateSource:(id)source agent:(struct opaqueRTCReporting *)agent;

/* instance methods */
- (void)triggerInterfaceChange;
- (void)NATTypeDictionaryUpdated:(id)updated;
- (id)clientCaptureRule;
- (BOOL)initiateResolutionChangeToWidth:(int)width height:(int)height rate:(int)rate;
- (BOOL)onVideoFrame:(struct opaqueCMSampleBuffer *)frame frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time attribute:(struct { BOOL x0; BOOL x1; int x2; BOOL x3; BOOL x4; int x5; unsigned char x6; })attribute;
- (void)avConferencePreviewError:(id)error;
- (void)avConferenceScreenCaptureError:(id)error;
- (void)shouldSendBlackFrame:(BOOL)frame callID:(id)id;
- (void)setConferenceState:(unsigned int)state forCallID:(unsigned int)id;
- (void)setConferenceVisualRectangle:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectangle forCallID:(unsigned int)id;
- (void)thermalLevelDidChange:(int)change;
- (void)cameraAvailabilityDidChange:(BOOL)change;
- (void)sourceFrameRateDidChange:(unsigned int)change;
- (void)reactionDidStart:(id)start;
- (void)session:(id)session withCallID:(unsigned int)id networkHint:(BOOL)hint;
- (void)session:(id)session withCallID:(unsigned int)id videoIsDegraded:(BOOL)degraded isRemote:(BOOL)remote;
- (void)session:(id)session localIPChange:(id)ipchange withCallID:(unsigned int)id;
- (void)session:(id)session connectionDidChangeWithLocalInterfaceType:(id)type remoteInterfaceType:(id)type callID:(unsigned int)id;
- (void)session:(id)session didStart:(BOOL)start connectionType:(unsigned int)type localInterfaceType:(id)type remoteInterfaceType:(id)type error:(id)error;
- (void)session:(id)session cleanUpWithDelay:(long long)delay error:(id)error;
- (void)session:(id)session didStopWithError:(id)error;
- (void)session:(id)session receivedNoPacketsForSeconds:(double)seconds;
- (void)session:(id)session remoteMediaStalled:(BOOL)stalled;
- (void)session:(id)session packMeters:(char *)meters withLength:(char *)length;
- (void)session:(id)session didChangeVideoRule:(id)rule;
- (BOOL)session:(id)session receivedRemoteFrame:(struct __CVBuffer *)frame atTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time withScreenAttributes:(id)attributes videoAttributes:(id)attributes isFirstFrame:(BOOL)frame isVideoPaused:(BOOL)paused;
- (void)session:(id)session didReceiveARPLData:(id)arpldata fromCallID:(unsigned int)id;
- (void)session:(id)session didReceiveData:(id)data messageType:(unsigned int)type withCallID:(unsigned int)id;
- (BOOL)session:(id)session startVideoSend:(id *)send captureRuleWifi:(id)wifi captureRuleCell:(id)cell interface:(int)interface isUnpausing:(BOOL)unpausing;
- (BOOL)registerForVideoFramesWithDeviceRole:(int)role captureRule:(id)rule isUnpausing:(BOOL)unpausing;
- (BOOL)session:(id)session startVideoReceive:(id *)receive;
- (BOOL)stopVideoSend:(BOOL)send error:(id *)error;
- (BOOL)deregisterForVideoFramesWithDeviceRole:(int)role;
- (BOOL)session:(id)session stopVideoReceive:(id *)receive isPausing:(BOOL)pausing;
- (BOOL)session:(id)session didStopVideoIO:(BOOL)io error:(id *)error;
- (void)session:(id)session isSendingAudio:(BOOL)audio error:(id)error;
- (void)session:(id)session didPauseAudio:(BOOL)audio error:(id)error;
- (void)session:(id)session didPauseVideo:(BOOL)video error:(id)error;
- (void)remoteAudioDidPause:(BOOL)pause callID:(unsigned int)id;
- (void)remoteVideoDidPause:(BOOL)pause callID:(unsigned int)id;
- (void)session:(id)session initiateRelayRequest:(id)request;
- (void)session:(id)session sendRelayResponse:(id)response;
- (void)session:(id)session cancelRelayRequest:(id)request;
- (void)session:(id)session didChangeRemoteScreenAttributes:(id)attributes;
- (void)didChangeLocalVariablesForSession:(id)session;
- (void)session:(id)session remoteAudioEnabled:(BOOL)enabled withCallID:(unsigned int)id;
- (void)session:(id)session localAudioEnabled:(BOOL)enabled withCallID:(unsigned int)id error:(id)error;
- (void)session:(id)session remoteCallingModeChanged:(unsigned int)changed withCallID:(unsigned int)id;
- (void)setBWEOptions:(BOOL)bweoptions UseNewBWEMode:(BOOL)bwemode FakeLargeFrameMode:(BOOL)mode ProbingSenderLog:(BOOL)log;
- (void)session:(id)session changeVideoRulesToCaptureRule:(id)rule encodeRule:(id)rule featureListString:(id)string;
- (void)session:(id)session startAudioWithFarEndVersionInfo:(struct VoiceIOFarEndVersionInfo { unsigned char x0[64] unsigned char x1[64] unsigned int x2; } *)info internalFrameFormat:(const struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x0; unsigned int x1; } *)format completionHandler:(id /* block */)handler;
- (void)session:(id)session stopAudioWithCompletionHandler:(id /* block */)handler;
- (void)session:(id)session setRemoteBasebandCodecType:(unsigned int)type sampleRate:(double)rate;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })audioIOFormat;
- (void)session:(id)session setMomentsCapabilities:(unsigned int)capabilities imageType:(int)type videoCodec:(int)codec;
- (unsigned int)momentsCapabilitiesWithNegotiationBlobMomentsSettings_Capabilities:(int)capabilities;
- (void)session:(id)session didReceiveMomentsRequest:(id)request;
- (void)wrlock;
- (int)tryrdlock;
- (void)rdlock;
- (void)unlock;
- (void)stopCallID:(unsigned int)id didRemoteCancel:(BOOL)cancel error:(id)error;
- (void)cancelCallID:(unsigned int)id error:(id)error;
- (void)cleanupSession:(id)session withDelay:(unsigned long long)delay;
- (void)cleanupProc:(id)proc;
- (void)defaultCleanupSession:(id)session;
- (void)threadSafeCleanupSession:(id)session;
- (void)cleanupSession:(id)session didRemoteCancel:(BOOL)cancel;
- (BOOL)setPauseAudio:(BOOL)audio;
- (BOOL)setPauseVideo:(BOOL)video;
- (void)markUnfinishedSessions;
- (BOOL)matchesCallID:(unsigned int)id;
- (BOOL)matchesOpenSessionForParticipantID:(id)id;
- (unsigned int)callIDForOpenSessionWithParticipantID:(id)id;
- (id)openSessionForParticipant:(id)participant;
- (BOOL)matchesParticipantID:(id)id;
- (id)sessionForParticipantID:(id)id;
- (BOOL)conferenceMatchesSourceDestinationInfo:(struct tagVCSourceDestinationInfo { int x0; union { struct { struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x0; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x1; struct { BOOL x0; unsigned short x1; } x2; } x0; struct { int x0; int x1; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x2; int x3; } x1; struct { unsigned int x0; struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; } x1; BOOL x2; } x2; struct { id x0; } x3; } x1; unsigned int x2; struct tagVCSourceDestinationInfo * x3; void * x4; } *)info;
- (id)sessionForSourceDestinationInfo:(struct tagVCSourceDestinationInfo { int x0; union { struct { struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x0; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x1; struct { BOOL x0; unsigned short x1; } x2; } x0; struct { int x0; int x1; struct tagIPPORT { int x0; char x1[16] union { unsigned int x0; unsigned char x1[16] } x2; unsigned short x3; } x2; int x3; } x1; struct { unsigned int x0; struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; } x1; BOOL x2; } x2; struct { id x0; } x3; } x1; unsigned int x2; struct tagVCSourceDestinationInfo * x3; void * x4; } *)info;
- (BOOL)hasSessionWaitingForSIPInvite;
- (id)loopbackSessionWaitingForSIPInvite;
- (id)sessionForIncomingParticipantID:(id)id;
- (int)stateForCallID:(unsigned int)id;
- (int)sipCallbackNotification:(int)notification callID:(unsigned int)id msgIn:(const char *)in msgOut:(char *)out optional:(void *)optional confIndex:(int *)index;
- (BOOL)updateSpeaking:(unsigned int)speaking timeStamp:(unsigned int)stamp;
- (unsigned int)pruneQuietestPeers:(unsigned int)peers talking:(unsigned int)talking mask:(unsigned int)mask meters:(char *)meters;
- (unsigned int)calculateTalkingMaskAtTimeStamp:(unsigned int)stamp;
- (void)calculateMixingArrays:(unsigned int *)arrays talkingMask:(unsigned int)mask;
- (void)captureAsFocus:(struct opaqueVCAudioBufferList *)focus;
- (void)captureAsFocusClient:(struct opaqueVCAudioBufferList *)client;
- (void)updateAudioTimestampsForSession:(id)session withNewSampleTime:(unsigned int)time hostTime:(double)time numSamples:(int)samples;
- (void)captureMeshMode:(struct opaqueVCAudioBufferList *)mode;
- (void)updateMeter:(unsigned char)meter forParticipant:(id)participant atIndex:(unsigned int)index;
- (void)updateMeters:(unsigned short)meters;
- (BOOL)recvSamplesForSession:(id)session sampleBuffer:(struct opaqueVCAudioBufferList *)buffer;
- (int)pullDecodedAsFocus:(struct opaqueVCAudioBufferList *)focus;
- (int)pullDecodedAsFocusClient:(struct opaqueVCAudioBufferList *)client;
- (int)pullDecodedMeshMode:(struct opaqueVCAudioBufferList *)mode;
- (id)initWithClientPid:(int)pid;
- (void)dealloc;
- (unsigned int)initializeNewCallWithDeviceRole:(int)role;
- (unsigned int)initializeNewCallWithDeviceRole:(int)role reportingHierarchyToken:(id)token;
- (id)newSessionWithDeviceRole:(int)role reportingHierarchyToken:(id)token;
- (void)cleanupManager;
- (void)sendARPLData:(id)arpldata toCallID:(unsigned int)id;
- (void)sendData:(id)data toCallID:(unsigned int)id encrypted:(BOOL)encrypted;
- (void)warmupForCall;
- (void)setupNATObserver;
- (int)natType;
- (double)packetLossRateForCallID:(unsigned int)id;
- (double)networkQualityForCallID:(unsigned int)id;
- (BOOL)isOutputMeteringEnabled;
- (BOOL)isInputFrequencyMeteringEnabled;
- (BOOL)isOutputFrequencyMeteringEnabled;
- (BOOL)isInputMeteringEnabled;
- (void)cleanupQueues;
- (void)inviteDataForParticipantID:(id)id callID:(unsigned int)id remoteInviteData:(id)data nonCellularCandidateTimeout:(unsigned long long)timeout block:(id /* block */)block queue:(id)queue caller:(id)caller;
- (void)connectionBlobForParticipantID:(id)id callID:(unsigned int)id block:(id /* block */)block queue:(id)queue caller:(id)caller;
- (id)connectionBlobForParticipantID:(id)id callID:(unsigned int *)id error:(id *)error;
- (id)inviteDataForParticipantID:(id)id callID:(unsigned int *)id remoteInviteData:(id)data nonCellularCandidateTimeout:(double)timeout error:(id *)error;
- (int)natTypeForCallSessions:(const char *)sessions;
- (void)notifyDelegateOfLocalVariablesChange;
- (id)callMetadataForCallID:(unsigned int)id;
- (void)processRemoteIPChange:(id)ipchange callID:(unsigned int)id;
- (void)mediaRecorder:(id)recorder shouldProcessRequest:(id)request recipientID:(id)id;
- (void)vcAudioPowerLevelMonitor:(id)monitor isAudioBelowThreshold:(BOOL)threshold;
- (BOOL)getIsVideoPaused:(BOOL *)paused callID:(unsigned int)id error:(id *)error;
- (BOOL)getIsAudioPaused:(BOOL *)paused callID:(unsigned int)id error:(id *)error;
- (BOOL)shouldSendAudioForCallID:(unsigned int)id;
- (void)setSendAudio:(BOOL)audio forCallID:(unsigned int)id;
- (BOOL)setPauseAudio:(BOOL)audio callID:(unsigned int)id error:(id *)error;
- (BOOL)setPauseVideo:(BOOL)video callID:(unsigned int)id error:(id *)error;
- (void)setPeerCN:(id)cn callID:(unsigned int)id;
- (void)setSessionID:(id)id callID:(unsigned int)id;
- (void)setPeerReportingID:(id)id sessionID:(id)id callID:(unsigned int)id;
- (void)updateCapabilities:(id)capabilities forSession:(id)session;
- (void)updateCapabilities:(id)capabilities forCallID:(unsigned int)id;
- (BOOL)shouldReinitializeCallWithDuration:(double)duration forCallID:(unsigned int)id;
- (void)setConferenceOperatingMode:(int)mode;
- (int)conferenceOperatingMode;
- (BOOL)startConnectionWithParticipantID:(id)id callID:(unsigned int)id oldCallID:(unsigned int)id usingInviteData:(id)data isCaller:(BOOL)caller relayResponseDict:(id)dict didOriginateRelayRequest:(BOOL)request capabilities:(id)capabilities idsSocket:(int)socket destination:(id)destination error:(id *)error;
- (BOOL)startConnectionWithParticipantID:(id)id callID:(unsigned int)id usingInviteData:(id)data isCaller:(BOOL)caller relayResponseDict:(id)dict didOriginateRelayRequest:(BOOL)request capabilities:(id)capabilities idsSocket:(int)socket destination:(id)destination error:(id *)error;
- (void)setUpAudioIO:(int)io callID:(unsigned int)id;
- (int)setupSpatialAudioWithCallID:(unsigned int)id;
- (void)cleanupSpatialAudioForCallID:(unsigned int)id;
- (BOOL)startConnectionWithParticipantID:(id)id callID:(unsigned int)id usingInviteData:(id)data isCaller:(BOOL)caller capabilities:(id)capabilities idsSocket:(int)socket destination:(id)destination error:(id *)error;
- (BOOL)setActive:(BOOL)active;
- (void)updatedMutedPeers:(id)peers forParticipantID:(id)id;
- (void)updatedConnectedPeers:(id)peers;
- (void)stopAllCalls:(id)calls;
- (void)stopCallID:(unsigned int)id;
- (void)cancelCallID:(unsigned int)id;
- (void)remoteCancelledCallID:(unsigned int)id;
- (void)setCallReport:(unsigned int)report withReport:(id)report;
- (void)setCallReportProtobuf:(unsigned int)protobuf withProtobufData:(id)data forMetricID:(long long)id;
- (BOOL)isMicrophoneMuted;
- (double)localFramerateForCallID:(unsigned int)id;
- (double)localBitrateForCallID:(unsigned int)id;
- (double)remoteFramerateForCallID:(unsigned int)id;
- (double)remoteBitrateForCallID:(unsigned int)id;
- (double)remotePacketLossRateForCallID:(unsigned int)id;
- (double)localPacketLossRateForCallID:(unsigned int)id;
- (double)roundTripTimeForCallID:(unsigned int)id;
- (struct CGSize { double x0; double x1; })remoteFrameSizeForCallID:(unsigned int)id;
- (id)statsForCallID:(unsigned int)id;
- (void)forceNoICE:(BOOL)ice;
- (BOOL)isSpeakerPhoneEnabled;
- (void)processRelayRequestResponse:(unsigned int)response responseDict:(id)dict didOriginateRequest:(BOOL)request;
- (void)processRelayUpdate:(unsigned int)update updateDict:(id)dict didOriginateRequest:(BOOL)request;
- (void)handleCellTechChange:(int)change cellularMaxPktLen:(unsigned short)len;
- (void)setPeerProtocolVersion:(unsigned int)version forCallID:(unsigned int)id;
- (unsigned char)powerFloatToInt:(float)int;
- (float)powerIntToFloat:(unsigned char)float;
- (void)didSuspendAudioIO:(id)io;
- (void)didResumeAudioIO:(id)io;
- (void)serverDidDie;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x0; double x1; } *)codec;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList *)samples;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList *)samples;
- (BOOL)canProcessAudio;
- (void)setCanProcessAudio:(BOOL)audio;
@end

#endif /* VideoConference_h */
