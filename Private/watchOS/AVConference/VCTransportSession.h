//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCTransportSession_h
#define VCTransportSession_h
@import Foundation;

#include "VCConnectionManager.h"
#include "VCConnectionProtocol-Protocol.h"

@class NSDictionary, NSMutableArray, NSObject, NSString, TimingCollection;
@protocol OS_dispatch_queue;

@interface VCTransportSession : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_stateQueue;
  NSObject<OS_dispatch_queue> *_notificationQueue;
  NSString *_localFrameworkVersion;
  NSString *_remoteFrameworkVersion;
  struct opaqueRTCReporting * _reportingAgent;
  NSMutableArray *_streams;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _stateLock;
  NSDictionary *_qrExperiments;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _nwMonitorLock;
  undefined * _notificationHandler;
  undefined * _packetEventHandler;
  void * _handlerContext;
  struct tagVCNWConnectionMonitor * _monitor;
  NSObject<OS_dispatch_queue> *_handlerQueue;
}

@property (readonly, nonatomic) int detailedErrorCode;
@property (readonly, nonatomic) BOOL isHandoverSupported;
@property (readonly, nonatomic) BOOL isRemoteOSPreLion;
@property (nonatomic) BOOL requiresWiFi;
@property (nonatomic) BOOL useCompressedConnectionData;
@property (readonly, nonatomic) unsigned int connectionSetupRTTEstimate;
@property (retain, nonatomic) NSObject *connectionSetupPiggybackBlob;
@property (retain, nonatomic) TimingCollection *perfTimings;
@property (readonly, nonatomic) VCConnectionManager *connectionManager;
@property (copy, nonatomic) id /* block */ eventHandler;
@property (readonly, nonatomic) unsigned int basebandNotificationRegistrationToken;
@property (nonatomic) BOOL isCallActive;
@property (retain, nonatomic) NSObject<VCConnectionProtocol> *registeredConnection;
@property (nonatomic) BOOL shouldSetupNWMonitor;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *nwMonitorEventHandlerQueue;
@property (readonly, nonatomic) struct tagVCNWConnectionMonitor * nwMonitor;
@property (readonly) int networkInterfaceType;
@property (readonly) unsigned int networkMTU;
@property (readonly) BOOL isIPv6;
@property (nonatomic) BOOL shouldIgnoreConnectionRefusedError;

/* class methods */
+ (unsigned int)trafficClassForStreamType:(unsigned int)type;
+ (int)vtpPacketTypeForStreamType:(unsigned int)type;

/* instance methods */
- (id)initWithNotificationQueue:(id)queue reportingAgent:(struct opaqueRTCReporting *)agent;
- (id)initWithNotificationQueue:(id)queue reportingAgent:(struct opaqueRTCReporting *)agent notificationHandler:(undefined *)handler eventHandler:(undefined *)handler handlerQueue:(id)queue context:(void *)context;
- (void)dealloc;
- (void)start;
- (void)stop;
- (void)callEventHandlerWithEvent:(unsigned int)event info:(id)info;
- (void)handleTransportStreamDeactivated:(struct OpaqueVCTransportStream *)deactivated;
- (int)createTransportStream:(struct OpaqueVCTransportStream * *)stream withType:(unsigned int)type options:(id)options;
- (int)createVFD:(int *)vfd forStreamType:(unsigned int)type;
- (int)deregisterNotificationForTransportStream:(struct OpaqueVCTransportStream *)stream;
- (void)setCallActive:(BOOL)active;
- (void)setConnectionSelectionVersionWithLocalFrameworkVersion:(id)version remoteFrameworkVersion:(id)version;
- (BOOL)getConnectionSetupData:(id *)data withOptions:(id)options error:(id *)error;
- (void)handleMediaReceivedOverRelayLinkWithConnectionId:(int)id;
- (void)handleMediaReceivedOverPeerToPeerLinkWithConnectionId:(int)id;
- (void)reportNetworkConditionsDegraded;
- (void)setOneToOneModeEnabled:(BOOL)enabled isInitiator:(BOOL)initiator;
- (void)resetActiveConnection;
- (void)setupNWMonitor;
- (void)destroyNWMonitor;
- (void)setupNWMonitorNotificationHandler;
- (void)setupNWMonitorPacketEventHandler;
- (struct tagVCNWConnectionMonitor *)createNWMonitor;
@end

#endif /* VCTransportSession_h */
