//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef VCMediaStream_h
#define VCMediaStream_h
@import Foundation;

#include "VCObject.h"
#include "AVCBasebandCongestionDetector.h"
#include "AVCRateControlFeedbackController.h"
#include "AVCStatisticsCollector.h"
#include "RTCPReportProvider-Protocol.h"
#include "VCCallInfoBlob.h"
#include "VCConnection.h"
#include "VCConnectionChangedHandler-Protocol.h"
#include "VCDatagramChannelIDS.h"
#include "VCMediaKeyIndex.h"
#include "VCMediaStreamConfig.h"
#include "VCMediaStreamDelegate-Protocol.h"
#include "VCMediaStreamNotification-Protocol.h"
#include "VCMediaStreamProtocol-Protocol.h"
#include "VCMediaStreamRateAdaptation.h"
#include "VCMediaStreamTransport.h"
#include "VCMomentsCollectorDelegate-Protocol.h"
#include "VCNetworkFeedbackController.h"
#include "VCRateSharingGroup.h"
#include "VCSecurityEventHandler-Protocol.h"
#include "VCTransportSession.h"

@class NSArray, NSError, NSMutableArray, NSString, VCWeakObjectHolder;
@protocol OS_dispatch_queue, OS_dispatch_source, {_VCMediaStreamTransportSetupInfo="setupType"C""(?="socketInfo"{?="rtpSocket"i"rtcpSocket"i}"ipInfo"{?="srcIPPORT"{tagIPPORT="iFlags"i"szIfName"[16c]"IP"(?="dwIPv4"I"abIPv6"[16C])"wPort"S}"srcRTPIPPort"{tagIPPORT="iFlags"i"szIfName"[16c]"IP"(?="dwIPv4"I"abIPv6"[16C])"wPort"S}}"transportStreamInfo"{?="context"^v"creationCallback"^?"isReceiveExternallyScheduled"B}"nwConnection"@"NSObject<OS_nw_connection>")"sourceRate"I"datagramChannelToken"I"isSessionIDValid"B};

@interface VCMediaStream : VCObject<VCMediaStreamProtocol, RTCPReportProvider, VCSecurityEventHandler, VCConnectionChangedHandler> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_delegateNotificationQueue;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _streamLock;
  VCDatagramChannelIDS *_datagramChannel;
  NSString *_idsDestination;
  NSString *_callID;
  NSString *_clientSessionID;
  NSString *_clientName;
  BOOL _isSRTPInitialized;
  BOOL _useRandomTS;
  BOOL _isReportingAgentOwner;
  double _rtpTimeoutEnabledTime;
  double _rtcpTimeoutEnabledTime;
  double _decryptionTimeoutEnabledTime;
  NSObject<OS_dispatch_source> *_rtcpSendHeartbeat;
  NSObject<OS_dispatch_source> *_timeoutHeartbeat;
  BOOL _rtcpHeartbeatCancelled;
  BOOL _rtcpDidTimeout;
  double _lastRTPTimeoutReportTime;
  double _lastRTCPTimeoutReportTime;
  double _lastDecryptionTimeoutReportTime;
  double _lastDecryptionMKMRecoveryTime;
  double _decryptionErrorStartTime;
  unsigned int _transportSessionID;
  int _clientPID;
  struct _VCMediaStreamTransportSetupInfo { unsigned char setupType; union { struct { int rtpSocket; int rtcpSocket; } socketInfo; struct { struct tagIPPORT { int iFlags; char x[16] szIfName; union { unsigned int dwIPv4; unsigned char x[16] abIPv6; } IP; unsigned short wPort; } srcIPPORT; struct tagIPPORT { int iFlags; char x[16] szIfName; union { unsigned int dwIPv4; unsigned char x[16] abIPv6; } IP; unsigned short wPort; } srcRTPIPPort; } ipInfo; struct { void *context; undefined *creationCallback; BOOL isReceiveExternallyScheduled; } transportStreamInfo; NSObject<OS_nw_connection> *nwConnection; } x0; unsigned int sourceRate; unsigned int datagramChannelToken; BOOL isSessionIDValid; } _transportSetupInfo;
  undefined * _vcMediaCallback;
  VCMediaKeyIndex *_lastReceivedMKI;
  VCCallInfoBlob *_remoteEndpointInfo;
  VCTransportSession *_transportSession;
  NSError *_cachedError;
  undefined * _notificationHandler;
  undefined * _packetEventHandler;
  struct tagVCNWConnectionMonitor * _nwMonitor;
  void * _oneToOneControlInfoGenerator;
  AVCRateControlFeedbackController *_oneToOneFeedbackController;
  BOOL _mediaControlInfoCallbacksRegistered;
  undefined * _statisticsHandler;
  BOOL _isWRMinitialized;
  BOOL _isRTTBasedFIRThrottlingEnabled;
  BOOL _isServerPacketRetransmissionEnabled;
  BOOL _isNWMonitorSignalEnabled;
  VCMediaStreamRateAdaptation *_rateAdaptation;
  VCConnection *_connection;
  VCRateSharingGroup *_rateSharingGroup;
  BOOL _areStatisticsRegistered;
  AVCStatisticsCollector *_statisticsCollector;
  int _nwMonitorHandlerIndex;
  int _rttMonitorHandlerIndex;
  int _channelSequenceCountWithInactiveSlots;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _nwMonitorLock;
}

@property (readonly, nonatomic) long long streamToken;
@property (readonly, nonatomic) int state;
@property (nonatomic) NSObject<VCMediaStreamDelegate> *delegate;
@property (nonatomic) struct tagVCMediaStreamDelegateRealtimeInstanceVTable { undefined * x0; } delegateFunctions;
@property (nonatomic) NSObject<VCMomentsCollectorDelegate> *momentsCollectorDelegate;
@property (readonly, nonatomic) unsigned int localSSRC;
@property (nonatomic) NSObject<VCMediaStreamNotification> *notificationDelegate;
@property (nonatomic) NSObject<RTCPReportProvider> *rtcpReportProvider;
@property (readonly, nonatomic) double rtcpHeartbeatLeeway;
@property (readonly, nonatomic) double lastReceivedRTPPacketTime;
@property (readonly, nonatomic) double lastReceivedRTCPPacketTime;
@property (retain, nonatomic) AVCBasebandCongestionDetector *basebandCongestionDetector;
@property (nonatomic) int operatingMode;
@property (nonatomic) struct tagVCMediaQueue * mediaQueue;
@property (readonly, nonatomic) VCMediaStreamTransport *defaultTransport;
@property (readonly, nonatomic) NSArray *transportArray;
@property (readonly, nonatomic) VCMediaStreamConfig *defaultStreamConfig;
@property (readonly, nonatomic) VCMediaStreamConfig *oneToOneStreamConfig;
@property (readonly, nonatomic) BOOL isSendingMedia;
@property (readonly, retain, nonatomic) AVCRateControlFeedbackController *feedbackController;
@property (readonly, nonatomic) void * mediaControlInfoGenerator;
@property (readonly, nonatomic) unsigned int mediaControlInfoGeneratorType;
@property (retain, nonatomic) VCNetworkFeedbackController *networkFeedbackController;
@property (copy) NSArray *compoundStreamIDs;
@property (nonatomic) BOOL isUplinkRetransmissionEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)isSameSRTPKey:(id)srtpkey newKey:(id)key;

/* instance methods */
- (id)copyDelegate;
- (void)decryptionStatusChanged:(BOOL)changed;
- (id)setupRTPWithSocketDictionary:(id)dictionary error:(id *)error;
- (BOOL)initializeTransportSetupInfoWithTransportSession:(id *)session;
- (void)handleTransportSessionEvent:(unsigned int)event info:(id)info;
- (BOOL)initializeTransportSessionWithSocketDictionary:(id)dictionary error:(id *)error;
- (void)initializeTransportSetupInfoWithSocketDictionary:(id)dictionary;
- (void)initializeTransportSetupInfoWithRTPSocket:(int)rtpsocket RTCPSocket:(int)rtcpsocket;
- (void)cleanupNWConnection:(id *)nwconnection;
- (BOOL)shouldUseNWConnectionBackingSocket;
- (BOOL)initializeTransportSessionWithRTPNWConnectionID:(id)id rtcpNWConnectionID:(id)id error:(id *)error;
- (id)setupRTPWithNWConnection:(id)nwconnection error:(id *)error;
- (void)dupNWConnectionBackingSocket:(int *)socket;
- (BOOL)setupNWConnectionWithID:(id)id;
- (void)setupCallbacksWithNWConnectionMonitor:(struct tagVCNWConnectionMonitor *)monitor;
- (id)setupRTPWithLocalParticipantInfo:(id)info error:(id *)error;
- (id)setupRTPForIDS;
- (id)setupRTPWithIDSDestination:(id)idsdestination error:(id *)error;
- (BOOL)initializeTransportSessionWithIDSDestination:(id)idsdestination error:(id *)error;
- (BOOL)initializeTransportSetupInfoWithIDSDestination:(id)idsdestination error:(id *)error;
- (id)setupRTPWithIPInfo:(id)ipinfo error:(id *)error;
- (void)reportTransportInfo;
- (void)updateTransportsWithConstantConnectionOverhead:(unsigned int)overhead;
- (void)collectChannelSequenceMetrics:(id)metrics;
- (id)init;
- (id)initWithTransportSessionID:(unsigned int)id;
- (id)initWithTransportSessionID:(unsigned int)id localSSRC:(unsigned int)ssrc;
- (void)setupMediaStream;
- (void)dealloc;
- (void)lock;
- (void)unlock;
- (char *)streamStateToString:(int)string;
- (struct tagHANDLE { int x0; } *)createRTPHandleWithStreamConfig:(id)config payloadType:(int)type localSSRC:(unsigned int)ssrc;
- (id)createTransportWithStreamConfig:(id)config ssrc:(unsigned int)ssrc;
- (void)unregisterStatistics;
- (int)registerStatisticsHandler:(id)handler statisticType:(int)type;
- (void)registerStatistics:(id)statistics;
- (void)initializeWRMUsingRtpHandle:(struct tagHANDLE { int x0; } *)handle;
- (void)unregisterWRMCallback;
- (BOOL)shouldStopReportingTimer;
- (void)registerMediaControlInfoGeneratorWithConfigs:(id)configs;
- (id)getMediaStreamConfigForControlInfoGenerator:(id)generator;
- (void)createLocalMediaControlInfoGeneratorWithType:(unsigned int)type version:(unsigned char)version;
- (void)registerCallbacksForMediaControlInfoGenerator:(void *)generator forDirection:(long long)direction options:(unsigned int)options;
- (void)unregisterMediaControlInfoGenerator;
- (BOOL)handleEncryptionInfoChange:(id)change;
- (void)resetDecryptionTimeout;
- (void)didEncryptionKeyRollTimeout;
- (int)updateConnectionWithConfig:(id)config;
- (BOOL)updateRemoteAddressWithConfig:(id)config error:(id *)error;
- (id)getSharingGroupWithPolicy:(unsigned int)policy;
- (void)setMediaQueueInRateControlConfig:(id)config;
- (void)setMediaQueueInStreamConfig:(id)config;
- (BOOL)setStreamConfig:(id)config withError:(id *)error;
- (id)start;
- (void)startWithCompletionHandler:(id /* block */)handler;
- (void)didEnterState:(int)state oldState:(int)state;
- (void)willExitState:(int)state newState:(int)state;
- (void)handleStartDidSucceed:(BOOL)succeed withError:(id)error;
- (void)notifyDelegateDidReceiveRTCPPackets:(struct _RTCPPacketList { union tagNTP { unsigned long long x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; unsigned char x1; struct tagRTCPPACKET * x2[10] struct OpaqueCMBlockBuffer * x3; char * x4; unsigned long long x5; unsigned int x6; unsigned char x7[1472] unsigned short x8[12] unsigned char x9; BOOL x10; unsigned long long x11; struct { struct _RTCPPacketList * x0; } x12; } *)rtcppackets;
- (BOOL)startMediaTransportsWithError:(id *)error;
- (void)stopMediaTransports;
- (id)stop;
- (void)stopInternalWithHandler:(id /* block */)handler;
- (id)setPause:(BOOL)pause;
- (id)getInvalidParamErrorForSetPause:(BOOL)pause didSucceed:(BOOL)succeed;
- (void)setPause:(BOOL)pause withCompletionHandler:(id /* block */)handler;
- (id)setLocalParticipantInfo:(id)info networkSockets:(id)sockets withError:(id *)error;
- (void)setStreamDirection:(long long)direction;
- (long long)streamDirection;
- (void)sendControlPacketWithParameters:(struct _RTCP_SEND_CONTROL_PARAMETERS { unsigned int x0; int x1; char * x2; unsigned long long x3; unsigned char x4; unsigned short * x5; int x6; unsigned short x7; unsigned short x8; unsigned int x9; struct _RTCP_RECEPTION_REPORT * x10; unsigned char x11; struct tagRTCP_CUSTOM_RATE_CONTROL_INFO * x12; struct tagVCRTCPXRSummaryReport * x13; unsigned char x14; struct tagVCRTCPXRVoIPMetricsReport * x15; unsigned char x16; unsigned short x17[12] unsigned char x18; BOOL x19; unsigned long long x20; BOOL x21; BOOL x22; struct tagRTCP_CUSTOM_PSFB_LOSS_FB_INFO * x23; unsigned int x24; } *)parameters;
- (void)setRtcpEnabled:(BOOL)enabled;
- (BOOL)isRTPTimeoutEnabled;
- (BOOL)isRTCPTimeoutEnabled;
- (BOOL)isDecryptionTimeoutEnabled;
- (BOOL)isRTCPSendEnabled;
- (void)processRTPTimeoutSettingChange;
- (void)processRTCPTimeoutSettingChange;
- (void)processDecryptionTimeoutSettingChange;
- (void)setRtpTimeOutEnabled:(BOOL)enabled;
- (void)setRtcpTimeOutEnabled:(BOOL)enabled;
- (void)setDecryptionTimeOutEnabled:(BOOL)enabled;
- (void)setRtpTimeOutInterval:(double)interval;
- (void)setRtcpTimeOutInterval:(double)interval;
- (void)setDecryptionTimeOutInterval:(double)interval;
- (void)setRtcpSendInterval:(double)interval;
- (void)applyClientSessionID:(int)id clientUserInfo:(id)info;
- (BOOL)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned char x8; } *)list reportCount:(char *)count;
- (unsigned int)getRTCPReportNTPTimeMiddle32ForReportId:(unsigned char)id;
- (unsigned int)getExtendedSequenceNumberForSequenceNumber:(unsigned short)number;
- (void)resetRTCPSendHeartbeatTimer:(unsigned long long)timer;
- (void)rtcpSendHeartbeat;
- (void)startRTCPSendHeartbeat;
- (void)stopRTCPSendHeartbeat;
- (void)createNWMonitor;
- (void)destroyNWMonitor;
- (void)setStreamIDs:(id)ids repairStreamIDs:(id)ids;
- (void)resetTimeoutHeartbeatTimer:(unsigned long long)timer;
- (void)resetTimeoutHeartbeatWithRTPTimeout:(double)rtptimeout rtcpTimeout:(double)timeout decryptionTimeout:(double)timeout currentTime:(double)time;
- (double)computeNextTimoutWithEnabledTime:(double)time timeoutInterval:(double)interval lastReceivedPacketTime:(double)time currentTime:(double)time lastTimeoutReportTime:(double)time;
- (void)checkRTPPacketTimeoutAgainstTime:(double)time lastReceivedPacketTime:(double)time;
- (void)checkRTCPPacketTimeoutAgainstTime:(double)time lastReceivedPacketTime:(double)time;
- (void)timeoutHeartbeat;
- (void)startTimeoutHeartbeat;
- (void)stopTimeoutHeartbeat;
- (void)onCallIDChanged;
- (id)supportedPayloads;
- (BOOL)onConfigureStreamWithConfiguration:(id)configuration error:(id *)error;
- (void)onStartWithCompletionHandler:(id /* block */)handler;
- (void)onStopWithCompletionHandler:(id /* block */)handler;
- (void)onPauseWithCompletionHandler:(id /* block */)handler;
- (void)onResumeWithCompletionHandler:(id /* block */)handler;
- (void)onSendRTCPPacket;
- (void)onRTPTimeout;
- (void)onRTCPTimeout;
- (void)collectRxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5] unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)metrics interval:(float)interval;
- (void)collectRxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5] unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)metrics;
- (void)collectTxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5] unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; unsigned int x9; } *)metrics;
- (BOOL)shouldReportNetworkInterfaceType;
- (void)handleActiveConnectionChange:(id)change;
- (int)handleMediaCallbackNotification:(int)notification inData:(void *)data outData:(void *)data;
- (void)setUplinkRetransmissionEnabled:(BOOL)enabled;
@end

#endif /* VCMediaStream_h */
