//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2206.0.5.0.0
//
#ifndef WFTriggerEventQueue_h
#define WFTriggerEventQueue_h
@import Foundation;

#include "WFDatabaseProvider-Protocol.h"
#include "WFTriggerBootManager.h"
#include "WFTriggerEventRunner.h"
#include "WFTriggerEventRunnerDelegate-Protocol.h"
#include "WFTriggerNotificationScheduler.h"
#include "WFTriggerUserNotificationManager.h"
#include "WFTriggerUserNotificationManagerDelegate-Protocol.h"

@class NSString;
@protocol OS_dispatch_queue;

@interface WFTriggerEventQueue : NSObject<WFTriggerUserNotificationManagerDelegate, WFTriggerEventRunnerDelegate>

@property (readonly, nonatomic) NSObject<WFDatabaseProvider> *databaseProvider;
@property (readonly, nonatomic) WFTriggerEventRunner *triggerEventRunner;
@property (readonly, nonatomic) WFTriggerUserNotificationManager *notificationManager;
@property (readonly, nonatomic) WFTriggerNotificationScheduler *notificationScheduler;
@property (readonly, nonatomic) WFTriggerBootManager *triggerBootManager;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)shouldRunTrigger:(id)trigger forEvent:(id)event runEvents:(id)events error:(id *)error;
+ (double)rateLimitingTimeoutForTrigger:(id)trigger runEvents:(id)events;

/* instance methods */
- (id)initWithDatabaseProvider:(id)provider notificationManager:(id)manager notificationScheduler:(id)scheduler triggerBootManager:(id)manager;
- (id)initWithDatabaseProvider:(id)provider notificationManager:(id)manager notificationScheduler:(id)scheduler;
- (void)resume;
- (void)resumeWithConfiguredTrigger:(id)trigger workflowReference:(id)reference eventInfo:(id)info;
- (void)runWithConfiguredTrigger:(id)trigger workflowReference:(id)reference eventInfo:(id)info;
- (void)enqueueTriggerWithIdentifier:(id)identifier eventInfo:(id)info force:(BOOL)force completion:(id /* block */)completion;
- (id)databaseWithError:(id *)error;
- (unsigned long long)numberOfEventsInQueueWithConfirmationOnly:(BOOL)only;
- (BOOL)deleteTriggerEvent:(id)event error:(id *)error;
- (id)nextTriggerEventWithError:(id *)error;
- (id)configuredTriggerForIdentifier:(id)identifier workflowReference:(id *)reference error:(id *)error;
- (id)triggerEventForConfiguredTrigger:(id)trigger eventInfo:(id)info confirmed:(BOOL)confirmed error:(id *)error;
- (void)setConfirmedForTriggerEventIDs:(id)ids error:(id *)error;
- (void)removePendingTriggerEventsWithEventIDs:(id)ids;
- (BOOL)shouldRunEmailOrMessageTrigger:(id)trigger forEvent:(id)event runEvents:(id)events error:(id *)error;
- (void)handleRemovedIgnoredNotifications:(id)notifications;
- (void)removeAllStaleTriggerEventsIgnoringValidIDs:(id)ids;
- (BOOL)isTriggerEventStale:(id)stale;
- (void)disableTriggersWithIdentifiers:(id)identifiers;
- (void)notificationManager:(id)manager receivedConfirmationToRunTriggerWithIdentifier:(id)identifier pendingTriggerEventIDs:(id)ids;
- (void)notificationManager:(id)manager didDismissTriggerWithIdentifier:(id)identifier pendingTriggerEventIDs:(id)ids;
- (void)notificationManager:(id)manager didFailToPostNotificationPromptWithTriggerIdentifier:(id)identifier pendingTriggerEventIDs:(id)ids;
- (void)notificationManager:(id)manager didRequestDisablementOfTriggersWithIdentifiers:(id)identifiers;
- (void)didFinishRunningWithError:(id)error cancelled:(BOOL)cancelled trigger:(id)trigger runEvent:(id)event;
- (void)logMetricForTrigger:(id)trigger;
@end

#endif /* WFTriggerEventQueue_h */
