//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLFetchRecording_h
#define PLFetchRecording_h
@import Foundation;

@class NSMutableDictionary, NSURL;
@protocol OS_dispatch_queue;

@interface PLFetchRecording : NSObject {
  /* instance variables */
  atomic int _numberOfAllocationsSinceLastRemap;
  struct atomic_flag { atomic  _Value; BOOL x0; } _remapPending;
  int _fd;
  unsigned long long _maxFileSize;
  unsigned long long _fileHeaderSize;
  NSObject<OS_dispatch_queue> *_remapQueue;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _indexLock;
  void * _indexLocked_buffer;
  unsigned long long _indexLocked_bufferLen;
  NSMutableDictionary *_indexLocked_indexEntriesByNormSQLHash;
}

@property (readonly, nonatomic) NSURL *url;
@property (readonly, nonatomic) unsigned long long mode;

/* class methods */
+ (void)_assertAddress:(long long)address isValidWithLength:(unsigned long long)length buffer:(void *)buffer bufferLength:(unsigned long long)length;
+ (void)_indexLocked_populateStatementIndex:(id)index fromBuffer:(void *)buffer bufferLength:(unsigned long long)length fileHeaderSize:(unsigned long long)size;
+ (void)_indexLocked_enumerateEntryHeadersFromBuffer:(const void *)buffer bufferLength:(unsigned long long)length fileHeaderSize:(unsigned long long)size block:(id /* block */)block;
+ (struct _NSRange { unsigned long long x0; unsigned long long x1; })_indexLocked_allocateSizeToFit:(unsigned long long)fit fileHeaderSize:(unsigned long long)size currentEOF:(long long)eof buffer:(void *)buffer bufferLength:(unsigned long long)length index:(id)index;
+ (id)_backtrace;
+ (void)_writeInitialHeaderToBuffer:(void *)buffer bufferLen:(unsigned long long)len;
+ (void)_enumerateVariationsFromEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header block:(id /* block */)block;
+ (BOOL)_statsForStatementAreInteresting:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)interesting totalPages:(unsigned int)pages;
+ (void)_updateRunningVarianceForEntry:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)entry givenPageCount:(unsigned int)count;
+ (const char *)normalizedSQLForEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header;
+ (const char *)bindVariablesForEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header;
+ (id)multiInCountsForEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header;
+ (const char *)contextNameForEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header;
+ (id)backtraceForEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header;
+ (double)meanPageCountForEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header;
+ (double)varPageCountForEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header;
+ (double)stdDevPageCountForEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header;
+ (BOOL)deleteRecording:(id)recording error:(id *)error;
+ (id)suggestedFilenameForCurrentProcess;

/* instance methods */
- (void)_indexLocked_unmapFile;
- (BOOL)_indexLocked_remapFile;
- (void)_indexLocked_close;
- (BOOL)_isOpen;
- (void)_recordVariationWithEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header timestamp:(double)timestamp pagesHit:(unsigned int)hit pagesMissed:(unsigned int)missed rowsAffected:(unsigned int)affected duration:(double)duration QOS:(unsigned int)qos;
- (void)_scheduleRemapAfterDelay;
- (void)_considerIfRemapIsNeeded;
- (id)initWithMode:(unsigned long long)mode atFileURL:(id)url size:(unsigned long long)size;
- (void)dealloc;
- (struct PLFetchRecordingFileHeader_Current { unsigned short x0; char x1[13] char x2[129] char x3[37] char x4[37] unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } *)fileHeader;
- (void)close;
- (int)fd;
- (BOOL)remap;
- (struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)entryForNormalizedSQL:(id)sql;
- (void)enumerateEntryHeaders:(id /* block */)headers;
- (void)enumerateVariationsFromEntryHeader:(struct PLFetchRecordingFileNormalizedStatementHeader { unsigned char x0; unsigned char x1[32] double x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; } *)header block:(id /* block */)block;
- (BOOL)recordStatementWithNormalizedSQL:(id)sql bindVariablesAsString:(id)string multiInCounts:(id)counts contextName:(id)name pagesHit:(unsigned int)hit pagesMissed:(unsigned int)missed rowCount:(unsigned int)count duration:(double)duration QOS:(unsigned int)qos;
@end

#endif /* PLFetchRecording_h */
