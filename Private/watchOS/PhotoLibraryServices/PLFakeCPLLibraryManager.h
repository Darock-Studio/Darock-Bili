//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLFakeCPLLibraryManager_h
#define PLFakeCPLLibraryManager_h
@import Foundation;

#include "CPLLibraryManagerDelegate-Protocol.h"
#include "CPLResourceProgressDelegate-Protocol.h"

@class CPLConfiguration, CPLStatus, NSURL;
@protocol CPLLibraryManagerForceSyncDelegate, OS_dispatch_queue;

@interface PLFakeCPLLibraryManager : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
}

@property (readonly, nonatomic) NSURL *baseURL;
@property (readonly, nonatomic) NSURL *fakeBaseURL;
@property (nonatomic) unsigned long long state;
@property (readonly, nonatomic) CPLStatus *syncStatus;
@property (readonly, nonatomic) CPLConfiguration *configuration;
@property (readonly, nonatomic) unsigned long long sizeOfResourcesToUpload;
@property (readonly, nonatomic) unsigned long long sizeOfOriginalResourcesToUpload;
@property (readonly, nonatomic) unsigned long long numberOfImagesToUpload;
@property (readonly, nonatomic) unsigned long long numberOfVideosToUpload;
@property (readonly, nonatomic) unsigned long long numberOfOtherItemsToUpload;
@property (nonatomic) unsigned long long estimatedInitialSizeForLocalLibrary;
@property (nonatomic) unsigned long long estimatedInitialAssetCountForLocalLibrary;
@property (weak, nonatomic) NSObject<CPLLibraryManagerDelegate> *delegate;
@property (weak, nonatomic) NSObject<CPLResourceProgressDelegate> *resourceProgressDelegate;
@property (weak, nonatomic) NSObject<CPLLibraryManagerForceSyncDelegate> *forceSyncDelegate;

/* class methods */
+ (id)forwardingTargetForSelector:(SEL)selector;
+ (id)fakeCPLStatusBaseURLWithBaseURL:(id)url;

/* instance methods */
- (id)forwardingTargetForSelector:(SEL)selector;
- (id)initWithClientLibraryBaseURL:(id)url cloudLibraryStateStorageURL:(id)url cloudLibraryResourceStorageURL:(id)url libraryIdentifier:(id)identifier options:(unsigned long long)options;
- (void)openWithCompletionHandler:(id /* block */)handler;
- (void)enableMainScopeWithCompletionHandler:(id /* block */)handler;
- (void)disableMainScopeWithCompletionHandler:(id /* block */)handler;
- (void)activateScopeWithIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)deactivateWithCompletionHandler:(id /* block */)handler;
- (void)startExitFromSharedScopeWithIdentifier:(id)identifier retentionPolicy:(long long)policy exitSource:(long long)source completionHandler:(id /* block */)handler;
- (void)removeParticipants:(id)participants fromSharedScopeWithIdentifier:(id)identifier retentionPolicy:(long long)policy exitSource:(long long)source completionHandler:(id /* block */)handler;
- (void)sharedLibraryRampCheckWithCompletionHandler:(id /* block */)handler;
- (void)createScope:(id)scope completionHandler:(id /* block */)handler;
- (void)createOwnedLibraryShareScopeWithShare:(id)share title:(id)title completionHandler:(id /* block */)handler;
- (void)updateShareForScope:(id)scope completionHandler:(id /* block */)handler;
- (void)getScopeStatusCountsForScopeWithIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)getStatusForPendingRecordsSharedToScopeWithIdentifier:(id)identifier maximumCount:(unsigned long long)count completionHandler:(id /* block */)handler;
- (void)fetchSharedScopeFromShareURL:(id)url completionHandler:(id /* block */)handler;
- (void)acceptSharedScope:(id)scope completionHandler:(id /* block */)handler;
- (void)boostPriorityForScopeWithIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)forceSynchronizingScopeWithIdentifiers:(id)identifiers completionHandler:(id /* block */)handler;
- (void)queryUserDetailsForShareParticipants:(id)participants completionHandler:(id /* block */)handler;
- (void)beginPushChangeSessionWithKnownLibraryVersion:(id)version completionHandler:(id /* block */)handler;
- (void)beginPullChangeSessionWithKnownLibraryVersion:(id)version completionHandler:(id /* block */)handler;
- (void)forceBackupWithCompletionHandler:(id /* block */)handler;
- (void)getStatusForRecordsWithScopedIdentifiers:(id)identifiers completionHandler:(id /* block */)handler;
- (void)getCloudIdentifiersForLocalIdentifiers:(id)identifiers completionHandler:(id /* block */)handler;
- (void)getStatusForComponents:(id)components completionHandler:(id /* block */)handler;
- (void)getCloudCacheForRecordWithScopedIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)getCloudScopedIdentifiersForLocalScopedIdentifiers:(id)identifiers completionHandler:(id /* block */)handler;
- (void)resolveLocalScopedIdentifiersForCloudScopedIdentifiers:(id)identifiers completionHandler:(id /* block */)handler;
- (void)checkHasBackgroundDownloadOperationsWithCompletionHandler:(id /* block */)handler;
- (void)deleteResources:(id)resources checkServerIfNecessary:(BOOL)necessary completionHandler:(id /* block */)handler;
- (void)checkResourcesAreSafeToPrune:(id)prune checkServerIfNecessary:(BOOL)necessary completionHandler:(id /* block */)handler;
- (void)getStreamingURLOrMediaMakerDataForResource:(id)resource intent:(unsigned long long)intent hints:(id)hints timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })range clientBundleID:(id)id completionHandler:(id /* block */)handler;
- (void)beginDownloadForResource:(id)resource clientBundleID:(id)id options:(id)options proposedTaskIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)beginDownloadForResource:(id)resource clientBundleID:(id)id highPriority:(BOOL)priority completionHandler:(id /* block */)handler;
- (void)beginInMemoryDownloadOfResource:(id)resource completionHandler:(id /* block */)handler;
- (void)getSystemBudgetsWithCompletionHandler:(id /* block */)handler;
- (void)setShouldOverride:(BOOL)override forSystemBudgets:(unsigned long long)budgets;
- (void)reportSetting:(id)setting hasBeenEnabled:(BOOL)enabled;
- (void)reportSetting:(id)setting hasBeenSetToValue:(id)value;
- (void)reportMiscInformation:(id)information;
- (void)noteClientIsInForegroundQuietly:(BOOL)quietly;
- (void)noteClientIsInBackground;
- (void)noteClientIsBeginningSignificantWork;
- (void)noteClientIsEndingSignificantWork;
@end

#endif /* PLFakeCPLLibraryManager_h */
