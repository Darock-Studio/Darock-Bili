//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLManagedObjectContext_h
#define PLManagedObjectContext_h
@import Foundation;

#include "NSManagedObjectContext.h"
#include "PLChangeHandlingContainer.h"
#include "PLDelayedFiledSystemDeletions.h"
#include "PLDelayedSaveActions.h"
#include "PLManagedObjectContextDelegate.h"
#include "PLPhotoLibrary.h"

@class NSError, NSMutableDictionary, NSMutableSet, PLPhotoLibraryPathManager;
@protocol PLManagedObjectContextPTPNotificationDelegate;

@interface PLManagedObjectContext : NSManagedObjectContext {
  /* instance variables */
  BOOL _isConnectedToChangeHandling;
  BOOL _isObservingChangesForPTPNotificationDelegate;
  BOOL _needsBackgroundJobProcessing;
  PLManagedObjectContextDelegate *_photosDelegate;
  NSMutableSet *_avalancheUUIDsForUpdate;
  NSMutableDictionary *_uuidsForCloudDeletion;
  BOOL _syncChangeMarker;
  NSMutableDictionary *_updatedObjectsAttributes;
  NSMutableDictionary *_updatedObjectsRelationships;
  PLPhotoLibraryPathManager *_pathManager;
  PLChangeHandlingContainer *_changeHandlingContainer;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _invalidationStateLock;
  NSError *_invalidationReason;
  double _lastResetTimestamp;
  BOOL _initFinished;
}

@property (readonly, nonatomic) BOOL mergingChanges;
@property (readonly, nonatomic) BOOL savingDuringMerge;
@property (nonatomic) BOOL isInitializingSingletons;
@property (retain, nonatomic) PLDelayedFiledSystemDeletions *delayedDeletions;
@property (weak, nonatomic) NSObject<PLManagedObjectContextPTPNotificationDelegate> *ptpNotificationDelegate;
@property (nonatomic) BOOL isBackingALAssetsLibrary;
@property (readonly, nonatomic) PLDelayedSaveActions *delayedSaveActions;
@property (nonatomic) long long resetCloudLibraryMode;
@property (nonatomic) BOOL localOnlyDelete;
@property (weak, nonatomic) PLPhotoLibrary *photoLibrary;
@property (readonly, nonatomic) BOOL isUserInterfaceContext;
@property (nonatomic) BOOL regenerateVideoThumbnails;
@property (nonatomic) int changeSource;
@property (nonatomic) BOOL nonCoalescing;

/* class methods */
+ (id)contextForUninitializedPhotoLibrary:(id)library automaticallyMerges:(BOOL)merges automaticallyPinToFirstFetch:(BOOL)fetch name:(const char *)name;
+ (id)contextForRepairingSingletonObjects:(const char *)objects libraryURL:(id)url error:(id *)error;
+ (void)_pl_megamoc_runWithPerformWarningsSuppressed:(id /* block */)suppressed;
+ (id)sanitizedErrorFromError:(id)error;
+ (BOOL)canMergeRemoteChanges;
+ (void)removePhotosDatabaseWithPathManager:(id)manager;
+ (BOOL)shouldHavePhotoLibrary;
+ (BOOL)_pl_megamoc_isInPLMocPerform;
+ (void)_pl_megamoc_contextPerformDepthPush;
+ (void)_pl_megamoc_contextPerformDepthPop;
+ (void)getPersistentStoreURL:(id *)url options:(id *)options forDatabasePath:(id)path;
+ (id)managedObjectModelURL;
+ (id)managedObjectModel;
+ (id)__processEntityByName:(id)name obj:(id)obj;
+ (id)__processSubEntityByName:(id)name entity:(id)entity withEntityData:(id)data;
+ (void)__prepareEntityPropertyLookups;
+ (id)_attributeNamesByIndexByEntityNames;
+ (id)_indexesByAttributeNamesByEntityNames;
+ (id)_relationshipNamesByIndexByEntityNames;
+ (id)_indexesByRelationshipNamesByEntityNames;
+ (id)_toManyRelationshipNamesByEntityNames;
+ (unsigned long long)_indexValueForPropertyNames:(id)names entityName:(id)name indexesByPropertyNamesByEntityNames:(id)names;
+ (id)_propertyNamesForIndexValues:(unsigned long long)values entity:(id)entity propertyNamesByIndexByEntityNames:(id)names;
+ (unsigned long long)indexValueForAttributeNames:(id)names entity:(id)entity;
+ (id)attributeNamesForIndexValues:(unsigned long long)values entity:(id)entity;
+ (unsigned long long)indexValueForRelationshipNames:(id)names entity:(id)entity;
+ (id)relationshipNamesForIndexValues:(unsigned long long)values entity:(id)entity;
+ (BOOL)includesToManyRelationship:(id)relationship entity:(id)entity;
+ (void)recordChangedProperties:(id)properties forObjectID:(id)id inAttributesByOID:(id)oid relationshipsByOID:(id)oid;
+ (void)recordChangedKeys:(id)keys forObjectID:(id)id inAttributesByOID:(id)oid relationshipsByOID:(id)oid;
+ (id)changeNotificationObjectMutationKeys;
+ (id)changeNotificationObjectKeys;
+ (id)changeNotificationObjectIDMutationKeys;
+ (id)changeNotificationObjectIDKeys;
+ (BOOL)_isAssetLibraryFetchingAlbum:(id)album;
+ (BOOL)assetsLibraryLoggingEnabled;

/* instance methods */
- (id)initWithConcurrencyType:(unsigned long long)type libraryBundle:(id)bundle;
- (id)initWithConcurrencyType:(unsigned long long)type libraryBundle:(id)bundle changeHandlingContainer:(id)container coordinator:(id)coordinator;
- (void)dealloc;
- (id)_pl_executeFetchRequest:(id)request error:(id *)error;
- (void)_directPerformBlock:(id /* block */)block;
- (void)_directPerformBlockAndWait:(id /* block */)wait;
- (double)lastResetTimestamp;
- (BOOL)isDatabaseCreationContext;
- (id)storeUUID;
- (void)withDispatchGroup:(id)group performBlock:(id /* block */)block;
- (BOOL)isReadOnly;
- (id)pathManager;
- (id)libraryBundle;
- (BOOL)isValidForSelector:(SEL)selector error:(id *)error;
- (void)invalidateWithReason:(id)reason;
- (BOOL)pl_performWithOptions:(unsigned long long)options andBlock:(id /* block */)block;
- (id)existingObjectWithID:(id)id error:(id *)error;
- (id)executeFetchRequest:(id)request error:(id *)error;
- (id)executeRequest:(id)request error:(id *)error;
- (unsigned long long)countForFetchRequest:(id)request error:(id *)error;
- (BOOL)save:(id *)save;
- (BOOL)obtainPermanentIDsForObjects:(id)objects error:(id *)error;
- (void)reset;
- (void)refreshAllObjects;
- (void)performBlock:(id /* block */)block;
- (void)performBlockAndWait:(id /* block */)wait;
- (void)setName:(id)name;
- (void)connectToChangeHandling;
- (void)disconnectFromChangeHandling;
- (void)recordManagedObjectWillSave:(id)save;
- (void)recordChangesFromTriggerModifiedObjectIDs:(id)ids;
- (void)_recordChangedKeys:(id)keys forObjectID:(id)id;
- (void)getAndClearUpdatedObjectsAttributes:(id *)attributes relationships:(id *)relationships;
- (void)_createDelayedSaveActionsWithTransaction:(id)transaction;
- (void)_destroyDelayedSaveActions;
- (BOOL)hasPreviouslyMergedDeleteForObject:(id)object;
- (void)registerFilesystemDeletionInfo:(id)info;
- (void)recordAvalancheUUIDForUpdate:(id)update;
- (id)getAndClearRecordedAvalancheUUIDsForUpdate;
- (void)recordCloudDeletionForObject:(id)object;
- (void)_addCloudUUID:(id)uuid forDeletionType:(long long)type;
- (id)getAndClearRecordedObjectsForCloudDeletion;
- (void)recordSyncChangeMarker;
- (BOOL)getAndClearSyncChangeMarker;
- (void)updateTransactionAuthor;
- (BOOL)_tooManyAssetChangesToHandle:(unsigned long long)handle;
- (void)recordNeedsBackgroundJobProcessing;
- (id)pl_fetchObjectsWithIDs:(id)ids rootEntity:(id)entity;
- (id)pl_fetchObjectsWithIDs:(id)ids;
- (void)_notifyALAssetsLibraryWithChanges:(id)changes usingObjectIDs:(BOOL)ids;
- (void)resetAllFetchingAlbums;
- (void)_mergeChangesFromDidSaveDictionary:(id)dictionary usingObjectIDs:(BOOL)ids;
- (BOOL)_adjustmentTimestampChangedChangedAttribute:(id)attribute from:(id)from;
- (void)_getInsertedIDs:(id)ids deletedIDs:(id)ids changedIDs:(id)ids adjustedIDs:(id)ids ofEntityKind:(id)kind fromRemoteContextDidSaveObjectIDsNotification:(id)notification;
- (void)_informPTPDelegateAboutChangesFromRemoteContextSaveNotification:(id)notification;
- (void)appendDelayedDeletionsToXPCMessage:(id)xpcmessage;
- (void)setupLocalChangeNotifications;
- (void)setupDelegateWithBundle:(id)bundle;
- (void)tearDownLocalChangeNotifications;
- (BOOL)shouldMergeFromRemoteContextWithChanges:(id)changes;
- (BOOL)isLocalOnlyDelete;
@end

#endif /* PLManagedObjectContext_h */
