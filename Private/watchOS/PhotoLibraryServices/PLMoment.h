//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLMoment_h
#define PLMoment_h
@import Foundation;

#include "PLManagedObject.h"
#include "NSCopying-Protocol.h"
#include "PLDiagnosticsProvider-Protocol.h"
#include "PLMomentData-Protocol.h"
#include "PLPhotosHighlightData-Protocol.h"

@class CLLocation, NSArray, NSDate, NSSet, NSString;

@interface PLMoment : PLManagedObject<PLMomentData, PLDiagnosticsProvider> {
  /* instance variables */
  BOOL _loadedNameInfo;
  CLLocation *_cachedApproximateLocation;
  BOOL _didCacheApproximateLocation;
  struct CLLocationCoordinate2D { double latitude; double longitude; } _cachedCoordinate;
  BOOL _didCacheCoordinate;
  BOOL _waitingForSharedAssetContainerRecalc;
}

@property (nonatomic) BOOL isRegisteredForChanges;
@property (nonatomic) BOOL didRegisteredWithUserInterfaceContext;
@property (retain, @dynamic, nonatomic) NSString *uuid;
@property (retain, @dynamic, nonatomic) NSDate *startDate;
@property (retain, @dynamic, nonatomic) NSDate *endDate;
@property (@dynamic, nonatomic) int timeZoneOffset;
@property (readonly, nonatomic) NSDate *localStartDate;
@property (readonly, nonatomic) NSDate *localEndDate;
@property (retain, @dynamic, nonatomic) NSDate *representativeDate;
@property (@dynamic, nonatomic) int cachedCount;
@property (@dynamic, nonatomic) int cachedCountShared;
@property (@dynamic, nonatomic) int cachedPhotosCount;
@property (@dynamic, nonatomic) int cachedVideosCount;
@property (retain, @dynamic, nonatomic) NSDate *modificationDate;
@property (@dynamic, nonatomic) double approximateLatitude;
@property (@dynamic, nonatomic) double approximateLongitude;
@property (retain, nonatomic) CLLocation *approximateLocation;
@property (@dynamic, nonatomic) float aggregationScore;
@property (retain, @dynamic, nonatomic) NSString *title;
@property (retain, @dynamic, nonatomic) NSString *subtitle;
@property (@dynamic, nonatomic) unsigned short processedLocation;
@property (@dynamic, nonatomic) double gpsHorizontalAccuracy;
@property (@dynamic, nonatomic) short originatorState;
@property (readonly, copy, @dynamic, nonatomic) NSArray *localizedLocationNames;
@property (readonly, retain, nonatomic) NSObject<NSCopying> *uniqueObjectID;
@property (retain, @dynamic, nonatomic) NSSet *assets;
@property (readonly, retain, nonatomic) NSArray *batchedAssets;
@property (readonly, @dynamic, nonatomic) NSObject<PLPhotosHighlightData> *highlight;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSString *pl_uuid;
@property (readonly, nonatomic) NSDate *pl_startDate;
@property (readonly, nonatomic) NSDate *pl_endDate;
@property (readonly, nonatomic) unsigned long long pl_numberOfAssets;
@property (readonly, nonatomic) CLLocation *pl_location;
@property (readonly, nonatomic) struct CLLocationCoordinate2D { double x0; double x1; } pl_coordinate;
@property (readonly, nonatomic) short pl_originatorState;
@property (readonly, nonatomic) unsigned short pl_locationType;
@property (readonly, nonatomic) int assetsCount;
@property (readonly, nonatomic) int assetsCountShared;
@property (readonly, nonatomic) int assetsCountPrivate;
@property (readonly, @dynamic, nonatomic) short sharingComposition;
@property (readonly, nonatomic) int photoAssetsSuggestedByPhotosCount;
@property (readonly, nonatomic) int videoAssetsSuggestedByPhotosCount;

/* class methods */
+ (id)insertNewMomentInManagedObjectContext:(id)context error:(id *)error;
+ (id)allMomentsInManagedObjectContext:(id)context error:(id *)error;
+ (id)allMomentIDsInManagedObjectContext:(id)context error:(id *)error;
+ (id)allInvalidMomentsInManagedObjectContext:(id)context error:(id *)error;
+ (id)allMomentsInManagedObjectContext:(id)context predicate:(id)predicate idsOnly:(BOOL)only error:(id *)error;
+ (id)allMomentsRequiringAnalysisInManagedObjectContext:(id)context error:(id *)error;
+ (id)momentsRequiringLocationProcessingWhenCoreRoutineIsAvailableInManagedObjectContext:(id)context error:(id *)error;
+ (id)momentsRequiringLocationProcessingWhenFrequentLocationsAreAvailableInManagedObjectContext:(id)context error:(id *)error;
+ (id)momentsRequiringLocationProcessingWhenFrequentLocationsChangedInManagedObjectContext:(id)context error:(id *)error;
+ (id)predicateForAssetsIncludedInMoments;
+ (id)predicateForInvalidMoments;
+ (id)predicateForInvalidAssets;
+ (void)batchFetchMomentUUIDsByAssetUUIDsWithAssetUUIDs:(id)uuids library:(id)library completion:(id /* block */)completion;
+ (id)batchMomentUUIDsByPhotosHighlightUUIDForPhotosHighlightUUIDs:(id)uuids library:(id)library error:(id *)error;
+ (id)batchFetchMomentObjectIDsByAssetObjectIDsWithAssetObjectIDs:(id)ids inManagedObjectContext:(id)context error:(id *)error;
+ (id)batchFetchMomentObjectIDsByAssetObjectIDsWithAssetObjectIDs:(id)ids andAssetPredicate:(id)predicate inManagedObjectContext:(id)context error:(id *)error;
+ (id)allAssetsIncludedInMomentsInManagedObjectContext:(id)context IDsOnly:(BOOL)only error:(id *)error;
+ (id)allInvalidAssetsInManagedObjectContext:(id)context error:(id *)error;
+ (id)allAssetsInManagedObjectContext:(id)context predicate:(id)predicate IDsOnly:(BOOL)only error:(id *)error;
+ (id)baseSearchIndexPredicate;
+ (id)allAssetsIncludedInMomentsInLibrary:(id)library;
+ (id)entityName;
+ (id)fetchPredicateForExcludingOriginatorState:(short)state;
+ (void)_recalculateAssetCountsForMoment:(id)moment;
+ (id)sortByTimeSortDescriptors;

/* instance methods */
- (BOOL)isCloudSharedAlbum;
- (id)groupURL;
- (struct CGImage *)posterImage;
- (id)bestAsset;
- (id)displayTitleWithDateFormatter:(id)formatter;
- (void)addSearchIndexContentsToCollection:(id)collection fromDictionary:(id)dictionary withDateFormatter:(id)formatter synonymsDictionaries:(id)dictionaries sceneTaxonomyProvider:(id)provider;
- (void)_appendPersonsWithUUIDs:(id)uuids toCollection:(id)collection;
- (void)_appendSocialGroupIdentifiers:(id)identifiers toCollection:(id)collection;
- (void)_appendDates:(id)dates withDateFormatter:(id)formatter withSynonyms:(id)synonyms toCollection:(id)collection;
- (void)_appendScenesWithIdentifiers:(id)identifiers toCollection:(id)collection sceneTaxonomyProvider:(id)provider;
- (void)_appendMeanings:(id)meanings withSynonyms:(id)synonyms toCollection:(id)collection;
- (void)_appendHolidays:(id)holidays toCollection:(id)collection;
- (void)_appendPOIs:(id)pois withSynonyms:(id)synonyms toCollection:(id)collection;
- (void)_appendROIs:(id)rois withSynonyms:(id)synonyms toCollection:(id)collection;
- (void)_appendBusinessNames:(id)names toCollection:(id)collection;
- (void)_appendBusinessCategories:(id)categories toCollection:(id)collection;
- (void)_appendPublicEventStrings:(id)strings toCollection:(id)collection forSearchIndexCategory:(unsigned long long)category;
- (void)_appendPublicEventCategories:(id)categories withSynonyms:(id)synonyms toCollection:(id)collection;
- (void)_appendHomeToCollection:(id)collection;
- (void)_appendWorkText:(id)text toCollection:(id)collection;
- (void)_appendLocationsInfo:(id)info toCollection:(id)collection;
- (unsigned long long)countForAssetsOfKind:(short)kind;
- (void)awakeFromInsert;
- (void)awakeFromFetch;
- (void)willTurnIntoFault;
- (void)dealloc;
- (int)_cachedSharedAssetContainerValueWithRecalcIfNeededForKey:(id)key;
- (void)reportSharedAssetContainerIncrementalChange:(id)change forAllAssetsCountKey:(id)key;
- (void)recalculateSharedAssetContainerCachedValues;
- (void)registerForChanges;
- (void)unregisterForChanges;
- (BOOL)supportsDiagnosticInformation;
- (id)diagnosticInformation;
- (void)delete;
- (void)removeAssetData:(id)data;
- (void)insertAssetData:(id)data;
- (void)willSave;
- (void)didTurnIntoFault;
- (void)replaceObjectInAssets:(id)assets withObject:(id)object;
- (void)removeAssetsObject:(id)object;
- (unsigned long long)fetchedAssetsCount;
@end

#endif /* PLMoment_h */
