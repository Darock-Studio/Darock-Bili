//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLBackgroundJobService_h
#define PLBackgroundJobService_h
@import Foundation;

#include "PFCameraViewfinderSessionWatcherDelegate-Protocol.h"
#include "PFStateCaptureProvider-Protocol.h"
#include "PLBackgroundJobCriteria.h"
#include "PLBackgroundJobLibraryCoordinator.h"
#include "PLBackgroundJobLibraryCoordinatorDelegate-Protocol.h"
#include "PLBackgroundJobStatusCenter.h"

@class NSDate, NSDictionary, NSMutableSet, NSNumber, NSPointerArray, NSString, PFCameraViewfinderSessionWatcher, PFCoalescer, PFStateCaptureHandler;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_xpc_object;

@interface PLBackgroundJobService : NSObject<PFCameraViewfinderSessionWatcherDelegate, PFStateCaptureProvider, PLBackgroundJobLibraryCoordinatorDelegate> {
  /* instance variables */
  NSMutableSet *_registeredXPCActivities;
  NSObject<OS_xpc_object> *_runningXPCActivity;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _stateLock;
  unsigned long long _stateLock_state;
  PLBackgroundJobStatusCenter *_statusCenter;
  PLBackgroundJobLibraryCoordinator *_libraryCoordinator;
  PLBackgroundJobCriteria *_runningCriteria;
  PLBackgroundJobCriteria *_pausedCriteria;
  PFCoalescer *_registrationCoalescer;
  PFCameraViewfinderSessionWatcher *_cameraWatcher;
  NSDictionary *_libraryInvalidationCompletionHandlerByLibraryURL;
  NSDictionary *_bundlesToProcessByCriteriaShortCode;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _bundlesToProcessByCriteriaShortCodeLock;
  NSObject<OS_dispatch_queue> *_isolationQueue;
  NSObject<OS_dispatch_source> *_runningXPCActivityDeferTimer;
  BOOL _deferringService;
  NSNumber *_simulateXpcActivityDeferring;
  BOOL _cameraForeground;
  BOOL _needsActivityUnregistrationOnFirstLaunch;
  PFStateCaptureHandler *_stateCaptureHandler;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _watchdogTimerLock;
  NSDate *_watchdogTimerLock_dateOfWatchdogTimerStart;
  double _watchdogTimerLock_registrationCoalescerPushBackTimeInterval;
  NSString *_watchdogTimerLock_watchdogTimerSourceDescription;
}

@property (retain, nonatomic) NSPointerArray *observers;
@property (readonly) NSDictionary *statusCenterDump;
@property (readonly) unsigned long long serviceState;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)verifyStateTransitionFromState:(unsigned long long)state toState:(unsigned long long)state;
+ (BOOL)_stateIsReadyForRegistration:(unsigned long long)registration;
+ (BOOL)_stateIsReadyToRun:(unsigned long long)run;
+ (BOOL)_verifyActivityHandlerInvokedWithCorrectIdentifier:(id)identifier forCriteria:(id)criteria;
+ (void)_removeAllBundlesFromUserDefaultsWithoutLocking;

/* instance methods */
- (id)init;
- (id)initWithLibraryCoordinator:(id)coordinator;
- (id)initWithLibraryCoordinator:(id)coordinator statusCenter:(id)center;
- (void)_simulateXPCShouldDefer:(BOOL)defer;
- (void)_shutdown;
- (void)invalidateLibraryBundle:(id)bundle completion:(id /* block */)completion;
- (void)_setRunningCriteria:(id)criteria;
- (void)_setServiceState:(unsigned long long)state;
- (void)_setServiceStateOnQueue:(unsigned long long)queue;
- (BOOL)_activityIsRegisteredForCriteria:(id)criteria;
- (void)_setRegisteredActivityForCriteria:(id)criteria;
- (void)_removeRegisteredActivityForCriteria:(id)criteria;
- (void)_noteSignalNeededForCrashRecoveryOnBundle:(id)bundle;
- (void)_invalidateSignalNeededForCrashRecoveryOnBundle:(id)bundle;
- (BOOL)_signalNeededOnBundle:(id)bundle;
- (void)performCrashRecoveryIfNeededOnBundle:(id)bundle;
- (void)signalBackgroundProcessingNeededOnLibrary:(id)library;
- (void)signalBackgroundProcessingNeededOnBundle:(id)bundle;
- (void)startWatchdogTimerIfNeededWithSourceDescription:(id)description;
- (void)_fireWatchdogTimerWithStartTime:(id)time startingPushBackTimeInterval:(double)interval sourceDescription:(id)description;
- (void)_registerActivityWithoutCoalescingIfNecessaryOnBundle:(id)bundle;
- (void)_registerActivityIfNecessaryOnBundles:(id)bundles;
- (void)_registerActivityWithCriteria:(id)criteria;
- (void)_registerBackgroundProcessingNeededForBundles:(id)bundles context:(id)context;
- (void)_runActivity:(id)activity withCriteria:(id)criteria;
- (void)_unregisterActivityIfNeededShouldConsiderDeferring_enqueue:(BOOL)deferring_enqueue;
- (void)_unregisterActivityIfNeededShouldConsiderDeferring:(BOOL)deferring;
- (void)_startPollingForActivityStatus;
- (void)_startPollingForActivityStatusOnQueue;
- (void)_stopRunningBackgroundJobs;
- (void)_stopPollingForActivityStatus;
- (void)_startRunningBackgroundJobsWithCriteria:(id)criteria;
- (void)_startRunningBackgroundJobsWithCriteriaOnQueue:(id)queue;
- (void)_updateCameraForegroundState:(BOOL)state;
- (id)_bundlesToProcessByCriteriaShortCodesAsPathStrings;
- (id)_bundlesToProcessByCriteriaShortCodesAsPathStringsAlreadyLocked;
- (void)_persistBundleRecordsDictionaryToUserDefaults;
- (void)_loadBundleRecordsDictionaryFromUserDefaults;
- (void)_appendBundleRecordsToProcessingSet:(id)set criteriaShortCode:(id)code;
- (void)_removeBundleRecordFromProcessingSet:(id)set criteriaShortCode:(id)code;
- (void)_removeAllBundlesFromProcessingSetForCriteriaShortCode:(id)code;
- (void)_removeAllBundlesFromProcessingSet;
- (id)_getBundleRecordsFromProcessingSetForCriteriaShortCode:(id)code;
- (id)_getBundleRecordsFromProcessingSetForAllCriterias;
- (void)libraryCoordinatorFinishedJobsOnSubmittedBundle:(id)bundle withCriteria:(id)criteria;
- (void)libraryCoordinatorFinishedJobsOnAllSubmittedBundles;
- (void)cameraWatcherDidChangeState:(id)state;
- (id)stateCaptureDictionary;
@end

#endif /* PLBackgroundJobService_h */
