//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLManagedAlbumList_h
#define PLManagedAlbumList_h
@import Foundation;

#include "_PLManagedAlbumList.h"
#include "PLAlbumContainer-Protocol.h"
#include "PLDerivedAlbumListOrigin-Protocol.h"
#include "PLIndexMappersDataOrigin-Protocol.h"

@class NSMutableOrderedSet, NSNumber, NSString;
@protocol [5@"NSObject<PLIndexMappingCache>"];

@interface PLManagedAlbumList : _PLManagedAlbumList<PLAlbumContainer, PLDerivedAlbumListOrigin, PLIndexMappersDataOrigin> {
  /* instance variables */
  NSObject<PLIndexMappingCache> * _derivedAlbumLists[5];
}

@property (copy, @dynamic, nonatomic) NSNumber *identifier;
@property (copy, @dynamic, nonatomic) NSNumber *needsReorderingNumber;
@property (nonatomic) BOOL isRegisteredForChanges;
@property (nonatomic) short albumListType;
@property (retain, @dynamic, nonatomic) NSString *uuid;
@property (readonly, nonatomic) NSMutableOrderedSet *albums;
@property (readonly, nonatomic) BOOL hasAtLeastOneAlbum;
@property (readonly, nonatomic) BOOL canEditAlbums;
@property (readonly, nonatomic) unsigned long long albumsCount;
@property (readonly, nonatomic) BOOL isFolder;
@property (readonly, copy, nonatomic) id /* block */ albumsSortingComparator;
@property (readonly, nonatomic) int filter;
@property (readonly, nonatomic) unsigned long long unreadAlbumsCount;
@property (readonly, retain, nonatomic) NSString *_prettyDescription;
@property (readonly, retain, nonatomic) NSString *_typeDescription;
@property (readonly, nonatomic) unsigned long long containersCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)initialize;
+ (id)_singletonListWithType:(short)type library:(id)library;
+ (id)albumListInPhotoLibrary:(id)library;
+ (id)importListInPhotoLibrary:(id)library;
+ (id)eventListInPhotoLibrary:(id)library;
+ (id)facesAlbumListInPhotoLibrary:(id)library;
+ (id)placesAlbumListInPhotoLibrary:(id)library;
+ (id)scenesAlbumListInPhotoLibrary:(id)library;
+ (id)allStreamedAlbumsListInPhotoLibrary:(id)library;
+ (id)keyPathsForValuesAffectingValueForKey:(id)key;
+ (BOOL)albumKindHasFixedOrder:(int)order;
+ (unsigned long long)priorityForAlbumKind:(int)kind;
+ (id)_typeDescriptionForAlbumListType:(short)type;
+ (id)_albumListWithType:(short)type inManagedObjectContext:(id)context;
+ (void)addSingletonObjectsToContext:(id)context;
+ (id)albumListInManagedObjectContext:(id)context;
+ (id)importListInManagedObjectContext:(id)context;
+ (id)eventListInManagedObjectContext:(id)context;
+ (id)facesAlbumListInManagedObjectContext:(id)context;
+ (id)placesAlbumListInManagedObjectContext:(id)context;
+ (id)scenesAlbumListInManagedObjectContext:(id)context;
+ (id)allStreamedAlbumsListInManagedObjectContext:(id)context;
+ (BOOL)_albumOrderMatchesFrom:(id)from inDestination:(id)destination;
+ (id)_validAlbumsFromSource:(id)source destination:(id)destination;
+ (void)pushChangesFromAlbumContainer:(id)container toAlbumContainer:(id)container;
+ (BOOL)isValidTypeForPersistence:(short)persistence;
+ (BOOL)isValidPathForPersistence:(id)persistence;
+ (void)persistAlbumListUUIDs:(id)uuids type:(short)type pathManager:(id)manager allowsOverwrite:(BOOL)overwrite;
+ (BOOL)restoreAlbumListFromPersistedDataAtPath:(id)path library:(id)library;

/* instance methods */
- (id)payloadID;
- (id)payloadForChangedKeys:(id)keys;
- (id)payloadIDForTombstone:(id)tombstone;
- (void)dealloc;
- (void)awakeFromInsert;
- (void)awakeFromFetch;
- (void)willTurnIntoFault;
- (id)_albumsCountFetchRequest;
- (id)containers;
- (BOOL)isEmpty;
- (BOOL)canEditContainers;
- (id)containersRelationshipName;
- (BOOL)albumHasFixedOrder:(id)order;
- (void)insertIntoOrderedAlbumsAtIndexByPriorityForAlbum:(id)album;
- (void)setNeedsReordering;
- (BOOL)needsReordering;
- (void)updateAlbumsOrderIfNeeded;
- (void)preheatAlbumsForProperties:(id)properties relationships:(id)relationships;
- (void)preheatAlbumsAtIndexes:(id)indexes forProperties:(id)properties relationships:(id)relationships;
- (void)registerDerivedAlbumList:(id)list;
- (void)unregisterAllDerivedAlbums;
- (void)enumerateDerivedAlbumLists:(id /* block */)lists;
- (BOOL)hasDerivedIndexMappers;
- (void)enumerateDerivedIndexMappers:(id /* block */)mappers;
- (void)registerForChanges;
- (void)unregisterForChanges;
- (void)willSave;
- (void)didSave;
@end

#endif /* PLManagedAlbumList_h */
