//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLImageGeometry_h
#define PLImageGeometry_h
@import Foundation;

#include "NSCopying-Protocol.h"

@interface PLImageGeometry : NSObject<NSCopying>

@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } inputRect;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } outputRect;
@property (readonly, nonatomic) long long inputOrientation;
@property (nonatomic) long long userOrientation;
@property (nonatomic) long long appliedOrientation;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } appliedTransform;
@property (readonly, nonatomic) BOOL sizeInverted;
@property (readonly, nonatomic) BOOL mirrored;

/* class methods */
+ (id)geometryWithInputSize:(struct CGSize { double x0; double x1; })size initialOrientation:(long long)orientation;
+ (id)geometryWithOutputSize:(struct CGSize { double x0; double x1; })size appliedOrientation:(long long)orientation;

/* instance methods */
- (id)init;
- (id)initWithInputSize:(struct CGSize { double x0; double x1; })size inputOrientation:(long long)orientation;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isSizeInverted;
- (BOOL)isMirrored;
- (void)flipVertically;
- (void)flipHorizontally;
- (void)rotateClockwise;
- (void)rotateCounterClockwise;
- (void)applyOrientation:(long long)orientation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })inputRectForOutputRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })outputRectForInputRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })denormalizeRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect basis:(long long)basis;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })normalizeRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect basis:(long long)basis;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_basisRect:(long long)rect;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformToOrientation:(long long)orientation;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformFromOrientation:(long long)orientation;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_transformFromOrientation:(long long)orientation toOrientation:(long long)orientation;
- (id)description;
@end

#endif /* PLImageGeometry_h */
