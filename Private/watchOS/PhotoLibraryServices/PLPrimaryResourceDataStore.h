//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLPrimaryResourceDataStore_h
#define PLPrimaryResourceDataStore_h
@import Foundation;

#include "PLResourceDataStore.h"
#include "PLCloudPhotoLibraryManager.h"
#include "PLPrimaryResourceDataStoreKeyHelper.h"
#include "PLResourceDataStore-Protocol.h"

@class NSDictionary, NSMutableDictionary, NSString, PLPhotoLibraryPathManager;

@interface PLPrimaryResourceDataStore : PLResourceDataStore<PLResourceDataStore> {
  /* instance variables */
  NSMutableDictionary *_lock_makeAvailableProgressByTaskIdentifier;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (retain, nonatomic) PLPrimaryResourceDataStoreKeyHelper *mainScopeKeyHelper;
@property (retain, nonatomic) NSDictionary *keyHelperByBundleScope;
@property (readonly) PLCloudPhotoLibraryManager *cplManager;
@property (nonatomic) unsigned int masterThumbRecipeID;
@property (readonly, nonatomic) PLPhotoLibraryPathManager *pathManager;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (unsigned short)storeClassID;
+ (id)supportedRecipes;
+ (unsigned short)keyLengthWithDataPreview:(unsigned char)preview;
+ (unsigned int)currentDeviceMasterThumbRecipeID;

/* instance methods */
- (id)getClosestResourceMatchingCPLResourceType:(unsigned long long)type version:(unsigned int)version asset:(id)asset;
- (BOOL)bailOutOfVideoFinalizationForAsset:(id)asset taskIdentifier:(id)identifier error:(id *)error;
- (id)keyHelperForBundleScope:(unsigned short)scope;
- (id)_newProgressForTaskWithIdentifier:(id)identifier type:(long long)type;
- (BOOL)_lock_taskIsPendingDownloadWithIdentifier:(id)identifier;
- (void)_lock_transitionTaskToInflightWithIdentifier:(id)identifier;
- (BOOL)_isSystemLibraryStore;
- (id)_cplResourceIfDownloadIsAvailableForResource:(id)resource asset:(id)asset options:(id)options;
- (void)_downloadCPLResource:(id)cplresource options:(id)options taskDidBeginHandler:(id /* block */)handler completionHandler:(id /* block */)handler;
- (void)_cancelAvailabilityRequestWithTaskIdentifier:(id)identifier;
- (void)_verifyResourceLocalAvailability:(id)availability localResourceFileURL:(id *)url resourceReapirNeeded:(long long *)needed;
- (id)_makeResourceLocallyAvailable:(id)available options:(id)options completion:(id /* block */)completion;
- (id)_expectedFileURLForMasterThumbnailForAsset:(id)asset;
- (id)_masterThumbnailVirtualResourceForAsset:(id)asset;
- (id)initWithPathManager:(id)manager;
- (id)_cplManager;
- (id)name;
- (id)descriptionForSubtype:(long long)subtype;
- (id)keyFromKeyStruct:(const void *)struct;
- (id)resourceDataForKey:(id)key assetID:(id)id;
- (id)resourceURLForKey:(id)key assetID:(id)id;
- (id)expectedFileURLForResource:(id)resource asset:(id)asset;
- (id)updateDerivativeResourcesForAsset:(id)asset forLifecycleEvent:(unsigned int)event;
- (id)virtualResourcesForAsset:(id)asset;
- (BOOL)canStoreExternalResource:(id)resource;
- (BOOL)storeExternalResource:(id)resource forAsset:(id)asset options:(id)options error:(id *)error resultingResource:(id *)resource;
- (id)requestLocalAvailabilityChange:(short)change forResource:(id)resource options:(id)options completion:(id /* block */)completion;
- (BOOL)dataStoreSubtypeIsDownloadable:(long long)downloadable;
- (BOOL)videoResource:(id)resource matchesOrExceedsQualityLevel:(unsigned int)level;
- (BOOL)canStreamResource:(id)resource;
- (void)requestStreamingURLForResource:(id)resource asset:(id)asset intent:(unsigned long long)intent timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })range streamingHints:(id)hints inContext:(id)context clientBundleID:(id)id completion:(id /* block */)completion;
- (BOOL)canMarkAsynchronousLocalRenderAsOptionalForProgress:(id)progress;
- (void)markAsynchronousLocalRenderAsOptionalForProgress:(id)progress;
- (BOOL)supportsTimeRange;
- (void)transitional_reconsiderLocalAvailabilityBasedOnExistingLocationOfCPLResource:(id)cplresource givenFilePath:(id)path;
@end

#endif /* PLPrimaryResourceDataStore_h */
