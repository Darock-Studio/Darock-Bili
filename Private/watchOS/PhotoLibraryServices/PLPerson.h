//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLPerson_h
#define PLPerson_h
@import Foundation;

#include "PLManagedObject.h"
#include "PLCloudDeletable-Protocol.h"
#include "PLDetectedFace.h"
#include "PLDetectedFaceGroup.h"
#include "PLFileSystemMetadataPersistence-Protocol.h"
#include "PLPerson.h"
#include "PLShareParticipant.h"
#include "PLSyncablePerson-Protocol.h"
#include "PLUserFeedbackSupporting-Protocol.h"

@class NSDictionary, NSSet, NSString;

@interface PLPerson : PLManagedObject<PLSyncablePerson, PLCloudDeletable, PLFileSystemMetadataPersistence, PLUserFeedbackSupporting> {
  /* instance variables */
  short _deleteReason;
}

@property (readonly, nonatomic) BOOL shouldIndexForSearch;
@property (@dynamic, nonatomic) int verifiedType;
@property (@dynamic, nonatomic) int cloudVerifiedType;
@property (retain, nonatomic) NSString *personUUID;
@property (retain, nonatomic) NSString *fullName;
@property (readonly, nonatomic) BOOL userVerified;
@property (readonly, nonatomic) BOOL graphVerified;
@property (readonly, nonatomic) BOOL isTombstone;
@property (readonly, nonatomic) BOOL keyFaceIsPicked;
@property (nonatomic) short detectionType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, retain, nonatomic) id localID;
@property (nonatomic) short cloudLocalState;
@property (readonly, @dynamic, nonatomic) NSSet *detectedTorsos;
@property (retain, @dynamic, nonatomic) PLDetectedFace *keyFace;
@property (@dynamic, nonatomic) int verifiedType;
@property (@dynamic, nonatomic) int cloudVerifiedType;
@property (retain, @dynamic, nonatomic) NSString *personUUID;
@property (@dynamic, nonatomic) short detectionType;
@property (retain, @dynamic, nonatomic) NSString *fullName;
@property (retain, @dynamic, nonatomic) NSString *displayName;
@property (retain, @dynamic, nonatomic) NSSet *personReferences;
@property (retain, @dynamic, nonatomic) NSSet *detectedFaces;
@property (retain, @dynamic, nonatomic) NSSet *temporalDetectedFaces;
@property (readonly, nonatomic) NSSet *allDetectedFaces;
@property (@dynamic, nonatomic) short keyFacePickSource;
@property (retain, @dynamic, nonatomic) NSSet *rejectedFaces;
@property (retain, @dynamic, nonatomic) NSSet *rejectedFacesNeedingFaceCrops;
@property (retain, @dynamic, nonatomic) NSSet *clusterRejectedFaces;
@property (retain, @dynamic, nonatomic) NSSet *faceCrops;
@property (@dynamic, nonatomic) int type;
@property (@dynamic, nonatomic) unsigned int manualOrder;
@property (@dynamic, nonatomic) double mergeCandidateConfidence;
@property (retain, @dynamic, nonatomic) NSString *personUri;
@property (@dynamic, nonatomic) BOOL inPersonNamingModel;
@property (readonly, @dynamic, nonatomic) int faceCount;
@property (@dynamic, nonatomic) short cloudLocalState;
@property (@dynamic, nonatomic) short cloudDeleteState;
@property (retain, @dynamic, nonatomic) PLDetectedFaceGroup *associatedFaceGroup;
@property (retain, @dynamic, nonatomic) NSDictionary *contactMatchingDictionary;
@property (@dynamic, nonatomic) short questionType;
@property (@dynamic, nonatomic) unsigned short genderType;
@property (@dynamic, nonatomic) unsigned short ageType;
@property (@dynamic, nonatomic) unsigned short suggestedForClientType;
@property (@dynamic, nonatomic) short assetSortOrder;
@property (retain, @dynamic, nonatomic) NSSet *userFeedbacks;
@property (retain, @dynamic, nonatomic) PLShareParticipant *shareParticipant;
@property (retain, @dynamic, nonatomic) NSString *mdID;
@property (retain, @dynamic, nonatomic) NSSet *mergeCandidates;
@property (retain, @dynamic, nonatomic) NSSet *mergeCandidatesWithConfidence;
@property (retain, @dynamic, nonatomic) NSSet *invalidMergeCandidates;
@property (retain, @dynamic, nonatomic) PLPerson *mergeTargetPerson;
@property (retain, @dynamic, nonatomic) NSSet *mergeSourcePersons;
@property (nonatomic) int effectiveVerifiedType;
@property (readonly, nonatomic) BOOL isHiddenGraphPerson;
@property (readonly) long long cloudDeletionType;
@property (readonly, copy) NSString *cloudUUIDForDeletion;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)listOfSyncedProperties;
+ (id)_predicateForSupportedVerifiedTypesForUpload;
+ (id)_predicateForSupportedDetectionTypesForUpload;
+ (id)_predicateToBlockHiddenGraphTypesForUpload;
+ (id)personsToUploadInManagedObjectContext:(id)context limit:(long long)limit;
+ (id)personsToPrefetchInManagedObjectContext:(id)context;
+ (void)resetCloudStateInPhotoLibrary:(id)library;
+ (BOOL)person:(id)person isBetterMergeTargetThanPerson:(id)person;
+ (void)enumerateAssetUUIDsForSearchIndexingWithPersonUUID:(id)uuid managedObjectContext:(id)context assetUUIDHandler:(id /* block */)uuidhandler;
+ (id)fetchDuplicatePersonUUIDsInManagedObjectContext:(id)context error:(id *)error;
+ (id)insertIntoPhotoLibrary:(id)library withPersonUUID:(id)uuid fullName:(id)name verifiedType:(int)type;
+ (id)insertIntoManagedObjectContext:(id)context withPersonUUID:(id)uuid fullName:(id)name verifiedType:(int)type;
+ (id)personsMatchingPredicate:(id)predicate fetchLimit:(unsigned long long)limit sortDescriptors:(id)descriptors relationshipKeyPathsForPrefetching:(id)prefetching inManagedObjectContext:(id)context;
+ (id)personWithUUID:(id)uuid inManagedObjectContext:(id)context;
+ (id)allPersonsInManagedObjectContext:(id)context;
+ (id)personsWithPersonUri:(id)uri inManagedObjectContext:(id)context;
+ (id)personsWithPersonUris:(id)uris inManagedObjectContext:(id)context;
+ (id)personsWithUUIDs:(id)uuids inManagedObjectContext:(id)context;
+ (long long)cloudDeletionTypeForTombstone:(id)tombstone;
+ (id)cloudUUIDKeyForDeletion;
+ (void)createAssociatedPersonForFaceGroup:(id)group;
+ (void)createAssociatedPersonForFaceGroup:(id)group inManagedObjectContext:(id)context;
+ (id)createUnverifiedPersonInManagedObjectContext:(id)context;
+ (id)entityName;
+ (id)_batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)uuids predicate:(id)predicate inManagedObjectContext:(id)context error:(id *)error;
+ (void)batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)uuids predicate:(id)predicate inManagedObjectContext:(id)context completion:(id /* block */)completion;
+ (void)batchFetchPersonsByAssetUUIDWithAssetUUIDs:(id)uuids predicate:(id)predicate library:(id)library completion:(id /* block */)completion;
+ (id)fetchPersonCountByAssetUUIDForAssetUUIDs:(id)uuids predicate:(id)predicate library:(id)library error:(id *)error;
+ (void)batchFetchAssociatedPersonByFaceGroupUUIDWithFaceGroupUUIDs:(id)uuids predicate:(id)predicate library:(id)library completion:(id /* block */)completion;
+ (id)fullNameFromContact:(id)contact;
+ (id)displayNameFromContact:(id)contact;
+ (id)_stringFromContact:(id)contact preferGivenName:(BOOL)name;
+ (id)predicateForPersonsNeedingFaceCropGenerationForFaceObjectID:(id)id;
+ (id)predicateForVisibleKeyFace;
+ (id)predicateForPersistence;
+ (id)predicateForIncludedDetectionTypes:(id)types;
+ (id)predicateToExcludeTorsoOnlyPerson;
+ (BOOL)resetAllInLibrary:(id)library error:(id *)error;
+ (void)_setPersonResetInProgress:(BOOL)progress context:(id)context;
+ (id)resetAllInLibrary:(id)library completion:(id /* block */)completion;
+ (void)_resetMediaAnalysisAfterPersonResetInLibraryURL:(id)url resetPersons:(BOOL)persons completion:(id /* block */)completion;
+ (BOOL)_deleteObjectsWithFetchRequest:(id)request reason:(short)reason moc:(id)moc progress:(id)progress error:(id *)error;
+ (BOOL)_detachFacesForPerson:(id)person reason:(short)reason error:(id *)error;
+ (id)fetchFinalMergeTargetPersonForPersonWithUUID:(id)uuid context:(id)context predicate:(id)predicate;

/* instance methods */
- (BOOL)supportsCloudUpload;
- (BOOL)isSyncableChange;
- (BOOL)_allowSyncOfChangeWithKey:(id)key;
- (id)cplFullRecord;
- (void)applyCPLChangeForContactMatchingDictionary:(id)dictionary;
- (id)cplPersonChange;
- (void)setCPLSyncedMergeTarget:(id)target;
- (void)setKeyFaceToPicked;
- (id)syncDescription;
- (id)payloadID;
- (id)payloadForChangedKeys:(id)keys;
- (id)payloadIDForTombstone:(id)tombstone;
- (BOOL)validForPersistenceChangedForChangedKeys:(id)keys;
- (void)prepareForDeletion;
- (void)_removeSharedLibraryPeopleRulesForPerson;
- (void)disconnectFaceGroup;
- (void)createUnverifiedPersonForRejectedFaceUUIDs:(id)uuids inManagedObjectContext:(id)context;
- (void)_moveAllFacesToFinalMergeTarget;
- (void)willSave;
- (void)_triggerPersonSyncUpdateWithLibraryServicesManager:(id)manager;
- (id)mutableFaces;
- (id)mutableTemporalFaces;
- (id)mutableRejectedFaces;
- (id)mutableRejectedFacesNeedingFaceCrops;
- (id)mutableFaceCrops;
- (id)mutableMergeCandidates;
- (id)mutableMergeCandidatesWithConfidence;
- (id)mutableInvalidMergeCandidates;
- (void)setKeyFace:(id)face pickSource:(short)source;
- (id)debugLogDescription;
- (id)faceGroupDescription;
- (void)resetAllFacesToDefault;
- (void)resetFacesProcessing;
- (void)rejectFaceIfPossible:(id)possible shouldCreateFaceCrop:(BOOL)crop;
- (void)_updateSharedLibraryPeopleRulesForTombstone;
- (BOOL)isValidForPersistence;
- (void)persistMetadataToFileSystemWithPathManager:(id)manager;
- (void)removePersistedFileSystemDataWithPathManager:(id)manager;
- (BOOL)_personResetIsInProgress;
- (id)_nameRelatedMetadataKeys;
- (id)pickOptimalStateForUserInitiatedMergeWithPersons:(id)persons nominalTarget:(id)target;
- (id)reverseOrderedMergeTargetPersons;
- (void)prepareForUserInitiatedMergeWithPersons:(id)persons;
- (id)pickKeyFaceOptimalStateForContactDedupeWithPersons:(id)persons;
- (id)finalMergeTargetPerson;
- (void)_basicMergePersons:(id)persons;
- (void)basicMergePersons:(id)persons;
- (void)mergePersons:(id)persons withOptimalState:(id)state;
- (BOOL)validateDetectionTypesForMergingWithPersons:(id)persons error:(id *)error;
- (BOOL)dedupeGraphPersons:(id)persons error:(id *)error;
- (BOOL)deletePersonWithReason:(short)reason;
- (BOOL)_hideGraphPersonInsteadOfDelete;
@end

#endif /* PLPerson_h */
