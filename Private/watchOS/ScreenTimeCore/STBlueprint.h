//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 503.2.0.0.0
//
#ifndef STBlueprint_h
#define STBlueprint_h
@import Foundation;

#include "STUniquedManagedObject.h"
#include "STBlueprintSchedule.h"
#include "STBlueprintUsageLimit.h"
#include "STCoreDowntimeOverride.h"
#include "STCoreOrganization.h"
#include "STDowntimeConfiguration.h"
#include "STSerializableMappedObject-Protocol.h"
#include "STUniquelySerializableManagedObject-Protocol.h"
#include "STVersionVectorable-Protocol.h"

@class NSData, NSDate, NSSet, NSString;

@interface STBlueprint : STUniquedManagedObject<STSerializableMappedObject, STUniquelySerializableManagedObject, STVersionVectorable>

@property BOOL downtimeEnabled;
@property (readonly, copy) STDowntimeConfiguration *downtimeConfiguration;
@property (readonly, copy) NSString *downtimeScheduleText;
@property BOOL usageLimitEnabled;
@property (readonly, copy) NSString *limitDisplayName;
@property (readonly, copy) NSString *limitScheduleText;
@property (@dynamic, nonatomic) BOOL isTombstoned;
@property (@dynamic, nonatomic) BOOL invertUsageLimit;
@property (copy, @dynamic, nonatomic) NSString *identifier;
@property (copy, @dynamic, nonatomic) NSDate *creationDate;
@property (copy, @dynamic, nonatomic) NSDate *modificationDate;
@property (copy, @dynamic, nonatomic) NSString *type;
@property (@dynamic, nonatomic) BOOL enabled;
@property (@dynamic, nonatomic) BOOL limitEnabled;
@property (copy, @dynamic, nonatomic) NSDate *expiration;
@property (copy, @dynamic, nonatomic) NSDate *minimumInstallationDate;
@property (retain, @dynamic, nonatomic) NSSet *users;
@property (retain, @dynamic, nonatomic) STBlueprintSchedule *schedule;
@property (retain, @dynamic, nonatomic) STBlueprintUsageLimit *usageLimit;
@property (retain, @dynamic, nonatomic) NSSet *configurations;
@property (retain, @dynamic, nonatomic) STCoreOrganization *organization;
@property (retain, @dynamic) STCoreDowntimeOverride *override;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy, @dynamic, nonatomic) NSData *versionVector;
@property (@dynamic, nonatomic) BOOL isDirty;

/* class methods */
+ (BOOL)saveUsageLimitWithIdentifier:(id)identifier user:(id)user bundleIdentifiers:(id)identifiers webDomains:(id)domains categoryIdentifiers:(id)identifiers dailyBudgetLimit:(double)limit budgetLimitByWeekday:(id)weekday enabled:(BOOL)enabled behaviorType:(unsigned long long)type error:(id *)error;
+ (BOOL)deleteUsageLimitWithIdentifier:(id)identifier user:(id)user managedObjectContext:(id)context error:(id *)error;
+ (id)keyPathsForValuesAffectingLimitDisplayName;
+ (id)displayNameForUsageLimitWithCategoryIdentifiers:(id)identifiers bundleIdentifiers:(id)identifiers webDomains:(id)domains;
+ (void)fetchDisplayNameForUsageLimitWithCategoryIdentifiers:(id)identifiers bundleIdentifiers:(id)identifiers webDomains:(id)domains completionHandler:(id /* block */)handler;
+ (id)_getDisplayNameAndAddCategories:(id)categories toItemNames:(id)names remainingItems:(unsigned long long *)items;
+ (void)_addWebDomains:(id)domains toItemNames:(id)names remainingItems:(unsigned long long)items totalCount:(unsigned long long)count completionHandler:(id /* block */)handler;
+ (void)_createDisplayNameWithItemNames:(id)names itemCount:(unsigned long long)count completionHandler:(id /* block */)handler;
+ (id)keyPathsForValuesAffectingLimitScheduleText;
+ (BOOL)saveRestrictionsBlueprintWithValuesForPresetRestrictions:(id)restrictions forUser:(id)user error:(id *)error;
+ (BOOL)saveManagedUserBlueprintForUser:(id)user error:(id *)error;
+ (id)createManagedUserBlueprintForUser:(id)user error:(id *)error;
+ (BOOL)deleteManagedUserBlueprintForUser:(id)user error:(id *)error;
+ (BOOL)disableManagedUserBlueprintForUser:(id)user error:(id *)error;
+ (id)downtimeConfigurationForUserID:(id)id context:(id)context error:(id *)error;
+ (BOOL)_isStateChangeValid:(long long)valid forState:(long long)state;
+ (id)_downtimeForUser:(id)user inContext:(id)context error:(id *)error;
+ (id)applyOnDemandDowntimeStateChange:(long long)change withFixedDuration:(double)duration forUserID:(id)id context:(id)context error:(id *)error;
+ (BOOL)removeFixedDurationOnDemandDowntimeForUserID:(id)id context:(id)context error:(id *)error;
+ (id)applyAutomaticOnDemandDowntimeStateChange:(long long)change forUserID:(id)id context:(id)context error:(id *)error;
+ (id)applyScheduleStateChange:(long long)change forUserID:(id)id context:(id)context error:(id *)error;
+ (id)_fetchOrCreateDowntimeForUserID:(id)id inContext:(id)context error:(id *)error;
+ (id)_userForUserID:(id)id inContext:(id)context error:(id *)error;
+ (BOOL)saveDowntimeForUser:(id)user startTime:(id)time endTime:(id)time scheduleByWeekdayIndex:(id)index enabled:(BOOL)enabled behaviorType:(unsigned long long)type error:(id *)error;
+ (id)_updatedDowntimeForUser:(id)user startTime:(id)time endTime:(id)time scheduleByWeekdayIndex:(id)index enabled:(BOOL)enabled behaviorType:(unsigned long long)type error:(id *)error;
+ (id)_organizationIdentifierForUser:(id)user context:(id)context;
+ (id)_userDSIDStringForUser:(id)user context:(id)context;
+ (id)_createDowntimeForUser:(id)user organization:(id)organization context:(id)context;
+ (id)_updatedScheduleFromSchedule:(id)schedule withStartTime:(id)time endTime:(id)time scheduleByWeekdayIndex:(id)index context:(id)context;
+ (id)_declarationModeForBehaviorType:(unsigned long long)type;
+ (id)_configurationForDowntime:(id)downtime context:(id)context;
+ (id)_declarationForDowntime:(id)downtime user:(id)user configuration:(id)configuration behaviorType:(unsigned long long)type context:(id)context error:(id *)error;
+ (BOOL)_updateConfiguration:(id)configuration withDeclaration:(id)declaration context:(id)context error:(id *)error;
+ (id)defaultStartTime;
+ (id)defaultEndTime;
+ (id)keyPathsForValuesAffectingDowntimeScheduleText;
+ (id)customScheduleTimeRangeWithLocale:(id)locale startTimeComponents:(id)components endTimeComponents:(id)components;
+ (id)simpleScheduleTimeRangeWithStartTimeComponents:(id)components endTimeComponents:(id)components;
+ (BOOL)saveAlwaysAllowListForUser:(id)user withBundleIDs:(id)ids error:(id *)error;
+ (BOOL)saveDefaultAlwaysAllowListIfNecessaryForUser:(id)user error:(id *)error;
+ (BOOL)saveAlwaysAllowListForUser:(id)user withBundleIDs:(id)ids overwriteExistingList:(BOOL)list error:(id *)error;
+ (id)defaultAlwaysAllowBundleIDs;
+ (id)fetchRequestMatchingExpiredBlueprints;
+ (id)fetchRequestMatchingOrphanedBlueprints;
+ (id)fetchRequestMatchingUnexpiredOneMoreMinuteBlueprints;
+ (id)_fetchRequestMatchingBlueprintsForUserWithDSID:(id)dsid;
+ (id)fetchRequestMatchingBlueprintsForUserWithDSID:(id)dsid ofType:(id)type;
+ (id)fetchRequestMatchingBlueprintsForUserWithDSID:(id)dsid fromOrganization:(id)organization;
+ (id)fetchRequestMatchingBlueprintsForUserWithDSID:(id)dsid ofType:(id)type fromOrganization:(id)organization;
+ (id)fetchRequestMatchingBlueprintsForUserWithDSID:(id)dsid ofType:(id)type withIdentifier:(id)identifier fromOrganization:(id)organization;
+ (id)fetchResultsRequestsForChangesToBlueprints;
+ (id)fetchResultsRequestsForChangesToBlueprintsForUserWithDSID:(id)dsid;
+ (id)createBlueprintWithType:(id)type user:(id)user;
+ (id)blueprintIdentifierForUser:(id)user;
+ (id)_predicateForDowntimeBlueprint:(id)blueprint withDateFormatter:(id)formatter calendar:(id)calendar;
+ (id)_predicateForUsageLimitBlueprint:(id)blueprint withDateFormatter:(id)formatter calendar:(id)calendar;
+ (id)_predicateForUsageLimitOverrideBlueprint:(id)blueprint withDateFormatter:(id)formatter calendar:(id)calendar;
+ (id)_predicateForAlwaysAllowedAppsBlueprint:(id)blueprint withDateFormatter:(id)formatter calendar:(id)calendar;
+ (id)_predicateForRestrictionsBlueprint:(id)blueprint withDateFormatter:(id)formatter calendar:(id)calendar;
+ (id)_predicateForManagedUserBlueprint:(id)blueprint withDateFormatter:(id)formatter calendar:(id)calendar;
+ (id)_buildPredicateForDisablingBlueprint:(id)blueprint;
+ (void)_addExpirationPredicateForBlueprint:(id)blueprint toAllPredicates:(id)predicates usingDateFormatter:(id)formatter;
+ (void)_addMinimumInstallationDatePredicateForBlueprint:(id)blueprint toAllPredicates:(id)predicates usingDateFormatter:(id)formatter;
+ (void)_addUserPredicateForBlueprint:(id)blueprint toAllPredicates:(id)predicates;
+ (void)_addSchedulePredicatesForBlueprintScheudle:(id)scheudle toAllPredicates:(id)predicates usingDateFormatter:(id)formatter calendar:(id)calendar;
+ (void)_addCommonPredicatesForBlueprint:(id)blueprint toAllPredicates:(id)predicates usingDateFormatter:(id)formatter calendar:(id)calendar;
+ (id)_buildPredicateForUnspecializedBlueprint:(id)blueprint usingDateFormatter:(id)formatter calendar:(id)calendar;
+ (id)_buildConfigurationsByDeclarationIdentifierFromBlueprint:(id)blueprint error:(id *)error;
+ (id)_buildDeclarationsFromConfigurationsByDeclarationIdentifier:(id)identifier predicate:(id)predicate identifier:(id)identifier;
+ (BOOL)shouldUseGracePeriodForDowntimeOverride:(id)override configuration:(id)configuration;
+ (id)_cemPredicateWithDowntimeOverride:(id)override shouldUseGracePeriod:(BOOL)period dateFormater:(id)formater calendar:(id)calendar;
+ (id)fetchOrCreateWithDictionaryRepresentation:(id)representation inContext:(id)context error:(id *)error;
+ (id)serializableClassName;
+ (id)scheduleTextWithLocale:(id)locale weekdayScheduleComparator:(id /* block */)comparator scheduleTimeGetter:(id /* block */)getter;

/* instance methods */
- (BOOL)isUsageLimitEnabled;
- (id)_webFilterBlacklistStringsForURL:(id)url;
- (BOOL)permitWebFilterURL:(id)url pageTitle:(id)title error:(id *)error;
- (BOOL)isDowntimeEnabled;
- (id)_downtimeConfigurationAtDate:(id)date inCalendar:(id)calendar;
- (void)setStartTime:(id)time endTime:(id)time;
- (void)setStartTime:(id)time endTime:(id)time forDay:(unsigned long long)day;
- (void)disableDowntimeForDay:(unsigned long long)day;
- (void)_updateActiveOverrideAfterScheduleChange;
- (id)activeOverride;
- (id)_applyOnDemandDowntimeStateChange:(long long)change withFixedDuration:(double)duration atDate:(id)date inCalendar:(id)calendar error:(id *)error;
- (id)_applyAutomaticOnDemandDowntimeStateChange:(long long)change atDate:(id)date inCalendar:(id)calendar error:(id *)error;
- (id)applyOnDemandDowntimeStateChange:(long long)change withFixedDuration:(double)duration error:(id *)error;
- (BOOL)removeFixedDurationOnDemandDowntimeWithError:(id *)error;
- (id)applyAutomaticOnDemandDowntimeStateChange:(long long)change error:(id *)error;
- (id)applyScheduleStateChange:(long long)change error:(id *)error;
- (void)_reportCoreAnalyticsEventForDowntimeOverride:(id)override currentDate:(id)date;
- (id)_applyScheduleStateChange:(long long)change atDate:(id)date inCalendar:(id)calendar error:(id *)error;
- (void)tombstone;
- (void)awakeFromInsert;
- (id)declarationsWithError:(id *)error;
- (void)migrateToVersion2CategoriesIfNeeded;
- (void)didChangeValueForKey:(id)key;
- (id)computeUniqueIdentifier;
- (BOOL)updateWithDictionaryRepresentation:(id)representation;
- (id)dictionaryRepresentation;
@end

#endif /* STBlueprint_h */
