//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 503.2.0.0.0
//
#ifndef STConversation_h
#define STConversation_h
@import Foundation;

#include "STConversation.h"
#include "STManagementState.h"

@class CNContactStore, CNDowntimeWhitelist, DMFApplicationPolicyMonitor, DMFCommunicationPolicyMonitor, DMFEmergencyModeMonitor, NSMapTable, NSObject, NSString;
@protocol OS_dispatch_queue;

@interface STConversation : NSObject {
  /* instance variables */
  NSMapTable *_contextByHandles;
  NSObject<OS_dispatch_queue> *_stateChangeQueue;
  NSObject *_didFetchInitialStateLock;
}

@property (readonly) CNContactStore *contactStore;
@property (readonly) CNDowntimeWhitelist *whitelist;
@property (retain) STManagementState *managementState;
@property (retain) DMFCommunicationPolicyMonitor *communicationPolicyMonitor;
@property (retain) DMFApplicationPolicyMonitor *thirdPartyApplicationPolicyMonitor;
@property (readonly, copy) NSString *bundleIdentifier;
@property (readonly) BOOL isThirdPartyBundleIdentifier;
@property (readonly, copy) NSString *processName;
@property long long generalScreenTimePolicy;
@property long long whileLimitedPolicy;
@property unsigned long long currentApplicationState;
@property long long currentThirdPartyApplicationState;
@property (retain) DMFEmergencyModeMonitor *emergencyModeMonitor;
@property BOOL emergencyModeEnabled;
@property BOOL didFetchInitialScreenTimePolicyState;
@property BOOL didFetchInitialApplicationState;
@property BOOL didFetchInitialEmergencyModeState;
@property BOOL didFetchInitialThirdPartyApplicationState;
@property (readonly) int policyNotifyToken;
@property (readonly) int emergencyModeNotifyToken;
@property (retain) STConversation *me;
@property (copy) id /* block */ conversationCompletionHandler;

/* class methods */
+ (void)requestConversationWithBundleIdentifier:(id)identifier completionHandler:(id /* block */)handler;

/* instance methods */
- (id)initWithBundleIdentifier:(id)identifier;
- (id)initWithBundleIdentifier:(id)identifier contactStore:(id)store;
- (id)initSynchronouslyWithBundleIdentifier:(id)identifier;
- (id)initSynchronouslyWithThirdPartyBundleIdentifier:(id)identifier;
- (id)initWithBundleIdentifier:(id)identifier contactStore:(id)store completionHandler:(id /* block */)handler;
- (id)initWithThirdPartyBundleIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)_stConversationCommonInitWithBundleIdentifier:(id)identifier contactStore:(id)store completionHandler:(id /* block */)handler;
- (void)_stConversationCommonInitSetupObservationOfStateChanges;
- (void)_stConversationCommonInitWithThirdPartyBundleIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)callCompletionHandlerIfNeededWithConversation:(id)conversation error:(id)error;
- (void)callCompletionHandlerIfNeededWithThirdPartyConversation:(id)conversation error:(id)error;
- (void)dealloc;
- (id)allowableByContactsHandles:(id)handles;
- (void)_updateContext:(id)context forHandles:(id)handles updateGeneral:(BOOL)general updateLimited:(BOOL)limited updateCurrentApplicationState:(BOOL)state updateAllowedByContactsHandle:(BOOL)handle refreshContacts:(BOOL)contacts refreshWhitelist:(BOOL)whitelist updateEmergencyMode:(BOOL)mode;
- (void)_updateThirdPartyContext:(id)context forHandles:(id)handles;
- (void)_updateAllContextsUpdateGeneral:(BOOL)general updateLimited:(BOOL)limited updateCurrentApplicationState:(BOOL)state updateAllowedByContactsHandle:(BOOL)handle refreshContacts:(BOOL)contacts refreshWhitelist:(BOOL)whitelist updateEmergencyMode:(BOOL)mode;
- (void)_updateAllThirdPartyContexts;
- (void)_screenTimePolicyDidChange;
- (void)_updateAllContextsForNewWhileLimitedPolicyOrWhitelist;
- (void)_contactStoreDidChange;
- (void)_currentApplicationStateDidChange;
- (void)_currentThirdPartyApplicationStateDidChange;
- (void)_emergencyModeDidChange;
- (BOOL)_shouldGeneralScreenTimeAllowHandles:(id)handles context:(id)context;
- (BOOL)_shouldWhileLimitedAllowHandles:(id)handles context:(id)context;
- (BOOL)_doesContainAtLeastOneContactInHandles:(id)handles contactsByHandle:(id)handle;
- (void)_populateAllowedContactsByHandlesForContactHandles:(id)handles context:(id)context;
- (void)_populateThirdPartyAllowedContactsByHandlesForContactHandles:(id)handles context:(id)context;
- (id)_contactsByHandle:(id)handle error:(id *)error;
- (id)_filteredArrayForKnownHandlesInArray:(id)array;
@end

#endif /* STConversation_h */
