//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOPlace_h
#define GEOPlace_h
@import Foundation;

#include "PBCodable.h"
#include "GEOAddress.h"
#include "GEOBusiness.h"
#include "GEOLatLng.h"
#include "GEOMapRegion.h"
#include "GEOStructuredAddress.h"
#include "GEOTimezone.h"
#include "GEOURLSerializable-Protocol.h"
#include "NSCopying-Protocol.h"

@class BOOL *, NSMutableArray, NSString, PBDataReader, PBUnknownFields;

@interface GEOPlace : PBCodable<GEOURLSerializable, NSCopying> {
  /* instance variables */
  PBDataReader *_reader;
  unsigned int _readerMarkPos;
  unsigned int _readerMarkLength;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _readerLock;
  struct { unsigned int x :1 has_uID; unsigned int x :1 has_area; unsigned int x :1 has_geoId; unsigned int x :1 has_addressGeocodeAccuracy; unsigned int x :1 has_localSearchProviderID; unsigned int x :1 has_referenceFrame; unsigned int x :1 has_type; unsigned int x :1 has_isDisputed; unsigned int x :1 read_unknownFields; unsigned int x :1 read_address; unsigned int x :1 read_business; unsigned int x :1 read_center; unsigned int x :1 read_displayMapRegion; unsigned int x :1 read_entryPoints; unsigned int x :1 read_mapRegion; unsigned int x :1 read_name; unsigned int x :1 read_phoneticAddress; unsigned int x :1 read_phoneticLocaleIdentifier; unsigned int x :1 read_phoneticName; unsigned int x :1 read_roadAccessPoints; unsigned int x :1 read_spokenAddress; unsigned int x :1 read_spokenName; unsigned int x :1 read_spokenStructuredAddress; unsigned int x :1 read_timezone; unsigned int x :1 wrote_anyField; } _flags;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) GEOBusiness *firstBusiness;
@property (readonly, nonatomic) BOOL hasPhoneticLocaleIdentifier;
@property (retain, nonatomic) NSString *phoneticLocaleIdentifier;
@property (nonatomic) BOOL hasReferenceFrame;
@property (nonatomic) int referenceFrame;
@property (nonatomic) BOOL hasUID;
@property (nonatomic) long long uID;
@property (nonatomic) BOOL hasType;
@property (nonatomic) int type;
@property (readonly, nonatomic) BOOL hasName;
@property (retain, nonatomic) NSString *name;
@property (readonly, nonatomic) BOOL hasMapRegion;
@property (retain, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) BOOL hasAddress;
@property (retain, nonatomic) GEOAddress *address;
@property (readonly, nonatomic) BOOL hasPhoneticName;
@property (retain, nonatomic) NSString *phoneticName;
@property (readonly, nonatomic) BOOL hasPhoneticAddress;
@property (retain, nonatomic) GEOAddress *phoneticAddress;
@property (readonly, nonatomic) BOOL hasCenter;
@property (retain, nonatomic) GEOLatLng *center;
@property (retain, nonatomic) NSMutableArray *business;
@property (nonatomic) BOOL hasAddressGeocodeAccuracy;
@property (nonatomic) int addressGeocodeAccuracy;
@property (retain, nonatomic) NSMutableArray *entryPoints;
@property (nonatomic) BOOL hasIsDisputed;
@property (nonatomic) BOOL isDisputed;
@property (nonatomic) BOOL hasLocalSearchProviderID;
@property (nonatomic) int localSearchProviderID;
@property (readonly, nonatomic) BOOL hasSpokenName;
@property (retain, nonatomic) NSString *spokenName;
@property (readonly, nonatomic) BOOL hasSpokenAddress;
@property (retain, nonatomic) NSString *spokenAddress;
@property (nonatomic) BOOL hasArea;
@property (nonatomic) double area;
@property (readonly, nonatomic) BOOL hasSpokenStructuredAddress;
@property (retain, nonatomic) GEOStructuredAddress *spokenStructuredAddress;
@property (readonly, nonatomic) BOOL hasTimezone;
@property (retain, nonatomic) GEOTimezone *timezone;
@property (readonly, nonatomic) BOOL hasDisplayMapRegion;
@property (retain, nonatomic) GEOMapRegion *displayMapRegion;
@property (retain, nonatomic) NSMutableArray *roadAccessPoints;
@property (nonatomic) BOOL hasGeoId;
@property (nonatomic) long long geoId;
@property (readonly, nonatomic) PBUnknownFields *unknownFields;

/* class methods */
+ (id)placeForPlaceData:(id)data;
+ (id)_urlRepresentationForCurrentLocation;
+ (id)_urlForAction:(id)action rison:(id)rison;
+ (id)_urlToShowURLRepresentations:(id)urlrepresentations options:(id)options;
+ (id)_urlToShowPlaces:(id)places options:(id)options;
+ (id)_urlToShowCurrentLocationAndPlaces:(id)places currentLocationIndex:(unsigned long long)index options:(id)options;
+ (id)_urlToShowCurrentLocationWithOptions:(id)options;
+ (id)_urlForDirectionsWithWaypoints:(id)waypoints options:(id)options;
+ (id)_urlForDirectionsFromOrigin:(id)origin toDestination:(id)destination options:(id)options;
+ (id)_placesFromPresentAction:(id)action hasCurrentLocation:(BOOL *)location currentLocationIndex:(unsigned long long *)index options:(id *)options;
+ (id)_placesFromShowAction:(id)action hasCurrentLocation:(BOOL *)location currentLocationIndex:(unsigned long long *)index options:(id *)options;
+ (id)_placesFromShowAction:(id)action currentLocationIndices:(id *)indices options:(id *)options;
+ (id)_placesFromDirectionsAction:(id)action hasCurrentLocation:(BOOL *)location currentLocationIndex:(unsigned long long *)index options:(id *)options;
+ (id)_placesFromDirectionsAction:(id)action currentLocationIndices:(id *)indices options:(id *)options;
+ (id)_placesFromURL:(id)url hasCurrentLocation:(BOOL *)location currentLocationIndex:(unsigned long long *)index options:(id *)options;
+ (id)_placesFromURL:(id)url currentLocationIndices:(id *)indices options:(id *)options;
+ (Class)businessType;
+ (Class)entryPointType;
+ (Class)roadAccessPointsType;
+ (BOOL)isValid:(id)valid;

/* instance methods */
- (id)geoMapItem;
- (id)initWithName:(id)name placeType:(int)type areaInMeters:(double)meters;
- (id)initWithLocation:(id)location addressDictionary:(id)dictionary name:(id)name businessURL:(id)url phoneNumber:(id)number muid:(unsigned long long)muid attributionID:(id)id sampleSizeForUserRatingScore:(unsigned int)score normalizedUserRatingScore:(float)score;
- (id)initWithLatitude:(double)latitude longitude:(double)longitude addressDictionary:(id)dictionary;
- (id)initWithLatitude:(double)latitude longitude:(double)longitude placeType:(int)type;
- (id)initWithLatitude:(double)latitude longitude:(double)longitude;
- (id)addressDictionary;
- (struct { double x0; double x1; })coordinate;
- (void)setCenterCoordinate:(struct { double x0; double x1; })coordinate;
- (double)radialDistance;
- (id)arrivalMapRegion;
- (id)arrivalMapRegionForTransportType:(int)type;
- (id)bestName;
- (void)setNSTimeZone:(id)zone;
- (id)initWithPlaceInfo:(id)info entity:(id)entity addressObject:(id)object bounds:(id)bounds roadAccessInfo:(id)info;
- (id)initWithUrlRepresentation:(id)representation;
- (id)urlRepresentation;
- (BOOL)_isEquivalentURLRepresentationTo:(id)to;
- (id)_urlToShowWithOptions:(id)options;
- (id)_urlForDirectionsToPlace:(id)place options:(id)options;
- (id)_urlForDirectionsFromPlace:(id)place options:(id)options;
- (id)_urlForDirectionsToCurrentLocationWithOptions:(id)options;
- (id)_urlForDirectionsFromCurrentLocationWithOptions:(id)options;
- (id)init;
- (id)initWithData:(id)data;
- (id)typeAsString:(int)string;
- (int)StringAsType:(id)type;
- (void)clearBusiness;
- (void)addBusiness:(id)business;
- (unsigned long long)businessCount;
- (id)businessAtIndex:(unsigned long long)index;
- (id)addressGeocodeAccuracyAsString:(int)string;
- (int)StringAsAddressGeocodeAccuracy:(id)accuracy;
- (void)clearEntryPoints;
- (void)addEntryPoint:(id)point;
- (unsigned long long)entryPointsCount;
- (id)entryPointAtIndex:(unsigned long long)index;
- (void)clearRoadAccessPoints;
- (void)addRoadAccessPoints:(id)points;
- (unsigned long long)roadAccessPointsCount;
- (id)roadAccessPointsAtIndex:(unsigned long long)index;
- (id)dictionaryRepresentation;
- (id)jsonRepresentation;
- (id)initWithDictionary:(id)dictionary;
- (id)initWithJSON:(id)json;
- (void)readAll:(BOOL)all;
- (BOOL)readFrom:(id)from;
- (void)writeTo:(id)to;
- (BOOL)hasGreenTeaWithValue:(BOOL)value;
- (void)copyTo:(id)to;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isEqual:(id)equal;
- (void)mergeFrom:(id)from;
- (void)clearUnknownFields:(BOOL)fields;
- (id)referenceFrameAsString:(int)string;
- (int)StringAsReferenceFrame:(id)frame;
@end

#endif /* GEOPlace_h */
