//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOComposedRoute_h
#define GEOComposedRoute_h
@import Foundation;

#include "GEOComposedRouteCellularCoverage.h"
#include "GEOComposedRouteCoordinateArray.h"
#include "GEOComposedRouteMutableData.h"
#include "GEOComposedRouteTraffic.h"
#include "GEOComposedRouteTransitDisplayStrings-Protocol.h"
#include "GEOComposedString.h"
#include "GEOComposedWaypoint.h"
#include "GEOElevationProfile.h"
#include "GEOLabelAction.h"
#include "GEOMapAccessRestrictions-Protocol.h"
#include "GEOMapRegion.h"
#include "GEOPBTransitArtwork.h"
#include "GEORouteAttributes.h"
#include "GEORouteDisplayHints.h"
#include "GEORouteInitializerData.h"
#include "GEORouteRestrictionZoneInfo.h"
#include "GEOServerFormattedString-Protocol.h"
#include "GEOStyleAttributes.h"
#include "GEOTransitArtworkDataSource-Protocol.h"
#include "GEOTransitDecoderData.h"
#include "GEOTransitRouteUpdateRequest.h"
#include "GEOTransitRoutingIncidentMessage-Protocol.h"
#include "GEOTransitSuggestedRoute.h"
#include "GEOWaypointRoute.h"
#include "GEOZilchDecoder.h"
#include "NSSecureCoding-Protocol.h"
#include "_GEORouteHypothesisMonitorETAProvider-Protocol.h"

@class NSArray, NSData, NSDate, NSHashTable, NSMutableArray, NSString, NSUUID, geo_isolater, geo_reentrant_isolater;

@interface GEOComposedRoute : NSObject<_GEORouteHypothesisMonitorETAProvider, NSSecureCoding, GEOMapAccessRestrictions> {
  /* instance variables */
  GEOTransitDecoderData *_decoderData;
  GEOComposedRouteCoordinateArray *_coordinates;
  GEOComposedRouteCellularCoverage *_cellularCoverage;
  long long _initialPromptTypes;
  NSArray *_initialRideSelections;
  NSArray *_currentSectionOptions;
  NSArray *_ticketedSegments;
  NSArray *_transitRouteUpdateAlerts;
  NSObject<GEOComposedRouteTransitDisplayStrings> *_transitRouteDisplayStrings;
  NSMutableArray *_snappedPaths;
  GEOZilchDecoder *_zilchDecoder;
  geo_reentrant_isolater *_snappedRoutesIsolater;
  geo_isolater *_mutableDataLock;
  NSHashTable *_observers;
}

@property (readonly, nonatomic) double _hypothesis_travelDuration;
@property (readonly, nonatomic) double _hypothesis_travelDurationAggressiveEstimate;
@property (readonly, nonatomic) double _hypothesis_travelDurationConservativeEstimate;
@property (readonly, nonatomic) unsigned long long serverIdentifier;
@property (retain, nonatomic) NSData *serverRouteID;
@property (retain, nonatomic) NSUUID *uniqueRouteID;
@property (readonly, nonatomic) GEORouteInitializerData *routeInitializerData;
@property (readonly, nonatomic) GEORouteAttributes *routeAttributes;
@property (readonly, nonatomic) NSArray *etauPositions;
@property (readonly, nonatomic) unsigned int pointCount;
@property (readonly, nonatomic) struct PolylineCoordinate { unsigned int x0; float x1; } endRouteCoordinate;
@property (readonly, nonatomic) BOOL usesZilch;
@property (readonly, nonatomic) BOOL usesRoutingPathPoints;
@property (readonly, nonatomic) GEOComposedWaypoint *origin;
@property (readonly, nonatomic) GEOComposedWaypoint *destination;
@property (readonly, nonatomic) NSArray *waypoints;
@property (readonly, nonatomic) BOOL isNavigable;
@property (readonly, nonatomic) NSData *directionsResponseID;
@property (readonly, nonatomic) NSData *etauResponseID;
@property (readonly, nonatomic) unsigned long long indexInResponse;
@property (readonly, nonatomic) NSArray *legs;
@property (readonly, nonatomic) NSArray *segments;
@property (readonly, nonatomic) NSArray *steps;
@property (readonly, nonatomic) NSArray *enrouteNotices;
@property (readonly, nonatomic) NSArray *composedGuidanceEvents;
@property (readonly, nonatomic) NSArray *visualInfos;
@property (readonly, nonatomic) NSArray *visualInfosForRouteNameLabels;
@property (readonly, nonatomic) NSArray *cameraInfos;
@property (readonly, nonatomic) NSArray *stops;
@property (readonly, nonatomic) NSArray *halls;
@property (readonly, nonatomic) NSArray *stations;
@property (readonly, nonatomic) NSObject<GEOTransitArtworkDataSource> *routeLabelArtwork;
@property (readonly, nonatomic) NSString *name;
@property (readonly, nonatomic) GEOComposedString *routeLabelDescriptionString;
@property (readonly, nonatomic) NSObject<GEOServerFormattedString> *routeLabelDescription;
@property (readonly, nonatomic) GEOLabelAction *routeLabelAction;
@property (readonly, nonatomic) NSString *trafficDescription;
@property (readonly, nonatomic) GEOPBTransitArtwork *trafficDescriptionArtwork;
@property (readonly, nonatomic) NSArray *routeDescriptions;
@property (readonly, nonatomic) GEOComposedString *previewDurationString;
@property (readonly, nonatomic) NSObject<GEOServerFormattedString> *previewDurationFormatString;
@property (readonly, nonatomic) GEOComposedString *pickingDurationString;
@property (readonly, nonatomic) NSObject<GEOServerFormattedString> *pickingDurationFormatString;
@property (readonly, nonatomic) GEOComposedString *planningDescriptionString;
@property (readonly, nonatomic) NSObject<GEOServerFormattedString> *planningDescriptionFormatString;
@property (readonly, nonatomic) GEOComposedString *planningDistanceString;
@property (readonly, nonatomic) NSObject<GEOServerFormattedString> *planningDistanceFormatString;
@property (readonly, nonatomic) NSString *planningSeparatorString;
@property (readonly, nonatomic) GEOComposedString *transitDescriptionString;
@property (readonly, nonatomic) NSObject<GEOServerFormattedString> *transitDescriptionFormatString;
@property (readonly, nonatomic) GEOComposedString *transitRouteBadgeString;
@property (readonly, nonatomic) NSObject<GEOServerFormattedString> *transitRouteBadge;
@property (readonly, nonatomic) NSArray *advisories;
@property (readonly, nonatomic) GEOComposedString *infrastructureDescriptionString;
@property (readonly, nonatomic) NSObject<GEOServerFormattedString> *infrastructureDescription;
@property (readonly, nonatomic) GEORouteRestrictionZoneInfo *restrictionZoneInfo;
@property (readonly, nonatomic) unsigned long long stepsCount;
@property (readonly, nonatomic) BOOL isNewProtocolRoute;
@property (readonly, nonatomic) GEOWaypointRoute *geoWaypointRoute;
@property (readonly, nonatomic) BOOL hasArrivalMapRegion;
@property (readonly, nonatomic) GEOMapRegion *arrivalMapRegion;
@property (readonly, nonatomic) BOOL hasExpectedTime;
@property (readonly, nonatomic) unsigned int expectedTime;
@property (readonly, nonatomic) BOOL hasHistoricTravelTime;
@property (readonly, nonatomic) unsigned int historicTravelTime;
@property (readonly, nonatomic) double freeflowTravelTime;
@property (readonly, nonatomic) double travelTimeAggressiveEstimate;
@property (readonly, nonatomic) double travelTimeConservativeEstimate;
@property (readonly, nonatomic) double chargingDuration;
@property (readonly, nonatomic) double travelAndChargingDuration;
@property (readonly, nonatomic) NSDate *startDate;
@property (readonly, nonatomic) double distance;
@property (readonly, nonatomic) double pointLength;
@property (readonly, nonatomic) BOOL avoidsTolls;
@property (readonly, nonatomic) BOOL avoidsHighways;
@property (readonly, nonatomic) BOOL avoidsTraffic;
@property (nonatomic) BOOL maneuverDisplayEnabled;
@property (nonatomic) unsigned long long currentDisplayStep;
@property (retain, nonatomic) NSArray *maneuverDisplaySteps;
@property (nonatomic) unsigned long long selectedSegmentIndex;
@property (nonatomic) unsigned int firstVisiblePoint;
@property (readonly, nonatomic) int transportType;
@property (retain, nonatomic) GEOTransitSuggestedRoute *suggestedRoute;
@property (readonly, nonatomic) GEOTransitSuggestedRoute *originalSuggestedRoute;
@property (readonly, nonatomic) unsigned long long indexOfSuggestedRoute;
@property (readonly, copy, nonatomic) NSArray *routePlanningArtworks;
@property (readonly, nonatomic) NSObject<GEOTransitRoutingIncidentMessage> *transitRoutingIncidentMessage;
@property (readonly, nonatomic) BOOL supportsRideClusters;
@property (readonly, nonatomic) NSArray *rideSelections;
@property (readonly, nonatomic) BOOL isEVRoute;
@property (readonly, nonatomic) BOOL isWalkingOnlyTransitRoute;
@property (nonatomic) double transitUpdateInitialDelay;
@property (readonly, nonatomic) GEOElevationProfile *elevationProfile;
@property (readonly, nonatomic) GEORouteDisplayHints *displayHints;
@property (readonly, nonatomic) BOOL shouldShowSchedule;
@property (readonly, nonatomic) GEOStyleAttributes *styleAttributes;
@property (readonly, nonatomic) GEOComposedRouteTraffic *traffic;
@property (retain, nonatomic) GEOComposedRouteMutableData *mutableData;
@property (retain, nonatomic) NSArray *transitPaymentMethods;
@property (readonly, nonatomic) BOOL offlineRoute;
@property (readonly, nonatomic) int routeType;
@property (readonly, nonatomic) NSArray *sections;
@property (readonly, nonatomic) GEOMapRegion *boundingMapRegion;
@property (readonly, nonatomic) unsigned long long numberOfTransitStops;
@property (readonly, nonatomic) GEOTransitRouteUpdateRequest *transitRouteUpdateRequest;
@property (retain, nonatomic) NSUUID *revisionIdentifier;
@property (readonly, nonatomic) NSArray *baseTransitFares;
@property (readonly, nonatomic) BOOL allowsNetworkTileLoad;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)geoOriginalWaypointRouteFromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate purpose:(int)purpose;
- (id)geoOriginalWaypointRouteFromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate purpose:(int)purpose origin:(id)origin startPathSegment:(id)segment;
- (id)geoETAWaypointRoute;
- (id)geoETAWaypointRouteFromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate includeOriginWaypointInfo:(BOOL)info startPathSegment:(id)segment;
- (void)iterateTravelTimeRangesToRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate etaRoute:(id)route handler:(id /* block */)handler;
- (void)iterateTravelTimeRangesFromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate etaRoute:(id)route handler:(id /* block */)handler;
- (double)remainingTimeToEndOfCurrentLegFrom:(struct PolylineCoordinate { unsigned int x0; float x1; })from etaRoute:(id)route;
- (double)remainingTimeToEndOfRouteFrom:(struct PolylineCoordinate { unsigned int x0; float x1; })from etaRoute:(id)route;
- (id)truncatedTrafficFromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (struct PolylineCoordinate { unsigned int x0; float x1; })coordinateAtTimeInterval:(double)interval beforeCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate etaRoute:(id)route;
- (struct PolylineCoordinate { unsigned int x0; float x1; })coordinateAtTimeInterval:(double)interval afterCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate etaRoute:(id)route;
- (id)_geoETAWaypointRouteWithZilchFromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (void)_iterateTravelTimeRangesForRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate etaRoute:(id)route fromOrigin:(BOOL)origin handler:(id /* block */)handler;
- (void)_iterateTravelTimeRangesForStep:(id)step handler:(id /* block */)handler;
- (double)_hypothesis_travelDurationFromStep:(id)step stepRemainingDistance:(double)distance;
- (id)initWithCompanionRoute:(id)route;
- (void)applyCompanionUpdates:(id)updates;
- (double)distanceFromStartToIndex:(unsigned long long)index;
- (double)distanceToEndFromIndex:(unsigned long long)index;
- (double)distanceBetweenIndex:(unsigned long long)index andIndex:(unsigned long long)index;
- (double)distanceFromStartToRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate;
- (double)distanceToEndFromRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate;
- (double)distanceBetweenRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate andRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate;
- (struct { unsigned int x0; float x1; })routeCoordinateForDistanceAfterStart:(double)start;
- (struct { unsigned int x0; float x1; })routeCoordinateForDistanceBeforeEnd:(double)end;
- (struct { unsigned int x0; float x1; })routeCoordinateForDistance:(double)distance afterRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate;
- (struct { unsigned int x0; float x1; })routeCoordinateForDistance:(double)distance beforeRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate;
- (unsigned long long)stepIndexForRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate;
- (unsigned long long)segmentIndexForRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate;
- (unsigned long long)legIndexForRouteCoordinate:(struct { unsigned int x0; float x1; })coordinate;
- (id)init;
- (id)initWithGeoWaypointRoute:(id)route initializerData:(id)data;
- (id)initWithTransitGeometry:(id)geometry andLine:(id)line andStops:(id)stops;
- (id)initWithSuggestedRoute:(id)route initializerData:(id)data;
- (id)initWithSuggestedRoute:(id)route initializerData:(id)data updateRequest:(id)request;
- (id)initWithSuggestedRoute:(id)route initializerData:(id)data uniqueRouteID:(id)id;
- (void)_initOtherRouteFeatures:(id)features initializerData:(id)data;
- (void)_initAdvisoriesForRoute:(id)route initializerData:(id)data;
- (void)_initStringsForTransitRouteDisplayStrings:(id)strings;
- (void)_ingestRouteBuilderOutput:(id)output;
- (void)_populateArtworkForSuggestedRoute:(id)route decoderData:(id)data;
- (void)_enumerateAllStepsWithBlock:(id /* block */)block;
- (void)dealloc;
- (BOOL)_MapsCarPlay_isEqual:(id)equal;
- (void)registerObserver:(id)observer;
- (void)unregisterObserver:(id)observer;
- (id)coordinates;
- (id)firstEVStep;
- (id)lastEVStep;
- (id)lastEVStepInLegWithIndex:(unsigned long long)index;
- (id)waypointsFromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (id)waypointDisplayInfoForWaypoint:(id)waypoint;
- (BOOL)hasInitialPromptType:(int)type;
- (void)_initializeManeuverDisplaySteps;
- (struct { double x0; double x1; double x2; })pointAt:(unsigned long long)at;
- (struct PolylineCoordinate { unsigned int x0; float x1; })coordinateAtOffset:(double)offset;
- (struct { double x0; double x1; double x2; })pointAtRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (struct PolylineCoordinate { unsigned int x0; float x1; })coordinateAtOffset:(double)offset fromRoutePoint:(unsigned long long)point;
- (struct PolylineCoordinate { unsigned int x0; float x1; })coordinateAtOffset:(double)offset fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (struct PolylineCoordinate { unsigned int x0; float x1; })routeCoordinateAtDistance:(double)distance beforeRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (double)distanceFromPoint:(struct PolylineCoordinate { unsigned int x0; float x1; })point toPoint:(struct PolylineCoordinate { unsigned int x0; float x1; })point;
- (double)distanceFromPointIndex:(unsigned long long)index toPointIndex:(unsigned long long)index;
- (double)stepDistanceFromPoint:(struct PolylineCoordinate { unsigned int x0; float x1; })point toPoint:(struct PolylineCoordinate { unsigned int x0; float x1; })point;
- (struct PolylineCoordinate { unsigned int x0; float x1; })closestPointOnRoute:(struct { double x0; double x1; })route;
- (id)stepAtIndex:(unsigned long long)index;
- (id)stepForPointIndex:(unsigned int)index;
- (unsigned long long)stepIndexForPointIndex:(unsigned long long)index;
- (unsigned long long)segmentIndexForPointIndex:(unsigned long long)index;
- (int)estimatedCellularCoverageForOffset:(double)offset;
- (void)enumerateCellularCoverageRangesWithBlock:(id /* block */)block;
- (unsigned long long)segmentIndexForStepIndex:(unsigned long long)index;
- (id)segmentForStepIndex:(unsigned long long)index;
- (id)segmentForPointIndex:(unsigned int)index;
- (unsigned long long)legIndexForStepIndex:(unsigned long long)index;
- (unsigned long long)lastStepIndexOfLegAtStepIndex:(unsigned long long)index;
- (void)maneuverDisplayHasChanged;
- (void)getFormOfWay:(int *)way roadClass:(int *)class at:(unsigned int)at;
- (int)formOfWayAt:(unsigned int)at;
- (id)roadFeatureAtPointIndex:(unsigned int)index;
- (int)transportTypeForStep:(id)step;
- (id)zilchDataFromStepIndex:(unsigned long long)index;
- (id)zilchDataArrayToEndOfRouteFromStepIndex:(unsigned long long)index;
- (id)routingPathDataFromStart:(struct PolylineCoordinate { unsigned int x0; float x1; })start;
- (double)distanceBetweenRoutePointIndex:(unsigned int)index toPointIndex:(unsigned int)index;
- (double)distanceBetweenLocation:(struct { double x0; double x1; })location nextPointIndex:(unsigned int)index toPointIndex:(unsigned int)index;
- (double)distanceBetweenStep:(id)step andStep:(id)step;
- (double)remainingTimeAlongRouteFromStepIndex:(unsigned long long)index currentStepRemainingDistance:(double)distance;
- (double)remainingTimeToEndOfLeg:(unsigned long long)leg currentStepRemainingDistance:(double)distance;
- (double)remainingDistanceToEndOfLeg:(unsigned long long)leg currentStepRemainingDistance:(double)distance;
- (double)remainingDistanceAlongRouteFromStepIndex:(unsigned long long)index currentStepRemainingDistance:(double)distance;
- (BOOL)checkDrivingArrivalForCoordinate:(struct { double x0; double x1; })coordinate coordinateOnRoute:(struct { double x0; double x1; })route routePointIndex:(unsigned int)index distanceFromRoute:(double)route arrivalMapRegion:(id)region checkArrivalRadius:(BOOL)radius checkDistanceAlongRoute:(BOOL)route checkRoadAccessPoints:(BOOL)points isOnRoute:(BOOL)route;
- (double)courseAtRouteCoordinateIndex:(unsigned int)index;
- (struct { double x0; double x1; double x2; })locationAtDistance:(double)distance from:(id)from;
- (id)routeMatchAtDistance:(double)distance from:(id)from stopAtEndOfTunnel:(BOOL)tunnel stopAtEndOfManeuver:(BOOL)maneuver date:(id)date;
- (struct PolylineCoordinate { unsigned int x0; float x1; })_findRouteCoordinateWithOffset:(float)offset aPos:(const void *)pos aCoord:(const struct PolylineCoordinate { unsigned int x0; float x1; } *)coord bCoord:(const struct PolylineCoordinate { unsigned int x0; float x1; } *)coord pointOnSegment:(const void *)segment bounds:(const struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; } *)bounds;
- (void)roadFeaturesForRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate distanceAhead:(double)ahead handler:(id /* block */)handler;
- (id)geoTrafficBannerTexts;
- (BOOL)_meetsMinimumPathLengthBetweenStart:(unsigned int)start end:(unsigned int)end;
- (void)_addSnappedPolylinePathsForSection:(id)section toPaths:(id)paths rects:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; } *)rects rectsCount:(unsigned long long)count;
- (void)_snapPaths:(id)paths completionHandler:(id /* block */)handler;
- (void)_addPaths:(id)paths forObserver:(id)observer;
- (BOOL)supportsSnapping;
- (id)getSnappedPathsForVisibleRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect rectsToSnap:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; } *)snap rectsToSnapCount:(unsigned long long)count observer:(id)observer completionHandler:(id /* block */)handler;
- (id)getSnappedPathsForVisibleRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect rectsToSnap:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; } *)snap rectsToSnapCount:(unsigned long long)count observer:(id)observer;
- (id)getSnappedPathsForLocation:(struct { double x0; double x1; })location radius:(double)radius observer:(id)observer;
- (void)clearPoints;
- (void)clearSnappedPathsForObserver:(id)observer;
- (void)forEachSnappedPath:(id /* block */)path;
- (BOOL)isSnapping;
- (void)applyUpdatesToTransitRoute:(id)route;
- (void)updateTransitRouteUpdateRequest:(id)request;
- (id)getHallForStop:(id)stop;
- (id)getStationForHall:(id)hall;
- (id)getStationForStop:(id)stop;
- (BOOL)isStopInTerminalStructure:(id)structure;
- (void)_updateRevisionIdentifier;
- (id)_nextOptionForOption:(id)option rideIndex:(unsigned long long)index;
- (unsigned long long)_tripIndexForTripSegment:(id)segment;
- (id)sectionOptionForTripIndex:(unsigned long long)index;
- (id)sectionOptionForTripSegment:(id)segment;
- (id)boardStepForSection:(id)section;
- (void)tripSegment:(id)segment didSelectRide:(unsigned long long)ride;
- (void)_rebuildRouteForRideChange;
- (void)updateRouteWithRideSelections:(id)selections;
- (id)ticketingSegmentsForSelectedRides;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (unsigned int)laneCountAtRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (BOOL)isOfflineRoute;
@end

#endif /* GEOComposedRoute_h */
