//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEORouteMatcher_h
#define GEORouteMatcher_h
@import Foundation;

#include "GEOApplicationAuditToken.h"
#include "GEOComposedRoute.h"
#include "GEOPathMatcher.h"

@class NSArray;

@interface GEORouteMatcher : NSObject {
  /* instance variables */
  GEOPathMatcher *_pathMatcher;
}

@property (readonly, nonatomic) GEOComposedRoute *route;
@property (readonly, nonatomic) NSArray *snappedSegments;
@property (readonly, nonatomic) GEOApplicationAuditToken *auditToken;
@property (nonatomic) unsigned long long targetLegIndex;
@property (nonatomic) BOOL useStrictInitialOnRouteCriteria;
@property (nonatomic) double maxMatchDistanceFromPreviousRouteMatch;
@property (nonatomic) BOOL requiresRoadNetworkData;
@property (nonatomic) BOOL shouldSnapRouteMatchToRoute;
@property (nonatomic) BOOL useMatchedCoordinateForMatching;
@property (nonatomic) BOOL shouldWaitForSnappedSegments;

/* instance methods */
- (id)initWithRoute:(id)route auditToken:(id)token;
- (id)matchToRouteWithLocation:(id)location;
- (id)matchToRouteWithLocation:(id)location previousRouteMatch:(id)match;
- (id)matchToClosestPointOnRouteWithLocation:(id)location;
- (struct PolylineCoordinate { unsigned int x0; float x1; })closestRouteCoordinateForLocationCoordinate:(struct { double x0; double x1; })coordinate;
- (double)distanceToRouteFrom:(struct { double x0; double x1; })from;
- (double)distanceToRouteFrom:(struct { double x0; double x1; })from startDistance:(double)distance endDistance:(double)distance;
- (struct PolylineCoordinate { unsigned int x0; float x1; })_guaranteedRouteCoordinateForLocationCoordinate:(struct { double x0; double x1; })coordinate;
- (void)_forEachSegmentNearLocation:(id)location previousRouteMatch:(id)match handler:(id /* block */)handler;
- (id)_stepForRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate stepHint:(id)hint;
- (id)snappedSegmentForRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (double)roadWidthForRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate;
- (double)_roadWidthForSnappedSegment:(id)segment;
- (void)_startRouteMatch;
- (id)_startStepForPreviousRouteMatch:(id)match;
- (id)_candidateForSegment:(id)segment location:(id)location previousRouteMatch:(id)match;
- (void)_considerCandidateMatch:(id)match;
- (void)_finishRouteMatch:(id)match previousRouteMatch:(id)match forLocation:(id)location;
- (double)_scoreModifierForStep:(id)step previousStep:(id)step;
- (BOOL)_shouldConsiderCourseForLocation:(id)location;
- (BOOL)_supportsSnapping;
@end

#endif /* GEORouteMatcher_h */
