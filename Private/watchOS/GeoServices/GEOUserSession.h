//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOUserSession_h
#define GEOUserSession_h
@import Foundation;

#include "GEOAPSessionData.h"
#include "GEOUserSessionEntity.h"

@class NSData, NSDictionary, NSMutableDictionary;
@protocol OS_dispatch_queue;

@interface GEOUserSession : NSObject {
  /* instance variables */
  struct GEOSessionID { unsigned long long _high; unsigned long long _low; } _shortSessionID;
  double _shortSessionStartTime;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _shortNavSessionLock;
  BOOL _shortNavSessionNeedsInit;
  int _shortSessionChangedToken;
  NSData *_navigationDirectionsID;
  struct GEOSessionID { unsigned long long _high; unsigned long long _low; } _navigationSessionID;
  double _navigationSessionStartTime;
  NSData *_previousNavigationDirectionsID;
  struct GEOSessionID { unsigned long long _high; unsigned long long _low; } _previousNavigationSessionID;
  double _previousNavigationSessionStartTime;
  double _previousNavigationSessionEndTime;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _longSessionLock;
  NSMutableDictionary *_longSessionByAppID;
  BOOL _longSessionNeedsInit;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _fifteenMoDeviceSessionLock;
  GEOAPSessionData *_fifteenMoDeviceSessionData;
  struct GEOSessionID { unsigned long long _high; unsigned long long _low; } _zeroSessionID;
  NSObject<OS_dispatch_queue> *_serialQueue;
}

@property (readonly, nonatomic) NSDictionary *sharedSessionData;
@property (nonatomic) BOOL shareSessionWithMaps;
@property (copy, nonatomic) GEOUserSessionEntity *mapsUserSessionEntity;
@property (copy, nonatomic) GEOUserSessionEntity *mapsShortSession;
@property (readonly, nonatomic) struct GEOSessionID { unsigned long long x0; unsigned long long x1; } navSessionID;

/* class methods */
+ (struct GEOSessionID { unsigned long long x0; unsigned long long x1; })_newSessionId;
+ (id)mapsUnifiedBundleId;
+ (id)highBytesStringFromSession:(struct GEOSessionID { unsigned long long x0; unsigned long long x1; })session;
+ (id)lowBytesStringFromSession:(struct GEOSessionID { unsigned long long x0; unsigned long long x1; })session;
+ (BOOL)initialShareSessionWithMaps;
+ (void)setInitialShareSessionWithMaps:(BOOL)maps;
+ (id)sharedInstance;

/* instance methods */
- (double)_currentTime;
- (void)_currentTimeResult:(id /* block */)result;
- (double)_preferredSessionStartDateDerivedFromMapsUserStartDate:(double)date currentDate:(double)date;
- (BOOL)_hasMapsUserStartDate;
- (double)_getMapsUserStartDate;
- (void)_setMapsUserStartDate:(double)date;
- (BOOL)_hasGoodTimeSync;
- (unsigned long long)_get15moDeviceSessionConfiguredEpoch;
- (id)_get15moDeviceRawSessionData;
- (id)_get15moDeviceSessionData;
- (void)_set15moDeviceSessionData:(id)data;
- (unsigned long long)_get15moUserSessionConfiguredEpoch;
- (BOOL)_15moSyncEnabled;
- (void)_set15moUserSessionCreateDateInUse:(double)use;
- (double)_get15moUserSessionCreateDateInUse;
- (void)_set15moUserSessionPreviousExpirationDateInUse:(double)use;
- (double)_get15moUserSessionPreviousExpirationDateInUse;
- (void)connectionToMapsSyncDaemon:(id /* block */)daemon errorHandler:(id /* block */)handler;
- (void)_get15MoUserSessionDataOnQueue:(id)queue callback:(id /* block */)callback;
- (void)_set15MoUserSessionData:(id)data onQueue:(id)queue callback:(id /* block */)callback;
- (void)_remove15MoUserSessionData:(id)data onQueue:(id)queue callback:(id /* block */)callback;
- (void)_mapsSyncGet15MoSessionDataFromCache:(id)cache withCompletion:(id /* block */)completion;
- (void)_warmMapsSyncCacheWithResult:(id /* block */)result;
- (void)_mapsSyncSave15MoSessionData:(id)data completion:(id /* block */)completion;
- (void)_mapsSyncRemovePersisted15MoSessionData:(id)data completion:(id /* block */)completion;
- (id)_getMy15moUserSessionData;
- (void)_setMy15moUserSessionData:(id)data;
- (id)_getLocalSessionDatas;
- (void)_setLocalSessionDatas:(id)datas;
- (id)_getPersistedLongSessionData;
- (void)_setPersistedLongSessionData:(id)data;
- (id)_getPersistedNavSessionData;
- (void)_setPersistedNavSessionData:(id)data;
- (id)longSessionAppIdForActualAppId:(id)id;
- (void)_processMapsAppDeletion;
- (void)resetLongSessionValuesForAppId:(id)id queue:(id)queue completion:(id /* block */)completion;
- (BOOL)shouldSuppressSession;
- (void)_resetShortSessionID;
- (id)init;
- (void)_initializeLongSessionData;
- (void)_accessLongSessionValuesInBlock:(id /* block */)block;
- (void)longSessionValuesForAppId:(id)id completionQueue:(id)queue completion:(id /* block */)completion;
- (BOOL)fifteenMonthUserSessionInitialized;
- (void)fifteenMonthUserSessionValuesOnQueue:(id)queue valuesBlock:(id /* block */)block;
- (void)fifteenMonthCloudSyncSessionValuesOnQueue:(id)queue valuesBlock:(id /* block */)block;
- (void)fifteenMonthCloudSyncMapsUserStartDateOnQueue:(id)queue valuesBlock:(id /* block */)block;
- (void)fifteenMonthDeviceSessionValues:(id /* block */)values;
- (void)_initializeShortAndNavData;
- (void)shortAndNavSessionValues:(id /* block */)values;
- (id)_sharedSessionDataByAppId;
- (void)_saveSharedSessionDataByAppId:(id)id;
- (void)_mapsShortSessionValues:(id /* block */)values;
- (void)shortSessionValues:(id /* block */)values;
- (void)_shortSessionValues:(id /* block */)values;
- (id)_mapsUserSessionEntity;
- (void)_setShortSessionId:(struct GEOSessionID { unsigned long long x0; unsigned long long x1; })id sessionCreateTime:(double)time;
- (void)setSharedMapsUserSessionEntity:(id)entity shareSessionIDWithMaps:(BOOL)maps;
- (void)mapsSessionEntityWithCallback:(id /* block */)callback shareSessionIDWithMaps:(BOOL)maps resetSession:(BOOL)session;
- (void)_generateNewNavSessionIDAtTime:(double)time;
- (BOOL)_updateNavSessionIDAtTime:(double)time;
- (void)startNavigationWithRouteID:(id)id isEVRoute:(BOOL)evroute;
- (void)pauseNavigationWithRouteID:(id)id;
- (void)resumeNavigationWithRouteID:(id)id;
- (void)terminateNavigationWithRouteID:(id)id;
- (void)startNavigationSessionWithDirectionsID:(id)id originalDirectionsID:(id)id;
- (void)endNavigationSession;
@end

#endif /* GEOUserSession_h */
