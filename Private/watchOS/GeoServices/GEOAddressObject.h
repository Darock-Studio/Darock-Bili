//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOAddressObject_h
#define GEOAddressObject_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"
#include "_GEOAddressObject.h"

@class NSString;

@interface GEOAddressObject : NSObject<NSSecureCoding> {
  /* instance variables */
  _GEOAddressObject *_pimpl;
}

@property (readonly, nonatomic) NSString *displayLanguage;
@property (readonly, nonatomic) BOOL hasKnownAccuracy;
@property (readonly, nonatomic) int knownAccuracy;

/* class methods */
+ (id)addressObjectForPlaceData:(id)data;
+ (void)setLoggingDebug:(BOOL)debug;
+ (BOOL)isLoggingDebug;
+ (BOOL)supportsSecureCoding;
+ (id)libraryVersion;
+ (void)markMMStrings:(BOOL)mmstrings;
+ (BOOL)isMarkingMMStrings;
+ (id)addressObjectWithPlaceDataAddressObject:(id)object placeDataAddress:(id)address placeDataInfo:(id)info placeDataEntity:(id)entity;

/* instance methods */
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)initWithPlaceDataAddressObject:(id)object placeDataAddress:(id)address placeDataInfo:(id)info placeDataEntity:(id)entity language:(id)language country:(id)country phoneticLocale:(id)locale;
- (id)initWithContactAddressDictionary:(id)dictionary language:(id)language country:(id)country phoneticLocale:(id)locale;
- (id)initWithCNPostalAddress:(id)address language:(id)language country:(id)country phoneticLocale:(id)locale;
- (id)initWithCurrentCountry;
- (void)dealloc;
- (id)name;
- (id)address;
- (id)addressDictionary;
- (id)cnPostalAddress;
- (id)spokenName;
- (id)spokenAddress;
- (id)spokenAddressForLocale:(id)locale;
- (id)spokenStructuredAddress;
- (id)phoneticName;
- (id)phoneticAddress;
- (id)fullAddressWithMultiline:(BOOL)multiline;
- (id)fullAddressWithMultiline:(BOOL)multiline relative:(id)relative;
- (id)fullAddressNoCurrentCountryWithMultiline:(BOOL)multiline;
- (id)shortAddress;
- (id)cityDisplayNameWithFallback:(BOOL)fallback;
- (id)countryName;
- (id)weatherDisplayName;
- (id)weatherLocationName;
- (id)parkingDisplayName;
- (id)venueLabel:(long long)label;
- (id)venueLabel;
- (id)venueLevel;
- (id)venueShortAddress;
- (id)locationAddress;
- (id)titlesForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect;
- (id)neighborhoodName:(BOOL)name;
- (id)cityAndAboveWithFallback:(BOOL)fallback;
- (id)cityAndAboveWithFallback:(BOOL)fallback relative:(id)relative;
- (id)cityAndAboveNoCurrentCountryWithFallback:(BOOL)fallback;
- (id)phoneticLocaleIdentifier;
- (id)rawBytes;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
@end

#endif /* GEOAddressObject_h */
