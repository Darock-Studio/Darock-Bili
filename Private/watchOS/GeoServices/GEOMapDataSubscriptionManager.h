//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOMapDataSubscriptionManager_h
#define GEOMapDataSubscriptionManager_h
@import Foundation;

#include "GEOMapDataSubscriptionDownloadManager-Protocol.h"
#include "GEOMapDataSubscriptionDownloadManagerDelegate-Protocol.h"
#include "GEOMapDataSubscriptionPersistence-Protocol.h"
#include "GEOObserverHashTable.h"

@class NSString;

@interface GEOMapDataSubscriptionManager : NSObject<GEOMapDataSubscriptionDownloadManagerDelegate> {
  /* instance variables */
  NSObject<GEOMapDataSubscriptionPersistence> *_persistence;
  NSObject<GEOMapDataSubscriptionDownloadManager> *_downloadManager;
  GEOObserverHashTable *_stateObservers;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)_setSharedManagerUseLocalPersistence:(BOOL)persistence;
+ (id)sharedManager;

/* instance methods */
- (id)init;
- (id)initWithPersistence:(id)persistence downloadManager:(id)manager;
- (void)fetchAllSubscriptionsWithCallbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)fetchSubscriptionsWithIdentifiers:(id)identifiers callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)fetchAllExpiredSubscriptionsWithCallbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)fetchExpiredSubscriptionsWithIdentifiers:(id)identifiers callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)addSubscriptionWithIdentifier:(id)identifier dataTypes:(unsigned long long)types policy:(long long)policy region:(id)region expirationDate:(id)date callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)addSubscriptionWithIdentifier:(id)identifier dataTypes:(unsigned long long)types policy:(long long)policy region:(id)region displayName:(id)name expirationDate:(id)date callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_addSubscriptionWithIdentifier:(id)identifier auditToken:(id)token dataTypes:(unsigned long long)types policy:(long long)policy region:(id)region displayName:(id)name expirationDate:(id)date callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)removeSubscriptionWithIdentifier:(id)identifier callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)fetchStateForSubscriptionWithIdentifier:(id)identifier callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_registerExternallyManagedDownloader:(id)downloader;
- (void)_externallyManagedDownloaderDidFinish:(id)finish withError:(id)error;
- (void)startDownloadForSubscriptionIdentifier:(id)identifier mode:(unsigned long long)mode;
- (void)startDownloadForSubscriptionIdentifiers:(id)identifiers mode:(unsigned long long)mode;
- (void)cancelDownloadForSubscriptionIdentifier:(id)identifier;
- (void)cancelDownloadForSubscriptionIdentifiers:(id)identifiers;
- (void)forceUpdateForUserInitiatedSubscriptionsForDataType:(unsigned long long)type mode:(unsigned long long)mode;
- (id)determineEstimatedSizeForSubscriptionWithRegion:(id)region dataTypes:(unsigned long long)types queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_fetchSubscriptionsForSyncToWatchWithCallbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_setCompanionSubscriptionInfo:(id)info callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_fetchAllCompanionSubscriptionsWithCallbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_fetchCompanionSubscriptionsWithIdentifiers:(id)identifiers callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_fetchFullyDownloadedSubscriptionsOfType:(unsigned long long)type includeOutOfDate:(BOOL)date callbackQueue:(id)queue completionHandler:(id /* block */)handler;
- (id)_companionSubscriptionInfo;
- (void)_addStateObserver:(id)observer;
- (void)_removeStateObserver:(id)observer;
- (void)downloadManager:(id)manager didUpdateState:(id)state forIdentifier:(id)identifier;
@end

#endif /* GEOMapDataSubscriptionManager_h */
