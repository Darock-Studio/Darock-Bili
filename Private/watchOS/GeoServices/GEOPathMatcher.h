//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOPathMatcher_h
#define GEOPathMatcher_h
@import Foundation;

#include "GEOApplicationAuditToken.h"
#include "GEOComposedRoute.h"

@class NSArray, NSString, geo_isolater;
@protocol OS_dispatch_queue, {vector<GEOPolylineCoordinateRange, std::allocator<GEOPolylineCoordinateRange>>="__begin_"^{GEOPolylineCoordinateRange}"__end_"^{GEOPolylineCoordinateRange}"__end_cap_"{__compressed_pair<GEOPolylineCoordinateRange *, std::allocator<GEOPolylineCoordinateRange>>="__value_"^{GEOPolylineCoordinateRange}}};

@interface GEOPathMatcher : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  GEOComposedRoute *_route;
  NSArray *_matchedSegments;
  geo_isolater *_matchedSegmentsIsolater;
  struct vector<GEOPolylineCoordinateRange, std::allocator<GEOPolylineCoordinateRange>> { struct GEOPolylineCoordinateRange *__begin_; struct GEOPolylineCoordinateRange *__end_; struct __compressed_pair<GEOPolylineCoordinateRange *, std::allocator<GEOPolylineCoordinateRange>> { struct GEOPolylineCoordinateRange *__value_; } __end_cap_; } _failedRanges;
  NSString *_loggingIdentifier;
  BOOL _shouldSaveInternalInfo;
  NSArray *_internalInfos;
  geo_isolater *_internalInfosIsolater;
}

@property (readonly, nonatomic) GEOApplicationAuditToken *auditToken;
@property (nonatomic) double preloadDistance;
@property (nonatomic) BOOL shouldDropDivergingSegments;
@property (nonatomic) BOOL forceSync;

/* instance methods */
- (void)_clearZilchSnappedPathsForRoute:(id)route;
- (id)_zilchMatchedSegmentsForRoute:(id)route range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (void)_zilchMatchedSegmentsForRoute:(id)route range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range handler:(id /* block */)handler;
- (id)initWithRoute:(id)route auditToken:(id)token;
- (id)initWithRoute:(id)route auditToken:(id)token loggingIdentifier:(id)identifier;
- (id)initForTesting;
- (void)dealloc;
- (void)matchRouteFromStart:(struct PolylineCoordinate { unsigned int x0; float x1; })start toEnd:(struct PolylineCoordinate { unsigned int x0; float x1; })end finishedHandler:(id /* block */)handler;
- (void)matchRouteFromStart:(struct PolylineCoordinate { unsigned int x0; float x1; })start toEnd:(struct PolylineCoordinate { unsigned int x0; float x1; })end finishedHandler:(id /* block */)handler callbackQueue:(id)queue;
- (id)matchedSegmentsFromStart:(struct PolylineCoordinate { unsigned int x0; float x1; })start toEnd:(struct PolylineCoordinate { unsigned int x0; float x1; })end;
- (struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })_validateInputRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range finishedHandler:(id /* block */)handler callbackQueue:(id)queue;
- (id)_supportPointForRouteCoordinate:(struct PolylineCoordinate { unsigned int x0; float x1; })coordinate isRangeStart:(BOOL)start;
- (id)_supportPointsForRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (void)_updateSupportPointsForNoMatchRanges:(id)ranges decodeRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (void)_matchRouteOnQueueForRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range finishedHandler:(id /* block */)handler callbackQueue:(id)queue;
- (void)_callbackWithMatchedSegments:(id)segments range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range handler:(id /* block */)handler callbackQueue:(id)queue;
- (id)_updateCacheWithNewSegments:(id)segments range:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (id)_matchedSegmentsInRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range ofMatchedSegments:(id)segments;
- (BOOL)_isFailedRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (BOOL)_isRangeValid:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })valid;
- (struct RoadNetworkPath<GEOPathMatcherRoadKey> { double x0; double x1; struct vector<GEOPathMatcherRoadKey, std::allocator<GEOPathMatcherRoadKey>> { struct GEOPathMatcherRoadKey * x0; struct GEOPathMatcherRoadKey * x1; struct __compressed_pair<GEOPathMatcherRoadKey *, std::allocator<GEOPathMatcherRoadKey>> { struct GEOPathMatcherRoadKey * x0; } x2; } x2; })_decodePathForRoute:(id)route supportPoints:(id)points roadNetwork:(const void *)network internalInfo:(id)info;
- (id)_roadLookupForRoadNetwork:(const void *)network;
- (id)_matchedPathSegmentsForPath:(const void *)path routeCoordinates:(id)coordinates start:(struct PolylineCoordinate { unsigned int x0; float x1; })start end:(struct PolylineCoordinate { unsigned int x0; float x1; })end roadLookup:(id)lookup;
- (id)_cachedSegments;
- (struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })_uncachedCoordinateRangeForStart:(struct PolylineCoordinate { unsigned int x0; float x1; })start end:(struct PolylineCoordinate { unsigned int x0; float x1; })end;
- (void)_addCoordinatesFromRoad:(id)road routeCoordinates:(id)coordinates offsetFromStartOfPath:(double)path errorScale:(double)scale offsetFromPathToCurrentPoint:(double *)point outCoordinates:(void *)coordinates;
- (BOOL)_verifySegmentDistanceFromRoute:(id)route segmentIndex:(long long)index requestedPathRange:(struct GEOPolylineCoordinateRange { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; })range;
- (BOOL)shouldSaveInternalInfo;
- (void)setShouldSaveInternalInfo:(BOOL)info;
- (id)internalInfos;
- (void)setInternalInfos:(id)infos;
@end

#endif /* GEOPathMatcher_h */
