//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOOfflineStateManager_h
#define GEOOfflineStateManager_h
@import Foundation;

#include "GEOConfigChangeListenerDelegate-Protocol.h"
#include "GEODataURLSessionTask.h"
#include "GEODataURLSessionTaskDelegate-Protocol.h"
#include "GEOKeyBagProtectedDataDidBecomeAvailableObserver-Protocol.h"
#include "GEOPListStateCapturing-Protocol.h"
#include "RadiosPreferencesDelegate-Protocol.h"

@class NSDictionary, NSMutableDictionary, NSString, RadiosPreferences, geo_isolater;
@protocol OS_dispatch_queue, OS_dispatch_source, {vector<(anonymous namespace)::Result, std::allocator<(anonymous namespace)::Result>>="__begin_"^{Result}"__end_"^{Result}"__end_cap_"{__compressed_pair<(anonymous namespace)::Result *, std::allocator<(anonymous namespace)::Result>>="__value_"^{Result}}};

@interface GEOOfflineStateManager : NSObject<GEOConfigChangeListenerDelegate, GEOPListStateCapturing, GEOKeyBagProtectedDataDidBecomeAvailableObserver, RadiosPreferencesDelegate, GEODataURLSessionTaskDelegate> {
  /* instance variables */
  geo_isolater *_isolator;
  NSDictionary *_acceptableDurations;
  unsigned long long _stateCaptureHandle;
  struct vector<(anonymous namespace)::Result, std::allocator<(anonymous namespace)::Result>> { struct Result *__begin_; struct Result *__end_; struct __compressed_pair<(anonymous namespace)::Result *, std::allocator<(anonymous namespace)::Result>> { struct Result *__value_; } __end_cap_; } _trackedRequests;
  unsigned int _currentIndex;
  RadiosPreferences *_radiosPrefs;
  NSObject<OS_dispatch_queue> *_radioPrefsQueue;
  struct Result { double timestamp; struct { int type; union { int raw; int tile; int placeRequest; } subtype; } request; unsigned long long status; unsigned long long usedInterfaces; int requestMode; } _lastNetworkState;
  double _updateInterval;
  BOOL _needsStateUpdate;
  double _lastStateUpdate;
  NSObject<OS_dispatch_source> *_updateStateTimer;
  double _lastUpdateWriteTime;
  NSMutableDictionary *_statesByCohortId;
  int _subscriptionsChangedNotifyToken;
  NSObject<OS_dispatch_queue> *_connectivityCheckQueue;
  GEODataURLSessionTask *_connectivityCheckTask;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)shared;
+ (BOOL)isCohortAllowed:(id)allowed;
+ (BOOL)isOfflineAvailable;
+ (unsigned long long)activeStateForCohortId:(id)id;

/* instance methods */
- (void)dealloc;
- (void)protectedDataDidBecomeAvailable:(id)available;
- (void)valueChangedForGEOConfigKey:(struct { unsigned int x0; void * x1; })key;
- (void)reportResponse:(struct { int x0; union { int x0; int x1; int x2; } x1; })response usedInterfaces:(unsigned long long)interfaces requestMode:(int)mode forCohortId:(id)id duration:(double)duration error:(id)error;
- (void)reportTileResponse:(const struct _GEOTileKey { unsigned int x0 :7; unsigned int x1 :1; union { struct _GEOStandardTileKey { unsigned int x0 :40; unsigned int x1 :6; unsigned int x2 :26; unsigned int x3 :26; unsigned int x4 :14; unsigned int x5 :4; unsigned int x6 :4; } x0; struct _GEOGloriaQuadIDTileKey { unsigned int x0 :6; unsigned int x1 :64; unsigned int x2 :14; unsigned int x3 :4; union { struct { unsigned int x0 :10; unsigned int x1 :10; unsigned int x2 :12; } x0; unsigned int x1; } x4; } x1; struct _GEORegionalResourceKey { unsigned int x0 :32; unsigned int x1 :8; unsigned int x2 :6; unsigned int x3 :8; unsigned int x4 :8; unsigned int x5 :1; unsigned int x6 :57; } x2; struct _GEOSputnikMetadataKey { unsigned int x0 :32; unsigned int x1 :24; unsigned int x2 :14; unsigned int x3 :8; unsigned int x4 :42; } x3; struct _GEOFlyoverKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :8; unsigned int x4 :24; unsigned int x5 :14; unsigned int x6 :8; unsigned int x7 :8; } x4; struct _GEOTransitLineSelectionKey { unsigned int x0 :6; unsigned int x1 :25; unsigned int x2 :25; unsigned int x3 :64; } x5; struct _GEOPolygonSelectionKey { unsigned int x0 :6; unsigned int x1 :25; unsigned int x2 :25; unsigned int x3 :64; } x6; struct _GEORoadSelectionKey { unsigned int x0 :6; unsigned int x1 :25; unsigned int x2 :25; unsigned int x3 :64; } x7; struct _GEOContourLinesKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :4; unsigned int x4 :8; unsigned int x5 :50; } x8; struct _GEOTileOverlayKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :8; unsigned int x4 :32; unsigned int x5 :16; unsigned int x6 :6; } x9; struct _GEOIdentifiedResourceKey { unsigned long long x0; unsigned char x1; unsigned char x2; unsigned int x3 :1; unsigned int x4 :39; } x10; struct _GEOS2TileKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :3; unsigned int x4 :14; unsigned int x5 :4; unsigned int x6 :4; unsigned int x7 :37; } x11; struct _GEOLiveTileKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :14; unsigned int x4 :4; unsigned int x5 :4; unsigned int x6 :4; unsigned int x7 :36; } x12; } x2; } *)response usedInterfaces:(unsigned long long)interfaces forCohortId:(id)id duration:(double)duration error:(id)error;
- (void)airplaneModeChanged;
- (void)_networkStateChanged;
- (void)waitForTransitionToActiveState:(id /* block */)state forCohortId:(id)id timeout:(double)timeout callbackQueue:(id)queue callback:(id /* block */)callback;
- (void)checkConnectivityForPeer:(id)peer;
- (void)dataURLSession:(id)urlsession didCompleteTask:(id)task;
- (unsigned long long)subscriptionCount;
- (void)_receivedHeartbeat:(id)heartbeat;
- (id)captureStatePlistWithHints:(struct os_state_hints_s { unsigned int x0; char * x1; unsigned int x2; unsigned int x3; } *)hints;
- (void)_offlineAvailabilityUpdated;
- (unsigned long long)currentSuggestedStateForCohortId:(id)id;
- (BOOL)cohortId:(id)id shouldAttemptFailoverForRequest:(struct { int x0; union { int x0; int x1; int x2; } x1; })request;
- (void)setState:(unsigned long long)state savedState:(unsigned long long)state forCohortId:(id)id;
- (unsigned long long)currentStateForCohortId:(id)id;
- (unsigned long long)activeStateForCohortId:(id)id;
- (void)setSavedState:(unsigned long long)state forCohortId:(id)id;
- (unsigned long long)savedStateForCohortId:(id)id;
@end

#endif /* GEOOfflineStateManager_h */
