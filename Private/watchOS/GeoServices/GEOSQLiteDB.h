//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOSQLiteDB_h
#define GEOSQLiteDB_h
@import Foundation;

@class NSDictionary, NSError, NSMapTable, NSMutableArray, NSString, NSURL;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_os_log;

@interface GEOSQLiteDB : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_externalFilesQueue;
  NSObject<OS_dispatch_group> *_externalFilesGroup;
  NSMutableArray *_externalFilesActiveChannels;
  BOOL _didEncounterExternalResourceErrorInTransaction;
  struct sqlite3 * _db;
  id /* block */ _setupBlock;
  id /* block */ _tearDownBlock;
  NSObject<OS_dispatch_queue> *_queue;
  NSMapTable *_preparedStatements;
  BOOL _isInTransaction;
  BOOL _isTemporaryInMemoryDatabase;
  NSMutableArray *_filesAddedDuringTransaction;
  NSMutableArray *_filesDeletedDuringTransaction;
  NSMutableArray *_currentTransactionPostCommitActions;
  NSMapTable *_virtualTables;
  struct atomic_flag { atomic  _Value; BOOL x0; } _didTearDown;
}

@property (readonly, nonatomic) struct sqlite3 * sqliteDB;
@property (readonly, nonatomic) int sqliteFlags;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *isolationQueue;
@property (readonly, nonatomic) NSString *dbFilePath;
@property (readonly, nonatomic) NSURL *databaseFileURL;
@property (readonly, nonatomic) NSError *lastError;
@property (readonly, nonatomic) BOOL isDBReady;
@property (readonly, nonatomic) NSObject<OS_os_log> *log;
@property (readonly, nonatomic) NSDictionary *pragmas;
@property (nonatomic) long long user_version;

/* class methods */
+ (id)defaultPragmas;
+ (id)defaultReadOnlyPragmas;
+ (id)_findAllDBFilesForURL:(id)url error:(id *)error;
+ (BOOL)deleteAllDBFilesFor:(id)for;
+ (BOOL)deleteAllDBFilesForURL:(id)url;
+ (BOOL)renameAllDBFilesFrom:(id)from to:(id)to;
+ (BOOL)migrateAllDBFilesFrom:(id)from to:(id)to;

/* instance methods */
- (void)_writeTransactionExternalResourceWithData:(id)data toURL:(id)url;
- (void)_doneWritingToChannel:(id)channel;
- (void)_channelCleanupFailedWithError:(int)error;
- (void)_channelEncounteredError:(int)error;
- (BOOL)_waitForAllTransactionExternalResources;
- (BOOL)bindUUIDParameter:(const char *)uuidparameter toValue:(id)value inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (id)UUIDForColumn:(int)column inStatment:(struct sqlite3_stmt *)statment;
- (id)init;
- (id)initWithQueueName:(const char *)name logFacility:(const char *)facility dbFilePath:(id)path sqliteFlags:(int)flags pragmas:(id)pragmas setupBlock:(id /* block */)block;
- (id)initWithQueueName:(const char *)name logFacility:(const char *)facility dbFilePath:(id)path sqliteFlags:(int)flags pragmas:(id)pragmas setupBlock:(id /* block */)block tearDownBlock:(id /* block */)block;
- (id)initWithQueueName:(const char *)name log:(id)log databaseFileURL:(id)url sqliteFlags:(int)flags pragmas:(id)pragmas setupBlock:(id /* block */)block;
- (id)initWithQueueName:(const char *)name log:(id)log databaseFileURL:(id)url sqliteFlags:(int)flags pragmas:(id)pragmas setupBlock:(id /* block */)block tearDownBlock:(id /* block */)block;
- (id)description;
- (void)executeSync:(id /* block */)sync errorHandler:(id /* block */)handler;
- (void)executeSync:(id /* block */)sync;
- (void)executeAsync:(id /* block */)async errorHandler:(id /* block */)handler;
- (void)executeAsync:(id /* block */)async;
- (void)executeFromIsolationQueue:(id /* block */)queue;
- (void)executeFromIsolationQueue:(id /* block */)queue errorHandler:(id /* block */)handler;
- (void)_execute:(id /* block */)_execute errorHandler:(id /* block */)handler;
- (BOOL)setup;
- (BOOL)_openAndConfigureWithRetryIfCorrupt;
- (int)_openAndConfigure;
- (int)_openDatabaseFile;
- (void)_createParentDirectory;
- (void)_deleteAndReopenDatabaseIfCorrupt:(int)corrupt;
- (BOOL)_deleteAllDatabaseFilesIfCorrupt:(int)corrupt;
- (BOOL)_deleteAllDBFiles;
- (int)_setPragmas;
- (BOOL)deleteAllDBFiles;
- (void)tearDown;
- (void)_closeDB;
- (void)dealloc;
- (void)_debug_unlockDB:(id)db;
- (void)_debug_lockDB:(id)db;
- (BOOL)registerVirtualTable:(id)table;
- (BOOL)unregisterVirtualTable:(id)table;
- (BOOL)createTable:(const char *)table withDrop:(const char *)drop;
- (BOOL)createIndex:(const char *)index;
- (id)getAllTables;
- (id)getTablesLike:(id)like;
- (BOOL)dropAllTables;
- (BOOL)dropTablesLike:(id)like;
- (BOOL)prepareStatement:(const char *)statement forKey:(id)key;
- (void)clearStatement:(id)statement;
- (struct sqlite3_stmt *)statementForKey:(id)key;
- (BOOL)statementForKey:(id)key statementBlock:(id /* block */)block;
- (BOOL)_bindParameter:(const char *)parameter inStatement:(struct sqlite3_stmt *)statement error:(id *)error withBinder:(id /* block */)binder;
- (BOOL)bindTextParameter:(const char *)parameter toValue:(id)value inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)bindBlobParameter:(const char *)parameter toValue:(id)value inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)bindBlobNoCopyParameter:(const char *)parameter toValue:(id)value inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)bindZeroBlobParameter:(const char *)parameter length:(unsigned long long)length inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)bindNullParameter:(const char *)parameter inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)bindIntParameter:(const char *)parameter toValue:(int)value inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)bindInt64Parameter:(const char *)parameter toValue:(long long)value inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)bindRealParameter:(const char *)parameter toValue:(double)value inStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)executeStatement:(struct sqlite3_stmt *)statement error:(id *)error;
- (BOOL)executeStatement:(id)statement statementBlock:(id /* block */)block;
- (BOOL)vacuum;
- (BOOL)executeInTransaction:(id /* block */)transaction;
- (BOOL)ensureInTransaction:(id /* block */)transaction;
- (void)addTransactionPostCommitAction:(id /* block */)action;
- (int)intForColumn:(int)column inStatment:(struct sqlite3_stmt *)statment;
- (long long)int64ForColumn:(int)column inStatment:(struct sqlite3_stmt *)statment;
- (double)doubleForColumn:(int)column inStatment:(struct sqlite3_stmt *)statment;
- (id)stringForColumn:(int)column inStatment:(struct sqlite3_stmt *)statment;
- (id)_blobForColumn:(int)column inStatment:(struct sqlite3_stmt *)statment noCopy:(BOOL)copy;
- (id)blobForColumn:(int)column inStatment:(struct sqlite3_stmt *)statment;
- (id)noCopyBlobForColumn:(int)column inStatment:(struct sqlite3_stmt *)statment;
- (BOOL)reportSQLiteErrorCode:(int)code method:(id)method error:(id *)error;
- (BOOL)writeExternalResourceWithData:(id)data toURL:(id)url error:(id *)error;
- (BOOL)moveExternalResourceAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)deleteExternalResourceAtURL:(id)url error:(id *)error;
- (long long)lastInsertRowID;
- (BOOL)writeBlobData:(id)data toTable:(const char *)table column:(const char *)column rowID:(long long)id error:(id *)error;
@end

#endif /* GEOSQLiteDB_h */
