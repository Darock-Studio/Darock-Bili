//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1940.42.9.28.8
//
#ifndef GEOMapEdgeBuilder_h
#define GEOMapEdgeBuilder_h
@import Foundation;

#include "GEOMapRequest.h"
#include "GEOMapAccess.h"
#include "GEOMapTileFinder.h"

@protocol {Matrix<float, 2, 1>="_e"[2f]}, {unordered_set<_GEOTileKey, std::hash<GEOTileKey>, std::equal_to<GEOTileKey>, std::allocator<_GEOTileKey>>="__table_"{__hash_table<_GEOTileKey, std::hash<GEOTileKey>, std::equal_to<GEOTileKey>, std::allocator<_GEOTileKey>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *>, std::allocator<std::__hash_node<_GEOTileKey, void *>>>="__value_"{__hash_node_base<std::__hash_node<_GEOTileKey, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<GEOTileKey>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<GEOTileKey>>="__value_"f}}};

@interface GEOMapEdgeBuilder : GEOMapRequest {
  /* instance variables */
  BOOL _buildAhead;
  BOOL _buildBehind;
  struct Matrix<float, 2, 1> { float x[2] _e; } _firstTilePoint;
  struct Matrix<float, 2, 1> { float x[2] _e; } _lastTilePoint;
  GEOMapTileFinder *_currentTileFinder;
  struct unordered_set<_GEOTileKey, std::hash<GEOTileKey>, std::equal_to<GEOTileKey>, std::allocator<_GEOTileKey>> { struct __hash_table<_GEOTileKey, std::hash<GEOTileKey>, std::equal_to<GEOTileKey>, std::allocator<_GEOTileKey>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<_GEOTileKey, void *> *>, std::allocator<std::__hash_node<_GEOTileKey, void *>>> { struct __hash_node_base<std::__hash_node<_GEOTileKey, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<GEOTileKey>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<GEOTileKey>> { float __value_; } __p3_; } __table_; } _tileKeysSeen;
  BOOL _searchDirection;
}

@property (copy, nonatomic) id /* block */ edgeHandler;
@property (readonly, nonatomic) GEOMapAccess *map;
@property (nonatomic) unsigned long long buildDirection;

/* instance methods */
- (id)initWithMap:(id)map;
- (void)cancel;
- (BOOL)_findEdgeAhead;
- (BOOL)_findEdgeBehind;
- (BOOL)_findNextEdge;
- (void)buildEdge:(id /* block */)edge;
- (void)_findTilesAdjacentToTile:(const struct _GEOTileKey { unsigned int x0 :7; unsigned int x1 :1; union { struct _GEOStandardTileKey { unsigned int x0 :40; unsigned int x1 :6; unsigned int x2 :26; unsigned int x3 :26; unsigned int x4 :14; unsigned int x5 :4; unsigned int x6 :4; } x0; struct _GEOGloriaQuadIDTileKey { unsigned int x0 :6; unsigned int x1 :64; unsigned int x2 :14; unsigned int x3 :4; union { struct { unsigned int x0 :10; unsigned int x1 :10; unsigned int x2 :12; } x0; unsigned int x1; } x4; } x1; struct _GEORegionalResourceKey { unsigned int x0 :32; unsigned int x1 :8; unsigned int x2 :6; unsigned int x3 :8; unsigned int x4 :8; unsigned int x5 :1; unsigned int x6 :57; } x2; struct _GEOSputnikMetadataKey { unsigned int x0 :32; unsigned int x1 :24; unsigned int x2 :14; unsigned int x3 :8; unsigned int x4 :42; } x3; struct _GEOFlyoverKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :8; unsigned int x4 :24; unsigned int x5 :14; unsigned int x6 :8; unsigned int x7 :8; } x4; struct _GEOTransitLineSelectionKey { unsigned int x0 :6; unsigned int x1 :25; unsigned int x2 :25; unsigned int x3 :64; } x5; struct _GEOPolygonSelectionKey { unsigned int x0 :6; unsigned int x1 :25; unsigned int x2 :25; unsigned int x3 :64; } x6; struct _GEORoadSelectionKey { unsigned int x0 :6; unsigned int x1 :25; unsigned int x2 :25; unsigned int x3 :64; } x7; struct _GEOContourLinesKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :4; unsigned int x4 :8; unsigned int x5 :50; } x8; struct _GEOTileOverlayKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :8; unsigned int x4 :32; unsigned int x5 :16; unsigned int x6 :6; } x9; struct _GEOIdentifiedResourceKey { unsigned long long x0; unsigned char x1; unsigned char x2; unsigned int x3 :1; unsigned int x4 :39; } x10; struct _GEOS2TileKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :3; unsigned int x4 :14; unsigned int x5 :4; unsigned int x6 :4; unsigned int x7 :37; } x11; struct _GEOLiveTileKey { unsigned int x0 :6; unsigned int x1 :26; unsigned int x2 :26; unsigned int x3 :14; unsigned int x4 :4; unsigned int x5 :4; unsigned int x6 :4; unsigned int x7 :36; } x12; } x2; } *)tile containingPoint:(const void *)point findAhead:(BOOL)ahead;
- (BOOL)_pointConnects:(const void *)connects rect:(const struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; } *)rect to:(const struct { double x0; double x1; } *)to;
- (BOOL)_edgeStart:(const void *)start end:(const void *)end connectsTo:(const void *)to;
- (unsigned long long)_maxTileCount;
- (void)_buildCompleteEdge;
- (BOOL)_findEdgeAheadInTile:(id)tile;
- (BOOL)_findEdgeBehindInTile:(id)tile;
- (BOOL)_shouldFindEdgeAhead;
- (BOOL)_shouldFindEdgeBehind;
- (struct Matrix<float, 2, 1> { float x0[2] })_firstPoint;
- (struct Matrix<float, 2, 1> { float x0[2] })_lastPoint;
- (id)_firstTile;
- (id)_lastTile;
- (id)_tileFinderForMap:(id)map center:(struct { double x0; double x1; })center radius:(double)radius;
@end

#endif /* GEOMapEdgeBuilder_h */
