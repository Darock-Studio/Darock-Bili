//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2206.0.5.0.0
//
#ifndef WFWorkflowController_h
#define WFWorkflowController_h
@import Foundation;

#include "WFAction.h"
#include "WFActionParameterInputProvider-Protocol.h"
#include "WFActionRunningDelegate-Protocol.h"
#include "WFContentItemCache.h"
#include "WFControlFlowAttributionTracker.h"
#include "WFDialogTransformerDelegate-Protocol.h"
#include "WFSmartPromptsExfiltrationLogger.h"
#include "WFVariableDataSource-Protocol.h"
#include "WFWorkflow.h"
#include "WFWorkflowController.h"
#include "WFWorkflowControllerDelegate-Protocol.h"
#include "WFWorkflowControllerState.h"
#include "WFWorkflowNoInputBehaviorDelegate-Protocol.h"

@class NSDate, NSDictionary, NSMapTable, NSMutableDictionary, NSProgress, NSString, RBSAssertion, WFContentCollection, WFOutOfProcessWorkflowController, WFWorkflowRunViewSource, WFWorkflowRunningContext;
@protocol OS_dispatch_queue, OS_voucher;

@interface WFWorkflowController : NSObject<WFActionRunningDelegate, WFWorkflowNoInputBehaviorDelegate, WFVariableDataSource, WFActionParameterInputProvider, WFDialogTransformerDelegate> {
  /* instance variables */
  WFWorkflowController *_strongSelf;
}

@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *executionQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property (retain, nonatomic) NSDate *startDate;
@property (nonatomic) unsigned long long currentIndex;
@property (nonatomic) BOOL running;
@property (nonatomic) BOOL stepping;
@property (nonatomic) BOOL resumed;
@property (retain, nonatomic) NSProgress *progress;
@property (retain, nonatomic) NSProgress *currentActionProgress;
@property (retain, nonatomic) WFContentCollection *output;
@property (retain, nonatomic) WFAction *lastExecutedAction;
@property (retain, nonatomic) NSMutableDictionary *actionOutputsByWorkflowIndex;
@property (retain, nonatomic) NSMapTable *variableTable;
@property (retain, nonatomic) NSMapTable *environmentValueTable;
@property (retain, nonatomic) WFWorkflowControllerState *pendingState;
@property (retain, nonatomic) NSDictionary *pendingProcessedParameters;
@property (retain, nonatomic) WFContentCollection *pendingActionInput;
@property (retain, nonatomic) RBSAssertion *workflowRunAssertion;
@property (retain, nonatomic) NSObject<OS_voucher> *executionVoucher;
@property (retain, nonatomic) WFOutOfProcessWorkflowController *outOfProcessController;
@property (retain, nonatomic) WFControlFlowAttributionTracker *flowTracker;
@property (retain, nonatomic) WFContentItemCache *contentItemCache;
@property (retain, nonatomic) WFContentCollection *capturedFiles;
@property (retain, nonatomic) WFSmartPromptsExfiltrationLogger *exfiltrationLogger;
@property (readonly, nonatomic) WFAction *currentAction;
@property (nonatomic) BOOL actionDidRunRemotely;
@property (retain, nonatomic) WFWorkflow *workflow;
@property (retain, nonatomic) WFContentCollection *input;
@property (nonatomic) BOOL donateInteraction;
@property (weak, nonatomic) NSObject<WFWorkflowControllerDelegate> *delegate;
@property (retain, nonatomic) WFWorkflowControllerState *currentState;
@property (retain, nonatomic) WFWorkflowRunningContext *runningContext;
@property (copy, nonatomic) NSString *runSource;
@property (copy, nonatomic) WFWorkflowRunViewSource *runViewSource;
@property (nonatomic) BOOL shouldDisablePrivacyPrompts;
@property (copy, nonatomic) NSString *automationType;
@property (nonatomic) BOOL isAutomationSuggestion;
@property (copy, nonatomic) NSString *automationTrialID;
@property (copy, nonatomic) NSDictionary *listenerEndpoints;
@property (nonatomic) unsigned long long outputBehavior;
@property (nonatomic) BOOL acquiresAssertionWhileRunning;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)queue_setWorkflow:(id)workflow;
- (BOOL)isRunning;
- (id)stateWithActionIndex:(unsigned long long)index input:(id)input processedParameters:(id)parameters;
- (id)currentStateWithContext:(id)context;
- (void)publishRunningState:(long long)state;
- (void)publishActionProgress;
- (id)actionOutputs;
- (void)_step;
- (void)_finishStepWithError:(id)error;
- (void)run;
- (void)_run;
- (void)stop;
- (void)stopWithError:(id)error;
- (void)queue_stopWithError:(id)error;
- (void)setFinishedRunningWithSuccess:(BOOL)success;
- (void)reset;
- (void)queue_reset;
- (BOOL)setContent:(id)content forVariableWithName:(id)name;
- (id)contentForVariableWithName:(id)name;
- (id)workflowInput;
- (id)workflowStartDate;
- (void)setContent:(id)content forPrivateVariableKey:(id)key;
- (id)contentForPrivateVariableKey:(id)key;
- (void)captureFileRepresentation:(id)representation;
- (void)requestAccessToFileAtLocations:(id)locations completionHandler:(id /* block */)handler;
- (void)requestAccessToFileAtURLs:(id)urls completionHandler:(id /* block */)handler;
- (id)environmentValueForKey:(id)key;
- (void)setEnvironmentValue:(id)value forKey:(id)key;
- (id)currentRunningContextForAction:(id)action;
- (id)remoteDialogPresenterEndpointForRunWorkflowAction:(id)action;
- (void)action:(id)action didDecideRunningProgressIsAllowed:(BOOL)allowed;
- (id)actionReversalStateForAction:(id)action;
- (void)action:(id)action didGenerateReversalState:(id)state;
- (BOOL)isTesting;
- (void)action:(id)action handleTestingEvent:(id)event completionHandler:(id /* block */)handler;
- (void)retainSelf;
- (void)autoreleaseSelf;
- (void)acquireAssertionIfNeeded;
- (void)invalidateAssertionIfNeeded;
- (void)action:(id)action provideInputForParameters:(id)parameters withDefaultStates:(id)states prompts:(id)prompts completionHandler:(id /* block */)handler;
- (BOOL)action:(id)action canProvideInputForParameter:(id)parameter;
- (void)logStartEvent;
- (void)logFinishRunEvent:(BOOL)event;
- (void)trackRunShortcutEventWithKey:(id)key completed:(BOOL)completed;
- (void)logStartActionEventWithAction:(id)action;
- (void)logFinishActionEventWithAction:(id)action completed:(BOOL)completed error:(id)error;
- (void)trackRunActionEventWithKey:(id)key action:(id)action completed:(BOOL)completed error:(id)error;
- (void)workflowControllerWillRun:(id)run;
- (void)didFinishRunningWithError:(id)error cancelled:(BOOL)cancelled;
- (void)prepareToRunAction:(id)action withInput:(id)input completionHandler:(id /* block */)handler;
- (void)runAction:(id)action withInput:(id)input completionHandler:(id /* block */)handler;
- (void)didRunAction:(id)action withCompletion:(id /* block */)completion;
- (id)parameterInputProviderForAction:(id)action;
- (id)userInterface;
- (void)handleError:(id)error fromAction:(id)action completionHandler:(id /* block */)handler;
- (void)handleControlFlowActionCompletion:(id)completion actionGroupSkipped:(BOOL)skipped;
- (BOOL)canRun;
- (void)restorePendingStateIfNecessary;
- (void)setUpRunState;
- (void)setUpProgress;
- (void)resetEvaluationCriteriaForControlFlowActions;
- (id)errorByAddingActionIndex:(long long)index toError:(id)error;
- (void)resolveWorkflowInputWithCompletion:(id /* block */)completion;
- (void)noInputBehavior:(id)behavior wantsToRunAction:(id)action completionHandler:(id /* block */)handler;
- (void)dialogTransformer:(id)transformer stopRunningWithError:(id)error;
- (void)dialogTransformerWillDisplayDialog:(id)dialog;
- (void)dialogTransformerDidDisplayDialog:(id)dialog;
- (BOOL)isStepping;
@end

#endif /* WFWorkflowController_h */
