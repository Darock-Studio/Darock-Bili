//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1431.300.81.0.0
//
#ifndef TUConversationManagerXPCClient_h
#define TUConversationManagerXPCClient_h
@import Foundation;

#include "TUConversationManagerDataSource-Protocol.h"
#include "TUConversationManagerDataSourceDelegate-Protocol.h"
#include "TUConversationManagerXPCClient-Protocol.h"
#include "TUConversationMediaControllerDataSourceDelegate-Protocol.h"
#include "TUConversationReactionsControllerDataSourceDelegate-Protocol.h"

@class NSDictionary, NSNumber, NSSet, NSString, NSXPCConnection;
@protocol OS_dispatch_queue;

@interface TUConversationManagerXPCClient : NSObject<TUConversationManagerXPCClient, TUConversationManagerDataSource>

@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int x0; } accessorLock;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSXPCConnection *xpcConnection;
@property (nonatomic) BOOL hasRequestedInitialState;
@property (nonatomic) BOOL hasInitialState;
@property (nonatomic) int shouldConnectToken;
@property (nonatomic) BOOL shouldConnectToHost;
@property (copy, nonatomic) NSDictionary *conversationsByGroupUUID;
@property (copy, nonatomic) NSDictionary *activityAuthorizedBundleIdentifiers;
@property (copy, nonatomic) NSNumber *sharePlayAvailable;
@property (copy, nonatomic) NSNumber *screenSharingAvailable;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSDictionary *incomingPendingConversationsByGroupUUID;
@property (readonly, copy, nonatomic) NSDictionary *pseudonymsByCallUUID;
@property (readonly, copy, nonatomic) NSSet *activatedConversationLinks;
@property (nonatomic) BOOL autoSharePlayEnabled;
@property (readonly, nonatomic) BOOL isSharePlayAvailable;
@property (readonly, nonatomic) BOOL isScreenSharingAvailable;
@property (weak, nonatomic) NSObject<TUConversationManagerDataSourceDelegate> *delegate;
@property (weak, nonatomic) NSObject<TUConversationMediaControllerDataSourceDelegate> *mediaDelegate;
@property (weak, nonatomic) NSObject<TUConversationReactionsControllerDataSourceDelegate> *reactionsDelegate;

/* class methods */
+ (id)asynchronousServer;
+ (void)setAsynchronousServer:(id)server;
+ (id)synchronousServer;
+ (void)setSynchronousServer:(id)server;
+ (id)conversationManagerAllowedClasses;
+ (id)conversationManagerClientXPCInterface;
+ (id)conversationManagerServerXPCInterface;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)addRemoteMembers:(id)members otherInvitedHandles:(id)handles toConversation:(id)conversation;
- (void)prepareConversationWithUUID:(id)uuid withHandoffContext:(id)context;
- (void)setSharePlayHandedOff:(BOOL)off onConversationWithUUID:(id)uuid;
- (void)updateMessagesGroupName:(id)name onConversation:(id)conversation;
- (void)setGridDisplayMode:(unsigned long long)mode conversation:(id)conversation;
- (void)conversationUpdateMessagesGroupPhoto:(id)photo;
- (void)createActivitySession:(id)session onConversation:(id)conversation;
- (void)leaveActivitySession:(id)session onConversation:(id)conversation;
- (void)endActivitySession:(id)session onConversation:(id)conversation;
- (void)setUsingAirplay:(BOOL)airplay onActivitySession:(id)session onConversationWithUUID:(id)uuid;
- (void)presentDismissalAlertForActivitySession:(id)session onConversation:(id)conversation;
- (void)setActivityAuthorization:(BOOL)authorization forBundleIdentifier:(id)identifier;
- (void)joinConversationWithRequest:(id)request;
- (void)leaveConversationWithUUID:(id)uuid;
- (void)launchApplicationForActivitySessionUUID:(id)uuid authorizedExternally:(BOOL)externally forceBackground:(BOOL)background completionHandler:(id /* block */)handler;
- (void)buzzMember:(id)member conversation:(id)conversation;
- (void)kickMember:(id)member conversation:(id)conversation;
- (void)setDownlinkMuted:(BOOL)muted forRemoteParticipantsInConversation:(id)conversation;
- (void)getLatestRemoteScreenShareAttributesWithCompletionHandler:(id /* block */)handler;
- (void)requestScreenSharingPickerForConversationUUID:(id)uuid;
- (void)registerWithCompletionHandler:(id /* block */)handler;
- (void)refreshActiveConversations;
- (void)getActiveLinksWithCreatedOnly:(BOOL)only completionHandler:(id /* block */)handler;
- (void)generateLinkForConversation:(id)conversation completionHandler:(id /* block */)handler;
- (void)generateLinkWithInvitedMemberHandles:(id)handles linkLifetimeScope:(long long)scope completionHandler:(id /* block */)handler;
- (void)addInvitedMemberHandles:(id)handles toConversationLink:(id)link completionHandler:(id /* block */)handler;
- (void)invalidateLink:(id)link completionHandler:(id /* block */)handler;
- (void)renewLink:(id)link expirationDate:(id)date reason:(unsigned long long)reason completionHandler:(id /* block */)handler;
- (void)checkLinkValidity:(id)validity completionHandler:(id /* block */)handler;
- (void)getInactiveLinkWithCompletionHandler:(id /* block */)handler;
- (void)activateLink:(id)link completionHandler:(id /* block */)handler;
- (void)setLinkName:(id)name forConversationLink:(id)link completionHandler:(id /* block */)handler;
- (void)scheduleConversationLinkCheckInInitial:(BOOL)initial;
- (void)linkSyncStateIncludeLinks:(BOOL)links WithCompletion:(id /* block */)completion;
- (void)approvePendingMember:(id)member forConversation:(id)conversation;
- (void)setScreenEnabled:(BOOL)enabled withScreenShareAttributes:(id)attributes forConversationWithUUID:(id)uuid;
- (void)rejectPendingMember:(id)member forConversation:(id)conversation;
- (void)setIgnoreLetMeInRequests:(BOOL)requests forConversation:(id)conversation;
- (void)fetchUpcomingNoticeWithCompletionHandler:(id /* block */)handler;
- (void)activateConversationNoticeWithActionURL:(id)url bundleIdentifier:(id)identifier;
- (void)removeConversationNoticeWithUUID:(id)uuid;
- (void)invalidate;
- (void)updateConversationWithUUID:(id)uuid participantPresentationContexts:(id)contexts;
- (void)setSupportsMessagesGroupProviding:(BOOL)providing;
- (void)getMessagesGroupDetailsForConversationUUID:(id)uuid completionHandler:(id /* block */)handler;
- (void)_requestInitialStateIfNecessary;
- (void)_requestInitialStateWithCompletionHandler:(id /* block */)handler;
- (void)_invokeCompletionHandler:(id /* block */)handler;
- (void)handleServerDisconnect;
- (id)asynchronousServerWithErrorHandler:(id /* block */)handler;
- (id)synchronousServerWithErrorHandler:(id /* block */)handler;
- (void)updateConversationsByGroupUUID:(id)uuid;
- (void)updateIncomingPendingConversationsByGroupUUID:(id)uuid;
- (void)conversationUpdatedMessagesGroupPhoto:(id)photo;
- (void)updateActivatedConversationLinks:(id)links;
- (void)receivedTrackedPendingMember:(id)member forConversationLink:(id)link;
- (void)conversation:(id)conversation screenSharingChangedForParticipant:(id)participant;
- (void)sharePlayAvailableChanged:(BOOL)changed;
- (void)screenSharingAvailableChanged:(BOOL)changed;
- (void)mediaPrioritiesChangedForConversation:(id)conversation;
- (void)conversation:(id)conversation participant:(id)participant didReact:(id)react;
- (void)conversation:(id)conversation participantDidStopReacting:(id)reacting;
- (void)conversation:(id)conversation participant:(id)participant addedNotice:(id)notice;
- (void)conversation:(id)conversation didChangeStateForActivitySession:(id)session;
- (void)conversation:(id)conversation didChangeSceneAssociationForActivitySession:(id)session;
- (void)conversation:(id)conversation receivedActivitySessionEvent:(id)event;
- (void)getMessagesGroupDetailsForMessagesGroupUUID:(id)uuid completionHandler:(id /* block */)handler;
- (void)conversation:(id)conversation addedMembersLocally:(id)locally;
- (void)conversation:(id)conversation buzzedMember:(id)member;
- (void)conversation:(id)conversation appLaunchState:(unsigned long long)state forActivitySession:(id)session;
- (void)updateActivityAuthorizedBundleIdentifierState:(id)state;
- (void)updateLocalParticipantToAVLessWithPresentationMode:(unsigned long long)mode forConversationUUID:(id)uuid;
- (void)setLocalParticipantAudioVideoMode:(unsigned long long)mode forConversationUUID:(id)uuid;
- (void)registerMessagesGroupUUIDForConversationUUID:(id)uuid;
@end

#endif /* TUConversationManagerXPCClient_h */
