//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 445.201.0.0.0
//
#ifndef CHCTCRecognitionModel_h
#define CHCTCRecognitionModel_h
@import Foundation;

#include "CHRecurrentNeuralNetworkCoreML.h"

@class NSOrderedSet, NSString;
@protocol {unique_ptr<CoreHandwriting::FeatureExtractionProcessor, std::default_delete<CoreHandwriting::FeatureExtractionProcessor>>="__ptr_"{__compressed_pair<CoreHandwriting::FeatureExtractionProcessor *, std::default_delete<CoreHandwriting::FeatureExtractionProcessor>>="__value_"^{FeatureExtractionProcessor}}}, {unique_ptr<CoreHandwriting::PreprocessingManager, std::default_delete<CoreHandwriting::PreprocessingManager>>="__ptr_"{__compressed_pair<CoreHandwriting::PreprocessingManager *, std::default_delete<CoreHandwriting::PreprocessingManager>>="__value_"^{PreprocessingManager}}};

@interface CHCTCRecognitionModel : CHRecurrentNeuralNetworkCoreML {
  /* instance variables */
  struct unique_ptr<CoreHandwriting::PreprocessingManager, std::default_delete<CoreHandwriting::PreprocessingManager>> { struct __compressed_pair<CoreHandwriting::PreprocessingManager *, std::default_delete<CoreHandwriting::PreprocessingManager>> { struct PreprocessingManager *__value_; } __ptr_; } _preprocessor;
  struct unique_ptr<CoreHandwriting::FeatureExtractionProcessor, std::default_delete<CoreHandwriting::FeatureExtractionProcessor>> { struct __compressed_pair<CoreHandwriting::FeatureExtractionProcessor *, std::default_delete<CoreHandwriting::FeatureExtractionProcessor>> { struct FeatureExtractionProcessor *__value_; } __ptr_; } _featureExtractor;
  NSOrderedSet *__stringCodeMap;
}

@property (readonly, nonatomic) long long sequenceCompression;
@property (readonly, nonatomic) long long distanceFeatureIndex;
@property (readonly, nonatomic) long long sinAlphaFeatureIndex;
@property (readonly, nonatomic) long long cosAlphaFeatureIndex;
@property (readonly, nonatomic) long long gapFeatureIndex;
@property (readonly, nonatomic) NSString *directionalFeaturesInputName;
@property (readonly, nonatomic) NSString *characterProbabilityOutputName;
@property (readonly, nonatomic) struct CHCodeMap { char * x0; unsigned long long x1; unsigned int * x2; unsigned int x3; } * codeMap;
@property (readonly, nonatomic) long long blankIndex;
@property (readonly, nonatomic) long long spaceIndex;
@property (readonly, nonatomic) long long pseudospaceIndex;
@property (nonatomic) BOOL normalizeFeatures;
@property (nonatomic) double distMean;
@property (nonatomic) double distStd;
@property (nonatomic) double interpointDistance;
@property (nonatomic) unsigned long long strokeOrdering;
@property (nonatomic) BOOL shouldUseCPPFeatureExtraction;
@property (nonatomic) BOOL shouldUseArabicVisualOrderFeatureExtraction;
@property (nonatomic) BOOL shouldUseStrokeDirectionFeature;

/* instance methods */
- (void)dealloc;
- (id)featureProviderForDrawing:(id)drawing initialVectorAnchorPoint:(struct CGPoint { double x0; double x1; })point normalizeFeatures:(BOOL)features padFeatures:(BOOL)features outStrokeEndings:(void *)endings outInputSequenceLength:(long long *)length outOutputSequenceLength:(long long *)length;
- (id)recognizeDrawing:(id)drawing minimumDrawingSize:(struct CGSize { double x0; double x1; })size initialVectorAnchorPoint:(struct CGPoint { double x0; double x1; })point activeCharacterSet:(id)set outStrokeIndexMapping:(void *)mapping outStrokeEndings:(void *)endings outFallbackSymbol:(id *)symbol outFallbackSymbolScore:(double *)score;
- (void)enumerateActivationsInResultArray:(id)array indexArray:(id)array block:(id /* block */)block;
- (BOOL)reachesActivationThreshold:(double)threshold inCharacterSet:(id)set resultArray:(id)array indexArray:(id)array;
- (double)highestSymbolActivationWithResultArray:(id)array indexArray:(id)array symbol:(id *)symbol;
- (void)updateActivationsWithActiveCharacterSet:(id)set resultArray:(id)array indexArray:(id)array;
- (id)_extractFeaturesFromDrawing:(id)drawing inputName:(id)name interpointDistance:(double)distance error:(id *)error;
@end

#endif /* CHCTCRecognitionModel_h */
