//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 445.201.0.0.0
//
#ifndef CHRecognizerConfiguration_h
#define CHRecognizerConfiguration_h
@import Foundation;

@class NSLocale;

@interface CHRecognizerConfiguration : NSObject {
  /* instance variables */
  unsigned long long _language;
  unsigned long long _script;
}

@property (readonly, nonatomic) int mode;
@property (readonly, copy, nonatomic) NSLocale *locale;
@property (readonly, nonatomic) int contentType;
@property (readonly, nonatomic) int contentTypeForNoSpaceRecognition;
@property (readonly, nonatomic) int autoCapitalizationMode;
@property (readonly, nonatomic) int autoCorrectionMode;
@property (readonly, nonatomic) int baseWritingDirection;
@property (readonly, nonatomic) BOOL enableCachingIfAvailable;
@property (readonly, nonatomic) BOOL enableGen2ModelIfAvailable;
@property (readonly, nonatomic) BOOL enableGen2CharacterLMIfAvailable;

/* class methods */
+ (id)stringForRecognitionMode:(int)mode;
+ (id)stringForRecognitionContentType:(int)type;
+ (id)stringForAutoCapitalizationMode:(int)mode;
+ (id)stringForAutoCorrectionMode:(int)mode;
+ (id)stringForBaseWritingDirection:(int)direction;
+ (id)defaultLocaleForRecognitionType:(int)type withMode:(int)mode;
+ (BOOL)isLocaleSupported:(id)supported withMode:(int)mode;
+ (BOOL)isSupportedLatinScriptLocale:(id)locale withMode:(int)mode;
+ (BOOL)isSupportedCyrillicScriptLocale:(id)locale withMode:(int)mode;
+ (id)forcedGen2ModelLocaleForLocale:(id)locale;
+ (id)effectiveRecognitionLocales:(id)locales recognitionMode:(int)mode;
+ (id)localeForScriptClass:(id)class;
+ (id)localesForScriptClassification:(id)classification selectedScriptCodepoints:(id)codepoints;
+ (id)recognitionEngineCachingKeyForRecognitionLocale:(id)locale;
+ (id)localesByLanguageGroup:(id)group;
+ (id)defaultActiveCharacterSetForLocale:(id)locale;
+ (id)defaultActiveCharacterSetForLocales:(id)locales;
+ (BOOL)shouldForceNoAlternativeRecognitionCandidates:(id)candidates;
+ (double)skipLatinActivationThreshold;
+ (id)parametersOverride;
+ (void)setParametersOverride:(id)override;
+ (struct CGSize { double x0; double x1; })defaultMinimumDrawingSize;
+ (BOOL)shouldUseStrokeReorderingForMode:(int)mode;
+ (BOOL)shouldApplyLatinSpacingForLocale:(id)locale;
+ (BOOL)shouldUseFullWidthSpaceBasedOnContextForLocale:(id)locale;
+ (id)swappableColumnIndexesFromResults:(id)results locales:(id)locales;
+ (id)swappableColumnIndexesFromResults:(id)results locales:(id)locales topLocaleIndex:(long long)index;
+ (BOOL)shouldPerformStrictCandidateFiltering:(id)filtering;
+ (id)spellCheckingLocaleForRecognitionLocale:(id)locale string:(id)string;
+ (BOOL)shouldAdjustGroupingForLocale:(id)locale;
+ (long long)writingOrientationForLocale:(id)locale;
+ (BOOL)shouldAdjustGroupingHeuristicsForVeryComplexCharacters:(id)characters;
+ (id)modelNameChinese;
+ (id)modelNameJapanese;
+ (id)modelNameThai;
+ (id)modelNameKorean;
+ (id)modelNameLatin;
+ (id)modelNameCyrillic;
+ (id)modelNameArabic;
+ (id)modelNameVietnamese;
+ (id)allNonLatinModelNames;
+ (long long)drawingStrokeLimitForLocale:(id)locale;
+ (BOOL)shouldRemoveSpaceBetweenPreviousChar:(id)char andNextChar:(id)char inLocale:(id)locale;
+ (BOOL)shouldInsertSpaceBetweenPreviousChar:(id)char andNextChar:(id)char inLocale:(id)locale inString:(id)string atRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withQuoteCount:(id)count;
+ (BOOL)shouldRefinePrefixQueryMatchesForLocale:(id)locale;
+ (BOOL)shouldAllowSpaceInsertionGestureForLocale:(id)locale;
+ (BOOL)shouldApplyThaiSpacingForLocale:(id)locale;
+ (BOOL)shouldSwapCyrillicTopResult:(id)result topRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range englishResult:(id)result englishRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range prevousGroupTopString:(id)string;
+ (BOOL)shouldAddSpaceToNeutralQuotationMarks:(id)marks;

/* instance methods */
- (id)initWithMode:(int)mode locale:(id)locale contentType:(int)type enableCachingIfAvailable:(BOOL)available enableGen2ModelIfAvailable:(BOOL)available enableGen2CharacterLMIfAvailable:(BOOL)available;
- (id)initWithMode:(int)mode locale:(id)locale contentType:(int)type autoCapitalizationMode:(int)mode autoCorrectionMode:(int)mode baseWritingDirection:(int)direction enableCachingIfAvailable:(BOOL)available enableGen2ModelIfAvailable:(BOOL)available enableGen2CharacterLMIfAvailable:(BOOL)available;
- (id)description;
- (BOOL)isEqualToRecognizerConfiguration:(id)configuration;
- (id)configurationKey;
- (BOOL)hasSameResourcesAsConfiguration:(id)configuration;
- (BOOL)hasSamePostProcessingAsConfiguration:(id)configuration;
- (BOOL)shouldGenerateDigitLetterAlternatives;
- (BOOL)shouldEnforceGrammarOnTransliterations;
- (unsigned long long)supportedSegmentationStrategy;
- (BOOL)shouldApplyRomanPostProcessing;
- (BOOL)shouldApplyChinesePostProcessing;
- (BOOL)shouldRefineChineseCharacterCandidates;
- (BOOL)shouldLoadCJKLexicons;
- (BOOL)shouldComposeLexiconWithNetwork;
- (BOOL)shouldExpandLexiconInNetwork;
- (BOOL)shouldApplyLexicalPenalty;
- (BOOL)shouldApplyDiacriticSensitivity;
- (BOOL)shouldExpandCodePoints;
- (BOOL)shouldRunNextGenRecognizer;
- (BOOL)shouldPenalizePrefixes;
- (BOOL)shouldPerformGlobalBestSearch;
- (BOOL)shouldPerformGlobalBestSearchWithSmallLattice;
- (BOOL)shouldPerformIntegratedLexiconExpansion;
- (BOOL)shouldFallbackOnSingleCharacterExpansion;
- (BOOL)shouldComputeStrokePenalties;
- (BOOL)shouldPenalizeLetterInsertion;
- (BOOL)shouldApplyCandidatesThresholding;
- (BOOL)shouldRelaxFinalCandidatesThresholding;
- (BOOL)shouldFilterLowProbabilityTranscriptionPaths;
- (BOOL)shouldAutoCapitalize;
- (int)effectiveAutoCapitalizationMode;
- (BOOL)shouldCreatePseudoTokens;
- (BOOL)shouldAutoCorrect;
- (BOOL)unsafeForSpellCorrection;
- (BOOL)shouldRunLexiconCorrectionPostProcessingStep;
- (BOOL)shouldApplyLMRescoring;
- (BOOL)shouldApplyLMSorting;
- (BOOL)shouldTransliterateAndSynthetizeCandidates;
- (BOOL)shouldTransliterateSentencesSCTC;
- (BOOL)shouldReorderSCTCConfusion;
- (BOOL)shouldRecoverCyrillicCandidates;
- (BOOL)shouldRemoveInvalidArabicDiacritics;
- (BOOL)shouldUseCaching;
- (BOOL)shouldPreserveLegacyTranscriptionPaths;
- (BOOL)shouldUseTokenPrecedingSpaces;
- (BOOL)shouldReplaceInvalidTokenIDs;
- (BOOL)shouldTransformCharacterProbabilitiesIntoLogScores;
- (BOOL)shouldPromoteCJKCommonCharacters;
- (BOOL)shouldMarkMultiWordOVS;
- (BOOL)shouldKeepOutOfPatternCandidates;
- (BOOL)shouldKeepDuplicateTokenIDs;
- (BOOL)shouldRefineCandidates;
- (BOOL)shouldDetectChinesePunctuation;
- (BOOL)shouldDetectRomanPunctuation;
- (BOOL)shouldTreatAllSmallStrokesAsPunctuation;
- (BOOL)shouldTransliterateHalfWidthPunctuations;
- (BOOL)shouldAddAlternativeWidthCandidates;
- (BOOL)shouldApplySemanticTokenization;
- (BOOL)shouldIdentifyChangeableColumns;
- (BOOL)shouldMarkNoWhiteSpaceColumnsChangeable;
- (BOOL)shouldRemoveSpacesFromHashtagsAndMentions;
- (BOOL)shouldPerformArabicPostProcessing;
- (BOOL)shouldPromoteInLexiconCandidates;
- (BOOL)shouldConvertKanaInPostProcessing;
- (BOOL)shouldUpdateChangeableColumnCountWithPhraseLexicon;
- (unsigned int)requiredInappropriateFilteringFlags;
- (int)mecabraInputMethodType;
- (BOOL)shouldForwardMecabraOTAAssetsUpdate;
- (long long)precedingSpaceDefaultBehavior;
- (id)forcedActiveCharacterSet;
- (id)linguisticResourcesFallbackLocale;
- (struct _LXLexicon *)newStaticLexicon:(id *)lexicon;
- (struct _LXLexicon *)newSecondaryStaticLexicon:(id *)lexicon;
- (struct _LXLexicon *)postProcessorLexiconWithStaticLexicon:(struct _LXLexicon *)lexicon secondaryLexicon:(struct _LXLexicon *)lexicon;
- (struct _LXLexicon *)newPhraseLexicon:(id *)lexicon;
- (void *)newCJKStaticLexicon;
- (void *)newWordLanguageModel;
- (void *)newWordLanguageModelForRecognizer:(id)recognizer async:(BOOL)async synchronizationQueue:(id)queue;
- (id)newSpellChecker;
- (void *)newCharacterLanguageModelAndMap:(void *)map force:(BOOL)force;
- (id)newOVSStringCheckerWithStaticLexicon:(struct _LXLexicon *)lexicon customLexicon:(struct _LXLexicon *)lexicon;
- (id)newPatternFST;
- (id)sharedPostProcessingFST;
- (void *)newGrammarFST;
- (void *)newRadicalClusterFST;
- (id)newMecabraWrapper;
- (struct VariantMap { int * x0; int * x1; int * x2; int x3; int * x4; unsigned long long x5; } *)newTransliterationVariantMap;
- (struct CHNeuralNetwork { undefined * x0; BOOL x1; struct CHCodeMap * x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; id x7; id x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; } *)newRecognitionEngine;
- (id)newCTCRecognitionModel;
- (id)newPostProcessorWithStaticLexicon:(struct _LXLexicon *)lexicon customLexicon:(struct _LXLexicon *)lexicon phraseLexicon:(struct _LXLexicon *)lexicon customPhraseLexicon:(struct _LXLexicon *)lexicon textReplacements:(id)replacements postProcessingFST:(id)fst wordLM:(void *)lm mecabraWrapper:(id)wrapper ovsStringChecker:(id)checker spellChecker:(id)checker lmVocabulary:(void *)vocabulary maxResultCount:(long long)count;
- (id)newMergedResultPostProcessorWithStaticLexicon:(struct _LXLexicon *)lexicon customLexicon:(struct _LXLexicon *)lexicon stringChecker:(id)checker;
- (struct CHNeuralNetwork { undefined * x0; BOOL x1; struct CHCodeMap * x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; id x7; id x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; } *)newFreeFormEngine;
- (long long)maxRecognitionResultDefaultCount;
- (long long)engineCandidateCount;
- (undefined *)lexiconStringNormalizationFunction;
@end

#endif /* CHRecognizerConfiguration_h */
