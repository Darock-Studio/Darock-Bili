//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 445.201.0.0.0
//
#ifndef CHLanguageUtilities_h
#define CHLanguageUtilities_h
@import Foundation;

@class BOOL *;

@interface CHLanguageUtilities : NSObject
/* class methods */
+ (unsigned int)normalizeLMTokenIDForWord:(id)word tokenID:(unsigned int)id isFromPattern:(BOOL)pattern score:(double *)score wordLanguageModel:(void *)model;
+ (id)tokensRangesForString:(id)string outTokenIDs:(id *)ids wordLanguageModel:(void *)model;
+ (id)splitStringIntoSubtokensForLexicon:(id)lexicon minLength:(long long)length;
+ (BOOL)findPartialMatchInPhraseLexicon:(struct _LXLexicon *)lexicon token:(id)token contextBeforeToken:(id)token;
+ (id)transliterateStringUsingICUTransliterator:(id)icutransliterator _icuTransliterator:(void * *)transliterator;
+ (id)transformString:(id)string usingConfusions:(id)confusions;
+ (id)transformLatinToCyrillic:(id)cyrillic;
+ (id)transformCyrillicToLatin:(id)latin;
+ (id)performInverseBiDiForNumeric:(id)numeric isRTLContext:(BOOL)rtlcontext;
+ (unsigned int)tokenIDForString:(id)string withLexicon:(struct _LXLexicon *)lexicon;
+ (BOOL)lexiconHasEntryForString:(id)string withLexicon:(struct _LXLexicon *)lexicon outHasMatchingString:(BOOL *)string;
+ (double)characterLMLogProbabilityForString:(id)string characterLM:(id)lm;
+ (BOOL)isMecabraConversionCandidateAllowed:(id)allowed;
+ (id)mecabraTokenizationAndKanaConversionForString:(id)string mecabraEngine:(struct __Mecabra *)engine contextRef:(struct __MecabraContext *)ref leftCandidateRef:(void *)ref alternativeCandidateLimit:(long long)limit;
+ (BOOL)shouldCapitalizeGivenHistory:(id)history shouldAutoCapitalizeSetting:(BOOL)setting locale:(id)locale;
+ (double)computeEditPenalizationFromString:(id)string toReferenceString:(id)string withSuffix:(id)suffix withCaseSensitivity:(BOOL)sensitivity withFirstLetterCaseSensitivity:(BOOL)sensitivity withDiacriticSensitivity:(BOOL)sensitivity withDiacriticsCharSet:(id)set withConsumableStrokesCharSet:(id)set outputSuffix:(id *)suffix lexiconExtraCharacters:(id *)characters firstLetterCaseFlipped:(BOOL *)flipped;
+ (id)lexiconCorrectionsForToken:(id)token locale:(id)locale lexicon:(struct _LXLexicon *)lexicon lmVocabulary:(void *)vocabulary ovsStringChecker:(id)checker textReplacements:(id)replacements consumableStrokesSet:(id)set minimumTokenScore:(double)score activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range outBestTokenScore:(double *)score shouldCapitalizeWord:(BOOL)word shouldSkipEntryCorrection:(BOOL)correction allowFullCapsCorrections:(BOOL)corrections minimalLengthForLowConfidenceCorrections:(long long)corrections lowConfidenceThreshold:(double)threshold minimalLengthForCustomCapitalizationCorrections:(long long)corrections outBestTokenIndex:(long long *)index outFoundTokenInLexicon:(BOOL *)lexicon outFoundCaseMatchingTokenInLexicon:(BOOL *)lexicon outCorrectionFromOutOfContextEntry:(BOOL *)entry;
@end

#endif /* CHLanguageUtilities_h */
