//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 445.201.0.0.0
//
#ifndef CHDrawing_h
#define CHDrawing_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@protocol {CHDrawingStrokes="strokeBounds"{vector<std::vector<double>, std::allocator<std::vector<double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>="__value_"^v}}"strokeBoundsValidity"{vector<bool, std::allocator<bool>>="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}"startTimes"{vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}"endTimes"{vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}"strokes"{vector<std::vector<double>, std::allocator<std::vector<double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>="__value_"^v}}"currentStrokeIndex"q"mSize"I"bitmap"{Matrix<double>="_vptr$Matrix"^^?"_data"^d"_w"I"_h"I}"lineHeight"d"sparseBitmap"{vector<int, std::allocator<int>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::allocator<int>>="__value_"^i}}};

@interface CHDrawing : NSObject<NSCopying, NSSecureCoding> {
  /* instance variables */
  struct CHDrawingStrokes { struct vector<std::vector<double>, std::allocator<std::vector<double>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>> { void *__value_; } __end_cap_; } strokeBounds; struct vector<bool, std::allocator<bool>> { unsigned long long *__begin_; unsigned long long __size_; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long __value_; } __cap_alloc_; } strokeBoundsValidity; struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } startTimes; struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } endTimes; struct vector<std::vector<double>, std::allocator<std::vector<double>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>> { void *__value_; } __end_cap_; } strokes; long long currentStrokeIndex; unsigned int mSize; struct Matrix<double> { undefined * *_vptr$Matrix; double *_data; unsigned int _w; unsigned int _h; } bitmap; double lineHeight; struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; struct __compressed_pair<int *, std::allocator<int>> { int *__value_; } __end_cap_; } sparseBitmap; } _drawing;
}

/* class methods */
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)initWithContentsOfFile:(id)file;
- (id)initWithContentsOfXYString:(id)xystring;
- (id)initWithContentsOfJSONDictionary:(id)jsondictionary;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)description;
- (id)newDrawingWithTransform:(id /* block */)transform;
- (id)newDrawingWithAffineTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (id)drawingByRemovingUnnaturalHorizontalGaps:(double)gaps;
- (unsigned long long)pointCount;
- (unsigned long long)pointCountForStrokeIndex:(unsigned long long)index;
- (struct CGPoint { double x0; double x1; })pointForStrokeIndex:(unsigned long long)index pointIndex:(unsigned long long)index;
- (double)startTimeForStroke:(unsigned long long)stroke;
- (double)endTimeForStroke:(unsigned long long)stroke;
- (unsigned long long)strokeCount;
- (id)indexesOfStrokesSmallerThanSize:(struct CGSize { double x0; double x1; })size;
- (id)drawingWithStrokesFromIndexSet:(id)set;
- (id)drawingWithStrokesFromIndexArray:(id)array;
- (struct CGPoint { double x0; double x1; })centroidForStrokeIndexes:(id)indexes;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForStrokeIndexes:(id)indexes;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForStrokeIndex:(unsigned long long)index;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })strokeBoundsAtIndex:(unsigned long long)index;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (float)cumulativePointToPointDistance;
- (float)distanceBetweenFirstAndLastPoint;
- (void)addPoint:(struct CGPoint { double x0; double x1; })point;
- (void)addStartTime:(double)time;
- (void)addEndTime:(double)time;
- (void)endStroke;
- (void)clear;
- (BOOL)isPrefixForDrawing:(id)drawing;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })matchingStrokePrefixRangeForDrawing:(id)drawing;
- (BOOL)isEqualToDrawing:(id)drawing;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (id)xyRepresentation;
- (id)jsonRepresentationWithContext:(id)context;
- (struct Matrix<float> { undefined * * x0; float * x1; unsigned int x2; unsigned int x3; })bitmapRepresentationForSize:(struct CGSize { double x0; double x1; })size;
- (struct Matrix<float> { undefined * * x0; float * x1; unsigned int x2; unsigned int x3; })orientationRepresentationForSampling:(unsigned long long)sampling convolutionWidth:(unsigned long long)width;
- (id)sortedDrawingUsingMinXCoordinate;
- (id)sortedDrawingUsingStrokeMidPoint:(id *)point;
- (id)sortedDrawingUsingStrokeMidPointHorizontalOverlapAware:(id *)aware shouldSortRTL:(BOOL)rtl;
- (id)drawingScaledByFactor:(double)factor;
- (id)drawingTransformedWithTranslation:(struct CGVector { double x0; double x1; })translation scaleFactor:(double)factor;
- (id)drawingSpatiallyResampled:(double)resampled outputPointMap:(void *)map;
- (id)drawingSpatiallyResampled:(double)resampled maxPointsPerStroke:(long long)stroke;
- (struct vector<long, std::allocator<long>> { long long * x0; long long * x1; struct __compressed_pair<long *, std::allocator<long>> { long long * x0; } x2; })strokeIndicesSortedByMinXCoordinate;
- (void)setLineHeight:(double)height;
- (void)appendSegment:(id)segment fromDrawing:(id)drawing;
- (void)appendDrawing:(id)drawing;
- (double)averageCharacterHeightEstimation:(double)estimation minChunkHeight:(double)height;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)writeToFile;
- (void)writeToFileWithContext:(id)context folder:(id)folder basename:(id)basename;
@end

#endif /* CHDrawing_h */
