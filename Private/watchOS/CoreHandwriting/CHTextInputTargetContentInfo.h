//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 445.201.0.0.0
//
#ifndef CHTextInputTargetContentInfo_h
#define CHTextInputTargetContentInfo_h
@import Foundation;

#include "NSMutableCopying-Protocol.h"

@class CHTextInputTarget, NSIndexSet, NSString;

@interface CHTextInputTargetContentInfo : NSObject<NSMutableCopying>

@property (readonly, nonatomic) CHTextInputTarget *textInputTarget;
@property (readonly, nonatomic) long long textContentLength;
@property (readonly, copy, nonatomic) NSString *referenceSubstring;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } referenceSubstringRange;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } strokeCoveredTextRange;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } selectedTextRange;
@property (readonly, nonatomic) BOOL isCursorStrong;
@property (readonly, nonatomic) BOOL containsCommittedStrokes;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } activePreviewRange;
@property (readonly, nonatomic) int contentType;
@property (readonly, nonatomic) int autoCapitalizationMode;
@property (readonly, nonatomic) int autoCorrectionMode;
@property (readonly, nonatomic) int baseWritingDirection;
@property (readonly, nonatomic) BOOL isSingleLine;
@property (readonly, nonatomic) BOOL supportsAutoLineBreaks;
@property (readonly, nonatomic) long long lastCharacterLevelPosition;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } * characterRectsInReferenceSubstring;
@property (readonly, copy, nonatomic) NSIndexSet *protectedCharacterIndexes;

/* instance methods */
- (id)initWithTextInputTarget:(id)target contentLength:(long long)length referenceSubstring:(id)substring referenceSubstringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range charRectsInReferenceSubstring:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)substring strokeCoveredTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range selectedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range activePreviewRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range lastCharacterLevelPosition:(long long)position;
- (id)initWithTextInputTarget:(id)target contentLength:(long long)length referenceSubstring:(id)substring referenceSubstringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range charRectsInReferenceSubstring:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)substring strokeCoveredTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range selectedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range isCursorStrong:(BOOL)strong activePreviewRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range contentType:(int)type autoCapitalizationMode:(int)mode autoCorrectionMode:(int)mode isSingleLine:(BOOL)line lastCharacterLevelPosition:(long long)position;
- (id)initWithTextInputTarget:(id)target contentLength:(long long)length referenceSubstring:(id)substring referenceSubstringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range charRectsInReferenceSubstring:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)substring strokeCoveredTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range selectedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range isCursorStrong:(BOOL)strong activePreviewRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range contentType:(int)type isSingleLine:(BOOL)line lastCharacterLevelPosition:(long long)position;
- (id)initWithTextInputTarget:(id)target contentLength:(long long)length referenceSubstring:(id)substring referenceSubstringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range charRectsInReferenceSubstring:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)substring strokeCoveredTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range selectedTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range activePreviewRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range contentType:(int)type lastCharacterLevelPosition:(long long)position;
- (void)dealloc;
- (id)description;
- (id)mutableCopyWithZone:(struct _NSZone *)zone;
- (long long)absoluteLocationFromRelativeLocation:(long long)location;
- (long long)relativeLocationFromAbsoluteLocation:(long long)location;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })characterRectForCharacterIndex:(long long)index;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visualCharacterRectForCharacterIndex:(long long)index;
- (void)enumerateCharacterRectsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range block:(id /* block */)block;
- (void)enumerateCharacterRectsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range reverse:(BOOL)reverse block:(id /* block */)block;
- (id)referenceSubstringInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })referenceSubstringRangeOfComposedCharacterAtIndex:(long long)index;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })unionCharacterRects;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })characterRectForComposedCharacterAtIndex:(long long)index;
@end

#endif /* CHTextInputTargetContentInfo_h */
