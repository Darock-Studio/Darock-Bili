//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 949.0.0.0.0
//
#ifndef NWKLocation_h
#define NWKLocation_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSMutableCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class CLLocation, NSDate, NSString, NSTimeZone;

@interface NWKLocation : NSObject<NSCopying, NSMutableCopying, NSSecureCoding>

@property (retain, nonatomic) NSString *name;
@property (retain, nonatomic) NSString *preciseName;
@property (retain, nonatomic) NSString *secondaryName;
@property (retain, nonatomic) NSTimeZone *timeZone;
@property (retain, nonatomic) NSDate *lastRefreshDate;
@property (retain, nonatomic) NSString *countryAbbreviation;
@property (readonly, nonatomic) NSString *identifier;
@property (readonly, nonatomic) NSString *bridgeIdentifier;
@property (readonly, nonatomic) unsigned long long identifierHash;
@property (readonly, nonatomic) struct CLLocationCoordinate2D { double x0; double x1; } coordinate;
@property (readonly, nonatomic) CLLocation *coreLocationRepresentation;

/* class methods */
+ (id)dictionaryKeyLatitude;
+ (id)dictionaryKeyLongitude;
+ (id)dictionaryKeyName;
+ (id)dictionaryKeyPreciseName;
+ (id)dictionaryKeySecondaryName;
+ (id)dictionaryKeyTimeZoneName;
+ (id)dictionaryKeyTimeZoneLastUpdated;
+ (id)dictionaryKeyUUID;
+ (id)dictionaryKeyCountryAbbreviation;
+ (id)locationFromDictionaryRepresentation:(id)representation;
+ (id)locationWithName:(id)name coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate timeZoneWithName:(id)name lastRefreshDate:(id)date;
+ (id)locationWithName:(id)name coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate timeZone:(id)zone lastRefreshDate:(id)date;
+ (id)locationWithIdentifier:(id)identifier name:(id)name coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate timeZone:(id)zone lastRefreshDate:(id)date;
+ (id)locationWithIdentifier:(id)identifier name:(id)name preciseName:(id)name secondaryName:(id)name coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate timeZone:(id)zone lastRefreshDate:(id)date;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)initWithCLPLacemark:(id)clplacemark coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate;
- (id)initWithWFLocation:(id)wflocation;
- (id)initWithDictionaryRepresentation:(id)representation;
- (id)initWithName:(id)name coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate timeZoneWithName:(id)name lastRefreshDate:(id)date;
- (id)initWithName:(id)name coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate timeZone:(id)zone lastRefreshDate:(id)date;
- (id)initWithIdentifier:(id)identifier name:(id)name coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate timeZone:(id)zone lastRefreshDate:(id)date;
- (id)initWithIdentifier:(id)identifier name:(id)name preciseName:(id)name secondaryName:(id)name coordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate timeZone:(id)zone lastRefreshDate:(id)date;
- (id)dictionaryRepresentation;
- (BOOL)isEqual:(id)equal;
- (BOOL)isEqualToLocation:(id)location;
- (BOOL)_hasSameNameAs:(id)as;
- (BOOL)_hasSamePreciseNameAs:(id)as;
- (BOOL)_hasSameSecondaryNameAs:(id)as;
- (BOOL)_hasSameTimeZoneAs:(id)as;
- (BOOL)_hasSameLastRefreshDateAs:(id)as;
- (BOOL)_hasSameCountryAbbreviationAs:(id)as;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)mutableCopyWithZone:(struct _NSZone *)zone;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
@end

#endif /* NWKLocation_h */
