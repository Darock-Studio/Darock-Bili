//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 5.1.16.0.0
//
#ifndef RBShape_h
#define RBShape_h
@import Foundation;

@protocol {InlineHeap<256UL>="_page_size"Q"_pages"^{Page}"_sbrk"*"_sbrk_end"*"_objects"^{ObjectTable}"_buffer"[256C]};

@interface RBShape : NSObject {
  /* instance variables */
  struct RBShapeData { int type; unsigned char x[88] data; } _data;
  struct InlineHeap<256UL> { unsigned long long _page_size; struct Page *_pages; char *_sbrk; char *_sbrk_end; struct ObjectTable *_objects; unsigned char x[256] _buffer; } _heap;
  BOOL _eoFill;
}

@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } boundingRect;
@property (nonatomic) BOOL antialiased;
@property (nonatomic) BOOL EOFill;

/* instance methods */
- (id)init;
- (void)setInfinite;
- (void)setEmpty;
- (void)setRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)setStrokedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect lineWidth:(double)width;
- (void)setRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadius:(double)radius cornerStyle:(int)style;
- (void)setRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerSize:(struct CGSize { double x0; double x1; })size cornerStyle:(int)style;
- (void)setRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadii:(struct { double x0; double x1; double x2; double x3; })radii cornerStyle:(int)style;
- (void)setStrokedRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadius:(double)radius cornerStyle:(int)style lineWidth:(double)width;
- (void)setStrokedRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadii:(struct { double x0; double x1; double x2; double x3; })radii cornerStyle:(int)style lineWidth:(double)width;
- (void)setEllipseInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)setCircleAtPoint:(struct CGPoint { double x0; double x1; })point radius:(double)radius;
- (void)setStrokedCircleAtPoint:(struct CGPoint { double x0; double x1; })point radius:(double)radius lineWidth:(double)width;
- (void)setStrokedLineFromPoint:(struct CGPoint { double x0; double x1; })point toPoint:(struct CGPoint { double x0; double x1; })point lineWidth:(double)width lineCap:(int)cap;
- (void)setPath:(struct CGPath *)path;
- (void)setPath:(struct CGPath *)path transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)setRBPath:(struct RBPath { void * x0; struct RBPathCallbacks * x1; })rbpath transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)setStrokedPath:(struct CGPath *)path transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform lineWidth:(double)width lineCap:(int)cap lineJoin:(int)join miterLimit:(double)limit dashPhase:(double)phase dashPattern:(const double *)pattern dashCount:(long long)count;
- (void)setStrokedPath:(struct CGPath *)path transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform lineWidth:(double)width lineCap:(int)cap lineJoin:(int)join miterLimit:(double)limit;
- (void)setStrokedRBPath:(struct RBPath { void * x0; struct RBPathCallbacks * x1; })rbpath transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform lineWidth:(double)width lineCap:(int)cap lineJoin:(int)join miterLimit:(double)limit dashPhase:(double)phase dashPattern:(const double *)pattern dashCount:(long long)count;
- (void)setGlyphs:(const unsigned short *)glyphs positions:(const struct CGPoint { double x0; double x1; } *)positions count:(unsigned long long)count font:(struct CGFont *)font renderingStyle:(unsigned int)style;
- (void)setCustomGlyphDilation:(struct CGSize { double x0; double x1; })dilation;
- (void)setShouldDrawBitmapRuns:(BOOL)runs;
- (void)setStroke:(id)stroke;
- (BOOL)isAntialiased;
@end

#endif /* RBShape_h */
