//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 5.1.16.0.0
//
#ifndef RBSymbolAnimator_h
#define RBSymbolAnimator_h
@import Foundation;

@class CUINamedVectorGlyph;
@protocol {Animator="_lock"{spin_lock="_lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}}"_model"{refcounted_ptr<RB::Symbol::Model>="_p"^{Model}}"_animations"{vector<RB::Symbol::Animation, 0UL, unsigned long>="_p"^{Animation}"_size"Q"_capacity"Q}"_current_time"d"_presentation_position""_variable_value"f"_seed"I"_max_edge_velocity"f}, {vector<id<RBSymbolAnimatorObserver>, 2UL, unsigned int>="_p"[16C]"_p"^@"_size"I"_capacity"I};

@interface RBSymbolAnimator : NSObject {
  /* instance variables */
  struct Animator { struct spin_lock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock; } _lock; struct refcounted_ptr<RB::Symbol::Model> { struct Model *_p; } _model; struct vector<RB::Symbol::Animation, 0UL, unsigned long> { struct Animation *_p; unsigned long long _size; unsigned long long _capacity; } _animations; double _current_time; " _presentation_position; _ x0; void x1; a x2; const int x3; a x4; unsigned int x5 :0; long x6; e x7; _ x8; void x9; a x10; long x11; u x12; e x13; _ f; short x14; e x15; e x16; double x17; _ I; m x18; a x19; x x20; _ x21; e x22; double x23; g x24; e x25; _ x26; void x27; e x28; long x29; out char x30; int x31; int128 x32; y x33; " x34; float x35; } _animator;
  struct vector<id<RBSymbolAnimatorObserver>, 2UL, unsigned int> { unsigned char x[16] _p; _size * *_p; unsigned int x0; unsigned int _capacity; } _observers;
  BOOL _needs_notify;
}

@property (retain, nonatomic) CUINamedVectorGlyph *glyph;
@property (nonatomic) unsigned int renderingMode;
@property (nonatomic) double variableValue;
@property (nonatomic) struct { float x0; float x1; float x2; float x3; } opacities;
@property (nonatomic) BOOL hidden;
@property (nonatomic) int scaleLevel;
@property (nonatomic) struct CGPoint { double x0; double x1; } anchorPoint;
@property (nonatomic) struct CGPoint { double x0; double x1; } position;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property (nonatomic) struct CGPoint { double x0; double x1; } presentationPosition;
@property (nonatomic) double currentTime;
@property (readonly, nonatomic) double maxVelocity;
@property (readonly, nonatomic) unsigned int version;
@property (readonly, nonatomic) BOOL animating;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRect;
@property (readonly, nonatomic) unsigned int styleMask;
@property (nonatomic) unsigned int depth;
@property (nonatomic) unsigned int state;
@property (nonatomic) BOOL focused;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } boundingRect;

/* instance methods */
- (void)dealloc;
- (BOOL)isHidden;
- (BOOL)isFocused;
- (unsigned int)addAnimation:(unsigned int)animation options:(id)options;
- (void)cancelAnimationWithID:(unsigned int)id;
- (void)cancelAnimation:(unsigned int)animation;
- (void)cancelAllAnimations;
- (void)removeAnimationWithID:(unsigned int)id;
- (void)removeAnimation:(unsigned int)animation;
- (void)removeAllAnimations;
- (void)setPriority:(float)priority ofAnimationWithID:(unsigned int)id;
- (BOOL)isAnimating;
- (struct _RBSymbolUpdate *)beginUpdateWithRenderingMode:(unsigned int)mode;
- (struct _RBSymbolUpdate *)beginUpdateWithRenderingMode:(unsigned int)mode position:(const struct CGPoint { double x0; double x1; } *)position size:(const struct CGSize { double x0; double x1; } *)size flags:(unsigned int)flags;
- (void)endUpdate:(struct _RBSymbolUpdate *)update;
- (id)copyDebugDescriptionForUpdate:(struct _RBSymbolUpdate *)update;
@end

#endif /* RBSymbolAnimator_h */
