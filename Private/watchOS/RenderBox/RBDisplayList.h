//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 5.1.16.0.0
//
#ifndef RBDisplayList_h
#define RBDisplayList_h
@import Foundation;

#include "RBDisplayListContents-Protocol.h"
#include "RBTransition.h"
#include "_RBDisplayListContents-Protocol.h"

@class NSString, NSUUID;
@protocol {DisplayList="_crop_seed"I"_layer_id"I"_contents"{refcounted_ptr<RB::DisplayList::Contents>="_p"^{Contents}}"_state_pool"{Pool<RB::DisplayList::State, const RB::Malloc>="_freelist"^{Item}}"_layer_state_pool"{Pool<RB::DisplayList::LayerState, RB::Heap>="_freelist"^{Item}}"_active_layer"^{LayerState}"_root_state"{State="_next"^{State}"_context"^v"_ctm"{AffineTransform="ab""cd""txy"}"_identity"{Identity="identifier"I"ns"{UUID="bytes"[16C]}}"_transition"{refcounted_ptr<const RB::Transition>="_p"^{Transition}}"_clip"^{ClipNode}"_style"^{Style}"_copied_ctm"^{AffineTransform}"_copied_metadata"^{Metadata}"_crop"{Bounds="origin""size"}"_layer_id"I"_crop_seed"I"_numeric_value"{optional_float="_value_or_nan"f}"_default_color_space"{optional<RB::ColorSpace>=""(?="__null_state_"c"__val_"C)"__engaged_"B}"_text_identity"^{TextIdentity}}"_root_layer_state"{LayerState="_layer"^{Layer}"_next_layer"^{LayerState}"_crop"{Rect="origin""size"}"_crop_seed"I}"_state"^{State}"_optimized"B}, {objc_ptr<void (^)(_RBDrawingState *, unsigned long)>="_p"@?}, {unique_ptr<RB::XML::Document, std::default_delete<RB::XML::Document>>="__ptr_"{__compressed_pair<RB::XML::Document *, std::default_delete<RB::XML::Document>>="__value_"^{Document}}}, {vector<std::pair<RB::cf_ptr<CGContext *>, RB::ContextDelegate *>, 1UL, unsigned int>="_p"[16C]"_p"^v"_size"I"_capacity"I};

@interface RBDisplayList : NSObject<_RBDisplayListContents, RBDisplayListContents> {
  /* instance variables */
  struct DisplayList { unsigned int _crop_seed; unsigned int _layer_id; struct refcounted_ptr<RB::DisplayList::Contents> { struct Contents *_p; } _contents; struct Pool<RB::DisplayList::State, const RB::Malloc> { struct Item *_freelist; } _state_pool; struct Pool<RB::DisplayList::LayerState, RB::Heap> { struct Item *_freelist; } _layer_state_pool; struct LayerState *_active_layer; struct State { struct State *_next; void *_context; struct AffineTransform { " ab; char x0; double x1; int128 x2; x x3; y x4; " x5; } _ctm; struct Identity { unsigned int identifier; struct UUID { unsigned char x[16] bytes; } ns; } _identity; struct refcounted_ptr<const RB::Transition> { struct Transition *_p; } _transition; struct ClipNode *_clip; struct Style *_style; struct AffineTransform *_copied_ctm; struct Metadata *_copied_metadata; struct Bounds { " origin; short x0; int x1; size_t x2; e x3; " x4; } _crop; unsigned int _layer_id; unsigned int _crop_seed; struct optional_float { float _value_or_nan; } _numeric_value; struct optional<RB::ColorSpace> { union { char __null_state_; unsigned char __val_; } x0; BOOL __engaged_; } _default_color_space; struct TextIdentity *_text_identity; } _root_state; struct LayerState { struct Layer *_layer; struct LayerState *_next_layer; struct Rect { " origin; short x0; int x1; size_t x2; e x3; " x4; } _crop; unsigned int _crop_seed; } _root_layer_state; struct State *_state; BOOL _optimized; } _list;
  struct unique_ptr<RB::XML::Document, std::default_delete<RB::XML::Document>> { struct __compressed_pair<RB::XML::Document *, std::default_delete<RB::XML::Document>> { struct Document *__value_; } __ptr_; } _xml_document;
  struct objc_ptr<void (^)(_RBDrawingState *, unsigned long)> { id /* block */ _p; } _cgStyleHandler;
  struct vector<std::pair<RB::cf_ptr<CGContext *>, RB::ContextDelegate *>, 1UL, unsigned int> { unsigned char x[16] _p; void *_p; unsigned int _size; unsigned int _capacity; } _contexts;
  unsigned int _active_states;
}

@property (nonatomic) BOOL linearColors;
@property (nonatomic) unsigned int profile;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentRect;
@property (nonatomic) double deviceScale;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } clipBoundingBox;
@property (nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } CTM;
@property (nonatomic) int defaultColorSpace;
@property (readonly, nonatomic) unsigned int identifier;
@property (readonly, copy, nonatomic) NSUUID *identifierNamespace;
@property (copy, nonatomic) RBTransition *transition;
@property (copy, nonatomic) id /* block */ CGStyleHandler;
@property (readonly, nonatomic) const void * _rb_contents;
@property (readonly, nonatomic) const void * _rb_xml_document;
@property (readonly, nonatomic) BOOL empty;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } boundingRect;
@property (readonly, copy, nonatomic) NSString *xmlDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)decodedObjectWithData:(id)data delegate:(id)delegate error:(id *)error;

/* instance methods */
- (id)init;
- (void)dealloc;
- (BOOL)isEmpty;
- (void)clearCaches;
- (void)clear;
- (id)moveContents;
- (void)save;
- (void)restore;
- (void)beginLayerWithFlags:(unsigned int)flags;
- (void)beginLayer;
- (void)drawLayerWithAlpha:(float)alpha blendMode:(int)mode;
- (void)clipLayerWithAlpha:(float)alpha mode:(int)mode;
- (struct CGContext *)beginCGContextWithAlpha:(float)alpha;
- (struct CGContext *)beginCGContextWithAlpha:(float)alpha flags:(unsigned int)flags;
- (void)endCGContext;
- (void)renderInContext:(struct CGContext *)context options:(id)options;
- (void)scaleByX:(double)x Y:(double)y;
- (void)translateByX:(double)x Y:(double)y;
- (void)rotateBy:(double)by;
- (void)concat:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })concat;
- (void)setIdentifier:(unsigned int)identifier namespace:(id)namespace;
- (void)setValue:(id)value forAttribute:(unsigned int)attribute;
- (id)valueForAttribute:(unsigned int)attribute;
- (void)clipShape:(id)shape alpha:(float)alpha mode:(int)mode;
- (void)clipShape:(id)shape mode:(int)mode;
- (void)drawShape:(id)shape fill:(id)fill alpha:(float)alpha blendMode:(int)mode;
- (void)drawInState:(struct _RBDrawingState *)state;
- (void)_drawInState:(struct _RBDrawingState *)state alpha:(float)alpha;
- (void)drawDisplayList:(id)list;
- (void)drawDisplayList:(id)list alpha:(float)alpha;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect alpha:(float)alpha blendMode:(int)mode flags:(unsigned int)flags operation:(id /* block */)operation;
- (void)addPredicateStyle:(id)style;
- (void)addTransformStyle:(id)style;
- (void)addAnimationStyle:(id)style id:(struct { unsigned char x0[16] })id;
- (void)addShadowStyleWithRadius:(double)radius offset:(struct CGSize { double x0; double x1; })offset color:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space blendMode:(int)mode flags:(unsigned int)flags;
- (void)addShadowStyleWithRadius:(double)radius offset:(struct CGSize { double x0; double x1; })offset color:(struct { float x0; float x1; float x2; float x3; })color mode:(unsigned int)mode;
- (void)addProjectionStyleWithArray:(float x[9])array;
- (void)addRotationStyleWithAngle:(double)angle anchor:(struct CGPoint { double x0; double x1; })anchor;
- (void)addScaleStyleWithScale:(struct CGSize { double x0; double x1; })scale anchor:(struct CGPoint { double x0; double x1; })anchor;
- (void)addTranslationStyleWithOffset:(struct CGSize { double x0; double x1; })offset;
- (void)addRotation3DStyleWithAngle:(double)angle axis:(struct { float x0; float x1; float x2; })axis anchor:(struct { float x0; float x1; float x2; })anchor perspective:(double)perspective flipWidth:(double)width;
- (void)addAffineTransformStyle:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })style;
- (void)addPathProjectionStyleWithStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point path:(struct RBPath { void * x0; struct RBPathCallbacks * x1; })path transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform flags:(unsigned int)flags;
- (void)addBlurFilterWithRadius:(double)radius bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds flags:(unsigned int)flags;
- (void)addBlurFilterWithRadius:(double)radius flags:(unsigned int)flags;
- (void)addBlurFilterWithRadius:(double)radius opaque:(BOOL)opaque;
- (void)addBlurFilterWithRadius:(double)radius;
- (void)addVariableBlurFilterWithRadius:(double)radius mask:(id)mask bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds flags:(unsigned int)flags;
- (void)addVariableBlurLayerWithAlpha:(float)alpha scale:(double)scale radius:(double)radius bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds flags:(unsigned int)flags;
- (void)addAlphaThresholdFilterWithMinAlpha:(float)alpha maxAlpha:(float)alpha color:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space;
- (void)addAlphaThresholdFilterWithAlpha:(float)alpha color:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space;
- (void)addAlphaGradientFilterWithStopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors colorSpace:(int)space locations:(const double *)locations flags:(unsigned int)flags;
- (void)addColorMatrixFilterWithArray:(float x[20])array flags:(unsigned int)flags;
- (void)addColorMatrixFilterWithArray:(float x[20])array;
- (void)addColorMultiplyFilterWithColor:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space flags:(unsigned int)flags;
- (void)addColorMultiplyFilterWithColor:(struct { float x0; float x1; float x2; float x3; })color;
- (void)addAlphaMultiplyFilterWithColor:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space flags:(unsigned int)flags;
- (void)addAlphaMultiplyFilterWithColor:(struct { float x0; float x1; float x2; float x3; })color;
- (void)addHueRotationFilterWithAngle:(double)angle flags:(unsigned int)flags;
- (void)addHueRotationFilterWithAngle:(double)angle;
- (void)addSaturationFilterWithAmount:(float)amount flags:(unsigned int)flags;
- (void)addSaturationFilterWithAmount:(float)amount;
- (void)addBrightnessFilterWithAmount:(float)amount flags:(unsigned int)flags;
- (void)addBrightnessFilterWithAmount:(float)amount;
- (void)addContrastFilterWithAmount:(float)amount flags:(unsigned int)flags;
- (void)addContrastFilterWithAmount:(float)amount;
- (void)addLuminanceToAlphaFilterWithFlags:(unsigned int)flags;
- (void)addLuminanceToAlphaFilter;
- (void)addColorInvertFilterWithAmount:(float)amount flags:(unsigned int)flags;
- (void)addColorInvertFilter;
- (void)addGrayscaleFilterWithAmount:(float)amount flags:(unsigned int)flags;
- (void)addGrayscaleFilterWithAmount:(float)amount;
- (void)addColorMonochromeFilterWithAmount:(float)amount color:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space bias:(float)bias flags:(unsigned int)flags;
- (void)addColorMonochromeFilterWithAmount:(float)amount color:(struct { float x0; float x1; float x2; float x3; })color bias:(float)bias;
- (void)addLuminanceCurveFilterWithCurve:(float x[4])curve color:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space flags:(unsigned int)flags;
- (void)addRGBACurvesFilterWithCurves:(float x[16])curves flags:(unsigned int)flags;
- (void)addFilterWithShader:(id)shader border:(struct CGSize { double x0; double x1; })border bounds:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)bounds flags:(unsigned int)flags;
- (id)encodedDataForDelegate:(id)delegate error:(id *)error;
- (void)beginRecordingXML;
@end

#endif /* RBDisplayList_h */
