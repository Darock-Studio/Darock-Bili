//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 5.1.16.0.0
//
#ifndef RBLayer_h
#define RBLayer_h
@import Foundation;

#include "CALayer.h"
#include "RBDevice.h"
#include "RBDrawableStatistics-Protocol.h"
#include "_RBDrawableDelegate-Protocol.h"
#include "_RBSharedSurfaceOwner-Protocol.h"

@class NSDictionary, NSString;
@protocol {SharedSubsurface="_surface"^{SharedSurface}"_origin""_size""_timestamp"{SharedSurfaceTimestamp="_context"{objc_ptr<CAContext *>="_p"@"CAContext"}"_deadline"d"_seed"I}"_serial"I"_has_border"B}, {atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}}, {objc_ptr<RBDevice *>="_p"@"RBDevice"}, {objc_ptr<RBImageQueueLayer *>="_p"@"RBImageQueueLayer"}, {objc_ptr<RBSurfaceContentsLayer *>="_p"@"RBSurfaceContentsLayer"}, {objc_ptr<void (^)(id<RBDrawableStatistics>)>="_p"@?}, {refcounted_ptr<RB::Drawable>="_p"^{Drawable}}, {refcounted_ptr<RB::SharedSurfaceClient>="_p"^{SharedSurfaceClient}};

@interface RBLayer : CALayer<_RBDrawableDelegate, _RBSharedSurfaceOwner, RBDrawableStatistics> {
  /* instance variables */
  struct spin_lock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock; } _lock;
  struct refcounted_ptr<RB::Drawable> { struct Drawable *_p; } _drawable;
  struct objc_ptr<RBImageQueueLayer *> { RBImageQueueLayer *_p; } _queueLayer;
  struct objc_ptr<RBSurfaceContentsLayer *> { RBSurfaceContentsLayer *_p; } _contentsLayer;
  void * _pending_async_surface;
  struct SharedSubsurface { struct SharedSurface *_surface; " _origin; _ x0; short x1; int x2; size_t x3; e x4; _ x5; int128 x6; int x7; m x8; e x9; short x10; int128 x11; a x12; m x13; p x14; _ {SharedSurfaceTimestamp=; char x15; out in int128 x16; e x17; x x18; int128 x19; _ {objc_ptr<CAContext *>=; p x20; unsigned char @; atomic  x21; unsigned char x22; out in int128 x23; e x24; x x25; int128 x26; _ }; double x27; e x28; a x29; double x30; long x31; int x32; in e x33; _ d; short x34; e x35; e x36; double x37; _ I}; short x38; e x39; const int x40; a x41; long x42; _ I; h x43; a x44; short x45; _ x46; unsigned int x47 :0; out const double x48; e x49; const " x50; BOOL x51; } _subsurface;
  struct refcounted_ptr<RB::SharedSurfaceClient> { struct SharedSurfaceClient *_p; } _surface_client;
  unsigned long long _statistics_mask;
  double _statistics_alpha;
  struct objc_ptr<void (^)(id<RBDrawableStatistics>)> { id /* block */ _p; } _statistics_handler;
  struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } _deallocating;
  BOOL _visible;
  BOOL _needs_display_on_visible;
  BOOL _pending_visible_callback;
  BOOL _failed_to_render;
}

@property (retain, nonatomic) RBDevice *device;
@property (nonatomic) BOOL rendersAsynchronously;
@property (nonatomic) int colorMode;
@property (nonatomic) BOOL promotesFramebuffer;
@property (nonatomic) unsigned long long pixelFormat;
@property (nonatomic) BOOL clearsBackground;
@property (nonatomic) struct { float x0; float x1; float x2; float x3; } clearColor;
@property (nonatomic) long long maxDrawableCount;
@property (nonatomic) BOOL allowsPackedDrawable;
@property (readonly, nonatomic) BOOL drawableAvailable;
@property (nonatomic) BOOL needsSynchronousUpdate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSDictionary *statistics;
@property (copy, nonatomic) id /* block */ statisticsHandler;

/* class methods */
+ (id)defaultValueForKey:(id)key;

/* instance methods */
- (id)init;
- (id)initWithCoder:(id)coder;
- (id)initWithLayer:(id)layer;
- (void)dealloc;
- (id)actionForKey:(id)key;
- (BOOL)isDrawableAvailable;
- (void)layoutSublayers;
- (void)display;
- (BOOL)displayWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds callback:(id /* block */)callback;
- (BOOL)_willMoveSubsurface:(unsigned int)subsurface;
- (void)_moveSubsurface:(void *)subsurface;
- (void)drawInDisplayList:(id)list;
- (void)waitUntilAsyncRenderingCompleted;
- (void)setContents:(id)contents;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)layerDidBecomeVisible:(BOOL)visible;
- (void)resetStatistics:(unsigned long long)statistics alpha:(double)alpha;
- (void)_RBDrawableStatisticsDidChange;
- (void)copyImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect options:(id)options completionQueue:(id)queue handler:(id /* block */)handler;
- (void)_renderForegroundInContext:(struct CGContext *)context;
@end

#endif /* RBLayer_h */
