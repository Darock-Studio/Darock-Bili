//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 5.1.16.0.0
//
#ifndef RBFill_h
#define RBFill_h
@import Foundation;

@protocol {InlineHeap<64UL>="_page_size"Q"_pages"^{Page}"_sbrk"*"_sbrk_end"*"_objects"^{ObjectTable}"_buffer"[64C]};

@interface RBFill : NSObject {
  /* instance variables */
  struct RBFillData { int type; unsigned char x[208] data; } _data;
  struct InlineHeap<64UL> { unsigned long long _page_size; struct Page *_pages; char *_sbrk; char *_sbrk_end; struct ObjectTable *_objects; unsigned char x[64] _buffer; } _heap;
}

/* instance methods */
- (void)concat:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })concat;
- (void)setColor:(struct { float x0; float x1; float x2; float x3; })color;
- (void)setColor:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space;
- (void)setAxialGradientStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors locations:(const double *)locations flags:(unsigned int)flags;
- (void)setAxialGradientStartPoint:(struct CGPoint { double x0; double x1; })point endPoint:(struct CGPoint { double x0; double x1; })point stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors colorSpace:(int)space locations:(const double *)locations flags:(unsigned int)flags;
- (void)setRadialGradientCenter:(struct CGPoint { double x0; double x1; })center startRadius:(double)radius endRadius:(double)radius stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors locations:(const double *)locations flags:(unsigned int)flags;
- (void)setRadialGradientCenter:(struct CGPoint { double x0; double x1; })center startRadius:(double)radius endRadius:(double)radius stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors colorSpace:(int)space locations:(const double *)locations flags:(unsigned int)flags;
- (void)setRadialGradientStartCenter:(struct CGPoint { double x0; double x1; })center startRadius:(double)radius endCenter:(struct CGPoint { double x0; double x1; })center endRadius:(double)radius stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors locations:(const double *)locations flags:(unsigned int)flags;
- (void)setRadialGradientStartCenter:(struct CGPoint { double x0; double x1; })center startRadius:(double)radius endCenter:(struct CGPoint { double x0; double x1; })center endRadius:(double)radius stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors colorSpace:(int)space locations:(const double *)locations flags:(unsigned int)flags;
- (void)setConicGradientCenter:(struct CGPoint { double x0; double x1; })center angle:(double)angle stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors locations:(const double *)locations flags:(unsigned int)flags;
- (void)setConicGradientCenter:(struct CGPoint { double x0; double x1; })center angle:(double)angle stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors colorSpace:(int)space locations:(const double *)locations flags:(unsigned int)flags;
- (void)setAngularGradientCenter:(struct CGPoint { double x0; double x1; })center startAngle:(double)angle endAngle:(double)angle stopCount:(long long)count colors:(const struct { float x0; float x1; float x2; float x3; } *)colors colorSpace:(int)space locations:(const double *)locations flags:(unsigned int)flags;
- (void)setRBImage:(struct { int x0; void * x1; })rbimage transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space flags:(unsigned int)flags;
- (void)setRBImage:(struct { int x0; void * x1; })rbimage transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color flags:(unsigned int)flags;
- (void)setImage:(struct CGImage *)image transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color flags:(unsigned int)flags;
- (void)setTiledRBImage:(struct { int x0; void * x1; })rbimage transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform sourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space flags:(unsigned int)flags;
- (void)setTiledRBImage:(struct { int x0; void * x1; })rbimage transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform sourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color flags:(unsigned int)flags;
- (void)setTiledImage:(struct CGImage *)image transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform sourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color flags:(unsigned int)flags;
- (void)set9PartRBImage:(struct { int x0; void * x1; })rbimage transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect capInsets:(struct { double x0; double x1; double x2; double x3; })insets repeat:(BOOL)repeat interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color colorSpace:(int)space flags:(unsigned int)flags;
- (void)set9PartRBImage:(struct { int x0; void * x1; })rbimage transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect capInsets:(struct { double x0; double x1; double x2; double x3; })insets repeat:(BOOL)repeat interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color flags:(unsigned int)flags;
- (void)set9PartImage:(struct CGImage *)image transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect capInsets:(struct { double x0; double x1; double x2; double x3; })insets repeat:(BOOL)repeat interpolation:(int)interpolation tintColor:(struct { float x0; float x1; float x2; float x3; })color flags:(unsigned int)flags;
- (void)setShader:(id)shader bounds:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)bounds flags:(unsigned int)flags;
- (void)invalidateContents;
@end

#endif /* RBFill_h */
