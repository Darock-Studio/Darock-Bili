//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSVTUIAudioRecorder_h
#define CSVTUIAudioRecorder_h
@import Foundation;

#include "AVVoiceControllerRecordDelegate-Protocol.h"
#include "CSAudioSessionEventProviding-Protocol.h"
#include "CSVTUIAudioRecorderRemoteDeviceContext.h"
#include "CSVTUIRemoteRecordClient.h"

@class AVVoiceController, NSDictionary, NSHashTable, NSString;
@protocol OS_dispatch_queue;

@interface CSVTUIAudioRecorder : NSObject<AVVoiceControllerRecordDelegate, CSAudioSessionEventProviding> {
  /* instance variables */
  AVVoiceController *_voiceController;
  struct AudioBufferList { unsigned int mNumberBuffers; struct AudioBuffer { unsigned int mNumberChannels; unsigned int mDataByteSize; void *mData; } x[1] mBuffers; } _interleavedABL;
  struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x10; unsigned int x1; void * x2; } x[1] } * _pNonInterleavedABL;
  CSVTUIRemoteRecordClient *_remoteRecordClient;
  NSDictionary *_latestContext;
  BOOL _waitingForDidStart;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *voiceControllerCreationQueue;
@property (retain, nonatomic) NSHashTable *observers;
@property (retain, nonatomic) CSVTUIAudioRecorderRemoteDeviceContext *remoteDeviceContext;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (unsigned long long)_convertDeactivateOption:(unsigned long long)option;

/* instance methods */
- (id)initWithQueue:(id)queue error:(id *)error;
- (void)registerObserver:(id)observer;
- (void)unregisterObserver:(id)observer;
- (void)dealloc;
- (void)_destroyVoiceController;
- (id)_voiceControllerWithError:(id *)error;
- (unsigned long long)setContext:(id)context error:(id *)error;
- (void)updateAudioRecorderForTrainingDevice:(unsigned long long)device deviceUUIDs:(id)uuids;
- (BOOL)prepareAudioStreamRecordWithStreamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)startAudioStreamWithStreamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)stopAudioStreamWithStreamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)isRecordingWithStreamHandleId:(unsigned long long)id;
- (id)recordRouteWithStreamHandleId:(unsigned long long)id;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)reason streamHandleId:(unsigned long long)id error:(id *)error;
- (BOOL)deactivateAudioSession:(unsigned long long)session error:(id *)error;
- (id)getPlaybackRouteForStreamID:(unsigned long long)id;
- (BOOL)_shouldUseRemoteBuiltInMic:(id)mic;
- (void)_processAudioChain:(id)chain audioStreamHandleId:(unsigned long long)id remoteVAD:(id)vad atTime:(unsigned long long)time arrivalTimestampToAudioRecorder:(unsigned long long)recorder numberOfChannels:(int)channels;
- (void)_processAudioBuffer:(id)buffer audioStreamHandleId:(unsigned long long)id arrivalTimestampToAudioRecorder:(unsigned long long)recorder;
- (id)_compensateChannelDataIfNeeded:(id)needed receivedNumChannels:(unsigned int)channels;
- (void)_audioRecorderDidStartRecordingSuccessfully:(BOOL)successfully streamHandleID:(unsigned long long)id error:(id)error;
- (void)_audioRecorderDidStopRecordingForReason:(long long)reason streamHandleID:(unsigned long long)id;
- (void)voiceControllerDidStartRecording:(id)recording forStream:(unsigned long long)stream successfully:(BOOL)successfully error:(id)error;
- (void)voiceControllerAudioCallback:(id)callback forStream:(unsigned long long)stream buffer:(id)buffer;
- (void)voiceControllerDidStopRecording:(id)recording forStream:(unsigned long long)stream forReason:(long long)reason;
- (void)voiceControllerRecordHardwareConfigurationDidChange:(id)change toConfiguration:(int)configuration;
- (void)voiceControllerBeginRecordInterruption:(id)interruption;
- (void)voiceControllerBeginRecordInterruption:(id)interruption withContext:(id)context;
- (void)voiceControllerEndRecordInterruption:(id)interruption;
- (void)voiceControllerWillSetAudioSessionActive:(id)active willActivate:(BOOL)activate;
- (void)voiceControllerDidSetAudioSessionActive:(id)active isActivated:(BOOL)activated;
- (id)_getRecordSettingsWithRequest;
@end

#endif /* CSVTUIAudioRecorder_h */
