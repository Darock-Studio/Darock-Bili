//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 583.1.13.0.0
//
#ifndef TTSSpeechServerInstance_h
#define TTSSpeechServerInstance_h
@import Foundation;

#include "ServerSpeechContext.h"
#include "TTSSpeechServer.h"
#include "TTSTimer.h"
#include "TTSVocalizer.h"

@class NSLock, NSMutableArray, TTSVoiceResourceAsset;
@protocol OS_dispatch_queue;

@interface TTSSpeechServerInstance : NSObject

@property (retain, nonatomic) TTSTimer *wordCallbackTimer;
@property (nonatomic) unsigned long long synthesizerId;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *mobileAssetWorkQueue;
@property (retain, nonatomic) NSLock *speechLock;
@property (retain, nonatomic) NSMutableArray *speechRequestQueue;
@property (nonatomic) BOOL speechActive;
@property (nonatomic) unsigned char speechThreadActive;
@property (nonatomic) struct __CFRunLoop * speechThreadRunLoop;
@property (nonatomic) struct __CFRunLoopSource * speechActivitySignal;
@property (retain, nonatomic) ServerSpeechContext *speechActiveContext;
@property (nonatomic) BOOL newVoiceInstalled;
@property (nonatomic) BOOL speechThreadPriorityIsHigh;
@property (nonatomic) BOOL shouldTerminateThread;
@property (nonatomic) BOOL didTerminateThread;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *speechTerminationQueue;
@property (nonatomic) TTSSpeechServer *speechService;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *serviceQueue;
@property (retain, nonatomic) TTSVocalizer *vocalizer;
@property (copy, nonatomic) id /* block */ unitTestMarkerProcessingCallback;
@property (retain) TTSVoiceResourceAsset *queuedSiriVoiceResourceToLoad;

/* instance methods */
- (id)init;
- (void)terminateSpeechThread;
- (void)dealloc;
- (void)startSpeechRequest:(id)request;
- (void)_appendSpeechRequestAndStart:(id)start;
- (void)_startSpeechThread;
- (void)_processCurrentRequest:(id)request;
- (unsigned char)_setActiveRequestActionForMark:(long long)mark clientRequest:(id)request markType:(long long)type;
- (void)pauseSpeechRequest:(id)request atMark:(long long)mark;
- (void)continueSpeechRequest:(id)request;
- (void)stopSpeechRequest:(id)request atMark:(long long)mark;
- (void)_speechThreadSignal;
- (void)getSpeechIsActiveForRequest:(id)request reply:(id /* block */)reply;
- (unsigned char)_activeRequestShouldContinue:(id)continue;
- (unsigned char)_activeRequestShouldStopAtAnyMark:(id)mark;
- (unsigned char)_activeRequestShouldStopImmediately:(id)immediately;
- (unsigned char)_activeRequestShouldPauseImmediately:(id)immediately;
- (void)_terminateThread;
- (void)_handleSpeechThread;
- (unsigned char)_needsParameterChange:(id)change lock:(unsigned char)lock rate:(float *)rate pitch:(float *)pitch volume:(float *)volume footprint:(long long *)footprint voiceType:(long long *)type;
- (unsigned char)_shouldContinueSpeechGivenMark:(id)mark markType:(long long)type blockIfPaused:(unsigned char)paused;
- (double)_computeMarkerDelayForByteOffset:(unsigned int)offset andContext:(id)context;
- (void)processGenericMarkerWithByteOffset:(unsigned int)offset name:(id)name context:(id)context;
- (void)processPhonemeMarkerWithByteOffset:(unsigned int)offset phoneme:(id)phoneme alphabet:(long long)alphabet context:(id)context;
- (void)processWordMarkerWithByteOffset:(unsigned int)offset markerPosition:(unsigned int)position markerLength:(unsigned int)length context:(id)context secondPass:(BOOL)pass;
- (void)_newVoiceInstalled;
- (id)_ttSSpeechServerCopyVoiceInfoForLanguage:(id)language voiceType:(long long)type queryingMobileAssets:(BOOL)assets;
- (BOOL)_footprintOrVoiceNameHasChanged:(id)changed;
- (BOOL)_voiceTypeHasChanged:(id)changed;
- (BOOL)_languageCodeHasChanged:(id)changed oldLanguage:(id)language;
- (void)_initializeSpeechEngine:(id)engine;
- (void)_initializeSpeech:(id)speech;
- (void)_setParameters:(id)parameters rate:(float)rate pitch:(float)pitch volume:(float)volume footprint:(long long)footprint;
- (void)_loadVoiceResource:(id)resource voiceResource:(id)resource;
- (void)_uninitializeSpeech:(id)speech;
- (BOOL)_defaultVoiceIsFallback;
- (struct __CFArray *)loadedVoiceResources;
- (id)_speechVocalizerPlaybackDataProviderWithVocalizer:(id)vocalizer playback:(struct __TTSPlayback *)playback inContext:(void *)context;
@end

#endif /* TTSSpeechServerInstance_h */
