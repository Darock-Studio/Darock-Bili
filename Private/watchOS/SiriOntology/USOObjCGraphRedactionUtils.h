//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.8.1.0.0
//
#ifndef USOObjCGraphRedactionUtils_h
#define USOObjCGraphRedactionUtils_h
@import Foundation;

@interface USOObjCGraphRedactionUtils : NSObject
/* class methods */
+ (id)firstPartyAppBundleIds;
+ (id)contactEntities;
+ (id)commonAppBundleIds;
+ (id)allowedHomeKitEntityTypes;
+ (id)catiNamespacesForIdentifierValues;
+ (id)getRedactedGraph:(void *)graph;
+ (id)obfuscateAppBundleId:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; })id;
+ (struct unique_ptr<siri::ontology::UsoIdentifier, std::default_delete<siri::ontology::UsoIdentifier>> { struct __compressed_pair<siri::ontology::UsoIdentifier *, std::default_delete<siri::ontology::UsoIdentifier>> { struct UsoIdentifier * x0; } x0; })getRedactionIdentifier;
+ (struct unique_ptr<siri::ontology::UsoIdentifier, std::default_delete<siri::ontology::UsoIdentifier>> { struct __compressed_pair<siri::ontology::UsoIdentifier *, std::default_delete<siri::ontology::UsoIdentifier>> { struct UsoIdentifier * x0; } x0; })getRedactedIdentifier:(struct UsoIdentifier { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x1; struct optional<std::string> { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x1; } x0; BOOL x1; } x2; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x3; struct optional<siri::ontology::UsoIdentifier::NluComponent> { union { char x0; int x1; } x0; BOOL x1; } x4; struct optional<unsigned int> { union { char x0; unsigned int x1; } x0; BOOL x1; } x5; struct optional<unsigned int> { union { char x0; unsigned int x1; } x0; BOOL x1; } x6; })identifier isContactRelatedEntityNode:(BOOL)node;
+ (struct unique_ptr<siri::ontology::UsoEntitySpan, std::default_delete<siri::ontology::UsoEntitySpan>> { struct __compressed_pair<siri::ontology::UsoEntitySpan *, std::default_delete<siri::ontology::UsoEntitySpan>> { struct UsoEntitySpan * x0; } x0; })getRedactionEntitySpan;
+ (struct unique_ptr<siri::ontology::UsoEntitySpan, std::default_delete<siri::ontology::UsoEntitySpan>> { struct __compressed_pair<siri::ontology::UsoEntitySpan *, std::default_delete<siri::ontology::UsoEntitySpan>> { struct UsoEntitySpan * x0; } x0; })getRedactedEntitySpan:(struct UsoEntitySpan { struct optional<std::string> { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x1; } x0; BOOL x1; } x0; struct optional<siri::ontology::UsoEntitySpan::SpanSource> { union { char x0; int x1; } x0; BOOL x1; } x1; struct optional<std::string> { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x1; } x0; BOOL x1; } x2; struct optional<std::unique_ptr<siri::ontology::MatchInfo>> { union { char x0; struct unique_ptr<siri::ontology::MatchInfo, std::default_delete<siri::ontology::MatchInfo>> { struct __compressed_pair<siri::ontology::MatchInfo *, std::default_delete<siri::ontology::MatchInfo>> { struct MatchInfo * x0; } x0; } x1; } x0; BOOL x1; } x3; struct vector<std::unique_ptr<siri::ontology::SpanProperty>, std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>> { void * x0; void * x1; struct __compressed_pair<std::unique_ptr<siri::ontology::SpanProperty> *, std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>> { void * x0; } x2; } x4; struct optional<unsigned int> { union { char x0; unsigned int x1; } x0; BOOL x1; } x5; struct optional<unsigned int> { union { char x0; unsigned int x1; } x0; BOOL x1; } x6; struct vector<std::unique_ptr<siri::ontology::AsrAlternative>, std::allocator<std::unique_ptr<siri::ontology::AsrAlternative>>> { void * x0; void * x1; struct __compressed_pair<std::unique_ptr<siri::ontology::AsrAlternative> *, std::allocator<std::unique_ptr<siri::ontology::AsrAlternative>>> { void * x0; } x2; } x7; struct optional<std::string> { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x1; } x0; BOOL x1; } x8; })span isContactRelatedEntityNode:(BOOL)node;
+ (BOOL)isContactRelatedEntityNode:(struct UsoGraphNode { undefined * * x0; struct UsoGraph * x1; unsigned long long x2; } *)node;
+ (BOOL)isContactIDNamespace:(const void *)idnamespace;
+ (BOOL)isContactIDNamespaceString:(const void *)string;
+ (BOOL)isHomeKitEntityTypeIdentifier:(const void *)identifier;
+ (BOOL)isHomeKitEntityTypeEntitySpan:(const void *)span key:(const void *)key value:(const void *)value;
+ (BOOL)shouldRetainIdentifierValue:(const void *)value isContactRelatedEntityNode:(BOOL)node;
+ (BOOL)shouldRetainEntitySpanValue:(const void *)value key:(const void *)key entitySpan:(const void *)span isContactRelatedEntityNode:(BOOL)node;
+ (BOOL)isAllowedCatiIdentifier:(const void *)identifier;
+ (BOOL)isAllowedCatiEntitySpan:(const void *)span key:(const void *)key;
+ (void)redactedGraphHelperWithRedactedGraph:(void *)graph redactedList:(id)list visitedNodes:(id)nodes fromNode:(struct UsoGraphNode { undefined * * x0; struct UsoGraph * x1; unsigned long long x2; } *)node successors:(struct vector<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> { void * x0; void * x1; struct __compressed_pair<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>> *, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> { void * x0; } x2; })successors vocabManager:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager * x0; struct __shared_weak_count * x1; })manager;
@end

#endif /* USOObjCGraphRedactionUtils_h */
