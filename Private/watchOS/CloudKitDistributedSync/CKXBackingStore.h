//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKXBackingStore_h
#define CKXBackingStore_h
@import Foundation;

#include "CKDSReadableStorage.h"
#include "CKDSStorage.h"
#include "CKDSWritableStorage.h"
#include "CKXBinding-Protocol.h"
#include "CKXProxyCache.h"
#include "CKXReaderProtocol-Protocol.h"
#include "CKXReaderWriterProtocol-Protocol.h"
#include "CKXVersionedReaderWriterStore.h"
#include "CKXWriterProtocol-Protocol.h"

@protocol CKXProxyBase<CKXReadStructProxy, CKXProxyBase<CKXWriteStructProxy;

@interface CKXBackingStore : NSObject<CKXReaderProtocol, CKXWriterProtocol, CKXReaderWriterProtocol>

@property (retain, nonatomic) CKDSStorage *storage;
@property (retain, nonatomic) CKXVersionedReaderWriterStore *readerWriterStore;
@property (retain, nonatomic) CKXProxyCache *proxyCache;
@property (nonatomic) unsigned long long cacheScope;
@property (retain, nonatomic) CKXProxyBase<CKXReadStructProxy> *topLevelReadProxy;
@property (readonly, nonatomic) CKXProxyBase<CKXWriteStructProxy> *topLevelWriteProxy;
@property (nonatomic) struct { unsigned char x0; struct { unsigned char x0; unsigned char x1; } x1; } header;
@property (readonly, nonatomic) NSObject<CKXBinding> *binding;
@property (readonly, nonatomic) CKDSReadableStorage *readableStorage;
@property (readonly, nonatomic) CKDSWritableStorage *writableStorage;
@property (readonly, nonatomic) unsigned char formatVersion;
@property (readonly, nonatomic) BOOL isWriting;

/* class methods */
+ (unsigned long long)headerSizeForFormatVersion:(unsigned char)version;
+ (BOOL)header:(struct { unsigned char x0; struct { unsigned char x0; unsigned char x1; } x1; } *)header forStorage:(id)storage error:(id *)error;
+ (struct { unsigned char x0; struct { unsigned char x0; unsigned char x1; } x1; })headerForData:(id)data;
+ (id)createHeaderDataForFormatVersion:(unsigned char)version;
+ (BOOL)prefixStorage:(id)storage withHeaderForVersion:(unsigned char)version error:(id *)error;

/* instance methods */
- (id)initWithStorage:(id)storage binding:(id)binding error:(id *)error;
- (id)initWriterWithStorage:(id)storage binding:(id)binding formatVersion:(unsigned char)version;
- (id)initWithStorage:(id)storage binding:(id)binding optionsByReaderWriterClass:(id)class formatVersion:(unsigned char)version error:(id *)error;
- (BOOL)_validateVersion:(unsigned char)version isReader:(BOOL)reader error:(id *)error;
- (BOOL)_setupBackingStoreForReadingWithError:(id *)error;
- (BOOL)_setupBackingStoreForWritingWithError:(id *)error;
- (struct { unsigned char x0; unsigned char x1; })writerIdentity;
- (id)reader;
- (id)writer;
- (void)readUsingBlock:(id /* block */)block;
- (void)writeUsingBlock:(id /* block */)block;
- (BOOL)finishWritingWithError:(id *)error;
- (id)structProxyForStructReference:(unsigned long long)reference inStructInstance:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })instance mutable:(BOOL)mutable;
- (id)structListProxyForListReference:(unsigned long long)reference inStructInstance:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })instance mutable:(BOOL)mutable;
- (id)appendedStructProxyForListInstance:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })instance;
- (id)structProxyForListInstance:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })instance atIndex:(long long)index;
- (id)_proxyWithStructInstance:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })instance mutable:(BOOL)mutable cacheScope:(long long)scope;
- (id)_proxyWithListInstance:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })instance mutable:(BOOL)mutable cacheScope:(long long)scope;
- (void)proxyScope:(id /* block */)scope;
- (id)readerForProxy:(id)proxy;
- (id)writerForProxy:(id)proxy;
- (id)schema;
- (unsigned long long)valueSizeForField:(unsigned long long)field;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })rootStructWithType:(unsigned long long)type;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })referencedStructForReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })referencedListForReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (BOOL)referenceIsNull:(unsigned long long)null inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (long long)lengthForList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })referencedStructAtIndex:(long long)index inList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (void)copyData:(void *)data forField:(unsigned long long)field inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (void)copyData:(void *)data forList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })beginRootStructWithType:(unsigned long long)type error:(id *)error;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })beginReferencedStructForReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })beginReferencedListForReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })beginAppendedListStructInList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (void)setData:(void *)data withEncoding:(const char *)encoding forField:(unsigned long long)field inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (void)setData:(void *)data withLength:(unsigned long long)length forList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (void)assignStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct toReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (void)commitStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (BOOL)flushWithError:(id *)error;
- (BOOL)setReadableStorage:(id)storage error:(id *)error;
- (BOOL)setWritableStorage:(id)storage error:(id *)error;
@end

#endif /* CKXBackingStore_h */
