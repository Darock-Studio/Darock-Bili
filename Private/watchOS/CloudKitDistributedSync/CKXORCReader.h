//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKXORCReader_h
#define CKXORCReader_h
@import Foundation;

#include "CKXReaderBase.h"
#include "CKDSReadableStorage.h"
#include "CKXORCHelpers-Protocol.h"
#include "CKXORCReaderOptions.h"
#include "CKXReaderProtocol-Protocol.h"

@protocol {unique_ptr<orc::Reader, std::default_delete<orc::Reader>>="__ptr_"{__compressed_pair<orc::Reader *, std::default_delete<orc::Reader>>="__value_"^{Reader}}}, {vector<NSIndexSet *, std::allocator<NSIndexSet *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<NSIndexSet *__strong *, std::allocator<NSIndexSet *>>="__value_"^@}}, {vector<std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>, std::allocator<std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>> *, std::allocator<std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>>="__value_"^v}};

@interface CKXORCReader : CKXReaderBase<CKXReaderProtocol> {
  /* instance variables */
  struct unique_ptr<orc::Reader, std::default_delete<orc::Reader>> { struct __compressed_pair<orc::Reader *, std::default_delete<orc::Reader>> { struct Reader *__value_; } __ptr_; } _reader;
  struct vector<std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>, std::allocator<std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>> *, std::allocator<std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>> { void *__value_; } __end_cap_; } _structToReaderBatchPair;
  struct vector<NSIndexSet *, std::allocator<NSIndexSet *>> { __end_ * *__begin_; __end_cap_ * * x0; struct __compressed_pair<NSIndexSet *__strong *, std::allocator<NSIndexSet *>> { id *__value_; } x1; } _rowsForTopLevelContainerStructs;
}

@property (retain, nonatomic) CKDSReadableStorage *storage;
@property (readonly, nonatomic) NSObject<CKXORCHelpers> *helpers;
@property (readonly, nonatomic) CKXORCReaderOptions *options;
@property (nonatomic) unsigned long long loadCount;

/* instance methods */
- (id)initWithSchema:(id)schema;
- (id)initWithSchema:(id)schema helpers:(id)helpers options:(id)options;
- (BOOL)createReaderIfNecessaryWithError:(id *)error;
- (void)createRowReaderForStruct:(unsigned long long)struct;
- (BOOL)loadBatchWithRow:(unsigned long long)row forStruct:(unsigned long long)struct;
- (unsigned long long)offsetInCurrentBatchForRow:(unsigned long long)row forStruct:(unsigned long long)struct;
- (id)rowsForStructColumn:(unsigned long long)column;
- (void *)rootColumnForStruct:(unsigned long long)struct;
- (BOOL)setReadableStorage:(id)storage error:(id *)error;
- (BOOL)_setInputWithError:(id *)error;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })rootStructWithType:(unsigned long long)type;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })referencedStructForReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (BOOL)referenceIsNull:(unsigned long long)null inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })referencedListForReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (long long)lengthForList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })referencedStructAtIndex:(long long)index inList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (unsigned long long)valueSizeForField:(unsigned long long)field;
- (void)copyData:(void *)data forField:(unsigned long long)field inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (void)copyData:(void *)data forList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (void *)structColumnForStruct:(unsigned long long)struct;
- (void *)structReferenceColumnForReference:(unsigned long long)reference;
- (void *)listColumnForReference:(unsigned long long)reference;
- (void *)valueColumnForField:(unsigned long long)field;
@end

#endif /* CKXORCReader_h */
