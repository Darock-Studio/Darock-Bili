//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKXORCWriter_h
#define CKXORCWriter_h
@import Foundation;

#include "CKXWriterBase.h"
#include "CKDSWritableStorage.h"
#include "CKXORCHelpers-Protocol.h"
#include "CKXORCWriterOptions.h"
#include "CKXWriterProtocol-Protocol.h"

@class NSError;
@protocol {set<CKXStructInstance, std::less<CKXStructInstance>, std::allocator<CKXStructInstance>>="__tree_"{__tree<CKXStructInstance, std::less<CKXStructInstance>, std::allocator<CKXStructInstance>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<CKXStructInstance, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<CKXStructInstance>>="__value_"Q}}}, {unique_ptr<orc::ColumnVectorBatch, std::default_delete<orc::ColumnVectorBatch>>="__ptr_"{__compressed_pair<orc::ColumnVectorBatch *, std::default_delete<orc::ColumnVectorBatch>>="__value_"^{ColumnVectorBatch}}}, {unique_ptr<orc::OutputStream, std::default_delete<orc::OutputStream>>="__ptr_"{__compressed_pair<orc::OutputStream *, std::default_delete<orc::OutputStream>>="__value_"^{OutputStream}}}, {unique_ptr<orc::Writer, std::default_delete<orc::Writer>>="__ptr_"{__compressed_pair<orc::Writer *, std::default_delete<orc::Writer>>="__value_"^{Writer}}};

@interface CKXORCWriter : CKXWriterBase<CKXWriterProtocol> {
  /* instance variables */
  struct unique_ptr<orc::Writer, std::default_delete<orc::Writer>> { struct __compressed_pair<orc::Writer *, std::default_delete<orc::Writer>> { struct Writer *__value_; } __ptr_; } _writer;
  struct unique_ptr<orc::OutputStream, std::default_delete<orc::OutputStream>> { struct __compressed_pair<orc::OutputStream *, std::default_delete<orc::OutputStream>> { struct OutputStream *__value_; } __ptr_; } _outputStream;
  struct unique_ptr<orc::ColumnVectorBatch, std::default_delete<orc::ColumnVectorBatch>> { struct __compressed_pair<orc::ColumnVectorBatch *, std::default_delete<orc::ColumnVectorBatch>> { struct ColumnVectorBatch *__value_; } __ptr_; } _currentBatch;
  struct set<CKXStructInstance, std::less<CKXStructInstance>, std::allocator<CKXStructInstance>> { struct __tree<CKXStructInstance, std::less<CKXStructInstance>, std::allocator<CKXStructInstance>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<CKXStructInstance, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::less<CKXStructInstance>> { unsigned long long __value_; } __pair3_; } __tree_; } _uncommittedStructs;
}

@property (retain, nonatomic) CKDSWritableStorage *storage;
@property (readonly, nonatomic) NSObject<CKXORCHelpers> *helpers;
@property (readonly, nonatomic) CKXORCWriterOptions *options;
@property (nonatomic) unsigned long long rootStructToken;
@property (nonatomic) unsigned long long startingRowForCurrentBatch;
@property (nonatomic) unsigned long long commitCount;
@property (retain, nonatomic) NSError *writeError;

/* instance methods */
- (id)initWithSchema:(id)schema;
- (id)initWithSchema:(id)schema helpers:(id)helpers options:(id)options;
- (void)resetColumnNulls:(void *)nulls inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (BOOL)createWriterWithError:(id *)error;
- (void)updateNumberOfElementsForCurrentBatch;
- (BOOL)commitBatchWithError:(id *)error;
- (BOOL)commitBatchIfNeededWithError:(id *)error;
- (BOOL)growCurrentBatchToIncludeBatchOffset:(unsigned long long)offset;
- (BOOL)growCurrentBatchToIncludeRow:(unsigned long long)row;
- (unsigned long long)offsetInCurrentBatchForRow:(unsigned long long)row;
- (void)expandColumn:(void *)column includingBatchOffset:(unsigned long long)offset;
- (void)expandColumn:(void *)column includingRow:(unsigned long long)row;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })appendRowForStruct:(unsigned long long)struct;
- (void)enumerateAllColumnsWithBlock:(id /* block */)block;
- (void *)rootColumn;
- (BOOL)setWritableStorage:(id)storage error:(id *)error;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })beginRootStructWithType:(unsigned long long)type error:(id *)error;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })beginReferencedStructForReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })beginReferencedListForReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (void)_appendData:(void *)data withValueSize:(unsigned long long)size length:(unsigned long long)length toRow:(unsigned long long)row toList:(unsigned long long)list;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })beginAppendedListStructInList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (unsigned long long)valueSizeForField:(unsigned long long)field;
- (void)setData:(void *)data withEncoding:(const char *)encoding forField:(unsigned long long)field inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (void)setData:(void *)data withLength:(unsigned long long)length forList:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })list;
- (void)assignStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct toReference:(unsigned long long)reference inStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (void)commitStruct:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })struct;
- (BOOL)flushWithError:(id *)error;
- (void *)structColumnForStruct:(unsigned long long)struct;
- (void *)structReferenceColumnForReference:(unsigned long long)reference;
- (void *)listColumnForReference:(unsigned long long)reference;
- (void *)valueColumnForField:(unsigned long long)field;
@end

#endif /* CKXORCWriter_h */
