//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2021.300.9.2.0
//
#ifndef NACVolumeControllerLocal_h
#define NACVolumeControllerLocal_h
@import Foundation;

#include "MPAVRoutingControllerDelegate-Protocol.h"
#include "MPVolumeControllerDelegate-Protocol.h"
#include "MediaControlsVolumeController.h"
#include "MediaControlsVolumeControllerObserver-Protocol.h"
#include "NACEventThrottler.h"
#include "NACVolumeController-Protocol.h"
#include "NACVolumeControllerDelegate-Protocol.h"

@class MPAVRoute, MPAVRoutingController, MPVolumeController, NSCountedSet, NSOrderedSet, NSString;
@protocol OS_dispatch_queue;

@interface NACVolumeControllerLocal : NSObject<MPVolumeControllerDelegate, MPAVRoutingControllerDelegate, MediaControlsVolumeControllerObserver, NACVolumeController> {
  /* instance variables */
  long long _target;
  NSString *_audioCategory;
  MPAVRoute *_route;
  MPVolumeController *_volumeController;
  MPAVRoutingController *_routingController;
  NSCountedSet *_volumeSetHistory;
  NACEventThrottler *_volumeThrottler;
  NACEventThrottler *_hapticThrottler;
  BOOL _validCachedMutedValue;
  BOOL _shouldIgnoreHaptics;
  BOOL _monitoringHaptics;
  long long _cachedHapticState;
  NSObject<OS_dispatch_queue> *_serialQueue;
  MediaControlsVolumeController *_mediaControlsVolumeController;
  NSOrderedSet *_lastNotifiedAvailableListeningModes;
  NSString *_lastNotifiedCurrentListeningMode;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) NSObject<NACVolumeControllerDelegate> *delegate;
@property (readonly, nonatomic) BOOL volumeControlAvailable;
@property (readonly, nonatomic) BOOL volumeWarningEnabled;
@property (readonly, nonatomic) long long volumeWarningState;
@property (readonly, nonatomic) BOOL muted;
@property (readonly, nonatomic) float volumeValue;
@property (readonly, nonatomic) float EUVolumeLimit;
@property (nonatomic) BOOL systemMuted;
@property (nonatomic) long long hapticState;
@property (readonly, nonatomic) NSOrderedSet *availableListeningModes;
@property (retain, nonatomic) NSString *currentListeningMode;
@property (nonatomic) float hapticIntensity;
@property (nonatomic) BOOL prominentHapticEnabled;

/* instance methods */
- (id)init;
- (id)initWithAudioCategory:(id)category;
- (id)initWithRoute:(id)route;
- (id)initWithTarget:(long long)target category:(id)category;
- (id)_init;
- (void)beginObservingVolume;
- (void)endObservingVolume;
- (void)beginObservingHaptics;
- (void)endObservingHaptics;
- (void)beginObservingListeningModes;
- (void)endObservingListeningModes;
- (BOOL)isMuted;
- (BOOL)isVolumeControlAvailable;
- (BOOL)isVolumeWarningEnabled;
- (void)_setVolumeValue:(id)value;
- (void)setVolumeValue:(float)value muted:(BOOL)muted overrideEULimit:(BOOL)eulimit;
- (void)allowUserToExceedEUVolumeLimit;
- (id)_mediaControlsVolumeController;
- (void)_ignoreHapticObservation;
- (void)volumeController:(id)controller volumeControlAvailableDidChange:(BOOL)change;
- (void)volumeController:(id)controller volumeValueDidChange:(float)change;
- (void)volumeController:(id)controller mutedStateDidChange:(BOOL)change;
- (void)volumeController:(id)controller EUVolumeLimitDidChange:(float)change;
- (void)volumeController:(id)controller volumeWarningStateDidChange:(long long)change;
- (void)routingControllerAvailableRoutesDidChange:(id)change;
- (void)mediaControlsVolumeController:(id)controller didUpdateSplitRoute:(BOOL)route;
- (void)updateCachedHapticState;
- (void)beginObservingHapticState;
- (void)endObservingHapticState;
- (void)_setHapticIntensity:(id)intensity;
- (void)playPreview;
- (void)playDefaultHapticPreview;
- (void)playProminentHapticPreview;
- (BOOL)isProminentHapticEnabled;
- (void)_updateVolumeState;
- (void)_updateMutedStateFromVolumeController:(id)controller;
- (id)_volumeController;
- (BOOL)isSystemMuted;
@end

#endif /* NACVolumeControllerLocal_h */
