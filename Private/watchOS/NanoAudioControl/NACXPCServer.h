//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2021.300.9.2.0
//
#ifndef NACXPCServer_h
#define NACXPCServer_h
@import Foundation;

#include "NACIDSClient.h"
#include "NACIDSClientDelegate-Protocol.h"
#include "NACXPCInterface-Protocol.h"
#include "NSXPCListenerDelegate-Protocol.h"

@class NPSDomainAccessor, NSMutableDictionary, NSString, NSXPCListener;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface NACXPCServer : NSObject<NSXPCListenerDelegate, NACXPCInterface, NACIDSClientDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_internalQueue;
  NSObject<OS_dispatch_queue> *_audioAndHapticPreviewQueue;
  NPSDomainAccessor *_domainAccessor;
  NSMutableDictionary *_volumeRecords;
  NSMutableDictionary *_listeningModesRecords;
  NSMutableDictionary *_audioRoutesRecords;
  NSXPCListener *_xpcListener;
  NACIDSClient *_idsClient;
  float _hapticIntensity;
  BOOL _prominentHapticEnabled;
  long long _hapticState;
  BOOL _systemMutedState;
  NSObject<OS_dispatch_source> *_audioRouteDeferTimer;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)server;

/* instance methods */
- (id)init;
- (BOOL)listener:(id)listener shouldAcceptNewConnection:(id)connection;
- (void)beginObservingVolumeForTarget:(id)target;
- (void)_beginObservingVolumeForTarget:(id)target connection:(id)connection;
- (long long)_aggregatedCountOfObserversForTarget:(id)target inRecords:(id)records;
- (void)endObservingVolumeForTarget:(id)target;
- (void)_endObservingVolumeForTarget:(id)target connection:(id)connection;
- (void)volumeValueForTarget:(id)target result:(id /* block */)result;
- (void)volumeControlAvailabilityForTarget:(id)target result:(id /* block */)result;
- (void)mutedStateForTarget:(id)target result:(id /* block */)result;
- (void)EULimitForTarget:(id)target result:(id /* block */)result;
- (void)volumeWarningForTarget:(id)target result:(id /* block */)result;
- (void)setVolumeValue:(float)value forTarget:(id)target;
- (void)setMuted:(BOOL)muted forTarget:(id)target;
- (void)setSystemMuted:(BOOL)muted;
- (void)beginObservingListeningModesForTarget:(id)target;
- (void)endObservingListeningModesForTarget:(id)target;
- (void)_beginObservingListeningModesForTarget:(id)target connection:(id)connection;
- (void)_endObservingListeningModesForTarget:(id)target connection:(id)connection;
- (void)availableListeningModesForTarget:(id)target result:(id /* block */)result;
- (void)currentListeningModeForTarget:(id)target result:(id /* block */)result;
- (void)setCurrentListeningMode:(id)mode forTarget:(id)target;
- (void)hapticIntensity:(id /* block */)intensity;
- (void)prominentHapticEnabled:(id /* block */)enabled;
- (void)hapticState:(id /* block */)state;
- (void)systemMutedState:(id /* block */)state;
- (void)setHapticIntensity:(float)intensity;
- (void)setProminentHapticEnabled:(BOOL)enabled;
- (void)setHapticState:(long long)state;
- (void)playAudioAndHapticPreview;
- (void)playDefaultHapticPreview;
- (void)playProminentHapticPreview;
- (void)audioRoutesForCategory:(id)category result:(id /* block */)result;
- (void)beginObservingAudioRoutesForCategory:(id)category;
- (void)endObservingAudioRoutesForCategory:(id)category;
- (void)_endObservingAudioRoutesForCategory:(id)category connection:(id)connection;
- (void)pickAudioRouteWithIdentifier:(id)identifier category:(id)category;
- (void)client:(id)client volumeValue:(float)value didChangeForTarget:(id)target;
- (void)client:(id)client volumeControlAvailable:(BOOL)available didChangeForTarget:(id)target;
- (void)client:(id)client mutedState:(BOOL)state didChangeForTarget:(id)target;
- (void)client:(id)client hapticIntensityDidChange:(float)change;
- (void)client:(id)client prominentHapticStateDidChange:(BOOL)change;
- (void)client:(id)client hapticStateDidChange:(long long)change;
- (void)client:(id)client systemMutedStateDidChange:(BOOL)change;
- (void)client:(id)client EULimit:(float)eulimit didChangeForTarget:(id)target;
- (void)client:(id)client volumeWarningEnabled:(BOOL)enabled volumeWarningState:(long long)state didChangeForTarget:(id)target;
- (void)client:(id)client availableListeningModes:(id)modes didChangeForTarget:(id)target;
- (void)client:(id)client currentListeningMode:(id)mode didChangeForTarget:(id)target;
- (void)client:(id)client didFailToSetCurrentListeningModeForTarget:(id)target error:(id)error;
- (void)client:(id)client audioRoutes:(id)routes didChangeForCategory:(id)category;
- (void)_scheduleDeferredAudioRoutesUpdate:(id)update category:(id)category;
- (void)_updateAudioRoutes:(id)routes category:(id)category;
- (void)_cancelDeferredAudioRoutesUpdate;
- (void)client:(id)client volumeObservationCancelledForTarget:(id)target;
- (void)client:(id)client routeObservationCancelledForCategory:(id)category;
- (id)_cachedVolumeRecords;
- (void)_persistVolumeRecords;
- (float)_cachedHapticIntensity;
- (void)_persistHapticIntensity;
- (BOOL)_cachedSystemMutedState;
- (void)_persistSystemMutedState;
- (BOOL)_cachedProminentHapticState;
- (void)_persistProminentHapticState;
- (long long)_cachedHapticState;
- (void)_persistHapticState;
- (void)_cleanupConnection:(id)connection;
- (id)_volumeRecordForTarget:(id)target;
- (id)_listeningModesRecordForTarget:(id)target;
- (id)_audioRoutesRecordForCategory:(id)category;
- (id)_routeObservationCategoriesForConnection:(id)connection;
@end

#endif /* NACXPCServer_h */
