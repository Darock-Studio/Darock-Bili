//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2398.45.8.0.0
//
#ifndef CLKUIMetalQuadView_h
#define CLKUIMetalQuadView_h
@import Foundation;

#include "CLKUIQuadView.h"

@class CAMetalLayer, MTLRenderPassDescriptor, NSArray, UIImageView;
@protocol MTLCommandQueue, MTLComputePipelineState, MTLDepthStencilState, MTLTexture;

@interface CLKUIMetalQuadView : CLKUIQuadView {
  /* instance variables */
  NSObject<MTLCommandQueue> *_commandQueue;
  MTLRenderPassDescriptor *_renderPassDescriptor;
  struct CLKUIQuadSize { int width; int height; } _quadSize;
  CAMetalLayer *_metalLayer;
  NSArray *_quads;
  NSObject<MTLTexture> *_depthTexture;
  NSObject<MTLDepthStencilState> *_depthStencilState;
  unsigned int x :1 _isDepthBufferRequired;
  unsigned int x :1 _isPresentWithTransaction;
  unsigned int x :1 _isUseNativeScale;
  unsigned int x :1 _isRenderWithCommandBuffer;
  unsigned int x :1 _isDrawableSizeNeedsUpdate;
  unsigned int x :1 _isDrawableRead;
  unsigned int x :1 _isDrawableWrite;
  unsigned int x :1 _isDoubleBuffer;
  NSObject<MTLComputePipelineState> *_aplPipelineState;
  NSObject<MTLComputePipelineState> *_colorConversionPipelineState;
  NSObject<MTLComputePipelineState> *_dimmingPipelineState;
  unsigned long long _msaaCount;
  NSObject<MTLTexture> *_msaaTexture;
  NSObject<MTLTexture> *_textureForPrewarming;
  UIImageView *_snapshotView;
}

@property (readonly, nonatomic) unsigned long long colorPixelFormat;
@property (readonly, nonatomic) BOOL isSnapshotting;
@property (nonatomic) struct { double x0; double x1; double x2; double x3; } clearColor;
@property (nonatomic) float maxAPL;
@property (nonatomic) float aplFilterAmount;

/* class methods */
+ (id)allocateDepthTextureWithWidth:(unsigned long long)width height:(unsigned long long)height sampleCount:(unsigned long long)count;
+ (id)allocateMsaaTextureWithWidth:(unsigned long long)width height:(unsigned long long)height pixelFormat:(unsigned long long)format sampleCount:(unsigned long long)count;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame identifier:(id)identifier options:(unsigned long long)options colorSpace:(long long)space;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame identifier:(id)identifier options:(unsigned long long)options colorSpace:(long long)space asyncRenderQueue:(id)queue;
- (void)layoutSubviews;
- (void)setOpaque:(BOOL)opaque;
- (void)_handleQuadArrayChange:(id)change;
- (void)snapshotAndFreeze;
- (void)setSingleBufferMode:(BOOL)mode;
- (id)snapshotInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale time:(double)time;
- (id)snapshotTextureInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale time:(double)time;
- (id)_snapshotTextureInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect scale:(double)scale time:(double)time withAdditionalPasses:(id /* block */)passes;
- (BOOL)prewarmWithCompletion:(id /* block */)completion;
- (id)_textureToImage:(id)image scale:(double)scale;
- (void)_renderQuads:(id)quads toScreenWithCommandBuffer:(id)buffer passDescriptor:(id)descriptor;
- (BOOL)_displayAndCheckForDrawable:(BOOL)drawable renderDiscontinuity:(BOOL)discontinuity withCompletion:(id /* block */)completion;
- (void)_updateFramebufferOnly;
- (BOOL)_shouldApplyAPLFilter;
- (float)computeAPL;
- (float)computeAPLAndSnapshot:(id *)snapshot;
- (id)_getDimmingPipelineState;
- (unsigned long long)_msaaCount;
- (void)discardContents;
- (id)metalLayer;
- (id)_newRenderPassDescriptor;
- (struct CGSize { double x0; double x1; })drawableSize;
- (void)_updateDrawableSizeIfNecessary;
- (void)dealloc;
@end

#endif /* CLKUIMetalQuadView_h */
