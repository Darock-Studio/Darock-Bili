//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1270.60.4.0.0
//
#ifndef MIFileManager_h
#define MIFileManager_h
@import Foundation;

@class BOOL *;

@interface MIFileManager : NSObject
/* class methods */
+ (id)defaultManager;
+ (id)_sanitizeFilePathForVarOrTmpSymlink:(id)symlink error:(id *)error;

/* instance methods */
- (BOOL)removeItemAtURL:(id)url error:(id *)error;
- (BOOL)removeItemAtURL:(id)url keepParent:(BOOL)parent error:(id *)error;
- (BOOL)createDirectoryAtURL:(id)url withIntermediateDirectories:(BOOL)directories mode:(unsigned short)mode class:(int)class error:(id *)error;
- (BOOL)createDirectoryAtURL:(id)url withIntermediateDirectories:(BOOL)directories mode:(unsigned short)mode error:(id *)error;
- (BOOL)_copyItemAtURL:(id)url toURL:(id)url failIfSrcMissing:(BOOL)missing alwaysClone:(BOOL)clone ignoreErrors:(BOOL)errors error:(id *)error;
- (BOOL)_moveItemAtURL:(id)url toURL:(id)url failIfSrcMissing:(BOOL)missing error:(id *)error;
- (BOOL)copyItemAtURL:(id)url toURL:(id)url alwaysClone:(BOOL)clone error:(id *)error;
- (BOOL)copyItemIfExistsAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)moveItemIfExistsAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)copyItemAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)copyItemIgnoringErrorsAtURL:(id)url toURL:(id)url error:(id *)error;
- (BOOL)moveItemAtURL:(id)url toURL:(id)url error:(id *)error;
- (id)createTemporaryDirectoryInDirectoryURL:(id)url error:(id *)error;
- (BOOL)_removeACLAtPath:(const char *)path isDir:(BOOL)dir error:(id *)error;
- (BOOL)bulkSetPropertiesForPath:(const char *)path withOpenFD:(int)fd UID:(unsigned int)uid GID:(unsigned int)gid mode:(unsigned short)mode flags:(unsigned int)flags dataProtectionClass:(int)class removeACL:(BOOL)acl error:(id *)error;
- (BOOL)bulkSetPropertiesForPath:(const char *)path UID:(unsigned int)uid GID:(unsigned int)gid mode:(unsigned short)mode flags:(unsigned int)flags dataProtectionClass:(int)class removeACL:(BOOL)acl error:(id *)error;
- (BOOL)_bulkSetPropertiesForPath:(const char *)path existingFD:(int)fd UID:(unsigned int)uid GID:(unsigned int)gid mode:(unsigned short)mode flags:(unsigned int)flags dataProtectionClass:(int)class removeACL:(BOOL)acl error:(id *)error;
- (BOOL)stageURLByMoving:(id)moving toItemName:(id)name inStagingDir:(id)dir settingUID:(unsigned int)uid gid:(unsigned int)gid dataProtectionClass:(int)class breakHardlinks:(BOOL)hardlinks hasSymlink:(BOOL *)symlink error:(id *)error;
- (BOOL)_stageURLByCopying:(id)copying toItemName:(id)name inStagingDir:(id)dir stagingMode:(int)mode settingUID:(unsigned int)uid gid:(unsigned int)gid dataProtectionClass:(int)class hasSymlink:(BOOL *)symlink error:(id *)error;
- (BOOL)stageURL:(id)url toItemName:(id)name inStagingDir:(id)dir stagingMode:(int)mode settingUID:(unsigned int)uid gid:(unsigned int)gid hasSymlink:(BOOL *)symlink error:(id *)error;
- (BOOL)standardizeOwnershipAtURL:(id)url toUID:(unsigned int)uid GID:(unsigned int)gid removeACLs:(BOOL)acls setProtectionClass:(BOOL)class foundSymlink:(BOOL *)symlink error:(id *)error;
- (BOOL)validateSymlinksInURLDoNotEscapeURL:(id)url error:(id *)error;
- (id)enumerateURLsForItemsInDirectoryAtURL:(id)url ignoreSymlinks:(BOOL)symlinks withBlock:(id /* block */)block;
- (id)traverseDirectoryAtURL:(id)url withBlock:(id /* block */)block;
- (id)urlsForItemsInDirectoryAtURL:(id)url ignoringSymlinks:(BOOL)symlinks error:(id *)error;
- (BOOL)createSymbolicLinkAtURL:(id)url withDestinationURL:(id)url error:(id *)error;
- (id)destinationOfSymbolicLinkAtURL:(id)url error:(id *)error;
- (BOOL)itemExistsAtURL:(id)url error:(id *)error;
- (BOOL)itemExistsAtURL:(id)url;
- (BOOL)itemDoesNotExistAtURL:(id)url;
- (BOOL)itemDoesNotExistOrIsNotDirectoryAtURL:(id)url;
- (BOOL)_itemIsType:(unsigned short)type withDescription:(id)description atURL:(id)url error:(id *)error;
- (BOOL)itemIsFileAtURL:(id)url error:(id *)error;
- (BOOL)itemIsSymlinkAtURL:(id)url error:(id *)error;
- (BOOL)itemIsDirectoryAtURL:(id)url error:(id *)error;
- (BOOL)itemIsFIFOAtURL:(id)url error:(id *)error;
- (BOOL)itemIsSocketAtURL:(id)url error:(id *)error;
- (int)deviceForURLOrFirstAvailableParent:(id)parent error:(id *)error;
- (id)upToFirstFourBytesFromURL:(id)url error:(id *)error;
- (id)aclTextFromURL:(id)url error:(id *)error;
- (id)extendedAttributesFromURL:(id)url error:(id *)error;
- (BOOL)dataProtectionClassOfItemAtURL:(id)url class:(int *)class error:(id *)error;
- (BOOL)setDataProtectionClassOfItemAtURL:(id)url toClass:(int)class ifPredicate:(id /* block */)predicate error:(id *)error;
- (BOOL)setOwnerOfURL:(id)url toUID:(unsigned int)uid gid:(unsigned int)gid error:(id *)error;
- (BOOL)setPermissionsForURL:(id)url toMode:(unsigned short)mode error:(id *)error;
- (BOOL)captureStoreDataFromDirectory:(id)directory toDirectory:(id)directory doCopy:(BOOL)copy failureIsFatal:(BOOL)fatal withError:(id *)error;
- (id)_realPathWhatExistsInPath:(id)path isDirectory:(BOOL)directory;
- (id)realPathForURL:(id)url allowNonExistentPathComponents:(BOOL)components isDirectory:(BOOL)directory error:(id *)error;
- (id)_realPathForURL:(id)url allowNonExistentPathComponents:(BOOL)components;
- (BOOL)_validateSymlink:(id)symlink withStartingDepth:(unsigned int)depth andEndingDepth:(unsigned int *)depth;
- (id)realPathForURL:(id)url ifChildOfURL:(id)url;
- (BOOL)markBundleAsPlaceholder:(id)placeholder withError:(id *)error;
- (BOOL)bundleAtURLIsPlaceholder:(id)placeholder;
- (BOOL)clearPlaceholderStatusForBundle:(id)bundle withError:(id *)error;
- (BOOL)_markEAFlag:(const char *)eaflag forAppIdentifier:(id)identifier insecurelyCachedOnBundle:(id)bundle error:(id *)error;
- (id)_insecureCachedAppIdentifierIfMarkedWithEAFlag:(const char *)eaflag bundleURL:(id)url allowPlaceholders:(BOOL)placeholders error:(id *)error;
- (BOOL)setAppClipAppIdentifier:(id)identifier insecurelyCachedOnBundle:(id)bundle error:(id *)error;
- (id)insecureCachedAppIdentifierIfAppClipForBundle:(id)bundle error:(id *)error;
- (BOOL)setValidatedByFreeProfileAppIdentifier:(id)identifier insecurelyCachedOnBundle:(id)bundle error:(id *)error;
- (id)insecureCachedAppIdentifierIfValidatedByFreeProfileForBundle:(id)bundle error:(id *)error;
- (BOOL)setInstallType:(id)type inExtendedAttributeOnBundle:(id)bundle error:(id *)error;
- (id)installTypeFromExtendedAttributeOnBundle:(id)bundle error:(id *)error;
- (BOOL)_setData:(id)data forExtendedAttributeNamed:(id)named onURL:(id)url orFD:(int)fd error:(id *)error;
- (BOOL)setData:(id)data forExtendedAttributeNamed:(id)named onURL:(id)url error:(id *)error;
- (BOOL)setData:(id)data forExtendedAttributeNamed:(id)named onFD:(int)fd fdLocation:(id)location error:(id *)error;
- (id)_dataForExtendedAttributeNamed:(id)named length:(unsigned long long)length onURL:(id)url orFD:(int)fd error:(id *)error;
- (id)dataForExtendedAttributeNamed:(id)named length:(unsigned long long)length fromURL:(id)url error:(id *)error;
- (id)dataForExtendedAttributeNamed:(id)named length:(unsigned long long)length fromFD:(int)fd fdLocation:(id)location error:(id *)error;
- (unsigned long long)diskUsageForURL:(id)url;
- (BOOL)setModificationDateToNowForURL:(id)url error:(id *)error;
- (id)modificationDateForURL:(id)url error:(id *)error;
- (id)debugDescriptionForItemAtURL:(id)url;
- (void)logAccessPermissionsForURL:(id)url;
- (BOOL)secureRenameFromSourceURL:(id)url toDestinationURL:(id)url destinationStatus:(unsigned char)status error:(id *)error;
@end

#endif /* MIFileManager_h */
