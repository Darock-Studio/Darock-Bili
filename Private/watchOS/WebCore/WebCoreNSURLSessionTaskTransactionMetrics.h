//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WebCoreNSURLSessionTaskTransactionMetrics_h
#define WebCoreNSURLSessionTaskTransactionMetrics_h
@import Foundation;

@class NSDate, NSString;
@protocol {NetworkLoadMetrics="redirectStart"{MonotonicTime="m_value"d}"fetchStart"{MonotonicTime="m_value"d}"domainLookupStart"{MonotonicTime="m_value"d}"domainLookupEnd"{MonotonicTime="m_value"d}"connectStart"{MonotonicTime="m_value"d}"secureConnectionStart"{MonotonicTime="m_value"d}"connectEnd"{MonotonicTime="m_value"d}"requestStart"{MonotonicTime="m_value"d}"responseStart"{MonotonicTime="m_value"d}"responseEnd"{MonotonicTime="m_value"d}"workerStart"{MonotonicTime="m_value"d}"protocol"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"redirectCount"S"complete"b1"cellular"b1"expensive"b1"constrained"b1"multipath"b1"isReusedConnection"b1"failsTAOCheck"b1"hasCrossOriginRedirect"b1"privacyStance"C"responseBodyBytesReceived"Q"responseBodyDecodedSize"Q"additionalNetworkLoadMetricsForWebInspector"{RefPtr<WebCore::AdditionalNetworkLoadMetricsForWebInspector, WTF::RawPtrTraits<WebCore::AdditionalNetworkLoadMetricsForWebInspector>, WTF::DefaultRefDerefTraits<WebCore::AdditionalNetworkLoadMetricsForWebInspector>>="m_ptr"^{AdditionalNetworkLoadMetricsForWebInspector}}};

@interface WebCoreNSURLSessionTaskTransactionMetrics : NSObject {
  /* instance variables */
  struct NetworkLoadMetrics { struct MonotonicTime { double m_value; } redirectStart; struct MonotonicTime { double m_value; } fetchStart; struct MonotonicTime { double m_value; } domainLookupStart; struct MonotonicTime { double m_value; } domainLookupEnd; struct MonotonicTime { double m_value; } connectStart; struct MonotonicTime { double m_value; } secureConnectionStart; struct MonotonicTime { double m_value; } connectEnd; struct MonotonicTime { double m_value; } requestStart; struct MonotonicTime { double m_value; } responseStart; struct MonotonicTime { double m_value; } responseEnd; struct MonotonicTime { double m_value; } workerStart; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } protocol; unsigned short redirectCount; unsigned int x :1 complete; unsigned int x :1 cellular; unsigned int x :1 expensive; unsigned int x :1 constrained; unsigned int x :1 multipath; unsigned int x :1 isReusedConnection; unsigned int x :1 failsTAOCheck; unsigned int x :1 hasCrossOriginRedirect; unsigned char privacyStance; unsigned long long responseBodyBytesReceived; unsigned long long responseBodyDecodedSize; struct RefPtr<WebCore::AdditionalNetworkLoadMetricsForWebInspector, WTF::RawPtrTraits<WebCore::AdditionalNetworkLoadMetricsForWebInspector>, WTF::DefaultRefDerefTraits<WebCore::AdditionalNetworkLoadMetricsForWebInspector>> { struct AdditionalNetworkLoadMetricsForWebInspector *m_ptr; } additionalNetworkLoadMetricsForWebInspector; } _metrics;
}

@property (readonly, copy, @dynamic) NSDate *fetchStartDate;
@property (readonly, copy, @dynamic) NSDate *domainLookupStartDate;
@property (readonly, copy, @dynamic) NSDate *domainLookupEndDate;
@property (readonly, copy, @dynamic) NSDate *connectStartDate;
@property (readonly, copy, @dynamic) NSDate *secureConnectionStartDate;
@property (readonly, copy, @dynamic) NSDate *connectEndDate;
@property (readonly, copy, @dynamic) NSDate *requestStartDate;
@property (readonly, copy, @dynamic) NSDate *responseStartDate;
@property (readonly, copy, @dynamic) NSDate *responseEndDate;
@property (readonly, copy, @dynamic) NSString *networkProtocolName;
@property (readonly, @dynamic) BOOL reusedConnection;
@property (readonly, @dynamic) BOOL cellular;
@property (readonly, @dynamic) BOOL expensive;
@property (readonly, @dynamic) BOOL constrained;
@property (readonly, @dynamic) BOOL multipath;
@property (readonly, @dynamic) int _privacyStance;

/* instance methods */
- (id)_initWithMetrics:(void *)metrics;
- (void)dealloc;
- (BOOL)isReusedConnection;
@end

#endif /* WebCoreNSURLSessionTaskTransactionMetrics_h */
