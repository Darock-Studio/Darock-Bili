//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WebCoreResourceHandleAsOperationQueueDelegate_h
#define WebCoreResourceHandleAsOperationQueueDelegate_h
@import Foundation;

#include "NSURLConnectionDelegate-Protocol.h"

@class NSString;
@protocol {BinarySemaphore="m_isSet"B"m_lock"{Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"{__cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>>="__a_value"AC}}}}"m_condition"{Condition="m_hasWaiters"{Atomic<bool>="value"{atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}}}}}, {Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"{__cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>>="__a_value"AC}}}}, {RefPtr<WebCore::SynchronousLoaderMessageQueue, WTF::RawPtrTraits<WebCore::SynchronousLoaderMessageQueue>, WTF::DefaultRefDerefTraits<WebCore::SynchronousLoaderMessageQueue>>="m_ptr"^{SynchronousLoaderMessageQueue}}, {RetainPtr<NSCachedURLResponse>="m_ptr"^v}, {RetainPtr<NSURLRequest>="m_ptr"^v}, {optional<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash>>=""(?="__null_state_"c"__val_"{HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair>>, WTF::HashTableTraits>="m_impl"{HashTable<WTF::RefPtr<WTF::SchedulePair>, WTF::RefPtr<WTF::SchedulePair>, WTF::IdentityExtractor, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair>>, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair>>>=""(?="m_table"^v"m_tableForLLDB"^I)}})"__engaged_"B};

@interface WebCoreResourceHandleAsOperationQueueDelegate : NSObject<NSURLConnectionDelegate> {
  /* instance variables */
  struct Lock { struct Atomic<unsigned char> { struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { atomic  __a_value; unsigned char x0; } __a_; } value; } m_byte; } m_lock;
  void * m_handle;
  struct BinarySemaphore { BOOL m_isSet; struct Lock { struct Atomic<unsigned char> { struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { atomic  __a_value; unsigned char x0; } __a_; } value; } m_byte; } m_lock; struct Condition { struct Atomic<bool> { struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } value; } m_hasWaiters; } m_condition; } m_semaphore;
  struct RefPtr<WebCore::SynchronousLoaderMessageQueue, WTF::RawPtrTraits<WebCore::SynchronousLoaderMessageQueue>, WTF::DefaultRefDerefTraits<WebCore::SynchronousLoaderMessageQueue>> { struct SynchronousLoaderMessageQueue *m_ptr; } m_messageQueue;
  struct RetainPtr<NSURLRequest> { void *m_ptr; } m_requestResult;
  struct RetainPtr<NSCachedURLResponse> { void *m_ptr; } m_cachedResponseResult;
  struct optional<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash>> { union { char __null_state_; struct HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair>>, WTF::HashTableTraits> { struct HashTable<WTF::RefPtr<WTF::SchedulePair>, WTF::RefPtr<WTF::SchedulePair>, WTF::IdentityExtractor, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair>>, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair>>> { union { void *m_table; unsigned int *m_tableForLLDB; } x0; } m_impl; } __val_; } x0; BOOL __engaged_; } m_scheduledPairs;
  BOOL m_boolResult;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void)callFunctionOnMainThread:(void *)thread;
- (id)initWithHandle:(void *)handle messageQueue:(void *)queue;
- (void)detachHandle;
- (void)dealloc;
- (id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
- (void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
- (BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
- (void)connection:(id)connection didReceiveResponse:(id)response;
- (void)connection:(id)connection didReceiveData:(id)data lengthReceived:(long long)received;
- (void)connection:(id)connection didSendBodyData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
- (void)connectionDidFinishLoading:(id)loading;
- (void)connection:(id)connection didFailWithError:(id)error;
- (id)connection:(id)connection willCacheResponse:(id)response;
@end

#endif /* WebCoreResourceHandleAsOperationQueueDelegate_h */
