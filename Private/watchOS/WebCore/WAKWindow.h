//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WAKWindow_h
#define WAKWindow_h
@import Foundation;

#include "WAKResponder.h"
#include "WAKView.h"

@class CALayer;
@protocol {Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"{__cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>>="__a_value"AC}}}};

@interface WAKWindow : WAKResponder {
  /* instance variables */
  CALayer *_hostLayer;
  void * _tileCache;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frozenVisibleRect;
  CALayer *_rootLayer;
  struct CGSize { double width; double height; } _screenSize;
  struct CGSize { double width; double height; } _availableScreenSize;
  double _screenScale;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frame;
  WAKView *_contentView;
  WAKView *_responderView;
  WAKView *_nextResponder;
  BOOL _visible;
  BOOL _isInSnapshottingPaint;
  BOOL _entireWindowVisibleForTesting;
  struct Lock { struct Atomic<unsigned char> { struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { atomic  __a_value; unsigned char x0; } __a_; } value; } m_byte; } _exposedScrollViewRectLock;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _exposedScrollViewRect;
}

@property (nonatomic) BOOL useOrientationDependentFontAntialiasing;
@property (nonatomic) struct CGImage * contentReplacementImage;

/* class methods */
+ (void)setOrientationProvider:(id)provider;
+ (BOOL)hasLandscapeOrientation;
+ (id)currentEvent;

/* instance methods */
- (id)initWithLayer:(id)layer;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (void)setContentView:(id)view;
- (id)contentView;
- (void)close;
- (id)firstResponder;
- (id)_newFirstResponderAfterResigning;
- (struct CGPoint { double x0; double x1; })convertBaseToScreen:(struct CGPoint { double x0; double x1; })screen;
- (struct CGPoint { double x0; double x1; })convertScreenToBase:(struct CGPoint { double x0; double x1; })base;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })screen;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromScreen:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })screen;
- (BOOL)isKeyWindow;
- (void)makeKeyWindow;
- (BOOL)isVisible;
- (void)setVisible:(BOOL)visible;
- (unsigned long long)keyViewSelectionDirection;
- (BOOL)resignFirstResponder;
- (BOOL)makeFirstResponder:(id)responder;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame display:(BOOL)display;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setContentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)setScreenSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })screenSize;
- (void)setAvailableScreenSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })availableScreenSize;
- (void)setScreenScale:(double)scale;
- (double)screenScale;
- (void)setRootLayer:(id)layer;
- (id)rootLayer;
- (void)sendEvent:(id)event;
- (void)sendEventSynchronously:(id)synchronously;
- (void)sendMouseMoveEvent:(id)event contentChange:(int *)change;
- (void)setExposedScrollViewRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })exposedScrollViewRect;
- (void)layoutTiles;
- (void)layoutTilesNow;
- (void)layoutTilesNowForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)tilesOpaque;
- (void)setTilesOpaque:(BOOL)opaque;
- (void)setIsInSnapshottingPaint:(BOOL)paint;
- (BOOL)isInSnapshottingPaint;
- (void)setEntireWindowVisibleForTesting:(BOOL)testing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleRectRespectingMasksToBounds:(BOOL)bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })extendedVisibleRect;
- (void)removeAllNonVisibleTiles;
- (void)removeAllTiles;
- (void)removeForegroundTiles;
- (void)setTilingMode:(int)mode;
- (int)tilingMode;
- (void)setTilingDirection:(int)direction;
- (int)tilingDirection;
- (void)setZoomedOutTileScale:(float)scale;
- (float)zoomedOutTileScale;
- (void)setCurrentTileScale:(float)scale;
- (float)currentTileScale;
- (void)setKeepsZoomedOutTiles:(BOOL)tiles;
- (BOOL)keepsZoomedOutTiles;
- (void *)tileCache;
- (void)displayRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)willRotate;
- (void)didRotate;
- (id)hostLayer;
- (void)dumpTiles;
- (id)description;
- (id)recursiveDescription;
@end

#endif /* WAKWindow_h */
