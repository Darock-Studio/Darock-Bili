//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WAKView_h
#define WAKView_h
@import Foundation;

#include "WAKResponder.h"

@class NSMutableSet;

@interface WAKView : WAKResponder {
  /* instance variables */
  struct _WKViewContext { undefined *notificationCallback; void *notificationUserInfo; undefined *responderCallback; void *responderUserInfo; undefined *willRemoveSubviewCallback; undefined *invalidateGStateCallback; } viewContext;
  struct _WKView { struct _WAKObject { unsigned int x0; struct _WKClassInfo * x1; } x0; struct _WKViewContext * x1; id x2; struct _WKView * x3; struct __CFArray * x4; struct CGPoint { double x0; double x1; } x5; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x6; unsigned int x7; float x8; void * x9; } * viewRef;
  NSMutableSet *subviewReferences;
  BOOL _isHidden;
  BOOL _drawsOwnDescendants;
}

/* class methods */
+ (id)_wrapperForViewRef:(struct _WKView { struct _WAKObject { unsigned int x0; struct _WKClassInfo * x1; } x0; struct _WKViewContext * x1; id x2; struct _WKView * x3; struct __CFArray * x4; struct CGPoint { double x0; double x1; } x5; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x6; unsigned int x7; float x8; void * x9; } *)ref;
+ (id)focusView;
+ (void)_setInterpolationQuality:(int)quality;

/* instance methods */
- (BOOL)accessibilityIsIgnored;
- (void)handleEvent:(id)event;
- (BOOL)_selfHandleEvent:(id)event;
- (id)nextResponder;
- (BOOL)_handleResponderCall:(int)call;
- (id)_initWithViewRef:(struct _WKView { struct _WAKObject { unsigned int x0; struct _WKClassInfo * x1; } x0; struct _WKViewContext * x1; id x2; struct _WKView * x3; struct __CFArray * x4; struct CGPoint { double x0; double x1; } x5; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x6; unsigned int x7; float x8; void * x9; } *)ref;
- (id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (id)window;
- (struct _WKView { struct _WAKObject { unsigned int x0; struct _WKClassInfo * x1; } x0; struct _WKViewContext * x1; id x2; struct _WKView * x3; struct __CFArray * x4; struct CGPoint { double x0; double x1; } x5; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x6; unsigned int x7; float x8; void * x9; } *)_viewRef;
- (id)_subviewReferences;
- (id)subviews;
- (id)superview;
- (id)lastScrollableAncestor;
- (void)addSubview:(id)subview;
- (void)willRemoveSubview:(id)subview;
- (void)removeFromSuperview;
- (void)viewDidMoveToWindow;
- (void)frameSizeChanged;
- (void)setNeedsDisplay:(BOOL)display;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)needsDisplay;
- (void)display;
- (void)displayIfNeeded;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)viewWillDraw;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setFrameOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })size;
- (void)setBoundsSize:(struct CGSize { double x0; double x1; })size;
- (void)setBoundsOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)_lockFocusViewInContext:(struct CGContext *)context;
- (void)_unlockFocusViewInContext:(struct CGContext *)context;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect context:(struct CGContext *)context lockFocus:(BOOL)focus;
- (void)displayRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })opacity;
- (void)displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })opacity inContext:(struct CGContext *)context;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRect;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toView:(id)view;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromView:(id)view;
- (struct CGSize { double x0; double x1; })convertSize:(struct CGSize { double x0; double x1; })size toView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toView:(id)view;
- (void)lockFocus;
- (void)unlockFocus;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test;
- (void)setHidden:(BOOL)hidden;
- (BOOL)isDescendantOf:(id)of;
- (BOOL)isHiddenOrHasHiddenAncestor;
- (BOOL)mouse:(struct CGPoint { double x0; double x1; })mouse inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)needsPanelToBecomeKey;
- (void)setNextKeyView:(id)view;
- (id)previousValidKeyView;
- (id)nextKeyView;
- (id)nextValidKeyView;
- (id)previousKeyView;
- (void)invalidateGState;
- (void)releaseGState;
- (BOOL)inLiveResize;
- (void)setAutoresizingMask:(unsigned int)mask;
- (unsigned int)autoresizingMask;
- (void)scrollPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visible;
- (void)setNeedsLayout:(BOOL)layout;
- (void)layout;
- (void)layoutIfNeeded;
- (void)setScale:(float)scale;
- (float)scale;
- (void)_setDrawsOwnDescendants:(BOOL)descendants;
- (id)description;
- (void)_appendDescriptionToString:(id)string atLevel:(int)level;
@end

#endif /* WAKView_h */
