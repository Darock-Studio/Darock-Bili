//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.8.1.0.0
//
#ifndef QRSELFLoggingUtils_h
#define QRSELFLoggingUtils_h
@import Foundation;

@interface QRSELFLoggingUtils : NSObject
/* class methods */
+ (void)emitEvent:(id)event;
+ (id)createEventMetadataWithNlId:(id)id andWithTrpId:(id)id andWithResultCandidateId:(id)id andWithRequester:(int)requester;
+ (id)createCCQRContextEventWrapper:(id)wrapper withMetaData:(id)data;
+ (id)createRDContextEventWrapper:(id)wrapper withMetaData:(id)data;
+ (id)createCCQRContextEvaluatedEvent:(struct QRResponse { struct vector<marrs::qr::orchestration::QRHypothesis, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; struct QRHypothesis * x1; struct __compressed_pair<marrs::qr::orchestration::QRHypothesis *, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; } x2; } x0; int x1; double x2; double x3; double x4; int x5; })event withNLXMetadata:(id)nlxmetadata andLinkId:(id)id;
+ (id)createRDContextEvaluatedEvent:(struct QRResponse { struct vector<marrs::qr::orchestration::QRHypothesis, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; struct QRHypothesis * x1; struct __compressed_pair<marrs::qr::orchestration::QRHypothesis *, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; } x2; } x0; int x1; double x2; double x3; double x4; int x5; })event withNLXMetadata:(id)nlxmetadata;
+ (id)createCCQRContextEvaluatedTier1Event:(struct QRResponse { struct vector<marrs::qr::orchestration::QRHypothesis, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; struct QRHypothesis * x1; struct __compressed_pair<marrs::qr::orchestration::QRHypothesis *, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; } x2; } x0; int x1; double x2; double x3; double x4; int x5; })event withNLXMetadata:(id)nlxmetadata andLinkId:(id)id;
+ (BOOL)emitQueryRewriteStartedEventWithMetadata:(id)metadata byPredictorType:(int)type;
+ (BOOL)emitCCQRStartedEventWithMetadata:(id)metadata;
+ (BOOL)emitRDStartedEventWithMetadata:(id)metadata;
+ (BOOL)emitQueryRewriteEvaluatedEventWithResponse:(struct QRResponse { struct vector<marrs::qr::orchestration::QRHypothesis, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; struct QRHypothesis * x1; struct __compressed_pair<marrs::qr::orchestration::QRHypothesis *, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; } x2; } x0; int x1; double x2; double x3; double x4; int x5; })response andNLXMetadata:(id)nlxmetadata byPredictorType:(int)type;
+ (BOOL)emitCCQREvaluatedEventWithResponse:(struct QRResponse { struct vector<marrs::qr::orchestration::QRHypothesis, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; struct QRHypothesis * x1; struct __compressed_pair<marrs::qr::orchestration::QRHypothesis *, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; } x2; } x0; int x1; double x2; double x3; double x4; int x5; })response andNLXMetadata:(id)nlxmetadata;
+ (BOOL)emitRDEvaluatedEventWithResponse:(struct QRResponse { struct vector<marrs::qr::orchestration::QRHypothesis, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; struct QRHypothesis * x1; struct __compressed_pair<marrs::qr::orchestration::QRHypothesis *, std::allocator<marrs::qr::orchestration::QRHypothesis>> { struct QRHypothesis * x0; } x2; } x0; int x1; double x2; double x3; double x4; int x5; })response andNLXMetadata:(id)nlxmetadata;
+ (BOOL)emitQueryRewriteFailedEventWithMetadata:(id)metadata andErrorCode:(long long)code byPredictorType:(int)type;
+ (BOOL)emitCCQRFailedEventWithMetadata:(id)metadata andErrorCode:(long long)code;
+ (BOOL)emitRDFailedEventWithMetadata:(id)metadata andErrorCode:(long long)code;
+ (int)convertMarrsErrorCode:(long long)code;
+ (int)convertRepetitionType:(int)type;
+ (int)convertRewriteType:(int)type;
+ (id)convertUUID:(id)uuid;
@end

#endif /* QRSELFLoggingUtils_h */
