//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2220.14.1.0.0
//
#ifndef AVMutableMovieTrack_h
#define AVMutableMovieTrack_h
@import Foundation;

#include "AVMovieTrack.h"
#include "AVMediaDataStorage.h"
#include "AVMutableMovieTrackInternal.h"

@class NSArray, NSURL;

@interface AVMutableMovieTrack : AVMovieTrack {
  /* instance variables */
  AVMutableMovieTrackInternal *_mutableMovieTrackInternal;
}

@property (readonly, nonatomic) NSArray *formatDescriptions;
@property (copy, nonatomic) NSArray *metadata;
@property (copy, nonatomic) AVMediaDataStorage *mediaDataStorage;
@property (copy, nonatomic) NSURL *sampleReferenceBaseURL;
@property (nonatomic) BOOL enabled;
@property (nonatomic) long long alternateGroupID;
@property (nonatomic) BOOL modified;
@property (readonly, nonatomic) BOOL hasProtectedContent;
@property (nonatomic) int timescale;

/* class methods */
+ (id)trackWithTrackID:(int)id forMovie:(id)movie;
+ (BOOL)expectsPropertyRevisedNotifications;

/* instance methods */
- (void)addTrackAssociationToTrack:(id)track type:(id)type;
- (void)removeTrackAssociationToTrack:(id)track type:(id)type;
- (id)availableMetadataFormats;
- (id)metadataForFormat:(id)format;
- (BOOL)appendMediaData:(id)data dataOffset:(long long *)offset;
- (BOOL)appendSampleBuffer:(struct opaqueCMSampleBuffer *)buffer decodeTime:(struct { long long x0; int x1; unsigned int x2; long long x3; } *)time presentationTime:(struct { long long x0; int x1; unsigned int x2; long long x3; } *)time error:(id *)error;
- (BOOL)insertMediaTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })range intoTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })range;
- (BOOL)insertTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })range ofTrack:(id)track atTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time copySampleData:(BOOL)data error:(id *)error;
- (void)insertEmptyTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })range;
- (void)removeTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })range;
- (void)scaleTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })range toDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration;
- (BOOL)isCompatibleWithFormatDescription:(struct opaqueCMFormatDescription *)description;
- (void)replaceFormatDescription:(struct opaqueCMFormatDescription *)description withFormatDescription:(struct opaqueCMFormatDescription *)description;
- (id)initWithTrackID:(int)id forMovie:(id)movie;
- (void)dealloc;
- (struct OpaqueFigAssetTrack *)_figAssetTrack;
- (void)_signalMetadataUpdated;
- (void)_addFigAssetTrackNotifications;
- (void)_removeFigAssetTrackNotifications;
- (long long)statusOfValueForKey:(id)key error:(id *)error;
- (void)loadValuesAsynchronouslyForKeys:(id)keys completionHandler:(id /* block */)handler;
- (struct OpaqueFigMutableMovie *)_figMutableMovie;
- (int)trackID;
- (id)languageCode;
- (id)extendedLanguageTag;
- (id)locale;
- (struct CGSize { double x0; double x1; })naturalSize;
- (struct CGSize { double x0; double x1; })dimensions;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })preferredTransform;
- (long long)layer;
- (float)preferredVolume;
- (struct CGSize { double x0; double x1; })cleanApertureDimensions;
- (struct CGSize { double x0; double x1; })productionApertureDimensions;
- (struct CGSize { double x0; double x1; })encodedPixelsDimensions;
- (BOOL)isEnabled;
- (BOOL)isModified;
- (long long)preferredMediaChunkSize;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })preferredMediaChunkDuration;
- (long long)preferredMediaChunkAlignment;
- (struct CGSize { double x0; double x1; })_sizeForProperty:(struct __CFString *)property;
- (void)_setSize:(struct CGSize { double x0; double x1; })size forProperty:(struct __CFString *)property;
- (id)_stringForProperty:(struct __CFString *)property;
- (void)_setString:(id)string forProperty:(struct __CFString *)property;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })mediaPresentationTimeRange;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })mediaDecodeTimeRange;
- (void)setLanguageCode:(id)code;
- (void)setExtendedLanguageTag:(id)tag;
- (void)setNaturalSize:(struct CGSize { double x0; double x1; })size;
- (void)setPreferredVolume:(float)volume;
- (void)setPreferredTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)setCleanApertureDimensions:(struct CGSize { double x0; double x1; })dimensions;
- (void)setProductionApertureDimensions:(struct CGSize { double x0; double x1; })dimensions;
- (void)setEncodedPixelsDimensions:(struct CGSize { double x0; double x1; })dimensions;
- (void)setLayer:(long long)layer;
- (void)setPreferredMediaChunkSize:(long long)size;
- (void)setPreferredMediaChunkDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration;
- (void)setPreferredMediaChunkAlignment:(long long)alignment;
- (id)description;
@end

#endif /* AVMutableMovieTrack_h */
