//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2220.14.1.0.0
//
#ifndef AVOutputContext_h
#define AVOutputContext_h
@import Foundation;

#include "AVOutputContextInternal.h"
#include "NSSecureCoding-Protocol.h"

@class NSString;

@interface AVOutputContext : NSObject<NSSecureCoding> {
  /* instance variables */
  AVOutputContextInternal *_outputContext;
}

@property (readonly, nonatomic) NSString *deviceName;

/* class methods */
+ (void)initialize;
+ (Class)defaultOutputContextImplClass;
+ (id)outputContext;
+ (id)sharedAudioPresentationOutputContext;
+ (id)auxiliaryOutputContext;
+ (id)sharedSystemAudioContext;
+ (id)sharedSystemScreenContext;
+ (id)sharedSystemRemotePoolContext;
+ (id)iTunesAudioContext;
+ (id)addSharedAudioOutputContext;
+ (id)allSharedAudioOutputContexts;
+ (id)defaultSharedOutputContext;
+ (id)outputContextForControllingOutputDeviceGroupWithID:(id)id options:(id)options;
+ (id)outputContextForControllingOutputDeviceGroupWithID:(id)id;
+ (id)outputContextForID:(id)id;
+ (BOOL)supportsSecureCoding;
+ (void)resetOutputDeviceForAllOutputContexts;
+ (BOOL)outputContextExistsWithRemoteOutputDevice;

/* instance methods */
- (id)init;
- (id)initWithOutputContextImpl:(id)impl;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)dealloc;
- (id)description;
- (id)impl;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (id)contextID;
- (id)ID;
- (id)outputContextType;
- (int)applicationProcessID;
- (BOOL)getApplicationProcessID:(int *)id;
- (void)setApplicationProcessID:(int)id;
- (id)outputDevice;
- (void)setOutputDevice:(id)device options:(id)options completionHandler:(id /* block */)handler;
- (unsigned long long)outputDeviceFeatures;
- (BOOL)setOutputDevice:(id)device forFeatures:(unsigned long long)features;
- (void)setOutputDevice:(id)device options:(id)options;
- (void)outputContextImpl:(id)impl didInitiateDestinationChange:(id)change;
- (void)outputContextImpl:(id)impl didChangeOutputDeviceWithInitiator:(id)initiator;
- (void)outputContextImplDidChangeGlobalOutputDeviceConfiguration:(id)configuration;
- (BOOL)supportsMultipleOutputDevices;
- (BOOL)supportsMultipleBluetoothOutputDevices;
- (id)outputDevices;
- (void)outputContextImpl:(id)impl didChangeOutputDevicesWithInitiator:(id)initiator reason:(id)reason deviceID:(id)id previousDeviceIDs:(id)ids;
- (void)setOutputDevices:(id)devices;
- (void)setOutputDevices:(id)devices options:(id)options completionHandler:(id /* block */)handler;
- (void)addOutputDevice:(id)device options:(id)options completionHandler:(id /* block */)handler;
- (void)addOutputDevice:(id)device;
- (void)removeOutputDevice:(id)device options:(id)options completionHandler:(id /* block */)handler;
- (void)removeOutputDevice:(id)device;
- (id)predictedOutputDevice;
- (void)outputContextImplDidChangePredictedOutputDevice:(id)device;
- (void)resetPredictedOutputDevice;
- (BOOL)providesControlForAllVolumeFeatures;
- (void)outputContextImplDidChangeProvidesControlForAllVolumeFeatures:(id)features;
- (float)volume;
- (void)outputContextImplDidChangeVolume:(id)volume;
- (BOOL)canSetVolume;
- (void)outputContextImplDidChangeCanSetVolume:(id)volume;
- (void)outputContextImplDidChangeCanMute:(id)mute;
- (void)outputContextImplDidChangeMute:(id)mute;
- (void)setVolume:(float)volume;
- (void)increaseVolumeByCount:(long long)count;
- (void)decreaseVolumeByCount:(long long)count;
- (long long)volumeControlType;
- (BOOL)canMute;
- (BOOL)isMuted;
- (void)setMuted:(BOOL)muted;
- (void)outputContextImplDidChangeVolumeControlType:(id)type;
- (id)outgoingCommunicationChannel;
- (id)communicationChannelDelegate;
- (id)openCommunicationChannelWithOptions:(id)options error:(id *)error;
- (void)setCommunicationChannelDelegate:(id)delegate;
- (void)outputContextImplOutgoingCommunicationChannelDidBecomeAvailable:(id)available;
- (void)outputContextImpl:(id)impl didReceiveData:(id)data fromCommunicationChannel:(id)channel;
- (void)outputContextImpl:(id)impl didCloseCommunicationChannel:(id)channel;
- (void)outputContextImpl:(id)impl didExpireWithReplacement:(id)replacement;
@end

#endif /* AVOutputContext_h */
