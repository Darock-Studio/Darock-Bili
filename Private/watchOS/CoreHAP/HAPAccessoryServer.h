//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HAPAccessoryServer_h
#define HAPAccessoryServer_h
@import Foundation;

#include "HMFObject.h"
#include "HAPAccessory.h"
#include "HAPAccessoryPairingRequest.h"
#include "HAPAccessoryServerDelegate-Protocol.h"
#include "HAPDeviceID.h"
#include "HAPKeyBag.h"
#include "HAPKeyStore-Protocol.h"
#include "HAPSuspendedAccessory.h"

@class HMFActivity, HMFVersion, NSArray, NSData, NSDate, NSDictionary, NSHashTable, NSMutableDictionary, NSNumber, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface HAPAccessoryServer : HMFObject {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _metriclock;
}

@property (readonly, nonatomic) NSHashTable *internalDelegates;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *internalDelegateQueue;
@property (retain, nonatomic) NSHashTable *notificationClients;
@property (nonatomic) int successfulPingCount;
@property (nonatomic) int failedPingCount;
@property (retain, nonatomic) NSMutableDictionary *localPairingMetricDictionary;
@property BOOL unitTest_useHH2;
@property (readonly, weak) NSObject<HAPAccessoryServerDelegate> *delegate;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *clientQueue;
@property (copy, nonatomic) NSString *name;
@property (nonatomic) BOOL hasPairings;
@property (retain, nonatomic) HAPSuspendedAccessory *suspendedAccessory;
@property (nonatomic) unsigned long long pendingRemovePairing;
@property (nonatomic) BOOL reachable;
@property BOOL securitySessionOpen;
@property (copy, nonatomic) NSString *identifier;
@property (copy, nonatomic) NSNumber *category;
@property (nonatomic) unsigned long long configNumber;
@property (nonatomic) unsigned long long stateNumber;
@property (nonatomic) unsigned long long wakeNumber;
@property (nonatomic) unsigned long long compatibilityFeatures;
@property (nonatomic) BOOL incompatibleUpdate;
@property (retain, nonatomic) HAPAccessory *primaryAccessory;
@property (copy, nonatomic) NSArray *accessories;
@property (readonly, weak, nonatomic) NSObject<HAPKeyStore> *keyStore;
@property (copy, nonatomic) NSData *setupHash;
@property (copy) HMFVersion *version;
@property (nonatomic) unsigned long long pairSetupType;
@property (retain, nonatomic) NSString *productData;
@property (copy, nonatomic) NSString *reachabilityChangedReason;
@property BOOL hasAdvertisement;
@property (retain, nonatomic) HAPKeyBag *keyBag;
@property (retain, nonatomic) HAPAccessoryPairingRequest *pairingRequest;
@property (weak, nonatomic) HMFActivity *pairingActivity;
@property BOOL supportsUnreachablePing;
@property unsigned long long metric_pairVerifyDurationInMS;
@property (copy, nonatomic) NSString *metric_pairVerifyReason;
@property (readonly) BOOL knownToSystemCommissioner;
@property (readonly, copy) NSData *rootPublicKey;
@property (readonly, copy) NSNumber *nodeID;
@property (readonly, copy) NSUUID *commissioningID;
@property (readonly, copy) NSNumber *vendorID;
@property (readonly, copy) NSNumber *productID;
@property (readonly, copy) HAPDeviceID *deviceID;
@property (readonly, nonatomic) long long linkType;
@property (readonly, nonatomic) long long linkLayerType;
@property (nonatomic) BOOL supportsTimedWrite;
@property (nonatomic) unsigned long long authMethod;
@property (readonly, nonatomic) BOOL bleLinkConnected;
@property (nonatomic) BOOL reachabilityPingEnabled;
@property (nonatomic) BOOL sessionRestoreActive;
@property (copy, nonatomic) NSDate *connectionStartTime;
@property BOOL shouldDisconnectOnIdle;
@property (readonly) long long communicationProtocol;
@property (readonly, nonatomic) NSDictionary *pairingMetricDictionary;

/* instance methods */
- (id)init;
- (id)initWithKeystore:(id)keystore;
- (void)setDelegate:(id)delegate queue:(id)queue;
- (BOOL)isReachable;
- (void)disconnectOnIdleUpdated;
- (BOOL)isSessionRestoreActive;
- (BOOL)isSecuritySessionOpen;
- (BOOL)isKnownToSystemCommissioner;
- (void)reconfirm;
- (void)updateActiveDisconnectOnIdleTimeout:(double)timeout;
- (void)setPairingMetricWithKey:(id)key value:(id)value;
- (void)clearPairingMetrics;
- (id)shortDescription;
- (id)logIdentifier;
- (void)authenticateAccessory;
- (void)continueAuthAfterValidation:(BOOL)validation;
- (void)provisionToken:(id)token;
- (void)tearDownSessionOnAuthCompletion;
- (void)validatePairingAuthMethod:(id /* block */)method;
- (BOOL)isPaired;
- (BOOL)matchesSetupID:(id)id;
- (BOOL)matchesSetupID:(id)id serverIdentifier:(id)identifier;
- (void)continuePairingAfterAuthPrompt;
- (void)continuePairingUsingWAC;
- (void)startPairingWithRequest:(id)request;
- (void)startPairingWithConsentRequired:(BOOL)required config:(id)config ownershipToken:(id)token;
- (BOOL)tryPairingPassword:(id)password onboardingSetupPayloadString:(id)string error:(id *)error;
- (BOOL)stopPairingWithError:(id *)error;
- (void)addPairing:(id)pairing completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)removePairing:(id)pairing completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (BOOL)removePairingForCurrentControllerOnQueue:(id)queue completion:(id /* block */)completion;
- (void)listPairingsWithCompletionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)removePairingIdentifier:(id)identifier pairingPublicKey:(id)key completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)discoverAccessories;
- (void)readCharacteristicValues:(id)values timeout:(double)timeout completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)writeCharacteristicValues:(id)values timeout:(double)timeout completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)enableEvents:(BOOL)events forCharacteristics:(id)characteristics withCompletionHandler:(id /* block */)handler queue:(id)queue;
- (void)identifyWithCompletion:(id /* block */)completion;
- (void)handleUpdatesForCharacteristics:(id)characteristics stateNumber:(id)number;
- (BOOL)requiresTimedWrite:(id)write;
- (void)addInternalDelegate:(id)delegate;
- (void)removeInternalDelegate:(id)delegate;
- (void)enumerateInternalDelegatesUsingBlock:(id /* block */)block;
- (BOOL)pingSupported;
- (void)startPing;
- (void)stopPing;
- (BOOL)isPinging;
- (void)registerForNotifications:(id)notifications;
- (void)unregisterForNotifications:(id)notifications;
- (BOOL)notifyClients:(unsigned long long)clients withDictionary:(id)dictionary;
- (id)buildReachabilityNotificationDictionary:(id)dictionary reachable:(BOOL)reachable linkType:(long long)type withError:(long long)error;
- (void)incrementSuccessfulPing;
- (void)incrementFailedPing;
- (void)updateAccessoryInfoDictionary:(id)dictionary;
- (void)submitPairVerifyMetricWithError:(id)error;
- (void)disconnectWithError:(id)error;
- (void)disconnect;
- (id)getControllerUserName;
- (id)getControllerPairingIdentityWithError:(id *)error;
- (void)initializeKeyBagIfNecessary;
- (void)refreshKeyBag;
- (BOOL)shouldRetryPVDueToAuthenticationError:(id)error;
- (BOOL)isAccessoryAssociatedWithControllerKey:(id)key;
- (void)associateAccessoryWithControllerKey:(id)key usingAccessoryPublicKey:(id)key;
- (void)associateAccessoryWithControllerKeyUsingAccessoryPublicKey:(id)key;
- (void)associateAccessoryWithControllerKeyUsingAccessoryIdentifier:(id)identifier;
- (void)disassociateAccessoryWithControllerKeyUsingAccessoryIdentifier:(id)identifier;
- (BOOL)doesPeriodicSessionChecks;
- (unsigned long long)sessionCheckInterval;
- (unsigned long long)numActiveSessionClients;
- (void)securitySessionWillCloseWithResponseData:(id)data error:(id *)error;
- (BOOL)useHH2;
- (BOOL)isBLELinkConnected;
- (BOOL)isIncompatibleUpdate;
@end

#endif /* HAPAccessoryServer_h */
