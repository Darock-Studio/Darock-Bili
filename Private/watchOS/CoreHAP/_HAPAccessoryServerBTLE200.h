//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef _HAPAccessoryServerBTLE200_h
#define _HAPAccessoryServerBTLE200_h
@import Foundation;

#include "HAPAccessoryServerBTLE.h"
#include "CBPeripheralDelegate-Protocol.h"
#include "HAPAccessoryProtocolInfo.h"
#include "HAPAuthSession.h"
#include "HAPAuthSessionDelegate-Protocol.h"
#include "HAPBLEAccessoryCache.h"
#include "HAPBTLEControlOutputStreamDelegate-Protocol.h"
#include "HAPCharacteristic.h"
#include "HAPPairSetupSession.h"
#include "HAPPairSetupSessionClientDelegate-Protocol.h"
#include "HAPSecuritySession.h"
#include "HAPSecuritySessionDelegate-Protocol.h"
#include "HMFLogging-Protocol.h"
#include "HMFTimerDelegate-Protocol.h"
#include "_HAPBTLEDiscoveryContext.h"

@class HMFTimer, NSError, NSMapTable, NSMutableArray, NSMutableSet, NSOperationQueue, NSString;

@interface _HAPAccessoryServerBTLE200 : HAPAccessoryServerBTLE<CBPeripheralDelegate, HAPBTLEControlOutputStreamDelegate, HAPPairSetupSessionClientDelegate, HAPSecuritySessionDelegate, HMFTimerDelegate, HAPAuthSessionDelegate, HMFLogging>

@property (retain, nonatomic) HAPBLEAccessoryCache *accessoryCache;
@property (nonatomic) BOOL hasValidCache;
@property (copy, nonatomic) id /* block */ connectionCompletionHandler;
@property (retain, nonatomic) HMFTimer *connectionIdleTimer;
@property (retain, nonatomic) _HAPBTLEDiscoveryContext *discoveryContext;
@property (nonatomic) long long discoveryRetries;
@property (nonatomic) BOOL verified;
@property (weak, nonatomic) HAPCharacteristic *identifyCharacteristic;
@property (retain, nonatomic) HAPPairSetupSession *pairSetupSession;
@property (nonatomic) double pairSetupBackoffTimeInterval;
@property (nonatomic) BOOL badPairSetupCode;
@property (copy, nonatomic) id /* block */ setupCodeCompletionHandler;
@property (nonatomic) BOOL pairing;
@property (retain, nonatomic) NSError *pairingDisconnectionError;
@property (nonatomic) BOOL authenticated;
@property (retain, nonatomic) HAPAuthSession *authSession;
@property (retain, nonatomic) HAPAccessoryProtocolInfo *authenticatedProtocolInfo;
@property (weak, nonatomic) HAPCharacteristic *pairingFeaturesCharacteristic;
@property (weak, nonatomic) HAPCharacteristic *pairSetupCharacteristic;
@property (weak, nonatomic) HAPCharacteristic *pairVerifyCharacteristic;
@property (readonly, nonatomic) NSOperationQueue *pairVerifyOperationQueue;
@property (weak, nonatomic) HAPCharacteristic *pairingsCharacteristic;
@property (readonly, nonatomic) NSMutableArray *pendingRequests;
@property (readonly, nonatomic) NSOperationQueue *requestOperationQueue;
@property (readonly, nonatomic) NSMutableArray *pendingResponses;
@property (readonly, nonatomic) NSMapTable *characteristicWriteCompletionHandlers;
@property (readonly, nonatomic) NSMapTable *characteristicEnableEventCompletionHandlers;
@property (nonatomic) unsigned char featureFlags;
@property (retain, nonatomic) NSMutableSet *discoveredAccessoryCharacteristicsPendingRead;
@property (retain, nonatomic) NSMutableArray *operationsReceivedDuringConnectionStateChange;
@property (retain, nonatomic) HAPSecuritySession *securitySession;
@property (nonatomic) long long connectionState;
@property (readonly, nonatomic) BOOL hasBeenDiscovered;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)signatureRequestForCharacteristic:(id)characteristic requiresAuthentication:(BOOL)authentication error:(id *)error;
+ (id)signatureRequestForService:(id)service characteristic:(id)characteristic requiresAuthentication:(BOOL)authentication error:(id *)error;
+ (id)parseSignatureResponse:(id)response error:(id *)error;
+ (id)parseServiceSignatureResponse:(id)response serviceInstanceID:(id)id serviceType:(id)type error:(id *)error;
+ (BOOL)isHAPService:(id)hapservice;
+ (BOOL)isHAPDescriptor:(id)hapdescriptor;
+ (id)readRequestForCharacteristic:(id)characteristic options:(long long)options error:(id *)error;
+ (BOOL)parseReadResponse:(id)response value:(id *)value notificationContext:(id *)context error:(id *)error;
+ (id)extractSerializedRequestValueFromBodyData:(id)data error:(id *)error;
+ (id)extractNotificationContextFromBodyData:(id)data error:(id *)error;
+ (id)writeRequestForCharacteristic:(id)characteristic value:(id)value authorizationData:(id)data contextData:(id)data options:(long long)options error:(id *)error;
+ (id)prepareWriteRequestForCharacteristic:(id)characteristic value:(id)value authorizationData:(id)data contextData:(id)data options:(long long)options error:(id *)error;
+ (id)executeWriteRequestForCharacteristic:(id)characteristic options:(long long)options error:(id *)error;
+ (BOOL)parseWriteResponse:(id)response value:(id *)value error:(id *)error;
+ (id)configurationRequestForService:(id)service configRequestType:(unsigned char)type error:(id *)error;
+ (BOOL)parseProtocolConfigurationResponse:(id)response key:(id *)key stateNumber:(id *)number error:(id *)error;
+ (id)configurationRequestForCharacteristic:(id)characteristic isBroadcasted:(BOOL)broadcasted interval:(unsigned long long)interval error:(id *)error;
+ (BOOL)parseCharacteristicConfigurationResponse:(id)response error:(id *)error;
+ (id)logCategory;

/* instance methods */
- (id)initWithPeripheral:(id)peripheral name:(id)name pairingUsername:(id)username statusFlags:(id)flags stateNumber:(id)number stateChanged:(BOOL)changed connectReason:(unsigned char)reason configNumber:(id)number category:(id)category setupHash:(id)hash connectionIdleTime:(unsigned char)time browser:(id)browser keyStore:(id)store whbStableIdentifier:(id)identifier;
- (void)_resetWithError:(id)error;
- (void)dealloc;
- (id)descriptionWithPointer:(BOOL)pointer;
- (unsigned long long)hapBLEProtocolVersion;
- (void)_createPrimaryAccessoryFromAdvertisementData;
- (BOOL)_delegateRespondsToSelector:(SEL)selector;
- (id)_serviceForCBService:(id)cbservice;
- (id)_characteristicForCBCharacteristic:(id)cbcharacteristic;
- (void)_removePairingOfAccessoryServerCancelledMidPairing;
- (void)discoverAccessories;
- (void)discoverAccessoriesAndReadCharacteristicTypes:(id)types;
- (void)_readPendingDiscoveredCharacteristicTypesWithCompletion:(id /* block */)completion;
- (void)_discoverWithType:(long long)type completionHandler:(id /* block */)handler;
- (BOOL)_cancelDiscoveryWithError:(id)error;
- (void)_retryDiscovery;
- (void)_handleCompletedDiscovery;
- (id)_getCBCharacteristic:(id)cbcharacteristic instanceId:(id)id service:(id)service;
- (id)_getCBService:(id)cbservice instanceOrder:(unsigned long long)order;
- (id)_getCachedService:(id)service;
- (id)_hapServicesFromCache;
- (id)_serviceCacheFromHAPService:(id)hapservice serviceOrder:(unsigned long long)order;
- (void)_cacheServices:(id)services;
- (void)_discoverServices;
- (void)_handleDiscoveredServices:(id)services error:(id)error;
- (void)_discoverCharacteristicsForService:(id)service;
- (void)_handleDiscoveredCharacteristicsForService:(id)service error:(id)error;
- (void)_handleReadServiceInstanceId:(id)id;
- (void)_discoverCharacteristic:(id)characteristic;
- (void)_handleDiscoveredCharacteristic:(id)characteristic error:(id)error;
- (void)_handleDiscoveredDescriptors:(id)descriptors;
- (void)_readCharacteristicValue:(id)value;
- (void)_handleReadCharacteristicValue:(id)value error:(id)error;
- (void)_readDescriptorValue:(id)value;
- (void)_handleReadDescriptorValue:(id)value error:(id)error;
- (void)_handleUpdateValueForCharacteristic:(id)characteristic error:(id)error;
- (void)_readCharacteristicSignatures;
- (id)_getCharacteristicInstanceID:(id)id error:(id *)error;
- (id)_getServiceInstanceID:(id)id;
- (id)_getProtocolInfoService;
- (void)_readCharacteristicSignature:(id)signature;
- (void)_readServiceSignature:(id)signature;
- (void)_handleReadCharacteristicSignature:(id)signature error:(id)error;
- (void)_handleReadServiceSignature:(id)signature error:(id)error;
- (BOOL)isHAPCharacteristic:(id)hapcharacteristic;
- (BOOL)shouldVerifyHAPCharacteristic:(id)hapcharacteristic;
- (BOOL)shouldVerifyHAPService:(id)hapservice;
- (id)_parseService:(id)service error:(id *)error;
- (id)_parseCharacteristic:(id)characteristic error:(id *)error;
- (void)readCharacteristicValues:(id)values timeout:(double)timeout completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_readCharacteristicValues:(id)values queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_updatePropertiesFromCharacteristic:(id)characteristic;
- (void)_readValueForCharacteristic:(id)characteristic options:(long long)options completionHandler:(id /* block */)handler;
- (void)writeCharacteristicValues:(id)values timeout:(double)timeout completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_writeValue:(id)value toCharacteristic:(id)characteristic authorizationData:(id)data contextData:(id)data options:(long long)options completionHandler:(id /* block */)handler;
- (void)_performWriteValue:(id)value toCharacteristic:(id)characteristic authorizationData:(id)data contextData:(id)data options:(long long)options completionHandler:(id /* block */)handler;
- (void)_performTimedWriteValue:(id)value toCharacteristic:(id)characteristic authorizationData:(id)data contextData:(id)data options:(long long)options completionHandler:(id /* block */)handler;
- (void)_performTimedWritePrepareWithValue:(id)value toCharacteristic:(id)characteristic authorizationData:(id)data contextData:(id)data options:(long long)options completionHandler:(id /* block */)handler;
- (void)_performTimedWriteExecuteForCharacteristic:(id)characteristic value:(id)value options:(long long)options completionHandler:(id /* block */)handler;
- (void)markNotifyingCharacteristicUpdatedforCharacteristic:(id)characteristic;
- (void)enableEvents:(BOOL)events forCharacteristics:(id)characteristics withCompletionHandler:(id /* block */)handler queue:(id)queue;
- (void)_enableEvents:(BOOL)events forCharacteristics:(id)characteristics withCompletionHandler:(id /* block */)handler queue:(id)queue;
- (void)_enableEvent:(BOOL)event forCharacteristic:(id)characteristic withCompletionHandler:(id /* block */)handler queue:(id)queue;
- (void)_performEnableEvent:(BOOL)event toCharacteristic:(id)characteristic completionHandler:(id /* block */)handler;
- (void)_enableEvent:(BOOL)event toCharacteristic:(id)characteristic completionHandler:(id /* block */)handler;
- (void)_handleHAPNotificationStateUpdateForCharacteristic:(id)characteristic error:(id)error;
- (void)_handleEventIndicationForCharacteristic:(id)characteristic;
- (void)_configureBroadcastKeyGeneration:(unsigned char)generation service:(id)service withCompletion:(id /* block */)completion;
- (void)configureCharacteristics:(id)characteristics queue:(id)queue withCompletionHandler:(id /* block */)handler;
- (void)_configureCharacteristics:(id)characteristics queue:(id)queue withCompletionHandler:(id /* block */)handler;
- (void)_enableBroadcastEvent:(BOOL)event interval:(unsigned long long)interval forCharacteristic:(id)characteristic completionHandler:(id /* block */)handler;
- (void)startPairingWithRequest:(id)request;
- (void)_checkForAuthPrompt:(BOOL)prompt;
- (void)_getPairingFeaturesWithCompletionHandler:(id /* block */)handler;
- (BOOL)_parsePairingFeaturesCharacteristic:(id)characteristic authMethod:(unsigned long long *)method error:(id *)error;
- (void)continuePairingAfterAuthPrompt;
- (BOOL)stopPairingWithError:(id *)error;
- (void)_handlePairSetupSessionExchangeData:(id)data;
- (void)_handlePairingSetupCodeRequestWithCompletionHandler:(id /* block */)handler;
- (BOOL)tryPairingPassword:(id)password onboardingSetupPayloadString:(id)string error:(id *)error;
- (void)_pairingCompletedWithError:(id)error;
- (void)addPairing:(id)pairing completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)removePairing:(id)pairing completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (BOOL)removePairingForCurrentControllerOnQueue:(id)queue completion:(id /* block */)completion;
- (BOOL)removePairingForCurrentControllerOnQueue:(id)queue completion:(id /* block */)completion serverPairingCompletion:(id /* block */)completion;
- (void)listPairingsWithCompletionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_sendPairingRequestData:(id)data completionHandler:(id /* block */)handler;
- (unsigned long long)_getPairSetupType;
- (void)identifyWithCompletion:(id /* block */)completion;
- (id)_pendingRequestForCharacteristic:(id)characteristic;
- (id)_pendingResponseForRequest:(id)request;
- (void)_sendRequest:(id)request shouldPrioritize:(BOOL)prioritize responseHandler:(id /* block */)handler;
- (void)_reallySendRequest:(id)request completionHandler:(id /* block */)handler;
- (unsigned long long)_maximumControlWriteLengthForRequest:(id)request;
- (void)_sendControlPacket:(id)packet forRequest:(id)request completionHandler:(id /* block */)handler;
- (void)_sendData:(id)data toCharacteristic:(id)characteristic completionHandler:(id /* block */)handler;
- (void)_handleWriteCompletionForCharacteristic:(id)characteristic error:(id)error;
- (void)_requestResponseForRequest:(id)request;
- (void)_handleResponseData:(id)data fromCharacteristic:(id)characteristic error:(id)error;
- (void)_sendProtocolInfoServiceExchangeData:(id)data completion:(id /* block */)completion;
- (void)_enqueueRequest:(id)request shouldPrioritize:(BOOL)prioritize;
- (unsigned long long)_outstandingRequests;
- (void)_suspendAllOperations;
- (void)_resumeAllOperations;
- (void)_cancelAllQueuedOperationsWithError:(id)error;
- (void)evaluateConnectionStateForOperation:(long long)operation block:(id /* block */)block;
- (void)_invokeOperationsReceivedDuringConnectionStateChangeWithError:(id)error;
- (BOOL)isSecuritySessionOpen;
- (void)setSecuritySessionOpen:(BOOL)open;
- (void)_establishSecureSession;
- (void)_handleSecuritySessionSetupExchangeData:(id)data;
- (id)protocolInfoServiceSignatureCharacteristics;
- (id)_encryptDataAndGenerateAuthTag:(id)tag error:(id *)error;
- (id)_decryptData:(id)data error:(id *)error;
- (void)connectWithCompletionHandler:(id /* block */)handler;
- (void)_cancelConnectionWithError:(id)error;
- (void)_disconnectWithDisconnectionError:(id)error completionHandler:(id /* block */)handler;
- (void)updateConnectionIdleTime:(unsigned char)time;
- (void)_updateConnectionIdleTime:(unsigned char)time;
- (void)_restartConnectionIdleTimer:(double)timer;
- (void)handleConnectionWithPeripheral:(id)peripheral withError:(id)error;
- (void)_handleConnectionWithError:(id)error;
- (BOOL)isReadyForOperation:(long long)operation;
- (void)handleDisconnectionWithError:(id)error completionHandler:(id /* block */)handler;
- (void)_kickConnectionIdleTimer;
- (void)_resumeConnectionIdleTimer;
- (void)_suspendConnectionIdleTimer;
- (void)_handleConnectionIdleTimeout;
- (BOOL)isBLELinkConnected;
- (BOOL)doesPeriodicSessionChecks;
- (unsigned long long)sessionCheckInterval;
- (unsigned long long)numActiveSessionClients;
- (void)generateBroadcastKey:(unsigned char)key queue:(id)queue withCompletionHandler:(id /* block */)handler;
- (void)_generateBroadcastKey:(unsigned char)key queue:(id)queue withCompletionHandler:(id /* block */)handler;
- (BOOL)_validateGeneratedBroadcastKey:(id)key;
- (void)_notifyDelegateOfReceivedEncryptedAuthenticatedData:(id)data forCharacteristic:(id)characteristic;
- (void)_notifyDelegateOfReceivedPlaintextData:(id)data forCharacteristic:(id)characteristic;
- (void)_notifyDelegateOfSentEncryptedAuthenticatedData:(id)data forCharacteristic:(id)characteristic;
- (void)_notifyDelegateOfSentPlaintextData:(id)data forCharacteristic:(id)characteristic;
- (void)peripheral:(id)peripheral didDiscoverServices:(id)services;
- (void)peripheral:(id)peripheral didModifyServices:(id)services;
- (void)peripheral:(id)peripheral didDiscoverCharacteristicsForService:(id)service error:(id)error;
- (void)peripheral:(id)peripheral didDiscoverDescriptorsForCharacteristic:(id)characteristic error:(id)error;
- (void)peripheral:(id)peripheral didUpdateValueForDescriptor:(id)descriptor error:(id)error;
- (void)peripheral:(id)peripheral didUpdateValueForCharacteristic:(id)characteristic error:(id)error;
- (void)peripheral:(id)peripheral didWriteValueForCharacteristic:(id)characteristic error:(id)error;
- (void)peripheral:(id)peripheral didUpdateNotificationStateForCharacteristic:(id)characteristic error:(id)error;
- (void)controlOutputStream:(id)stream didReceiveRequestToSendControlPacket:(id)packet completionHandler:(id /* block */)handler;
- (void)controlOutputStreamDidOpen:(id)open;
- (void)controlOutputStream:(id)stream didCloseWithError:(id)error;
- (void)controlOutputStreamDidComplete:(id)complete;
- (void)pairSetupSession:(id)session didReceiveSetupExchangeData:(id)data;
- (id)pairSetupSession:(id)session didReceiveLocalPairingIdentityRequestWithError:(id *)error;
- (BOOL)pairSetupSession:(id)session didPairWithPeer:(id)peer error:(id *)error;
- (void)pairSetupSession:(id)session didStopWithError:(id)error;
- (void)pairSetupSession:(id)session didReceiveProductData:(id)data;
- (void)pairSetupSession:(id)session didReceiveSetupCodeRequestWithCompletionHandler:(id /* block */)handler;
- (void)pairSetupSessionDidReceiveInvalidSetupCode:(id)code;
- (BOOL)pairSetupSession:(id)session didReceiveBackoffRequestWithTimeInterval:(double)interval;
- (void)getAccessoryInfo:(id /* block */)info;
- (BOOL)_validateProtocolInfo:(id)info;
- (void)authenticateAccessory;
- (void)continueAuthAfterValidation:(BOOL)validation;
- (void)provisionToken:(id)token;
- (void)tearDownSessionOnAuthCompletion;
- (void)_continuePairingAfterMFiCertValidation;
- (void)_notifyDelegatesPairingStopped:(id)stopped;
- (void)_notifyDelegatesOfConnectionState:(BOOL)state withError:(id)error;
- (void)authSession:(id)session sendAuthExchangeData:(id)data;
- (void)authSession:(id)session validateUUID:(id)uuid token:(id)token;
- (void)authSession:(id)session authenticateUUID:(id)uuid token:(id)token;
- (void)authSession:(id)session confirmUUID:(id)uuid token:(id)token;
- (void)authSession:(id)session authComplete:(id)complete;
- (void)submitPairVerifyMetricWithError:(id)error;
- (id)securitySession:(id)session didReceiveLocalPairingIdentityRequestWithError:(id *)error;
- (id)securitySession:(id)session didReceiveRequestForPeerPairingIdentityWithIdentifier:(id)identifier error:(id *)error;
- (void)securitySession:(id)session didReceiveSetupExchangeData:(id)data;
- (void)securitySessionIsOpening:(id)opening;
- (void)securitySessionDidOpen:(id)open;
- (BOOL)_shouldIgnoreRetryDiscoveryError:(id)error;
- (void)_updateLastKeyBagIdentityIndexFailingPVWithError:(id)error;
- (void)securitySession:(id)session didCloseWithError:(id)error;
- (void)timerDidFire:(id)fire;
- (void)disconnect;
- (BOOL)isVerified;
- (BOOL)isBadSetupCode;
- (BOOL)isPairing;
@end

#endif /* _HAPAccessoryServerBTLE200_h */
