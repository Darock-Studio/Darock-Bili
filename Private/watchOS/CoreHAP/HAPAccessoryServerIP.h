//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HAPAccessoryServerIP_h
#define HAPAccessoryServerIP_h
@import Foundation;

#include "HAPAccessoryServer.h"
#include "HAPAccessory.h"
#include "HAPAccessoryProtocolInfo.h"
#include "HAPAccessoryServerBookkeeping.h"
#include "HAPAccessoryServerBrowserIP.h"
#include "HAPAccessoryServerIPConnectionStatistics.h"
#include "HAPAccessoryServerMetricProtocol-Protocol.h"
#include "HAPAuthSession.h"
#include "HAPAuthSessionDelegate-Protocol.h"
#include "HAPHTTPClient.h"
#include "HAPHTTPClientDebugDelegate-Protocol.h"
#include "HAPHTTPClientDelegate-Protocol.h"
#include "HAPSocketInfo.h"
#include "HAPWACAccessory.h"
#include "HAPWACAccessoryClientDelegate-Protocol.h"
#include "HMFNetMonitorDelegate-Protocol.h"
#include "HMFTimerDelegate-Protocol.h"

@class BOOL *, HMFBlockOperation, HMFNetAddress, HMFNetMonitor, HMFTimer, NSArray, NSData, NSDate, NSDictionary, NSMutableArray, NSOperationQueue, NSString;

@interface HAPAccessoryServerIP : HAPAccessoryServer<HAPAccessoryServerMetricProtocol, HAPHTTPClientDelegate, HAPHTTPClientDebugDelegate, HMFTimerDelegate, HAPAuthSessionDelegate, HMFNetMonitorDelegate, HAPWACAccessoryClientDelegate> {
  /* instance variables */
  struct PairingSessionPrivate * _pairingSession;
  unsigned long long _featureFlags;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  long long _idleTimerActiveSessions;
  BOOL _retryingPairSetup;
  BOOL _securitySessionOpen;
}

@property (readonly, copy) NSString *shortDescription;
@property (readonly, copy) NSString *privateDescription;
@property (readonly, copy) NSString *propertyDescription;
@property (readonly, copy, nonatomic) NSArray *attributeDescriptions;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long metricHAPIPInvalidationCount;
@property (nonatomic) unsigned long long metricHAPIPHTTPEventsCount;
@property (nonatomic) unsigned long long metricHAPIPHTTPRequestsCount;
@property (nonatomic) unsigned long long metricHAPIPHTTPResponsesCount;
@property (nonatomic) double minimumReachabilityPingInterval;
@property (retain, nonatomic) NSDate *reachabilityStartTime;
@property (retain, nonatomic) HAPSocketInfo *pendingConnectionSocketInfo;
@property (retain, nonatomic) HAPAccessoryServerBookkeeping *discoveryBookkeeping;
@property (retain, nonatomic) NSDictionary *bonjourDeviceInfo;
@property (nonatomic) BOOL hasUpdatedBonjour;
@property (weak, nonatomic) HAPAccessoryServerBrowserIP *browser;
@property (retain, nonatomic) NSArray *ipServices;
@property (retain, nonatomic) NSMutableArray *queuedOperations;
@property (retain, nonatomic) HAPAccessory *primaryAccessoryForServer;
@property (copy, nonatomic) NSString *sourceVersion;
@property (nonatomic) unsigned long long statusFlags;
@property (readonly, nonatomic) HAPAuthSession *authSession;
@property (retain, nonatomic) HAPAccessoryProtocolInfo *authenticatedProtocolInfo;
@property (nonatomic) BOOL authenticated;
@property (copy, nonatomic) id /* block */ pairVerifyCompletionBlock;
@property (copy, nonatomic) id /* block */ netServiceResolveCompletionBlock;
@property (nonatomic) BOOL establishingSecureConnection;
@property (nonatomic) BOOL hasAttributeDatabase;
@property (nonatomic) BOOL econnresetRetryInProgress;
@property (retain, nonatomic) HMFBlockOperation *pairOperation;
@property (readonly, nonatomic) NSOperationQueue *clientOperationQueue;
@property (nonatomic) BOOL wacAccessory;
@property (nonatomic) BOOL wacComplete;
@property (nonatomic) BOOL wacLegacy;
@property (nonatomic) BOOL preSoftAuthWacStarted;
@property (nonatomic) BOOL postSoftAuthWacStarted;
@property (nonatomic) BOOL invalidated;
@property (nonatomic) BOOL continuingLegacyWACpairing;
@property (nonatomic) BOOL wacStarted;
@property (retain, nonatomic) HMFTimer *bonjourEventTimer;
@property (nonatomic) BOOL hasStartedPairing;
@property (readonly, nonatomic) HMFNetMonitor *networkMonitor;
@property (nonatomic) BOOL pairingRequestPending;
@property (nonatomic) BOOL tokenValidationPending;
@property (nonatomic) BOOL handlingInvalidSetupCode;
@property (nonatomic) int cancelPairingErr;
@property (retain, nonatomic) HMFTimer *reachabilityEventTimer;
@property (retain, nonatomic) HMFTimer *connectionIdleTimer;
@property double disconnectOnIdleTimeout;
@property (nonatomic) BOOL bonjourDiscoveryPending;
@property (nonatomic) unsigned long long abruptDisconnectionCounter;
@property (retain, nonatomic) HAPAccessoryServerIPConnectionStatistics *ipConnectionStatistics;
@property (retain, nonatomic) HAPHTTPClient *httpClient;
@property (readonly, nonatomic) HAPWACAccessory *hapWACAccessory;
@property (nonatomic) BOOL unitTest_establishedSession;
@property (readonly, copy, nonatomic) NSString *model;
@property (readonly) BOOL wacNeeded;
@property (copy, nonatomic) NSData *token;
@property (readonly, copy, nonatomic) HMFNetAddress *peerAddress;
@property (readonly, copy, nonatomic) HMFNetAddress *peerAddressEx;
@property (readonly, nonatomic) NSString *peerEndpointDescription;
@property (readonly, nonatomic) HAPSocketInfo *currentSocketInfo;
@property (readonly, copy, nonatomic) NSString *identifier;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)logCategory;
+ (void)initialize;
+ (id)sharedPairOperationQueue;
+ (id)_parseSerializedAccessoryDictionary:(id)dictionary server:(id)server;

/* instance methods */
- (void)incrementHAPIPInvalidationCount;
- (void)incrementHAPIPHTTPRequestsCount;
- (void)incrementHAPIPHTTPResponsesCount;
- (void)incrementHAPIPHTTPEventsCount;
- (id)readAndResetHAPMetrics:(BOOL)hapmetrics;
- (void)processPendingBonjourRemoveEvents;
- (void)requestResource:(id)resource queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_requestResource:(id)resource queue:(id)queue completionHandler:(id /* block */)handler;
- (id)initWithKeyStore:(id)store browser:(id)browser discoveryMethod:(unsigned long long)method;
- (id)initWithKeyStore:(id)store browser:(id)browser;
- (id)initWithBonjourDeviceInfo:(id)info keyStore:(id)store browser:(id)browser discoveryMethod:(unsigned long long)method;
- (void)_reset;
- (void)invalidateWithCompletionHandler:(id /* block */)handler;
- (void)dealloc;
- (void)_notifyDelegateOfPairingProgress:(long long)progress;
- (void)hapWACAccessoryClient:(id)client wacProgress:(unsigned long long)progress;
- (void)hapWACAccessoryClient:(id)client setBonjourInfo:(id)info;
- (void)addActiveSession:(long long)session;
- (void)removeActiveSession:(long long)session;
- (void)_notifyDelegatesPairingStopped:(id)stopped;
- (void)_notifyDelegatesOfConnectionState:(BOOL)state withError:(id)error;
- (void)_notifyDelegatesOfAddAccessoryFailureWithError:(id)error;
- (void)_notifyDelegateNeedsOwnershipToken;
- (void)_notifyDelegateOfDiscoveryCompletionWithError:(id)error;
- (BOOL)hasBonjourDeviceInfo;
- (BOOL)isEstablishingSecureConnection;
- (BOOL)isBonjourDiscoveryPending;
- (void)updateWithBonjourDeviceInfo:(id)info socketInfo:(id)info;
- (void)_submitStateNumberChangeEvent:(BOOL)event;
- (BOOL)_shouldConnectBasedOnDisconnectOnIdle;
- (void)_updateWithBonjourDeviceInfo:(id)info socketInfo:(id)info;
- (void)bonjourRemoveEvent;
- (id)initWithHAPWACAccessory:(id)hapwacaccessory keystore:(id)keystore browser:(id)browser;
- (void)updateWithHAPWACAccessory:(id)hapwacaccessory;
- (BOOL)isPaired;
- (BOOL)isWacAccessory;
- (BOOL)isWacComplete;
- (BOOL)isWacNeeded;
- (BOOL)isWacLegacy;
- (BOOL)isPreSoftAuthWacStarted;
- (BOOL)isPostSoftAuthWacStarted;
- (void)startReprovisioningWithPairingRequest:(id)request;
- (void)resetPostSoftAuthWAC;
- (void)_invalidateWAC;
- (id)_joinAccessoryNetworkWithCompletion:(id /* block */)completion;
- (void)_pairSetupContinueWAC;
- (void)_pairVerifyStartWAC:(id)wac;
- (void)_continuePairingAfterConfirmingSecureWAC:(id)wac;
- (void)continuePairingUsingWAC;
- (void)_performEasyConfigWithPairingPrompt:(undefined *)prompt performPairSetup:(BOOL)setup isSplit:(BOOL)split completion:(id /* block */)completion;
- (void)_continuePairingUsingWAC;
- (int)_continuePairingWithSetupCode:(id)code;
- (void)_continuePairingAfterWAC:(id)wac;
- (void)_tearDownWAC;
- (void)pairSetupStartSoftAuthWAC;
- (void)createKeysForDataStreamWithKeySalt:(id)salt completionHandler:(id /* block */)handler;
- (id)services;
- (id)primaryAccessory;
- (long long)linkLayerType;
- (long long)linkType;
- (void)discoverAccessories;
- (void)_establishSecureConnectionAndFetchAttributeDatabaseWithReason:(id)reason;
- (id)controllerUsername;
- (void)_isAccessoryPublicKeyPresent:(BOOL *)present registeredWithHomeKit:(BOOL *)kit;
- (void)startPairingWithRequest:(id)request;
- (void)reconfirm;
- (void)continuePairingAfterAuthPrompt;
- (BOOL)tryPairingPassword:(id)password onboardingSetupPayloadString:(id)string error:(id *)error;
- (void)_tearDownSessionWithError:(id)error;
- (void)_tearDownSession;
- (void)_doBonjourReconfirm;
- (BOOL)_matchesError:(id)error withHAPErrorCode:(long long)code;
- (BOOL)_matchesError:(id)error withHAPHMErrorCode:(long long)code;
- (void)_skipReconfirm;
- (void)_tearDownSessionAndReconfirmWithError:(id)error;
- (void)disconnectWithError:(id)error;
- (void)disconnect;
- (BOOL)stopPairingWithError:(id *)error;
- (void)_handleMFiCertValidation;
- (void)_continuePairingAfterMFiCertValidation;
- (void)_error:(id)_error forReadCharacteristicValues:(id)values queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_error:(id)_error forWriteCharacteristicValues:(id)values queue:(id)queue completionHandler:(id /* block */)handler;
- (id /* block */)_queuedReadOperationBlock:(id)block timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_queueReadCharacteristicValues:(id)values timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_insertReadCharacteristicValues:(id)values timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (id /* block */)_queuedWriteOperationBlock:(id)block timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_queueWriteCharacteristicValues:(id)values timeout:(double)timeout queue:(id)queue withCompletionHandler:(id /* block */)handler;
- (void)_insertWriteCharacteristicValues:(id)values timeout:(double)timeout queue:(id)queue withCompletionHandler:(id /* block */)handler;
- (void)_queueAddPairingWithIdentifier:(id)identifier publicKey:(id)key admin:(BOOL)admin queue:(id)queue completion:(id /* block */)completion;
- (void)_queueListPairingWithCompletionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_queueEnableEvents:(BOOL)events forCharacteristics:(id)characteristics withCompletionHandler:(id /* block */)handler queue:(id)queue;
- (void)_processQueuedOperationsWithError:(id)error;
- (void)readCharacteristicValues:(id)values timeout:(double)timeout completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_handleReadECONNRESETError:(id)econnreseterror readCharacteristics:(id)characteristics responses:(id)responses timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_readCharacteristicValues:(id)values timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_handleReadResponseObject:(id)object type:(unsigned long long)type httpStatus:(int)status error:(id)error characteristics:(id)characteristics completion:(id /* block */)completion;
- (void)writeCharacteristicValues:(id)values timeout:(double)timeout completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_writeCharacteristicValues:(id)values timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_handleWriteECONNResetError:(id)error writeRequests:(id)requests responses:(id)responses timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_performWriteValues:(id)values timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_performTimedWriteValues:(id)values timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_performExecuteWriteValues:(id)values prepareIdentifier:(id)identifier timeout:(double)timeout queue:(id)queue completionHandler:(id /* block */)handler;
- (void)_handlePrepareWriteResponseObject:(id)object type:(unsigned long long)type prepareIdentifier:(id)identifier httpStatus:(int)status error:(id)error requestTuples:(id)tuples timeout:(double)timeout queue:(id)queue originalCompletion:(id /* block */)completion completion:(id /* block */)completion;
- (void)_handleWriteResponseObject:(id)object type:(unsigned long long)type httpStatus:(int)status error:(id)error requestTuples:(id)tuples completion:(id /* block */)completion;
- (void)sendPUTRequestToURL:(id)url request:(id)request serializationType:(unsigned long long)type timeout:(double)timeout completionHandler:(id /* block */)handler;
- (void)sendPOSTRequestToURL:(id)url request:(id)request serializationType:(unsigned long long)type completionHandler:(id /* block */)handler;
- (void)sendGETRequestToURL:(id)url timeout:(double)timeout completionHandler:(id /* block */)handler;
- (void)handleHTTPClientUnavailableErrorWithCompletion:(id /* block */)completion serializationType:(unsigned long long)type;
- (void)handleUpdatesForCharacteristics:(id)characteristics stateNumber:(id)number;
- (void)_handleUpdatesForCharacteristics:(id)characteristics stateNumber:(id)number;
- (void)enableEvents:(BOOL)events forCharacteristics:(id)characteristics withCompletionHandler:(id /* block */)handler queue:(id)queue;
- (void)_enableEvents:(BOOL)events forCharacteristics:(id)characteristics withCompletionHandler:(id /* block */)handler queue:(id)queue;
- (void)_handleEventResponseObject:(id)object type:(unsigned long long)type httpStatus:(int)status error:(id)error characteristics:(id)characteristics requestedEventState:(BOOL)state completion:(id /* block */)completion queue:(id)queue;
- (void)httpClient:(id)client didReceiveEvent:(id)event;
- (BOOL)_processEvent:(id)event matchedCharacteristic:(id *)characteristic;
- (BOOL)_parseAndValidateTXTRecord;
- (BOOL)_parseTXTRecordDictionary:(id)dictionary;
- (void)_getAttributeDatabase;
- (void)_parseAttributeDatabase:(id)database transaction:(id)transaction;
- (void)__registerForInternalCharacteristicNotifications;
- (void)_updateProtocolVersionFromPrimaryAccessory:(id)accessory;
- (BOOL)_updateAccessories:(id)accessories;
- (BOOL)isSessionEstablished;
- (BOOL)_isSessionEstablished;
- (BOOL)isSecuritySessionOpen;
- (void)setSecuritySessionOpen:(BOOL)open;
- (void)_invokePairVerifyCompletionBlock:(id)block;
- (void)invokePairVerifyCompletionBlock:(id)block;
- (void)_establishSecureSession;
- (void)httpClientDidCloseConnectionDueToServer:(id)server;
- (void)httpClient:(id)client didReceiveSocketEvent:(unsigned long long)event;
- (int)getBonjourDeviceDNSName:(id *)dnsname;
- (int)_ensureHTTPClientSetUp;
- (int)_ensurePairingSessionIsInitializedWithType:(unsigned int)type;
- (int)_pairSetupStartWithConsentRequired:(BOOL)required;
- (int)_continuePairingAfterAuthPromptWithRetry:(BOOL)retry;
- (int)_handlePairSetupCompletionWithData:(id)data;
- (void)_handlePairSetupAfterM4Callback;
- (int)_promptForSetupCodeWithFlags:(unsigned int)flags delaySeconds:(int)seconds pairingFlags:(unsigned int)flags isWAC:(BOOL)wac;
- (int)_pairSetupTryPassword:(id)password;
- (int)_pairVerifyStartWithRetry:(BOOL)retry;
- (int)_handlePairVerifyCompletionWithData:(id)data;
- (void)_handleSecureSessionClosingWithError:(id *)error status:(int)status data:(id)data;
- (void)_validateReachabilityTimer;
- (void)timerDidFire:(id)fire;
- (void)networkMonitorIsReachable:(id)reachable;
- (void)networkMonitorIsUnreachable:(id)unreachable;
- (void)getAccessoryInfo:(id /* block */)info;
- (BOOL)_validateProtocolInfo:(id)info;
- (void)validatePairingAuthMethod:(id /* block */)method;
- (void)_validatePairingAuthMethod:(id /* block */)method activity:(id)activity;
- (BOOL)_validateAuthChallengeResponse:(id)response expectedTID:(unsigned char)tid error:(id *)error;
- (void)authenticateAccessory;
- (void)continueAuthAfterValidation:(BOOL)validation;
- (void)provisionToken:(id)token;
- (void)tearDownSessionOnAuthCompletion;
- (void)authSession:(id)session sendAuthExchangeData:(id)data;
- (void)authSession:(id)session validateUUID:(id)uuid token:(id)token;
- (void)authSession:(id)session authenticateUUID:(id)uuid token:(id)token;
- (void)authSession:(id)session confirmUUID:(id)uuid token:(id)token;
- (void)authSession:(id)session authComplete:(id)complete;
- (undefined *)copyPairingIdentityDelegateCallback;
- (undefined *)findPairedPeerDelegateCallback;
- (undefined *)savePairedPeerDelegateCallback;
- (void)addPairing:(id)pairing completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_startAddPairingWithIdentifier:(id)identifier publicKey:(id)key admin:(BOOL)admin queue:(id)queue completion:(id /* block */)completion;
- (void)removePairing:(id)pairing completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_removePairingWithIdentifier:(id)identifier publicKey:(id)key queue:(id)queue completion:(id /* block */)completion;
- (void)_establishSecureSessionAndRemovePairing:(id)pairing queue:(id)queue completion:(id /* block */)completion;
- (void)_sendRemovePairingWithData:(id)data queue:(id)queue completion:(id /* block */)completion;
- (void)_handlePairingsResponseObject:(id)object type:(unsigned long long)type httpStatus:(int)status httpError:(id)error removeRequest:(BOOL)request completionQueue:(id)queue completionBlock:(id /* block */)block;
- (BOOL)removePairingForCurrentControllerOnQueue:(id)queue completion:(id /* block */)completion;
- (void)listPairingsWithCompletionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_listPairingsWithCompletionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)_handleListPairingsResponseObject:(id)object type:(unsigned long long)type httpStatus:(int)status httpError:(id)error completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)httpClient:(id)client didReceiveHTTPMessageWithHeaders:(id)headers body:(id)body;
- (void)httpClient:(id)client willSendHTTPMessageWithHeaders:(id)headers body:(id)body;
- (void)identifyWithCompletion:(id /* block */)completion;
- (void)startPing;
- (void)stopPing;
- (BOOL)pingSupported;
- (void)_stopReachabilityTimer;
- (void)_stopReachability;
- (double)_getReachabilityTimeoutValueWithSleepInterval:(id)interval;
- (double)_getReachabilityTimeoutValue;
- (void)_startReachability;
- (void)_indicateSessionActivityWithReason:(id)reason;
- (void)_doReachabilityWithError:(id)error forAccessory:(id)accessory;
- (void)_doPollForAccessory:(id)accessory;
- (void)pollAccessory;
- (void)_accessoryDidBecomeUnreachable:(id)unreachable;
- (BOOL)_delegateRespondsToSelector:(SEL)selector;
- (void)updateActiveDisconnectOnIdleTimeout:(double)timeout;
- (void)_handleConnectionIdleTimeout;
- (void)_kickConnectionIdleTimer;
- (void)_startConnectionIdleTimer;
- (void)_suspendConnectionIdleTimer;
- (void)disconnectOnIdleUpdated;
- (BOOL)isContinuingLegacyWACpairing;
- (BOOL)isWacStarted;
- (BOOL)isPairingRequestPending;
- (BOOL)isTokenValidationPending;
- (BOOL)isHandlingInvalidSetupCode;
@end

#endif /* HAPAccessoryServerIP_h */
