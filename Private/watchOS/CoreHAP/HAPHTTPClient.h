//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HAPHTTPClient_h
#define HAPHTTPClient_h
@import Foundation;

#include "HMFObject.h"
#include "HAPCoreUtilsHTTPClient-Protocol.h"
#include "HAPHTTPClientDebugDelegate-Protocol.h"
#include "HAPHTTPClientDelegate-Protocol.h"
#include "HAPSocketInfo.h"
#include "HMFLogging-Protocol.h"

@class HMFNetAddress, NSError, NSString;
@protocol OS_dispatch_queue;

@interface HAPHTTPClient : HMFObject<HAPHTTPClientDebugDelegate, HMFLogging> {
  /* instance variables */
  NSObject<HAPCoreUtilsHTTPClient> *_httpClient;
}

@property (copy, nonatomic) NSString *dnsName;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (weak, nonatomic) NSObject<HAPHTTPClientDelegate> *delegate;
@property (weak, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property (weak, nonatomic) NSObject<HAPHTTPClientDebugDelegate> *debugDelegate;
@property (weak, nonatomic) NSObject<OS_dispatch_queue> *debugDelegateQueue;
@property (nonatomic) BOOL invalidateRequested;
@property (nonatomic) BOOL invalidated;
@property (retain, nonatomic) NSString *wakeAddress;
@property (readonly, nonatomic) HAPSocketInfo *pendingConnectionSocketInfo;
@property (readonly, nonatomic) HAPSocketInfo *peerSocketInfo;
@property (readonly, nonatomic) long long port;
@property (readonly, nonatomic) HMFNetAddress *peerAddress;
@property (readonly, nonatomic) HMFNetAddress *peerAddressEx;
@property (readonly, nonatomic) NSString *peerEndpointDescription;
@property (retain, nonatomic) NSError *invalidateReason;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)logCategory;

/* instance methods */
- (id)initWithDNSName:(id)dnsname queue:(id)queue;
- (id)initWithDNSName:(id)dnsname port:(long long)port eventsEnabled:(BOOL)enabled queue:(id)queue;
- (id)initWithDNSName:(id)dnsname port:(long long)port eventsEnabled:(BOOL)enabled queue:(id)queue wakeAddress:(id)address;
- (id)initWithDNSName:(id)dnsname port:(long long)port eventsEnabled:(BOOL)enabled queue:(id)queue wakeAddress:(id)address dependencyFactory:(id)factory;
- (id)initWithSocketInfo:(id)info eventsEnabled:(BOOL)enabled queue:(id)queue wakeAddress:(id)address;
- (void)dealloc;
- (int)getHttpClientPeerAddress:(struct sockaddr_storage { unsigned char x0; unsigned char x1; char x2[6] long long x3; char x4[112] } *)address;
- (void)setDelegate:(id)delegate queue:(id)queue;
- (void)setDebugDelegate:(id)delegate queue:(id)queue;
- (int)_initializeCoreUtilsHTTPClientWithPort:(long long)port withEventsEnabled:(BOOL)enabled factory:(id)factory;
- (id)_connectionDestination;
- (BOOL)_supportsWoL;
- (BOOL)enableUAPSessionSecurityWithReadKey:(unsigned char x[32])key writeKey:(unsigned char x[32])key error:(id *)error;
- (void)invalidateWithError:(id)error;
- (void)invalidate;
- (void)sendGETRequestToURL:(id)url timeout:(double)timeout completionHandler:(id /* block */)handler;
- (void)sendPUTRequestToURL:(id)url withRequestObject:(id)object serializationType:(unsigned long long)type timeout:(double)timeout completionHandler:(id /* block */)handler;
- (void)sendPOSTRequestToURL:(id)url withRequestObject:(id)object serializationType:(unsigned long long)type completionHandler:(id /* block */)handler;
- (void)sendDELETERequestToURL:(id)url withRequestObject:(id)object serializationType:(unsigned long long)type completionHandler:(id /* block */)handler;
- (void)_sendHTTPRequestToURL:(id)url withMethod:(int)method requestObject:(id)object serializationType:(unsigned long long)type timeout:(double)timeout activity:(id)activity completionHandler:(id /* block */)handler;
- (void)_handleHTTPResponseForMessage:(struct HTTPMessagePrivate { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; struct HTTPMessagePrivate * x1; struct { char x0[8192] unsigned long long x1; char * x2; unsigned long long x3; char * x4; unsigned long long x5; int x6; char * x7; unsigned long long x8; struct { char * x0; unsigned long long x1; char * x2; unsigned long long x3; char * x4; unsigned long long x5; char * x6; unsigned long long x7; char * x8; unsigned long long x9; char * x10; unsigned long long x11; char * x12; unsigned long long x13; char * x14; char * x15; char * x16; unsigned long long x17; char * x18; unsigned long long x19; } x9; char * x10; unsigned long long x11; int x12; char * x13; unsigned long long x14; unsigned char x15; unsigned long long x16; unsigned char x17; int x18; } x2; unsigned char x3; int x4; unsigned char x5; char * x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned char x10[1000] char * x11; struct  * x12; char * x13; unsigned long long x14; struct iovec { void * x150; unsigned long long x1; } x[2] struct iovec * x16; int x17; unsigned long long x18; int x19; int x20; int x21; void * x22; void * x23; void * x24; void * x25; void * x26; void * x27; undefined * x28; undefined * x29; id /* block */ x30; int x31; unsigned char x32; long long x33; char * x34; int x35; unsigned long long x36; unsigned int x37; } *)message completionHandler:(id /* block */)handler;
- (id)_serializeUAPJSONObject:(id)uapjsonobject error:(id *)error;
- (id)_deserializeUAPJSONData:(id)uapjsondata error:(id *)error;
- (BOOL)_delegateRespondsToSelector:(SEL)selector;
- (BOOL)_debugDelegateRespondsToSelector:(SEL)selector;
- (void)httpClient:(id)client didReceiveHTTPMessageWithHeaders:(id)headers body:(id)body;
- (void)httpClient:(id)client willSendHTTPMessageWithHeaders:(id)headers body:(id)body;
- (id)logIdentifier;
- (BOOL)isInvalidated;
@end

#endif /* HAPHTTPClient_h */
