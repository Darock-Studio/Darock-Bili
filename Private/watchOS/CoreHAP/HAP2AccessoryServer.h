//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HAP2AccessoryServer_h
#define HAP2AccessoryServer_h
@import Foundation;

#include "HAP2LoggingObject.h"
#include "HAP2Accessory-Protocol.h"
#include "HAP2AccessoryServer-Protocol.h"
#include "HAP2AccessoryServerBrowserPrivate-Protocol.h"
#include "HAP2AccessoryServerControllerPrivate-Protocol.h"
#include "HAP2AccessoryServerDelegate-Protocol.h"
#include "HAP2AccessoryServerMetadata-Protocol.h"
#include "HAP2AccessoryServerPairingDriver-Protocol.h"
#include "HAP2AccessoryServerPairingDriverDelegate-Protocol.h"
#include "HAP2AccessoryServerPrivate-Protocol.h"
#include "HAP2Cancelable-Protocol.h"
#include "HAP2PairedAccessoryServerPrivate-Protocol.h"
#include "HAP2PropertyLock.h"
#include "HAP2SerializedOperationQueue.h"
#include "HAP2UnpairedAccessoryServerPairDelegate-Protocol.h"
#include "HAP2UnpairedAccessoryServerPrivate-Protocol.h"
#include "HAPAccessoryReachabilityClient-Protocol.h"
#include "HAPAccessoryReachabilityDelegate-Protocol.h"
#include "HAPAccessoryReachabilityProfile-Protocol.h"
#include "HAPDeviceID.h"

@class HMFVersion, NSArray, NSBackgroundActivityScheduler, NSData, NSString;

@interface HAP2AccessoryServer : HAP2LoggingObject<HAP2PairedAccessoryServerPrivate, HAPAccessoryReachabilityDelegate, HAP2UnpairedAccessoryServerPrivate, HAP2AccessoryServerPairingDriverDelegate, HAP2AccessoryServerPrivate, HAP2AccessoryServer> {
  /* instance variables */
  BOOL _internallyPaired;
  NSObject<HAP2AccessoryServerMetadata> *_currentMetadata;
  NSArray *_privateAccessories;
  NSString *_pairedName;
  HMFVersion *_pairedProtocolVersion;
  NSObject<HAP2Cancelable> *_outstandingUpdateAccessoriesRequest;
  NSObject<HAP2AccessoryServerPairingDriver> *_internalPairingDriver;
  NSObject<HAP2UnpairedAccessoryServerPairDelegate> *_pairDelegate;
  NSObject<HAPAccessoryReachabilityClient> *_reachability;
  NSObject<HAPAccessoryReachabilityProfile> *_reachabilityProfile;
  NSBackgroundActivityScheduler *_backgroundScheduler;
  HAP2PropertyLock *_propertyLock;
}

@property (readonly, weak, nonatomic) NSObject<HAP2AccessoryServerBrowserPrivate> *browser;
@property (readonly, nonatomic) NSObject<HAP2AccessoryServerControllerPrivate> *controller;
@property (readonly, nonatomic) HAP2SerializedOperationQueue *operationQueue;
@property (retain, nonatomic) NSString *productData;
@property (weak, nonatomic) NSObject<HAP2AccessoryServerDelegate> *delegate;
@property (readonly, nonatomic) unsigned long long connectionState;
@property (readonly, nonatomic) BOOL hasDiscoveryAdvertisement;
@property (readonly, copy, nonatomic) NSString *reachabilityChangedReason;
@property (readonly, nonatomic) double sessionCheckInterval;
@property (readonly, nonatomic) HAPDeviceID *deviceID;
@property (readonly, nonatomic) BOOL hasPairings;
@property (readonly, nonatomic) HMFVersion *protocolVersion;
@property (readonly, nonatomic) NSString *name;
@property (readonly, nonatomic) NSString *model;
@property (readonly, nonatomic) unsigned long long category;
@property (readonly, nonatomic) unsigned short stateNumber;
@property (readonly, nonatomic) unsigned short configNumber;
@property (readonly, nonatomic) NSData *setupHash;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL paired;
@property (readonly, nonatomic) NSObject<HAP2Accessory> *primaryAccessory;
@property (readonly, nonatomic) NSArray *accessories;
@property (readonly, nonatomic) NSObject<HAP2AccessoryServerPairingDriver> *pairingDriver;
@property (readonly, weak, nonatomic) NSObject<HAP2AccessoryServerBrowserPrivate> *browser;
@property (readonly, nonatomic) NSObject<HAP2AccessoryServerControllerPrivate> *controller;
@property (readonly, nonatomic) HAP2SerializedOperationQueue *operationQueue;
@property (retain, nonatomic) NSString *productData;
@property (weak, nonatomic) NSObject<HAP2AccessoryServerDelegate> *delegate;
@property (readonly, nonatomic) unsigned long long connectionState;
@property (readonly, nonatomic) BOOL hasDiscoveryAdvertisement;
@property (readonly, copy, nonatomic) NSString *reachabilityChangedReason;
@property (readonly, nonatomic) double sessionCheckInterval;
@property (readonly, nonatomic) HAPDeviceID *deviceID;
@property (readonly, nonatomic) BOOL hasPairings;
@property (readonly, nonatomic) HMFVersion *protocolVersion;
@property (readonly, nonatomic) NSString *name;
@property (readonly, nonatomic) NSString *model;
@property (readonly, nonatomic) unsigned long long category;
@property (readonly, nonatomic) unsigned short stateNumber;
@property (readonly, nonatomic) unsigned short configNumber;
@property (readonly, nonatomic) NSData *setupHash;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSString *setupID;
@property (retain, nonatomic) NSString *setupID;
@property (nonatomic) BOOL hasDiscoveryAdvertisement;
@property (copy, nonatomic) NSString *reachabilityChangedReason;
@property (readonly, weak, nonatomic) NSObject<HAP2AccessoryServerBrowserPrivate> *browser;
@property (readonly, nonatomic) NSObject<HAP2AccessoryServerControllerPrivate> *controller;
@property (readonly, nonatomic) HAP2SerializedOperationQueue *operationQueue;
@property (retain, nonatomic) NSString *productData;
@property (weak, nonatomic) NSObject<HAP2AccessoryServerDelegate> *delegate;
@property (readonly, nonatomic) unsigned long long connectionState;
@property (readonly, nonatomic) double sessionCheckInterval;
@property (readonly, nonatomic) HAPDeviceID *deviceID;
@property (readonly, nonatomic) BOOL hasPairings;
@property (readonly, nonatomic) HMFVersion *protocolVersion;
@property (readonly, nonatomic) NSString *name;
@property (readonly, nonatomic) NSString *model;
@property (readonly, nonatomic) unsigned long long category;
@property (readonly, nonatomic) unsigned short stateNumber;
@property (readonly, nonatomic) unsigned short configNumber;
@property (readonly, nonatomic) NSData *setupHash;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)new;
+ (id)unpairedAccessoryServerWithMetadata:(id)metadata browser:(id)browser controller:(id)controller pairingDriver:(id)driver operationQueue:(id)queue;
+ (id)pairedAccessoryServerWithMetadata:(id)metadata browser:(id)browser controller:(id)controller operationQueue:(id)queue;

/* instance methods */
- (id)pairWithDelegate:(id)delegate;
- (id)identifyWithCompletion:(id /* block */)completion;
- (void)becomePairedWithAccessoryServer:(id)server;
- (void)mergeWithNewlyDiscoveredUnpairedAccessoryServer:(id)server;
- (void)pairingDriver:(id)driver didCompleteWithError:(id)error;
- (void)pairingDriver:(id)driver didRejectSetupCodeForAccessory:(id)accessory backoffInterval:(double)interval completion:(id /* block */)completion;
- (void)pairingDriver:(id)driver didRequestLocalPairingIdentityWithCompletion:(id /* block */)completion;
- (void)pairingDriver:(id)driver didSaveRemotePairingIdentity:(id)identity completion:(id /* block */)completion;
- (void)pairingDriver:(id)driver doesRequirePermission:(unsigned long long)permission accessory:(id)accessory completion:(id /* block */)completion;
- (void)pairingDriver:(id)driver doesRequireSetupCodeForAccessory:(id)accessory completion:(id /* block */)completion;
- (void)pairingDriver:(id)driver authenticateSoftwareAuthUUID:(id)uuid token:(id)token completion:(id /* block */)completion;
- (void)pairingDriver:(id)driver confirmSoftwareAuthUUID:(id)uuid token:(id)token completion:(id /* block */)completion;
- (void)pairingDriver:(id)driver didFinishAuthWithError:(id)error;
- (void)pairingDriver:(id)driver validatePairingCert:(id)cert model:(id)model completion:(id /* block */)completion;
- (void)pairingDriver:(id)driver validateSoftwareAuthUUID:(id)uuid token:(id)token model:(id)model completion:(id /* block */)completion;
- (void)_performBackgroundPollWithCompletion:(id /* block */)completion;
- (void)_setBackgroundActivityScheduler:(id)scheduler;
- (BOOL)isPaired;
- (void)clearAccessories;
- (id)unpairWithCompletion:(id /* block */)completion;
- (id)addPairing:(id)pairing completion:(id /* block */)completion;
- (id)removePairing:(id)pairing completion:(id /* block */)completion;
- (id)getPairingsWithCompletion:(id /* block */)completion;
- (id)updateAccessoriesWithReason:(id)reason;
- (BOOL)isConfirming;
- (void)startConfirming;
- (void)stopConfirming;
- (void)becomeUnpairedWithAccessoryServer:(id)server;
- (void)mergeWithNewlyDiscoveredPairedAccessoryServer:(id)server;
- (id)readValuesForCharacteristics:(id)characteristics timeout:(double)timeout completion:(id /* block */)completion;
- (id)writeValuesForCharacteristics:(id)characteristics timeout:(double)timeout completion:(id /* block */)completion;
- (id)enableNotificationsForCharacteristics:(id)characteristics completion:(id /* block */)completion;
- (id)disableNotificationsForCharacteristics:(id)characteristics completion:(id /* block */)completion;
- (void)handleEvents:(id)events;
- (void)handleUpdatedCharacteristicValues:(id)values;
- (void)handleReestablishedSession;
- (void)handleLostDiscoveryAdvertisement;
- (void)handleLostDiscoveryAdvertisementWithWillSleep:(BOOL)sleep;
- (void)handleNetworkChanged;
- (void)closeSession;
- (void)verifyConnection;
- (void)pollAccessory;
- (id)init;
- (void)dealloc;
@end

#endif /* HAP2AccessoryServer_h */
