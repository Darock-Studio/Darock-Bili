//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HAPSystemKeychainStore_h
#define HAPSystemKeychainStore_h
@import Foundation;

#include "HMFObject.h"
#include "HAPKeyStore-Protocol.h"
#include "HAPSystemKeyCountProvider-Protocol.h"
#include "HAPSystemKeychainStore-Protocol.h"
#include "HMFDumpState-Protocol.h"
#include "HMFLogging-Protocol.h"

@class BOOL *, NSString;
@protocol OS_dispatch_queue;

@interface HAPSystemKeychainStore : HMFObject<HAPKeyStore, HMFDumpState, HMFLogging, HAPSystemKeychainStore, HAPSystemKeyCountProvider>

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSString *activeControllerIdentifier;
@property int keychainStoreUpdatedNotificationToken;
@property (nonatomic) BOOL unitTest_enable_hh2;
@property (readonly, nonatomic) NSString *activeControllerPairingIdentifier;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)systemStore;
+ (id)getDictionaryFromGenericData:(id)data;
+ (id)updateAccessoryPairingGenericData:(id)data updatedControllerKeyIdentifier:(id)identifier;
+ (id)serializeDictionary:(id)dictionary;
+ (id)logCategory;
+ (id)viewHintForType:(id)type;

/* instance methods */
- (id)init;
- (void)configure;
- (void)dealloc;
- (id)dumpState;
- (BOOL)isHH2Enabled;
- (void)ensureControllerKeyExistsForAllViews;
- (id)getLocalPairingIdentity:(id *)identity;
- (id)getOrCreateLocalPairingIdentity:(id *)identity;
- (id)_getLocalPairingIdentityAllowingCreation:(BOOL)creation error:(id *)error;
- (BOOL)getControllerPublicKey:(id *)key secretKey:(id *)key username:(id *)username allowCreation:(BOOL)creation error:(id *)error;
- (BOOL)getControllerPublicKey:(id *)key secretKey:(id *)key keyPair:(id *)pair username:(id *)username allowCreation:(BOOL)creation error:(id *)error;
- (int)_getControllerPublicKey:(id *)key secretKey:(id *)key keyPair:(id *)pair username:(id *)username;
- (id)_getControllerKeychainItemError:(int *)error;
- (id)_getControllerKeychainItemForKeyType:(id)type error:(int *)error;
- (BOOL)saveLocalPairingIdentity:(id)identity syncable:(BOOL)syncable error:(id *)error;
- (BOOL)saveHH2PairingIdentity:(id)identity syncable:(BOOL)syncable;
- (int)_createControllerPublicKey:(id *)key secretKey:(id *)key keyPair:(id *)pair username:(id *)username;
- (BOOL)saveKeyPair:(id)pair username:(id)username syncable:(BOOL)syncable error:(id *)error;
- (int)_saveKeyPair:(id)pair username:(id)username syncable:(BOOL)syncable keyType:(id)type;
- (BOOL)deserializeKeyPair:(id)pair publicKey:(id *)key secretKey:(id *)key error:(id *)error;
- (BOOL)getAllAvailableControllerPublicKeys:(id *)keys secretKeys:(id *)keys userNames:(id *)names error:(id *)error;
- (int)_getAllAvailableControllerPublicKeys:(id *)keys secretKeys:(id *)keys userNames:(id *)names;
- (BOOL)updateActiveControllerPairingIdentifier:(id)identifier;
- (BOOL)updateCurrentiCloudIdentifier:(id)identifier controllerPairingIdentifier:(id)identifier error:(id *)error;
- (int)_updateCurrentiCloudIdentifier:(id)identifier controllerPairingIdentifier:(id)identifier;
- (BOOL)getCurrentiCloudIdentifier:(id *)identifier controllerPairingIdentifier:(id *)identifier error:(id *)error;
- (BOOL)removeControllerKeyPairWithError:(id *)error;
- (BOOL)removeControllerKeyPairLeaveTombstone:(BOOL)tombstone error:(id *)error;
- (BOOL)removeControllerKeyPairForIdentifier:(id)identifier leaveTombstone:(BOOL)tombstone error:(id *)error;
- (int)_removeControllerKeyPairForIdentifier:(id)identifier leaveTombstone:(BOOL)tombstone;
- (int)_removeControllerKeyPairForKeyType:(id)type identifier:(id)identifier leaveTombstone:(BOOL)tombstone;
- (id)readPublicKeyForAccessoryName:(id)name registeredWithHomeKit:(BOOL *)kit error:(id *)error;
- (int)_getPublicKey:(id *)key registeredWithHomeKit:(BOOL *)kit forAccessoryName:(id)name;
- (BOOL)savePublicKey:(id)key forAccessoryName:(id)name error:(id *)error;
- (int)_savePublicKey:(id)key forAccessoryName:(id)name;
- (BOOL)establishRelationshipBetweenAccessoryAndControllerKey:(id)key error:(id *)error;
- (BOOL)registerAccessoryWithHomeKit:(id)kit error:(id *)error;
- (BOOL)removeAccessoryKeyForName:(id)name error:(id *)error;
- (BOOL)removeAllAccessoryKeys:(id *)keys;
- (int)_removeAccessoryKeyForName:(id)name;
- (id)auditKeysOfManagedAccessories:(id)accessories;
- (id)_auditKeychainItems:(id)items managedAccessories:(id)accessories;
- (void)_updateKeychainItemToInvisible:(id)invisible;
- (BOOL)_updateKeychainItemWithPlatformIdentifier:(void *)identifier keychainItem:(id)item error:(id *)error;
- (id)_getKeychainItemsForAccessGroup:(id)group type:(id)type account:(id)account shouldReturnData:(BOOL)data error:(int *)error;
- (int)_addKeychainItem:(id)item logDuplicateItemError:(BOOL)error;
- (int)_removeKeychainItem:(id)item leaveTombstone:(BOOL)tombstone;
- (BOOL)savePeripheralIdentifier:(id)identifier forAccessoryIdentifier:(id)identifier protocolVersion:(unsigned long long)version resumeSessionID:(unsigned long long)id error:(id *)error;
- (int)_savePeripheralIdentifier:(id)identifier forAccessoryIdentifier:(id)identifier protocolVersion:(unsigned long long)version resumeSessionID:(unsigned long long)id;
- (BOOL)updatePeripheralIdentifier:(id)identifier forAccessoryIdentifier:(id)identifier protocolVersion:(unsigned long long)version previousVersion:(unsigned long long *)version resumeSessionID:(unsigned long long)id error:(id *)error;
- (BOOL)deletePeripheralIdentifierForAccessoryIdentifier:(id)identifier error:(id *)error;
- (int)_deletePeripheralIdentifierForAccessoryIdentifier:(id)identifier;
- (id)readPeripheralIdentifierForAccessoryIdentifier:(id)identifier protocolVersion:(unsigned long long *)version resumeSessionID:(unsigned long long *)id error:(id *)error;
- (int)_getPeripheralIdentifier:(id *)identifier forAccessoryIdentifier:(id)identifier protocolVersion:(unsigned long long *)version resumeSessionID:(unsigned long long *)id;
- (id)getPeripheralIdentifiersAndAccessoryNames;
- (BOOL)deleteAllPeripheralIdentifiers:(id *)identifiers;
- (int)_deleteAllPeripheralIdentifiers;
- (id)readControllerPairingKeyForAccessory:(id)accessory error:(id *)error;
- (BOOL)getControllerPublicKey:(id *)key secretKey:(id *)key username:(id *)username allowCreation:(BOOL)creation forAccessory:(id)accessory error:(id *)error;
- (BOOL)getControllerPublicKey:(id *)key secretKey:(id *)key keyPair:(id *)pair username:(id *)username allowCreation:(BOOL)creation forAccessory:(id)accessory error:(id *)error;
- (BOOL)_getControllerPublicKey:(id *)key secretKey:(id *)key keyPair:(id *)pair username:(id *)username allowCreation:(BOOL)creation forAccessory:(id)accessory error:(id *)error;
- (BOOL)_getFirstAvailableControllerKeyChainItemForAccount:(id)account publicKey:(id *)key secretKey:(id *)key userName:(id *)name keyPair:(id *)pair error:(id *)error;
- (id)allKeychainItemsForType:(id)type identifier:(id)identifier syncable:(id)syncable error:(id *)error;
- (BOOL)deleteKeychainItem:(id)item error:(id *)error;
- (BOOL)updateKeychainItem:(id)item createIfNeeded:(BOOL)needed error:(id *)error;
- (id)readAccessoryPairingKeyForAccessory:(id)accessory error:(id *)error;
- (BOOL)updateAccessoryPairingKey:(id)key error:(id *)error;
- (BOOL)createAccessoryPairingKey:(id)key error:(id *)error;
- (BOOL)deletePairingKeysForAccessory:(id)accessory error:(id *)error;
- (BOOL)isAccessoryAssociatedWithControllerKey:(id)key controllerID:(id *)id;
- (id)allKeysForType:(id)type error:(id *)error;
- (id)allHH2PairingKeys;
- (id)_allAccessoryPairingKeysIncludingHH2Key:(BOOL)key;
- (id)countAccessoryPairingKeysForMetrics;
- (id)allAccessoryPairingKeys;
- (id)allLegacyAccessoryPairingKeys;
- (BOOL)triggerPreferredHH2ControllerKeyRoll;
- (int)createHH2ControllerKey:(id *)key secretKey:(id *)key keyPair:(id *)pair username:(id *)username;
- (int)createHH2ControllerKeyWithUsername:(id)username publicKey:(id *)key secretKey:(id *)key keyPair:(id *)pair username:(id *)username;
- (BOOL)getOrCreateHH2ControllerKey:(id *)key secretKey:(id *)key keyPair:(id *)pair username:(id *)username;
- (id)getHH2ControllerKeyWithIdentifier:(id)identifier;
- (id)getPreferredHH2ControllerKey;
- (BOOL)_savePairingIdentityToBackUpTableWithIdentifier:(id)identifier serializedKeyPair:(id)pair;
- (BOOL)savePairingIdentityToBackUpTable:(id)table;
- (id)_lookupPairingIdentityFromBackUpTableWithIdentifier:(id)identifier;
- (id)pairingIdentityFromKeychainItem:(id)item;
- (BOOL)isHH2KeyType:(id)type;
- (id)getAssociatedControllerKeyForAccessory:(id)accessory;
- (BOOL)saveAppleMediaAccessoryPairingIdentity:(id)identity;
- (id)pairingIdentityForAppleMediaAccessoryWithUUID:(id)uuid;
- (BOOL)saveAppleMediaAccessorySensorPairingIdentity:(id)identity;
- (id)pairingIdentityForAppleMediaAccessorySensorWithUUID:(id)uuid;
- (id)_chooseHH2KeyFromMultipleHH2Keys:(id)keys;
@end

#endif /* HAPSystemKeychainStore_h */
