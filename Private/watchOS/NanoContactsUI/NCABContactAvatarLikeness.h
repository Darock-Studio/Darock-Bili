//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 378.2.12.0.0
//
#ifndef NCABContactAvatarLikeness_h
#define NCABContactAvatarLikeness_h
@import Foundation;

@class NSData, NSString, UIColor, UIImage;

@interface NCABContactAvatarLikeness : NSObject {
  /* instance variables */
  struct CGSize { double width; double height; } _cachedSize;
  double _cachedScale;
  int _cachedIncludeBackground;
  int _cachedShouldClip;
  UIImage *_cachedImage;
}

@property (nonatomic) unsigned long long type;
@property (retain, nonatomic) NSData *photoImageData;
@property (retain, nonatomic) NSString *stickerName;
@property (retain, nonatomic) NSString *identifier;
@property (readonly) unsigned long long hash;
@property (readonly, nonatomic) NSString *hashString;
@property (retain, nonatomic) UIColor *backgroundColor;
@property (retain, nonatomic) NSString *text;
@property (readonly, nonatomic) NSString *animojiIdentifier;
@property (retain, nonatomic) NSString *photoFilter;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } cropRect;

/* class methods */
+ (id)_filterImageFromData:(id)data filterName:(id)name scale:(double)scale;
+ (void)_drawGradientBackgroundInCGContext:(struct CGContext *)cgcontext circleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect color:(id)color;
+ (void)_drawPlainBackgroundInCGContext:(struct CGContext *)cgcontext circleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect color:(id)color;
+ (void)_drawPastelBackgroundInCGContext:(struct CGContext *)cgcontext circleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect color:(id)color;
+ (id)_imageWithBackgroundColor:(id)color fillStyle:(unsigned long long)style text:(id)text textColor:(id)color textFont:(id)font image:(id)image cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect size:(struct CGSize { double x0; double x1; })size scale:(double)scale shouldClip:(BOOL)clip;
+ (id)_imageWithImageData:(id)data cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect size:(struct CGSize { double x0; double x1; })size scale:(double)scale shouldClip:(BOOL)clip;
+ (id)_imageFromLikeness:(id)likeness memojiImage:(id)image size:(struct CGSize { double x0; double x1; })size scale:(double)scale includeBackground:(BOOL)background shouldClip:(BOOL)clip;
+ (id)monogramLikenessWithText:(id)text backgroundColor:(id)color;
+ (id)monogramLikenessFromContact:(id)contact backgroundColor:(id)color;
+ (id)emojiLikenessWithEmojiString:(id)string backgroundColor:(id)color;
+ (id)photoLikenessWithImageData:(id)data filterName:(id)name cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (id)animojiLikenessForIdentifier:(id)identifier stickerName:(id)name cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect backgroundColor:(id)color;
+ (id)placeholderLikenessWithBackgroundColor:(id)color;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_normalizeRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect size:(struct CGSize { double x0; double x1; })size;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_normalizeRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect imageData:(id)data;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scaleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect size:(struct CGSize { double x0; double x1; })size;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scaleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect image:(id)image;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scaleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect imageData:(id)data;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_integerRectFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (id)likenessFromContact:(id)contact;
+ (void)_imageAndImageDataForLikeness:(id)likeness size:(struct CGSize { double x0; double x1; })size scale:(double)scale completion:(id /* block */)completion;
+ (void)_imageImageDataAndCropRectForLikeness:(id)likeness size:(struct CGSize { double x0; double x1; })size scale:(double)scale completion:(id /* block */)completion;
+ (void)_imageImageDataCropRectAndThumbnailForLikeness:(id)likeness size:(struct CGSize { double x0; double x1; })size scale:(double)scale completion:(id /* block */)completion;
+ (BOOL)_updateMutableContact:(id)contact fromLikeness:(id)likeness imageData:(id)data cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect thumbnailImageData:(id)data;
+ (void)updateMutableContact:(id)contact fromLikeness:(id)likeness completion:(id /* block */)completion;
+ (void)_imageDataAndCropRectFromLikeness:(id)likeness completion:(id /* block */)completion;
+ (unsigned long long)_likenessTypeForContactImageType:(id)type;
+ (void)_likeness:(id)_likeness matchesContact:(id)contact completion:(id /* block */)completion;
+ (id)_contactImagePropertiesFromLikeness:(id)likeness imageData:(id)data cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (struct CGSize { double x0; double x1; })_animojiNominalSize;
+ (id)_contactImagePropertiesFromLikeness:(id)likeness;
+ (void)_contactImageFromLikeness:(id)likeness completion:(id /* block */)completion;
+ (id)_likenessFromContactImage:(id)image;
+ (id)likenessFromContactImage:(id)image;

/* instance methods */
- (void)_invalidateCache;
- (id)initWithType:(unsigned long long)type backgroundColor:(id)color text:(id)text imageData:(id)data;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isEqualToLikeness:(id)likeness;
- (id)photoSwatchImagesWithSize:(struct CGSize { double x0; double x1; })size forFilterNames:(id)names;
- (void)imageWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale includeBackground:(BOOL)background shouldClip:(BOOL)clip completion:(id /* block */)completion;
- (void)imageWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale completion:(id /* block */)completion;
- (id)imageWithSize:(struct CGSize { double x0; double x1; })size scale:(double)scale;
- (id)initMonogramTypeWithBackgroundColor:(id)color text:(id)text;
- (id)initMonogramTypeWithImageData:(id)data;
- (id)initEmojiTypeWithBackgroundColor:(id)color text:(id)text;
- (id)initPhotoTypeWithImageData:(id)data filterName:(id)name cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)initAnimojiTypeWithIdentifier:(id)identifier stickerName:(id)name cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect backgroundColor:(id)color;
- (void)imageDataAndCropRectWithCompletion:(id /* block */)completion;
- (void)matchesContact:(id)contact completion:(id /* block */)completion;
- (void)contactImageWithCompletion:(id /* block */)completion;
- (id)minimalContactImage;
@end

#endif /* NCABContactAvatarLikeness_h */
