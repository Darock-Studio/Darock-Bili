//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 141.0.4.0.0
//
#ifndef GSHALOutputDataElement_h
#define GSHALOutputDataElement_h
@import Foundation;

#include "GSDataElement.h"
#include "GSHALOutputAccelSubDataElement.h"
#include "GSHALOutputAlgsResponseSubDataElement.h"
#include "GSHALOutputPPGSubDataElement.h"

@interface GSHALOutputDataElement : GSDataElement

@property (readonly, nonatomic) unsigned long long timestamp;
@property (readonly, nonatomic) unsigned int index;
@property (readonly, nonatomic) unsigned char timebase;
@property (readonly, nonatomic) GSHALOutputPPGSubDataElement *ppgSubDataElement;
@property (readonly, nonatomic) GSHALOutputAccelSubDataElement *accelSubDataElement;
@property (readonly, nonatomic) GSHALOutputAlgsResponseSubDataElement *algsResponseSubDataElement;

/* class methods */
+ (id)dataElementWithPacket:(struct Packet { struct ContainerHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct PPGSubpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct vector<mimosa::Packet::PPGSample, std::allocator<mimosa::Packet::PPGSample>> { struct PPGSample * x0; struct PPGSample * x1; struct __compressed_pair<mimosa::Packet::PPGSample *, std::allocator<mimosa::Packet::PPGSample>> { struct PPGSample * x0; } x2; } x1; } x1; struct AccelSubpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct vector<mimosa::Packet::AccelSample, std::allocator<mimosa::Packet::AccelSample>> { struct AccelSample * x0; struct AccelSample * x1; struct __compressed_pair<mimosa::Packet::AccelSample *, std::allocator<mimosa::Packet::AccelSample>> { struct AccelSample * x0; } x2; } x1; } x2; struct variant<mimosa::Packet::AlgsResponseV1Subpacket, mimosa::Packet::AlgsResponseV2Subpacket> { struct __impl<mimosa::Packet::AlgsResponseV1Subpacket, mimosa::Packet::AlgsResponseV2Subpacket> { union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, mimosa::Packet::AlgsResponseV1Subpacket, mimosa::Packet::AlgsResponseV2Subpacket> { char x0; struct __alt<0UL, mimosa::Packet::AlgsResponseV1Subpacket> { struct AlgsResponseV1Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct OsmiumState { unsigned short x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; } x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned short x6; unsigned short x7; unsigned char x8; } x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, mimosa::Packet::AlgsResponseV2Subpacket> { char x0; struct __alt<1UL, mimosa::Packet::AlgsResponseV2Subpacket> { struct AlgsResponseV2Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; unsigned long long x1; unsigned long long x2; unsigned int x3; unsigned int x4; unsigned short x5; unsigned char x6; } x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL> x2; } x2; } x0; unsigned int x1; } x0; } x3; struct variant<std::monostate, mimosa::Packet::BeatV1Subpacket, mimosa::Packet::BeatV2Subpacket> { struct __impl<std::monostate, mimosa::Packet::BeatV1Subpacket, mimosa::Packet::BeatV2Subpacket> { union __union<std::__variant_detail::_Trait::_Available, 0UL, std::monostate, mimosa::Packet::BeatV1Subpacket, mimosa::Packet::BeatV2Subpacket> { char x0; struct __alt<0UL, std::monostate> { struct monostate x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, mimosa::Packet::BeatV1Subpacket, mimosa::Packet::BeatV2Subpacket> { char x0; struct __alt<1UL, mimosa::Packet::BeatV1Subpacket> { struct BeatV1Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x1; unsigned char x2; unsigned char x3; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL, mimosa::Packet::BeatV2Subpacket> { char x0; struct __alt<2UL, mimosa::Packet::BeatV2Subpacket> { struct BeatV2Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x1; unsigned long long x2; unsigned char x3; unsigned char x4; BOOL x5; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 3UL> x2; } x2; } x2; } x0; unsigned int x1; } x0; } x4; struct optional<mimosa::Packet::TemperatureSubpacket> { union { char x0; struct TemperatureSubpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; unsigned short x1; short x2; } x1; } x0; BOOL x1; } x5; struct variant<std::monostate, mimosa::Packet::WavelengthV2Subpacket, mimosa::Packet::WavelengthV3Subpacket> { struct __impl<std::monostate, mimosa::Packet::WavelengthV2Subpacket, mimosa::Packet::WavelengthV3Subpacket> { union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, std::monostate, mimosa::Packet::WavelengthV2Subpacket, mimosa::Packet::WavelengthV3Subpacket> { char x0; struct __alt<0UL, std::monostate> { struct monostate x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, mimosa::Packet::WavelengthV2Subpacket, mimosa::Packet::WavelengthV3Subpacket> { char x0; struct __alt<1UL, mimosa::Packet::WavelengthV2Subpacket> { struct WavelengthV2Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct array<mimosa::Packet::WavelengthV2Subpacket::Entry, 6UL> { struct Entry { unsigned int x00; unsigned short x1; } x[6] } x1; unsigned short x2; } x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL, mimosa::Packet::WavelengthV3Subpacket> { char x0; struct __alt<2UL, mimosa::Packet::WavelengthV3Subpacket> { struct WavelengthV3Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct array<mimosa::Packet::WavelengthV3Subpacket::Entry, 9UL> { struct Entry { unsigned int x00; unsigned short x1; } x[9] } x1; unsigned short x2; } x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 3UL> x2; } x2; } x2; } x0; unsigned int x1; } x0; } x6; })packet wallclockOfRTPBoot:(double)rtpboot;
+ (BOOL)validateDataElement:(id)element matchesMimosaPacket:(struct Packet { struct ContainerHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct PPGSubpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct vector<mimosa::Packet::PPGSample, std::allocator<mimosa::Packet::PPGSample>> { struct PPGSample * x0; struct PPGSample * x1; struct __compressed_pair<mimosa::Packet::PPGSample *, std::allocator<mimosa::Packet::PPGSample>> { struct PPGSample * x0; } x2; } x1; } x1; struct AccelSubpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct vector<mimosa::Packet::AccelSample, std::allocator<mimosa::Packet::AccelSample>> { struct AccelSample * x0; struct AccelSample * x1; struct __compressed_pair<mimosa::Packet::AccelSample *, std::allocator<mimosa::Packet::AccelSample>> { struct AccelSample * x0; } x2; } x1; } x2; struct variant<mimosa::Packet::AlgsResponseV1Subpacket, mimosa::Packet::AlgsResponseV2Subpacket> { struct __impl<mimosa::Packet::AlgsResponseV1Subpacket, mimosa::Packet::AlgsResponseV2Subpacket> { union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, mimosa::Packet::AlgsResponseV1Subpacket, mimosa::Packet::AlgsResponseV2Subpacket> { char x0; struct __alt<0UL, mimosa::Packet::AlgsResponseV1Subpacket> { struct AlgsResponseV1Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct OsmiumState { unsigned short x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; } x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned short x6; unsigned short x7; unsigned char x8; } x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, mimosa::Packet::AlgsResponseV2Subpacket> { char x0; struct __alt<1UL, mimosa::Packet::AlgsResponseV2Subpacket> { struct AlgsResponseV2Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; unsigned long long x1; unsigned long long x2; unsigned int x3; unsigned int x4; unsigned short x5; unsigned char x6; } x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL> x2; } x2; } x0; unsigned int x1; } x0; } x3; struct variant<std::monostate, mimosa::Packet::BeatV1Subpacket, mimosa::Packet::BeatV2Subpacket> { struct __impl<std::monostate, mimosa::Packet::BeatV1Subpacket, mimosa::Packet::BeatV2Subpacket> { union __union<std::__variant_detail::_Trait::_Available, 0UL, std::monostate, mimosa::Packet::BeatV1Subpacket, mimosa::Packet::BeatV2Subpacket> { char x0; struct __alt<0UL, std::monostate> { struct monostate x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 1UL, mimosa::Packet::BeatV1Subpacket, mimosa::Packet::BeatV2Subpacket> { char x0; struct __alt<1UL, mimosa::Packet::BeatV1Subpacket> { struct BeatV1Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x1; unsigned char x2; unsigned char x3; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 2UL, mimosa::Packet::BeatV2Subpacket> { char x0; struct __alt<2UL, mimosa::Packet::BeatV2Subpacket> { struct BeatV2Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x1; unsigned long long x2; unsigned char x3; unsigned char x4; BOOL x5; } x0; } x1; union __union<std::__variant_detail::_Trait::_Available, 3UL> x2; } x2; } x2; } x0; unsigned int x1; } x0; } x4; struct optional<mimosa::Packet::TemperatureSubpacket> { union { char x0; struct TemperatureSubpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; unsigned short x1; short x2; } x1; } x0; BOOL x1; } x5; struct variant<std::monostate, mimosa::Packet::WavelengthV2Subpacket, mimosa::Packet::WavelengthV3Subpacket> { struct __impl<std::monostate, mimosa::Packet::WavelengthV2Subpacket, mimosa::Packet::WavelengthV3Subpacket> { union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, std::monostate, mimosa::Packet::WavelengthV2Subpacket, mimosa::Packet::WavelengthV3Subpacket> { char x0; struct __alt<0UL, std::monostate> { struct monostate x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, mimosa::Packet::WavelengthV2Subpacket, mimosa::Packet::WavelengthV3Subpacket> { char x0; struct __alt<1UL, mimosa::Packet::WavelengthV2Subpacket> { struct WavelengthV2Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct array<mimosa::Packet::WavelengthV2Subpacket::Entry, 6UL> { struct Entry { unsigned int x00; unsigned short x1; } x[6] } x1; unsigned short x2; } x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL, mimosa::Packet::WavelengthV3Subpacket> { char x0; struct __alt<2UL, mimosa::Packet::WavelengthV3Subpacket> { struct WavelengthV3Subpacket { struct SubpacketHeader { unsigned long long x0; unsigned int x1; unsigned char x2; } x0; struct array<mimosa::Packet::WavelengthV3Subpacket::Entry, 9UL> { struct Entry { unsigned int x00; unsigned short x1; } x[9] } x1; unsigned short x2; } x0; } x1; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 3UL> x2; } x2; } x2; } x0; unsigned int x1; } x0; } x6; })packet;

/* instance methods */
- (void)_setPropertiesFromDictionary:(id)dictionary;
@end

#endif /* GSHALOutputDataElement_h */
