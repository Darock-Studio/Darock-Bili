//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 40.0.3.0.0
//
#ifndef PKPhysicsWorld_h
#define PKPhysicsWorld_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"

@class NSMutableArray;
@protocol PKPhysicsContactDelegate, {PKContactListener="_vptr$b2ContactListener"^^?"_contacts"@"NSMutableDictionary""_contactDelegate"@"<PKPhysicsContactDelegate>"}, {PKDebugDrawPacket="_linePoints"{vector<PKPoint, std::allocator<PKPoint>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<PKPoint *, std::allocator<PKPoint>>="__value_"^{?}}}"_colors"{vector<PKDebugDrawPacket::color4, std::allocator<PKDebugDrawPacket::color4>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<PKDebugDrawPacket::color4 *, std::allocator<PKDebugDrawPacket::color4>>="__value_"^{?}}}};

@interface PKPhysicsWorld : NSObject<NSSecureCoding> {
  /* instance variables */
  void * _world;
  BOOL _doSleep;
  double _accumulatedDt;
  struct PKContactListener { undefined * *_vptr$b2ContactListener; NSMutableDictionary *_contacts; <PKPhysicsContactDelegate> *_contactDelegate; } _contactListener;
  NSMutableArray *_bodies;
  NSMutableArray *_joints;
  NSMutableArray *_postStepBlocks;
  struct PKDebugDrawPacket { struct vector<PKPoint, std::allocator<PKPoint>> { struct  *__begin_; struct  *__end_; struct __compressed_pair<PKPoint *, std::allocator<PKPoint>> { struct  *__value_; } __end_cap_; } _linePoints; struct vector<PKDebugDrawPacket::color4, std::allocator<PKDebugDrawPacket::color4>> { struct  *__begin_; struct  *__end_; struct __compressed_pair<PKDebugDrawPacket::color4 *, std::allocator<PKDebugDrawPacket::color4>> { struct  *__value_; } __end_cap_; } _colors; } drawPacket;
}

@property (nonatomic) BOOL _doSleep;
@property (retain, nonatomic) NSMutableArray *_bodies;
@property (readonly, nonatomic) void * aether;
@property (readonly, nonatomic) void * _world;
@property (nonatomic) struct b2Vec2 { float x0; float x1; } _gravity;
@property (nonatomic) struct CGVector { double x0; double x1; } gravity;
@property (nonatomic) double speed;
@property (nonatomic) double velocityThreshold;
@property (readonly, nonatomic) BOOL settling;
@property (nonatomic) double settlingLinearVelocityThreshold;
@property (nonatomic) double settlingAngularVelocityThreshold;
@property (nonatomic) double settlingDuration;
@property (nonatomic) NSObject<PKPhysicsContactDelegate> *contactDelegate;

/* class methods */
+ (id)world;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (BOOL)isEqualToWorld:(id)world;
- (void)_runBlockOutsideOfTimeStep:(id /* block */)step;
- (void)debugDraw:(float)draw matrix:(union _GLSKMatrix4 { struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } x0; float x1[16] })matrix showsPhysics:(BOOL)physics showsOutlineInterior:(BOOL)interior showsFields:(BOOL)fields;
- (const void *)debugDrawPacket;
- (void)enumerateBodiesAtPoint:(struct CGPoint { double x0; double x1; })point usingBlock:(id /* block */)block;
- (void)enumerateBodiesInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect usingBlock:(id /* block */)block;
- (void)enumerateBodiesAlongRayStart:(struct CGPoint { double x0; double x1; })start end:(struct CGPoint { double x0; double x1; })end usingBlock:(id /* block */)block;
- (id)bodyAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)bodyInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)bodyAlongRayStart:(struct CGPoint { double x0; double x1; })start end:(struct CGPoint { double x0; double x1; })end;
- (BOOL)isSettling;
- (void)__init__;
- (id)init;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)copy;
- (BOOL)hasBodies;
- (BOOL)hasFields;
- (void)setCollisionDelegate:(id)delegate;
- (id)collisionDelegate;
- (id)bodies;
- (id)joints;
- (void)addBody:(id)body;
- (void)removeBody:(id)body;
- (void)removeAllBodies;
- (void)addJoint:(id)joint;
- (void)removeJoint:(id)joint;
- (void)removeAllJoints;
- (void)addField:(id)field;
- (void)removeField:(id)field;
- (void)removeAllFields;
- (id)sampleFields:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })fields categories:(unsigned int)categories dataSize:(struct CGSize { double x0; double x1; })size;
- (struct CGVector { double x0; double x1; })sampleFields:(struct CGPoint { double x0; double x1; })fields;
- (3)sampleFieldsAt:;
- (struct CGVector { double x0; double x1; })evalForce:(unsigned int)force point:(struct CGPoint { double x0; double x1; })point;
- (BOOL)stepWithTime:(double)time velocityIterations:(unsigned long long)iterations positionIterations:(unsigned long long)iterations;
@end

#endif /* PKPhysicsWorld_h */
