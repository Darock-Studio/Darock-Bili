//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 64562.3.1.1.0
//
#ifndef _DT_GCDAsyncSocket_h
#define _DT_GCDAsyncSocket_h
@import Foundation;

#include "_DT_GCDAsyncReadPacket.h"
#include "_DT_GCDAsyncSocketPreBuffer.h"
#include "_DT_GCDAsyncWritePacket.h"

@class NSData, NSMutableArray, NSString;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface _DT_GCDAsyncSocket : NSObject {
  /* instance variables */
  unsigned int flags;
  unsigned short config;
  int socket4FD;
  int socket6FD;
  int stateIndex;
  NSData *connectInterface4;
  NSData *connectInterface6;
  NSObject<OS_dispatch_queue> *socketQueue;
  NSObject<OS_dispatch_source> *accept4Source;
  NSObject<OS_dispatch_source> *accept6Source;
  NSObject<OS_dispatch_source> *connectTimer;
  NSObject<OS_dispatch_source> *readSource;
  NSObject<OS_dispatch_source> *writeSource;
  NSObject<OS_dispatch_source> *readTimer;
  NSObject<OS_dispatch_source> *writeTimer;
  NSMutableArray *readQueue;
  NSMutableArray *writeQueue;
  _DT_GCDAsyncReadPacket *currentRead;
  _DT_GCDAsyncWritePacket *currentWrite;
  unsigned long long socketFDBytesAvailable;
  _DT_GCDAsyncSocketPreBuffer *preBuffer;
  struct { long long version; void *info; undefined *retain; undefined *release; undefined *copyDescription; } streamContext;
  struct __CFReadStream * readStream;
  struct __CFWriteStream * writeStream;
  struct SSLContext * sslContext;
  _DT_GCDAsyncSocketPreBuffer *sslPreBuffer;
  unsigned long long sslWriteCachedLength;
  int sslErrCode;
  void * IsOnSocketQueueOrTargetQueueKey;
}

@property (weak) id delegate;
@property (retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property BOOL IPv4Enabled;
@property BOOL IPv6Enabled;
@property BOOL IPv4PreferredOverIPv6;
@property (retain) id userData;
@property (readonly) BOOL isDisconnected;
@property (readonly) BOOL isConnected;
@property (readonly) NSString *connectedHost;
@property (readonly) unsigned short connectedPort;
@property (readonly) NSString *localHost;
@property (readonly) unsigned short localPort;
@property (readonly) NSData *connectedAddress;
@property (readonly) NSData *localAddress;
@property (readonly) BOOL isIPv4;
@property (readonly) BOOL isIPv6;
@property (readonly) BOOL isSecure;
@property BOOL autoDisconnectOnClosedReadStream;

/* class methods */
+ (id)gaiError:(int)error;
+ (void)ignore:(id)ignore;
+ (void)startCFStreamThreadIfNeeded;
+ (void)stopCFStreamThreadIfNeeded;
+ (void)cfstreamThread;
+ (void)scheduleCFStreams:(id)cfstreams;
+ (void)unscheduleCFStreams:(id)cfstreams;
+ (id)lookupHost:(id)host port:(unsigned short)port error:(id *)error;
+ (id)hostFromSockaddr4:(const struct sockaddr_in { unsigned char x0; unsigned char x1; unsigned short x2; struct in_addr { unsigned int x0; } x3; char x4[8] } *)sockaddr4;
+ (id)hostFromSockaddr6:(const struct sockaddr_in6 { unsigned char x0; unsigned char x1; unsigned short x2; unsigned int x3; struct in6_addr { union { unsigned char x0[16] unsigned short x1[8] unsigned int x2[4] } x0; } x4; unsigned int x5; } *)sockaddr6;
+ (unsigned short)portFromSockaddr4:(const struct sockaddr_in { unsigned char x0; unsigned char x1; unsigned short x2; struct in_addr { unsigned int x0; } x3; char x4[8] } *)sockaddr4;
+ (unsigned short)portFromSockaddr6:(const struct sockaddr_in6 { unsigned char x0; unsigned char x1; unsigned short x2; unsigned int x3; struct in6_addr { union { unsigned char x0[16] unsigned short x1[8] unsigned int x2[4] } x0; } x4; unsigned int x5; } *)sockaddr6;
+ (id)hostFromAddress:(id)address;
+ (unsigned short)portFromAddress:(id)address;
+ (BOOL)isIPv4Address:(id)address;
+ (BOOL)isIPv6Address:(id)address;
+ (BOOL)getHost:(id *)host port:(unsigned short *)port fromAddress:(id)address;
+ (BOOL)getHost:(id *)host port:(unsigned short *)port family:(char *)family fromAddress:(id)address;
+ (id)CRLFData;
+ (id)CRData;
+ (id)LFData;
+ (id)ZeroData;

/* instance methods */
- (id)init;
- (id)initWithSocketQueue:(id)queue;
- (id)initWithDelegate:(id)delegate delegateQueue:(id)queue;
- (id)initWithDelegate:(id)delegate delegateQueue:(id)queue socketQueue:(id)queue;
- (void)dealloc;
- (void)setDelegate:(id)delegate synchronously:(BOOL)synchronously;
- (void)synchronouslySetDelegate:(id)delegate;
- (void)setDelegateQueue:(id)queue synchronously:(BOOL)synchronously;
- (void)synchronouslySetDelegateQueue:(id)queue;
- (void)getDelegate:(id *)delegate delegateQueue:(id *)queue;
- (void)setDelegate:(id)delegate delegateQueue:(id)queue synchronously:(BOOL)synchronously;
- (void)setDelegate:(id)delegate delegateQueue:(id)queue;
- (void)synchronouslySetDelegate:(id)delegate delegateQueue:(id)queue;
- (BOOL)isIPv4Enabled;
- (BOOL)isIPv6Enabled;
- (BOOL)isIPv4PreferredOverIPv6;
- (BOOL)acceptOnPort:(unsigned short)port error:(id *)error;
- (BOOL)acceptOnInterface:(id)interface port:(unsigned short)port error:(id *)error;
- (BOOL)doAccept:(int)accept;
- (BOOL)preConnectWithInterface:(id)interface error:(id *)error;
- (BOOL)connectToHost:(id)host onPort:(unsigned short)port error:(id *)error;
- (BOOL)connectToHost:(id)host onPort:(unsigned short)port withTimeout:(double)timeout error:(id *)error;
- (BOOL)connectToHost:(id)host onPort:(unsigned short)port viaInterface:(id)interface withTimeout:(double)timeout error:(id *)error;
- (BOOL)connectToAddress:(id)address error:(id *)error;
- (BOOL)connectToAddress:(id)address withTimeout:(double)timeout error:(id *)error;
- (BOOL)connectToAddress:(id)address viaInterface:(id)interface withTimeout:(double)timeout error:(id *)error;
- (void)lookup:(int)lookup didSucceedWithAddress4:(id)address4 address6:(id)address6;
- (void)lookup:(int)lookup didFail:(id)fail;
- (BOOL)connectWithAddress4:(id)address4 address6:(id)address6 error:(id *)error;
- (void)didConnect:(int)connect;
- (void)didNotConnect:(int)connect error:(id)error;
- (void)startConnectTimeout:(double)timeout;
- (void)endConnectTimeout;
- (void)doConnectTimeout;
- (void)closeWithError:(id)error;
- (void)disconnect;
- (void)disconnectAfterReading;
- (void)disconnectAfterWriting;
- (void)disconnectAfterReadingAndWriting;
- (void)maybeClose;
- (id)badConfigError:(id)error;
- (id)badParamError:(id)error;
- (id)errnoErrorWithReason:(id)reason;
- (id)errnoError;
- (id)sslError:(int)error;
- (id)connectTimeoutError;
- (id)readMaxedOutError;
- (id)readTimeoutError;
- (id)writeTimeoutError;
- (id)connectionClosedError;
- (id)otherError:(id)error;
- (id)connectedHost4;
- (id)connectedHost6;
- (unsigned short)connectedPort4;
- (unsigned short)connectedPort6;
- (id)localHost4;
- (id)localHost6;
- (unsigned short)localPort4;
- (unsigned short)localPort6;
- (id)connectedHostFromSocket4:(int)socket4;
- (id)connectedHostFromSocket6:(int)socket6;
- (unsigned short)connectedPortFromSocket4:(int)socket4;
- (unsigned short)connectedPortFromSocket6:(int)socket6;
- (id)localHostFromSocket4:(int)socket4;
- (id)localHostFromSocket6:(int)socket6;
- (unsigned short)localPortFromSocket4:(int)socket4;
- (unsigned short)localPortFromSocket6:(int)socket6;
- (void)getInterfaceAddress4:(id *)address4 address6:(id *)address6 fromDescription:(id)description port:(unsigned short)port;
- (void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)socket;
- (BOOL)usingCFStreamForTLS;
- (BOOL)usingSecureTransportForTLS;
- (void)suspendReadSource;
- (void)resumeReadSource;
- (void)suspendWriteSource;
- (void)resumeWriteSource;
- (void)readDataWithTimeout:(double)timeout tag:(long long)tag;
- (void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned long long)offset tag:(long long)tag;
- (void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned long long)offset maxLength:(unsigned long long)length tag:(long long)tag;
- (void)readDataToLength:(unsigned long long)length withTimeout:(double)timeout tag:(long long)tag;
- (void)readDataToLength:(unsigned long long)length withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned long long)offset tag:(long long)tag;
- (void)readDataToData:(id)data withTimeout:(double)timeout tag:(long long)tag;
- (void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned long long)offset tag:(long long)tag;
- (void)readDataToData:(id)data withTimeout:(double)timeout maxLength:(unsigned long long)length tag:(long long)tag;
- (void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned long long)offset maxLength:(unsigned long long)length tag:(long long)tag;
- (float)progressOfReadReturningTag:(long long *)tag bytesDone:(unsigned long long *)done total:(unsigned long long *)total;
- (void)maybeDequeueRead;
- (void)flushSSLBuffers;
- (void)doReadData;
- (void)doReadEOF;
- (void)completeCurrentRead;
- (void)endCurrentRead;
- (void)setupReadTimerWithTimeout:(double)timeout;
- (void)doReadTimeout;
- (void)doReadTimeoutWithExtension:(double)extension;
- (void)writeData:(id)data withTimeout:(double)timeout tag:(long long)tag;
- (float)progressOfWriteReturningTag:(long long *)tag bytesDone:(unsigned long long *)done total:(unsigned long long *)total;
- (void)maybeDequeueWrite;
- (void)doWriteData;
- (void)completeCurrentWrite;
- (void)endCurrentWrite;
- (void)setupWriteTimerWithTimeout:(double)timeout;
- (void)doWriteTimeout;
- (void)doWriteTimeoutWithExtension:(double)extension;
- (void)startTLS:(id)tls;
- (void)maybeStartTLS;
- (int)sslReadWithBuffer:(void *)buffer length:(unsigned long long *)length;
- (int)sslWriteWithBuffer:(const void *)buffer length:(unsigned long long *)length;
- (void)ssl_startTLS;
- (void)ssl_continueSSLHandshake;
- (void)ssl_shouldTrustPeer:(BOOL)peer stateIndex:(int)index;
- (void)cf_finishSSLHandshake;
- (void)cf_abortSSLHandshake:(id)sslhandshake;
- (void)cf_startTLS;
- (BOOL)createReadAndWriteStream;
- (BOOL)registerForStreamCallbacksIncludingReadWrite:(BOOL)write;
- (BOOL)addStreamsToRunLoop;
- (void)removeStreamsFromRunLoop;
- (BOOL)openStreams;
- (void)markSocketQueueTargetQueue:(id)queue;
- (void)unmarkSocketQueueTargetQueue:(id)queue;
- (void)performBlock:(id /* block */)block;
- (int)socketFD;
- (int)socket4FD;
- (int)socket6FD;
- (struct __CFReadStream *)readStream;
- (struct __CFWriteStream *)writeStream;
- (struct SSLContext *)sslContext;
@end

#endif /* _DT_GCDAsyncSocket_h */
