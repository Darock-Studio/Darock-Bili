//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 472.0.0.0.0
//
#ifndef REBayesianMLModel_h
#define REBayesianMLModel_h
@import Foundation;

#include "REMLModel.h"
#include "REBayesianMLModelProperties-Protocol.h"
#include "REExportedTable.h"

@protocol {BayesianModel="m_rwlock"{_opaque_pthread_rwlock_t="__sig"q"__opaque"[192c]}"m_features"{unordered_map<unsigned long long, Gaussian, BayesianModel::SuperHasher, BayesianModel::SuperHasher, std::allocator<std::pair<const unsigned long long, Gaussian>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, Gaussian>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher>, std::allocator<std::__hash_value_type<unsigned long long, Gaussian>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher>>="__value_"f}}}"m_nFeaturesCount"i"m_nTotalTrue"Q"m_nTotalExamples"Q"m_dSumPredictions"d"m_dLogScore"d"m_dNormalizedLogScore"d"m_dEpsilon"d"m_nModelVersion"i"m_nCalibrationCurveTrue"[10Q]"m_nCalibrationCurveCount"[10Q]"m_maxFeatureCoordinates"Q"m_nNumberOfTraining"Q"m_empty"{Gaussian="m_dPrecision"d"m_dPredicionMean"d}};

@interface REBayesianMLModel : REMLModel<REBayesianMLModelProperties> {
  /* instance variables */
  struct BayesianModel { struct _opaque_pthread_rwlock_t { long long __sig; char x[192] __opaque; } m_rwlock; struct unordered_map<unsigned long long, Gaussian, BayesianModel::SuperHasher, BayesianModel::SuperHasher, std::allocator<std::pair<const unsigned long long, Gaussian>>> { struct __hash_table<std::__hash_value_type<unsigned long long, Gaussian>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher>, std::allocator<std::__hash_value_type<unsigned long long, Gaussian>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher>> { float __value_; } __p3_; } __table_; } m_features; int m_nFeaturesCount; unsigned long long m_nTotalTrue; unsigned long long m_nTotalExamples; double m_dSumPredictions; double m_dLogScore; double m_dNormalizedLogScore; double m_dEpsilon; int m_nModelVersion; unsigned long long x[10] m_nCalibrationCurveTrue; unsigned long long x[10] m_nCalibrationCurveCount; unsigned long long m_maxFeatureCoordinates; unsigned long long m_nNumberOfTraining; struct Gaussian { double m_dPrecision; double m_dPredicionMean; } m_empty; } _model;
  unsigned long long _numberOfFeatures;
}

@property (readonly, nonatomic) REExportedTable *content;

/* class methods */
+ (unsigned long long)featureBitWidth;
+ (unsigned long long)maxFeatureCount;

/* instance methods */
- (id)initWithFeatureSet:(id)set priorMean:(float)mean modelVarianceEpsilon:(float)epsilon;
- (unsigned long long)_maxFeatureCoordinates;
- (void)_trainWithFeatures:(id)features positiveEvent:(id)event;
- (id)_predictWithFeatures:(id)features;
- (void)_loadFeatureVector:(void *)vector fromFeatureMap:(id)map;
- (BOOL)_saveModelToURL:(id)url includeDebugData:(BOOL)data error:(id *)error;
- (BOOL)_saveModelToURL:(id)url error:(id *)error;
- (BOOL)_saveDebugModelToURL:(id)url error:(id *)error;
- (BOOL)_loadModelFromURL:(id)url error:(id *)error;
- (void)_clearModel;
- (long long)_getNumberOfCoordinates;
- (float)_getAveragePrediction;
- (float)_getNormalizedEntropy;
- (unsigned long long)_getTotalExampleCount;
- (unsigned long long)_getTotalPositiveCount;
- (void)logCoreAnalyticsMetrics;
@end

#endif /* REBayesianMLModel_h */
