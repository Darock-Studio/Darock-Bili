//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 472.0.0.0.0
//
#ifndef REDuetKnowledgeStore_h
#define REDuetKnowledgeStore_h
@import Foundation;

#include "RESingleton.h"

@class _DKKnowledgeStore;

@interface REDuetKnowledgeStore : RESingleton {
  /* instance variables */
  _DKKnowledgeStore *_knowledgeStore;
}

/* instance methods */
- (id)queryForDuetEventWithIdentifier:(id)identifier;
- (id)queryForUnfilteredUserActivityDonations;
- (id)queryForUnfilteredIntentDonations;
- (id)queryForUnfilteredRelevantShortcutDonations;
- (id)_queryForUnfilteredDonationsForStream:(id)stream;
- (id)_init;
- (id)queryForTopNApplications:(long long)napplications withLikelihoodGreaterThan:(double)than withTemporalResolution:(int)resolution;
- (id)_createTimelineFromPredictionTimeline:(id)timeline filterEmptyData:(BOOL)data;
- (id)sleepInterval;
- (id)queryForPredictedChargingEventsWithMinimumDuration:(double)duration;
- (id)queryForHistoricChargingEventsWithMinimumDuration:(double)duration inThePastDays:(unsigned long long)days;
- (id)_duetChargingEventStream;
- (id)_createEventsFromDuetEvents:(id)events;
- (id)queryForAllDonatedActions;
- (id)queryForAllDonatedActionsWithIdentifier:(id)identifier;
- (id)queryForDonatedActionsAfterDate:(id)date;
- (id)_queryForDonatedActionsAfterDate:(id)date streams:(id)streams;
- (id)queryForAllRelevantShortcuts;
- (id)queryForDeletedActionsAfterDate:(id)date;
- (id)_duetDonationsStreams;
- (id)_duetQueryForDonatedActionsAfterDate:(id)date onStreams:(id)streams withPredicate:(id)predicate;
- (id)_createActionsFromDuetEvents:(id)events;
- (id)_createTombstonesFromDuetEvents:(id)events;
- (void)executeQuery:(id)query responseQueue:(id)queue completion:(id /* block */)completion;
- (void)executeQuerySynchronouslyWithBatching:(id)batching completion:(id /* block */)completion;
- (void)_executeQuery:(id)query responseQueue:(id)queue synchronouslyWithBatching:(BOOL)batching completion:(id /* block */)completion;
@end

#endif /* REDuetKnowledgeStore_h */
