//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 867.10.0.0.0
//
#ifndef FBProcessManager_h
#define FBProcessManager_h
@import Foundation;

#include "FBApplicationProcess.h"
#include "FBProcess.h"
#include "FBProcessDelegate-Protocol.h"
#include "FBProcessWatchdogProviding-Protocol.h"

@class NSHashTable, NSMutableDictionary, NSMutableSet, NSString, RBSAssertion, RBSProcessMonitor;
@protocol OS_dispatch_queue;

@interface FBProcessManager : NSObject<FBProcessDelegate> {
  /* instance variables */
  FBProcess *_currentProcess;
  NSObject<OS_dispatch_queue> *_callOutQueue;
  RBSProcessMonitor *_processMonitor;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _bootstrapLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _bootstrapPredicatesLock;
  NSMutableSet *_bootstrap_pendingProcesses;
  NSMutableSet *_bootstrap_bootstrappingProcesses;
  NSMutableSet *_bootstrap_processPredicates;
  NSObject<FBProcessWatchdogProviding> *_noDirectAccess_defaultWatchdogPolicy;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  NSMutableDictionary *_lock_processesByPID;
  NSMutableDictionary *_lock_processesByVersionedPID;
  NSMutableDictionary *_lock_processesByIdentity;
  NSHashTable *_lock_observers;
  RBSAssertion *_lock_assertion;
  BOOL _lock_initializationComplete;
}

@property (retain) NSObject<FBProcessWatchdogProviding> *defaultWatchdogPolicy;
@property (readonly, nonatomic) FBApplicationProcess *systemApplicationProcess;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedInstance;
+ (id)sharedInstanceIfExists;
+ (id)_sharedInstanceCreateIfNeeded:(BOOL)needed;

/* instance methods */
- (id)init;
- (void)dealloc;
- (id)currentProcess;
- (void)addObserver:(id)observer;
- (void)removeObserver:(id)observer;
- (id)allProcesses;
- (id)processForPID:(int)pid;
- (id)processForVersionedPID:(long long)pid;
- (id)processForIdentity:(id)identity;
- (id)allApplicationProcesses;
- (id)applicationProcessForPID:(int)pid;
- (id)processesForBundleIdentifier:(id)identifier;
- (id)applicationProcessesForBundleIdentifier:(id)identifier;
- (id)_createProcessWithExecutionContext:(id)context error:(out id *)error;
- (id)_createProcessFutureWithExecutionContext:(id)context error:(out id *)error;
- (id)_createProcessFutureForProcessHandle:(id)handle error:(out id *)error;
- (id)registerProcessForAuditToken:(struct { unsigned int x0[8] })token;
- (id)registerProcessForHandle:(id)handle;
- (void)launchProcessWithContext:(id)context;
- (void)_noteShellInitializationComplete;
- (id)watchdogPolicyForProcess:(id)process eventContext:(id)context;
- (void)noteProcessDidLaunch:(id)launch;
- (void)noteProcessDidExit:(id)exit;
- (void)noteProcessAssertionStateDidChange:(id)change;
- (id)_reallyRegisterProcessForHandle:(id)handle;
- (id)_bootstrapProcessWithExecutionContext:(id)context synchronously:(BOOL)synchronously error:(out id *)error;
- (id)_bootstrapProcessWithHandle:(id)handle synchronously:(BOOL)synchronously error:(out id *)error;
- (void)_bootstrap_consumeLock_addProcess:(id)process synchronously:(BOOL)synchronously;
- (void)_bootstrap_consumeLock_addProcess:(id)process;
- (void)_removeProcess:(id)process;
- (void)_notifyObserversUsingBlock:(id /* block */)block completion:(id /* block */)completion;
@end

#endif /* FBProcessManager_h */
