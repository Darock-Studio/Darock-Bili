//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 867.10.0.0.0
//
#ifndef FBProcess_h
#define FBProcess_h
@import Foundation;

#include "FBProcessBootstrapping-Protocol.h"
#include "FBProcessCPUStatistics.h"
#include "FBProcessDelegate-Protocol.h"
#include "FBProcessExecutionContext.h"
#include "FBProcessExitContext.h"
#include "FBProcessState.h"
#include "FBProcessWatchdog.h"
#include "FBProcessWatchdogEventContext.h"
#include "FBProcessWatchdogProviding-Protocol.h"
#include "FBSProcess-Protocol.h"
#include "FBSProcessInternal-Protocol.h"
#include "FBWorkspace.h"
#include "RBSProcessMatching-Protocol.h"

@class BSAbsoluteMachTimer, BSAuditToken, BSMachPortTaskNameRight, BSProcessHandle, FBSApplicationInfo, FBSProcessExecutionProvision, FBSProcessTerminationRequest, FBSProcessWatchdogPolicy, NSError, NSMutableArray, NSMutableSet, NSString, RBSAssertion, RBSProcessHandle, RBSProcessIdentity, RBSProcessState, RBSTarget;

@interface FBProcess : NSObject<FBProcessBootstrapping, FBSProcessInternal, RBSProcessMatching, FBSProcess> {
  /* instance variables */
  struct os_unfair_recursive_lock_s { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } ourl_lock; unsigned int ourl_count; } _lock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _observerLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _bootstrapLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _watchdogProviderLock;
  NSError *_bootstrapError;
  NSMutableSet *_observerLock_observers;
  RBSAssertion *_lock_gracefulExitAssertion;
  NSMutableArray *_lock_launchCompletionBlocks;
  NSMutableArray *_lock_bootstrapBlocks;
  FBSApplicationInfo *_lock_applicationInfo;
  FBProcessState *_lock_state;
  RBSProcessState *_lock_rbsState;
  unsigned char _lock_sceneState;
  FBProcessCPUStatistics *_lock_watchdogCPUStatistics;
  FBSProcessTerminationRequest *_lock_terminationRequest;
  FBProcessWatchdogEventContext *_lock_terminationWatchdogContext;
  long long _terminationReason;
  NSMutableArray *_lock_terminateRequestCompletionBlocks;
  BSAbsoluteMachTimer *_lock_exitTimer;
  NSObject<FBProcessWatchdogProviding> *_watchdogProvider;
  FBProcessWatchdog *_lock_watchdog;
  FBSProcessWatchdogPolicy *_sceneCreateWatchdogPolicy;
  FBSProcessExecutionProvision *_lock_latestViolatedProvision;
  BOOL _lock_pendingExit;
  BOOL _lock_invalidated;
  BOOL _lock_attemptedBootstrap;
  BOOL _lock_waitForDebugger;
  BOOL _lock_updatingState;
  BOOL _lock_didExit;
  BOOL _lock_launchFinalized;
  BOOL _lock_launchSuccess;
  long long _lock_executableLivesOnSystemPartition;
  long long _lock_platformBinary;
  BOOL _calloutQueue_sentWillExit;
  BOOL _calloutQueue_sentDidExit;
  BOOL _calloutQueue_sentAppWillLaunch;
  BOOL _calloutQueue_sentAppDidLaunch;
  NSObject<FBProcessDelegate> *_lock_delegate;
  FBProcessExitContext *_lock_exitContext;
}

@property (readonly, nonatomic) BOOL executableLivesOnSystemPartition;
@property (readonly, nonatomic) BOOL platformBinary;
@property (readonly, nonatomic) double execTime;
@property (readonly, nonatomic) RBSTarget *target;
@property (readonly, nonatomic) RBSProcessHandle *rbsHandle;
@property (readonly, nonatomic) BSAuditToken *auditToken;
@property (readonly, weak, nonatomic) NSObject<FBProcessDelegate> *delegate;
@property (readonly, nonatomic) unsigned char assertionState;
@property (readonly, nonatomic) FBWorkspace *workspace;
@property (readonly, nonatomic) BSProcessHandle *handle;
@property (readonly, nonatomic) RBSProcessIdentity *identity;
@property (readonly, nonatomic) FBSApplicationInfo *applicationInfo;
@property (readonly, copy, nonatomic) NSString *bundleIdentifier;
@property (readonly, copy, nonatomic) NSString *executablePath;
@property (readonly, copy, nonatomic) FBProcessExecutionContext *executionContext;
@property (readonly, nonatomic) FBProcessExitContext *exitContext;
@property (readonly, copy, nonatomic) FBProcessState *state;
@property (readonly, nonatomic) int pid;
@property (readonly, nonatomic) long long versionedPID;
@property (readonly, nonatomic) BOOL running;
@property (readonly, nonatomic) BOOL foreground;
@property (readonly, nonatomic) BOOL beingDebugged;
@property (readonly, nonatomic) BOOL currentProcess;
@property (readonly, nonatomic) BOOL finishedLaunching;
@property (readonly, nonatomic) BOOL pendingExit;
@property (readonly, copy, nonatomic) NSString *name;
@property (readonly, retain, nonatomic) BSMachPortTaskNameRight *taskNameRight;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)calloutQueue;
+ (id)createCurrentProcess;
+ (id)createProcessWithHandle:(id)handle;
+ (id)createProcessWithExecutionContext:(id)context;
+ (id)_currentProcess;

/* instance methods */
- (BOOL)isApplicationProcess;
- (BOOL)isSystemApplicationProcess;
- (BOOL)isExtensionProcess;
- (id)init;
- (id)_initWithIdentity:(id)identity handle:(id)handle executionContext:(id)context;
- (void)dealloc;
- (BOOL)isCurrentProcess;
- (BOOL)isFinishedLaunching;
- (BOOL)isForeground;
- (BOOL)isRunning;
- (BOOL)isBeingDebugged;
- (BOOL)isPendingExit;
- (void)addObserver:(id)observer;
- (void)removeObserver:(id)observer;
- (BOOL)hasEntitlement:(id)entitlement;
- (id)valueForEntitlement:(id)entitlement;
- (void)setWatchdogProvider:(id)provider;
- (void)bootstrapLock:(id /* block */)lock;
- (BOOL)bootstrapWithDelegate:(id)delegate;
- (void)noteProcessPublished;
- (void)invalidate;
- (long long)taskState;
- (long long)visibility;
- (BOOL)isPlatformBinary;
- (void)_executeBlockAfterBootstrap:(id /* block */)bootstrap;
- (void)_executeBlockAfterLaunchCompletes:(id /* block */)completes;
- (void)_notePendingExitForReason:(id)reason;
- (void)_updateStateWithBlock:(id /* block */)block;
- (void)_bootstrapAndExec;
- (void)_configureIntrinsicsFromHandle:(id)handle;
- (void)_configureBundleInfo;
- (void)_setSceneLifecycleState:(unsigned char)state;
- (void)_noteStateDidUpdate:(id)update;
- (id)_watchdogProvider;
- (void)_executeBlockAsCurrentProcess:(id /* block */)process;
- (id)_observers;
- (void)_processDidExitWithContext:(id)context;
- (void)_noteAssertionStateDidChange;
- (void)_rebuildState;
- (void)_rebuildState:(id)state;
- (void)_finishInit;
- (id)_createBootstrapContext;
- (void)_bootstrapDidComplete;
- (void)_noteProcessDidExit:(id)exit;
- (void)_launchDidComplete:(BOOL)complete finalizeBlock:(id /* block */)block;
- (id)_newWatchdogForContext:(id)context completion:(id /* block */)completion;
- (BOOL)_startWatchdogTimerForContext:(id)context;
- (BOOL)_shouldWatchdogWithDeclineReason:(id *)reason;
- (long long)_watchdogReportType;
- (void)_terminateWithRequest:(id)request completion:(id /* block */)completion;
- (void)_killForReason:(long long)reason andReport:(BOOL)report withDescription:(id)description completion:(id /* block */)completion;
- (void)_lock_consumeLock_executeTerminationRequest;
- (void)_lock_consumeLock_performGracefulKill;
- (void)_terminateWithRequest:(id)request forWatchdog:(id)watchdog;
- (id)_watchdog:(id)_watchdog terminationRequestForViolatedProvision:(id)provision error:(id)error;
- (BOOL)_watchdog:(id)_watchdog shouldTerminateWithDeclineReason:(out id *)reason;
- (BOOL)matchesProcess:(id)process;
- (id)processPredicate;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (id)descriptionWithMultilinePrefix:(id)prefix;
- (id)descriptionBuilderWithMultilinePrefix:(id)prefix;
@end

#endif /* FBProcess_h */
