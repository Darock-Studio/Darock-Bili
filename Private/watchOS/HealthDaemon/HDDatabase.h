//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDDatabase_h
#define HDDatabase_h
@import Foundation;

#include "HDAnalyticsSubmissionCoordinatorDelegate-Protocol.h"
#include "HDAssertionObserver-Protocol.h"
#include "HDContentProtectionObserver-Protocol.h"
#include "HDDatabaseConnectionPoolDelegate-Protocol.h"
#include "HDDatabaseCorruptionEventStoreDelegate-Protocol.h"
#include "HDDatabaseJournal.h"
#include "HDDatabaseJournalDelegate-Protocol.h"
#include "HDDatabaseMigrationTransactionDelegate-Protocol.h"
#include "HDDiagnosticObject-Protocol.h"
#include "HDHealthDaemonReadyObserver-Protocol.h"
#include "HDHealthDatabase-Protocol.h"
#include "HDProfile.h"
#include "HDProfileReadyObserver-Protocol.h"
#include "HDSQLiteDatabaseDelegate-Protocol.h"
#include "HDSQLiteDatabaseProvider-Protocol.h"

@class HDAssertionManager, HDContentProtectionManager, HDXPCGatedActivity, HKObserverSet, HKProfileIdentifier, NSConditionLock, NSDate, NSDictionary, NSHashTable, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, NSOperationQueue, NSString, NSUUID;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source;

@interface HDDatabase : NSObject<HDAssertionObserver, HDContentProtectionObserver, HDDiagnosticObject, HDSQLiteDatabaseDelegate, HDDatabaseConnectionPoolDelegate, HDSQLiteDatabaseProvider, HDDatabaseJournalDelegate, HDDatabaseMigrationTransactionDelegate, HDProfileReadyObserver, HDHealthDaemonReadyObserver, HDAnalyticsSubmissionCoordinatorDelegate, HDDatabaseCorruptionEventStoreDelegate, HDHealthDatabase> {
  /* instance variables */
  atomic BOOL _invalidated;
  atomic BOOL _started;
  NSUUID *_databaseUUID;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _databaseUUIDLock;
  NSObject<OS_dispatch_queue> *_serialAsynchronousQueue;
  NSLock *_writeLock;
  NSObject<OS_dispatch_queue> *_protectedDataQueue;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _protectedDataLock;
  HKObserverSet *_protectedDataObservers;
  long long _protectedDataState;
  long long _protectedDataLock_observedContentProtectionState;
  BOOL _isObservingContentProtection;
  NSObject<OS_dispatch_group> *_contentProtectionObservationGroup;
  NSObject<OS_dispatch_source> *_inactivityFlushTimer;
  BOOL _hasFlushedForInactivity;
  NSMutableArray *_firstUnprotectedWriteTransactionBlocks;
  NSMutableArray *_firstProtectedWriteTransactionBlocks;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _transactionStartLock;
  NSObject<OS_dispatch_group> *_transactionStartGroup;
  NSMutableArray *_firstUnlockBlocks;
  BOOL _shouldNotifyFirstUnlockObservers;
  NSDate *_protectedDataFlushDeadlineDate;
  NSObject<OS_dispatch_source> *_protectedDataFlushDeadlineTimer;
  BOOL _hasFlushedProtectedData;
  BOOL _disableTakingProtectedDataAssertionsWhenLocked;
  unsigned long long _journalMergeEpoch;
  unsigned long long _mergedJournalEpoch;
  atomic BOOL _hasPendingSecondaryJournalMerge;
  atomic BOOL _shouldPerformHFDVerificationAfterSecondaryJournalMerge;
  HDXPCGatedActivity *_secondaryJournalMergeActivity;
  atomic BOOL _hasCompletedFirstJournalMergeCleanup;
  NSMutableDictionary *_databaseJournalMergeObserverSetByType;
  NSHashTable *_protectedResourceStores;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _protectedResourceAssertionsLock;
  NSMutableDictionary *_protectedResourceAssertionsByIdentifier;
  struct atomic_flag { atomic  _Value; BOOL x0; } _hasFaultedForCorruptionError;
  NSString *_threadLocalTransactionKey;
  NSString *_threadLocalTransactionContextStackKey;
  HDAssertionManager *_assertionManager;
  NSLock *_schemaMigrationLock;
  NSConditionLock *_activeDatabasesLock;
  NSMutableSet *_activeDatabases;
  NSHashTable *_migratedDatabases;
  NSOperationQueue *_asynchronousOperationQueue;
  NSMutableDictionary *_extendedTransactions;
  NSDictionary *_databasePoolForType;
}

@property (readonly, nonatomic) HDContentProtectionManager *contentProtectionManager;
@property (nonatomic) double offsetTimeInterval;
@property (nonatomic) double protectedDataFlushInterval;
@property (nonatomic) double inactivityFlushInterval;
@property (nonatomic) BOOL didRunPostMigrationUpdates;
@property (nonatomic) long long corruptedMigrationAttemptsCount;
@property (readonly, copy, nonatomic) NSDate *mostRecentObliterationDate;
@property (copy, nonatomic) id /* block */ unitTest_didWaitForJournalMergeHandler;
@property (readonly, nonatomic) HDDatabaseJournal *journal;
@property (readonly, nonatomic) HDDatabaseJournal *cloudSyncJournal;
@property (weak, nonatomic) HDProfile *profile;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSString *profileDirectoryPath;
@property (readonly, copy, nonatomic) HKProfileIdentifier *profileIdentifier;
@property (readonly, nonatomic) BOOL dataProtectedByFirstUnlockAvailable;
@property (readonly, nonatomic) BOOL protectedDataAvailable;

/* class methods */
+ (id)allCurrentAndFutureEntityClasses;
+ (id)allEntityClassesWithBehavior:(id)behavior;

/* instance methods */
- (id)allEntityClassesWithProtectionClass:(long long)class;
- (id)allSeriesEntityClasses;
- (id)initWithProfile:(id)profile concurrentReaderLimit:(unsigned long long)limit;
- (void)dealloc;
- (void)start;
- (id)databasePoolForDatabaseType:(long long)type;
- (BOOL)performWithTransactionContext:(id)context error:(id *)error block:(id /* block */)block;
- (BOOL)performTransactionWithContext:(id)context error:(id *)error block:(id /* block */)block inaccessibilityHandler:(id /* block */)handler;
- (BOOL)performHighPriorityTransactionsWithError:(id *)error block:(id /* block */)block;
- (void)performWhenDataProtectedByFirstUnlockIsAvailable:(id /* block */)available;
- (void)performWhenDataProtectedByFirstUnlockIsAvailableOnQueue:(id)queue block:(id /* block */)block;
- (void)performAsynchronously:(id /* block */)asynchronously;
- (void)performAsynchronouslySerial:(id /* block */)serial;
- (BOOL)performWithJournalType:(long long)type error:(id *)error block:(id /* block */)block;
- (id)beginExtendedTransactionWithContext:(id)context transactionTimeout:(double)timeout continuationTimeout:(double)timeout error:(id *)error;
- (id)extendedDatabaseTransactionForIdentifier:(id)identifier;
- (void)finalizeExtendedTransactionForIdentifier:(id)identifier;
- (id)HFDSizeInBytes;
- (id)databaseSizeInBytesForTypeUnprotected:(BOOL)unprotected WAL:(BOOL)wal;
- (id)databaseSizeInBytesExcludingHFD;
- (void)reportDailyAnalyticsWithCoordinator:(id)coordinator completion:(id /* block */)completion;
- (void)_reportDatabaseMigrationStatus:(long long)status component:(long long)component schemaVersion:(long long)version error:(id)error;
- (void)_reportSQLiteCorruption:(id)corruption forDatabase:(long long)database shouldPrompt:(BOOL)prompt;
- (id)_newCorruptionEventStore;
- (id)_newTTRPromptControllerWithProfile:(id)profile domainName:(id)name loggingCategory:(id)category;
- (void)store:(id)store setObject:(id)object forKey:(id)key;
- (id)store:(id)store objectForKey:(id)key;
- (id)_newDatabaseConnectionWithURL:(id)url;
- (void)migrationTransaction:(id)transaction didCreateDatabasesWithIdentifier:(id)identifier;
- (void)migrationTransaction:(id)transaction didEncounterDatabaseMismatchWithUnprotectedIdentifier:(id)identifier protectedIdentifier:(id)identifier;
- (void)migrationTransaction:(id)transaction reportHFDMigrationStatus:(long long)status schemaVersion:(long long)version error:(id)error;
- (id)migrationTransaction:(id)transaction entityClassesWithBehavior:(id)behavior;
- (void)assertionManager:(id)manager assertionInvalidated:(id)invalidated;
- (void)daemonReady:(id)ready;
- (id)checkOutProtectedDatabase:(id)database error:(id *)error;
- (id)checkOutUnprotectedDatabase:(id)database error:(id *)error;
- (id)checkOutProtectedResources:(id)resources error:(id *)error;
- (void)checkInDatabase:(id)database type:(long long)type protectedResources:(id)resources;
- (id)newConnectionForPool:(id)pool error:(id *)error;
- (void)databasePool:(id)pool didFlushConnections:(id)connections;
- (void)profileDidBecomeReady:(id)ready;
- (BOOL)isDataProtectedByFirstUnlockAvailable;
- (BOOL)isProtectedDataAvailable;
- (void)contentProtectionStateChanged:(long long)changed previousState:(long long)state;
- (void)addProtectedDataObserver:(id)observer;
- (void)addProtectedDataObserver:(id)observer queue:(id)queue;
- (void)removeProtectedDataObserver:(id)observer;
- (id)takeAccessibilityAssertionWithOwnerIdentifier:(id)identifier timeout:(double)timeout error:(id *)error;
- (id)takeAccessibilityAssertionWithOwnerIdentifier:(id)identifier shouldPerformTransaction:(BOOL)transaction timeout:(double)timeout error:(id *)error;
- (id)cloneAccessibilityAssertion:(id)assertion ownerIdentifier:(id)identifier error:(id *)error;
- (BOOL)addJournalEntry:(id)entry error:(id *)error;
- (BOOL)addJournalEntries:(id)entries error:(id *)error;
- (id)progressForJournalMergeWithType:(long long)type;
- (id)_journalForType:(long long)type;
- (unsigned long long)journalChapterCountForType:(long long)type;
- (void)performInFirstUnprotectedWriteTransaction:(id /* block */)transaction;
- (void)performInFirstProtectedWriteTransaction:(id /* block */)transaction;
- (BOOL)accessHighFrequencyDataStoreWithError:(id *)error block:(id /* block */)block;
- (id)diagnosticDescription;
- (void)addDatabaseJournalMergeObserver:(id)observer journalType:(long long)type queue:(id)queue;
- (void)removeDatabaseJournalMergeObserver:(id)observer journalType:(long long)type;
- (void)databaseJournalMergeDidComplete:(id)complete;
- (void)invalidateAndWait;
- (void)obliterateWithReason:(id)reason preserveCopy:(BOOL)copy;
- (id)databaseUUIDWithError:(id *)error;
- (void)unitTest_setContentProtectionStateAndWait:(long long)wait;
- (id)unitTest_currentTransaction;
- (void)unitTest_clearFirstJournalMergeCleanupFlag;
- (void)unitTest_disableDatabaseAccessibilityAssertions;
- (void)unitTest_enableDatabaseAccessibilityAssertions;
@end

#endif /* HDDatabase_h */
