//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDHealthEntity_h
#define HDHealthEntity_h
@import Foundation;

#include "HDSQLiteEntity.h"
#include "HDHealthEntityEncoding-Protocol.h"

@interface HDHealthEntity : HDSQLiteEntity<HDHealthEntityEncoding>
/* class methods */
+ (id)updateSQLForTimeOffsetWithBindingCount:(unsigned long long *)count;
+ (id)columnNamesForTimeOffset;
+ (long long)countOfObjectsWithPredicate:(id)predicate healthDatabase:(id)database error:(id *)error;
+ (id)countDistinctForProperty:(id)property healthDatabase:(id)database error:(id *)error;
+ (long long)sizeOfDatabaseTableInHealthDatabase:(id)database error:(id *)error;
+ (BOOL)enumerateProperties:(id)properties withPredicate:(id)predicate healthDatabase:(id)database error:(id *)error enumerationHandler:(id /* block */)handler;
+ (BOOL)deleteEntitiesWithPredicate:(id)predicate healthDatabase:(id)database error:(id *)error;
+ (id)anyWithPredicate:(id)predicate healthDatabase:(id)database error:(id *)error;
+ (id)propertyValueForAnyWithProperty:(id)property predicate:(id)predicate healthDatabase:(id)database error:(id *)error;
+ (id)maxRowIDForPredicate:(id)predicate healthDatabase:(id)database error:(id *)error;
+ (BOOL)enumerateEntitiesForSyncWithProperties:(id)properties predicate:(id)predicate session:(id)session syncAnchorRange:(struct HDSyncAnchorRange { long long x0; long long x1; })range limit:(unsigned long long)limit lastSyncAnchor:(long long *)anchor healthDatabase:(id)database error:(id *)error block:(id /* block */)block;
+ (BOOL)enumerateEntitiesForSyncWithProperties:(id)properties predicate:(id)predicate syncEntityClass:(Class)class session:(id)session syncAnchorRange:(struct HDSyncAnchorRange { long long x0; long long x1; })range orderingTerms:(id)terms limit:(unsigned long long)limit lastSyncAnchor:(long long *)anchor healthDatabase:(id)database error:(id *)error block:(id /* block */)block;
+ (BOOL)enumerateEntitiesForSyncWithProperties:(id)properties predicate:(id)predicate healthDatabase:(id)database error:(id *)error block:(id /* block */)block;
+ (long long)nextSyncAnchorWithStartAnchor:(long long)anchor predicate:(id)predicate session:(id)session healthDatabase:(id)database error:(id *)error;
+ (long long)nextSyncAnchorWithStartAnchor:(long long)anchor predicate:(id)predicate syncEntityClass:(Class)class session:(id)session orderingTerms:(id)terms limit:(unsigned long long)limit healthDatabase:(id)database error:(id *)error;
+ (id)predicateForSyncWithPredicate:(id)predicate syncEntityClass:(Class)class session:(id)session syncAnchorRange:(struct HDSyncAnchorRange { long long x0; long long x1; })range;
+ (long long)protectionClass;
+ (id)defaultForeignKey;
+ (BOOL)validateEntityWithProfile:(id)profile error:(id *)error validationErrorHandler:(id /* block */)handler;
+ (id)createValidationError:(id)error rowId:(id)id;
+ (id)propertyForSyncAnchor;
+ (id)propertyForSyncProvenance;
+ (id)propertyForSyncIdentity;
+ (id)createTableSQLWithBehavior:(id)behavior;
+ (id)indicesWithBehavior:(id)behavior;
+ (id)triggersWithBehavior:(id)behavior;
+ (const struct { id x0; id x1; unsigned char x2; } *)columnDefinitionsWithBehavior:(id)behavior count:(unsigned long long *)count;
+ (BOOL)performReadTransactionWithHealthDatabase:(id)database error:(id *)error block:(id /* block */)block;
+ (BOOL)performReadTransactionWithHealthDatabase:(id)database context:(id)context error:(id *)error block:(id /* block */)block;
+ (BOOL)performWriteTransactionWithHealthDatabase:(id)database error:(id *)error block:(id /* block */)block;
+ (BOOL)performWriteTransactionWithHealthDatabase:(id)database context:(id)context error:(id *)error block:(id /* block */)block;
+ (BOOL)performWriteTransactionWithHealthDatabase:(id)database error:(id *)error block:(id /* block */)block inaccessibilityHandler:(id /* block */)handler;
+ (BOOL)performWriteTransactionWithHealthDatabase:(id)database context:(id)context error:(id *)error block:(id /* block */)block inaccessibilityHandler:(id /* block */)handler;
+ (id)transactionContextForWriting:(BOOL)writing baseContext:(id)context;
+ (id)entityEncoderForProfile:(id)profile transaction:(id)transaction purpose:(long long)purpose encodingOptions:(id)options authorizationFilter:(id /* block */)filter;
+ (id)insertOrReplaceEntity:(BOOL)entity healthDatabase:(id)database properties:(id)properties error:(id *)error bindingHandler:(id /* block */)handler;
+ (BOOL)updateProperties:(id)properties predicate:(id)predicate healthDatabase:(id)database error:(id *)error bindingHandler:(id /* block */)handler;
+ (BOOL)performPostFirstJournalMergeCleanupWithTransaction:(id)transaction profile:(id)profile error:(id *)error;

/* instance methods */
- (BOOL)getValuesForProperties:(id)properties healthDatabase:(id)database error:(id *)error handler:(id /* block */)handler;
- (id)valueForProperty:(id)property healthDatabase:(id)database error:(id *)error;
- (id)stringForProperty:(id)property healthDatabase:(id)database error:(id *)error;
- (id)dateForProperty:(id)property transaction:(id)transaction error:(id *)error;
- (BOOL)setDate:(id)date forProperty:(id)property transaction:(id)transaction error:(id *)error;
- (id)stringForProperty:(id)property transaction:(id)transaction error:(id *)error;
- (BOOL)setString:(id)string forProperty:(id)property transaction:(id)transaction error:(id *)error;
- (id)numberForProperty:(id)property transaction:(id)transaction error:(id *)error;
- (BOOL)setNumber:(id)number forProperty:(id)property transaction:(id)transaction error:(id *)error;
- (id)foreignKeyEntity:(Class)entity forProperty:(id)property transaction:(id)transaction error:(id *)error;
- (BOOL)setForeignKeyEntity:(id)entity forProperty:(id)property transaction:(id)transaction error:(id *)error;
- (BOOL)willDeleteWithTransaction:(id)transaction error:(id *)error;
- (BOOL)updateProperties:(id)properties healthDatabase:(id)database error:(id *)error bindingHandler:(id /* block */)handler;
@end

#endif /* HDHealthEntity_h */
