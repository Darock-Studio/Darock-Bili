//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDOntologyBackingStore_h
#define HDOntologyBackingStore_h
@import Foundation;

#include "HDAssertionObserver-Protocol.h"
#include "HDContentProtectionObserver-Protocol.h"
#include "HDDaemon.h"
#include "HDDatabaseConnectionPoolDelegate-Protocol.h"
#include "HDHealthDaemonReadyObserver-Protocol.h"
#include "HDProtectedResourceStore-Protocol.h"
#include "HDProtectedResourceStoreProvider-Protocol.h"

@class HDAssertionManager, HDDatabaseConnectionPool, HKObserverSet, NSConditionLock, NSMutableSet, NSString, NSURL;
@protocol OS_dispatch_queue;

@interface HDOntologyBackingStore : NSObject<HDContentProtectionObserver, HDHealthDaemonReadyObserver, HDProtectedResourceStoreProvider, HDProtectedResourceStore, HDAssertionObserver, HDDatabaseConnectionPoolDelegate> {
  /* instance variables */
  NSURL *_ontologyURL;
  atomic BOOL _invalidated;
  NSObject<OS_dispatch_queue> *_queue;
  NSString *_threadLocalTransactionKey;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _availabilityLock;
  long long _observedContentProtectionState;
  HKObserverSet *_observers;
  HDDatabaseConnectionPool *_databaseConnectionPool;
  NSConditionLock *_activeDatabaseConnectionLock;
  NSMutableSet *_activeDatabaseConnections;
  HDAssertionManager *_protectedResourceAssertionManager;
}

@property (readonly, weak, nonatomic) HDDaemon *daemon;
@property (readonly, nonatomic) BOOL available;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSString *protectedResourceIdentifier;

/* class methods */
+ (id)unitTesting_ontologyURLWithBaseURL:(id)url;
+ (id)unitTesting_ontologyBackingStoreForDaemon:(id)daemon baseURL:(id)url;

/* instance methods */
- (id)init;
- (id)initWithDaemon:(id)daemon;
- (id)_initWithDaemon:(id)daemon baseURL:(id)url;
- (BOOL)performOntologyTransactionForWrite:(BOOL)write profile:(id)profile databaseTransaction:(id)transaction error:(id *)error transactionHandler:(id /* block */)handler;
- (void)registerOntologyDatabase:(id)database;
- (BOOL)isAvailable;
- (void)close;
- (void)invalidate;
- (void)obliterateWithReason:(id)reason;
- (BOOL)obliterateWithReason:(id)reason error:(id *)error;
- (id)sizeOfUnderlyingDatabaseInBytes;
- (void)daemonReady:(id)ready;
- (id)protectedResourceStoreForProfile:(id)profile;
- (id)requestProtectedResourceAccessAssertionForOwnerIdentifier:(id)identifier error:(id *)error;
- (id)checkOutProtectedResourceWithAssertion:(id)assertion transaction:(id)transaction error:(id *)error;
- (void)checkInProtectedResource:(id)resource;
- (void)assertionManager:(id)manager assertionInvalidated:(id)invalidated;
- (void)contentProtectionStateChanged:(long long)changed previousState:(long long)state;
- (id)newConnectionForPool:(id)pool error:(id *)error;
- (void)databasePool:(id)pool didFlushConnections:(id)connections;
@end

#endif /* HDOntologyBackingStore_h */
