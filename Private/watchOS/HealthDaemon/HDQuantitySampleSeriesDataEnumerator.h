//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDQuantitySampleSeriesDataEnumerator_h
#define HDQuantitySampleSeriesDataEnumerator_h
@import Foundation;

#include "HDDatabaseTransaction.h"

@class NSError;
@protocol {deque<std::tuple<double, double, float>, std::allocator<std::tuple<double, double, float>>>="__map_"{__split_buffer<std::tuple<double, double, float> *, std::allocator<std::tuple<double, double, float> *>>="__first_"^^v"__begin_"^^v"__end_"^^v"__end_cap_"{__compressed_pair<std::tuple<double, double, float> **, std::allocator<std::tuple<double, double, float> *>>="__value_"^^v}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<std::tuple<double, double, float>>>="__value_"Q}};

@interface HDQuantitySampleSeriesDataEnumerator : NSObject {
  /* instance variables */
  HDDatabaseTransaction *_transaction;
  unsigned long long _bufferSize;
  struct deque<std::tuple<double, double, float>, std::allocator<std::tuple<double, double, float>>> { struct __split_buffer<std::tuple<double, double, float> *, std::allocator<std::tuple<double, double, float> *>> { void * *__first_; void * *__begin_; void * *__end_; struct __compressed_pair<std::tuple<double, double, float> **, std::allocator<std::tuple<double, double, float> *>> { void * *__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::tuple<double, double, float>>> { unsigned long long __value_; } __size_; } _data;
  BOOL _hasFetchedData;
  BOOL _hasFetchedAllData;
  BOOL _hasDeterminedSeriesVersion;
  BOOL _isVersion1;
  BOOL _hasDuration;
  long long _index;
  double _previousEndTime;
  NSError *_fatalError;
  unsigned char _UUIDBytes[16];
  double _lastFetchedDatumTime;
  double _lastDatumTime;
  struct ObjectIdentifier { long long objectType; unsigned long long identifier; } _objectIdentifier;
}

@property (readonly, nonatomic) BOOL done;
@property (readonly, nonatomic) long long persistentID;
@property (readonly, nonatomic) long long dataTypeCode;
@property (readonly, nonatomic) unsigned char x[16] * UUIDBytesPtr;
@property (readonly, nonatomic) double startTime;
@property (readonly, nonatomic) double endTime;
@property (readonly, nonatomic) long long count;
@property (readonly, nonatomic) long long sourceID;
@property (readonly, nonatomic) long long HFDKey;

/* instance methods */
- (id)initWithTransaction:(id)transaction persistentID:(long long)id dataTypeCode:(long long)code UUIDBytes:(unsigned char x[16])uuidbytes startTime:(double)time endTime:(double)time count:(long long)count sourceID:(long long)id HFDKey:(long long)hfdkey bufferSize:(unsigned long long)size;
- (double)nextDatumTime;
- (BOOL)primeEnumeratorWithError:(id *)error;
- (BOOL)enumerateDataToTime:(double)time error:(id *)error handler:(id /* block */)handler;
- (long long)compare:(id)compare;
- (id)description;
- (void)_unitTesting_addToBufferTimestamp:(double)timestamp value:(double)value duration:(float)duration isLastDatum:(BOOL)datum;
@end

#endif /* HDQuantitySampleSeriesDataEnumerator_h */
