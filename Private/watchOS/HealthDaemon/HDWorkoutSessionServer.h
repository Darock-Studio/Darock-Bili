//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDWorkoutSessionServer_h
#define HDWorkoutSessionServer_h
@import Foundation;

#include "HDHealthStoreClient.h"
#include "HDProfile.h"
#include "HDWorkoutDataAccumulator-Protocol.h"
#include "HDWorkoutDataSource-Protocol.h"
#include "HDWorkoutSessionController-Protocol.h"
#include "HDWorkoutSessionEntity.h"
#include "HDWorkoutSessionRapportSyncController.h"
#include "HDWorkoutSessionStateController-Protocol.h"
#include "HDWorkoutSessionTaskServer.h"
#include "HKDataFlowLinkProcessor-Protocol.h"
#include "HKStateMachineDelegate-Protocol.h"

@class BKSProcessAssertion, HKDataFlowLink, HKObserverSet, HKSource, HKStateMachine, HKWorkoutActivity, HKWorkoutConfiguration, NSArray, NSDate, NSString, NSUUID, _HKCurrentWorkoutSnapshot, _HKExpiringCompletionTimer;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface HDWorkoutSessionServer : NSObject<HKDataFlowLinkProcessor, HKStateMachineDelegate, HDWorkoutSessionStateController, HDWorkoutDataSource> {
  /* instance variables */
  HDProfile *_profile;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<OS_dispatch_queue> *_persistenceQueue;
  HKObserverSet *_observers;
  NSObject<HDWorkoutSessionController> *_sessionController;
  _HKExpiringCompletionTimer *_invalidationTimer;
  BKSProcessAssertion *_invalidationAssertion;
  HDWorkoutSessionEntity *_persistentEntity;
  double _stopEventGenerationWaitInterval;
  HKStateMachine *_stateMachine;
  HKStateMachine *_targetStateMachine;
  BOOL _hasFailed;
  BOOL _isRecovering;
  _HKCurrentWorkoutSnapshot *_currentWorkoutSnapshot;
  NSObject<OS_dispatch_source> *_latestActivityUpdateTimer;
  NSDate *_requestedStartDate;
  NSDate *_requestedEndDate;
  HKWorkoutConfiguration *_firstActivityConfiguration;
}

@property (readonly, copy, nonatomic) NSUUID *identifier;
@property (readonly, copy, nonatomic) HKWorkoutConfiguration *workoutConfiguration;
@property (readonly, nonatomic) long long sessionType;
@property (readonly, copy, nonatomic) NSString *applicationIdentifier;
@property (readonly, nonatomic) BOOL isActive;
@property (readonly, nonatomic) BOOL canBePaused;
@property (readonly, nonatomic) BOOL isFirstParty;
@property (readonly, nonatomic) BOOL shouldStopPreviousSession;
@property (readonly, nonatomic) BOOL isGymKit;
@property (readonly, nonatomic) BOOL isPaused;
@property (weak, nonatomic) HDWorkoutSessionTaskServer *taskServer;
@property (retain, nonatomic) HDHealthStoreClient *client;
@property (readonly, nonatomic) HDWorkoutSessionRapportSyncController *syncController;
@property (nonatomic) BOOL clientDidSetupSession;
@property (readonly, copy, nonatomic) NSString *clientProcessBundleIdentifier;
@property (readonly, copy, nonatomic) HKSource *clientSource;
@property (readonly, nonatomic) long long state;
@property (readonly, copy, nonatomic) NSDate *startDate;
@property (readonly, copy, nonatomic) NSDate *stopDate;
@property (readonly, copy, nonatomic) HKWorkoutActivity *currentActivity;
@property (readonly, copy, nonatomic) HKWorkoutConfiguration *currentActivityConfiguration;
@property (readonly, copy, nonatomic) NSArray *activityConfigurations;
@property (readonly, nonatomic) BOOL isMirroring;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSObject<HDWorkoutDataAccumulator> *workoutDataAccumulator;
@property (readonly) HKDataFlowLink *workoutDataFlowLink;
@property (readonly, copy) NSUUID *workoutDataProcessorUUID;

/* class methods */
+ (id)recoveredSessionServerWithProfile:(id)profile sessionUUID:(id)uuid error:(id *)error;
+ (id)workoutConfigurationForRecoveryWithProfile:(id)profile sessionUUID:(id)uuid error:(id *)error;
+ (id)sessionIdentifierForRecoveryInProfile:(id)profile error:(id *)error;
+ (BOOL)finishAllWorkoutSessionsForClient:(id)client profile:(id)profile error:(id *)error;
+ (BOOL)finishAllWorkoutsExcludingSessions:(id)sessions profile:(id)profile error:(id *)error;
+ (void)unitTest_setDefaultStopEventGenerationWaitInterval:(double)interval;

/* instance methods */
- (id)initWithProfile:(id)profile configuration:(id)configuration sessionUUID:(id)uuid;
- (void)dealloc;
- (void)invalidateTaskServer:(id)server;
- (void)setAssociatedWorkoutBuilderEntity:(id)entity;
- (id)currentWorkoutSnapshot;
- (id)taskServerConfigurationForRecoveryWithError:(id *)error;
- (void)workoutDataDestination:(id)destination requestsDataFrom:(id)from to:(id)to;
- (void)workoutDataDestination:(id)destination didChangeFromState:(unsigned long long)state toState:(unsigned long long)state;
- (void)workoutDataDestination:(id)destination requestsFinalDataFrom:(id)from to:(id)to completion:(id /* block */)completion;
- (void)workoutDataDestination:(id)destination didUpdateConfiguration:(id)configuration;
- (void)workoutDataDestination:(id)destination didBeginActivity:(id)activity;
- (void)workoutDataDestination:(id)destination didEndActivity:(id)activity;
- (void)workoutDataDestination:(id)destination didInsertEvent:(id)event;
- (void)addObserver:(id)observer queue:(id)queue;
- (void)removeObserver:(id)observer;
- (void)stateMachine:(id)machine persistTransition:(id)transition;
- (void)stateMachine:(id)machine willEnterState:(id)state date:(id)date error:(id)error;
- (void)stateMachine:(id)machine didEnterState:(id)state date:(id)date error:(id)error;
- (void)stateMachine:(id)machine didTransition:(id)transition fromState:(id)state toState:(id)state date:(id)date error:(id)error;
- (BOOL)setTargetState:(long long)state date:(id)date error:(id *)error;
- (void)didBecomeCurrent;
- (void)didResignCurrentWithError:(id)error;
- (BOOL)prepareWithError:(id *)error;
- (BOOL)startActivityWithDate:(id)date error:(id *)error;
- (BOOL)stopActivityWithDate:(id)date error:(id *)error;
- (BOOL)endWithError:(id *)error;
- (BOOL)pauseWithError:(id *)error;
- (BOOL)resumeWithError:(id *)error;
- (void)autoPauseWithDate:(id)date;
- (void)autoResumeWithDate:(id)date;
- (void)endHeartRateRecovery;
- (void)finish;
- (void)finishAggregationWithDate:(id)date;
- (void)generateEvent:(id)event;
- (void)generateError:(id)error;
- (void)generateMetadata:(id)metadata;
- (void)generateConfigurationUpdate:(id)update;
- (void)didBeginNewActivity:(id)activity;
- (void)didEndCurrentActivity:(id)activity;
- (void)didDetectActivityChange:(id)change;
- (BOOL)storeSessionControllerState:(id)state forRecoveryIdentifier:(id)identifier error:(id *)error;
- (BOOL)beginNewActivityWithConfiguration:(id)configuration date:(id)date metadata:(id)metadata error:(id *)error;
- (BOOL)endCurrentActivityOnDate:(id)date error:(id *)error;
- (BOOL)enableAutomaticDetectionForActivityConfigurations:(id)configurations error:(id *)error;
- (void)startMirroringToCompanionDeviceWithCompletion:(id /* block */)completion;
- (void)stopMirroringToCompanionDeviceWithCompletion:(id /* block */)completion;
- (void)didDisconnectFromRemoteWithError:(id)error;
- (void)sendDataToRemoteWorkoutSession:(id)session completion:(id /* block */)completion;
- (void)didReceiveDataFromRemoteWorkoutSession:(id)session completion:(id /* block */)completion;
- (void)syncCurrentActivity:(id)activity completion:(id /* block */)completion;
- (void)syncWorkoutEvents:(id)events completion:(id /* block */)completion;
- (void)syncSessionEvent:(long long)event date:(id)date;
- (void)syncTransitionToState:(long long)state date:(id)date completion:(id /* block */)completion;
- (void)receivedBackgroundRuntimeRequestWithCompletion:(id /* block */)completion;
- (void)remoteSessionDidRecover;
- (void)unitTest_setSessionController:(id)controller;
- (void)unitTest_setStopEventGenerationWaitInterval:(double)interval;
- (void)unitTest_generateStopEvent;
- (void)unitTest_generateWorkoutConfigurationUpdate:(id)update;
- (BOOL)unitTest_updateLatestActivityDate:(id)date;
- (void)unitTest_setCMWorkoutManager:(id)manager;
- (void)fakeActivityDetection:(id)detection workoutActivity:(id)activity completion:(id /* block */)completion;
- (BOOL)_queue_clientApplicationCanStartWorkoutSessionWithError:(id *)error;
@end

#endif /* HDWorkoutSessionServer_h */
