//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDActivityCacheStatisticsBuilder_h
#define HDActivityCacheStatisticsBuilder_h
@import Foundation;

#include "HDActivityCacheStatisticsBuilderSourceDelegate-Protocol.h"

@class HKQuantity, NSNumber, NSString;
@protocol {map<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>, std::less<_HKDataTypeCode>, std::allocator<std::pair<const _HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>>>="__tree_"{__tree<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::__map_value_compare<_HKDataTypeCode, std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::less<_HKDataTypeCode>>, std::allocator<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<_HKDataTypeCode, std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::less<_HKDataTypeCode>>>="__value_"Q}}}, {vector<HDActivityCacheActiveSource, std::allocator<HDActivityCacheActiveSource>>="__begin_"^{HDActivityCacheActiveSource}"__end_"^{HDActivityCacheActiveSource}"__end_cap_"{__compressed_pair<HDActivityCacheActiveSource *, std::allocator<HDActivityCacheActiveSource>>="__value_"^{HDActivityCacheActiveSource}}}, {vector<HDActivityCacheStatisticsBuilderStandHourSample, std::allocator<HDActivityCacheStatisticsBuilderStandHourSample>>="__begin_"^{HDActivityCacheStatisticsBuilderStandHourSample}"__end_"^{HDActivityCacheStatisticsBuilderStandHourSample}"__end_cap_"{__compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::allocator<HDActivityCacheStatisticsBuilderStandHourSample>>="__value_"^{HDActivityCacheStatisticsBuilderStandHourSample}}}, {vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>>="__begin_"^{HDActivityCacheStatisticsBuilderWorkoutSample}"__end_"^{HDActivityCacheStatisticsBuilderWorkoutSample}"__end_cap_"{__compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>>="__value_"^{HDActivityCacheStatisticsBuilderWorkoutSample}}};

@interface HDActivityCacheStatisticsBuilder : NSObject {
  /* instance variables */
  struct vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>> { struct HDActivityCacheStatisticsBuilderWorkoutSample *__begin_; struct HDActivityCacheStatisticsBuilderWorkoutSample *__end_; struct __compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>> { struct HDActivityCacheStatisticsBuilderWorkoutSample *__value_; } __end_cap_; } _workouts;
  struct vector<HDActivityCacheStatisticsBuilderStandHourSample, std::allocator<HDActivityCacheStatisticsBuilderStandHourSample>> { struct HDActivityCacheStatisticsBuilderStandHourSample *__begin_; struct HDActivityCacheStatisticsBuilderStandHourSample *__end_; struct __compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::allocator<HDActivityCacheStatisticsBuilderStandHourSample>> { struct HDActivityCacheStatisticsBuilderStandHourSample *__value_; } __end_cap_; } _standHourSamples;
  struct vector<HDActivityCacheActiveSource, std::allocator<HDActivityCacheActiveSource>> { struct HDActivityCacheActiveSource *__begin_; struct HDActivityCacheActiveSource *__end_; struct __compressed_pair<HDActivityCacheActiveSource *, std::allocator<HDActivityCacheActiveSource>> { struct HDActivityCacheActiveSource *__value_; } __end_cap_; } _activationLogSamples;
  HKQuantity *_lastActiveEnergyValue;
  NSNumber *_lastMoveMinuteValue;
  HKQuantity *_lastDistanceWalkingValue;
  NSNumber *_lastFlightsClimbedValue;
  NSNumber *_lastStepCountValue;
  NSNumber *_lastPushCountValue;
  NSNumber *_lastStandHourValue;
  NSNumber *_lastExerciseMinuteValue;
  double _deepBreathingDurationValue;
  struct vector<HDActivityCacheActiveSource, std::allocator<HDActivityCacheActiveSource>> { struct HDActivityCacheActiveSource *__begin_; struct HDActivityCacheActiveSource *__end_; struct __compressed_pair<HDActivityCacheActiveSource *, std::allocator<HDActivityCacheActiveSource>> { struct HDActivityCacheActiveSource *__value_; } __end_cap_; } _activeSourcesList;
  struct map<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>, std::less<_HKDataTypeCode>, std::allocator<std::pair<const _HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>>> { struct __tree<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::__map_value_compare<_HKDataTypeCode, std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::less<_HKDataTypeCode>>, std::allocator<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<_HKDataTypeCode, std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::less<_HKDataTypeCode>>> { unsigned long long __value_; } __pair3_; } __tree_; } _sourceTotalsByIntervalIndexByTypeCode;
  double _builderStartTime;
  double _builderEndTime;
  NSString *_loggingName;
}

@property (nonatomic) double intervalDuration;
@property (weak, nonatomic) NSObject<HDActivityCacheStatisticsBuilderSourceDelegate> *sourceDelegate;

/* instance methods */
- (id)initWithDateInterval:(id)interval loggingName:(id)name;
- (id)init;
- (id)activeEnergyValue;
- (long long)moveMinuteValue;
- (id)distanceWalkingValue;
- (long long)flightsClimbedValue;
- (long long)stepCountValue;
- (long long)pushCountValue;
- (long long)standHourValue;
- (long long)exerciseMinuteValue;
- (double)deepBreathingDurationValue;
- (void)addWorkouts:(const void *)workouts;
- (void)addStandHourSamples:(const void *)samples;
- (void)addActivationLogSamples:(const void *)samples;
- (void)addDeviceSample:(struct HDActivityCacheStatisticsBuilderSample { double x0; double x1; double x2; long long x3; })sample typeCode:(long long)code;
- (void)addDeviceSamples:(const void *)samples typeCode:(long long)code;
- (void)addWorkoutSample:(struct HDActivityCacheStatisticsBuilderSample { double x0; double x1; double x2; long long x3; })sample typeCode:(long long)code;
- (void)addDeepBreathingSessionDuration:(double)duration;
- (id)createStatisticsCollectionWithType:(id)type intervalComponents:(id)components calendar:(id)calendar;
- (id)createMoveStatisticsWithIntervalComponents:(id)components calendar:(id)calendar;
- (id)createMoveMinuteStatisticsWithIntervalComponents:(id)components calendar:(id)calendar;
- (id)createExerciseStatisticsWithIntervalComponents:(id)components calendar:(id)calendar;
- (id)createStandStatisticsWithCalendar:(id)calendar;
- (id)workoutSamplesWithSourceManager:(id)manager;
@end

#endif /* HDActivityCacheStatisticsBuilder_h */
