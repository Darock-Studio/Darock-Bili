//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDStatisticsCollectionCalculatorAttenuatedDataSource_h
#define HDStatisticsCollectionCalculatorAttenuatedDataSource_h
@import Foundation;

#include "HDStatisticsCollectionCalculatorDefaultDataSource.h"
#include "HDQuantitySampleAttenuationEngine.h"
#include "HDQuantitySampleAttenuationProvider.h"

@protocol struct deque<HDQuantitySampleAttenuationEngineSample, std::allocator<HDQuantitySampleAttenuationEngineSample>> { struct __split_buffer<HDQuantitySampleAttenuationEngineSample *, std::allocator<HDQuantitySampleAttenuationEngineSample *>> { struct  * * x0; struct  * * x1; struct  * * x2; struct __compressed_pair<HDQuantitySampleAttenuationEngineSample **, std::allocator<HDQuantitySampleAttenuationEngineSample *>> { struct  * * x0; } x3; } x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<HDQuantitySampleAttenuationEngineSample>> { unsigned long long x0; } x2; }, {deque<HDQuantitySampleAttenuationEngineSample, std::allocator<HDQuantitySampleAttenuationEngineSample>>="__map_"{__split_buffer<HDQuantitySampleAttenuationEngineSample *, std::allocator<HDQuantitySampleAttenuationEngineSample *>>="__first_"^^{?}"__begin_"^^{?}"__end_"^^{?}"__end_cap_"{__compressed_pair<HDQuantitySampleAttenuationEngineSample **, std::allocator<HDQuantitySampleAttenuationEngineSample *>>="__value_"^^{?}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<HDQuantitySampleAttenuationEngineSample>>="__value_"Q}};

@interface HDStatisticsCollectionCalculatorAttenuatedDataSource : HDStatisticsCollectionCalculatorDefaultDataSource

@property (readonly, nonatomic) HDQuantitySampleAttenuationProvider *attenuationProvider;
@property (readonly, nonatomic) HDQuantitySampleAttenuationEngine *attenuationEngine;
@property (nonatomic) struct deque<HDQuantitySampleAttenuationEngineSample, std::allocator<HDQuantitySampleAttenuationEngineSample>> { struct __split_buffer<HDQuantitySampleAttenuationEngineSample *, std::allocator<HDQuantitySampleAttenuationEngineSample *>> { struct  * * x0; struct  * * x1; struct  * * x2; struct __compressed_pair<HDQuantitySampleAttenuationEngineSample **, std::allocator<HDQuantitySampleAttenuationEngineSample *>> { struct  * * x0; } x3; } x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<HDQuantitySampleAttenuationEngineSample>> { unsigned long long x0; } x2; } attenuationSamplesWindow;

/* instance methods */
- (id)initForProfile:(id)profile quantityType:(id)type predicate:(id)predicate restrictedSourceEntities:(id)entities attenuationType:(id)type;
- (BOOL)collectionCalculator:(id)calculator queryForInterval:(id)interval error:(id *)error sampleHandler:(id /* block */)handler mergeHandler:(id /* block */)handler;
- (void)_appendToAttenuationSamplesWindowUsingSourceSample:(struct { double x0; double x1; double x2; BOOL x3; long long x4; })sample attenuatedSample:(struct { double x0; double x1; double x2; BOOL x3; long long x4; })sample;
- (BOOL)_attenuationSamplesWindowContainsSample:(struct { double x0; double x1; double x2; BOOL x3; long long x4; })sample;
- (BOOL)_attenuationSamplesWindowContainsSampleStart:(struct { double x0; double x1; double x2; BOOL x3; long long x4; })start;
- (struct queue<HDQuantitySampleAttenuationEngineSample, std::deque<HDQuantitySampleAttenuationEngineSample>> { struct deque<HDQuantitySampleAttenuationEngineSample, std::allocator<HDQuantitySampleAttenuationEngineSample>> { struct __split_buffer<HDQuantitySampleAttenuationEngineSample *, std::allocator<HDQuantitySampleAttenuationEngineSample *>> { struct  * * x0; struct  * * x1; struct  * * x2; struct __compressed_pair<HDQuantitySampleAttenuationEngineSample **, std::allocator<HDQuantitySampleAttenuationEngineSample *>> { struct  * * x0; } x3; } x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<HDQuantitySampleAttenuationEngineSample>> { unsigned long long x0; } x2; } x0; })_extractAttenuatedSamplesFrom:(struct { double x0; double x1; double x2; BOOL x3; long long x4; })from;
- (void)_attenuationSamplesWindowAdvanceToSample:(struct { double x0; double x1; double x2; BOOL x3; long long x4; })sample;
@end

#endif /* HDStatisticsCollectionCalculatorAttenuatedDataSource_h */
