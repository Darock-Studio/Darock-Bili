//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDSQLiteDatabase_h
#define HDSQLiteDatabase_h
@import Foundation;

#include "HDSQLiteDatabaseDelegate-Protocol.h"
#include "HDSQLiteStatementCache.h"

@class NSError, NSMutableArray, NSNumber, NSString, NSURL;

@interface HDSQLiteDatabase : NSObject {
  /* instance variables */
  struct sqlite3 * _db;
  BOOL _isInTransaction;
  BOOL _requiresRollback;
  long long _transactionType;
  BOOL _isHandlingTransactionBeforeCommit;
  BOOL _isHandlingTransactionEnd;
  NSMutableArray *_beforeCommitBlocks;
  NSMutableArray *_onCommitBlocks;
  NSMutableArray *_onRollbackBlocks;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _interruptionLock;
}

@property (weak, nonatomic) NSObject<HDSQLiteDatabaseDelegate> *delegate;
@property (nonatomic) long long cacheScope;
@property (readonly, nonatomic) HDSQLiteStatementCache *statementCache;
@property BOOL transactionInterruptRequested;
@property (nonatomic) BOOL encounteredOutOfSpace;
@property (readonly, copy, nonatomic) NSError *corruptionError;
@property (nonatomic) BOOL permitWritesInReadTransaction;
@property (readonly, copy, nonatomic) NSURL *fileURL;
@property (readonly, nonatomic) BOOL open;
@property (nonatomic) BOOL writer;
@property (copy, nonatomic) NSString *fileProtectionType;
@property (nonatomic) BOOL checkpointRequired;
@property (readonly, copy, nonatomic) NSNumber *lastInsertRowID;

/* class methods */
+ (BOOL)databaseSchemas:(id)schemas containTable:(id)table;
+ (id)mainDatabaseURLWithProfileDirectoryPath:(id)path;
+ (id)protectedDatabaseURLWithProfileDirectoryPath:(id)path;
+ (id)highFrequencyDatabaseURLWithProfileDirectoryPath:(id)path;
+ (id)memoryDatabaseFromURL:(id)url;

/* instance methods */
- (BOOL)deleteRowsFromDataEntitySubclassTable:(id)table intermediateTables:(id)tables error:(id *)error;
- (BOOL)deleteDataEntitySubclassTable:(id)table intermediateTables:(id)tables error:(id *)error;
- (BOOL)deleteDataEntitySubclassTablesIfExist:(id)exist intermediateTables:(id)tables error:(id *)error;
- (id)highFrequencyDataStore;
- (BOOL)accessHFDForReadingWithError:(id *)error block:(id /* block */)block;
- (BOOL)accessHFDForWritingWithError:(id *)error block:(id /* block */)block;
- (id)initWithDatabaseURL:(id)url;
- (id)initMemoryDatabase;
- (void)dealloc;
- (int)openWithError:(id *)error;
- (int)openForReadingWithError:(id *)error;
- (void)close;
- (BOOL)isOpen;
- (void)accessDatabaseUsingBlock:(id /* block */)block;
- (id)getLastErrorWithStatement:(struct sqlite3_stmt *)statement context:(id)context;
- (int)getChangesCount;
- (BOOL)performTransactionWithType:(long long)type error:(id *)error usingBlock:(id /* block */)block;
- (BOOL)_executeStatementWithError:(id *)error statementProvider:(id /* block */)provider bindingHandler:(id /* block */)handler enumerationHandler:(id /* block */)handler;
- (BOOL)executeSQL:(id)sql error:(id *)error bindingHandler:(id /* block */)handler enumerationHandler:(id /* block */)handler;
- (BOOL)executeUncachedSQL:(id)sql error:(id *)error bindingHandler:(id /* block */)handler enumerationHandler:(id /* block */)handler;
- (BOOL)executeUncachedSQL:(id)sql error:(id *)error;
- (BOOL)executeSQLStatements:(id)sqlstatements error:(id *)error;
- (BOOL)executeCachedStatementForKey:(const char *)key error:(id *)error SQLGenerator:(id /* block */)sqlgenerator bindingHandler:(id /* block */)handler enumerationHandler:(id /* block */)handler;
- (BOOL)setUserVersion:(long long)version withDatabaseName:(id)name error:(id *)error;
- (long long)userVersionWithDatabaseName:(id)name error:(id *)error;
- (void)onCommit:(id /* block */)commit orRollback:(id /* block */)rollback;
- (void)beforeCommit:(id /* block */)commit;
- (void)requireRollback;
- (long long)validateForeignKeysForTable:(id)table databaseName:(id)name error:(id *)error;
- (BOOL)table:(id)table hasColumnWithName:(id)name error:(id *)error;
- (BOOL)foreignKeyExistsFromTable:(id)table column:(id)column toTable:(id)table column:(id)column error:(id *)error;
- (id)typeOfColumn:(id)column inTable:(id)table error:(id *)error;
- (BOOL)columnIsNullable:(id)nullable inTable:(id)table error:(id *)error;
- (BOOL)enableIncrementalAutovacuumForDatabaseWithName:(id)name error:(id *)error;
- (BOOL)incrementalVacuumDatabaseIfNeeded:(id)needed error:(id *)error;
- (BOOL)performIntegrityCheckOnDatabase:(id)database error:(id *)error integrityErrorHandler:(id /* block */)handler;
- (id)dumpSchemaWithError:(id *)error;
- (void)unitTest_setCorruptionError:(id)error;
- (BOOL)isWriter;
@end

#endif /* HDSQLiteDatabase_h */
