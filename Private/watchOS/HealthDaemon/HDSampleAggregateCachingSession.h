//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDSampleAggregateCachingSession_h
#define HDSampleAggregateCachingSession_h
@import Foundation;

#include "HDProfile.h"
#include "HDSampleAggregateCacheStore.h"
#include "HDSourceEntity.h"

@class HDAssertion, NSArray, NSDate, NSDateComponents, NSDateInterval, NSError, NSString;
@protocol {unordered_set<long, std::hash<long>, std::equal_to<long>, std::allocator<long>>="__table_"{__hash_table<long, std::hash<long>, std::equal_to<long>, std::allocator<long>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<long, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<long, void *> *>, std::allocator<std::__hash_node<long, void *>>>="__value_"{__hash_node_base<std::__hash_node<long, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<long>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<long>>="__value_"f}}};

@interface HDSampleAggregateCachingSession : NSObject {
  /* instance variables */
  HDSampleAggregateCacheStore *_cacheStore;
  HDProfile *_profile;
  Class _cachedClass;
  NSDateInterval *_queryInterval;
  NSString *_cachingIdentifier;
  HDSourceEntity *_sourceEntity;
  long long _generationNumber;
  NSDate *_anchorDate;
  NSDate *_persistentAnchorDate;
  NSDateComponents *_intervalComponents;
  long long _maxAnchor;
  NSError *_fatalError;
  long long _state;
  struct unordered_set<long, std::hash<long>, std::equal_to<long>, std::allocator<long>> { struct __hash_table<long, std::hash<long>, std::equal_to<long>, std::allocator<long>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<long, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<long, void *> *>, std::allocator<std::__hash_node<long, void *>>> { struct __hash_node_base<std::__hash_node<long, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<long>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<long>> { float __value_; } __p3_; } __table_; } _staleIndexes;
  BOOL _anchorSetOnInsert;
  NSError *_sampleAggregateCachingSessionQueue_insertError;
}

@property (copy, nonatomic) NSArray *invalidationQueryDescriptors;
@property (retain, nonatomic) HDAssertion *accessibilityAssertion;

/* instance methods */
- (id)initWithProfile:(id)profile cachingIdentifier:(id)identifier sourceEntity:(id)entity queryDescriptor:(id)descriptor cachedClass:(Class)class queryInterval:(id)interval anchorDate:(id)date intervalComponents:(id)components timeIntervalToBucketIndex:(id /* block */)index;
- (id)persistentAnchorDateWithError:(id *)error;
- (long long)cachesExistWithError:(id *)error;
- (BOOL)activateWithError:(id *)error cacheHandler:(id /* block */)handler;
- (void)deleteCachesForIntervals:(id)intervals completion:(id /* block */)completion;
- (void)insertCaches:(id)caches anchor:(id)anchor completion:(id /* block */)completion;
- (void)finishWithCompletion:(id /* block */)completion;
@end

#endif /* HDSampleAggregateCachingSession_h */
