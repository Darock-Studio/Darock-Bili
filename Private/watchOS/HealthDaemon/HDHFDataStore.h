//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDHFDataStore_h
#define HDHFDataStore_h
@import Foundation;

#include "HDHFDataStoreDelegate-Protocol.h"

@class NSString;
@protocol OS_dispatch_queue, {shared_ptr<health::DataStore>="__ptr_"^{DataStore}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<health::VirtualFilesystem>="__ptr_"^{VirtualFilesystem}"__cntrl_"^{__shared_weak_count}};

@interface HDHFDataStore : NSObject {
  /* instance variables */
  struct shared_ptr<health::VirtualFilesystem> { struct VirtualFilesystem *__ptr_; struct __shared_weak_count *__cntrl_; } _fileSystem;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  struct shared_ptr<health::DataStore> { struct DataStore *__ptr_; struct __shared_weak_count *__cntrl_; } _highFrequencyDataStore;
  atomic BOOL _invalidated;
  atomic BOOL _hasOpenStore;
  NSObject<OS_dispatch_queue> *_openQueue;
  long long _openAttempt;
}

@property (nonatomic) BOOL isOpen;
@property (weak, nonatomic) NSObject<HDHFDataStoreDelegate> *delegate;
@property (readonly, copy, nonatomic) NSString *fileSystemPath;
@property (readonly, nonatomic) long long rebuildState;

/* instance methods */
- (struct unique_ptr<health::DataStore, std::default_delete<health::DataStore>> { struct __compressed_pair<health::DataStore *, std::default_delete<health::DataStore>> { struct DataStore * x0; } x0; })dataStoreAtURL:(id)url filesystem:(const void *)filesystem allowCheckpoint:(BOOL)checkpoint error:(id *)error;
- (BOOL)moveHFDAsideWithoutOverwritingFrom:(id)from to:(id)to error:(id *)error;
- (BOOL)deleteHFDAt:(id)hfdat error:(id *)error;
- (id)initWithPath:(id)path;
- (id)initWithPath:(id)path fileSystem:(struct shared_ptr<health::VirtualFilesystem> { struct VirtualFilesystem * x0; struct __shared_weak_count * x1; })system;
- (void)dealloc;
- (id)description;
- (id)diagnosticDescription;
- (void)flushForInvalidation:(BOOL)invalidation;
- (BOOL)discardStoreWithError:(id *)error;
- (BOOL)_createNewStore:(id *)store;
- (BOOL)accessStoreWithError:(id *)error block:(id /* block */)block;
- (long long)rebuildWithTransaction:(id)transaction error:(id *)error;
- (void)requestHFDToSQLiteMigration;
- (long long)deleteSQLiteMigrationArchive:(id *)archive;
- (id)fileManager;
- (void)unitTest_resetRebuildState;
- (void)unitTest_requestRebuild;
- (void)unitTest_requestMigrationToSQLite;
- (long long)unitTest_rebuildState;
@end

#endif /* HDHFDataStore_h */
