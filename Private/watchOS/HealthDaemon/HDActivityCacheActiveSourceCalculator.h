//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HDActivityCacheActiveSourceCalculator_h
#define HDActivityCacheActiveSourceCalculator_h
@import Foundation;

@protocol {vector<HDActivityCacheActiveSource, std::allocator<HDActivityCacheActiveSource>>="__begin_"^{HDActivityCacheActiveSource}"__end_"^{HDActivityCacheActiveSource}"__end_cap_"{__compressed_pair<HDActivityCacheActiveSource *, std::allocator<HDActivityCacheActiveSource>>="__value_"^{HDActivityCacheActiveSource}}}, {vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>>="__begin_"^{HDActivityCacheStatisticsBuilderWorkoutSample}"__end_"^{HDActivityCacheStatisticsBuilderWorkoutSample}"__end_cap_"{__compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>>="__value_"^{HDActivityCacheStatisticsBuilderWorkoutSample}}};

@interface HDActivityCacheActiveSourceCalculator : NSObject {
  /* instance variables */
  long long _baseSourceIdentifier;
  struct vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>> { struct HDActivityCacheStatisticsBuilderWorkoutSample *__begin_; struct HDActivityCacheStatisticsBuilderWorkoutSample *__end_; struct __compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>> { struct HDActivityCacheStatisticsBuilderWorkoutSample *__value_; } __end_cap_; } _workouts;
  struct vector<HDActivityCacheActiveSource, std::allocator<HDActivityCacheActiveSource>> { struct HDActivityCacheActiveSource *__begin_; struct HDActivityCacheActiveSource *__end_; struct __compressed_pair<HDActivityCacheActiveSource *, std::allocator<HDActivityCacheActiveSource>> { struct HDActivityCacheActiveSource *__value_; } __end_cap_; } _activationLogEntries;
}

/* instance methods */
- (id)init;
- (void)setLocalDeviceSourceIdentifier:(long long)identifier;
- (void)setWorkouts:(void *)workouts;
- (void)setActivationLogEntries:(void *)entries;
- (struct vector<HDActivityCacheActiveSource, std::allocator<HDActivityCacheActiveSource>> { struct HDActivityCacheActiveSource * x0; struct HDActivityCacheActiveSource * x1; struct __compressed_pair<HDActivityCacheActiveSource *, std::allocator<HDActivityCacheActiveSource>> { struct HDActivityCacheActiveSource * x0; } x2; })createActiveSourceLog;
- (struct HDActivityCacheActiveSource { double x0; long long x1; struct vector<long long, std::allocator<long long>> { long long * x0; long long * x1; struct __compressed_pair<long long *, std::allocator<long long>> { long long * x0; } x2; } x2; })_baseActiveSource;
@end

#endif /* HDActivityCacheActiveSourceCalculator_h */
