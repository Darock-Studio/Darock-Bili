//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLEngineStore_h
#define CPLEngineStore_h
@import Foundation;

#include "CPLAbstractObject-Protocol.h"
#include "CPLChangeBatch.h"
#include "CPLEngineChangePipe.h"
#include "CPLEngineCloudCache.h"
#include "CPLEngineComponent-Protocol.h"
#include "CPLEngineDerivativesCache.h"
#include "CPLEngineIDMapping.h"
#include "CPLEngineIgnoredRecords.h"
#include "CPLEngineLibrary.h"
#include "CPLEngineOutgoingResources.h"
#include "CPLEnginePendingRecordChecks.h"
#include "CPLEnginePushRepository.h"
#include "CPLEngineQuarantinedRecords.h"
#include "CPLEngineRemappedRecords.h"
#include "CPLEngineResourceDownloadQueue.h"
#include "CPLEngineResourceStorage.h"
#include "CPLEngineRevertRecords.h"
#include "CPLEngineScopeCleanupTasks.h"
#include "CPLEngineScopeStorage.h"
#include "CPLEngineStatusCenter.h"
#include "CPLEngineTransientRepository.h"
#include "CPLPlatformObject.h"
#include "CPLRecordStorageView.h"
#include "CPLResetTracker.h"
#include "CPLSyncSessionPredictor.h"
#include "CPLTransportScopeMapping.h"

@class BOOL *, NSArray, NSDate, NSHashTable, NSMutableArray, NSMutableDictionary, NSSet, NSString, NSURL;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface CPLEngineStore : NSObject<CPLAbstractObject, CPLEngineComponent> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_batchedTransactionsQueue;
  NSMutableArray *_batchedTransactions;
  BOOL _batchedTransactionDequeueIsScheduled;
  BOOL _dontDelayChangeSessionUpdate;
  BOOL _applyingChangeSessionUpdate;
  NSURL *_resetEventsURL;
  NSMutableArray *_resetEvents;
  CPLResetTracker *_pendingTracker;
  CPLChangeBatch *_unacknowledgedBatch;
  BOOL _discardUnacknowledgedBatchOnTransactionFail;
  BOOL _transactionClientCacheViewHasPushRepository;
  NSMutableDictionary *_transactionNewPredictions;
  NSSet *_lastInvalidRecordScopedIdentifiers;
  NSDate *_lastInvalidRecordsDate;
  NSObject<OS_dispatch_source> *_pendingUpdateTimer;
  NSObject<OS_dispatch_queue> *_pendingUpdateQueue;
  double _pendingUpdateInterval;
  BOOL _unschedulePendingUpdateApplyOnWriteSuccess;
  BOOL _schedulePendingUpdateApplyOnWriteSuccess;
  BOOL _scheduleSetupOnWriteSuccess;
  BOOL _scheduleDisabledFeatureUpdateOnWriteSuccess;
  BOOL _schedulePullFromClient;
  NSObject<OS_dispatch_queue> *_shouldSyncScopeListQueue;
  BOOL _shouldEnableScopeListSyncOnWriteSuccess;
  BOOL _hasUpdatedDisabledFeatures;
  BOOL _isUpdatingDisabledFeatures;
  BOOL _shouldTriggerCompleteResetSyncAfterDisabledFeaturesUpdate;
  BOOL _shouldTriggerResetSyncAfterDisabledFeaturesUpdate;
}

@property (readonly, nonatomic) BOOL hasPendingResetSync;
@property (nonatomic) unsigned long long state;
@property (readonly, nonatomic) NSArray *storages;
@property (readonly, weak, nonatomic) CPLEngineLibrary *engineLibrary;
@property (readonly) BOOL shouldSyncScopeList;
@property (readonly, nonatomic) CPLEnginePushRepository *pushRepository;
@property (readonly, nonatomic) BOOL pushRepositoryIsFull;
@property (readonly, nonatomic) CPLEngineScopeStorage *scopes;
@property (readonly, nonatomic) CPLEngineScopeCleanupTasks *cleanupTasks;
@property (readonly, nonatomic) CPLEngineChangePipe *pullQueue;
@property (readonly, nonatomic) CPLEngineRevertRecords *revertRecords;
@property (readonly, nonatomic) CPLEngineIDMapping *idMapping;
@property (readonly, nonatomic) CPLEngineCloudCache *cloudCache;
@property (readonly, nonatomic) CPLRecordStorageView *transactionClientCacheView;
@property (readonly, nonatomic) CPLEngineTransientRepository *transientPullRepository;
@property (readonly, nonatomic) CPLEngineResourceStorage *resourceStorage;
@property (readonly, nonatomic) CPLEngineResourceDownloadQueue *downloadQueue;
@property (readonly, nonatomic) CPLEngineOutgoingResources *outgoingResources;
@property (readonly, nonatomic) CPLEngineRemappedRecords *remappedRecords;
@property (readonly, nonatomic) CPLEngineQuarantinedRecords *quarantinedRecords;
@property (readonly, nonatomic) CPLEngineStatusCenter *statusCenter;
@property (readonly, nonatomic) CPLEnginePendingRecordChecks *pendingRecordChecks;
@property (readonly, nonatomic) CPLEngineIgnoredRecords *ignoredRecords;
@property (readonly) NSDate *libraryCreationDate;
@property (readonly, nonatomic) id corruptionInfo;
@property (readonly, nonatomic) CPLEngineDerivativesCache *derivativesCache;
@property (readonly, nonatomic) BOOL shouldGenerateDerivatives;
@property (readonly, nonatomic) NSArray *pushPullGatekeepers;
@property (readonly, nonatomic) NSArray *disabledFeatures;
@property (readonly, nonatomic) BOOL shouldUpdateDisabledFeatures;
@property (readonly, nonatomic) NSString *sharingScopeIdentifier;
@property (readonly, nonatomic) CPLSyncSessionPredictor *predictor;
@property (readonly, nonatomic) CPLTransportScopeMapping *transactionTransportScopeMapping;
@property (readonly, nonatomic) CPLPlatformObject *platformObject;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)dontBatchTransactions;
+ (void)setDontBatchTransactions:(BOOL)transactions;
+ (id)storageNames;
+ (id)stateDescriptionForState:(unsigned long long)state;
+ (id)platformImplementationProtocol;

/* instance methods */
- (id)newClientCacheViewUsesPushRepository:(BOOL *)repository;
- (id)initWithEngineLibrary:(id)library;
- (void)dealloc;
- (void)registerStorage:(id)storage;
- (void)_loadResetEvents;
- (void)_storeResetEvent:(id)event scopeIdentifier:(id)identifier date:(id)date pending:(BOOL)pending cause:(id)cause;
- (void)_storeResetEvent:(id)event scopeIdentifier:(id)identifier date:(id)date cause:(id)cause;
- (void)noteResetSyncFinished;
- (id)_resetEventsDescriptions;
- (id)_resetEventsJSON;
- (BOOL)_resetGlobalStateWithError:(id *)error;
- (BOOL)_resetLocalSyncStateWithCause:(id)cause scope:(id)scope date:(id)date error:(id *)error;
- (BOOL)_resetCompleteSyncStateWithCause:(id)cause scope:(id)scope error:(id *)error;
- (BOOL)_resetCompleteSyncStateIncludingIDMappingWithCause:(id)cause scope:(id)scope error:(id *)error;
- (BOOL)_resetSyncAnchorWithCause:(id)cause scope:(id)scope error:(id *)error;
- (BOOL)resetLocalSyncStateWithCause:(id)cause error:(id *)error;
- (BOOL)resetLocalSyncStateWithCause:(id)cause date:(id)date error:(id *)error;
- (BOOL)resetCompleteSyncStateWithCause:(id)cause error:(id *)error;
- (BOOL)resetCompleteSyncStateIncludingIDMappingWithCause:(id)cause error:(id *)error;
- (BOOL)resetSyncAnchorWithCause:(id)cause error:(id *)error;
- (void)noteOtherResetEvent:(id)event cause:(id)cause;
- (void)noteInvalidRecordScopedIdentifiersInPushSession:(id)session;
- (BOOL)createStoragesDynamically:(id)dynamically error:(id *)error;
- (BOOL)deleteDynamicallyCreatedStorages:(id)storages error:(id *)error;
- (BOOL)_handleException:(id)exception;
- (void)_performTransaction:(id)transaction withBlock:(id /* block */)block;
- (void)_finishTransaction;
- (void)_performBarrierTransaction:(id)transaction withBlock:(id /* block */)block;
- (void)openWithCompletionHandler:(id /* block */)handler;
- (id)performReadTransactionWithBlock:(id /* block */)block;
- (void)writeTransactionDidSucceed;
- (void)writeTransactionDidFail;
- (void)transactionDidFinish;
- (void)_commitWriteTransaction:(id)transaction commitError:(id)error;
- (id)_performWriteTransactionByPassBlocker:(id)blocker WithBlock:(id /* block */)block completionHandler:(id /* block */)handler;
- (id)performWriteTransactionWithBlock:(id /* block */)block completionHandler:(id /* block */)handler;
- (void)blockWriteTransactionsWithCompletionHandler:(id /* block */)handler;
- (id)performWriteTransactionByPassBlocker:(id)blocker withBlock:(id /* block */)block completionHandler:(id /* block */)handler;
- (void)_scheduleBatchedTransactionsLocked;
- (void)_reallyPerformBatchedTransactionsLocked;
- (void)performBatchedWriteTransactionWithBlock:(id /* block */)block completionHandler:(id /* block */)handler;
- (void)performBatchedWriteTransactionBarrier;
- (void)performBatchedWriteTransactionBarrierWithCompletionBlock:(id /* block */)block;
- (void)performBarrier;
- (void)closeAndDeactivate:(BOOL)deactivate completionHandler:(id /* block */)handler;
- (BOOL)storeLibraryVersion:(id)version withError:(id *)error;
- (unsigned long long)libraryOptions;
- (BOOL)updateLibraryOptions:(unsigned long long)options error:(id *)error;
- (BOOL)_shouldSyncScopeListWithOptions:(unsigned long long)options;
- (void)_updateShouldSyncScopeList:(BOOL)list;
- (id)libraryVersion;
- (id)createNewLibraryVersion;
- (id)userIdentifier;
- (BOOL)storeUserIdentifier:(id)identifier error:(id *)error;
- (id)lastQuarantineCountReportDate;
- (BOOL)storeLastQuarantineCountReportDate:(id)date error:(id *)error;
- (id)clientCacheIdentifier;
- (BOOL)storeClientIsInSyncWithClientCacheWithError:(id *)error;
- (BOOL)isClientInSyncWithClientCache;
- (void)notePushRepositoryStoredSomeChanges;
- (BOOL)_applyAndDiscardPendingUpdate:(id)update error:(id *)error;
- (BOOL)_applyPendingUpdate:(id)update error:(id *)error;
- (void)_reallySchedulePendingUpdateApply;
- (void)_reallyUnschedulePendingUpdateApply;
- (void)_schedulePendingUpdateApply;
- (void)_unschedulePendingUpdateApply;
- (void)_dropTransactionClientCacheView;
- (BOOL)addPushPullGatekeeper:(id)gatekeeper error:(id *)error;
- (BOOL)clearAllPushPullGatekeepersWithError:(id *)error;
- (BOOL)_storeChangeSessionUpdate:(id)update error:(id *)error;
- (BOOL)storeChangeSessionUpdate:(id)update error:(id *)error;
- (BOOL)beginChangeSession:(id)session withLibraryVersion:(id)version resetTracker:(id)tracker error:(id *)error;
- (BOOL)applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:(id)version error:(id *)error;
- (BOOL)forceApplyPendingChangeSessionUpdateWithError:(id *)error;
- (BOOL)hasPendingChangeSessionUpdate;
- (BOOL)checkExpectedLibraryVersion:(id)version error:(id *)error;
- (void)keepUnacknowledgedBatch:(id)batch;
- (void)dropUnacknowledgedBatch;
- (id)unacknowledgedChangeWithLocalScopedIdentifier:(id)identifier;
- (BOOL)hasUnacknowledgedChanges;
- (id)_storedDisabledFeatures;
- (BOOL)updateDisabledFeatures:(id)features didReset:(BOOL *)reset error:(id *)error;
- (BOOL)isFeatureDisabled:(id)disabled;
- (BOOL)setShouldUpdateDisabledFeaturesWithError:(id *)error;
- (id)localResourceForCloudResource:(id)resource recordClass:(Class *)class;
- (id)derivativesFilter;
- (BOOL)storeDerivativesFilter:(id)filter error:(id *)error;
- (void)wipeStoreAtNextOpeningWithReason:(id)reason completionBlock:(id /* block */)block;
- (void)predictSyncSessionValue:(id)value ofType:(id)type;
- (BOOL)_canHaveActivatedScope:(id)scope libraryOptions:(unsigned long long)options error:(id *)error;
- (BOOL)canActivateScope:(id)scope error:(id *)error;
- (void)startVacuum;
- (void)stopVacuum;
- (void)emergencyClose;
- (void)markAsCorrupted;
- (void)_setSharingScopeIdentifier:(id)identifier;
- (void)storeSharingScopeIdentifier:(id)identifier;
- (void)dropSharingScopeIdentifier:(id)identifier;
- (void)_addCleanupBlock:(id /* block */)block;
- (id)_currentTransaction;
- (void)_setTransactionOnCurrentThread:(id)thread;
- (void)_removeTransactionOnCurrentThread:(id)thread;
- (BOOL)_canRead;
- (BOOL)_canWrite;
- (void)assertCanWrite;
- (void)assertCanRead;
- (void)assertNoUnacknowledgedChanges;
- (id)componentName;
- (void)getStatusWithCompletionHandler:(id /* block */)handler;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)handler;
- (void)testKey:(id)key value:(id)value completionHandler:(id /* block */)handler;
@end

#endif /* CPLEngineStore_h */
