//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLScopeUpdateScopeTask_h
#define CPLScopeUpdateScopeTask_h
@import Foundation;

#include "CPLEngineScopedTask.h"
#include "CPLEngineSyncTaskDelegate-Protocol.h"
#include "CPLScopeChange.h"
#include "CPLScopeUpdateScopeTask.h"

@class NSData, NSString;
@protocol CPLEngineTransportFetchTransportScopeTask, CPLEngineTransportGetScopeInfoTask, OS_dispatch_queue;

@interface CPLScopeUpdateScopeTask : CPLEngineScopedTask<CPLEngineSyncTaskDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  CPLScopeChange *_previousScopeChange;
  NSObject<CPLEngineTransportGetScopeInfoTask> *_getLibraryInfo;
  NSObject<CPLEngineTransportFetchTransportScopeTask> *_fetchTransportScope;
  NSData *_fetchedTransportScope;
  BOOL _retryingFetchingTransportScope;
  CPLScopeUpdateScopeTask *_lookForStagingScopeTask;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)_updateScopeWithNewScopeType:(long long)type scope:(id)scope updatedScopeChange:(id)change updatedFlags:(id)flags oldTransportScope:(id)scope updatedTransportScope:(id)scope shouldUpdateTransportScope:(id /* block */)scope store:(id)store transport:(id)transport inTransaction:(id)transaction;
+ (void)updateScopeWithNewScopeType:(long long)type scope:(id)scope updatedScopeChange:(id)change updatedFlags:(id)flags oldTransportScope:(id)scope updatedTransportScope:(id)scope shouldUpdateTransportScope:(id /* block */)scope store:(id)store transport:(id)transport inTransaction:(id)transaction;

/* instance methods */
- (id)initWithEngineLibrary:(id)library session:(id)session clientCacheIdentifier:(id)identifier scope:(id)scope transportScope:(id)scope;
- (void)_lookForStagingScopeWithIdentifier:(id)identifier transportScope:(id)scope;
- (void)_markScopeAsDeletedAndSucceedTaskWithFlags:(id)flags;
- (void)_markScopeAsFeatureDisabledWithFlags:(id)flags;
- (void)_markScopeHasBadTransportScopeWithError:(id)error;
- (void)_updateScopeWithNewScopeType:(long long)type updatedScopeChange:(id)change updatedFlags:(id)flags oldTransportScope:(id)scope updatedTransportScope:(id)scope;
- (void)_updateScopeChangeForPrimaryScopeRelatedToSharingScopeWithIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)_performAdditionalChecksWithNewScopeType:(long long)type updatedScopeChange:(id)change updatedFlags:(id)flags oldTransportScope:(id)scope updatedTransportScope:(id)scope completionHandler:(id /* block */)handler;
- (void)_getLibraryInfo;
- (void)_fetchTransportScope;
- (void)launch;
- (void)cancel;
- (BOOL)checkScopeIsValidInTransaction:(id)transaction;
- (id)taskIdentifier;
- (void)task:(id)task didFinishWithError:(id)error;
- (void)task:(id)task didProgress:(float)progress userInfo:(id)info;
@end

#endif /* CPLScopeUpdateScopeTask_h */
