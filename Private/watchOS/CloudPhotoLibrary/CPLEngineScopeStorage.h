//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLEngineScopeStorage_h
#define CPLEngineScopeStorage_h
@import Foundation;

#include "CPLEngineStorage.h"
#include "CPLAbstractObject-Protocol.h"
#include "CPLPlatformObject.h"
#include "_CPLEngineScopeCache.h"

@class NSCountedSet, NSDictionary, NSMutableArray, NSString;

@interface CPLEngineScopeStorage : CPLEngineStorage<CPLAbstractObject> {
  /* instance variables */
  _CPLEngineScopeCache *_scopeCache;
  BOOL _shouldResetGlobalsForMainScope;
  BOOL _scheduleATransportUpdate;
  BOOL _scheduleAScopeUpdate;
  BOOL _schedulePushHighPriorityToTransport;
  BOOL _schedulePushToTransport;
  BOOL _schedulePullFromTransport;
  BOOL _schedulePullFromClient;
  BOOL _shouldChangeSyncManagerPriorityBoost;
  BOOL _syncManagerPriorityBoost;
  BOOL _someScopeMightHaveToBePulledByClient;
  BOOL _clearSomeScopeMightHaveToBePulledByClient;
  NSMutableArray *_scopesToRemoveFromBrokenScopes;
  BOOL _shouldUpdateAssetCountsAtEndOfTransaction;
  NSDictionary *_assetCountsToUpdate;
  NSCountedSet *_scopeIdentifiersBeingCreated;
}

@property (readonly, nonatomic) BOOL hasStagedSyncAnchors;
@property (readonly, nonatomic) CPLPlatformObject *platformObject;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithEngineStore:(id)store name:(id)name;
- (BOOL)openWithError:(id *)error;
- (unsigned long long)scopeType;
- (void)_clearScopeCache;
- (void)_cacheScope:(id)scope;
- (void)_removeBrokenScope:(id)scope;
- (id)_scopeWithIdentifier:(id)identifier;
- (id)scopeWithLocalScopeIndex:(long long)index;
- (id)scopeWithCloudScopeIndex:(long long)index;
- (id)scopeWithStableIndex:(long long)index;
- (void)_forceSyncManagerPriorityBoost;
- (void)_checkSyncManagerPriorityBoost;
- (id)enumeratorForScopesIncludeInactive:(BOOL)inactive;
- (id)enumeratorForDeletedStagedScopes;
- (id)enumeratorForScopesNeedingUpdateFromTransport;
- (id)enumeratorForScopesNeedingToPushHighPriorityChangesToTransport;
- (BOOL)hasScopesNeedingToPushHighPriorityChangesToTransport;
- (id)enumeratorForScopesNeedingToPushChangesToTransport;
- (BOOL)hasScopesNeedingToPushChangesToTransport;
- (BOOL)setScopeHasChangesToPushToTransport:(id)transport error:(id *)error;
- (long long)pushToTransportTaskForScope:(id)scope;
- (BOOL)setScope:(id)scope hasCompletedPushToTransportTask:(long long)task error:(id *)error;
- (BOOL)doesScopeNeedToPushChangesToTransport:(id)transport;
- (id)enumeratorForScopesNeedingToPullChangesFromTransport;
- (BOOL)hasScopesNeedingToPullChangesFromTransport;
- (BOOL)setScopeHasChangesToPullFromTransport:(id)transport error:(id *)error;
- (BOOL)setAllScopesHasChangesToPullFromTransportWithError:(id *)error;
- (long long)pullFromTransportTaskForScope:(id)scope;
- (BOOL)setScope:(id)scope hasCompletedPullFromTransportTask:(long long)task error:(id *)error;
- (BOOL)doesScopeNeedToPullChangesFromTransport:(id)transport;
- (BOOL)setPullFromTransportExpirationInterval:(double)interval scope:(id)scope error:(id *)error;
- (id)enumeratorForScopesWithMingling;
- (BOOL)doScopesNeedMetadataSync:(id)sync;
- (id)_scopeChangeToBePulledByClientForScope:(id)scope;
- (id)scopeChangesNeedingToBePulledByClientWithMaximumCount:(unsigned long long)count;
- (BOOL)clientAcknowledgedScopeChanges:(id)changes error:(id *)error;
- (BOOL)setScopeNeedsToBePulledByClient:(id)client error:(id *)error;
- (BOOL)doesScopeNeedToBePulledByClient:(id)client;
- (BOOL)doesScopeSupportToBePulledByClient:(id)client;
- (id)enumeratorForScopesNeedingToUpdateTransport;
- (id)_createScopeFromScopeChange:(id)change error:(id *)error;
- (BOOL)updateScopeWithChange:(id)change error:(id *)error;
- (BOOL)hasScopesNeedingToUpdateTransport;
- (BOOL)setScopeNeedsToUpdateTransport:(id)transport error:(id *)error;
- (long long)transportUpdateTaskForScope:(id)scope;
- (BOOL)setScope:(id)scope hasCompletedTransportUpdate:(long long)update error:(id *)error;
- (BOOL)doesScopeNeedToUpdateTransport:(id)transport;
- (id)allScopeIdentifiersIncludeInactive:(BOOL)inactive;
- (void)_resetGlobalsForMainScope;
- (BOOL)_handledDisabledFeaturesForScopeIfNecessary:(id)necessary type:(long long)type error:(id *)error;
- (id)createScopeWithIdentifier:(id)identifier scopeType:(long long)type flags:(long long)flags transportScope:(id)scope error:(id *)error;
- (BOOL)_dropSharingScopeIdentifier:(id)identifier error:(id *)error;
- (BOOL)_setSharingScopeIdentifier:(id)identifier error:(id *)error;
- (BOOL)addCleanupTasksForScope:(id)scope error:(id *)error;
- (BOOL)deleteScopeWithIdentifier:(id)identifier error:(id *)error;
- (BOOL)_setScopeType:(long long)type forScope:(id)scope error:(id *)error;
- (id)scopedIdentifierForLocalScopedIdentifier:(id)identifier;
- (id)scopedIdentifierForCloudScopedIdentifier:(id)identifier;
- (long long)indexForLocalScopeIdentifier:(id)identifier;
- (long long)indexForCloudScopeIdentifier:(id)identifier;
- (id)scopeIdentifierForLocalScopeIndex:(long long)index;
- (id)scopeIdentifierForCloudScopeIndex:(long long)index;
- (BOOL)setLocalScopeIndexOnChange:(id)change;
- (BOOL)setCloudScopeIndexOnChange:(id)change;
- (id)validLocalScopeIndexes;
- (id)validCloudScopeIndexes;
- (long long)stableScopeIndexForScopeIdentifier:(id)identifier;
- (BOOL)_resetLocalSyncStateForScope:(id)scope error:(id *)error;
- (BOOL)resetLocalSyncStateForScope:(id)scope error:(id *)error;
- (BOOL)_resetCompleteSyncStateForScope:(id)scope error:(id *)error;
- (BOOL)resetCompleteSyncStateForScope:(id)scope error:(id *)error;
- (BOOL)resetCompleteSyncStateIncludingIDMappingForScope:(id)scope error:(id *)error;
- (BOOL)resetSyncAnchorForScope:(id)scope error:(id *)error;
- (BOOL)resetLocalRecordsForScopeWithIdentifier:(id)identifier error:(id *)error;
- (BOOL)resetCloudRecordsForScopeWithIdentifier:(id)identifier error:(id *)error;
- (BOOL)resetStableRecordsForScopeWithIdentifier:(id)identifier error:(id *)error;
- (id)status;
- (void)writeTransactionDidSucceed;
- (void)writeTransactionDidFail;
- (id)flagsForScope:(id)scope;
- (BOOL)updateFlags:(id)flags forScope:(id)scope error:(id *)error;
- (BOOL)setValue:(BOOL)value forFlag:(long long)flag forScope:(id)scope error:(id *)error;
- (BOOL)valueForFlag:(long long)flag forScope:(id)scope;
- (BOOL)clearAllQuotaFlagsForMainScopeWithReason:(id)reason error:(id *)error;
- (id)disabledDateForScope:(id)scope;
- (BOOL)setDisabledDate:(id)date forScope:(id)scope error:(id *)error;
- (id)deleteDateForScope:(id)scope;
- (BOOL)setDeleteDate:(id)date forScope:(id)scope error:(id *)error;
- (BOOL)resetSyncStateForScope:(id)scope error:(id *)error;
- (id)uploadTransportGroupForScope:(id)scope;
- (id)downloadTransportGroupForScope:(id)scope;
- (BOOL)setupInitialSyncTransportGroupsForScope:(id)scope error:(id *)error;
- (BOOL)updateInitialSyncTransportGroupEstimatedSize:(unsigned long long)size assetCount:(unsigned long long)count forScope:(id)scope error:(id *)error;
- (BOOL)setupResetSyncTransportGroupForScope:(id)scope error:(id *)error;
- (BOOL)setupAnchorResetTransportGroupForScope:(id)scope error:(id *)error;
- (BOOL)clearTransportGroupsForScope:(id)scope error:(id *)error;
- (id)scopeWithIdentifier:(id)identifier;
- (BOOL)setScopeNeedsUpdateFromTransport:(id)transport error:(id *)error;
- (id)transportScopeForScope:(id)scope;
- (BOOL)setTransportScope:(id)scope forScope:(id)scope error:(id *)error;
- (id)scopeChangeForScope:(id)scope;
- (BOOL)_doesScopeContributeToAssetCounts:(id)counts;
- (void)_updateAssetCountsWithScopeChange:(id)change forScope:(id)scope;
- (BOOL)storeScopeChange:(id)change forScope:(id)scope error:(id *)error;
- (BOOL)didDropSomeRecordsForScope:(id)scope;
- (BOOL)setDidDropSomeRecordsForScope:(id)scope error:(id *)error;
- (id)syncAnchorForScope:(id)scope;
- (BOOL)setSyncAnchor:(id)anchor forScope:(id)scope error:(id *)error;
- (BOOL)commitSyncAnchorForScope:(id)scope error:(id *)error;
- (BOOL)discardStagedSyncAnchorForScope:(id)scope error:(id *)error;
- (BOOL)discardStagedSyncAnchorWithScopeFilter:(id)filter error:(id *)error;
- (BOOL)hasStagedSyncAnchorForScope:(id)scope;
- (id)transientSyncAnchorForScope:(id)scope;
- (BOOL)storeTransientSyncAnchor:(id)anchor forScope:(id)scope error:(id *)error;
- (BOOL)disableInitialQueriesForScope:(id)scope error:(id *)error;
- (unsigned long long)_indexOfCurrentClassForInitialQueriesForScope:(id)scope;
- (Class)classOfRecordsForInitialQueryForScope:(id)scope;
- (BOOL)markInitialQueryIsDoneForRecordsOfClass:(Class)class forScope:(id)scope error:(id *)error;
- (BOOL)hasScopeFetchedInitialSyncAnchor:(id)anchor;
- (BOOL)setHasFetchedInitialSyncAnchor:(BOOL)anchor forScope:(id)scope error:(id *)error;
- (BOOL)setInitialSyncAnchor:(id)anchor forScope:(id)scope error:(id *)error;
- (id)initialSyncAnchorForScope:(id)scope;
- (BOOL)resetInitialSyncAnchorForScope:(id)scope error:(id *)error;
- (id)remainingClassesForInitialQueryForScope:(id)scope;
- (BOOL)hasFinishedInitialSyncForScope:(id)scope;
- (BOOL)hasFinishedAFullSyncForScope:(id)scope;
- (id)lastDateOfClearedPushRepositoryForScope:(id)scope;
- (BOOL)storeLastDateOfClearedPushRepository:(id)repository forScope:(id)scope error:(id *)error;
- (id)lastDateOfCompletedPullFromTransportForScope:(id)scope;
- (unsigned long long)supportedFeatureVersionInLastSyncForScope:(id)scope;
- (BOOL)storeSupportedFeatureVersionInLastSync:(unsigned long long)sync forScope:(id)scope error:(id *)error;
- (BOOL)supportedFeatureVersionIsMostRecentForScope:(id)scope;
- (BOOL)storeEstimatedSize:(unsigned long long)size estimatedAssetCount:(unsigned long long)count forScope:(id)scope error:(id *)error;
- (unsigned long long)estimatedSizeForScope:(id)scope;
- (unsigned long long)estimatedAssetCountForScope:(id)scope;
- (BOOL)upgradeScopesWithNewLibraryOptions:(unsigned long long)options error:(id *)error;
- (id)statusDictionaryForScope:(id)scope;
- (id)primaryScope;
- (BOOL)_activateSharedScopeIfPresentWithError:(id *)error;
- (BOOL)enablePrimaryScopeWithError:(id *)error;
- (BOOL)disablePrimaryScopeWithError:(id *)error;
- (BOOL)_forceClientToPullScopeIfNecessary:(id)necessary error:(id *)error;
- (BOOL)activateScope:(id)scope error:(id *)error;
- (BOOL)deactivateScope:(id)scope error:(id *)error;
- (BOOL)shouldAutoactivateScopeWithIdentifier:(id)identifier scopeType:(long long)type;
- (id)scopeListSyncAnchor;
- (BOOL)storeScopeListSyncAnchor:(id)anchor error:(id *)error;
- (id)_realScopeIdentifiersFromScopeIdentifiers:(id)identifiers;
- (id)filterForIncludedScopeIdentifiers:(id)identifiers;
- (id)filterForExcludedScopeIdentifiers:(id)identifiers;
- (BOOL)doesScopeAllowCourtesyMingling:(id)mingling;
- (id)sharingScopeForScope:(id)scope;
- (id)scopeForSharingScope:(id)scope;
- (id)stagingScopeForScope:(id)scope;
- (id)rewindSyncAnchorsForScope:(id)scope;
- (BOOL)storeRewindSyncAnchors:(id)anchors forScope:(id)scope error:(id *)error;
- (BOOL)addRewindSyncAnchor:(id)anchor forScope:(id)scope error:(id *)error;
- (BOOL)storeBusyState:(long long)state forScope:(id)scope error:(id *)error;
- (long long)busyStateForScope:(id)scope;
- (BOOL)storeSupervisorInfo:(id)info forScope:(id)scope error:(id *)error;
- (id)supervisorInfoForScope:(id)scope;
- (id)mostCurrentChangesSyncAnchorForScope:(id)scope;
- (void)beginCreatingScopeWithIdentifier:(id)identifier;
- (void)endCreatingScopeWithIdentifier:(id)identifier;
- (BOOL)shouldCheckAssetsWithServerWhenOverQuotaForScope:(id)scope;
- (BOOL)noteDidCheckAssetWithServerWhenOverQuotaForScope:(id)scope error:(id *)error;
- (BOOL)resetDidCheckAssetWithServerWhenOverQuotaForScope:(id)scope error:(id *)error;
@end

#endif /* CPLEngineScopeStorage_h */
