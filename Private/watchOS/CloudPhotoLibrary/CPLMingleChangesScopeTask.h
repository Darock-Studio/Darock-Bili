//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLMingleChangesScopeTask_h
#define CPLMingleChangesScopeTask_h
@import Foundation;

#include "CPLEngineScopedTask.h"
#include "CPLBatchExtractionStrategy.h"
#include "CPLEngineScope.h"
#include "CPLEngineTransientRepositoryBatchStorage.h"
#include "CPLTransportScopeMapping.h"

@protocol CPLEngineTransportFixUpSparseRecordTask, OS_dispatch_queue;

@interface CPLMingleChangesScopeTask : CPLEngineScopedTask {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_lock;
  CPLEngineTransientRepositoryBatchStorage *_batchStorage;
  CPLBatchExtractionStrategy *_extractionStrategy;
  CPLEngineScope *_sharedScope;
  CPLTransportScopeMapping *_transportScopeMapping;
  NSObject<CPLEngineTransportFixUpSparseRecordTask> *_fixUpTask;
  BOOL _shouldStashRecordsIfNecessary;
  NSObject<OS_dispatch_queue> *_notifyQueue;
  BOOL _didNotifySchedulerPullQueueIsFullOnce;
  BOOL _needsToNotifySchedulerPullQueueIsFull;
  unsigned long long _minglingCount;
}

/* instance methods */
- (id)initWithEngineLibrary:(id)library session:(id)session clientCacheIdentifier:(id)identifier scope:(id)scope transportScope:(id)scope;
- (BOOL)checkScopeIsValidInTransaction:(id)transaction;
- (void)_reallyNotifySchedulerPullQueueIsFull;
- (void)_notifySchedulerPullQueueIsFullInTransaction:(id)transaction;
- (void)_notifySchedulerPullQueueIsFullNowIfNecessary;
- (void)taskDidFinishWithError:(id)error;
- (void)_noteBatchWasAddedInPullQueue:(id)queue fromBatch:(id)batch transaction:(id)transaction;
- (void)_finishMingling;
- (id)_filteredBatchByStashingRecordsIfNecessary:(id)necessary error:(id *)error;
- (void)_mingleOtherChanges;
- (void)_acknownledgeFixUpTasks:(id)tasks;
- (void)_fixUpPrivateRecordsPointingToRemappedSharedRecords:(id)records;
- (void)_mingleSharedRemappings;
- (void)_mingleRemappings;
- (void)_unstashRecordsForScope:(id)scope;
- (void)launch;
- (void)cancel;
- (id)taskIdentifier;
@end

#endif /* CPLMingleChangesScopeTask_h */
