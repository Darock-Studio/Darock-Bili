//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLEngineSyncManager_h
#define CPLEngineSyncManager_h
@import Foundation;

#include "CPLAbstractObject-Protocol.h"
#include "CPLDerivativesFilter.h"
#include "CPLEngineComponent-Protocol.h"
#include "CPLEngineForceSyncTask.h"
#include "CPLEngineForceSyncTaskDelegate-Protocol.h"
#include "CPLEngineLibrary.h"
#include "CPLEngineSyncTaskDelegate-Protocol.h"
#include "CPLPlatformObject.h"
#include "CPLSyncSession.h"
#include "CPLSyncStep.h"

@class NSArray, NSCountedSet, NSError, NSMutableArray, NSString;
@protocol CPLEngineStoreUserIdentifier, CPLEngineTransportSetupTask, OS_dispatch_queue;

@interface CPLEngineSyncManager : NSObject<CPLAbstractObject, CPLEngineComponent, CPLEngineSyncTaskDelegate, CPLEngineForceSyncTaskDelegate> {
  /* instance variables */
  NSObject<CPLEngineStoreUserIdentifier> *_transportUserIdentifier;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _transportUserIdentifierLock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _brokenScopesLock;
  CPLDerivativesFilter *_derivativesFilter;
  BOOL _setupIsDone;
  BOOL _shouldUpdateDisabledFeatures;
  BOOL _closed;
  NSObject<CPLEngineTransportSetupTask> *_setupTask;
  id /* block */ _closingCompletionHandler;
  CPLSyncSession *_session;
  NSObject<OS_dispatch_queue> *_lock;
  CPLSyncStep *_currentStep;
  NSObject<CPLEngineTransportSetupTask> *_forcedSetupTask;
  CPLEngineForceSyncTask *_currentForceSyncTask;
  CPLEngineForceSyncTask *_pendingForceSyncTask;
  unsigned long long _shouldRestartSessionFromState;
  NSMutableArray *_lastErrors;
  BOOL _foreground;
  BOOL _boostPriority;
  BOOL _hasOverridenBudgets;
  BOOL _disabledSchedulerForForceSyncTask;
  NSMutableArray *_forcedSyncHistory;
  NSMutableArray *_cancellerBlocks;
  NSCountedSet *_blockedReasons;
}

@property (nonatomic) unsigned long long state;
@property (nonatomic) BOOL shouldTryToMingleImmediately;
@property (readonly, weak, nonatomic) CPLEngineLibrary *engineLibrary;
@property (readonly, nonatomic) NSError *lastError;
@property (readonly) BOOL hasBrokenScopes;
@property (readonly) NSArray *brokenScopes;
@property (readonly, nonatomic) CPLPlatformObject *platformObject;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)descriptionForState:(unsigned long long)state;
+ (id)shortDescriptionForState:(unsigned long long)state;
+ (unsigned int)qualityOfServiceForSyncSessions;
+ (unsigned int)qualityOfServiceForForcedTasks;
+ (id)stepForState:(unsigned long long)state syncManager:(id)manager session:(id)session;
+ (id)platformImplementationProtocol;

/* instance methods */
- (void)dispatchSyncBlock:(id /* block */)block;
- (void)dispatchForcedTaskBlock:(id /* block */)block;
- (void)_dispatchAfter:(double)after block:(id /* block */)block;
- (id)initWithEngineLibrary:(id)library;
- (void)_recordForcedSyncTask:(id)task discarded:(BOOL)discarded error:(id)error;
- (void)setErrorForSyncSessionUnlocked:(id)unlocked;
- (void)_resetErrorForSyncSession;
- (void)_cancelAllTasksLocked;
- (void)_cancelAllTasksLockedDeferringPushTaskCancellationIfCurrentlyUploadingForeground:(BOOL)foreground;
- (void)_moveAllTasksToBackgroundLocked;
- (id)_descriptionForCurrentState;
- (id)_shortDescriptionForCurrentState;
- (id)_descriptionForLaunchedTasks;
- (BOOL)_launchNecessaryTasksForCurrentStateLocked;
- (void)_notifyEndOfSyncSession;
- (void)_advanceToNextStateLocked;
- (void)_setState:(unsigned long long)state;
- (void)_advanceToNextStateLockedMinimalState:(unsigned long long)state;
- (void)_restartSyncSessionFromStateLocked:(unsigned long long)locked session:(id)session cancelIfNecessary:(BOOL)necessary;
- (void)startSyncSession:(id)session withMinimalPhase:(unsigned long long)phase rewind:(BOOL)rewind;
- (void)_cancelCurrentSyncSession;
- (void)cancelCurrentSyncSession;
- (void)_dispatchCancellerBlocksIfNecessary;
- (void)cancelAndBlockAllSyncSessionsWithReason:(id)reason block:(id /* block */)block;
- (void)unblockSyncSessionWithReason:(id)reason;
- (void)_setTransportUserIdentifier:(id)identifier;
- (id)_transportUserIdentifier;
- (void)resetTransportUserIdentifier;
- (void)discardTransportUserIdentifier;
- (void)requestDisabledFeaturesUpdate;
- (void)setSyncSessionShouldBeForeground:(BOOL)foreground;
- (void)_overrideBudgetsIfNeeded;
- (void)setBoostPriority:(BOOL)priority;
- (BOOL)prepareAndLaunchSyncTaskUnlocked:(id)unlocked;
- (void)configureDirectTransportTask:(id)task;
- (void)addBrokenScope:(id)scope;
- (void)removeBrokenScope:(id)scope;
- (void)_disableSchedulerForForceSyncTaskIfNecessary;
- (void)_reenableSchedulerForForceSyncTaskIfNecessary;
- (BOOL)_checkForegroundAtLaunchForForceSyncTask;
- (void)_discardPendingForceSyncTaskWithError:(id)error;
- (void)_forceSyncTaskDidFinishWithError:(id)error;
- (void)forceSyncTaskHasBeenLaunched:(id)launched;
- (void)forceSyncTaskHasBeenCancelled:(id)cancelled;
- (void)_launchForceSetupTask;
- (void)_launchForceSyncTaskIfNecessary;
- (id)_descriptionForSetupTasks;
- (id)_setupTaskWithCompletionHandler:(id /* block */)handler;
- (BOOL)_launchSetupTask;
- (void)_cancelAllTasksForSetup;
- (BOOL)_didFinishSetupTaskWithError:(id)error shouldStop:(BOOL *)stop;
- (void)task:(id)task didFinishWithError:(id)error;
- (void)task:(id)task didProgress:(float)progress userInfo:(id)info;
- (void)openWithCompletionHandler:(id /* block */)handler;
- (void)closeAndDeactivate:(BOOL)deactivate completionHandler:(id /* block */)handler;
- (void)beginClientWork:(id)work;
- (void)endClientWork:(id)work;
- (id)lastErrorUnlocked;
- (id)componentName;
- (void)getStatusWithCompletionHandler:(id /* block */)handler;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)handler;
- (void)_addRuleToUserDefaults:(id)defaults;
- (id)_dropDerivativeRulesFromUserDefaults;
- (void)addDropDerivativesRecipe:(id)recipe writeToUserDefaults:(BOOL)defaults withCompletionHandler:(id /* block */)handler;
@end

#endif /* CPLEngineSyncManager_h */
