//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLResource_h
#define CPLResource_h
@import Foundation;

#include "CPLResourceIdentity.h"
#include "CPLScopedIdentifier.h"
#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class NSString;

@interface CPLResource : NSObject<NSSecureCoding, NSCopying> {
  /* instance variables */
  unsigned long long _backgroundDownloadTaskIdentifier;
}

@property (retain, nonatomic) CPLResourceIdentity *identity;
@property (copy, nonatomic) CPLScopedIdentifier *itemScopedIdentifier;
@property (nonatomic) unsigned long long resourceType;
@property (nonatomic) unsigned long long sourceResourceType;
@property (nonatomic) BOOL canGenerateDerivative;
@property (copy, nonatomic) NSString *itemIdentifier;

/* class methods */
+ (BOOL)cplShouldIgnorePropertyForCoding:(id)coding;
+ (BOOL)supportsSecureCoding;
+ (BOOL)cplShouldIgnorePropertyForEquality:(id)equality;
+ (id)normalizedResourcesFromResources:(id)resources resourcePerResourceType:(id *)type;
+ (unsigned long long)resourceTypeFromShortDescription:(id)description;
+ (id)descriptionForResourceType:(unsigned long long)type;
+ (id)shortDescriptionForResourceType:(unsigned long long)type;
+ (BOOL)shouldIgnoreResourceTypeOnUpload:(unsigned long long)upload;
+ (BOOL)hasPriorityBoostForResourceType:(unsigned long long)type;
+ (unsigned long long)maxPixelSizeForResourceType:(unsigned long long)type;
+ (float)derivativeGenerationThreshold;
+ (BOOL)cplShouldGenerateDerivatives;
+ (BOOL)resourceTypeTrackedForUpload:(unsigned long long)upload;
+ (BOOL)resourceTypeSupportsResourceExpunge:(unsigned long long)expunge;
+ (void)enumerateResourceTypesWithBlock:(id /* block */)block;
+ (BOOL)isDerivativeResourceType:(unsigned long long)type;
+ (BOOL)isNonDerivativeResourceType:(unsigned long long)type;
+ (BOOL)isAdjustedResourceType:(unsigned long long)type;
+ (void)getAllResourceTypesToDownload:(const unsigned long long * *)download;
+ (void)getAllResourceTypesToDownloadPrioritizeNonDerivatives:(const unsigned long long * *)derivatives;
+ (unsigned long long)countOfResourceTypes;
+ (BOOL)isDynamicFingerprint:(id)fingerprint;
+ (id)predicateMatchingDynamicFingerprintForKey:(id)key;

/* instance methods */
- (id)initWithCPLArchiver:(id)cplarchiver;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)initWithResourceIdentity:(id)identity itemScopedIdentifier:(id)identifier resourceType:(unsigned long long)type;
- (id)initWithResourceIdentity:(id)identity itemIdentifier:(id)identifier;
- (id)initWithResourceIdentity:(id)identity itemIdentifier:(id)identifier resourceType:(unsigned long long)type;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (id)description;
- (id)redactedDescription;
- (id)bestFileNameForResource;
- (BOOL)isTrackedForUpload;
- (unsigned long long)estimatedResourceSize;
- (unsigned long long)_backgroundDownloadTaskIdentifier;
- (void)_setBackgroundDownloadTaskIdentifier:(unsigned long long)identifier;
@end

#endif /* CPLResource_h */
