//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLPullFromTransportScopeTask_h
#define CPLPullFromTransportScopeTask_h
@import Foundation;

#include "CPLEngineScopedTask.h"
#include "CPLEngineCloudCache.h"
#include "CPLEngineScope.h"
#include "CPLEngineTransientRepository.h"
#include "CPLEngineTransport.h"
#include "CPLFeatureVersionHistory.h"
#include "CPLScopeChange.h"
#include "CPLTransportScopeMapping.h"

@class NSArray, NSData, NSError, NSMutableArray, NSMutableDictionary, NSMutableSet;
@protocol CPLEngineTransportDownloadBatchTask, CPLEngineTransportFetchRecordsTask, CPLEngineTransportGetCurrentSyncAnchorTask, CPLEngineTransportGroup, CPLEngineTransportQueryTask, OS_dispatch_queue;

@interface CPLPullFromTransportScopeTask : CPLEngineScopedTask {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  NSError *_endTaskError;
  CPLTransportScopeMapping *_transportScopeMapping;
  CPLEngineScope *_sharedScope;
  CPLEngineScope *_primaryScope;
  NSMutableArray *_partnerScopes;
  NSMutableDictionary *_syncAnchorsOfPartnerScopesThatMightNeedToPullChanges;
  NSMutableArray *_allPartnerScopeIdentifiersNeedingToPullChanges;
  NSArray *_finalListOfPartnerScopesNeedingToPullChanges;
  CPLEngineCloudCache *_cloudCache;
  CPLEngineTransientRepository *_transientPullRepository;
  CPLEngineTransport *_transport;
  NSObject<CPLEngineTransportDownloadBatchTask> *_downloadTask;
  NSObject<CPLEngineTransportQueryTask> *_queryTask;
  CPLScopeChange *_currentScopeChange;
  Class _currentQueryClass;
  BOOL _ignoreNewBatches;
  BOOL _useCourtesyMingling;
  unsigned long long _rewindFeatureVersion;
  NSData *_rewindSyncAnchor;
  CPLFeatureVersionHistory *_versionHistory;
  NSObject<CPLEngineTransportGroup> *_transportGroup;
  NSMutableSet *_otherRewindSyncAnchors;
  unsigned long long _totalAssetCountForScope;
  BOOL _hasCachedTotalAssetCountForScope;
  long long _taskItem;
  BOOL _hasFetchedInitialSyncAnchor;
  BOOL _shouldStoreInitialSyncAnchor;
  NSData *_initialSyncAnchor;
  CPLScopeChange *_initialScopeChange;
  NSObject<CPLEngineTransportGetCurrentSyncAnchorTask> *_fetchInitialSyncAnchorTask;
  NSObject<OS_dispatch_queue> *_notifyQueue;
  BOOL _didNotifySchedulerPullQueueIsFullOnce;
  BOOL _needsToNotifySchedulerPullQueueIsFull;
  NSData *_updateTransportScope;
  CPLEngineScope *_stagingScope;
  NSData *_stagingTransportScope;
  BOOL _hasExtraRecordsToCheck;
  NSObject<CPLEngineTransportFetchRecordsTask> *_checkRecordsTask;
  unsigned long long _countOfPulledAssets;
  id /* block */ _allowsMinglingChangeWithScopedIdentifier;
}

/* instance methods */
- (id)initWithEngineLibrary:(id)library session:(id)session clientCacheIdentifier:(id)identifier scope:(id)scope transportScope:(id)scope;
- (id)transportScope;
- (void)_reallyNotifySchedulerPullQueueIsFull;
- (void)_notifySchedulerPullQueueIsFull;
- (void)_notifySchedulerPullQueueIsFullNowIfNecessary;
- (void)_cancelAllTasks;
- (id)_transientPullRepositoryInStore:(id)store;
- (id)_cloudCacheInStore:(id)store;
- (void)_extractAndMinglePersonsIfPossibleFromBatch:(id)batch inTransaction:(id)transaction;
- (void)_extractAndMingleAssetsIfPossibleFromBatch:(id)batch inTransaction:(id)transaction;
- (unsigned long long)_totalAssetCountForScope;
- (void)_handleNewBatchFromChanges:(id)changes newSyncAnchor:(id)anchor inTransaction:(id)transaction;
- (id)scopesForTask;
- (BOOL)checkScopeIsValidInTransaction:(id)transaction;
- (BOOL)_storeRewindSyncAnchors:(id)anchors inScopes:(id)scopes error:(id *)error;
- (BOOL)_fetchRewindSyncAnchorsInScopes:(id)scopes startSyncAnchor:(id)anchor error:(id *)error;
- (BOOL)_dequeueFromPendingRecordChecksIfNecessary:(id)necessary error:(id *)error;
- (void)_checkExtraRecordsWithScopedIdentifiers:(id)identifiers;
- (void)_checkExtraRecords;
- (void)_notePartnerScopesNeedingToPullChanges:(id)changes scopes:(id)scopes inTransaction:(id)transaction;
- (void)_handleNewBatchFromChanges:(id)changes updatedFlags:(id)flags newSyncAnchor:(id)anchor partnerScopesNeedingToPullChanges:(id)changes;
- (void)_updateLastFeatureVersionAndRelaunchFetchChangesFromSyncAnchor:(id)anchor;
- (void)_relaunchFetchChangesFromOtherRewindSyncAnchors;
- (void)_launchFetchChangesFromSyncAnchor:(id)anchor;
- (void)_handleNewBatchFromQuery:(id)query newCursor:(id)cursor inTransaction:(id)transaction;
- (void)_storeInitialSyncAnchorIfNecessaryInTransaction:(id)transaction;
- (void)_handleNewBatchFromQuery:(id)query queryClass:(Class)class newCursor:(id)cursor;
- (void)_launchQueryForClass:(Class)class cursor:(id)cursor;
- (void)_launchNextQueryTask;
- (void)_launchPullTasksAndDisableQueries:(BOOL)queries;
- (void)_fetchInitialSyncAnchor;
- (void)_addPartnerScope:(id)scope scopes:(id)scopes;
- (void)_checkServerFeatureVersionWithCompletionHandler:(id /* block */)handler;
- (void)_launch;
- (void)launch;
- (void)taskDidFinishWithError:(id)error;
- (void)cancel;
- (id)taskIdentifier;
@end

#endif /* CPLPullFromTransportScopeTask_h */
