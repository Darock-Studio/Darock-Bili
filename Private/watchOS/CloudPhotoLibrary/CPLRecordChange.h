//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLRecordChange_h
#define CPLRecordChange_h
@import Foundation;

#include "CPLRecordChange.h"
#include "CPLRecordChangeDiffTracker.h"
#include "CPLRecordPushContext.h"
#include "CPLScopedIdentifier.h"
#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class NSArray, NSData, NSDate, NSString;

@interface CPLRecordChange : NSObject<NSSecureCoding, NSCopying> {
  /* instance variables */
  CPLRecordChangeDiffTracker *_attachedDiffTracker;
  CPLRecordChange *_recordKnownByCloudCache;
  CPLRecordPushContext *_pushContext;
  BOOL _shouldNotTrustCloudCache;
  BOOL _shouldFilterDefaultValuesForNewProperties;
  BOOL _isSparseFullChange;
  BOOL _shouldOnlyUploadNewResources;
  BOOL _relatedRecordShouldBeShared;
  CPLRecordChange *_ignoredRecord;
  BOOL _didCacheRealResourceSizeInStorage;
  unsigned long long _cachedRealResourceSizeInStorage;
}

@property (copy, nonatomic) NSString *realIdentifier;
@property (copy, nonatomic) NSData *recordChangeData;
@property (copy, nonatomic) NSData *sharingRecordChangeData;
@property (nonatomic) BOOL serverRecordIsCorrupted;
@property (copy, nonatomic) NSString *sharingRecordIdentifier;
@property (copy, nonatomic) CPLScopedIdentifier *scopedIdentifier;
@property (copy, nonatomic) NSDate *recordModificationDate;
@property (nonatomic) unsigned long long changeType;
@property (copy, nonatomic) NSDate *dateDeleted;
@property (copy, nonatomic) CPLScopedIdentifier *resourceCopyFromScopedIdentifier;
@property (nonatomic) BOOL inTrash;
@property (nonatomic) BOOL inExpunged;
@property (copy, nonatomic) NSString *sharingScopeIdentifier;
@property (copy, nonatomic) NSArray *sharingContributorUserIdentifiers;
@property (copy, nonatomic) NSArray *updateSharingContributorUserIdentifiers;
@property (copy, nonatomic) NSString *identifier;

/* class methods */
+ (Class)relatedRecordClass;
+ (BOOL)cplShouldIgnorePropertyForCoding:(id)coding;
+ (BOOL)cplShouldIgnorePropertyForEquality:(id)equality;
+ (Class)classForStoredClassName:(id)name forCPLArchiver:(id)cplarchiver;
+ (id)cplAdditionalSecureClassesForProperty:(id)property;
+ (BOOL)supportsSecureCoding;
+ (id)descriptionForDirection:(unsigned long long)direction;
+ (BOOL)supportsResources;
+ (BOOL)supportsDeletion;
+ (BOOL)supportsDirectDeletion;
+ (BOOL)supportsSharing;
+ (BOOL)supportsSharingScopedIdentifier;
+ (BOOL)isContributorsUpdateSupported;
+ (id)newRecord;
+ (id)newRecordInScopeWithIdentifier:(id)identifier;
+ (id)newRecordWithScopedIdentifier:(id)identifier;
+ (id)newChangeWithScopedIdentifier:(id)identifier changeType:(unsigned long long)type;
+ (id)newDeleteChangeWithScopedIdentifier:(id)identifier;
+ (id)newChangeWithType:(unsigned long long)type;
+ (long long)maxInlineDataSize;
+ (id)descriptionForChangeType:(unsigned long long)type;
+ (id)_descriptionForChangeType:(unsigned long long)type isSparseFullChange:(BOOL)change onlyUploadNewResources:(BOOL)resources;
+ (id /* block */)equalityBlockForDirection:(unsigned long long)direction;
+ (id /* block */)copyPropertyBlockForDirection:(unsigned long long)direction;
+ (BOOL)shouldReallyQuarantineRecord;
+ (id)newChangeWithIdentifier:(id)identifier changeType:(unsigned long long)type;
+ (id)newRecordWithIdentifier:(id)identifier;
+ (id)newDeleteChangeWithIdentifier:(id)identifier;

/* instance methods */
- (Class)relatedRecordClass;
- (BOOL)validateRecordForTracker:(id)tracker;
- (id)asRecordView;
- (id)compactedChangeWithRelatedChanges:(id)changes isOnlyChange:(BOOL)change fullRecord:(id)record usingStorageView:(id)view;
- (id)scopedIdentifiersForMapping;
- (id)translateToCloudChangeUsingIDMapping:(id)idmapping error:(id *)error;
- (id)translateToClientChangeUsingIDMapping:(id)idmapping error:(id *)error;
- (id)proposedCloudScopedIdentifierWithError:(id *)error;
- (id)initWithCPLArchiver:(id)cplarchiver;
- (id)storedClassNameForCPLArchiver:(id)cplarchiver;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (id)copyWithZone:(struct _NSZone *)zone;
- (Class)recordClass;
- (id)_unscopedIdentifier;
- (void)setScopeIndex:(long long)index;
- (id)realScopedIdentifier;
- (BOOL)isInScopeWithIdentifier:(id)identifier;
- (BOOL)hasChangeType:(unsigned long long)type;
- (BOOL)isFullRecord;
- (BOOL)isDelete;
- (BOOL)supportsResources;
- (BOOL)supportsResourceType:(unsigned long long)type;
- (BOOL)supportsDeletion;
- (BOOL)supportsDirectDeletion;
- (BOOL)supportsSharing;
- (BOOL)supportsSharingScopedIdentifier;
- (id)sharingRecordScopedIdentifier;
- (void)setSharingRecordScopedIdentifier:(id)identifier;
- (BOOL)isSharedInScopeWithIdentifier:(id)identifier;
- (void)_noteRelatedRecordShouldBeShared;
- (BOOL)_relatedRecordShouldBeShared;
- (id)_ignoredRecord;
- (void)_setIgnoredRecord:(id)record;
- (void)updateScopeIdentifier:(id)identifier;
- (id)resources;
- (void)setResources:(id)resources;
- (id)resourceForType:(unsigned long long)type;
- (unsigned long long)totalResourceSize;
- (unsigned long long)effectiveResourceSizeToUploadUsingStorage:(id)storage;
- (unsigned long long)realResourceSize;
- (unsigned long long)realUploadResourceSize;
- (unsigned long long)originalResourceSize;
- (id)propertiesDescription;
- (id)description;
- (id)redactedDescription;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (BOOL)applyChange:(id)change copyPropertiesToFinalChange:(id)change forChangeType:(unsigned long long)type direction:(unsigned long long)direction diffTracker:(id)tracker;
- (id)realRecordChangeFromRecordChange:(id)change direction:(unsigned long long)direction newRecord:(id *)record changeType:(unsigned long long)type diffTracker:(id)tracker;
- (id)realRecordChangeFromRecordChange:(id)change direction:(unsigned long long)direction newRecord:(id *)record diffTracker:(id)tracker;
- (id)realRecordChangeFromRecordChange:(id)change direction:(unsigned long long)direction newRecord:(id *)record;
- (void)attachDiffTracker:(id)tracker;
- (id)attachedDiffTracker;
- (BOOL)resourceChangeWillOnlyChangeDerivatives:(id)derivatives;
- (id)mergeRecordChangeWithNewRecordChange:(id)change direction:(unsigned long long)direction;
- (id)propertiesForChangeType:(unsigned long long)type;
- (id)relatedIdentifier;
- (void)setRelatedIdentifier:(id)identifier;
- (id)relatedScopedIdentifier;
- (id)secondaryIdentifier;
- (void)setSecondaryIdentifier:(id)identifier;
- (id)secondaryScopedIdentifier;
- (id)proposedLocalScopedIdentifier;
- (id)allRelatedScopedIdentifiers;
- (void)clearIdentifiers;
- (void)prepareForStorage;
- (void)awakeFromStorage;
- (void)restoreRelationShipsFromFullRecord:(id)record;
- (long long)dequeueOrder;
- (id)cplFullDescription;
- (id)resourcesDescription;
- (id)fingerprintScheme;
- (BOOL)shouldApplyPropertiesWithSelector:(SEL)selector;
- (void)setShouldFilterDefaultValuesForNewProperties:(BOOL)properties;
- (BOOL)shouldFilterDefaultValuesForNewProperties;
- (id /* block */)checkDefaultValueBlockForPropertyWithSelector:(SEL)selector;
- (BOOL)isSparseFullChange;
- (void)markAsSparseFullChange;
- (void)markToOnlyUploadNewResources;
- (BOOL)shouldOnlyUploadNewResources;
- (BOOL)allowsToOnlyUploadNewResources;
- (BOOL)changeIsOnlyAddingResourcesToRecord:(id)record addedResources:(id *)resources;
- (id)onlyAddedResources;
- (BOOL)validateFullRecord;
- (BOOL)validateChangeWithError:(id *)error;
- (unsigned long long)estimatedRecordSize;
- (id)_pushContext;
- (void)_setPushContext:(id)context;
- (BOOL)_shouldNotTrustCloudCache;
- (void)_setShouldNotTrustCloudCache:(BOOL)cache;
- (BOOL)canLowerQuota;
- (unsigned long long)fullChangeTypeForFullRecord;
- (unsigned long long)supportedChangeTypes;
- (BOOL)isResourceTypeAGeneratedDerivative:(unsigned long long)derivative;
- (BOOL)allResourcesAreAvailable;
- (id)resourcePerType;
- (unsigned long long)baseDerivativeResourceType;
- (unsigned long long)baseVideoComplemenentResourceType;
- (void)copyDerivatives:(unsigned long long *)derivatives count:(int)count avoidResourceType:(unsigned long long)type fromRecord:(id)record inResourcePerType:(id)type;
- (void)copyDerivativesFromRecordIfPossible:(id)possible;
- (void)enumerateChangeTypesForChangeType:(unsigned long long)type block:(id /* block */)block;
- (id)copyChangeType:(unsigned long long)type;
- (void)clearChangeType:(unsigned long long)type;
- (void)applyChange:(id)change;
- (void)applyChangeType:(unsigned long long)type fromChange:(id)change;
- (BOOL)isMasterChange;
- (BOOL)isAssetChange;
- (BOOL)isScopeChange;
- (id)_recordKnownByCloudCache;
- (void)_setRecordKnownByCloudCache:(id)cache;
@end

#endif /* CPLRecordChange_h */
