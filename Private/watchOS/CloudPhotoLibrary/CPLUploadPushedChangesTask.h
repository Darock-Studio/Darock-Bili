//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLUploadPushedChangesTask_h
#define CPLUploadPushedChangesTask_h
@import Foundation;

#include "CPLEngineScopedTask.h"
#include "CPLBatchExtractionStrategy.h"
#include "CPLBatchExtractionStrategyStorage-Protocol.h"
#include "CPLBeforeUploadCheckItems.h"
#include "CPLBeforeUploadCheckItemsProvider-Protocol.h"
#include "CPLChangeBatch.h"
#include "CPLDerivativesFilter.h"
#include "CPLEnginePushRepository.h"
#include "CPLEngineScheduler.h"
#include "CPLEngineScope.h"
#include "CPLEngineScopeStorage.h"
#include "CPLEngineStoreTransaction.h"
#include "CPLEngineTransport.h"
#include "CPLRecordTargetMapping.h"
#include "CPLTransportScopeMapping.h"
#include "CPLUploadPushedChangesTaskDelegate-Protocol.h"

@class BOOL *, NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSString;
@protocol CPLEngineTransportFetchRecordsTask, CPLEngineTransportGroup, CPLEngineTransportUploadBatchTask, OS_dispatch_queue;

@interface CPLUploadPushedChangesTask : CPLEngineScopedTask<CPLBeforeUploadCheckItemsProvider> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_lock;
  NSString *_scopeIdentifier;
  CPLEngineScopeStorage *_scopes;
  CPLEngineTransport *_transport;
  CPLEngineScheduler *_scheduler;
  NSObject<CPLBatchExtractionStrategyStorage> *_batchStorage;
  CPLBatchExtractionStrategy *_currentStrategy;
  CPLChangeBatch *_diffedBatch;
  CPLChangeBatch *_batchToCommit;
  BOOL _mustConsiderOtherPriorities;
  CPLDerivativesFilter *_derivativesFilter;
  NSArray *_uploadResourceTasks;
  NSMutableDictionary *_cloudScopedIdentifiersToUploadResourceTaskErrors;
  CPLBeforeUploadCheckItems *_checkItems;
  CPLEngineStoreTransaction *_transactionDuringItemsPreparation;
  NSMutableArray *_preparedUploadResourceTasks;
  CPLRecordTargetMapping *_targetMapping;
  NSMutableDictionary *_invalidTransportScopes;
  NSObject<CPLEngineTransportFetchRecordsTask> *_fetchRecordsTask;
  NSObject<CPLEngineTransportUploadBatchTask> *_uploadTask;
  unsigned long long _lastReportedProgress;
  unsigned long long _countOfPushedChanges;
  double _startOfIteration;
  double _startOfDerivativesGeneration;
  BOOL _deferredCancel;
  BOOL _hasCachedShouldCheckResourcesAhead;
  BOOL _shouldCheckResourcesAhead;
  BOOL _shouldSetupEstimatedSize;
  NSObject<CPLEngineTransportGroup> *_transportGroup;
  long long _taskItem;
  BOOL _hasPushedSomeChanges;
  BOOL _isUsingOverQuotaStrategy;
  BOOL _resetStrategy;
  double _latestApproximativeUploadRate;
  NSString *_currentTaskKey;
  NSDate *_taskStartDate;
  unsigned long long _recordCount;
  BOOL _didExtractOneBatch;
  BOOL _wasBusy;
  BOOL _hasUploadedOneBatch;
  BOOL _shouldCheckAssetsWithServerWhenOverQuota;
}

@property (retain, @dynamic) NSObject<CPLUploadPushedChangesTaskDelegate> *delegate;
@property (readonly, nonatomic) NSObject<CPLEngineTransportGroup> *storedTransportGroup;
@property (readonly, nonatomic) CPLEngineScope *sharedScope;
@property (readonly, nonatomic) CPLTransportScopeMapping *transportScopeMapping;
@property (readonly, nonatomic) long long ruleGroup;
@property (readonly, nonatomic) BOOL highPriority;
@property (readonly, nonatomic) unsigned long long maxBatchSize;
@property (readonly, nonatomic) unsigned long long pushRepositoryPriority;
@property (readonly, nonatomic) CPLEnginePushRepository *pushRepository;
@property (readonly, nonatomic) BOOL didUseOverQuotaStrategy;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)disableOverQuotaRule;
+ (void)setDisableOverQuotaRule:(BOOL)rule;
+ (void)resetDisabledOverQuotaRule;

/* instance methods */
- (id)initWithEngineLibrary:(id)library session:(id)session clientCacheIdentifier:(id)identifier scope:(id)scope transportScope:(id)scope storedTransportGroup:(id)group sharedScope:(id)scope transportScopeMapping:(id)mapping ruleGroup:(long long)group highPriority:(BOOL)priority maxBatchSize:(unsigned long long)size pushRepositoryPriority:(unsigned long long)priority pushRepository:(id)repository;
- (BOOL)checkScopeIsValidInTransaction:(id)transaction;
- (void)_didStartTaskWithKey:(id)key recordCount:(unsigned long long)count;
- (void)_didFinishTaskWithKey:(id)key error:(BOOL)error cancelled:(BOOL)cancelled;
- (void)_prepareTransportGroupForOneBatch;
- (void)_popNextBatchAndContinue;
- (void)_updateQuotaStrategyAfterSuccessInTransaction:(id)transaction;
- (BOOL)_markUploadedTasksDidFinishWithError:(id)error transaction:(id)transaction error:(id *)error;
- (BOOL)_discardUploadedExtractedBatch:(id)batch error:(id *)error;
- (BOOL)_reenqueueExtractedBatchWithRejectedRecords:(id)records extractedBatch:(id)batch error:(id *)error;
- (void)_clearUploadBatch;
- (void)_checkPrioritiesWithFetchCache:(id)cache;
- (void)_checkForRecordExistence;
- (BOOL)_shouldUploadBatchesWithDropReason:(id *)reason shouldQuarantineRecords:(BOOL *)records inTransaction:(id)transaction;
- (void)_extractBatchWithTransaction:(id)transaction andStore:(id)store;
- (void)_uploadBatchWithFetchCache:(id)cache;
- (void)_deleteGeneratedResourcesAfterError:(id)error;
- (void)_generateDerivativesForNextRecord:(id)record usingDerivativesCache:(id)cache fetchCache:(id)cache;
- (void)_generateNeededDerivativesWithFetchCache:(id)cache;
- (BOOL)_canUseOverQuotaRule;
- (void)_prepareUploadBatch;
- (void)_noteSuccessfulUpdateInTransaction:(id)transaction;
- (void)_extractAndUploadOneBatch;
- (void)launch;
- (void)cancel:(BOOL)cancel;
- (void)cancel;
- (void)_excludeScopeFromMingling;
- (BOOL)_shouldNotTrustCloudCacheAfterError:(id)error;
- (void)_uploadTaskDidFinishWithError:(id)error;
- (id)taskIdentifier;
- (BOOL)_willNeedToAccessScopeWithIdentifier:(id)identifier primaryScope:(BOOL)scope error:(id *)error;
- (BOOL)willNeedToAccessRecordWithScopedIdentifier:(id)identifier error:(id *)error;
- (id)availableResourceTypesToUploadForChange:(id)change;
- (id)willUploadCloudResource:(id)resource localResource:(id)resource error:(id *)error;
- (BOOL)isResourceDynamic:(id)dynamic;
- (id)knownCloudRecordWithScopedIdentifier:(id)identifier;
- (BOOL)isCloudRecordWithScopedIdentifierShared:(id)shared;
@end

#endif /* CPLUploadPushedChangesTask_h */
