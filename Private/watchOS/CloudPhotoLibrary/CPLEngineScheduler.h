//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef CPLEngineScheduler_h
#define CPLEngineScheduler_h
@import Foundation;

#include "CPLAbstractObject-Protocol.h"
#include "CPLEngineComponent-Protocol.h"
#include "CPLEngineLibrary.h"
#include "CPLPlatformObject.h"
#include "CPLSyncSession.h"

@class NSArray, NSCountedSet, NSDate, NSMutableDictionary, NSMutableSet, NSString;
@protocol OS_dispatch_queue;

@interface CPLEngineScheduler : NSObject<CPLAbstractObject, CPLEngineComponent> {
  /* instance variables */
  NSDate *_preparingFirstSessionStartDate;
  unsigned long long _requiredFirstState;
  unsigned long long _lastRequestGeneration;
  unsigned long long _currentRequestGeneration;
  BOOL _needsToUpdateLastSyncDate;
  CPLSyncSession *_nextSession;
  double _intervalForRetry;
  NSDate *_proposedScheduleDate;
  NSObject<OS_dispatch_queue> *_queue;
  unsigned long long _currentSyncState;
  unsigned long long _pendingRequiredFirstState;
  BOOL _shouldNoteServerHasChanges;
  CPLSyncSession *_currentSession;
  BOOL _opened;
  NSDate *_unavailabilityLimitDate;
  NSString *_unavailabilityReason;
  unsigned long long _foregroundCalls;
  NSCountedSet *_disablingReasons;
  NSCountedSet *_blockingElements;
  NSMutableDictionary *_blockedElements;
  NSMutableSet *_blockWaiters;
  NSCountedSet *_unblockOnceElements;
  NSObject<OS_dispatch_queue> *_blockingLock;
  unsigned long long _significantWorkCalls;
  unsigned long long _disablingMinglingCount;
  NSDate *_lastSyncSessionDateCausedByForeground;
  NSDate *_deferDate;
  BOOL _protectAgainstFastRelaunch;
  BOOL _didWriteFirstSyncMarker;
  BOOL _delayedFirstSyncBecauseOfRapidLaunch;
  BOOL _isOverridingForeground;
  NSDate *_lastSuccessfulSyncSessionDate;
  NSArray *_lastSessionInformation;
  NSArray *_lastScopeIdentifiersExcludedFromPushToTransport;
  NSArray *_lastScopeIdentifiersExludedFromMingling;
  id _syncObserver;
}

@property (readonly, weak, nonatomic) CPLEngineLibrary *engineLibrary;
@property (copy, nonatomic) id /* block */ requiredStateObserverBlock;
@property (copy, nonatomic) id /* block */ shouldBackOffOnErrorBlock;
@property (readonly, nonatomic) unsigned long long requiredState;
@property (readonly, nonatomic) BOOL hasAScheduledSyncSession;
@property (readonly, nonatomic) CPLPlatformObject *platformObject;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)platformImplementationProtocol;
+ (id)validElements;

/* instance methods */
- (id)initWithEngineLibrary:(id)library;
- (void)_updateOverridingForeground;
- (void)_setRequiredFirstState:(unsigned long long)state;
- (BOOL)_syncSessionIsPossible;
- (void)_startSyncSession:(id)session withMinimalPhase:(unsigned long long)phase rewind:(BOOL)rewind;
- (void)_reallyStartSyncSession:(id)session;
- (void)_startRequiredSyncSession:(id)session;
- (void)_scheduleNextSyncSession;
- (void)_reallyUnscheduleSession;
- (void)_unscheduleNextSyncSession;
- (void)_noteSyncSessionNeededFromState:(unsigned long long)state proposedScheduleDate:(id)date;
- (void)_backOff;
- (void)startRequiredSyncSessionNow:(id)now;
- (void)forceStartSyncSession:(id)session withMinimalPhase:(unsigned long long)phase;
- (void)kickOffSyncSession;
- (void)noteStoreNeedsSetup;
- (void)noteStoreNeedsToUpdateDisabledFeatures;
- (void)noteStoreNeedsCleanup;
- (void)noteTransportNeedsUpdate;
- (void)noteScopeListNeedsUpdate;
- (void)noteScopeNeedsUpdate;
- (void)_disableFastRelaunchProtection;
- (void)noteScopeNeedsToPushHighPriorityToTransport;
- (void)noteScopeNeedsToPushToTransport;
- (void)noteScopeNeedsToPullFromTransport;
- (void)noteClientNeedsToPull;
- (void)noteClientIsInSyncWithClientCache;
- (void)noteClientIsNotInSyncWithClientCache;
- (void)_noteSyncSessionNeededFromStateDontRewindImmediately:(unsigned long long)immediately;
- (void)_reallyNoteServerHasChangesLocked;
- (void)noteServerHasChanges;
- (void)noteResourceDownloadQueueIsFull;
- (void)noteClientIsInForegroundQuietly:(BOOL)quietly;
- (void)noteClientIsInBackground;
- (BOOL)isClientInForeground;
- (void)_disableSynchronizationBecauseContainerHasBeenWipedLocked;
- (void)_disableSynchronizationWithReasonLocked:(id)locked;
- (void)disableSynchronizationWithReason:(id)reason;
- (void)disableSynchronizationIfBlockedWithReason:(id)reason completionHandler:(id /* block */)handler;
- (void)_enableSynchronizationWithReasonLocked:(id)locked;
- (void)enableSynchronizationWithReason:(id)reason;
- (void)blockAllSyncSessionsWithReason:(id)reason onlyIfBlocked:(BOOL)blocked block:(id /* block */)block;
- (void)blockEngineElement:(id)element;
- (void)unblockEngineElement:(id)element;
- (void)willRunEngineElement:(id)element;
- (BOOL)waitForEngineElementToBeBlocked:(id)blocked timeout:(double)timeout;
- (void)unblockEngineElementOnce:(id)once;
- (void)noteClientIsBeginningSignificantWork;
- (void)noteClientIsEndingSignificantWork;
- (void)disableMingling;
- (void)enableMingling;
- (BOOL)isMinglingEnabled;
- (BOOL)isSynchronizationDisabledWithReasonError:(id *)error;
- (void)_disableRetryAfterLocked;
- (void)_noteServerIsUnavailableWithErrorLocked:(id)locked reason:(id)reason;
- (void)noteServerIsUnavailableWithError:(id)error;
- (void)noteServerMightBeAvailableNow;
- (void)noteContainerHasBeenWiped;
- (void)noteNetworkStateDidChange;
- (void)_updateLastSyncDateIfNecessaryLocked;
- (void)noteSyncSession:(id)session stateWillBeAttempted:(unsigned long long)attempted;
- (void)_keepSessionInformation:(id)information;
- (void)noteSyncSessionSucceeded:(id)succeeded;
- (void)_handleResetClientCacheWithError:(id)error completionHandler:(id /* block */)handler;
- (void)_handleResetCloudCacheWithError:(id)error completionHandler:(id /* block */)handler;
- (void)_handleResetAnchorWithError:(id)error completionHandler:(id /* block */)handler;
- (void)_handleResetGlobalAnchorWithError:(id)error completionHandler:(id /* block */)handler;
- (void)noteSyncSession:(id)session failedDuringPhase:(unsigned long long)phase withError:(id)error;
- (void)noteQuotaHasChanged;
- (void)resetBackoffInterval;
- (void)getCurrentRequiredStateWithCompletionHandler:(id /* block */)handler;
- (void)openWithCompletionHandler:(id /* block */)handler;
- (void)_prepareFirstSession;
- (void)_stopPreparingFirstSession;
- (void)closeAndDeactivate:(BOOL)deactivate completionHandler:(id /* block */)handler;
- (id)componentName;
- (void)getStatusWithCompletionHandler:(id /* block */)handler;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)handler;
- (id)_pathToFirstSynchronizationMarker;
- (void)_writeFirstSynchronizationMarker;
- (id)_minimalDateForFirstSync;
- (void)_resetFirstSynchronizationMarker;
- (void)testKey:(id)key value:(id)value completionHandler:(id /* block */)handler;
@end

#endif /* CPLEngineScheduler_h */
