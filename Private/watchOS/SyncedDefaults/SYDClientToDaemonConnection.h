//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2100.151.0.0.0
//
#ifndef SYDClientToDaemonConnection_h
#define SYDClientToDaemonConnection_h
@import Foundation;

#include "SYDRemotePreferencesSource.h"
#include "SYDClientProtocol-Protocol.h"
#include "SYDStoreConfiguration.h"

@class NSLock, NSMutableDictionary, NSString, NSXPCConnection;
@protocol OS_dispatch_queue;

@interface SYDClientToDaemonConnection : SYDRemotePreferencesSource<SYDClientProtocol>

@property (retain, nonatomic) SYDStoreConfiguration *storeConfiguration;
@property (retain, nonatomic) NSXPCConnection *xpcConnection;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *analyticsQueue;
@property (nonatomic) int daemonWakeNotifyToken;
@property (nonatomic) BOOL didLogFaultForEntitlements;
@property BOOL needsChangeDictionaryFromDaemon;
@property (retain, nonatomic) NSMutableDictionary *cachedObjects;
@property (retain, nonatomic) NSLock *cacheLock;
@property (nonatomic) BOOL hasFullCachedDictionary;
@property (readonly, nonatomic) BOOL isSyncingWithCloud;
@property unsigned long long syncingWithCloudCounter;
@property (readonly, nonatomic) NSString *storeIdentifier;
@property (readonly, nonatomic) long long storeType;

/* class methods */
+ (id)allStoreIdentifiersWithError:(id *)error;
+ (id)defaultStoreIdentifierForCurrentProcessWithApplicationIdentifier:(id)identifier;
+ (id)disgustingUglyHardcodedKnownStoreIdentifierForApplicationIdentifier:(id)identifier;
+ (void)synchronizeStoresWithIdentifiers:(id)identifiers type:(long long)type completionHandler:(id /* block */)handler;
+ (BOOL)isCloudSyncUserDefaultEnabledForStoreIdentifier:(id)identifier;
+ (void)setCloudSyncUserDefaultEnabled:(BOOL)enabled storeIdentifier:(id)identifier;
+ (id)machServiceNameUsingTestServer:(BOOL)server;
+ (id)machServiceName;
+ (id)newXPCConnection;
+ (void)setHasPerformedAppLaunchSyncForStoreIdentifier:(id)identifier;
+ (BOOL)hasPerformedAppLaunchSyncForStoreIdentifier:(id)identifier;
+ (void)setShouldSyncOnFirstInitializationOverride:(id)override;
+ (id)shouldSyncOnFirstInitializationOverride;
+ (void)processAccountChangesWithCompletionHandler:(id /* block */)handler;
+ (id)daemonProtocolInterface;
+ (id)clientProtocolInterface;

/* instance methods */
- (id)initWithStoreIdentifier:(id)identifier type:(long long)type;
- (id)initWithStoreConfiguration:(id)configuration;
- (id)init;
- (id)description;
- (void)dealloc;
- (void)_handleCacheErrorForKey:(id)key;
- (void)setObject:(id)object forKey:(id)key;
- (BOOL)setObject:(id)object forKey:(id)key error:(id *)error;
- (void)removeObjectForKey:(id)key;
- (BOOL)removeObjectForKey:(id)key error:(id *)error;
- (id)objectForKey:(id)key;
- (id)objectForKey:(id)key error:(id *)error;
- (void)_clearCachedObjects;
- (void)setValue:(void *)value forKey:(struct __CFString *)key;
- (void *)getValueForKey:(struct __CFString *)key;
- (id)dictionaryRepresentation;
- (id)dictionaryRepresentationWithError:(id *)error;
- (id)copyDictionaryWithoutNullValues:(id)values;
- (struct __CFDictionary *)copyDictionary;
- (void)setChangeToken:(id)token;
- (id)changeToken;
- (BOOL)validateKey:(id)key error:(id *)error;
- (unsigned char)synchronize;
- (unsigned char)synchronizeForced:(unsigned char)forced;
- (void)processChangeDictionary:(id)dictionary;
- (void)scheduleRemoteSynchronization;
- (void)synchronizationWithCompletionHandler:(id /* block */)handler;
- (id)machServiceName;
- (void)registerForSynchronizedDefaults;
- (void)registerForDaemonDidWakeNotifications;
- (void)daemonDidWake;
- (void)registerForApplicationLifecycleEvents;
- (void)applicationWillEnterForeground;
- (void)performOpportunisticAppLaunchSyncIfNecessary;
- (void)logFaultIfNecessaryForError:(id)error;
- (void)___You_are_not_entitled_for_NSUbiquitousKeyValueStore___;
- (void)___We_looked_everywhere_but_we_cant_find_your_store_identifier___;
- (void)___Your_store_identifier_is_empty___;
- (void)___You_are_about_to_lose_data_in_NSUbiquitousKeyValueStore___;
- (void)___For_some_reason_NSUbiquitousKeyValueStore_thinks_you_dont_exist___;
- (void)___NSUbiquitousKeyValueStore_isnt_sure_exactly_what_you_did_but_it_was_invalid___:(id)store_isnt_sure_exactly_what_you_did_but_it_was_invalid___;
- (void)___You_think_you_can_just_XPC_into_any_process_all_willy_nilly_well_think_again___;
- (void)___You_exceeded_the_quota_limit_for_NSUbiquitousKeyValueStore___;
- (void)___Tried_to_set_invalid_object_in_NSUbiquitousKeyValueStore___:(id)store___;
- (void)storeDidChangeWithStoreID:(id)id changeDictionary:(id)dictionary reply:(id /* block */)reply;
- (unsigned char)hasExternalChanges;
- (id)copyExternalChangesWithChangeCount:(long long *)count;
- (void)discardExternalChangesForChangeCount:(long long)count;
- (void)updateConfiguration;
- (void)unregisterForSynchronizedDefaults;
- (void)ping;
- (void)setDefaultsConfiguration:(id)configuration;
- (id)synchronousDaemonWithErrorHandler:(id /* block */)handler;
- (id)asyncDaemonWithErrorHandler:(id /* block */)handler;
@end

#endif /* SYDClientToDaemonConnection_h */
