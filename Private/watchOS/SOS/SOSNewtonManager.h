//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 498.300.11.0.0
//
#ifndef SOSNewtonManager_h
#define SOSNewtonManager_h
@import Foundation;

#include "CMAnomalyDelegate-Protocol.h"
#include "SOSNewtonManagerDelegate-Protocol.h"

@class CMAnomalyEvent, CMAnomalyManager, NSString;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface SOSNewtonManager : NSObject<CMAnomalyDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_semaphore> *_eventProcessingSemaphore;
  NSObject<OS_dispatch_queue> *_eventProcessingQueue;
  NSString *_HKMedicalIDDidChangeNotification;
  NSString *_HKUserCharacteristicsDidChangeNotification;
}

@property (retain, nonatomic) CMAnomalyManager *coreMotionAnomalyManager;
@property BOOL shouldAcceptNewEvents;
@property (weak, nonatomic) NSObject<SOSNewtonManagerDelegate> *delegate;
@property (readonly, nonatomic) CMAnomalyEvent *activeEvent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)newtonEligibilityWithCompletion:(id /* block */)completion;
+ (void)newtonEligibilityWithHealthStore:(id)store completion:(id /* block */)completion;
+ (void)newtonEligibilityWithHealthStore:(id)store deviceSupportsWorkoutsOnly:(BOOL)only completion:(id /* block */)completion;
+ (void)checkEligibilityForAutoEnableWithCompletion:(id /* block */)completion;
+ (void)checkEligibilityForAutoEnableWithHealthStore:(id)store completion:(id /* block */)completion;

/* instance methods */
- (id)initWithDelegate:(id)delegate;
- (void)dealloc;
- (void)_updateEligibility;
- (void)enabledStateChanged;
- (void)startDetection;
- (void)stopDetection;
- (void)updateNewtonWithResponse:(unsigned long long)response;
- (void)resolveEventWithResponse:(long long)response Resolution:(long long)resolution;
- (void)updateAnomalyEventSOSCallState:(id)state withSOSSCallState:(long long)state;
- (void)anomalyManager:(id)manager onAnomalyEvent:(id)event;
- (void)_processEvent:(id)event;
- (void)_persistAnomalyEventWithResponse:(long long)response resolution:(long long)resolution;
- (id)_previouslySeenEvent;
@end

#endif /* SOSNewtonManager_h */
