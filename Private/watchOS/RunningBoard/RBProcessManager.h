//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 858.60.5.0.0
//
#ifndef RBProcessManager_h
#define RBProcessManager_h
@import Foundation;

#include "RBBundlePropertiesManaging-Protocol.h"
#include "RBEntitlementManaging-Protocol.h"
#include "RBHistoricalStatisticsMaintaining-Protocol.h"
#include "RBJetsamPropertyManaging-Protocol.h"
#include "RBLaunchManager.h"
#include "RBLaunchManagerDelegate-Protocol.h"
#include "RBLaunchdJobManager.h"
#include "RBPrewarmManager.h"
#include "RBProcessIndex.h"
#include "RBProcessManagerDelegate-Protocol.h"
#include "RBProcessManaging-Protocol.h"
#include "RBProcessMap.h"
#include "RBStateCapturing-Protocol.h"
#include "RBSystemState.h"

@class NSCountedSet, NSMutableDictionary, NSString;

@interface RBProcessManager : NSObject<RBProcessManaging, RBStateCapturing, RBLaunchManagerDelegate> {
  /* instance variables */
  RBLaunchdJobManager *_jobManager;
  NSObject<RBBundlePropertiesManaging> *_bundlePropertiesManager;
  NSObject<RBEntitlementManaging> *_entitlementManager;
  NSObject<RBJetsamPropertyManaging> *_jetsamPropertytManager;
  NSObject<RBHistoricalStatisticsMaintaining> *_historicalStatistics;
  RBPrewarmManager *_prewarmManager;
  RBLaunchManager *_launchManager;
  NSObject<RBProcessManagerDelegate> *_delegate;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _pendingExitBlockLock;
  atomic unsigned long long _counter;
  RBProcessIndex *_processIndex;
  RBProcessIndex *_processGraveyard;
  RBSystemState *_systemState;
  RBProcessMap *_processState;
  NSMutableDictionary *_identityToPendingExitBlock;
  NSMutableDictionary *_identityToProcessLifecycleQueue;
  NSCountedSet *_lifecycleQueuesInUse;
  BOOL _systemPreventsIdleSleep;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSString *stateCaptureTitle;

/* class methods */
+ (id)stateApplicationQueue;

/* instance methods */
- (id)init;
- (id)initWithBundlePropertiesManager:(id)manager entitlementManager:(id)manager jetsamPropertytManager:(id)manager timeProvider:(id)provider historialStatistics:(id)statistics delegate:(id)delegate;
- (void)start;
- (id)processForAuditToken:(id)token;
- (id)processForIdentifier:(id)identifier;
- (id)processForIdentifierWithoutStartingTracking:(id)tracking;
- (id)_processForIdentifier:(id)identifier withAuditToken:(id)token forceStartTracking:(BOOL)tracking;
- (id)processForIdentity:(id)identity;
- (id)processForInstance:(id)instance;
- (id)processesMatchingPredicate:(id)predicate;
- (BOOL)isActiveProcess:(id)process;
- (void)systemPreventIdleSleepStateDidChange:(BOOL)change;
- (id)executeLaunchRequest:(id)request withError:(out id *)error;
- (BOOL)_canTerminateProcess:(id)process withContext:(id)context error:(out id *)error;
- (void)executeTerminateRequest:(id)request completion:(id /* block */)completion;
- (id)busyExtensionInstancesFromSet:(id)set;
- (void)_enqueueGuaranteedRunningLaunchForIdentity:(id)identity atTime:(double)time;
- (void)didUpdateProcessStates:(id)states completion:(id /* block */)completion;
- (void)applySystemState:(id)state;
- (void)removeStateForProcessIdentity:(id)identity;
- (id)captureState;
- (id)_processForIdentifier:(id)identifier;
- (id)_processForInstance:(id)instance;
- (id)_resolveProcessWithIdentifier:(id)identifier auditToken:(id)token properties:(id *)properties;
- (void)_executeLifecycleEventForIdentity:(id)identity sync:(BOOL)sync withBlock:(id /* block */)block;
- (id)_getLifecycleQueueForIdentity:(id)identity;
- (void)_releaseLifecycleQueueForIdentity:(id)identity;
- (id)_lifecycleQueue_addProcessWithInstance:(id)instance properties:(id)properties;
- (void)_removeProcess:(id)process;
@end

#endif /* RBProcessManager_h */
