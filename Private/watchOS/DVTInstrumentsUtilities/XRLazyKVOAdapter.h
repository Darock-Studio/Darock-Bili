//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 64562.3.1.1.0
//
#ifndef XRLazyKVOAdapter_h
#define XRLazyKVOAdapter_h
@import Foundation;

#include "XRLazyKVOResponder-Protocol.h"
#include "_XRLazyKVOBlockToken.h"

@class NSArray, NSMapTable;
@protocol {unordered_set<const void *, std::hash<const void *>, std::equal_to<const void *>, std::allocator<const void *>>="__table_"{__hash_table<const void *, std::hash<const void *>, std::equal_to<const void *>, std::allocator<const void *>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<const void *, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<const void *, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<const void *, void *> *>, std::allocator<std::__hash_node<const void *, void *>>>="__value_"{__hash_node_base<std::__hash_node<const void *, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<const void *>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<const void *>>="__value_"f}}};

@interface XRLazyKVOAdapter : NSObject {
  /* instance variables */
  NSMapTable *_keyPathsByContextByClz;
  NSMapTable *_keyPathsByContextByObj;
  struct unordered_set<const void *, std::hash<const void *>, std::equal_to<const void *>, std::allocator<const void *>> { struct __hash_table<const void *, std::hash<const void *>, std::equal_to<const void *>, std::allocator<const void *>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<const void *, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<const void *, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<const void *, void *> *>, std::allocator<std::__hash_node<const void *, void *>>> { struct __hash_node_base<std::__hash_node<const void *, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<const void *>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<const void *>> { float __value_; } __p3_; } __table_; } _updatedContexts;
  struct unordered_set<const void *, std::hash<const void *>, std::equal_to<const void *>, std::allocator<const void *>> { struct __hash_table<const void *, std::hash<const void *>, std::equal_to<const void *>, std::allocator<const void *>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<const void *, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<const void *, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<const void *, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<const void *, void *> *>, std::allocator<std::__hash_node<const void *, void *>>> { struct __hash_node_base<std::__hash_node<const void *, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<const void *>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<const void *>> { float __value_; } __p3_; } __table_; } _presentedContexts;
  NSObject<XRLazyKVOResponder> *_responder;
  BOOL _implementsWillChangeHandler;
}

@property (retain, nonatomic) _XRLazyKVOBlockToken *strongBlockAdapterToken;
@property (copy, nonatomic) NSArray *runLoopModes;
@property (nonatomic) BOOL suspended;

/* class methods */
+ (id)observeKeyPath:(id)path object:(id)object observer:(id)observer lazyUpdateBlock:(id /* block */)block;
+ (id)observeKeyPathArray:(id)array object:(id)object observer:(id)observer lazyUpdateBlock:(id /* block */)block;

/* instance methods */
- (id)init;
- (id)initWithLazyKVOResponder:(id)kvoresponder;
- (void)clear;
- (void)dealloc;
- (void)fireCallbackContext:(const void *)context whenKeypaths:(id)keypaths changeOnClass:(Class)class;
- (void)observeObject:(id)object;
- (void)removeObservationsForObject:(id)object;
- (BOOL)hasContextChanged:(const void *)changed;
- (void)_callbackHandler;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (BOOL)isSuspended;
@end

#endif /* XRLazyKVOAdapter_h */
