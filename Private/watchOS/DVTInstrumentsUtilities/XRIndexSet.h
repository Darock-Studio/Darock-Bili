//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 64562.3.1.1.0
//
#ifndef XRIndexSet_h
#define XRIndexSet_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSMutableCopying-Protocol.h"

@protocol {XRIndexSetImpl<unsigned long long, 4, std::allocator<xray::internal::RangeImp<unsigned long long>>>="_ranges"{multiset<xray::internal::RangeImp<unsigned long long>, std::less<xray::internal::RangeImp<unsigned long long>>, std::allocator<xray::internal::RangeImp<unsigned long long>>>="__tree_"{__tree<xray::internal::RangeImp<unsigned long long>, std::less<xray::internal::RangeImp<unsigned long long>>, std::allocator<xray::internal::RangeImp<unsigned long long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<xray::internal::RangeImp<unsigned long long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<xray::internal::RangeImp<unsigned long long>>>="__value_"Q}}}"_cache"{array<xray::internal::RangeImp<unsigned long long>, 4UL>="__elems_"[4{RangeImp<unsigned long long>="first"Q"last"Q}]}"_cacheIsValid"B};

@interface XRIndexSet : NSObject<NSCopying, NSMutableCopying> {
  /* instance variables */
  struct XRIndexSetImpl<unsigned long long, 4, std::allocator<xray::internal::RangeImp<unsigned long long>>> { struct multiset<xray::internal::RangeImp<unsigned long long>, std::less<xray::internal::RangeImp<unsigned long long>>, std::allocator<xray::internal::RangeImp<unsigned long long>>> { struct __tree<xray::internal::RangeImp<unsigned long long>, std::less<xray::internal::RangeImp<unsigned long long>>, std::allocator<xray::internal::RangeImp<unsigned long long>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<xray::internal::RangeImp<unsigned long long>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::less<xray::internal::RangeImp<unsigned long long>>> { unsigned long long __value_; } __pair3_; } __tree_; } _ranges; struct array<xray::internal::RangeImp<unsigned long long>, 4UL> { struct RangeImp<unsigned long long> { unsigned long long first; unsigned long long last; } x[4] __elems_; } _cache; BOOL _cacheIsValid; } _impl;
}

/* class methods */
+ (id)indexSetWithIndex:(unsigned long long)index;
+ (id)indexSetWithIndexesInRange:(struct _XRIndexRange { unsigned long long x0; unsigned long long x1; })range;

/* instance methods */
- (id)initWithIndex:(unsigned long long)index;
- (id)initWithIndexes:(struct _XRIndexRange { unsigned long long x0; unsigned long long x1; })indexes;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)mutableCopyWithZone:(struct _NSZone *)zone;
- (BOOL)isEmpty;
- (unsigned long long)count;
- (BOOL)countEquals:(unsigned long long)equals;
- (unsigned long long)firstIndex;
- (unsigned long long)lastIndex;
- (BOOL)containsIndex:(unsigned long long)index;
- (BOOL)intersectsIndexesInRange:(struct _XRIndexRange { unsigned long long x0; unsigned long long x1; })range;
- (void)enumerateIndexesUsingBlock:(id /* block */)block;
- (void)enumerateRangesUsingBlock:(id /* block */)block;
@end

#endif /* XRIndexSet_h */
