//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 12698.0.0.0.0
//
#ifndef ABPredicate_h
#define ABPredicate_h
@import Foundation;

#include "NSPredicate.h"

@interface ABPredicate : NSPredicate
/* class methods */
+ (id)personPredicateWithNameLike:(id)like addressBook:(void *)book;
+ (id)personPredicateWithNameLike:(id)like group:(void *)group source:(void *)source account:(id)account addressBook:(void *)book;
+ (id)personPredicateWithNameLike:(id)like group:(void *)group source:(void *)source account:(id)account includeSourceInResults:(BOOL)results addressBook:(void *)book;
+ (id)personPredicateWithNameLike:(id)like groups:(id)groups sources:(id)sources addressBook:(void *)book;
+ (id)personPredicateWithNameLike:(id)like groups:(id)groups sources:(id)sources includeSourceInResults:(BOOL)results addressBook:(void *)book;
+ (id)personPredicateWithNameLike:(id)like groups:(id)groups sources:(id)sources includeSourceInResults:(BOOL)results includePhotosInResults:(BOOL)results addressBook:(void *)book;
+ (id)personPredicateWithName:(id)name addressBook:(void *)book;
+ (id)personPredicateWithNameOnly:(id)only account:(id)account addressBook:(void *)book;
+ (id)personPredicateWithValue:(id)value comparison:(long long)comparison forProperty:(int)property;
+ (id)personPredicateWithAnyValueForProperty:(int)property;
+ (id)personPredicateWithPhoneLike:(id)like countryHint:(id)hint addressBook:(void *)book;
+ (id)personPredicateWithGroup:(void *)group source:(void *)source account:(id)account;
+ (id)newQueryWithProperties:(id)properties joins:(id)joins whereString:(id)string sortOrder:(unsigned int)order rankString:(id)string groupByProperties:(id)properties addressBook:(void *)book propertyIndices:(const struct __CFDictionary * *)indices;
+ (id)newQueryFromABPredicate:(id)abpredicate withSortOrder:(unsigned int)order ranked:(BOOL)ranked addressBook:(void *)book propertyIndices:(const struct __CFDictionary * *)indices;
+ (id)newQueryFromCompoundPredicate:(id)predicate withSortOrder:(unsigned int)order ranked:(BOOL)ranked addressBook:(void *)book propertyIndices:(const struct __CFDictionary * *)indices;
+ (void)searchPeopleWithPredicate:(id)predicate sortOrder:(unsigned int)order inAddressBook:(void *)book withDelegate:(id)delegate;
+ (void)searchPeopleWithPredicate:(id)predicate sortOrder:(unsigned int)order ranked:(BOOL)ranked inAddressBook:(void *)book withDelegate:(id)delegate;

/* instance methods */
- (BOOL)ab_hasCallback;
- (void)ab_addCallbackContextToArray:(id)array;
- (id)ab_newQueryWithSortOrder:(unsigned int)order ranked:(BOOL)ranked addressBook:(void *)book propertyIndices:(const struct __CFDictionary * *)indices;
- (id)init;
- (void)dealloc;
- (id)predicateFormat;
- (BOOL)isValid;
- (id)querySelectPropertiesForPredicateIdentifier:(int)identifier;
- (id)_querySelectStringForPredicateIdentifier:(int)identifier;
- (id)queryJoinsInCompound:(BOOL)compound predicateIdentifier:(int)identifier;
- (id)queryGroupByProperties;
- (id)queryWhereStringForPredicateIdentifier:(int)identifier;
- (id)queryRankStringForPredicateIdentifier:(int)identifier;
- (BOOL)hasCallback;
- (id)callbackContext;
- (void)evaluateCallbackWithSqliteContext:(struct sqlite3_context *)context predicateContext:(id)context values:(struct sqlite3_value * *)values count:(int)count;
- (void)ab_bindWhereClauseComponentOfStatement:(struct CPSqliteStatement { struct CPSqliteConnection * x0; struct sqlite3_stmt * x1; double x2; BOOL x3; } *)statement withBindingOffset:(int *)offset predicateIdentifier:(int)identifier;
- (void)ab_bindJoinClauseComponentOfStatement:(struct CPSqliteStatement { struct CPSqliteConnection * x0; struct sqlite3_stmt * x1; double x2; BOOL x3; } *)statement withBindingOffset:(int *)offset predicateIdentifier:(int)identifier;
- (void)bindString:(id)string toStatement:(struct CPSqliteStatement { struct CPSqliteConnection * x0; struct sqlite3_stmt * x1; double x2; BOOL x3; } *)statement withBindingOffset:(int *)offset;
- (void)bindDouble:(double)double toStatement:(struct CPSqliteStatement { struct CPSqliteConnection * x0; struct sqlite3_stmt * x1; double x2; BOOL x3; } *)statement withBindingOffset:(int *)offset;
- (id)querySerializationIdentifier;
@end

#endif /* ABPredicate_h */
