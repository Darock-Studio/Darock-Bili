//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 22.0.0.0.0
//
#ifndef MFMailMessageStore_h
#define MFMailMessageStore_h
@import Foundation;

#include "MFMessageStore.h"
#include "MFActivityMonitor.h"
#include "MFMailboxUid.h"
#include "MailAccount.h"

@interface MFMailMessageStore : MFMessageStore {
  /* instance variables */
  unsigned long long _state;
  struct { unsigned int x :1 isReadOnly; unsigned int x :1 hasUnsavedChangesToMessageData; unsigned int x :1 haveOpenLockFile; unsigned int x :1 compacting; unsigned int x :1 cancelInvalidation; unsigned int x :1 forceInvalidation; unsigned int x :1 isWritingChangesToDisk; unsigned int x :1 isTryingToClose; unsigned int x :1 compactOnClose; unsigned int x :23 reserved; } _flags;
  MFMailboxUid *_mailboxUid;
  MailAccount *_account;
  unsigned long long _deletedMessagesSize;
  unsigned long long _deletedMessageCount;
  unsigned long long _unreadMessageCount;
  unsigned long long _generationNumber;
  unsigned long long _lastFetchCount;
  MFActivityMonitor *_openMonitor;
}

/* class methods */
+ (BOOL)createEmptyStoreIfNeededForPath:(id)path;
+ (BOOL)createEmptyStoreForPath:(id)path;
+ (BOOL)storeAtPathIsWritable:(id)writable;
+ (Class)classForMimePart;
+ (id)copyMessages:(id)messages toMailbox:(id)mailbox markAsRead:(BOOL)read deleteOriginals:(BOOL)originals isDeletion:(BOOL)deletion;
+ (Class)headersClass;

/* instance methods */
- (id)initWithMailboxUid:(id)uid readOnly:(BOOL)only;
- (void)dealloc;
- (void)openAsynchronously;
- (void)openSynchronously;
- (void)didOpen;
- (void)cancelOpen;
- (void)writeUpdatedMessageDataToDisk;
- (id)account;
- (id)mailboxUid;
- (BOOL)isOpened;
- (id)storePathRelativeToAccount;
- (id)displayName;
- (BOOL)isReadOnly;
- (id)description;
- (BOOL)isDrafts;
- (void)messageFlagsDidChange:(id)change flags:(id)flags;
- (void)allMessageFlagsDidChange:(id)change;
- (void)structureDidChange;
- (void)messagesWereAdded:(id)added;
- (void)messagesWereCompacted:(id)compacted;
- (void)messagesWillBeCompacted:(id)compacted;
- (void)deletedCount:(unsigned long long *)count andSize:(unsigned long long *)size;
- (unsigned long long)totalCount;
- (unsigned long long)nonDeletedCountIncludingServerSearch:(BOOL)search andThreadSearch:(BOOL)search;
- (unsigned long long)allNonDeletedCountIncludingServerSearch:(BOOL)search andThreadSearch:(BOOL)search;
- (unsigned long long)serverMessageCount;
- (unsigned long long)serverUnreadOnlyOnServerCount;
- (unsigned long long)serverUnreadCount;
- (unsigned long long)serverNonDeletedCount;
- (BOOL)hasMoreFetchableMessages;
- (BOOL)shouldGrowFetchWindow;
- (void)invalidateFetchWindow;
- (unsigned long long)growFetchWindow;
- (unsigned long long)fetchWindow;
- (unsigned long long)fetchWindowCap;
- (void)purgeMessagesBeyondLimit:(unsigned long long)limit keepingMessage:(id)message;
- (unsigned long long)unreadCount;
- (unsigned long long)unreadCountMatchingCriterion:(id)criterion;
- (BOOL)hasMessageForAccount:(id)account;
- (unsigned long long)indexOfMessage:(id)message;
- (id)copyOfAllMessages;
- (id)copyOfMessagesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)mutableCopyOfAllMessages;
- (id)copyOfAllMessagesWithOptions:(unsigned int)options;
- (id)copyOfAllMessagesForBodyLoadingFromRowID:(unsigned int)id limit:(unsigned int)limit;
- (id)copyMessagesMatchingText:(id)text;
- (id)copyMessagesMatchingText:(id)text options:(unsigned int)options;
- (id)copyMessagesMatchingCriterion:(id)criterion options:(unsigned int)options;
- (id)copyMessagesWithRemoteIDs:(id)ids options:(unsigned int)options;
- (id)copyMessagesWithRemoteIDs:(id)ids options:(unsigned int)options inMailbox:(id)mailbox;
- (BOOL)canFetchSearchResults;
- (long long)fetchMessagesMatchingCriterion:(id)criterion limit:(unsigned int)limit;
- (id)storeSearchResultMatchingCriterion:(id)criterion limit:(unsigned int)limit offset:(id)offset error:(id *)error;
- (id)storeSearchResultMatchingSearchText:(id)text criterion:(id)criterion limit:(unsigned int)limit offset:(id)offset error:(id *)error;
- (id)remoteIDsFromUniqueRemoteIDs:(id)ids;
- (BOOL)canFetchMessageIDs;
- (long long)fetchMessagesWithMessageIDs:(id)ids andSetFlags:(unsigned long long)flags;
- (long long)fetchMessagesWithRemoteIDs:(id)ids andSetFlags:(unsigned long long)flags;
- (id)_defaultRouterDestination;
- (id)finishRoutingMessages:(id)messages routed:(id)routed;
- (BOOL)canCompact;
- (void)doCompact;
- (void)deleteMessagesOlderThanNumberOfDays:(int)days compact:(BOOL)compact;
- (void)deleteMessages:(id)messages moveToTrash:(BOOL)trash;
- (void)undeleteMessages:(id)messages;
- (void)messagesWereDeleted:(id)deleted;
- (BOOL)allowsAppend;
- (unsigned long long)appendMessages:(id)messages unsuccessfulOnes:(id)ones newMessageIDs:(id)ids newMessages:(id)messages flagsToSet:(id)set;
- (unsigned long long)appendMessages:(id)messages unsuccessfulOnes:(id)ones newMessageIDs:(id)ids newMessages:(id)messages;
- (unsigned long long)appendMessages:(id)messages unsuccessfulOnes:(id)ones newMessageIDs:(id)ids;
- (unsigned long long)appendMessages:(id)messages unsuccessfulOnes:(id)ones;
- (id)messageForMessageID:(id)id options:(unsigned int)options;
- (id)messageForRemoteID:(id)id;
- (id)messageForRemoteID:(id)id inMailbox:(id)mailbox;
- (id)lastViewedMessageWithOptions:(unsigned int)options;
- (id)lastViewedMessageDate;
- (id)uniqueRemoteIDsForMessages:(id)messages;
- (id)headerDataForMessage:(id)message downloadIfNecessary:(BOOL)necessary;
- (BOOL)hasCachedDataForMimePart:(id)part;
- (id)setFlagsFromDictionary:(id)dictionary forMessages:(id)messages;
- (id)setFlagsLocallyFromDictionary:(id)dictionary forMessages:(id)messages;
- (void)setFlag:(id)flag state:(BOOL)state forMessages:(id)messages;
- (id)willSetFlagsFromDictionary:(id)dictionary forMessages:(id)messages;
- (void)setFlagsCancelled:(id)cancelled forMessages:(id)messages;
- (void)setFlagForAllMessages:(id)messages state:(BOOL)state;
- (void)setFlagsForAllMessagesFromDictionary:(id)dictionary;
- (void)setNumberOfAttachments:(unsigned int)attachments isSigned:(BOOL)signed isEncrypted:(BOOL)encrypted forMessage:(id)message;
- (id)status;
- (long long)fetchNumMessages:(unsigned long long)messages preservingUID:(id)uid options:(unsigned long long)options;
- (void)updateServerUnreadCountClosingConnection:(BOOL)connection;
- (long long)fetchMobileSynchronously:(unsigned long long)synchronously preservingUID:(id)uid options:(unsigned long long)options;
- (long long)fetchMobileSynchronously:(unsigned long long)synchronously;
- (BOOL)setPreferredEncoding:(unsigned int)encoding forMessage:(id)message;
- (id)storeData:(id)data forMimePart:(id)part isComplete:(BOOL)complete;
- (void)close;
- (void)_flushAllMessageData;
- (void)setLibrary:(id)library;
- (BOOL)shouldDownloadBodyDataForMessage:(id)message;
- (id)loadMeetingExternalIDForMessage:(id)message;
- (id)loadMeetingDataForMessage:(id)message;
- (id)loadMeetingMetadataForMessage:(id)message;
- (BOOL)shouldSetSummaryForMessage:(id)message;
- (BOOL)shouldDeleteInPlace;
- (BOOL)supportsArchiving;
- (BOOL)shouldArchive;
- (int)archiveDestination;
- (id)_fetchHeaderDataForMessage:(id)message downloadIfNecessary:(BOOL)necessary;
- (void)_rebuildTableOfContentsSynchronously;
- (id)_setOrGetBody:(id)body forMessage:(id)message updateFlags:(BOOL)flags;
- (void)_setFlagsForMessages:(id)messages;
- (void)updateMessages:(id)messages updateNumberOfAttachments:(BOOL)attachments;
- (void)messagesWereAdded:(id)added earliestReceivedDate:(id)date;
- (BOOL)_updateFlagForMessage:(id)message key:(id)key value:(BOOL)value;
- (BOOL)_shouldChangeComponentMessageFlags;
- (BOOL)_shouldChangeComponentMessageFlagsForMessage:(id)message;
- (id)messageIdRollCall:(id)call;
@end

#endif /* MFMailMessageStore_h */
