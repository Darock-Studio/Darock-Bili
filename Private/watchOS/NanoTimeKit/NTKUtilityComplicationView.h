//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2398.45.8.0.0
//
#ifndef NTKUtilityComplicationView_h
#define NTKUtilityComplicationView_h
@import Foundation;

#include "UIView.h"
#include "CDComplicationDisplay-Protocol.h"
#include "CDComplicationDisplayObserver-Protocol.h"
#include "CDTemplateComplicationDisplay-Protocol.h"
#include "CDTritiumOverridableColorDisplay-Protocol.h"
#include "CLKMonochromeFilterProvider-Protocol.h"
#include "NTKFaceColorScheme.h"
#include "NTKUtilityComplicationView-Protocol.h"

@class CLKComplicationTemplate, CLKDevice, CLKFont, NSDate, NSString, UIColor, UIImageView, UIView;

@interface NTKUtilityComplicationView : UIView<CDTemplateComplicationDisplay, CDComplicationDisplay, NTKUtilityComplicationView, CDTritiumOverridableColorDisplay> {
  /* instance variables */
  double _tritium_overrideColorAmount;
  UIColor *_tritium_platterColor;
  UIColor *_tritium_foregroundColor;
  UIColor *_computedForegroundColor;
  UIColor *_computedPlatterColor;
  double _computedForegroundAlpha;
  double _computedForegroundImageAlpha;
}

@property (retain, nonatomic) UIImageView *backgroundPlatter;
@property (nonatomic) double minimumWidth;
@property (retain, nonatomic) UIView *highlightView;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } touchEdgeInsets;
@property (retain, nonatomic) NTKFaceColorScheme *colorScheme;
@property (retain, nonatomic) UIColor *overrideColor;
@property (retain, nonatomic) CLKFont *font;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } maxSize;
@property (readonly, nonatomic) BOOL editing;
@property (readonly, nonatomic) CLKComplicationTemplate *complicationTemplate;
@property (retain, nonatomic) CLKDevice *device;
@property (retain, nonatomic) UIColor *foregroundColor;
@property (retain, nonatomic) UIColor *shadowColor;
@property (retain, nonatomic) UIColor *accentColor;
@property (retain, nonatomic) UIColor *platterColor;
@property (nonatomic) BOOL usesLegibility;
@property (nonatomic) double foregroundAlpha;
@property (nonatomic) double foregroundImageAlpha;
@property (nonatomic) unsigned long long placement;
@property (nonatomic) BOOL shouldUseBackgroundPlatter;
@property (nonatomic) BOOL alwaysEnforcePlatterInset;
@property (readonly) NSDate *timeTravelDate;
@property (nonatomic) BOOL useRoundedFontDesign;
@property (nonatomic) double fontWeight;
@property (nonatomic) BOOL useBlockyHighlightCorners;
@property (nonatomic) BOOL shouldScaleAndFadeWhenHighlighting;
@property (nonatomic) double editingRotationAngle;
@property (nonatomic) BOOL suppressesInternalColorOverrides;
@property (retain, nonatomic) UIColor *tritium_overrideForegroundColor;
@property (retain, nonatomic) UIColor *tritium_overridePlatterColor;
@property (weak, nonatomic) NSObject<CDComplicationDisplayObserver> *displayObserver;
@property (nonatomic) BOOL canUseCurvedText;
@property (nonatomic) BOOL highlighted;
@property (nonatomic) BOOL shouldUseTemplateColors;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double fontSize;
@property (nonatomic) BOOL useAlternativePunctuation;
@property (weak, nonatomic) NSObject<CLKMonochromeFilterProvider> *filterProvider;

/* class methods */
+ (long long)layoutOverride;
+ (id)smallComplicationViewForType:(unsigned long long)type;
+ (id)largeComplicationViewForType:(unsigned long long)type narrow:(BOOL)narrow;
+ (BOOL)handlesComplicationTemplate:(id)template;
+ (id)_preferredAdditionalFontSettings;
+ (id)_timerImageProvider;
+ (id)_alarmImageProviderActive:(BOOL)active;
+ (id)_stopwatchImageProvider;

/* instance methods */
- (void)traitCollectionDidChange:(id)change;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)_updateForegroundColor;
- (void)_computeForegroundColor;
- (id)_computedForegroundColor;
- (void)_updatePlatterColor;
- (void)_computePlatterColor;
- (id)_computedPlatterColor;
- (void)_updateForegroundAlpha;
- (void)_computeForegroundAlpha;
- (void)_computeForegroundImageAlpha;
- (void)_updateForegroundImageAlpha;
- (void)tritium_transitionToTritiumOnWithProgress:(float)progress;
- (void)tritium_transitionToTritiumOffWithProgress:(float)progress;
- (void)applyFaceColorPalette:(id)palette units:(unsigned long long)units;
- (void)applyTransitionFraction:(double)fraction fromFaceColorPalette:(id)palette toFaceColorPalette:(id)palette units:(unsigned long long)units brightenedUnits:(unsigned long long)units;
- (void)_applyColorScheme:(id)scheme;
- (BOOL)isPlacementForTopBezelComplication;
- (BOOL)shouldUsePlatterInset;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (void)layoutSubviews;
- (id)_backgroundPlatterImage;
- (void)layoutLabelVertically:(id)vertically;
- (double)_imageViewOriginYWithBaseImageSize:(struct CGSize { double x0; double x1; })size labelFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })inside withEvent:(id)event;
- (void)_updateImageViewAlpha:(id)alpha;
- (void)_updateImageViewColor:(id)color;
- (void)_updateLabelsForFontChange;
- (void)setComplicationTemplate:(id)template reason:(long long)reason;
- (void)setTimeTravelDate:(id)date animated:(BOOL)animated;
- (void)tritium_forceUpdateColoringViews;
- (void)_enumerateColoringViewsWithBlock:(id /* block */)block;
- (void)_enumerateColoringStackedImagesViewsWithBlock:(id /* block */)block;
- (id)_newDigitalTimeLabelSubviewWithOptions:(unsigned long long)options;
- (id)_newLabelSubviewWithFont:(id)font variant:(BOOL)variant;
- (id)_newStandardLabelSubviewVariant:(BOOL)variant;
- (id)_newStandardLabelSubview;
- (id)_newHighlightViewVariant:(BOOL)variant;
- (id)_newHighlightView;
- (id)_newStandardCurvedLabelSubview;
- (id)_newCurvedHighlightView;
- (id)_newImageViewSubviewWithAlpha:(double)alpha;
- (id)_newImageViewSubview;
- (id)_standardFont;
- (id)_smallCapsFont;
- (void)_updateContentForMaxSizeChange;
- (void)_updateContentForEditingChange;
- (double)_widthThatFits;
- (void)_applyForegroundAlpha;
- (void)_updateForTemplateChange;
@end

#endif /* NTKUtilityComplicationView_h */
