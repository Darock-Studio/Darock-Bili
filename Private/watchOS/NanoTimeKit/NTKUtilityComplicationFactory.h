//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2398.45.8.0.0
//
#ifndef NTKUtilityComplicationFactory_h
#define NTKUtilityComplicationFactory_h
@import Foundation;

#include "NTKFaceView.h"
#include "NTKFaceViewComplicationFactory-Protocol.h"
#include "NTKUtilityComplicationFactoryDelegate-Protocol.h"

@class BOOL *, CLKDevice, CLKFont, NSString;

@interface NTKUtilityComplicationFactory : NSObject<NTKFaceViewComplicationFactory>

@property (readonly, nonatomic) CLKDevice *device;
@property (weak, nonatomic) NSObject<NTKUtilityComplicationFactoryDelegate> *delegate;
@property (nonatomic) BOOL graphicCornerComplications;
@property (nonatomic) BOOL usesNarrowTopSlots;
@property (nonatomic) BOOL accommodatesTwoTopComplications;
@property (nonatomic) double normalSidePadding;
@property (nonatomic) double normalVerticalPadding;
@property (nonatomic) struct CGSize { double x0; double x1; } normalCircularPadding;
@property (nonatomic) double deselectedKeylineSideInnerPadding;
@property (nonatomic) double deselectedKeylineVerticalInnerPadding;
@property (nonatomic) double deselectedKeylineCircularInnerPadding;
@property (nonatomic) double selectedKeylineSideInnerPadding;
@property (nonatomic) double selectedKeylineVerticalInnerContentSpacer;
@property (nonatomic) double selectedKeylineHeight;
@property (nonatomic) double foregroundAlpha;
@property (nonatomic) double foregroundImageAlpha;
@property (nonatomic) double maxNormalLongWidth;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } screenEdgeInsets;
@property (nonatomic) double crownIndicatorGap;
@property (retain, nonatomic) CLKFont *topBezelLabelFont;
@property (nonatomic) double bezelLabelMaxWidthInDegree;
@property (nonatomic) double bezelLabelTopPadding;
@property (nonatomic) double bezelKeylineInnerCircleOffset;
@property (nonatomic) double bezelKeylineDiameter;
@property (nonatomic) double dialDiameter;
@property (weak, nonatomic) NTKFaceView *faceView;
@property (nonatomic) double dateKeylineMaxWidth;
@property (nonatomic) double dateHorizontalCenterOffset;
@property (nonatomic) double dateVerticalCenterOffset;
@property (nonatomic) BOOL includesDateComplicationLayoutRules;
@property (nonatomic) long long bottomCenterLayout;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (unsigned long long)placementForSlot:(long long)slot;
+ (id)smileShapeForDevice:(id)device;
+ (struct CGSize { double x0; double x1; })smileShapeSizeForDevice:(id)device;
+ (struct CGPoint { double x0; double x1; })smileShapeAlignmentPointForDevice:(id)device;
+ (void)curvedCircleRadius:(double *)radius centerAngle:(double *)angle maxAngularWidth:(double *)width circleCenter:(struct CGPoint { double x0; double x1; } *)center interior:(BOOL *)interior forSlot:(long long)slot forDevice:(id)device;

/* instance methods */
- (id)initForDevice:(id)device;
- (long long)layoutOverrideForComplicationType:(unsigned long long)type inSlot:(long long)slot;
- (id)newViewForComplication:(id)complication family:(long long)family forSlot:(long long)slot;
- (void)configureComplicationView:(id)view forSlot:(id)slot dialDiameter:(double)diameter;
- (double)bezelComplicationRadiusWithDialDiameter:(double)diameter;
- (double)bezelComplicationMaxAngularWidth;
- (void)configureComplicationLayout:(id)layout forSlot:(long long)slot withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)configureComplicationLayout:(id)layout forSlot:(long long)slot bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds dialDiameter:(double)diameter;
- (id)_curvedKeylineImageForSlot:(long long)slot;
- (id)_curvedMaskImageForSlot:(long long)slot;
- (id)_curvedImageForSlot:(long long)slot filled:(BOOL)filled;
- (id)keylineViewForSlot:(long long)slot;
- (id)keylineViewForSlot:(long long)slot dialDiameter:(double)diameter;
- (double)keylineCornerRadiusForSlot:(long long)slot;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keylineFrameForCornerComplicationSlot:(id)slot selected:(BOOL)selected faceView:(id)view;
- (id)curvedMaskForSlot:(long long)slot;
- (double)foregroundAlphaForEditing:(BOOL)editing;
- (double)foregroundAlphaForTransitionFraction:(double)fraction fromEditMode:(long long)mode toEditMode:(long long)mode;
- (double)foregroundImageAlphaForEditing:(BOOL)editing;
- (double)foregroundImageAlphaForTransitionFraction:(double)fraction fromEditMode:(long long)mode toEditMode:(long long)mode;
- (id)_viewForDateComplication:(id)complication;
- (void)_configureTopLeftLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds variant:(BOOL)variant;
- (void)_configureTopRightLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds variant:(BOOL)variant;
- (void)_configureBottomLeftLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds variant:(BOOL)variant;
- (void)_configureBottomRightLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds variant:(BOOL)variant;
- (void)_configureTopBezelLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds dialDiameter:(double)diameter;
- (void)_configureBottomCenterLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds variant:(BOOL)variant;
- (void)_configureDateLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_configureTopRightAboveLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_configureTopRightBelowLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_configureBottomRightAboveLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_configureBottomRightBelowLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_configureBottomRightLongLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_configureUpNextTopRightLayout:(id)layout withBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_configureLayout:(id)layout withNormalSize:(struct CGSize { double x0; double x1; })size editingSize:(struct CGSize { double x0; double x1; })size variant:(BOOL)variant addCircleOverrides:(BOOL)overrides makeRuleBlock:(id /* block */)block;
- (void)_configureOverridesForLayout:(id)layout withNormalSize:(struct CGSize { double x0; double x1; })size editingSize:(struct CGSize { double x0; double x1; })size variant:(BOOL)variant addCircleOverrides:(BOOL)overrides makeRuleBlock:(id /* block */)block;
- (double)_maxTopCornerWidthLeavingRoomForKeylines:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keylines;
- (double)_maxBottomCornerWidthLeavingRoomForKeylines:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keylines;
- (double)_maxBottomCenterWidthLeavingRoomForKeylines:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keylines;
- (double)_maxDateWidthLeavingRoomForKeylines;
- (double)maxDateWidthLeavingRoomForKeylines;
- (double)_maxWidthForKeylineAndPadding;
- (long long)complicationPickerStyleForSlot:(id)slot;
- (void)configureComplicationView:(id)view forSlot:(id)slot;
- (id)keylineViewForComplicationSlot:(id)slot;
- (long long)legacyLayoutOverrideforComplicationType:(unsigned long long)type slot:(id)slot;
- (BOOL)slotSupportsCurvedText:(id)text;
- (struct { long long x0; unsigned long long x1; BOOL x2; struct CGSize { double x0; double x1; } x3; })layoutConfigurationForSlot:(id)slot;
- (void)curvedComplicationCircleRadius:(double *)radius centerAngle:(double *)angle maxAngularWidth:(double *)width circleCenter:(struct CGPoint { double x0; double x1; } *)center interior:(BOOL *)interior forSlot:(id)slot;
- (void)loadLayoutRules;
- (id)newLegacyViewForComplication:(id)complication family:(long long)family slot:(id)slot;
- (long long)_utilitySlotForSlot:(id)slot;
- (id)_slotForUtilitySlot:(long long)slot;
@end

#endif /* NTKUtilityComplicationFactory_h */
