//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HKSleepStageDaySeries_h
#define HKSleepStageDaySeries_h
@import Foundation;

#include "HKGraphSeries.h"
#include "HKAxisLabelDataSource-Protocol.h"
#include "HKFillStyle.h"
#include "HKSleepStageCategoryHighlightable-Protocol.h"

@class NSArray, NSLock, NSNumber, NSString, UIColor, UIFont;

@interface HKSleepStageDaySeries : HKGraphSeries<HKAxisLabelDataSource, HKSleepStageCategoryHighlightable>

@property (nonatomic) struct CGSize { double x0; double x1; } cornerRadiiStorage;
@property (copy, nonatomic) NSArray *sleepStageFillStylesStorage;
@property (copy, nonatomic) HKFillStyle *sleepStageBackgroundFillStyleStorage;
@property (copy, nonatomic) HKFillStyle *sleepStageBackgroundInactiveFillStyleStorage;
@property (copy, nonatomic) NSNumber *highlightedSleepStageStorage;
@property (retain, nonatomic) UIFont *sleepStageLabelFontStorage;
@property (retain, nonatomic) UIColor *sleepStageLabelColorStorage;
@property (readonly, nonatomic) NSLock *seriesMutableStateLock;
@property (nonatomic) struct CGSize { double x0; double x1; } cornerRadii;
@property (copy, nonatomic) NSArray *sleepStageFillStyles;
@property (copy, nonatomic) HKFillStyle *sleepStageBackgroundFillStyle;
@property (copy, nonatomic) HKFillStyle *sleepStageBackgroundInactiveFillStyle;
@property (copy, nonatomic) UIFont *sleepStageLabelFont;
@property (copy, nonatomic) UIColor *sleepStageLabelColor;
@property (copy, nonatomic) NSNumber *highlightedSleepStage;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (BOOL)supportsMultiTouchSelection;
- (long long)overlayType;
- (id)coordinatesForBlock:(id)block blockPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path xAxis:(id)axis yAxis:(id)axis;
- (void)drawSeriesWithBlockCoordinates:(id)coordinates axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomLevelConfiguration:(id)configuration pointTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform renderContext:(struct CGContext *)context secondaryRenderContext:(id)context seriesRenderingDelegate:(id)delegate;
- (void)_drawPaths:(id)paths withFillStyles:(id)styles axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect context:(struct CGContext *)context;
- (void)_drawStagesBackgroundWithRects:(id)rects buildPath:(id)path cornerRadii:(struct CGSize { double x0; double x1; })radii highlightedSleepStage:(id)stage axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect renderContext:(struct CGContext *)context;
- (id)_buildConnectionPathFromBackgroundRects:(id)rects;
- (id)mergeOverlappingRects:(id)rects;
- (id)_buildConnectionFromStageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toStageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)determineTopConnectionPathFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadius:(double)radius;
- (id)determineBottomConnectionPathFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadius:(double)radius;
- (void)_addSomnogramConnectionPath:(id)path toBezierPath:(id)path;
- (void)drawOverlayInContext:(struct CGContext *)context seriesOverlayData:(id)data;
- (void)_drawSleepStageLabels:(struct CGContext *)labels axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_drawLabelAndRuleLineForString:(id)string inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect horizontalOffset:(double)offset verticalOffset:(double)offset axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect context:(struct CGContext *)context;
- (id)_visibleSleepStagesInBlockCoordinates:(id)coordinates pointTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform screenRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)distanceFromPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)xAxisSelectedCoordinate:(double)coordinate blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)xAxisDistanceFromPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)yAxisDifferenceToPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)cacheKeysForModelRange:(id)range zoomScale:(double)scale;
- (id)findAxisLabelsInModelRange:(id)range zoomScale:(double)scale;
- (struct CGPoint { double x0; double x1; })renderPositionForLabelLocation:(id)location rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset constantOffset:(double)offset isHorizontal:(BOOL)horizontal optionalOffset:(struct CGPoint { double x0; double x1; })offset;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_nonSleepStageBarRectForCoordinate:(id)coordinate axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_sleepStageBarRectForCoordinate:(id)coordinate axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_enumerationRectForStage:(long long)stage axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)_yAxisOffsetForCoordinate:(id)coordinate axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_rebuildFillStyles;
@end

#endif /* HKSleepStageDaySeries_h */
