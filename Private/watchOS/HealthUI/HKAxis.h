//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HKAxis_h
#define HKAxis_h
@import Foundation;

#include "HKAxisLabelCache.h"
#include "HKAxisLabelDataSource-Protocol.h"
#include "HKAxisStyle.h"
#include "HKCoordinateTransform.h"
#include "HKValueRange.h"
#include "HKZoomScale-Protocol.h"

@class NSLock, NSMutableArray, NSNumber, NSString;

@interface HKAxis : NSObject<HKAxisLabelDataSource>

@property (readonly, nonatomic) HKAxisLabelCache *axisLabelCache;
@property (readonly, nonatomic) NSLock *axisMutableStateLock;
@property (retain, nonatomic) NSMutableArray *axisAnnotations;
@property (retain, nonatomic) NSMutableArray *axisAnnotationsStorage;
@property (nonatomic) BOOL requiresScalingStorage;
@property (nonatomic) long long axisLabelEndingsStorage;
@property (nonatomic) struct HKLinearTransform { double x0; double x1; } pointTransformStorage;
@property (retain, nonatomic) HKValueRange *axisChartableValueRangeStorage;
@property (readonly, nonatomic) HKAxisStyle *preferredStyle;
@property (readonly, nonatomic) long long maxLabels;
@property (readonly, nonatomic) long long minLabels;
@property (retain, nonatomic) NSNumber *maxLabelWidth;
@property (readonly, nonatomic) HKCoordinateTransform *transform;
@property (readonly, nonatomic) NSObject<HKZoomScale> *zoomScaleEngine;
@property (readonly, weak, nonatomic) NSObject<HKAxisLabelDataSource> *labelDataSource;
@property (readonly, nonatomic) BOOL overrideNoTopBaseline;
@property (readonly, nonatomic) BOOL requiresScaling;
@property (nonatomic) long long axisLabelEndings;
@property (nonatomic) struct HKLinearTransform { double x0; double x1; } pointTransform;
@property (retain, nonatomic) HKValueRange *axisChartableValueRange;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (struct HKAxisMinMaxDefinition { double x0; double x1; })expandByPointsLow:(double)low high:(double)high modelRange:(struct HKAxisMinMaxDefinition { double x0; double x1; })range pointRange:(struct HKAxisMinMaxDefinition { double x0; double x1; })range;
+ (struct HKAxisMinMaxDefinition { double x0; double x1; })contractByPointsLow:(double)low high:(double)high modelRange:(struct HKAxisMinMaxDefinition { double x0; double x1; })range pointRange:(struct HKAxisMinMaxDefinition { double x0; double x1; })range;

/* instance methods */
- (id)initWithConfiguration:(id)configuration;
- (BOOL)isEqual:(id)equal;
- (BOOL)isEqualToAxis:(id)axis;
- (struct HKLinearTransform { double x0; double x1; })pointTransformFittingValueRange:(id)range toChartRange:(struct HKRange { double x0; double x1; })range;
- (struct HKLinearTransform { double x0; double x1; })_pointTransformFromSeriesRanges:(id)ranges linearTransform:(struct HKLinearTransform { double x0; double x1; })transform chartRange:(struct HKRange { double x0; double x1; })range;
- (id)axisLabelsInModelRangeFromCache:(id)cache zoomScale:(double)scale;
- (id)cacheKeysForModelRange:(id)range zoomScale:(double)scale;
- (id)findAxisLabelsInModelRange:(id)range zoomScale:(double)scale;
- (id)adjustValueRangeForLabels:(id)labels;
- (long long)_axisLabelCountWithTextInModelRange:(id)range zoomScale:(double)scale;
- (void)enumerateTickCoordinatesInModelRange:(id)range zoomScale:(double)scale handler:(id /* block */)handler;
- (id)extendModelRangeWithRange:(id)range zoomScale:(double)scale;
- (id)adjustedRangeForFittedRange:(id)range chartRange:(struct HKRange { double x0; double x1; })range;
- (double)_axisOffsetWithStyle:(id)style chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect horizontalAlignmentOut:(long long *)out;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })labelRectWithModelRange:(id)range chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale;
- (void)drawLabelsWithModelRange:(id)range chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset renderView:(id)view maximumLabelSize:(struct CGSize { double x0; double x1; } *)size omitOffscreenLabels:(BOOL)labels;
- (void)drawBaselineForModelRange:(id)range chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset renderView:(id)view;
- (void)drawGridlinesForModelRange:(id)range chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect gridlineRanges:(id)ranges zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset renderView:(id)view blendMode:(int)mode;
- (BOOL)_styleIsHorizontal:(id)horizontal;
- (struct HKRange { double x0; double x1; })_chartRangeForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset;
- (void)_offsetForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect chartRange:(struct HKRange { double x0; double x1; })range zoomScaleOut:(double *)out contentOffsetOut:(struct CGPoint { double x0; double x1; } *)out;
- (id)rangeForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset;
- (void)offsetForValueRange:(id)range chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScaleOut:(double *)out contentOffsetOut:(struct CGPoint { double x0; double x1; } *)out;
- (long long)dateZoomForZoomScale:(double)scale;
- (void)_drawTextForModelRange:(id)range inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset renderView:(id)view style:(id)style maximumLabelSize:(struct CGSize { double x0; double x1; } *)size omitOffscreenLabels:(BOOL)labels;
- (struct CGPoint { double x0; double x1; })renderPositionForLabelLocation:(id)location rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset constantOffset:(double)offset isHorizontal:(BOOL)horizontal optionalOffset:(struct CGPoint { double x0; double x1; })offset;
- (void)_enumerateAxisLabelsForTextInRange:(id)range rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset constantOffset:(double)offset isHorizontal:(BOOL)horizontal optionalOffset:(struct CGPoint { double x0; double x1; })offset gridlineWidth:(double)width usingBlock:(id /* block */)block;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_labelBackgroundRectWithLabels:(id)labels font:(id)font maxAnnotationWidth:(double)width rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect style:(id)style;
- (double)_maximumWidthOfAnnotations:(id)annotations axisStyle:(id)style;
- (void)_drawTextBackgroundWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect style:(id)style renderView:(id)view;
- (double)_axisFillWidthForStyle:(id)style labels:(id)labels font:(id)font;
- (double)_maxLabelWidthFromLabels:(id)labels font:(id)font;
- (double)bottomBaselineYCoordinateForModelRange:(id)range axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale;
- (BOOL)_containsTopBaselineWithModelRange:(id)range zoomScale:(double)scale;
- (double)topBaselineYCoordinateForModelRange:(id)range axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale;
- (id)_baselineForModelRange:(id)range axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset style:(id)style;
- (id)_gridLinesForModelRange:(id)range axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect gridlineRanges:(id)ranges zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset style:(id)style gridLineType:(long long)type;
- (void)_addTickMarksForPosition:(unsigned long long)position axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect modelRange:(id)range zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset toBezierPath:(id)path style:(id)style;
- (void)_renderTickMarksForModelRange:(id)range chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset style:(id)style renderView:(id)view;
- (void)addAxisAnnotation:(id)annotation modelCoordinate:(id)coordinate;
- (long long)axisAnnotationCount;
- (void)clearAnnotations;
- (void)clearCache;
- (void)invalidateAxisLabelCache;
- (double)offsetForLegendView;
@end

#endif /* HKAxis_h */
