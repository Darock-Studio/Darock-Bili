//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HKGraphView_h
#define HKGraphView_h
@import Foundation;

#include "UIView.h"
#include "HKAxis.h"
#include "HKBorderLineView.h"
#include "HKGraphRenderDelegate-Protocol.h"
#include "HKGraphSeriesOverlayDelegate-Protocol.h"
#include "HKGraphTileDrawingDelegate-Protocol.h"
#include "HKGraphViewDelegate-Protocol.h"
#include "HKGraphViewSelectionStyle.h"
#include "HKGraphViewTileThread.h"
#include "HKInteractiveChartRangeProvider-Protocol.h"
#include "HKMultiTouchPressGestureRecognizer.h"
#include "HKMultiTouchPressGestureRecognizerDelegate-Protocol.h"
#include "HKPropertyAnimationApplier.h"
#include "HKScrollPerformanceTestable-Protocol.h"
#include "HKSeriesDelegate-Protocol.h"
#include "HKValueRange.h"
#include "UIScrollViewDelegate-Protocol.h"
#include "_HKGraphViewOverlayView.h"

@class NSArray, NSCalendar, NSMapTable, NSMutableArray, NSMutableDictionary, NSSet, NSString, NSTimer, UIColor, UIImage, UIScrollView, UIView;
@protocol UIView<HKGraphRenderer;

@interface HKGraphView : UIView<UIScrollViewDelegate, HKSeriesDelegate, HKGraphRenderDelegate, HKMultiTouchPressGestureRecognizerDelegate, HKGraphTileDrawingDelegate, HKGraphSeriesOverlayDelegate, HKScrollPerformanceTestable, HKInteractiveChartRangeProvider> {
  /* instance variables */
  NSMutableArray *_seriesGroupRows;
  BOOL _needsUpdateGraphViewConfiguration;
  BOOL _shouldInformDelegateOfUpdates;
  BOOL _shouldListenToScrollViewDelegate;
  UIImage *_topFeatheringImage;
  UIImage *_rightFeatheringImage;
  UIImage *_bottomFeatheringImage;
  UIImage *_leftFeatheringImage;
  UIView<HKGraphRenderer> *_renderView;
  UIScrollView *_scrollView;
  HKBorderLineView *_leftMarginView;
  UIView<HKGraphRenderer> *_yAxisLabelContent;
  double _yAxisLabelMinimumWidth;
  BOOL _subviewsHaveBeenLaidOut;
}

@property (nonatomic) double zoomScale;
@property (nonatomic) struct CGPoint { double x0; double x1; } contentOffset;
@property (nonatomic) BOOL contentOffsetIsSet;
@property (retain, nonatomic) UIView *detailView;
@property (retain, nonatomic) HKValueRange *destinationEffectiveVisibleRangeActive;
@property (retain, nonatomic) NSSet *yAxisAccessoryViews;
@property (nonatomic) long long tileColumns;
@property (nonatomic) double tileWidthInPoints;
@property (nonatomic) long long tileFirstColumn;
@property (nonatomic) long long tileLastColumn;
@property (nonatomic) long long tileColumnHysteresis;
@property (nonatomic) BOOL tilesHidden;
@property (retain, nonatomic) NSMutableDictionary *tilesByColumnNumber;
@property (retain, nonatomic) NSMutableArray *tileQueue;
@property (copy, nonatomic) id /* block */ tileMarkDirtyCompletion;
@property (nonatomic) BOOL tilesTransientDisabled;
@property (nonatomic) BOOL tilesWaitingForInitialRender;
@property (nonatomic) long long tileInitialRedrawCount;
@property (readonly, nonatomic) HKGraphViewTileThread *graphViewTileThread;
@property (nonatomic) double lastSingleSelectionXValue;
@property (retain, nonatomic) _HKGraphViewOverlayView *overlayView;
@property (nonatomic) long long previousOverlayType;
@property (retain, nonatomic) NSMapTable *overlayInteractiveViews;
@property (nonatomic) BOOL measuringStartupTime;
@property (nonatomic) double startTime;
@property (nonatomic) double lastEndTime;
@property (retain, nonatomic) NSTimer *startupTimer;
@property (nonatomic) double firstNonemptyDrawTime;
@property (nonatomic) BOOL measurementStartupAutoscale;
@property (nonatomic) BOOL animationAutoscaleInProgress;
@property (retain, nonatomic) HKPropertyAnimationApplier *animationApplier;
@property (retain, nonatomic) NSMutableDictionary *currentAnimationProperties;
@property (retain, nonatomic) id externalSelectionModelCoordinate;
@property (nonatomic) BOOL externalSelectionScheduled;
@property (nonatomic) double externalSelectionLastLocation;
@property (retain, nonatomic) NSTimer *externalSelectionCancelTimer;
@property (retain, nonatomic) UIColor *capturedTileBackgroundColor;
@property (readonly, nonatomic) NSArray *allSeries;
@property (weak, nonatomic) NSObject<HKGraphViewDelegate> *delegate;
@property (retain, nonatomic) HKAxis *xAxis;
@property (nonatomic) double xAxisSpace;
@property (nonatomic) BOOL disableXAxis;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } axisInset;
@property (copy, nonatomic) UIColor *outlineColor;
@property (copy, nonatomic) UIColor *topMarginColor;
@property (nonatomic) unsigned long long outlineOptions;
@property (nonatomic) unsigned long long featheringOptions;
@property (nonatomic) BOOL disableScrolling;
@property (nonatomic) BOOL disableSelection;
@property (nonatomic) BOOL multiSeriesSelection;
@property (nonatomic) BOOL moveSelectedSeriesToFront;
@property (retain, nonatomic) HKGraphViewSelectionStyle *selectionStyle;
@property (readonly, nonatomic) long long xAxisDateZoom;
@property (readonly, nonatomic) HKValueRange *effectiveAxisRange;
@property (readonly, nonatomic) HKValueRange *actualAxisRange;
@property (retain, nonatomic) HKValueRange *chartableValueRange;
@property (nonatomic) double hardLeftMarginWidth;
@property (nonatomic) double virtualLeftMarginWidth;
@property (nonatomic) double virtualRightMarginWidth;
@property (nonatomic) long long virtualLeftMarginStyle;
@property (nonatomic) long long virtualRightMarginStyle;
@property (readonly, nonatomic) HKValueRange *actualVisibleRange;
@property (readonly, nonatomic) HKValueRange *effectiveVisibleRangeCadence;
@property (readonly, nonatomic) HKValueRange *effectiveVisibleRangeActive;
@property (nonatomic) long long minimumDateZoom;
@property (nonatomic) long long maximumDateZoom;
@property (nonatomic) long long scrollingOptions;
@property (retain, nonatomic) NSCalendar *currentCalendar;
@property (nonatomic) BOOL contentWidthFromTimeScope;
@property (nonatomic) BOOL enableStickySelection;
@property (readonly, nonatomic) HKMultiTouchPressGestureRecognizer *multiTouchGestureRecognizer;
@property (readonly, nonatomic) double yAxisWidth;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } leftMarginViewRect;
@property (nonatomic) BOOL enableZoomInGesture;
@property (readonly, nonatomic) BOOL isScrollViewDecelerating;
@property (nonatomic) BOOL tilingDisabled;
@property (nonatomic) BOOL prefersOpaqueLegends;
@property (nonatomic) BOOL drawsGridlinesPerSeriesGroup;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (double)_modelCoordinateSpanForRange:(id)range axis:(id)axis;
+ (id)_rangeFromModelCoordinateMin:(double)min max:(double)max axis:(id)axis;
+ (BOOL)visibleIntersectionForRange:(id)range visibleRange:(id)range;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (BOOL)_measureStartupFlagFromEnvironment;
- (void)traitCollectionDidChange:(id)change;
- (void)resetAndRedraw;
- (BOOL)_axisRangeIsDateRange;
- (void)_walkAllSeries:(id /* block */)series;
- (BOOL)_needsYAxisUpdateDuringRender;
- (BOOL)_configureYAxisViewIfNeeded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustLeftMarginRectForBaselines:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })baselines;
- (double)_detailViewWidth;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scrollingAreaRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_verticalAxisRect;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_dataAreaInsets;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_dataAreaRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_overlayAreaRect;
- (void)_updateScene;
- (void)_loadScrollView;
- (void)layoutSubviews;
- (void)willMoveToWindow:(id)window;
- (void)_startupTimerCallback:(id)callback;
- (void)_recordLastRenderTime;
- (BOOL)_graphViewIsConfigured;
- (void)_createLegendsIfNecessary;
- (BOOL)_seriesGroupHasLegendEntries:(id)entries;
- (void)_updateLegendForSeriesGroup:(id)group;
- (void)_updateLegendsForAllSeriesGroups;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_currentLegendInsets;
- (void)_createLegendForSeriesGroup:(id)group;
- (void)_layoutLegendsForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_layoutDetailView;
- (id)_graphSeriesForZoom:(long long)zoom seriesGroupRow:(long long)row;
- (void)_shareYAxesForSeriesGroup:(id)group;
- (void)_loadSeriesForZoom:(long long)zoom;
- (void)setNeedsReloadSeries;
- (void)removeSeries;
- (void)invalidateDataSourceCaches;
- (void)_clearRenderViewIfNecessary;
- (void)setRenderView:(id)view;
- (void)setBackgroundColor:(id)color;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)_setVisibleRangesForEffectiveRangeCadence:(id)cadence;
- (void)_updateRangesForEffectiveAxisRange:(id)range effectiveVisibleRangeCadence:(id)cadence effectiveVisibleRangeActive:(id)active;
- (void)_updateGraphViewConfiguration;
- (void)setVirtualLeftMargin:(double)margin;
- (void)setVirtualRightMargin:(double)margin;
- (id)_rangeFromRange:(id)range withStartOfRange:(id)range;
- (BOOL)_setRangesForActiveVisibleRange:(id)range;
- (void)setEffectiveVisibleRangeActive:(id)active animated:(BOOL)animated;
- (BOOL)_compareChartDate:(id)date toDate:(id)date;
- (BOOL)_compareRange:(id)range toRange:(id)range;
- (void)_updateEffectiveAxisRange:(id)range effectiveVisibleRangeCadence:(id)cadence effectiveVisibleRangeActive:(id)active virtualLeftMarginWidth:(double)width virtualRightMarginWidth:(double)width;
- (void)setEffectiveAxisRange:(id)range effectiveVisibleRangeCadence:(id)cadence effectiveVisibleRangeActive:(id)active;
- (id)_actualVisibleRangeFromEffectiveVisibleRange:(id)range dataAreaRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)_effectiveVisibleRangeFromActualVisibleRange:(id)range;
- (id)_findActualAxisRangeFromVisibleRanges;
- (void)seriesDidInvalidatePaths:(id)paths newDataArrived:(BOOL)arrived;
- (void)nonemptyDrawComplete;
- (double)snapScreenCoordinateToXAxisResolution:(double)resolution;
- (BOOL)rangeIsVisible:(id)visible;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_virtualMarginInsets;
- (BOOL)_drawingDuringScrolling;
- (BOOL)_drawingDuringAutoscale;
- (id)_defaultXAxisValueRange;
- (void)_autoScaleXAxis;
- (void)autoscaleYAxesAnimated:(BOOL)animated specificRange:(id)range onlyIfNeeded:(BOOL)needed completion:(id /* block */)completion;
- (BOOL)_initializationPeriodIsActive;
- (id)_autoscaleSeriesOnlyIfNeeded:(BOOL)needed;
- (id)_findAutoscaleSeriesForYAxis:(id)yaxis allAutoscaleSeries:(id)series;
- (BOOL)_autoscaleTransformIsSignificant:(id)significant;
- (BOOL)_seriesRequiresYAutoscale:(id)yautoscale;
- (id)_autoscaleTransformsFromAutoscaleSeriesList:(id)list specificRange:(id)range;
- (BOOL)_allSeriesAreInverted:(id)inverted;
- (id)_propertyAnimationForTransform:(id)transform;
- (void)_actionsBeforeAnimationTransform:(id)transform;
- (void)_actionsAfterAnimationTransform:(id)transform finalVisibleRange:(id)range;
- (void)_autoscaleAnimationStart;
- (void)_autoscaleAnimationEnd;
- (void)_autoscaleAnimationCancelled;
- (id)_insertAutoscaleAnimation:(id)animation;
- (void)_removeAutoscaleAnimationWithName:(id)name cancelled:(BOOL)cancelled completion:(id /* block */)completion;
- (void)_cancelAutoscaleAnimations;
- (long long)resolutionFromTraitCollectionAttributes;
- (long long)_resolutionFromSeries:(id)series;
- (id)_combinedYAxisRangeForAutoscaleSeries:(id)series yAxisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)_inactiveRightAreaForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)_bottomBaselineYValueForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)_topBaselineYValueForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)_gridlineRangesForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_updateAllLegendsWithSelectedValues:(id)values;
- (id)_visibleSeriesForSeriesGroup:(id)group;
- (void)_renderYAxisLabelsInContext:(struct CGContext *)context chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct _HKLocationSpan { double x0; double x1; })_locationSpanForSeriesGroupRow:(long long)row chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_yAxisRectForSeriesGroupRow:(long long)row insetForLegends:(BOOL)legends chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_yAxisRectForSeriesGroupRow:(long long)row chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)_anySeriesWantsInternalLegends:(long long)legends;
- (BOOL)_skipRenderingToView:(id)view yAxisView:(id)view context:(struct CGContext *)context chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)_createRendererSeriesRowFromIndex:(long long)index insetDataArea:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })area drawingToTile:(BOOL)tile;
- (id)_createRendererSeriesConfigurationWithInsetDataArea:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })area drawingToTile:(BOOL)tile;
- (id)_createRendererWithCurrentStateWithChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect contentOffset:(struct CGPoint { double x0; double x1; })offset drawingToTile:(BOOL)tile tileColumn:(long long)column effectiveVisibleRangeCadence:(id)cadence effectiveVisibleRangeActive:(id)active actualVisibleRange:(id)range;
- (void)_performPostAxisUpdates:(long long)updates newXAxisHeight:(double)height;
- (void)_performPostLegendUpdates;
- (void)_performPostLeftMarginUpdates;
- (void)graphRenderer:(id)renderer shouldRenderSceneWithContext:(struct CGContext *)context chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)allSeriesHaveDataAvailable;
- (void)setZoomScale:(double)scale animated:(BOOL)animated;
- (void)setContentOffset:(struct CGPoint { double x0; double x1; })offset animated:(BOOL)animated;
- (BOOL)stillAnimating:(id)animating;
- (void)scrollViewWillBeginDragging:(id)dragging;
- (void)scrollViewDidScroll:(id)scroll;
- (void)scrollViewDidEndDragging:(id)dragging willDecelerate:(BOOL)decelerate;
- (void)_snapXAxisRangeToPreservedRange;
- (void)scrollViewDidEndScrollingAnimation:(id)animation;
- (void)scrollViewDidEndDecelerating:(id)decelerating;
- (void)scrollViewWillEndDragging:(id)dragging withVelocity:(struct CGPoint { double x0; double x1; })velocity targetContentOffset:(inout struct CGPoint { double x0; double x1; } *)offset;
- (void)_reloadViewScope;
- (void)_updateDateZoomIfNecessary;
- (double)_maxTimeThreshold;
- (void)_updateAxisZoomScaleValueRange;
- (double)_maximumZoomScale;
- (double)_contentWidth;
- (void)_updateZoomForParameters;
- (void)_preserveDestinationActiveRange:(id)range;
- (void)_restoreDestinationActiveRange;
- (void)_scrollToCurrentVisibleRangeAnimated:(BOOL)animated;
- (void)_setNeedsUpdateGraphViewConfiguration;
- (void)_updateGraphViewConfigurationIfNecessary;
- (void)_updateScrollViewPropertiesIgnoringScrollViewCallbacks:(id /* block */)callbacks;
- (void)_addTapGestureRecognizerForTapOnView:(id)view;
- (void)_tapOnViewAction:(id)action;
- (void)_addTapGestureRecognizerForTogglingStickyToView:(id)view;
- (void)_toggleStickySelectionAction:(id)action;
- (void)_touchAtPoint:(struct CGPoint { double x0; double x1; })point;
- (long long)_currentSelectionStateForSeriesGroup:(id)group;
- (void)_enumerateSeriesSelectionRegionsForSeriesGroup:(id)group withBlock:(id /* block */)block;
- (id)_closestGraphSeriesForTouchPoint:(struct CGPoint { double x0; double x1; })point seriesGroup:(id)group;
- (void)_addSelectionRecognizerToView:(id)view;
- (void)_removeSelectionRecognizerFromView:(id)view;
- (void)_selectionRecognizerDidUpdate:(id)update;
- (BOOL)_touchesActuallyMoved:(id)moved;
- (id)_closestSeriesToPoint:(struct CGPoint { double x0; double x1; })point allSeries:(id)series;
- (void)gestureWillBeginWithRecognizer:(id)recognizer;
- (struct CGPoint { double x0; double x1; })_touchPointForSeriesGroupIndex:(long long)index originalTouchPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_selectionRecognizerDidBegin:(id)begin;
- (void)_selectionRecognizerDidBeginWithTouchPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_handleStartTouchPoint:(struct CGPoint { double x0; double x1; })point seriesGroupRow:(long long)row;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_xAxisCoordinateTransformWithContentOffset:(struct CGPoint { double x0; double x1; })offset zoomScale:(double)scale chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_xAxisCoordinateTransform;
- (id)_valueForXAxisLocation:(double)location;
- (void)_updateSelectionContextStateWithTouchPoint:(struct CGPoint { double x0; double x1; })point seriesGroup:(id)group;
- (struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; })_closestDataPointPathToPoint:(struct CGPoint { double x0; double x1; })point seriesGroupRow:(long long)row seriesInGroup:(id)group minimumXDistance:(double)xdistance xDistanceOut:(double *)out;
- (struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; })_closestDataPointPathToPoint:(struct CGPoint { double x0; double x1; })point seriesGroupRow:(long long)row minimumXDistance:(double)xdistance xDistanceOut:(double *)out;
- (void)_selectionRecognizerDidMove:(id)move;
- (void)_resetSingleSelectionXValue;
- (BOOL)_selectionContextsNotPreviouslySelected:(id)selected;
- (void)_selectionRecognizerDidMoveWithTouchPoints:(id)points;
- (id)_multiSeriesSelectionContextsWithTouchPoints:(id)points updateViewStates:(BOOL)states;
- (id)_oneSeriesSelectionContextsWithTouchPoints:(id)points updateViewStates:(BOOL)states;
- (id)_newPointSelectionContextsWithTouchPoints:(id)points updateViewStates:(BOOL)states;
- (id)_pointSelectionContextWithPathRange:(struct { struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x0; struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x1; })range touchPoints:(id)points seriesGroupRow:(long long)row seriesInGroup:(id)group;
- (void)_deselectAllSeriesWithAlpha:(double)alpha offScreenIndicatorAlpha:(double)alpha seriesGroup:(id)group;
- (void)_finishSelection;
- (void)_cancelAndFinishSelection;
- (void)_selectionRecognizerDidFinish:(id)finish;
- (void)_moveSeriesToFront:(id)front;
- (void)touchSelectionAtModelX:(id)x;
- (void)_installExternalSelectionEndTimer;
- (void)_installExternalSelectionCancelTimer;
- (void)_invalidateExternalSelectionCancelTimer;
- (void)_endExternalSelectionViaTimer;
- (void)_cancelExternalSelection;
- (void)_scheduleExternalSelectionIfNeeded;
- (void)_scheduleRequiredExternalSelection;
- (void)_scheduleExternalSelectionIfNeededClearingLastLocation;
- (void)_processExternalSelection;
- (BOOL)_stickySelectionActive;
- (void)_deactivateStickySelection;
- (void)_activateStickySelection;
- (void)didMoveToWindow;
- (void)_notifyDidBeginSelection;
- (void)_notifyDidUpdateSelectionWithPointContext:(id)context;
- (void)_notifyDidEndSelection;
- (void)_notifyDateZoomDidChangeFromValue:(long long)value toValue:(long long)value;
- (void)_notifyDelegateOfVisibleValueRange:(id)range changeContext:(long long)context;
- (void)_notifyDelegateOfFinishUserScrolling;
- (void)_notifyDelegateOfSizeChange;
- (void)_notifyDelegateOfYAxisWidth:(double)width toWidth:(double)width;
- (void)_notifyDelegateSeriesUpdate:(id)update newDataArrived:(BOOL)arrived;
- (void)_notifyDelegateOfTapOnYAxis;
- (void)_notifyDidEndExternalSelection;
- (void)_notifyGraphViewRendered;
- (void)testScrollPerformanceWithTestName:(id)name iterations:(int)iterations delta:(int)delta options:(id)options;
- (void)testScrollPerformanceWithTestName:(id)name iterations:(int)iterations delta:(int)delta length:(int)length;
- (id)findVisibleBlockCoordinatesForPrimarySeries;
- (id)primarySeries;
- (void)setPreviousDateZoom:(long long)zoom;
- (void)setIndependentAxes:(id)axes stackOffset:(long long)offset;
- (BOOL)_tilesAreEnabled;
- (BOOL)_tilesConfigurableAfterInitialRender;
- (BOOL)_tilesReconfigurableAfterInitialRender;
- (void)_handleTilesInitialRender;
- (struct CGPoint { double x0; double x1; })_contentOffsetForActualViewRange;
- (void)_reconfigureScrollingTiles;
- (id)_captureColor:(id)color;
- (void)_touchTilesForContentOffset:(struct CGPoint { double x0; double x1; })offset applyHysteresis:(BOOL)hysteresis;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_tileScreenRectForColumn:(long long)column;
- (void)_tileHiddenFlag:(BOOL)flag;
- (void)_markTilesDirtyWithCompletion:(id /* block */)completion;
- (void)_handleMarkDirtyCompletion;
- (void)_hideTilesWithForce;
- (void)_hideTiles;
- (void)_showTiles;
- (void)_shutdownTilingThread;
- (id)createTileRendererWithTileRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect column:(long long)column;
- (void)tileRenderDidFinish;
- (void)enumerateVisibleCoordinatesForSeries:(id)series block:(id /* block */)block;
- (void)_layoutOverlayView;
- (void)overlayNeedsRedisplay;
- (id)_nonOverlappingOverlaySeriesData:(id)data;
- (id)_overlappingOverlaySeriesData:(id)data;
- (long long)_ordinalForOverlayType:(long long)type;
- (long long)_overlayTypeForOverlaySeriesData:(id)data;
- (long long)_overlayEnvironmentType;
- (void)_drawOverlaysIfNeeded:(id)needed;
- (void)_overlayViewsForOverlayData:(id)data overlayView:(id)view;
@end

#endif /* HKGraphView_h */
