//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HKBarSeries_h
#define HKBarSeries_h
@import Foundation;

#include "HKGraphSeries.h"
#include "HKBarSeriesConfiguration.h"
#include "HKFillStyle.h"
#include "HKStrokeStyle.h"

@class NSLock, NSMutableArray;

@interface HKBarSeries : HKGraphSeries

@property (readonly, nonatomic) NSLock *seriesMutableStateLock;
@property (retain, nonatomic) HKBarSeriesConfiguration *defaultConfigurationStorage;
@property (retain, nonatomic) NSMutableArray *overrideConfigurationsStorage;
@property (retain, nonatomic) HKStrokeStyle *unselectedStrokeStyleStorage;
@property (retain, nonatomic) HKStrokeStyle *selectedStrokeStyleStorage;
@property (retain, nonatomic) HKStrokeStyle *tiledStrokeStyleStorage;
@property (nonatomic) struct CGSize { double x0; double x1; } cornerRadiiStorage;
@property (retain, nonatomic) HKBarSeriesConfiguration *defaultConfiguration;
@property (retain, nonatomic) NSMutableArray *overrideConfigurations;
@property (retain, nonatomic) HKStrokeStyle *unselectedStrokeStyle;
@property (retain, nonatomic) HKStrokeStyle *selectedStrokeStyle;
@property (retain, nonatomic) HKStrokeStyle *tiledStrokeStyle;
@property (retain, nonatomic) HKFillStyle *unselectedFillStyle;
@property (retain, nonatomic) HKFillStyle *selectedFillStyle;
@property (retain, nonatomic) HKFillStyle *inactiveFillStyle;
@property (nonatomic) struct CGSize { double x0; double x1; } cornerRadii;

/* class methods */
+ (id)_approximateRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect byRoundingCorners:(unsigned long long)corners cornerRadii:(struct CGSize { double x0; double x1; })radii;
+ (id)barSeriesRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect byRoundingCorners:(unsigned long long)corners cornerRadii:(struct CGSize { double x0; double x1; })radii;
+ (id)barSeriesRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cornerRadius:(double)radius;

/* instance methods */
- (id)init;
- (void)clearCaches;
- (void)drawSeriesWithBlockCoordinates:(id)coordinates axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomLevelConfiguration:(id)configuration pointTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform renderContext:(struct CGContext *)context secondaryRenderContext:(id)context seriesRenderingDelegate:(id)delegate;
- (long long)visibleBarCountWithZoomLevelConfiguration:(id)configuration;
- (double)barWidthForVisibleBarCount:(long long)count axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect minimumSpacing:(double)spacing;
- (void)drawWithBlockCoordinates:(id)coordinates visibleBarCount:(long long)count pointTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform context:(struct CGContext *)context axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect seriesRenderingDelegate:(id)delegate;
- (long long)_configurationIndexForCoordinate:(id)coordinate inConfigurations:(id)configurations;
- (void)_drawConfiguration:(id)configuration fillStyleBezierPaths:(id)paths strokeStyle:(id)style axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect context:(struct CGContext *)context;
- (void)_drawPath:(id)path withFillStyle:(id)style strokeStyle:(id)style axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect context:(struct CGContext *)context;
- (id)coordinatesForBlock:(id)block blockPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path xAxis:(id)axis yAxis:(id)axis;
- (BOOL)supportsMultiTouchSelection;
- (double)distanceFromPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)xAxisDistanceFromPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)yAxisDifferenceToPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)blockCoordinateIsVisibleInsideOfChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect blockCoordinate:(id)coordinate;
- (BOOL)blockCoordinate:(id)coordinate lessThan:(id)than;
- (BOOL)blockCoordinate:(id)coordinate greaterThan:(id)than;
@end

#endif /* HKBarSeries_h */
