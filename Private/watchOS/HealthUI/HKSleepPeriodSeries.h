//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HKSleepPeriodSeries_h
#define HKSleepPeriodSeries_h
@import Foundation;

#include "HKGraphSeries.h"
#include "HKLineSeriesPointMarkerStyle.h"
#include "HKStrokeStyle.h"

@class NSArray, NSLock;

@interface HKSleepPeriodSeries : HKGraphSeries

@property (readonly, nonatomic) NSLock *seriesMutableStateLock;
@property (nonatomic) struct CGSize { double x0; double x1; } cornerRadiiStorage;
@property (copy, nonatomic) HKStrokeStyle *strokeStyleStorage;
@property (copy, nonatomic) HKStrokeStyle *tiledStrokeStyleStorage;
@property (copy, nonatomic) NSArray *defaultFillStylesStorage;
@property (copy, nonatomic) NSArray *highlightedFillStylesStorage;
@property (copy, nonatomic) NSArray *inactiveFillStylesStorage;
@property (copy, nonatomic) HKStrokeStyle *goalLineStrokeStyleStorage;
@property (retain, nonatomic) HKLineSeriesPointMarkerStyle *upperGoalLineMarkerStyleStorage;
@property (retain, nonatomic) HKLineSeriesPointMarkerStyle *lowerGoalLineMarkerStyleStorage;
@property (copy, nonatomic) id /* block */ startOfDayTransformStorage;
@property (nonatomic) struct CGSize { double x0; double x1; } cornerRadii;
@property (copy, nonatomic) HKStrokeStyle *strokeStyle;
@property (copy, nonatomic) HKStrokeStyle *tiledStrokeStyle;
@property (copy, nonatomic) NSArray *defaultFillStyles;
@property (copy, nonatomic) NSArray *highlightedFillStyles;
@property (copy, nonatomic) NSArray *inactiveFillStyles;
@property (copy, nonatomic) HKStrokeStyle *goalLineStrokeStyle;
@property (retain, nonatomic) HKLineSeriesPointMarkerStyle *upperGoalLineMarkerStyle;
@property (retain, nonatomic) HKLineSeriesPointMarkerStyle *lowerGoalLineMarkerStyle;
@property (copy, nonatomic) id /* block */ startOfDayTransform;

/* class methods */
+ (id)_sleepCircleImageWithWidth:(double)width diameter:(double)diameter color:(id)color;
+ (id)asleepImageCompatibleWithFont:(id)font withColor:(id)color;
+ (id)inBedImageCompatibleWithFont:(id)font withColor:(id)color;

/* instance methods */
- (id)init;
- (void)clearCaches;
- (BOOL)shouldInvertAxis;
- (BOOL)supportsMultiTouchSelection;
- (void)drawSeriesWithBlockCoordinates:(id)coordinates axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomLevelConfiguration:(id)configuration pointTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform renderContext:(struct CGContext *)context secondaryRenderContext:(id)context seriesRenderingDelegate:(id)delegate;
- (long long)visibleBarCountWithZoomLevelConfiguration:(id)configuration;
- (double)barWidthForVisibleBarCount:(long long)count axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect minimumSpacing:(double)spacing;
- (void)_drawWithBlockCoordinates:(id)coordinates visibleBarCount:(long long)count pointTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform context:(struct CGContext *)context axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect axisResolution:(double)resolution seriesRenderingDelegate:(id)delegate;
- (void)addGoalLinePathsToCoordinate:(id)coordinate upperGoalLinePath:(id)path upperGoalMarkerPoints:(id)points previousUpperGoalLinePoint:(id)point lowerGoalLinePath:(id)path lowerGoalMarkerPoints:(id)points previousLowerGoalLinePoint:(id)point axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)drawGoalLinePath:(id)path goalMarkerPoints:(id)points markerImage:(id)image context:(struct CGContext *)context;
- (void)drawPaths:(id)paths withFillStyles:(id)styles strokeStyle:(id)style axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect context:(struct CGContext *)context;
- (id)coordinatesForBlock:(id)block blockPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path xAxis:(id)axis yAxis:(id)axis;
- (double)distanceFromPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)xAxisDistanceFromPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)yAxisDifferenceToPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)_assertCoordinateCompatibility:(id)compatibility;
- (BOOL)blockCoordinateIsVisibleInsideOfChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect blockCoordinate:(id)coordinate;
- (double)_minimumYForCoordinate:(id)coordinate;
- (double)_maximumYForCoordinate:(id)coordinate;
- (BOOL)blockCoordinate:(id)coordinate lessThan:(id)than;
- (BOOL)blockCoordinate:(id)coordinate greaterThan:(id)than;
- (id)marginsForYAxis:(id)yaxis xAxisRange:(id)range zoomLevel:(long long)level chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)addAnnotationForValue:(double)value axisAnnotationDelegate:(id)delegate;
- (id)_stringFromTimeSinceNoon:(id)noon;
- (id)_attributedAxisString:(id)string;
@end

#endif /* HKSleepPeriodSeries_h */
