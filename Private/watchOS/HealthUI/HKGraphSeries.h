//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HKGraphSeries_h
#define HKGraphSeries_h
@import Foundation;

#include "HKAxis.h"
#include "HKChartCachePriorityDelegate-Protocol.h"
#include "HKGraphSeriesAxisScalingRule-Protocol.h"
#include "HKGraphSeriesDataSource.h"
#include "HKGraphSeriesDataSourceDelegate-Protocol.h"
#include "HKSeriesDelegate-Protocol.h"
#include "HKValueRange.h"

@class NSArray, NSLock, NSMutableDictionary, NSString, NSUUID, UIColor;

@interface HKGraphSeries : NSObject<HKGraphSeriesDataSourceDelegate, HKChartCachePriorityDelegate>

@property (readonly, nonatomic) NSLock *seriesMutableStateLock;
@property (readonly, nonatomic) HKGraphSeriesDataSource *dataSourceStorage;
@property (readonly, nonatomic) BOOL adjustYAxisForLabelsStorage;
@property (readonly, nonatomic) id seriesDataSourceContextStorage;
@property (readonly, nonatomic) BOOL isCriticalForAutoscaleStorage;
@property (readonly, nonatomic) BOOL wantsRoundingDuringYRangeExpansionStorage;
@property (readonly, nonatomic) NSObject<HKGraphSeriesAxisScalingRule> *axisScalingRuleStorage;
@property (readonly, nonatomic) UIColor *offScreenIndicatorColorStorage;
@property (readonly, nonatomic) BOOL invertYAxisStorage;
@property (readonly, nonatomic) HKAxis *yAxisStorage;
@property (readonly, weak, nonatomic) NSObject<HKSeriesDelegate> *delegateStorage;
@property (readonly, nonatomic) NSArray *titleLegendEntriesStorage;
@property (readonly, nonatomic) NSArray *detailLegendEntriesStorage;
@property (readonly, nonatomic) BOOL drawLegendInsideSeriesStorage;
@property (readonly, nonatomic) double alphaStorage;
@property (readonly, nonatomic) double offscreenIndicatorAlphaStorage;
@property (readonly, nonatomic) BOOL allowsSelectionStorage;
@property (readonly, nonatomic) struct { struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x0; struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x1; } selectedPathRangeStorage;
@property (readonly, nonatomic) HKValueRange *closestXCoordinateRangeStorage;
@property (readonly, nonatomic) HKValueRange *visibleValueRangeStorage;
@property (readonly, nonatomic) BOOL internalDirtyFlag;
@property (retain, nonatomic) NSMutableDictionary *cachedCoordinateListsByBlockPath;
@property (retain, nonatomic) NSMutableDictionary *cachedDataBlocksByBlockPath;
@property (retain, nonatomic) HKGraphSeriesDataSource *dataSource;
@property (nonatomic) BOOL adjustYAxisForLabels;
@property (retain, nonatomic) id seriesDataSourceContext;
@property (nonatomic) BOOL isCriticalForAutoscale;
@property (nonatomic) BOOL wantsRoundingDuringYRangeExpansion;
@property (retain, nonatomic) NSObject<HKGraphSeriesAxisScalingRule> *axisScalingRule;
@property (retain, nonatomic) UIColor *offScreenIndicatorColor;
@property (nonatomic) BOOL invertYAxis;
@property (readonly, nonatomic) NSUUID *UUID;
@property (retain, nonatomic) HKAxis *yAxis;
@property (weak, nonatomic) NSObject<HKSeriesDelegate> *delegate;
@property (retain, nonatomic) NSArray *titleLegendEntries;
@property (retain, nonatomic) NSArray *detailLegendEntries;
@property (nonatomic) BOOL drawLegendInsideSeries;
@property (nonatomic) double alpha;
@property (nonatomic) double offscreenIndicatorAlpha;
@property (nonatomic) BOOL allowsSelection;
@property (readonly, nonatomic) HKValueRange *visibleValueRange;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)drawFilledMarkerInContext:(struct CGContext *)context color:(struct CGColor *)color x:(double)x y:(double)y radius:(double)radius;
+ (void)drawInnerDotMarkerInContext:(struct CGContext *)context outColor:(struct CGColor *)color inColor:(struct CGColor *)color x:(double)x y:(double)y radius:(double)radius;

/* instance methods */
- (id)init;
- (void)dealloc;
- (struct { struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x0; struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x1; })selectedPathRange;
- (void)setSelectedPathRange:(struct { struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x0; struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x1; })range;
- (id)closestXCoordinateRange;
- (void)setClosestXCoordinateRange:(id)range;
- (BOOL)shouldInvertAxis;
- (void)updateForAutoscale:(id)autoscale;
- (id)_expandYRange:(id)yrange withXRange:(id)xrange dateZoom:(long long)zoom resolution:(long long)resolution chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)hasAnyDataLoadedInXAxisRange:(id)range dateZoom:(long long)zoom resolution:(long long)resolution;
- (long long)resolutionForTimeScope:(long long)scope traitResolution:(long long)resolution;
- (id)valueRangeForYAxisWithXAxisRange:(id)range dateZoom:(long long)zoom resolution:(long long)resolution chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (id)_clipYAxisValueRangeIfNecessary:(id)necessary;
- (double)distanceFromPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)xAxisDistanceFromPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)yAxisDifferenceToPoint:(struct CGPoint { double x0; double x1; })point blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (double)xAxisSelectedCoordinate:(double)coordinate blockCoordinate:(id)coordinate chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)blockCoordinateIsVisibleInsideOfChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect blockCoordinate:(id)coordinate;
- (BOOL)blockCoordinate:(id)coordinate lessThan:(id)than;
- (BOOL)blockCoordinate:(id)coordinate greaterThan:(id)than;
- (id)seriesCoordinatesWithXAxis:(id)xaxis chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomScale:(double)scale contentOffset:(struct CGPoint { double x0; double x1; })offset resolution:(long long)resolution;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })coordinateTransformFromXAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)drawWithChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect seriesCoordinates:(id)coordinates zoomLevelConfiguration:(id)configuration coordinateTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform inContext:(struct CGContext *)context secondaryRenderContext:(id)context seriesRenderingDelegate:(id)delegate;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })coordinateTransformForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (BOOL)containsCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect xAxis:(id)axis zoomScale:(double)scale resolution:(long long)resolution contentOffset:(struct CGPoint { double x0; double x1; })offset xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)enumerateCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect xAxis:(id)axis zoomScale:(double)scale resolution:(long long)resolution contentOffset:(struct CGPoint { double x0; double x1; })offset xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform roundToViewScale:(BOOL)scale exclusionOptions:(long long)options block:(id /* block */)block;
- (void)dataSourceDidUpdateCache:(id)cache;
- (BOOL)_setInternalDirtyFlag;
- (void)_clearInternalDirtyFlag;
- (BOOL)_checkInternalDirtyFlag;
- (void)_setDirtyWithNewData:(BOOL)data;
- (id)_visibleXValueRangeWithAxis:(id)axis chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect contentOffset:(struct CGPoint { double x0; double x1; })offset zoomScale:(double)scale;
- (id)_coordinateListsForGeneratorWithXAxis:(id)xaxis zoomScale:(double)scale chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect contentOffset:(struct CGPoint { double x0; double x1; })offset resolution:(long long)resolution;
- (void)_enumeratePathIndexesInValueRange:(id)range zoomLevel:(long long)level resolution:(long long)resolution block:(id /* block */)block;
- (id)_coordinateListsWithXValueRange:(id)range xAxis:(id)axis zoomLevel:(long long)level resolution:(long long)resolution;
- (id)_cachedCoordinatesForBlockPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path;
- (void)_cacheCoordinates:(id)coordinates forBlockPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path;
- (id)_coordinatesForBlockPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path xAxis:(id)axis;
- (id)_dataBlockForBlockPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path;
- (id)_getBlockFromDataSource:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })source;
- (void)_requestDataSourceBlocksFromPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path toPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path;
- (unsigned long long)_mainThreadJoinTimeout;
- (BOOL)isRangeHighPriority:(id)priority;
- (void)clearCaches;
- (void)drawSeriesWithBlockCoordinates:(id)coordinates axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect zoomLevelConfiguration:(id)configuration pointTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform renderContext:(struct CGContext *)context secondaryRenderContext:(id)context seriesRenderingDelegate:(id)delegate;
- (id)coordinatesForBlock:(id)block blockPath:(struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; })path xAxis:(id)axis yAxis:(id)axis;
- (BOOL)supportsMultiTouchSelection;
- (id)marginsForYAxis:(id)yaxis xAxisRange:(id)range zoomLevel:(long long)level chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)updateLegendsForTimeScope:(long long)scope range:(id)range drawingDuringScrolling:(BOOL)scrolling;
- (void)enumerateChartPointsInRange:(id)range zoomLevel:(long long)level resolution:(long long)resolution block:(id /* block */)block;
- (long long)overlayType;
- (id)overlayIdentifier;
- (void)drawOverlayInContext:(struct CGContext *)context seriesOverlayData:(id)data;
- (id)overlayInteractiveViewsWithDelegate:(id)delegate;
- (void)layoutOverlayInteractiveViews:(id)views seriesOverlayData:(id)data overlayRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)isHighlighted;
- (void)selectPathsinPathRange:(struct { struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x0; struct { struct HKGraphSeriesDataBlockPath { long long x0; long long x1; long long x2; } x0; long long x1; } x1; })range coordinateRange:(id)range;
- (void)deselectPath;
- (double)distanceFromTouchPoint:(struct CGPoint { double x0; double x1; })point inChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect xAxis:(id)axis zoomScale:(double)scale resolution:(long long)resolution contentOffset:(struct CGPoint { double x0; double x1; })offset xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (id)findVisibleBlockCoordinatesForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect xAxis:(id)axis zoomScale:(double)scale resolution:(long long)resolution contentOffset:(struct CGPoint { double x0; double x1; })offset xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (BOOL)untransformedChartPointsForTimeScope:(long long)scope resolution:(long long)resolution range:(id)range completion:(id /* block */)completion;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forFont:(id)font;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })backgroundRectFromStringRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forFont:(id)font;
@end

#endif /* HKGraphSeries_h */
