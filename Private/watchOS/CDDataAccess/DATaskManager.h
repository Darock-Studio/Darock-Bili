//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1004.0.0.0.0
//
#ifndef DATaskManager_h
#define DATaskManager_h
@import Foundation;

#include "DAAccount.h"
#include "DAActivity.h"
#include "DATransaction.h"

@class NSArray, NSMutableArray, NSMutableSet, NSString, NSTimer;
@protocol DATask;

@interface DATaskManager : NSObject {
  /* instance variables */
  DATransaction *_transaction;
  DAActivity *_daActivity;
}

@property (retain, nonatomic) NSMutableArray *queuedExclusiveTasks;
@property (retain, nonatomic) NSObject<DATask> *activeExclusiveTask;
@property (retain, nonatomic) NSMutableSet *independentTasks;
@property (retain, nonatomic) NSMutableSet *heldIndependentTasks;
@property (retain, nonatomic) NSMutableSet *modalHeldIndependentTasks;
@property (retain, nonatomic) NSMutableArray *mQueuedTasks;
@property (retain, nonatomic) NSObject<DATask> *modalHeldActiveQueuedTask;
@property (retain, nonatomic) NSObject<DATask> *activeQueuedTask;
@property (retain, nonatomic) NSMutableArray *queuedModalTasks;
@property (retain, nonatomic) NSObject<DATask> *activeModalTask;
@property (nonatomic) int state;
@property (retain, nonatomic) NSTimer *managerIdleTimer;
@property (retain, nonatomic) NSTimer *userInitiatedSyncTimer;
@property (retain, nonatomic) NSTimer *xpcTransactionTimer;
@property (weak, nonatomic) DAAccount *account;
@property (readonly, nonatomic) NSArray *queuedTasks;
@property (readonly, nonatomic) NSArray *allTasks;
@property (copy, nonatomic) NSString *powerAssertionGroupID;

/* instance methods */
- (id)initWithAccount:(id)account;
- (id)init;
- (void)dealloc;
- (void)_populateVersionDescriptions;
- (id)_version;
- (BOOL)_useFakeDescriptions;
- (id)deviceType;
- (id)userAgent;
- (id)user;
- (long long)port;
- (id)server;
- (id)password;
- (id)OAuth2Token;
- (BOOL)useSSL;
- (id)identityPersist;
- (id)accountID;
- (id)accountPersistentUUID;
- (BOOL)isShutdown;
- (void)submitExclusiveTask:(id)task;
- (void)submitExclusiveTask:(id)task toFrontOfQueue:(BOOL)queue;
- (void)submitIndependentTask:(id)task;
- (void)submitQueuedTask:(id)task;
- (void)cancelTask:(id)task withUnderlyingError:(id)error;
- (void)cancelTask:(id)task;
- (void)cancelAllTasks;
- (void)shutdown;
- (void)cancelTasksDueToOnPowerMode;
- (id)stateString;
- (void)_useOpportunisticSocketsAgain;
- (void)_clearUserInitiatedSyncTimer;
- (void)_endXpcTransaction;
- (void)_logSyncEnd;
- (BOOL)_taskForcesNetworking:(id)networking;
- (BOOL)_taskInQueueForcesNetworkConnection:(id)connection;
- (BOOL)_hasTasksForcingNetworkConnection;
- (BOOL)_hasTasksIndicatingARunningSync;
- (void)taskDidFinish:(id)finish;
- (void)taskRequestModal:(id)modal;
- (void)taskEndModal:(id)modal;
- (BOOL)taskIsModal:(id)modal;
- (BOOL)shouldCancelTaskDueToOnPowerFetchMode;
- (void)_performTask:(id)task;
- (void)_requestCancelTasksWithReason:(int)reason;
- (void)_startModal:(id)modal;
- (void)_reactivateHeldTasks;
- (void)_makeStateTransition;
- (void)_scheduleSelector:(SEL)selector withArgument:(id)argument;
- (void)_schedulePerformTask:(id)task;
- (void)_scheduleStartModal:(id)modal;
- (void)_cancelTasksWithReason:(int)reason;
- (void)_retainPowerAssertionForTask:(id)task;
- (void)_releasePowerAssertionForTask:(id)task;
- (void)taskManagerDidAddTask:(id)task;
- (void)taskManagerWillRemoveTask:(id)task;
@end

#endif /* DATaskManager_h */
