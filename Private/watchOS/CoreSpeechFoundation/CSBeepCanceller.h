//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSBeepCanceller_h
#define CSBeepCanceller_h
@import Foundation;

@class NSDictionary;
@protocol CSBeepCancellerDelegate, OS_dispatch_queue, {unique_ptr<BatchBeepCanceller, std::default_delete<BatchBeepCanceller>>="__ptr_"{__compressed_pair<BatchBeepCanceller *, std::default_delete<BatchBeepCanceller>>="__value_"^{BatchBeepCanceller}}}, {vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}}, {vector<short, std::allocator<short>>="__begin_"^s"__end_"^s"__end_cap_"{__compressed_pair<short *, std::allocator<short>>="__value_"^s}};

@interface CSBeepCanceller : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  struct unique_ptr<BatchBeepCanceller, std::default_delete<BatchBeepCanceller>> { struct __compressed_pair<BatchBeepCanceller *, std::default_delete<BatchBeepCanceller>> { struct BatchBeepCanceller *__value_; } __ptr_; } _beepCanceller;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _beepFloatVec;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _floatBuffer;
  struct vector<short, std::allocator<short>> { short *__begin_; short *__end_; struct __compressed_pair<short *, std::allocator<short>> { short *__value_; } __end_cap_; } _shortBuffer;
  unsigned long long _numTotalInputSamples;
  unsigned long long _numTotalOutputSamples;
}

@property (weak, nonatomic) NSObject<CSBeepCancellerDelegate> *delegate;
@property (readonly, nonatomic) NSDictionary *metrics;

/* instance methods */
- (id)init;
- (void)cancelBeepFromSamples:(id)samples timestamp:(unsigned long long)timestamp;
- (void)willBeep;
- (void)reset;
- (void)flush;
@end

#endif /* CSBeepCanceller_h */
