//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.21.3.0.0
//
#ifndef CSUtils_h
#define CSUtils_h
@import Foundation;

@interface CSUtils : NSObject
/* class methods */
+ (unsigned int)getNumElementInBitset:(unsigned long long)bitset;
+ (void)iterateBitset:(unsigned long long)bitset block:(id /* block */)block;
+ (id)_sharedDisposeLoggingQueue;
+ (void)removeLogFilesInDirectory:(id)directory matchingPattern:(id)pattern beforeDays:(float)days;
+ (void)clearLogFilesInDirectory:(id)directory matchingPattern:(id)pattern exceedNumber:(unsigned long long)number;
+ (id)loggingFilePathWithDirectory:(id)directory token:(id)token postfix:(id)postfix;
+ (void)removeDirectory:(id)directory;
+ (BOOL)_createLoggingDirectoryIfNeeded:(id)needed;
+ (id)_timeStampString;
+ (void)URLsInDirectory:(id)directory matchingPattern:(id)pattern completion:(id /* block */)completion;
+ (void)_sortedURLsInDirectory:(id)directory matchingPattern:(id)pattern completion:(id /* block */)completion;
+ (id)_contentsOfDirectoryAtURL:(id)url matchingPattern:(id)pattern includingPropertiesForKeys:(id)keys error:(id *)error;
+ (void)purgeFilesWithExtensionInDirectory:(id)directory extension:(id)extension withFileToKep:(id)kep;
+ (id)readValuesFromJsonFile:(id)file keyword:(id)keyword;
+ (id)_readValuesInNestedDictionary:(id)dictionary keyword:(id)keyword depth:(long long)depth limitedDepth:(long long)depth;
+ (BOOL)isHFPWithRecordRoute:(id)route;
+ (BOOL)isHeadphoneDeviceWithRecordRoute:(id)route playbackRoute:(id)route;
+ (BOOL)isBluetoothAudioDeviceConnected;
+ (BOOL)isBluetoothVehicleOutput;
+ (BOOL)isBuiltInRouteWithRecordRoute:(id)route playbackRoute:(id)route;
+ (BOOL)isBuiltInRecordRoute:(id)route;
+ (id)audioPortSubtypeAsString:(unsigned int)string;
+ (BOOL)isDoAPAudioRouteWithRecordRoute:(id)route;
+ (BOOL)isJarvisAudioRouteWithRecordRoute:(id)route;
+ (BOOL)isOutOfBandAudioRouteWithRecordRoute:(id)route;
+ (unsigned long long)fetchHypotheticalRouteTypeFromAudioSessionId:(unsigned int)id;
+ (unsigned long long)fetchHypotheticalRouteType;
+ (BOOL)checkEntitlementForToken:(struct { unsigned int x0[8] })token withEntitlement:(id)entitlement;
+ (struct { unsigned int x0[8] })getTokenFromDictionary:(id)dictionary withTokenKey:(id)key;
+ (id)auditTokenToString:(struct { unsigned int x0[8] })string;
+ (BOOL)isDarwinOS;
+ (BOOL)isLocalVoiceTriggerAvailable;
+ (BOOL)supportContinuousVoiceTrigger;
+ (BOOL)supportKeywordDetector;
+ (BOOL)supportPremiumAssets;
+ (BOOL)supportOpportunisticZLL;
+ (BOOL)supportSelfTriggerSuppression:(unsigned long long)suppression refChannelIdx:(unsigned long long)idx;
+ (BOOL)supportSelfTriggerSuppressionWatch;
+ (BOOL)supportCSTwoShotDecision;
+ (BOOL)supportHybridEndpointer;
+ (BOOL)supportEndpointerWhileHostAsleep;
+ (BOOL)supportSmartVolume;
+ (BOOL)supportSAT;
+ (BOOL)supportTTS;
+ (BOOL)supportRaiseToSpeak;
+ (BOOL)supportCompactPlus;
+ (BOOL)supportPremiumWatchAssets;
+ (BOOL)isIOSDeviceSupportingBargeIn;
+ (BOOL)supportAdBlocker;
+ (BOOL)supportContinuousAudioFingerprint;
+ (BOOL)supportPremiumModel;
+ (BOOL)supportPhatic;
+ (BOOL)shouldDelayTwoShotFeedbackForMyriadDecision;
+ (BOOL)supportSessionActivateDelay;
+ (BOOL)supportLanguageDetector;
+ (BOOL)shouldDownloadVTAssetsOnDaemon;
+ (BOOL)supportLazySessionActivation;
+ (BOOL)supportMyriadLightHouse;
+ (BOOL)supportAcousticProgressiveChecker;
+ (BOOL)hasRemoteCoreSpeech;
+ (BOOL)supportHearstVoiceTrigger;
+ (BOOL)supportJarvisVoiceTrigger;
+ (BOOL)supportRemoraVoiceTrigger;
+ (BOOL)supportVoiceTriggerChannelSelection;
+ (BOOL)supportHomeKitAccessory;
+ (BOOL)supportBluetoothDeviceVoiceTrigger;
+ (BOOL)supportRemoteDarwinVoiceTrigger;
+ (BOOL)shouldDeinterleaveAudioOnCS;
+ (BOOL)supportCircularBuffer;
+ (BOOL)supportBeepCanceller:(unsigned long long)canceller;
+ (BOOL)supportZeroFilter:(unsigned long long)filter;
+ (BOOL)supportsDispatchWorkloop;
+ (id)rootQueueWithFixedPriority:(int)priority;
+ (id)dispatchWorkloopWithWithQOS:(unsigned int)qos name:(id)name fixedPriority:(int)priority;
+ (id)getSerialQueueWithQOS:(unsigned int)qos name:(id)name fixedPriority:(unsigned char)priority;
+ (id)getSerialQueue:(id)queue qualityOfService:(unsigned int)service;
+ (id)getSerialQueue:(id)queue withQualityOfService:(unsigned int)service andTargetQueue:(id)queue;
+ (id)deviceProductType;
+ (id)deviceProductVersion;
+ (id)deviceIdentifier;
+ (double)systemUpTime;
+ (id)deviceUserAssignedName;
+ (id)deviceBuildVersion;
+ (id)deviceHwRevision;
+ (id)timeStampWithSaltGrain;
+ (BOOL)isBridgeOS;
+ (BOOL)supportsSpeakerRecognitionAssets;
+ (BOOL)supportsSiriLiminal;
+ (BOOL)supportNonInterruptibleSiri;
+ (BOOL)supportHandsFree;
+ (BOOL)supportsVoiceTriggerFides;
+ (BOOL)supportsANE;
+ (BOOL)supportsUnderstandingOnDevice;
+ (BOOL)supportsHybridUnderstandingOnDevice;
+ (BOOL)supportsDictationOnDevice;
+ (BOOL)supportsSpeechRecognitionOnDevice;
+ (BOOL)isAttentiveSiriEnabled;
+ (BOOL)isContinuousConversationSupported;
+ (BOOL)isCarplayWithFlexibleFollowupEnabled;
+ (BOOL)isMedocFeatureEnabled;
+ (BOOL)isFlexibleEndpointingEnabled;
+ (BOOL)deviceRequirePowerAssertionHeld;
+ (BOOL)deviceRequirePreventStandbyAssertion;
+ (long long)processIdentifier;
+ (BOOL)supportsEndpointingOnATV;
+ (BOOL)supportHangUp;
+ (BOOL)supportTrialMitigationAssets;
+ (BOOL)supportRingtoneA2DP;
+ (BOOL)shouldBlockVoiceTriggerWhenOtherAppRecording;
+ (BOOL)supportMph;
+ (BOOL)supportMphAssets;
+ (BOOL)isM9Device;
+ (BOOL)supportsMphForLanguageCode:(id)code;
+ (BOOL)supportsMagusForLanguageCode:(id)code;
+ (BOOL)supportAudioTappingSelfTrigger;
+ (BOOL)supportTelephonyAudioTap;
+ (unsigned long long)horsemanDeviceType;
+ (id)getResourcePathInSystemDomainMaskByAppending:(id)appending;
+ (id)getResourcePathInSystemDomainMaskFromRootPathByAppending:(id)appending;
+ (BOOL)allowExtendedRingBufferSize;
+ (BOOL)platformSupportsImplicitUttAddition;
+ (BOOL)supportRelayCall;
+ (BOOL)supportTCU;
+ (BOOL)supportStateFeedback;
+ (BOOL)supportMedocAnnounce;
+ (BOOL)supportVoiceID;
+ (BOOL)supportEarconRemoval;
+ (void)withElapsedTimeLogging:(id)logging execute:(id /* block */)execute;
+ (BOOL)isASRViaSpeechAPIEnabled;
+ (void *)mmapWithFile:(id)file mappedSizeOut:(id *)out;
+ (BOOL)readOptimizationMadviseWithVaddr:(void *)vaddr mmapedSize:(unsigned long long)size preLoadChunkSize:(unsigned long long)size;
@end

#endif /* CSUtils_h */
