//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLSSessionService_h
#define CSLSSessionService_h
@import Foundation;

#include "CSLSSessionServiceClientInterface-Protocol.h"
#include "CSLSSessionServiceInterface-Protocol.h"
#include "CSLSXPCService.h"
#include "CSLSXPCServiceDelegate-Protocol.h"

@class NSMutableDictionary, NSString;
@protocol OS_os_transaction;

@interface CSLSSessionService : NSObject<CSLSSessionServiceClientInterface, CSLSXPCServiceDelegate, CSLSSessionServiceInterface> {
  /* instance variables */
  NSMutableDictionary *_activeSessions;
  NSMutableDictionary *_scheduledSessions;
  NSMutableDictionary *_ownedSessions;
  NSMutableDictionary *_serviceObserversPerAppBundleID;
  NSMutableDictionary *_sessionObserversBySessionType;
  CSLSXPCService *_sessionXPCService;
  struct os_unfair_recursive_lock_s { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } ourl_lock; unsigned int ourl_count; } _recursiveLock;
  NSObject<OS_os_transaction> *_ownedSessionsTransaction;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedInstance;
+ (id)shared;

/* instance methods */
- (id)init;
- (void)_withRecursiveLock:(id /* block */)lock;
- (void)handleInvalidation:(id)invalidation;
- (void)handleInterruption:(id)interruption;
- (void)connect:(id)connect;
- (void)restartSession:(id)session completion:(id /* block */)completion;
- (void)startSession:(id)session completion:(id /* block */)completion;
- (void)startSession:(id)session completionWithExpirationDate:(id /* block */)date;
- (void)_sessionEnded:(id)ended error:(id)error;
- (void)endSession:(id)session completion:(id /* block */)completion;
- (void)endSession:(id)session options:(id)options completion:(id /* block */)completion;
- (void)activateAppForSession:(id)session completion:(id /* block */)completion;
- (void)scheduleSession:(id)session startDate:(id)date options:(unsigned long long)options completion:(id /* block */)completion;
- (void)cancelScheduledSession:(id)session completion:(id /* block */)completion;
- (id)replaceLocalRunningSessions:(id)sessions;
- (void)fetchAllRunningSessionsOfType:(long long)type completion:(id /* block */)completion;
- (void)existingRunningSessions:(id /* block */)sessions;
- (void)existingRunningSessionsForBundleID:(id)id completion:(id /* block */)completion;
- (void)existingScheduledSessions:(id /* block */)sessions;
- (void)existingScheduledSessionsForBundleID:(id)id completion:(id /* block */)completion;
- (void)addSessionServiceObserver:(id)observer bundleID:(id)id completion:(id /* block */)completion;
- (void)_addSessionServiceObserver:(id)observer bundleID:(id)id completion:(id /* block */)completion;
- (void)removeSessionServiceObserver:(id)observer bundleID:(id)id completion:(id /* block */)completion;
- (void)addSessionTypeObserver:(id)observer type:(long long)type completion:(id /* block */)completion;
- (void)_addSessionTypeObserver:(id)observer type:(long long)type completion:(id /* block */)completion;
- (void)_addSessionTypeObserver:(id)observer type:(long long)type;
- (void)removeSessionTypeObserver:(id)observer type:(long long)type completion:(id /* block */)completion;
- (void)_stopObservingSessionType:(long long)type completion:(id /* block */)completion;
- (void)addSessionObserver:(id)observer forTypes:(id)types completion:(id /* block */)completion;
- (void)removeSessionObserver:(id)observer forTypes:(id)types completion:(id /* block */)completion;
- (void)defaultSession:(id /* block */)session;
- (void)requestAutoLaunchStatusForSessionType:(long long)type completion:(id /* block */)completion;
- (void)fetchStickyCapableApps:(id /* block */)apps;
- (void)takeSessionSuppressionAssertion:(id /* block */)assertion;
- (void)releaseSessionSuppressionAssertion:(id /* block */)assertion;
- (void)notifyObserversForPreviousActiveSessions:(id)sessions xpcService:(id)service;
- (void)pauseSession:(id)session completion:(id /* block */)completion;
- (void)resumeSession:(id)session completion:(id /* block */)completion;
- (id)_observersForSession:(id)session mask:(unsigned long long)mask;
- (void)_sessionEnded:(id)ended uuid:(id)uuid bundleID:(id)id startWasScheduled:(BOOL)scheduled observers:(id)observers error:(id)error completion:(id /* block */)completion;
- (id)_findSession:(id)session;
- (void)sessionWithUUIDEnded:(id)uuidended bundleID:(id)id startWasScheduled:(BOOL)scheduled error:(id)error completion:(id /* block */)completion;
- (void)_addActiveSession:(id)session selfStart:(BOOL)start;
- (void)sessionStarted:(id)started error:(id)error completion:(id /* block */)completion;
- (void)sessionWithUUIDPaused:(id)uuidpaused error:(id)error completion:(id /* block */)completion;
- (void)sessionWithUUIDResumed:(id)uuidresumed error:(id)error completion:(id /* block */)completion;
- (id)appBundleIDForCurrentProcess;
@end

#endif /* CSLSSessionService_h */
