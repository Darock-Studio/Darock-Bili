//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1161.4.0.0.0
//
#ifndef NPKGizmoDatabase_h
#define NPKGizmoDatabase_h
@import Foundation;

@class BOOL *, NSArray, NSData, NSDictionary, NSMutableArray, NSMutableDictionary;
@protocol OS_dispatch_queue;

@interface NPKGizmoDatabase : NSObject {
  /* instance variables */
  struct sqlite3_stmt * _selectDeletePendingStatement;
  struct sqlite3_stmt * _insertTransactionStatement;
  struct sqlite3_stmt * _removeTransactionStatement;
  struct sqlite3_stmt * _removeTransactionWithServiceIdentifier;
  struct sqlite3_stmt * _selectTransactionsStatement;
  struct sqlite3_stmt * _selectTransactionsStatementWithSource;
  struct sqlite3_stmt * _selectTransactionsStatementWithoutSource;
  struct sqlite3_stmt * _selectTransactionSourceIdentifierForTransactionWithIdentifierStatement;
  struct sqlite3_stmt * _selectTransactionSourceIdentifierForTransactionWithServiceIdentifierStatement;
  struct sqlite3_stmt * _selectTransactionSourceIdentifierForPassUniqueIdentifierStatement;
  struct sqlite3_stmt * _selectPassUniqueIdentifierForTransactionSourceIdentifierStatement;
  struct sqlite3_stmt * _selectBalancesForPassStatement;
  struct sqlite3_stmt * _updateBalancesForPassStatement;
  struct sqlite3_stmt * _selectSubcredentialsForPassStatement;
  struct sqlite3_stmt * _updateSubcredentialsForPassStatement;
  NSObject<OS_dispatch_queue> *_dbQueue;
  BOOL _isInTransaction;
  NSMutableDictionary *_manifest;
  NSArray *_libraryHashes;
  int _externallyChangedBroadcasts;
  BOOL _sendingLocalNotifyDatabaseChanged;
  BOOL _needsMoreLocalNotifyDatabaseChanged;
}

@property (nonatomic) BOOL passDBIsAvailable;
@property (readonly, @dynamic) struct sqlite3 * database;
@property (readonly, @dynamic) struct sqlite3_stmt * deleteStatement;
@property (readonly, @dynamic) struct sqlite3_stmt * insertStatement;
@property (readonly, @dynamic) struct sqlite3_stmt * selectPassDataStatement;
@property (readonly, @dynamic) struct sqlite3_stmt * selectPassAndImageSetsDataStatement;
@property (readonly, @dynamic) struct sqlite3_stmt * selectPassDiffStatement;
@property (readonly) struct sqlite3_stmt * insertDiffStatement;
@property (readonly) struct sqlite3_stmt * updateDeletePendingStatement;
@property (readonly) struct sqlite3_stmt * updatePreferredAIDStatement;
@property (readonly) struct sqlite3_stmt * selectPreferredAIDStatement;
@property (readonly) struct sqlite3_stmt * selectTransactionWithIdentifierStatement;
@property (readonly) struct sqlite3_stmt * selectTransactionWithServiceIdentifierStatement;
@property (readonly) struct sqlite3_stmt * insertTransactionSourceIdentifierForPassStatement;
@property (readonly) struct sqlite3_stmt * deleteTransactionSourceIdentifierForPassStatement;
@property (readonly) struct sqlite3_stmt * deleteTransactionsForTransactionSourceStatement;
@property (readonly) struct sqlite3_stmt * trimTransactionsForTransactionSourceStatement;
@property (readonly) struct sqlite3_stmt * selectTransitAppletStateForPassStatement;
@property (readonly) struct sqlite3_stmt * updateTransitAppletStateForPassStatement;
@property (readonly) struct sqlite3_stmt * insertEphemeralTransactionStatement;
@property (readonly) struct sqlite3_stmt * deleteEphemeralTransactionByTransactionSourceIdentifierStatement;
@property (readonly) struct sqlite3_stmt * currentEphemeralTransactionIdentifierStatement;
@property (readonly) struct sqlite3_stmt * selectLastAddValueAmountForPassStatement;
@property (readonly) struct sqlite3_stmt * updateLastAddValueAmountForPassStatement;
@property (readonly) struct sqlite3_stmt * selectPendingAddValueDateForPassStatement;
@property (readonly) struct sqlite3_stmt * updatePendingAddValueDateForPassStatement;
@property (readonly, @dynamic) NSData *libraryHash;
@property (readonly, @dynamic) NSDictionary *manifestHashes;
@property (readonly) NSArray *passDescriptions;
@property (readonly, nonatomic) unsigned long long numberOfPasses;

/* class methods */
+ (id)sharedDatabase;
+ (long long)maxDatabaseVersion;
+ (id)_migrationDelegateQueue;
+ (id)_migrationDataSource;
+ (void)setMigrationDataSource:(id)source;
+ (unsigned long long)latestWatchOSMajorVersion;

/* instance methods */
- (id)init;
- (void)dealloc;
- (BOOL)_executeSQL:(id)sql;
- (void)_executeSQLQuery:(id)sqlquery processResultsBlock:(id /* block */)block;
- (struct sqlite3_stmt *)selectDeletePendingStatement;
- (struct sqlite3_stmt *)insertTransactionStatement;
- (struct sqlite3_stmt *)removeTransactionStatement;
- (struct sqlite3_stmt *)removeTransactionWithServiceIdentifierStatement;
- (struct sqlite3_stmt *)selectTransactionsStatementWithTransactionSource:(unsigned long long)source orderByDate:(long long)date limit:(unsigned long long)limit;
- (struct sqlite3_stmt *)selectTransactionSourceIdentifierForTransactionWithIdentifierStatement;
- (struct sqlite3_stmt *)selectTransactionSourceIdentifierForTransactionWithServiceIdentifierStatement;
- (struct sqlite3_stmt *)selectTransactionSourceIdentifierForPassUniqueIdentifierStatement;
- (struct sqlite3_stmt *)selectPassUniqueIdentifierForTransactionSourceIdentifierStatement;
- (struct sqlite3_stmt *)selectBalancesForPassStatement;
- (struct sqlite3_stmt *)updateBalancesForPassStatement;
- (struct sqlite3_stmt *)selectSubcredentialsForPassStatement;
- (struct sqlite3_stmt *)updateSubcredentialsForPassStatement;
- (void)_loadInitialManifestLocked;
- (void)_performTransactionWithBlock:(id /* block */)block;
- (id)_decodeObjectOfClasses:(id)classes fromStatement:(struct sqlite3_stmt *)statement column:(int)column;
- (id)_decodeObjectOfClass:(Class)class fromStatement:(struct sqlite3_stmt *)statement column:(int)column;
- (id)savePass:(id)pass isLocalPass:(BOOL)pass;
- (void)saveDiff:(id)diff forPassWithUniqueID:(id)id;
- (id)removePassWithUniqueID:(id)id;
- (id)rebuildDatabaseWithPasses:(id)passes;
- (void)saveTransaction:(id)transaction forPass:(id)pass;
- (void)_saveTransaction:(id)transaction forTransactionSourceIdentifier:(id)identifier withPaymentCredentialType:(long long)type shouldTrim:(BOOL)trim;
- (void)removeTransactionWithIdentifier:(id)identifier;
- (void)removeTransactionsForTransactionSource:(id)source;
- (id)transactionSourcesForPassWithUniqueID:(id)id;
- (id)transactionsForTransactionSourceIdentifier:(id)identifier withTransactionSource:(unsigned long long)source withBackingData:(unsigned long long)data startDate:(id)date endDate:(id)date orderedByDate:(long long)date limit:(long long)limit;
- (id)transactionWithIdentifier:(id)identifier;
- (id)transactionWithServiceIdentifier:(id)identifier;
- (id)transactionSourceIdentifierForTransactionWithIdentifier:(id)identifier;
- (id)transactionSourceIdentifierForTransactionWithServiceIdentifier:(id)identifier;
- (id)transactionSourceIdentifierForPassWithUniqueID:(id)id;
- (id)passUniqueIDForTransactionSourceIdentifier:(id)identifier;
- (id)transitAppletStateForPassWithUniqueID:(id)id;
- (void)setTransitAppletState:(id)state forPassWithUniqueID:(id)id;
- (id)paymentBalancesForPassWithUniqueID:(id)id;
- (void)setPaymentBalances:(id)balances forPassWithUniqueID:(id)id;
- (id)subcredentialsForPassWithUniqueID:(id)id;
- (void)setSubcredentials:(id)subcredentials forPassWithUniqueID:(id)id;
- (void)setCurrentEphemeralTransactionIdentifier:(id)identifier forTransactionSourceIdentifier:(id)identifier;
- (id)currentEphemeralTransactionIdentifierForTransactionSourceIdentifier:(id)identifier;
- (void)setLastAddValueAmount:(id)amount forPassWithUniqueID:(id)id;
- (id)lastAddValueAmountForPassWithUniqueID:(id)id;
- (void)setPendingAddValueDate:(id)date forPassWithUniqueID:(id)id;
- (id)pendingAddValueDateForPassWithUniqueID:(id)id;
- (id /* block */)restoreBlockForVolatilePassData;
- (void)_notifyDatabaseChangedWithNoop:(BOOL)noop;
- (void)_notifyForFirstUnlock;
- (void)_notifyDatabaseChangedWithNoop:(BOOL)noop firstUnlock:(BOOL)unlock;
- (void)_notifyDatabaseChangedExternally;
- (BOOL)_passDBIsAvailableLocked;
- (void)_savePassLocked:(id)locked locallyAdded:(BOOL)added wasUpdate:(BOOL *)update;
- (BOOL)_removePassWithUniqueIDLocked:(id)idlocked;
- (void)_saveTransactionLocked:(id)locked forTransactionSourceIdentifier:(id)identifier;
- (void)_removeTransactionWithServiceIdentifierLocked:(id)locked forTransactionSourceIdentifier:(id)identifier;
- (void)_removeTransactionWithIdentifier:(id)identifier;
- (void)_removeTransactionsForTransactionSource:(id)source;
- (void)_trimTransactionsForTransactionSourceIdentifierLocked:(id)locked withPaymentCredentialType:(long long)type;
- (id)_transactionsForTransactionSourceIdentifierLocked:(id)locked withTransactionSource:(unsigned long long)source withBackingData:(unsigned long long)data startDate:(id)date endDate:(id)date orderByDate:(long long)date limit:(unsigned long long)limit;
- (id)_transactionWithIdentifierLocked:(id)locked;
- (id)_transactionWithServiceIdentifierLocked:(id)locked;
- (id)_transactionSourceIdentifierForTransactionWithIdentifierLocked:(id)locked;
- (void)_createTransactionSourceIdentifierIfNecessaryForPassWithUniqueIDLocked:(id)idlocked;
- (void)_removeTransactionSourceIdentifierForPassWithUniqueIDLocked:(id)idlocked;
- (id)_transactionSourceIdentifierForTransactionWithServiceIdentifierLocked:(id)locked;
- (id)_transactionSourceIdentifierForPassUniqueIdentifierLocked:(id)locked;
- (id)_passUniqueIdentifierForTransactionSourceIdentifierLocked:(id)locked;
- (id)_transitAppletStateForPassWithUniqueIDLocked:(id)idlocked;
- (void)_setTransitAppletStateLocked:(id)locked forPassWithUniqueID:(id)id;
- (void)_setCurrentEphemeralTransactionIdentifier:(id)identifier forTransactionSourceIdentifier:(id)identifier;
- (id)_currentEphemeralTransactionIdentifierForTransactionSourceIdentifier:(id)identifier;
- (id)_lastAddValueAmountForPassWithUniqueIDLocked:(id)idlocked;
- (void)_setLastAddValueAmountLocked:(id)locked forPassWithUniqueID:(id)id;
- (id)_pendingAddValueDateForPassWithUniqueIDLocked:(id)idlocked;
- (void)_setPendingAddValueDateLocked:(id)locked forPassWithUniqueID:(id)id;
- (id)_paymentBalancesForPassWithUniqueIDLocked:(id)idlocked;
- (void)_setPaymentBalancesLocked:(id)locked forPassWithUniqueID:(id)id;
- (id)_subcredentialsForPassWithUniqueIDLocked:(id)idlocked;
- (void)_setSubcredentialsLocked:(id)locked forPassWithUniqueID:(id)id;
- (void)_enumerateAllPassesForMigration:(id /* block */)migration;
- (BOOL)_updateNFCPayloadDuringMigration:(id)migration;
- (BOOL)_updatePrivateLabelAndCobrandDuringMigration:(id)migration;
- (BOOL)_updateDeviceAndPreferredPaymentApplicationsDuringMigration:(id)migration;
- (BOOL)_updatePrimaryContactlessAndInAppPaymentApplicationsDuringMigration:(id)migration;
- (BOOL)_updateEncodedImageSetsDuringMigration:(id)migration;
- (BOOL)_repairEncodedImagesDuringMigration:(id)migration;
- (BOOL)_updateIssuerCountryCodesDuringMigration:(id)migration;
- (BOOL)_updateExpressPassTypesMaskDuringMigration:(id)migration;
- (BOOL)_updateDevicePaymentApplicationsDuringMigration:(id)migration;
- (BOOL)_updateIngestedDatesDuringMigration:(id)migration;
- (BOOL)_updateCompleteLocalHashesDuringMigration:(id)migration;
- (BOOL)_updateFrontAndBackFieldBucketsDuringMigration:(id)migration;
- (BOOL)_updateAvailableActionsDuringMigration:(id)migration;
- (BOOL)_updateOrganizationNamesDuringMigration:(id)migration;
- (BOOL)_updateLocalizedDescriptionDuringMigration:(id)migration;
- (BOOL)_updateEffectivePaymentApplicationStateDuringMigration:(id)migration;
- (BOOL)_updateHasUserSelectableContactlessPaymentApplications:(id)applications;
- (BOOL)_updateEncodedPaymentPassDuringMigration:(id)migration;
- (BOOL)_updateHasStoredValueDuringMigration:(id)migration;
- (BOOL)_updateSettingsDuringMigration:(id)migration;
- (BOOL)_updateCompleteRemoteHashesDuringMigration;
- (BOOL)_updateTransactionSourceIdentifiersDuringMigration:(id)migration;
- (id)_passForUniqueIDLocked:(id)idlocked includeImageSets:(BOOL)sets;
- (id)_diffForUniqueIDLocked:(id)idlocked;
- (void)_saveDiffLocked:(id)locked forPassWithUniqueID:(id)id;
- (id)passForUniqueID:(id)id;
- (id)passForUniqueID:(id)id includeImageSets:(BOOL)sets;
- (id)diffForUniqueID:(id)id;
- (void)setDeletePending:(BOOL)pending forUniqueID:(id)id;
- (BOOL)_getDeletePendingForUniqueID:(id)id;
- (void)setPreferredPaymentApplication:(id)application forPaymentPass:(id)pass;
- (id)preferredPaymentApplicationForPaymentPass:(id)pass;
- (id)_getPreferredPaymentApplicationForPaymentPass:(id)pass aid:(id *)aid;
- (id)libraryHashForWatchOSMajorVersion:(unsigned long long)version;
- (id)_libraryHashLockedForWatchOSMajorVersion:(unsigned long long)version;
- (id)manifestHashesForWatchOSMajorVersion:(unsigned long long)version;
- (void)enumerateAllPassesWithBlock:(id /* block */)block includeImageSets:(BOOL)sets;
- (void)enumerateAllPassesAndDescriptionsWithBlock:(id /* block */)block includeImageSets:(BOOL)sets;
- (BOOL)hasPassesMatchingPassDescriptionPredicate:(id)predicate;
- (id)filteredPassesUsingPassDescriptionPredicate:(id)predicate includeImageSets:(BOOL)sets;
- (void)_rebuildDatabaseWithPassesFromCompanionPasses;
- (void)_verifyPassDataIsUnarchivedCorrectlyWithData:(id)data forPassWithUniqueID:(id)id;
- (BOOL)_migrateDatabase:(id /* block */)database;
- (long long)_databaseVersionExists:(BOOL *)exists valid:(BOOL *)valid;
- (void)_insertDatabaseVersionRow:(long long)row;
- (void)_updateDatabaseVersionRow:(long long)row;
- (BOOL)_preconditionsMetForDatabaseOpen;
- (void)_handleDatabaseChangedExternally;
- (void)teardownDB;
- (void)_inQueue_teardownDB;
- (void)_handleFirstUnlock;
- (void)_handleHasMigrationDataSource;
- (void)_attemptDatabaseOpen;
- (BOOL)_table:(id)_table containsColumn:(id)column;
@end

#endif /* NPKGizmoDatabase_h */
