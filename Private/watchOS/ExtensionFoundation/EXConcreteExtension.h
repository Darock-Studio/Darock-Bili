//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 141.1.1.0.0
//
#ifndef EXConcreteExtension_h
#define EXConcreteExtension_h
@import Foundation;

#include "NSExtension.h"

@class NSArray, NSBundle, NSDictionary, NSMutableDictionary, NSSet, NSString, NSUUID;
@protocol PKPlugIn;

@interface EXConcreteExtension : NSExtension {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _unfairLock;
  NSString *_identifier;
  NSString *_version;
  NSDictionary *_attributes;
  NSDictionary *_infoDictionary;
  NSString *_extensionPointIdentifier;
  id /* block */ _requestCompletionBlock;
  id /* block */ _requestCancellationBlock;
  id /* block */ _requestInterruptionBlock;
}

@property (readonly, copy) NSString *_localizedName;
@property (readonly, copy) NSString *_localizedShortName;
@property (retain) NSObject<PKPlugIn> *_plugIn;
@property (readonly, retain, nonatomic) NSBundle *_extensionBundle;
@property (copy) id /* block */ _requestPostCompletionBlock;
@property (copy) id /* block */ _requestPostCompletionBlockWithItems;
@property (readonly) double requestTeardownDelay;
@property (copy, nonatomic) NSUUID *connectionUUID;
@property (nonatomic) long long wantsDedicatedQueue;
@property (retain, nonatomic) NSMutableDictionary *_extensionExpirationIdentifiers;
@property (retain, nonatomic) NSMutableDictionary *_extensionServiceConnections;
@property (retain, nonatomic) NSMutableDictionary *_extensionContexts;
@property (copy, @dynamic, nonatomic) NSDictionary *_extensionState;
@property (copy, nonatomic) NSSet *_allowedErrorClasses;
@property (nonatomic) BOOL observingHostAppStateChanges;
@property (retain) id _stashedPlugInConnection;
@property (readonly) NSArray *_internalPersonas;

/* class methods */
+ (void)initializeFiltering;
+ (BOOL)evaluateActivationRule:(id)rule withExtensionItemsRepresentation:(id)representation;
+ (BOOL)_evaluateActivationRuleWithoutWorkarounds:(id)workarounds withExtensionItemsRepresentation:(id)representation;
+ (id)predicateForActivationRule:(id)rule;
+ (id)_inputItemsByApplyingActiveWebPageAlternative:(id)alternative ifNeededByActivationRule:(id)rule;
+ (BOOL)_matchingDictionaryMatchesActiveWebPageAlternative:(id)alternative;
+ (BOOL)_inputItemsMatchActiveWebPageAlternative:(id)alternative;
+ (BOOL)_genericValuesMatchActiveWebPageAlternativeWithExtensionItems:(id)items attachmentsLens:(id /* block */)lens registeredTypeIdentifiersLens:(id /* block */)lens isActiveWebPageAttachmentCheck:(id /* block */)check;
+ (id)_dictionaryIncludingOnlyItemsWithRegisteredTypeIdentifier:(id)identifier fromMatchingDictionary:(id)dictionary;
+ (BOOL)_evaluateActivationRule:(id)rule withInputItemsIfTheyMatchActiveWebPageAlternative:(id)alternative matchResult:(out long long *)result;
+ (BOOL)_evaluateActivationRule:(id)rule withDictionaryIfItMatchesActiveWebPageAlternative:(id)alternative matchResult:(out long long *)result;
+ (void)initialize;
+ (BOOL)_shouldLogExtensionDiscovery;
+ (id)extensionsWithMatchingAttributes:(id)attributes error:(id *)error;
+ (void)extensionsWithMatchingAttributes:(id)attributes completion:(id /* block */)completion;
+ (void)extensionsWithMatchingAttributes:(id)attributes synchronously:(BOOL)synchronously completion:(id /* block */)completion;
+ (id)extensionWithIdentifier:(id)identifier error:(id *)error;
+ (id)extensionWithIdentifier:(id)identifier excludingDisabledExtensions:(BOOL)extensions error:(id *)error;
+ (void)extensionWithUUID:(id)uuid completion:(id /* block */)completion;
+ (void)extensionWithURL:(id)url completion:(id /* block */)completion;
+ (id)beginMatchingExtensionsWithAttributes:(id)attributes completion:(id /* block */)completion;
+ (void)endMatchingExtensions:(id)extensions;
+ (id)globalStateQueueForExtension:(id)extension;

/* instance methods */
- (void)_setExtensionState:(id)state;
- (BOOL)_isMarkedNew;
- (void)_didShowExtensionManagementInterface;
- (void)_didShowNewExtensionIndicator;
- (void)_resetExtensionState;
- (id)_initWithPKPlugin:(id)pkplugin;
- (id)init;
- (void)dealloc;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (id)description;
- (BOOL)optedIn;
- (BOOL)attemptOptIn:(id *)in;
- (BOOL)attemptOptOut:(id *)out;
- (id)_bareExtensionServiceConnection;
- (void)_reallyBeginExtensionRequest:(id)request completion:(id /* block */)completion;
- (BOOL)makeExtensionContextAndXPCConnectionForRequest:(id)request error:(id *)error;
- (void)_reallyBeginExtensionRequest:(id)request synchronously:(BOOL)synchronously completion:(id /* block */)completion;
- (void)beginExtensionRequestWithOptions:(unsigned long long)options inputItems:(id)items completion:(id /* block */)completion;
- (id)beginExtensionRequestWithOptions:(unsigned long long)options inputItems:(id)items error:(id *)error;
- (void)beginExtensionRequestWithOptions:(unsigned long long)options inputItems:(id)items listenerEndpoint:(id)endpoint completion:(id /* block */)completion;
- (id)beginExtensionRequestWithOptions:(unsigned long long)options inputItems:(id)items listenerEndpoint:(id)endpoint error:(id *)error;
- (void)_beginExtensionRequest:(id)request completion:(id /* block */)completion;
- (id)_beginExtensionRequest:(id)request error:(id *)error;
- (void)beginExtensionRequestWithInputItems:(id)items listenerEndpoint:(id)endpoint completion:(id /* block */)completion;
- (id)beginExtensionRequestWithInputItems:(id)items listenerEndpoint:(id)endpoint error:(id *)error;
- (void)beginExtensionRequestWithInputItems:(id)items completion:(id /* block */)completion;
- (id)beginExtensionRequestWithInputItems:(id)items error:(id *)error;
- (void)cancelExtensionRequestWithIdentifier:(id)identifier;
- (int)pidForRequestIdentifier:(id)identifier;
- (void)_didCreateExtensionContext:(id)context;
- (id)objectForInfoDictionaryKey:(id)key;
- (id)_personas;
- (id)icons;
- (id)_extensionContextForUUID:(id)uuid;
- (id)_itemProviderForPayload:(id)payload extensionContext:(id)context;
- (BOOL)_isPhotoServiceAccessGranted;
- (void)_completeRequestReturningItems:(id)items forExtensionContextWithUUID:(id)uuid completion:(id /* block */)completion;
- (void)_cancelRequestWithError:(id)error forExtensionContextWithUUID:(id)uuid completion:(id /* block */)completion;
- (void)_loadItemForPayload:(id)payload contextIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)_loadPreviewImageForPayload:(id)payload contextIdentifier:(id)identifier completionHandler:(id /* block */)handler;
- (void)_openURL:(id)url completion:(id /* block */)completion;
- (BOOL)_isSystemExtension;
- (BOOL)_wantsProcessPerRequest;
- (Class)_hostContextClass;
- (int)_plugInProcessIdentifier;
- (void)_safelyBeginUsing:(id /* block */)using;
- (void)_safelyBeginUsingSynchronously:(BOOL)synchronously request:(id)request readyHandler:(id /* block */)handler;
- (void)_safelyBeginUsingWithRequest:(id)request readyHandler:(id /* block */)handler;
- (BOOL)_beginUsingAndCreateExtensionAssertionWithRequest:(id)request error:(id *)error;
- (void)_safelyEndUsing:(id /* block */)using;
- (void)_safelyEndUsingRequestWithPKUUID:(id)pkuuid processAssertion:(id)assertion continuation:(id /* block */)continuation;
- (void)_kill:(int)_kill;
- (id)extensionContexts;
- (void)_dropAssertion;
- (void)_hostWillEnterForegroundNote:(id)note;
- (void)_hostDidEnterBackgroundNote:(id)note;
- (void)_hostWillResignActiveNote:(id)note;
- (void)_hostDidBecomeActiveNote:(id)note;
- (id)identifier;
- (id)version;
- (id)attributes;
- (id)infoDictionary;
- (id)extensionPointIdentifier;
- (void)_setPlugIn:(id)in;
- (void)_setExtensionServiceConnections:(id)connections;
- (void)_setExtensionExpirationsIdentifiers:(id)identifiers;
- (void)_setExtensionContexts:(id)contexts;
- (id /* block */)requestCompletionBlock;
- (void)setRequestCompletionBlock:(id /* block */)block;
- (id /* block */)requestCancellationBlock;
- (void)setRequestCancellationBlock:(id /* block */)block;
- (id /* block */)requestInterruptionBlock;
- (void)setRequestInterruptionBlock:(id /* block */)block;
- (void)_setAllowedErrorClasses:(id)classes;
- (BOOL)_isObservingHostAppStateChanges;
- (void)_setObservingHostAppStateChanges:(BOOL)changes;
@end

#endif /* EXConcreteExtension_h */
