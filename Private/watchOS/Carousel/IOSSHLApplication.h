//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef IOSSHLApplication_h
#define IOSSHLApplication_h
@import Foundation;

#include "CSLApplicationInfo.h"
#include "CSLPPTApplicationConfiguration.h"
#include "CSLSceneSnapshot.h"
#include "CSLStackshotAndSysdiagnoseWriter.h"
#include "CSLStuckTransactionDialog.h"
#include "CSLStuckTransactionDialogDelegate-Protocol.h"
#include "CSLTerminationOnExitControlling-Protocol.h"
#include "IOSSHLBackedUpDataStore.h"

@class BSCFBundle, FBProcess, NSArray, NSDictionary, NSMutableArray, NSSet, NSString, PUICClassicModeConfiguration, RBSAssertion, UIApplicationSceneClientSettings, UISDisplayContext, XBApplicationSnapshotManifest;
@protocol CSLApplicationInfoProtocol;

@interface IOSSHLApplication : NSObject<CSLStuckTransactionDialogDelegate, CSLTerminationOnExitControlling> {
  /* instance variables */
  unsigned long long _canary1;
  unsigned long long _canary2;
  long long _failedLaunchCount;
  unsigned int x :1 _isAnimatingActivation;
  unsigned int x :1 _isAnimatingDeactivation;
  unsigned int x :1 _hasBeenFrontmost;
  unsigned int x :1 _uninstalled;
  unsigned int x :3 _isNewlyInstalled;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _appBundleMutex;
  BSCFBundle *_cachedBundle;
  NSDictionary *_cachedLocalizedInfoDictionary;
  int _applicationRestorationCheckState;
  IOSSHLBackedUpDataStore *_dataStore;
  int _lastExitType;
  unsigned long long _activationToken;
  XBApplicationSnapshotManifest *_snapshotManifest;
  long long _finishedLaunchingFrontmost;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _processMutex;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _stateUnfairLock;
  CSLStuckTransactionDialog *_canaryDialog;
  CSLStackshotAndSysdiagnoseWriter *_diagnosticWriter;
  RBSAssertion *_subordinateProcessAssertion;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _nowPlayingWithAudioLock;
  BOOL _nowPlayingWithAudio;
  RBSAssertion *_nowPlayingWithAudioAssertion;
  NSMutableArray *_launchBlocks;
}

@property (readonly, nonatomic) BOOL isHiddenViewService;
@property (readonly, nonatomic) BOOL isFrontmost;
@property (readonly, nonatomic) NSObject<CSLApplicationInfoProtocol> *CSL_applicationInfo;
@property (readonly, nonatomic) _UIApplicationInfo *UIApplicationInfo;
@property (nonatomic) BOOL restricted;
@property (nonatomic) unsigned char taskState;
@property (nonatomic) BOOL finishingTask;
@property (nonatomic) BOOL committedSceneUpdate;
@property (readonly, nonatomic) unsigned long long applicationTrustState;
@property (nonatomic) BOOL enableTestsInNextTransitionContext;
@property (retain, nonatomic) NSString *currentTestNameToMarkActivation;
@property (retain, nonatomic) CSLPPTApplicationConfiguration *testingConfiguration;
@property (retain) CSLApplicationInfo *appInfo;
@property (retain, nonatomic) UIApplicationSceneClientSettings *sceneClientSettings;
@property (retain, nonatomic) CSLSceneSnapshot *cachedSceneSnapshot;
@property (readonly, nonatomic) PUICClassicModeConfiguration *classicModeConfiguration;
@property (readonly, nonatomic) UISDisplayContext *displayContext;
@property (nonatomic) BOOL appSnapshotSequenceID;
@property (readonly, nonatomic) NSString *bundleIdentifier;
@property (readonly, nonatomic) NSString *signerIdentity;
@property (readonly, nonatomic) double modificationDate;
@property (readonly, nonatomic) NSString *sandboxPath;
@property (readonly, nonatomic) NSString *path;
@property (readonly, nonatomic) int pid;
@property (readonly, nonatomic) BOOL running;
@property (readonly, nonatomic) FBProcess *process;
@property (readonly, nonatomic) NSSet *idleTimerDisabledReasons;
@property (readonly, nonatomic) int activationState;
@property (readonly, nonatomic) NSArray *domainsToPreheat;
@property (nonatomic) BOOL hasBeenFrontMost;
@property (readonly, nonatomic) BOOL newlyInstalled;
@property (readonly, nonatomic) BOOL requiresRLNDataProvider;
@property (nonatomic) BOOL showsProgress;
@property (retain, nonatomic) NSDictionary *alertSuppressionContextsBySectionIdentifier;
@property (nonatomic) double watchdogExtension;
@property (readonly, nonatomic) NSDictionary *localizedPlistDictionary;
@property (readonly, nonatomic) BOOL provisioningProfileValidated;
@property (readonly, nonatomic) NSString *runningBundleIdentifier;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)snapshotExtendedDataClasses;
+ (id)defaultApplicationsProvider;
+ (void)initialize;
+ (int)goToSafeModeAfterCount;
+ (void)setGoToSafeModeAfterCount:(int)count;
+ (int)maxRelaunchCountSystem;
+ (void)setMaxRelaunchCountSystem:(int)system;
+ (int)maxRelaunchCountUser;
+ (void)setMaxRelaunchCountUser:(int)user;
+ (id)_defaultDisplayState;
+ (void)setDefaultValue:(id)value forKey:(id)key presentationIdentifier:(id)identifier;
+ (id)defaultValueForKey:(id)key presentationIdentifier:(id)identifier urlScheme:(id)scheme;

/* instance methods */
- (void)flushSnapshotsForAllScenes;
- (void)flushSnapshotsForSceneID:(id)id;
- (void)deleteAllSnapshots;
- (void)deleteSnapshotForContext:(id)context completion:(id /* block */)completion;
- (void)saveSnapshotForScene:(id)scene context:(id)context completion:(id /* block */)completion;
- (id)_firstValidSnapshot;
- (id)splashBoardMetadata;
- (id)snapshotImage;
- (id)extendedSnapshotData;
- (void)setCSLSSnapshotContext:(id)context;
- (id)cslsSnapshotContext;
- (id)snapshotStaleDate;
- (BOOL)isSnapshotStale;
- (id)snapshotCreationDate;
- (id)_snapshotCreationDeletionQueueForSceneID:(id)id;
- (id)_screenFromSceneID:(id)id;
- (id)_snapshotDataProviderForScene:(id)scene snapshot:(id)snapshot;
- (void)_noteSnapshotDidUpdate;
- (BOOL)isSetupAssistant;
- (BOOL)isDemoApp;
- (id)bundle;
- (void)purgeBundleCaches;
- (void)purgeAllCaches;
- (BOOL)isAnyTerminationAssertionHeld;
- (void)terminationAssertionAdded:(id)added;
- (void)terminationAssertionRemoved:(id)removed;
- (void)markApplicationIdentityAsTrusted;
- (id)initWithApplicationInfo:(id)info;
- (void)dealloc;
- (void)_withMutex:(struct _opaque_pthread_mutex_t { long long x0; char x1[56] })mutex call:(id /* block */)call;
- (BOOL)isRunning;
- (id)applicationProcess;
- (id)extensionProcess;
- (BOOL)_isNewlyInstalled;
- (void)_setNewlyInstalled:(BOOL)installed;
- (void)processWillLaunch:(id)launch;
- (void)_mutex_takeSubordinateProcessAssertion:(id)assertion;
- (void)takeSubordinateProcessAssertionIfNecessary:(id)necessary;
- (void)takeSubordinateProcessAssertion;
- (void)_mutex_releaseSubordinateProcessAssertion;
- (void)releaseSubordinateProcessAssertion;
- (void)setTerminateOnSystemAppExit:(BOOL)exit completion:(id /* block */)completion;
- (void)addLaunchBlock:(id /* block */)block;
- (void)processDidLaunch:(id)launch;
- (void)didExitWithType:(int)type terminationReason:(long long)reason;
- (void)_setHasBeenLaunched;
- (BOOL)shouldLaunchPNGless;
- (BOOL)suspendingUnsupported;
- (void)didSuspend;
- (id)_stringForActivationState:(int)state;
- (id)activationStateToString;
- (BOOL)isBeingDebugged;
- (BOOL)isFinishingTask;
- (void)_setActivationState:(int)state;
- (BOOL)isActivating;
- (void)willActivate;
- (void)setActivateTransactionID:(unsigned long long)id;
- (BOOL)didActivateWithTransactionID:(unsigned long long)id;
- (void)didFailToActivate;
- (void)willDeactivateForEventsOnly:(BOOL)only;
- (void)didDeactivateForEventsOnly:(BOOL)only;
- (void)willAnimateActivation;
- (void)didAnimateActivation;
- (void)willAnimateDeactivation:(BOOL)deactivation;
- (void)didAnimateDeactivation;
- (long long)statusBarOrientation;
- (long long)launchingInterfaceOrientationForCurrentOrientation;
- (long long)launchingInterfaceOrientationForOrientation:(long long)orientation;
- (void)prepareForUninstallation;
- (BOOL)_shouldAutoRelaunchForEA;
- (BOOL)_shouldAutoLaunchOnBootOrInstall:(BOOL)install;
- (BOOL)shouldAutoLaunchOnBootOrInstall;
- (BOOL)shouldAutoRelaunchAfterExit;
- (id)dataContainerPath;
- (id)bundleContainerPath;
- (id)_copyApplicationMetadata;
- (BOOL)statusBarHidden;
- (long long)statusBarStyle;
- (long long)effectiveStatusBarStyle;
- (BOOL)allowsEventOnlySuspension;
- (BOOL)suppressesNotifications;
- (double)autoDimTime;
- (double)autoLockTime;
- (void)activate;
- (void)deactivate;
- (void)noteBadgeSetLocally;
- (BOOL)badgeHasBeenSetLocally;
- (id)badgeNumberOrString;
- (void)setBadge:(id)badge;
- (BOOL)shouldSuppressAlertForSuppressionContexts:(id)contexts sectionIdentifier:(id)identifier;
- (void)_noteIconDataSourceDidChange;
- (double)lastBadgeClearTime;
- (BOOL)isUninstalled;
- (BOOL)isWatchKitApp;
- (void)bulletinWithLocalNotificationShouldLaunchWithActions:(id)actions;
- (void)bulletinWithLocalNotificationShouldLaunchSuspended;
- (void)setBadgeValue:(id)value;
- (id)badgeValue;
- (BOOL)isSameExecutableAsApplication:(id)application;
- (BOOL)canAccessScreen:(id)screen;
- (id)mainSceneInitialClientSettings;
- (id)sceneSpecification;
- (id)mainScene;
- (id)sceneIdentifierForDisplayIdentity:(id)identity displayConfiguration:(id)configuration;
- (id)mainSceneID;
- (BOOL)_isMainSceneID:(id)id;
- (id)_searchDomainLaunchInfo;
- (id)displayIdentifier;
- (BOOL)hasBeenFrontmost;
- (int)_applicationRestorationCheckState;
- (void)_setApplicationRestorationCheckState:(int)state;
- (id)_snapshotManifest;
- (BOOL)wantsIndependentWatchdogForSceneCreate;
- (id)watchdogProvider;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sceneBounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sceneFrame;
- (void)_withNowPlayingAudioLock:(id /* block */)lock;
- (void)setNowPlayingWithAudio:(BOOL)audio;
- (void)stuckTransactionDialogDidDismiss:(id)dismiss;
- (void)stuckTransactionDialogDidTapButton:(id)button;
- (BOOL)isRestricted;
- (BOOL)hasCommittedSceneUpdate;
@end

#endif /* IOSSHLApplication_h */
