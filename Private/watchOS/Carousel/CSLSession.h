//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLSession_h
#define CSLSession_h
@import Foundation;

#include "CSLSSession.h"
#include "BLSAssertionObserving-Protocol.h"
#include "CSLSessionPersisting-Protocol.h"
#include "IOSSHLApplication.h"

@class BLSAssertion, CSLSSession, NSDate, NSDateComponents, NSString, NSXPCConnection;

@interface CSLSession : CSLSSession<CSLSessionPersisting, BLSAssertionObserving> {
  /* instance variables */
  BOOL _paused;
  BLSAssertion *_backlightAssertion;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property BOOL persisted;
@property (weak) NSXPCConnection *connection;
@property (weak) NSXPCConnection *managerConnection;
@property (nonatomic) BOOL dismissed;
@property BOOL launchable;
@property (readonly, nonatomic) int pid;
@property (readonly, nonatomic) BOOL mutuallyExclusive;
@property (readonly, nonatomic) double duration;
@property (readonly, nonatomic) BOOL managed;
@property (readonly, nonatomic) double cpuPercentage;
@property (readonly, nonatomic) BOOL cpuViolationExempt;
@property (readonly, nonatomic) BOOL schedulable;
@property (readonly, nonatomic) BOOL requiresFGActiveInitiation;
@property (readonly, nonatomic) BOOL autoEndSession;
@property (readonly, nonatomic) BOOL isBlocked;
@property (readonly, nonatomic) double remainingDuration;
@property (readonly, nonatomic) BOOL resistsSuppression;
@property (readonly, nonatomic) BOOL screenTimeExempt;
@property (readonly, nonatomic) BOOL backgroundNetworking;
@property (readonly, nonatomic) BOOL backgroundLaunch;
@property (readonly, nonatomic) BOOL allowsStreaming;
@property (readonly, nonatomic) BOOL allowIdleSleep;
@property (readonly, nonatomic) BOOL allowMultiples;
@property (readonly, nonatomic) long long backlightBehavior;
@property (readonly, nonatomic) BOOL thirdParty;
@property (readonly, nonatomic) BOOL transient;
@property (readonly, nonatomic) BOOL ended;
@property (readonly, nonatomic) NSString *startCalendarID;
@property (readonly, nonatomic) NSDateComponents *startDateComponents;
@property (readonly, nonatomic) unsigned long long options;
@property (readonly, nonatomic) CSLSSession *clientSession;
@property (readonly, nonatomic) IOSSHLApplication *app;
@property (retain, nonatomic) NSDate *lastForegroundDate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (const char *)createSQL;
+ (void)upgradeProperties:(id)properties;
+ (const char *)selectAllSQL;
+ (id)tablesToDrop:(id)drop;
+ (const char *)upsertSQL;
+ (const char *)deleteSQL;
+ (id)sessionForClientSession:(id)session fromClient:(id)client;
+ (id)sessionForClientSession:(id)session startDate:(id)date options:(unsigned long long)options fromConnection:(id)connection;
+ (id)mockSessionForMockClientSession:(id)session;
+ (id)sessionForBundleID:(id)id type:(long long)type;
+ (id)sessionForBundleID:(id)id withURL:(id)url type:(long long)type;

/* instance methods */
- (id)initWithSelectStatement:(struct sqlite3_stmt *)statement;
- (void)bindUpsertStatement:(struct sqlite3_stmt *)statement;
- (void)bindDeleteStatement:(struct sqlite3_stmt *)statement;
- (void)_commonInitialization;
- (unsigned long long)calendarUnits;
- (void)updatePID;
- (id)initWithClientSession:(id)session connection:(id)connection startDate:(id)date options:(unsigned long long)options;
- (id)initWithMockClientSession:(id)session;
- (id)initWithClientSession:(id)session connection:(id)connection;
- (id)initForBundleID:(id)id url:(id)url type:(long long)type;
- (void)end;
- (void)cancel;
- (void)persist;
- (BOOL)isDismissed;
- (id)backlightBehaviorDescription;
- (BOOL)hasBackgroundDuration;
- (BOOL)hasCPUPercentage;
- (BOOL)shouldRunInBackground;
- (id)_lock_endDate;
- (id)endDate;
- (BOOL)shouldBeRunning;
- (BOOL)shouldBeScheduled;
- (BOOL)canContinueToRun;
- (void)_lock_updateStartDate:(id)date;
- (BOOL)updateCalendarIfNecessary:(id)necessary;
- (void)updateStartDate:(id)date;
- (void)computeExpirationDate;
- (void)computeExpirationDateWithOffset:(double)offset;
- (BOOL)isThirdParty;
- (void)acquireBacklightAssertionIfNecessary;
- (void)releaseBacklightAssertionIfNecessary;
- (void)assertionWasAcquired:(id)acquired;
- (void)assertion:(id)assertion didFailToAcquireWithError:(id)error;
- (void)assertion:(id)assertion didCancelWithError:(id)error;
- (BOOL)isLaunchable;
- (BOOL)isPersisted;
- (BOOL)isMutuallyExclusive;
- (BOOL)isManaged;
- (BOOL)isCPUViolationExempt;
- (BOOL)isSchedulable;
- (BOOL)isScreenTimeExempt;
- (BOOL)isTransient;
- (BOOL)hasEnded;
@end

#endif /* CSLSession_h */
