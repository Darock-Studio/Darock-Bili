//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLUIHIDHandler_h
#define CSLUIHIDHandler_h
@import Foundation;

#include "BLSBacklightStateObserving-Protocol.h"
#include "BLSHBacklightHostObserving-Protocol.h"
#include "BSInvalidatable-Protocol.h"
#include "CSLButtonDownAggregator.h"
#include "CSLButtonEventPublisher.h"
#include "CSLButtonEventPublisherDelegate-Protocol.h"
#include "CSLButtonInstantTapFilter.h"
#include "CSLHIDEventListener.h"
#include "CSLHIDEventStream.h"
#include "CSLHIDEventStreamWriter.h"
#include "CSLHIDUISensorModeProviding-Protocol.h"
#include "CSLRawButtonEventPublisher.h"
#include "CSLRawButtonEventPublisherDelegate-Protocol.h"
#include "CSLSAlwaysOnTapToWakeProtocol-Protocol.h"
#include "CSLSRawButtonEventListenerService-Protocol.h"
#include "CSLUIHIDLogger.h"
#include "CSLUIKeyboardCrownEmulator.h"
#include "_CSLButton.h"
#include "_CSLButtonDelegate-Protocol.h"

@class NSHashTable, NSMutableArray, NSString;

@interface CSLUIHIDHandler : NSObject<CSLRawButtonEventPublisherDelegate, CSLButtonEventPublisherDelegate, CSLSRawButtonEventListenerService, _CSLButtonDelegate, CSLSAlwaysOnTapToWakeProtocol, BLSBacklightStateObserving, BLSHBacklightHostObserving> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  NSMutableArray *_activeChangeRequests;
  CSLHIDEventListener *_hidWristProximityListener;
  CSLHIDEventListener *_hidDigitizerListener;
  BOOL _screenCovered;
  BOOL _disableAlwaysOnSwipeThroughForAssertions;
  BOOL _disableAlwaysOnTapThroughForAssertions;
  unsigned long long _buttonLitScreen;
  NSHashTable *_rawButtonListeners;
  _CSLButton *_powerButton;
  _CSLButton *_goHomeButton;
  _CSLButton *_rotate2WakeUpButton;
  _CSLButton *_rotate2WakeDownButton;
  _CSLButton *_arrowUpButton;
  _CSLButton *_arrowDownButton;
  CSLUIKeyboardCrownEmulator *_keyboardCrownEmulator;
  _CSLButton *_siriTriggerButton;
  NSObject<BSInvalidatable> *_dispatchingAssertion;
  NSObject<CSLSAlwaysOnTapToWakeProtocol> *_alwaysOnTapThroughHandler;
  NSMutableArray *_disableInstantButtonTapAssertions;
  unsigned long long _stateHandler;
  CSLUIHIDLogger *_analyticsLogger;
  CSLHIDEventStream *_eventStream;
  CSLRawButtonEventPublisher *_rawButtonEventPublisher;
  CSLButtonEventPublisher *_buttonEventPublisher;
  CSLButtonDownAggregator *_buttonDownAggregator;
  CSLButtonInstantTapFilter *_buttonInstantTapFilter;
}

@property BOOL enabled;
@property (readonly, nonatomic) BOOL instantButtonTapGesturesEnabled;
@property (weak) NSObject<CSLHIDUISensorModeProviding> *sensorModeProvider;
@property (readonly, nonatomic) CSLHIDEventStreamWriter *eventStreamWriter;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedInstance;

/* instance methods */
- (id)init;
- (void)dealloc;
- (BOOL)handleHIDEvent:(struct __IOHIDEvent *)hidevent;
- (BOOL)isButtonDown:(unsigned long long)down;
- (void)setAlwaysOnTapToWakeEventHandler:(id)handler;
- (void)removeAlwaysOnTapToWakeEventHandler:(id)handler;
- (void)buttonEvent:(id)event buttonAction:(unsigned long long)action timestamp:(unsigned long long)timestamp;
- (BOOL)forceWristDetect:(struct __IOHIDEvent * *)detect;
- (void)addEventListener:(id)listener;
- (void)removeEventListener:(id)listener;
- (BOOL)handleAlwaysOnTapToWakeEvent:(id)event;
- (id)disableInstantButtonTapsWithIdentifier:(id)identifier;
- (BOOL)areInstantButtonTapGesturesEnabled;
- (void)backlight:(id)backlight didCompleteUpdateToState:(long long)state forEvent:(id)event;
- (void)backlightHost:(id)host willTransitionToState:(long long)state forEvent:(id)event;
- (void)rawButtonEventPublisher:(id)publisher publishedEvent:(id)event;
- (void)eventPublisher:(id)publisher publishedEvent:(id)event;
@end

#endif /* CSLUIHIDHandler_h */
