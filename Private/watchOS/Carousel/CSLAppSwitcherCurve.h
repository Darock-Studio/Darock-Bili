//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLAppSwitcherCurve_h
#define CSLAppSwitcherCurve_h
@import Foundation;

#include "NSCopying-Protocol.h"

@protocol {?="m34Value"d"rangeMin"d"rangeMax"d"baselineZ"d"baselineY"d"multiplierZ"d"multiplierY"d"addOffsetPositiveShift"d"minimumVisibleRelativeProgress"d"maximumVisibleRelativeProgress"d"relativeProgressMultiplier"d"bezier"{ContinuousBezier="_points"{vector<CGPoint, std::allocator<CGPoint>>="__begin_"^{CGPoint}"__end_"^{CGPoint}"__end_cap_"{__compressed_pair<CGPoint *, std::allocator<CGPoint>>="__value_"^{CGPoint}}}"_controlPoints"{vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>>="__value_"^v}}"_casteljauPoints"{vector<CGPoint, std::allocator<CGPoint>>="__begin_"^{CGPoint}"__end_"^{CGPoint}"__end_cap_"{__compressed_pair<CGPoint *, std::allocator<CGPoint>>="__value_"^{CGPoint}}}"_length"f"_arcLengths"{vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}}"_normalizedArcLengths"{vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}}}};

@interface CSLAppSwitcherCurve : NSObject<NSCopying> {
  /* instance variables */
  struct { double m34Value; double rangeMin; double rangeMax; double baselineZ; double baselineY; double multiplierZ; double multiplierY; double addOffsetPositiveShift; double minimumVisibleRelativeProgress; double maximumVisibleRelativeProgress; double relativeProgressMultiplier; struct ContinuousBezier { struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *__begin_; struct CGPoint *__end_; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint *__value_; } __end_cap_; } _points; struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void *__value_; } __end_cap_; } _controlPoints; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint *__begin_; struct CGPoint *__end_; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint *__value_; } __end_cap_; } _casteljauPoints; float _length; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _arcLengths; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _normalizedArcLengths; } bezier; } _curve;
}

@property (readonly, nonatomic) double addOffsetPositiveShift;
@property (readonly, nonatomic) double maximumVisibleRelativeProgress;
@property (readonly, nonatomic) double minimumVisibleRelativeProgress;

/* instance methods */
- (id)init;
- (struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; struct ContinuousBezier { struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint * x0; struct CGPoint * x1; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint * x0; } x2; } x0; struct vector<std::vector<CGPoint>, std::allocator<std::vector<CGPoint>>> { void * x0; void * x1; struct __compressed_pair<std::vector<CGPoint> *, std::allocator<std::vector<CGPoint>>> { void * x0; } x2; } x1; struct vector<CGPoint, std::allocator<CGPoint>> { struct CGPoint * x0; struct CGPoint * x1; struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> { struct CGPoint * x0; } x2; } x2; float x3; struct vector<float, std::allocator<float>> { float * x0; float * x1; struct __compressed_pair<float *, std::allocator<float>> { float * x0; } x2; } x4; struct vector<float, std::allocator<float>> { float * x0; float * x1; struct __compressed_pair<float *, std::allocator<float>> { float * x0; } x2; } x5; } x11; })_currentCurveAttributes;
- (id)copyWithZone:(struct _NSZone *)zone;
- (struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; })zoomedTransform;
- (struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; })perspectiveTransform:(double)transform;
- (BOOL)relativeProgressVisible:(double)visible;
@end

#endif /* CSLAppSwitcherCurve_h */
