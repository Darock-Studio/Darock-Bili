//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLSessionManager_h
#define CSLSessionManager_h
@import Foundation;

#include "BSTransactionObserver-Protocol.h"
#include "CSLApplicationUpgradeMonitor.h"
#include "CSLApplicationUpgradeMonitorDelegate-Protocol.h"
#include "CSLBackgroundSessionTracker.h"
#include "CSLCoreLocationInUseSessionController.h"
#include "CSLFrontmostSessionAppTracker.h"
#include "CSLFrontmostSessionAppTracking-Protocol.h"
#include "CSLMainUIState.h"
#include "CSLNowPlayingSessionPolicy.h"
#include "CSLReturnToAppSettingsManager.h"
#include "CSLReturnToAppSettingsObserver-Protocol.h"
#include "CSLReturnToAppSettingsProviding-Protocol.h"
#include "CSLReturnToClockAnalytics.h"
#include "CSLSession.h"
#include "CSLSessionManaging-Protocol.h"
#include "CSLSessionModel.h"
#include "CSLSessionModelDelegate-Protocol.h"
#include "CSLStickyApplicationProviding-Protocol.h"
#include "CSLStreamingPolicyController.h"
#include "CSLUnseenSessionTracker.h"
#include "CarouselStartupObserver-Protocol.h"
#include "IOSSHLWorkspaceRelaunchObserver-Protocol.h"

@class CSLPRFConcurrentObserverStore, CSLSessionAnalyticsCollector, CSLSessionRelaunchPolicy, NSMutableDictionary, NSSet, NSString;
@protocol OS_dispatch_queue;

@interface CSLSessionManager : NSObject<CSLSessionModelDelegate, BSTransactionObserver, IOSSHLWorkspaceRelaunchObserver, CSLFrontmostSessionAppTracking, CSLApplicationUpgradeMonitorDelegate, CSLReturnToAppSettingsObserver, CarouselStartupObserver, CSLSessionManaging, CSLStickyApplicationProviding> {
  /* instance variables */
  CSLSessionModel *_model;
  CSLPRFConcurrentObserverStore *_observers;
  int _sessionsSettingsChangedNotification;
  CSLUnseenSessionTracker *_unseenSessionTracker;
  CSLBackgroundSessionTracker *_backgroundSessionTracker;
  CSLSessionRelaunchPolicy *_relaunchPolicy;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _assertionLock;
  CSLApplicationUpgradeMonitor *_applicationUpgradeMonitor;
  NSObject<OS_dispatch_queue> *_upgradeMonitorCallQueue;
  NSMutableDictionary *_terminationResistanceAssertions;
  BOOL _workoutSportWatchMode;
  BOOL _autoLaunchMedia;
  BOOL _autoLaunchPhone;
  CSLFrontmostSessionAppTracker *_frontmostSessionAppTracker;
  CSLCoreLocationInUseSessionController *_coreLocationInUseSessionController;
  CSLStreamingPolicyController *_streamingPolicyController;
  BOOL _modelStartComplete;
  id /* block */ _startCompletion;
  CSLReturnToClockAnalytics *_returnToClockAnalytics;
  CSLSessionAnalyticsCollector *_sessionAnalytics;
  CSLSession *_mostRecentlyForegroundedSession;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSSet *sessions;
@property (readonly, nonatomic) NSSet *activelyRunningSessions;
@property (readonly, nonatomic) NSSet *activeSessionApps;
@property (readonly, nonatomic) CSLNowPlayingSessionPolicy *nowPlayingSessionPolicy;
@property (readonly, nonatomic) NSObject<CSLReturnToAppSettingsProviding> *returnToAppSettingsManager;
@property (readonly, nonatomic) CSLMainUIState *activeStickyApplication;

/* class methods */
+ (id)sharedInstance;
+ (id)mostRecentlyForegroundedSessionFromSessions:(id)sessions shouldBeInForegroundEvaluator:(id /* block */)evaluator;

/* instance methods */
- (id)init;
- (void)_withLock:(id /* block */)lock;
- (void)_assertLockHeld:(id /* block */)held;
- (void)_withAssertionLock:(id /* block */)lock;
- (void)dealloc;
- (void)_registerDefaults;
- (void)_readPreferences;
- (void)_preferencesChanged:(BOOL)changed;
- (void)start:(id /* block */)start;
- (void)addObserver:(id)observer;
- (void)removeObserver:(id)observer;
- (id)sessionsForBundleID:(id)id;
- (id)activeSessionsForBundleID:(id)id;
- (id)activeSessions:(long long)sessions;
- (id)mostRecentlyForegroundedSession;
- (void)_updateMostRecentlyForegroundedSessionIfNeeded;
- (BOOL)_shouldSessionBeInForeground:(id)foreground;
- (void)launchSessionAppWithBundleID:(id)id sessionType:(long long)type;
- (BOOL)_shouldPerformNavigationForStartedSession:(id)session;
- (BOOL)_canNavigate;
- (void)_performNavigationForStartedSession:(id)session model:(id)model;
- (void)_rejoinSessionsForApp:(id)app;
- (void)sessionModelDidStart:(id)start;
- (void)_callObserversSessionDidStart:(id)start;
- (void)_callObserversSessionDidEnd:(id)end;
- (void)_callObserversConfigurationChanged;
- (void)_callObserversMostRecentForegroundedSessionChanged;
- (void)_releaseTerminationResistanceAssertion:(id)assertion;
- (void)_acquireTerminationResistanceAssertion:(id)assertion;
- (void)sessionModel:(id)model didStartSession:(id)session;
- (void)sessionModel:(id)model didEndSession:(id)session withOptions:(id)options;
- (BOOL)_isSessionSuperSticky:(id)sticky ifDismissed:(BOOL)dismissed;
- (BOOL)_isSessionSuperSticky:(id)sticky;
- (BOOL)sessionModel:(id)model shouldDismissSession:(id)session;
- (void)sessionModel:(id)model willRestartSession:(id)session;
- (void)sessionModelActiveSessionAppsChanged:(id)changed;
- (void)sessionModel:(id)model didUpdateStateForSession:(id)session resumed:(BOOL)resumed;
- (void)transactionWillBegin:(id)begin;
- (void)transactionDidComplete:(id)complete;
- (BOOL)_shouldRelaunch:(id)relaunch sessionType:(long long)type;
- (long long)workspace:(id)workspace relaunchTypeForApp:(id)app withAddedActions:(id)actions;
- (void)frontmostSessionAppChanged:(id)changed;
- (void)frontmostSessionAppDismissed:(id)dismissed;
- (void)_stopSessions:(id)sessions cancelScheduled:(BOOL)scheduled error:(id)error;
- (void)applicationUpgradeMonitor:(id)monitor removed:(id)removed;
- (void)applicationUpgradeMonitor:(id)monitor upgradeEnded:(id)ended;
- (void)applicationUpgradeMonitor:(id)monitor upgradeStarted:(id)started;
- (void)returnToAppSettingsHaveChanged:(id)changed;
- (void)carouselWillShowUI;
- (void)carouselWillPrelaunch;
@end

#endif /* CSLSessionManager_h */
