//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLHexAppGraph_h
#define CSLHexAppGraph_h
@import Foundation;

#include "CSLHexAppGraphDelegate-Protocol.h"
#include "NSCopying-Protocol.h"
#include "NSFastEnumeration-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class NSMutableDictionary, NSMutableSet, NSString;
@protocol {unordered_map<CSL::Hex, CSLHexAppNode *__unsafe_unretained, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<std::pair<const CSL::Hex, CSLHexAppNode *__unsafe_unretained>>>="__table_"{__hash_table<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>, std::allocator<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>>="__value_"f}}}, {unordered_map<CSL::Hex, int, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<std::pair<const CSL::Hex, int>>>="__table_"{__hash_table<std::__hash_value_type<CSL::Hex, int>, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, int>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, int>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>, std::allocator<std::__hash_value_type<CSL::Hex, int>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, int>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, int>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>>="__value_"f}}};

@interface CSLHexAppGraph : NSObject<NSFastEnumeration, NSCopying, NSSecureCoding> {
  /* instance variables */
  BOOL _neighborCountValid;
  BOOL _normalizedRadiusDirty;
  struct unordered_map<CSL::Hex, CSLHexAppNode *__unsafe_unretained, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<std::pair<const CSL::Hex, CSLHexAppNode *__unsafe_unretained>>> { struct __hash_table<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>, std::allocator<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>> { float __value_; } __p3_; } __table_; } _nodes;
  struct unordered_map<CSL::Hex, int, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<std::pair<const CSL::Hex, int>>> { struct __hash_table<std::__hash_value_type<CSL::Hex, int>, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, int>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, int>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>, std::allocator<std::__hash_value_type<CSL::Hex, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, int>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, int>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, int>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>> { float __value_; } __p3_; } __table_; } _neighborCounts;
}

@property (retain, nonatomic) NSMutableDictionary *nodesByBundle;
@property (retain, nonatomic) NSMutableSet *changedNodes;
@property (weak, nonatomic) NSObject<CSLHexAppGraphDelegate> *delegate;
@property (readonly, nonatomic) float normalizedHorizontalRadius;
@property (readonly, nonatomic) float normalizedVerticalRadius;
@property (readonly, nonatomic) float normalizedVerticalTop;
@property (readonly, nonatomic) float normalizedVerticalBottom;
@property (readonly, nonatomic) int rowCount;
@property (readonly, nonatomic) NSString *abbreviatedDescription;
@property (readonly, nonatomic) BOOL isVerticalOnly;
@property (readonly, nonatomic) BOOL hasDictionaryRepresentation;
@property (nonatomic) unsigned long long lastReorderReason;

/* class methods */
+ (BOOL)supportsSecureCoding;
+ (id)unarchiveFromDictionaryRepresentation:(id)representation;
+ (id)unarchiveFromPropertyList:(id)list;

/* instance methods */
- (id)initVerticalOnly:(BOOL)only;
- (id)init;
- (id)initWithNodes:(id)nodes;
- (id)initWithNodes:(id)nodes verticalOnly:(BOOL)only;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (id)addNodeWithBundleIdentifier:(id)identifier;
- (BOOL)addNode:(id)node;
- (struct Hex { int x0; int x1; })firstGoodEmptyHex;
- (void)removeNode:(id)node;
- (id)removeNodeAtHex:(struct Hex { int x0; int x1; })hex;
- (void)removeNodeUsingIterator:(struct __hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>> { struct __hash_const_iterator<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> { void * x0; } x0; })iterator;
- (void)removeNodeWithoutReflow:(id)reflow;
- (void)removeNodeWithoutReflowUsingIterator:(struct __hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>> { struct __hash_const_iterator<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> { void * x0; } x0; })iterator;
- (void)collapse343ToHex:(struct Hex { int x0; int x1; })hex ignoringNode:(id)node;
- (void)collapseToHex:(struct Hex { int x0; int x1; })hex ignoringNode:(id)node;
- (id)disconnectedNodesCheckingHexes:(struct unordered_set<CSL::Hex, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<CSL::Hex>> { struct __hash_table<CSL::Hex, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<CSL::Hex>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *>, std::allocator<std::__hash_node<CSL::Hex, void *>>> { struct __hash_node_base<std::__hash_node<CSL::Hex, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<CSL::Hex>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<CSL::Hex>> { float x0; } x3; } x0; })hexes;
- (BOOL)checkHexes:(struct unordered_set<CSL::Hex, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<CSL::Hex>> { struct __hash_table<CSL::Hex, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<CSL::Hex>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *>, std::allocator<std::__hash_node<CSL::Hex, void *>>> { struct __hash_node_base<std::__hash_node<CSL::Hex, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<CSL::Hex>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<CSL::Hex>> { float x0; } x3; } x0; })hexes connectedNodes:(id)nodes disconnectedNodes:(id)nodes;
- (BOOL)checkNode:(id)node connectedNodes:(id)nodes disconnectedNodes:(id)nodes;
- (BOOL)isLonelyHex:(struct Hex { int x0; int x1; })hex;
- (void)collapseLonelyNodes:(id)nodes;
- (void)collapseLonelyNodes:(id)nodes connectedNodes:(id)nodes disconnectedNodes:(id)nodes;
- (void)move343Node:(id)node toHex:(struct Hex { int x0; int x1; })hex final:(BOOL)final;
- (void)moveNode:(id)node toHex:(struct Hex { int x0; int x1; })hex final:(BOOL)final;
- (void)commitMovedNode:(id)node withReason:(unsigned long long)reason;
- (void)revertMove;
- (id)nodeWithBundleIdentifier:(id)identifier;
- (BOOL)containsNodeAtHex:(struct Hex { int x0; int x1; })hex;
- (id)nodeAtHex:(struct Hex { int x0; int x1; })hex;
- (void)calculateNeighborCounts;
- (void)incrementNeighborCountsForHex:(struct Hex { int x0; int x1; })hex;
- (void)decrementNeighborCountsForHex:(struct Hex { int x0; int x1; })hex;
- (long long)directNeighborCountOfHex:(struct Hex { int x0; int x1; })hex;
- (BOOL)hex:(struct Hex { int x0; int x1; })hex hasAtLeastNNearbyNodes:(long long)nodes withinRange:(unsigned long long)range;
- (void)resetToDefaults:(id)defaults;
- (id)changeToMatch:(id)match;
- (void)updateNormalizedRadius;
- (long long)_additionalRows;
- (long long)neighborCountOfHex:(struct Hex { int x0; int x1; })hex upToMinimumNeighbors:(long long)neighbors withinRange:(unsigned long long)range;
- (void)moveNode:(id)node toHex:(struct Hex { int x0; int x1; })hex;
- (void)setNode:(id)node toHex:(struct Hex { int x0; int x1; })hex;
- (void)setNodeObject:(id)object forKey:(struct Hex { int x0; int x1; })key;
- (void)removeNodeObjectForKey:(struct Hex { int x0; int x1; })key;
- (BOOL)integrityCheck;
- (BOOL)integrityCheckIgnoringNode:(id)node shouldCheckNeighbors:(BOOL)neighbors;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (unsigned long long)countByEnumeratingWithState:(struct { unsigned long long x0; id * x1; unsigned long long * x2; unsigned long long x3[5] } *)state objects:(id *)objects count:(unsigned long long)count;
- (id)allNodes;
- (unsigned long long)count;
- (id)description;
- (id)archiveToDictionaryRepresentation;
- (id)archiveToPropertyList;
- (id)initFromPropertyList:(id)list;
- (id)_emplaceNodeAtHex:(struct Hex { int x0; int x1; })hex withBundleIdentifier:(id)identifier;
- (id)migrateToVerticalOnly;
- (void)moveNodesToTopWithBundleIdentifiers:(id)identifiers forReason:(unsigned long long)reason;
- (void)moveNodesWithBundleIdentifiers:(id)identifiers toStartingHex:(struct Hex { int x0; int x1; })hex forReason:(unsigned long long)reason;
- (void)collapseAll343Holes;
@end

#endif /* CSLHexAppGraph_h */
