//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLFullScreenIconHexLayout_h
#define CSLFullScreenIconHexLayout_h
@import Foundation;

#include "CSLHexLayout.h"
#include "CSLUniformHexLayout.h"

@protocol {unordered_map<CSL::Hex, CSLHexLayoutAttributes, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<std::pair<const CSL::Hex, CSLHexLayoutAttributes>>>="__table_"{__hash_table<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>, std::allocator<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>>="__value_"f}}};

@interface CSLFullScreenIconHexLayout : CSLHexLayout {
  /* instance variables */
  CSLUniformHexLayout *_uniformLayout;
   _targetPoint;
  double _diameter;
   _diameterScale;
  double _width;
  struct unordered_map<CSL::Hex, CSLHexLayoutAttributes, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<std::pair<const CSL::Hex, CSLHexLayoutAttributes>>> { struct __hash_table<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>, std::allocator<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<CSL::Hex, std::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::equal_to<CSL::Hex>, std::hash<CSL::Hex>>> { float __value_; } __p3_; } __table_; } _attributesCache;
}

/* instance methods */
- (id)initWithConfiguration:(struct HexLayoutConfiguration { float x0; float x1; float x2; float x3; float x4; })configuration;
- (void)setTargetHex:(struct Hex { int x0; int x1; })hex;
- (struct { double x0; })layoutAttributesForItemAtHex:(struct Hex { int x0; int x1; })hex;
- (struct Hex { int x0; int x1; })hexAtPoint:(struct CGPoint { double x0; double x1; })point;
@end

#endif /* CSLFullScreenIconHexLayout_h */
