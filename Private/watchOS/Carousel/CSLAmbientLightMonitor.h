//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLAmbientLightMonitor_h
#define CSLAmbientLightMonitor_h
@import Foundation;

@class CSLPRFConcurrentObserverStore;
@protocol {deque<double, std::allocator<double>>="__map_"{__split_buffer<double *, std::allocator<double *>>="__first_"^^d"__begin_"^^d"__end_"^^d"__end_cap_"{__compressed_pair<double **, std::allocator<double *>>="__value_"^^d}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<double>>="__value_"Q}};

@interface CSLAmbientLightMonitor : NSObject {
  /* instance variables */
  struct __IOHIDEventSystemClient * _client;
  struct deque<double, std::allocator<double>> { struct __split_buffer<double *, std::allocator<double *>> { double * *__first_; double * *__begin_; double * *__end_; struct __compressed_pair<double **, std::allocator<double *>> { double * *__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<double>> { unsigned long long __value_; } __size_; } _runningStatBuffer;
  double _runningStatSum;
  CSLPRFConcurrentObserverStore *_observers;
  unsigned int _runningStatSize;
  BOOL _monitoring;
}

/* class methods */
+ (id)sharedInstance;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)addObserver:(id)observer;
- (void)removeObserver:(id)observer;
- (struct __IOHIDEventSystemClient *)client;
- (void)_startMonitoring;
- (void)_stopMonitoring;
- (double)_addSampleAndComputeMean:(const double *)mean;
- (void)handleIOHIDEvent:(struct __IOHIDEvent *)iohidevent;
@end

#endif /* CSLAmbientLightMonitor_h */
