//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLPressStateApplier_h
#define CSLPressStateApplier_h
@import Foundation;

#include "CSLPressStateApplierDelegate-Protocol.h"

@class CADisplayLink, CASpringAnimation;
@protocol {deque<CSLPressState, std::allocator<CSLPressState>>="__map_"{__split_buffer<CSLPressState *, std::allocator<CSLPressState *>>="__first_"^^{?}"__begin_"^^{?}"__end_"^^{?}"__end_cap_"{__compressed_pair<CSLPressState **, std::allocator<CSLPressState *>>="__value_"^^{?}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<CSLPressState>>="__value_"Q}}, {unordered_multiset<CSL::Hex, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<CSL::Hex>>="__table_"{__hash_table<CSL::Hex, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<CSL::Hex>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *>, std::allocator<std::__hash_node<CSL::Hex, void *>>>="__value_"{__hash_node_base<std::__hash_node<CSL::Hex, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<CSL::Hex>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<CSL::Hex>>="__value_"f}}};

@interface CSLPressStateApplier : NSObject {
  /* instance variables */
  CASpringAnimation *_spring;
  double _springDuration;
  double _updateTime;
  CADisplayLink *_displayLink;
  struct deque<CSLPressState, std::allocator<CSLPressState>> { struct __split_buffer<CSLPressState *, std::allocator<CSLPressState *>> { struct  * *__first_; struct  * *__begin_; struct  * *__end_; struct __compressed_pair<CSLPressState **, std::allocator<CSLPressState *>> { struct  * *__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<CSLPressState>> { unsigned long long __value_; } __size_; } _pressStates;
  struct unordered_multiset<CSL::Hex, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<CSL::Hex>> { struct __hash_table<CSL::Hex, std::hash<CSL::Hex>, std::equal_to<CSL::Hex>, std::allocator<CSL::Hex>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<CSL::Hex, void *> *>, std::allocator<std::__hash_node<CSL::Hex, void *>>> { struct __hash_node_base<std::__hash_node<CSL::Hex, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<CSL::Hex>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<CSL::Hex>> { float __value_; } __p3_; } __table_; } _pressedHexes;
}

@property (weak, nonatomic) NSObject<CSLPressStateApplierDelegate> *delegate;
@property (readonly, nonatomic) BOOL enabled;

/* instance methods */
- (id)init;
- (void)_reversePressStatesAtTime:(double)time;
- (void)clearPressedHex;
- (void)clearAllPresses;
- (void)setPressedHex:(struct Hex { int x0; int x1; })hex;
- (BOOL)isEnabled;
- (BOOL)isEnabledForHex:(struct Hex { int x0; int x1; })hex;
- (struct { double x0; })layoutAttributesForHex:(struct Hex { int x0; int x1; })hex;
- (struct { double x0; })_interpolateBetweenSourceAttributes:(struct { double x0; })attributes targetAttributes:(struct { double x0; })attributes fraction:(double)fraction;
- (struct { double x0; })_interpolateBetweenSourceAttributes:(struct { double x0; })attributes targetAttributes:(struct { double x0; })attributes pressState:(struct { double x0; struct Hex { int x0; int x1; } x1; BOOL x2; double x3; struct { double x0; } x4; })state;
- (struct { double x0; })_computeTargetAttributesForHex:(struct Hex { int x0; int x1; })hex sourceAttributes:(struct { double x0; })attributes forPressState:(struct { double x0; struct Hex { int x0; int x1; } x1; BOOL x2; double x3; struct { double x0; } x4; })state;
- (void)prepareForLayout;
- (void)cleanupAfterLayout;
- (BOOL)_needsDisplayLink;
- (void)_updateDisplayLink;
- (void)_displayLinkFired:(id)fired;
@end

#endif /* CSLPressStateApplier_h */
