//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLSessionXPCServer_h
#define CSLSessionXPCServer_h
@import Foundation;

#include "CSLSSessionServiceXPCInterface-Protocol.h"
#include "CSLSessionAutoLaunchAuthorizationCoordinator.h"
#include "CSLSessionAutoLaunchAuthorizationCoordinatorDelegate-Protocol.h"
#include "CSLSessionXPCServerDelegate-Protocol.h"
#include "NSXPCListenerDelegate-Protocol.h"

@class CSLSessionStartPolicy, NSMutableDictionary, NSString, NSXPCInterface, NSXPCListener;
@protocol OS_dispatch_queue;

@interface CSLSessionXPCServer : NSObject<NSXPCListenerDelegate, CSLSSessionServiceXPCInterface, CSLSessionAutoLaunchAuthorizationCoordinatorDelegate> {
  /* instance variables */
  NSMutableDictionary *_xpcClients;
  NSMutableDictionary *_observers;
  NSMutableDictionary *_typeObserverPIDsByType;
  NSXPCListener *_listener;
  NSXPCInterface *_exportedInterface;
  NSXPCInterface *_remoteInterface;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<OS_dispatch_queue> *_observersXPCCallQueue;
  CSLSessionAutoLaunchAuthorizationCoordinator *_autoLaunchAuthorizationCoordinator;
  CSLSessionStartPolicy *_sessionStartPolicy;
}

@property (weak, nonatomic) NSObject<CSLSessionXPCServerDelegate> *delegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithDelegate:(id)delegate;
- (id)initWithDelegate:(id)delegate startPolicy:(id)policy autoLaunchCoordinator:(id)coordinator start:(BOOL)start;
- (BOOL)listener:(id)listener shouldAcceptNewConnection:(id)connection;
- (void)testAddClient:(id)client;
- (void)testRemoveClient:(id)client;
- (void)_removeScheduledSessionsForConnectionIfNecessary:(id)necessary clientObject:(id)object;
- (void)_removeClientConnectionForPID:(int)pid;
- (void)_queue_removePIDFromObservers:(int)observers;
- (void)connect:(id)connect completion:(id /* block */)completion;
- (void)fetchAllRunningSessionsOfType:(long long)type completion:(id /* block */)completion;
- (void)existingSessionsForBundleID:(id)id completion:(id /* block */)completion;
- (void)existingScheduledSessionsForBundleID:(id)id completion:(id /* block */)completion;
- (void)requestAutoLaunchStatusForSessionType:(long long)type completion:(id /* block */)completion;
- (void)addSessionServiceObserverForBundleID:(id)id completion:(id /* block */)completion;
- (void)removeSessionServiceObserverForBundleID:(id)id completion:(id /* block */)completion;
- (id)_sync_getCurrentXPCClient;
- (void)takeSessionSuppressionAssertion:(id /* block */)assertion;
- (void)releaseSessionSuppressionAssertion:(id /* block */)assertion;
- (void)_queue_addObserver:(int)observer forType:(long long)type;
- (void)_queue_removeObserver:(int)observer forType:(long long)type;
- (void)_queue_removeFromTypeObservers:(int)observers;
- (void)startObservingSessionType:(long long)type completion:(id /* block */)completion;
- (void)stopObservingSessionType:(long long)type completion:(id /* block */)completion;
- (void)startObservingSessionTypes:(id)types completion:(id /* block */)completion;
- (id)_createSessionFromClientSessionIfPossible:(id)possible startDate:(id)date options:(unsigned long long)options;
- (void)_delegateCompletion:(id /* block */)completion error:(id)error;
- (void)startSession:(id)session completion:(id /* block */)completion;
- (void)startSession:(id)session completionWithExpirationDate:(id /* block */)date;
- (void)scheduleSession:(id)session startDate:(id)date options:(unsigned long long)options completion:(id /* block */)completion;
- (void)restartSession:(id)session completion:(id /* block */)completion;
- (void)cancelScheduledSession:(id)session completion:(id /* block */)completion;
- (void)endSession:(id)session completion:(id /* block */)completion;
- (void)endSession:(id)session options:(id)options completion:(id /* block */)completion;
- (void)fetchStickyCapableApps:(id /* block */)apps;
- (void)activateAppForSession:(id)session completion:(id /* block */)completion;
- (id)preflightClientSessionChange:(id)change reason:(id)reason error:(id *)error;
- (void)_informClientThatSessionPausedStateChanged:(id)changed connection:(id)connection error:(id)error;
- (void)_informClientsThatSessionPausedStateChanged:(id)changed error:(id)error;
- (void)_informObserversThatSessionPausedStateChanged:(id)changed error:(id)error;
- (void)pauseSession:(id)session completion:(id /* block */)completion;
- (void)resumeSession:(id)session completion:(id /* block */)completion;
- (void)_informClientThatSessionEnded:(id)ended connection:(id)connection error:(id)error sessionID:(id)id startWasScheduled:(BOOL)scheduled;
- (id)_queue_observersOfType:(long long)type;
- (void)sessionEnded:(id)ended connection:(id)connection error:(id)error;
- (void)_informClientsThatSessionEnded:(id)ended connection:(id)connection error:(id)error;
- (void)_informObserversThatSessionEnded:(id)ended connection:(id)connection error:(id)error;
- (void)_informClientThatSessionChanged:(id)changed started:(BOOL)started connection:(id)connection error:(id)error;
- (void)_queue_informObservers:(id)observers sessionChanged:(id)changed started:(BOOL)started exclude:(id)exclude error:(id)error;
- (void)sessionStarted:(id)started connection:(id)connection error:(id)error;
- (id)authorizationCoordinator:(id)coordinator dataStoreForBundleID:(id)id;
- (BOOL)authorizationCoordinator:(id)coordinator shouldDisplayPromptForBundleID:(id)id;
- (id)authorizationCoordinator:(id)coordinator localizedApplicationNameForBundleID:(id)id;
- (id)_findConnectionForBundleID:(id)id;
- (id)_checkIfConnectionWithPID:(int)pid isAllowed:(id)allowed;
- (id)_checkIfSessionRetrievalIsAllowed:(int)allowed;
- (id)_checkIfSessionStartIsAllowedBy:(id)by session:(id)session;
@end

#endif /* CSLSessionXPCServer_h */
