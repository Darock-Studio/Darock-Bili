//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1112.2.15.0.0
//
#ifndef CSLAlertManager_h
#define CSLAlertManager_h
@import Foundation;

#include "BSInvalidatable-Protocol.h"
#include "CSLAlertClientSoundPolicy.h"
#include "CSLAlertEngine.h"
#include "CSLAlertEngineDelegate-Protocol.h"
#include "CSLAlertManagerButtonHandler.h"
#include "CSLAlertManagerUpdate.h"
#include "CSLAlertPolicy.h"
#include "CSLAlertRootViewController.h"
#include "CSLAlertRootViewControllerDelegate-Protocol.h"
#include "CSLAlertWindow.h"
#include "CSLDNDSource-Protocol.h"
#include "CSLLostModeAlertPolicy.h"
#include "CSLPIControlCenterAssertionManaging-Protocol.h"
#include "CSLRadioTowerAlwaysOnHacks.h"
#include "CSLStickyAlertPolicyDelegate-Protocol.h"
#include "CSLUIStateProviding-Protocol.h"
#include "CSLWatchNotificationsAlertBehaviorCoordinator.h"
#include "CSLWorkspaceRequestHandling-Protocol.h"
#include "CUISAlertProviderDelegate-Protocol.h"
#include "IOSSHLWorkspaceCoordinator-Protocol.h"
#include "OS_os_transaction-Protocol.h"

@class BSSimpleAssertion, CSLPIBacklightAssertion, NSMutableArray, NSMutableDictionary, NSString, SWWakingTimer, WNUIAlertManager, WNUIAlertModel;

@interface CSLAlertManager : NSObject<CUISAlertProviderDelegate, CSLAlertRootViewControllerDelegate, CSLAlertEngineDelegate, CSLDNDSource, CSLStickyAlertPolicyDelegate, IOSSHLWorkspaceCoordinator, CSLWorkspaceRequestHandling, CSLUIStateProviding> {
  /* instance variables */
  CSLAlertWindow *_alertWindow;
  CSLAlertRootViewController *_alertViewController;
  NSMutableArray *_providers;
  NSMutableArray *_alertProviderAdapters;
  BOOL _alertWindowHasBeenShown;
  CSLAlertEngine *_alertEngine;
  CSLAlertPolicy *_alertPolicy;
  CSLAlertClientSoundPolicy *_clientSoundPolicy;
  long long _updateCount;
  CSLAlertManagerUpdate *_update;
  SWWakingTimer *_autoDismissTimer;
  NSObject<BSInvalidatable> *_layoutElement;
  unsigned long long _stateHandler;
  CSLPIBacklightAssertion *_backlightAssertion;
  NSMutableDictionary *_alertExtensionDictionary;
  NSObject<OS_os_transaction> *_alertVisibilityTransaction;
  CSLPIBacklightAssertion *_dynamicGestureAssertion;
  WNUIAlertManager *_alertManager;
  CSLWatchNotificationsAlertBehaviorCoordinator *_behaviorCoordinator;
  CSLRadioTowerAlwaysOnHacks *_alwaysOnHacks;
  CSLLostModeAlertPolicy *_lostModePolicy;
  NSMutableArray *_pendingSuppressionPolicies;
  NSObject<CSLPIControlCenterAssertionManaging> *_controlCenterAssertionManager;
  BSSimpleAssertion *_controlCenterBackdropAssertion;
  CSLAlertManagerButtonHandler *_buttonHandler;
}

@property (readonly, nonatomic) BOOL alertsAllowSilence;
@property (readonly, nonatomic) BOOL needsWatchNotificationsUIStart;
@property (readonly, nonatomic) WNUIAlertModel *alertModel;
@property (readonly, nonatomic) BOOL shouldUseBannerWheelEventWorkaround;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedInstance;
+ (void)createSharedInstance;

/* instance methods */
- (id)extensionControllerForBundleId:(id)id;
- (BOOL)canContinueUserActivity:(id)activity;
- (BOOL)continueUserActivity:(id)activity;
- (BOOL)openURL:(id)url sourceApplication:(id)application;
- (BOOL)canOpenURL:(id)url;
- (BOOL)runTest:(id)test options:(id)options;
- (void)registerAlertProvider:(id)provider;
- (void)loadBundlesAtPath:(id)path withHandler:(id /* block */)handler;
- (void)loadAlertBundlesWithCompletion:(id /* block */)completion;
- (void)loadAlertExtensionBundlesWithCompletion:(id /* block */)completion;
- (id)init;
- (unsigned long long)visibleAlertStackCount;
- (id)visibleAlertIdentifier;
- (id)currentAlertStack;
- (void)startWithConfiguration:(id)configuration;
- (void)_createWatchNotificationsAlertBehaviorCoordinator;
- (void)_notifyAlertWindowPresented;
- (void)_notifyAlertWindowDismissed;
- (void)_notifyAlertPresentationWillEnd;
- (void)_notifyAlertPresentationWillBegin;
- (void)_notifyAlertPresentationDidBegin;
- (void)_notifyAlertPresentationDidEnd;
- (void)_showAlertWindowIfNeeded;
- (void)_dismissAlertWindow;
- (id)alertWindow;
- (void)_createAlertWindow;
- (id)alertWindowButtonHandler;
- (BOOL)handleButtonPressed:(unsigned long long)pressed eventType:(unsigned long long)type;
- (BOOL)_popTopAlertIfPossibleForButtonPress:(unsigned long long)press eventType:(unsigned long long)type;
- (id)currentActiveAlert;
- (id)topAlertOnStack;
- (id)_alertViewController;
- (id)alertProvidersPassingTest:(id /* block */)test;
- (void)_backlightDidTurnOn:(id)on;
- (void)_backlightDidTurnOff:(id)off;
- (void)_startAutoDismissTimer;
- (void)_stopAutoDismissTimer;
- (void)_autoDismissTimerFired;
- (void)autoDismissDisplayedAlertsWithReason:(unsigned long long)reason;
- (void)autoDismissDisplayedAlertsBecauseScreenCovered;
- (void)_checkCoverGestureAssertionForIncomingAlert:(id)alert;
- (void)alertRootViewController:(id)controller didPresentAlert:(id)alert;
- (void)alertRootViewControllerDidEndPresentingAlerts:(id)alerts;
- (void)alertRootViewController:(id)controller willPresentAlert:(id)alert;
- (void)alertRootViewController:(id)controller willBeginDisplayingAlert:(id)alert;
- (void)alertRootViewController:(id)controller willBeginCustomTransitionFromAlert:(id)alert toAlert:(id)alert withAnimator:(id)animator;
- (void)alertProvider:(id)provider requestActivate:(id)activate completion:(id /* block */)completion;
- (unsigned long long)alertProvider:(id)provider requestActivate:(id)activate animated:(BOOL)animated;
- (BOOL)validateRequestFromProvider:(id)provider controller:(id)controller;
- (void)alertProvider:(id)provider requestDeactivate:(id)deactivate;
- (void)alertProvider:(id)provider requestDeactivate:(id)deactivate animated:(BOOL)animated;
- (void)alertProvider:(id)provider requestDeactivate:(id)deactivate launchApp:(id)app withURL:(id)url annotation:(id)annotation actions:(id)actions animated:(BOOL)animated;
- (BOOL)alertProvider:(id)provider requestReplaceAlert:(id)alert withAlert:(id)alert animator:(id)animator;
- (unsigned long long)audioFeedbackAllowedForAlertName:(id)name;
- (unsigned long long)audioFeedbackAllowedForAlertName:(id)name options:(unsigned long long)options;
- (void)audioFeedbackAllowedForAlertName:(id)name completion:(id /* block */)completion;
- (unsigned long long)alertProvider:(id)provider preflightActivationForViewController:(id)controller;
- (BOOL)isAlertViewControllerTopmost:(id)topmost;
- (void)alertEngineWillChangeActivatedItems:(id)items;
- (void)alertEngineDidChangeActivatedItems:(id)items;
- (void)updateAlertBackgroundsIfNeededForAlert:(id)alert;
- (id)visibleAlertUnderAlert:(id)alert;
- (void)beginUpdates;
- (void)endUpdates;
- (void)executeUpdate:(id)update withTransaction:(id)transaction;
- (void)changeAlertActivationStateForUpdate:(id)update;
- (void)updateSuppressedAlertsForUpdate:(id)update;
- (id)alertsTransactionForCurrentState;
- (id)_currentUpdate;
- (void)setControlCenterAssertionManager:(id)manager;
- (void)changeControlCenterAssertionsForUpdate:(id)update;
- (BOOL)itemPrefersControlCenterMaterial:(id)material;
- (void)_showControlCenterMaterialIfNecessary;
- (void)_hideControlCenterMaterialIfNecessary;
- (id)existingAlertItemForViewController:(id)controller;
- (BOOL)shouldDNDGestureRecognize;
- (void)doNotDisturbGestureStartedRecognition:(id)recognition;
- (void)doNotDisturbGestureRecognized:(id)recognized;
- (id)policyAssertionForPolicy:(id)policy;
- (id)registerSuppressionPolicy:(id)policy forReason:(id)reason;
- (void)_unregisterSuppressionPolicy:(id)policy;
- (void)populateUIState:(id)uistate;
- (void)handleWorkspaceRequest:(id)request withTransitionCoordinator:(id)coordinator;
- (BOOL)stickyAlertPolicy:(id)policy isAlertItemSticky:(id)sticky;
- (struct os_state_data_s { unsigned int x0; union { unsigned int x0 :32; unsigned int x1; } x1; struct os_state_data_decoder_s { char x0[64] char x1[64] } x2; char x3[64] unsigned char x4[0] } *)_stateDataWithHints:(struct os_state_hints_s { unsigned int x0; char * x1; unsigned int x2; unsigned int x3; } *)hints;
- (void)_updateLayoutElementWithAlertIdentifier:(id)identifier;
- (void)_invalidateLayoutElement;
- (id)layoutElementWithAlertIdentifier:(id)identifier;
- (void)handleOpenApplicationRequest:(id)request withCompletion:(id /* block */)completion;
@end

#endif /* CSLAlertManager_h */
