//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 25.300.51.0.0
//
#ifndef SKAStatusServer_h
#define SKAStatusServer_h
@import Foundation;

#include "NSXPCListenerDelegate-Protocol.h"
#include "SKAChannelManaging-Protocol.h"
#include "SKAChannelManagingDelegate-Protocol.h"
#include "SKADatabaseManaging-Protocol.h"
#include "SKADatabaseManagingDelegate-Protocol.h"
#include "SKADatabaseProviding-Protocol.h"
#include "SKADatabaseProvidingDelegate-Protocol.h"
#include "SKAIDSDeviceProviding-Protocol.h"
#include "SKAInvitationManaging-Protocol.h"
#include "SKAInvitationManagingDelegate-Protocol.h"
#include "SKAMessagingProviding-Protocol.h"
#include "SKAMessagingProvidingDelegate-Protocol.h"
#include "SKAPresenceClientDelegate-Protocol.h"
#include "SKAPresenceManaging-Protocol.h"
#include "SKAPresenceManagingDelegate-Protocol.h"
#include "SKAStatusEncryptionManaging-Protocol.h"
#include "SKAStatusPublishingManaging-Protocol.h"
#include "SKAStatusPublishingServiceClientDelegate-Protocol.h"
#include "SKAStatusReceivingManaging-Protocol.h"
#include "SKAStatusReceivingManagingDelegate-Protocol.h"
#include "SKAStatusSubscriptionManaging-Protocol.h"
#include "SKAStatusSubscriptionServiceClientDelegate-Protocol.h"

@class NSArray, NSMutableArray, NSString, NSXPCListener;
@protocol OS_dispatch_queue;

@interface SKAStatusServer : NSObject<NSXPCListenerDelegate, SKADatabaseProvidingDelegate, SKAMessagingProvidingDelegate, SKAChannelManagingDelegate, SKAStatusReceivingManagingDelegate, SKADatabaseManagingDelegate, SKAInvitationManagingDelegate, SKAStatusPublishingServiceClientDelegate, SKAStatusSubscriptionServiceClientDelegate, SKAPresenceClientDelegate, SKAPresenceManagingDelegate, SKAIDSDeviceProviding>

@property (retain, nonatomic) NSXPCListener *publishingServiceListener;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *publishingServiceConnectionQueue;
@property (retain, nonatomic) NSMutableArray *publishingServiceConnectedClients;
@property (retain, nonatomic) NSXPCListener *subscriptionServiceListener;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *subscriptionServiceConnectionQueue;
@property (retain, nonatomic) NSMutableArray *subscriptionServiceConnectedClients;
@property (retain, nonatomic) NSXPCListener *presenceListener;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *presenceConnectionQueue;
@property (retain, nonatomic) NSMutableArray *presenceConnectedClients;
@property (retain, nonatomic) NSObject<SKADatabaseManaging> *databaseManager;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *invitationManagerMessagingQueue;
@property (retain, nonatomic) NSObject<SKAMessagingProviding> *invitationMessagingProvider;
@property (retain, nonatomic) NSObject<SKAInvitationManaging> *invitationManager;
@property (retain, nonatomic) NSObject<SKAChannelManaging> *channelManager;
@property (retain, nonatomic) NSObject<SKAStatusPublishingManaging> *publishingManager;
@property (retain, nonatomic) NSObject<SKAStatusSubscriptionManaging> *subscriptionManager;
@property (retain, nonatomic) NSObject<SKAPresenceManaging> *presenceManager;
@property (retain, nonatomic) NSObject<SKAStatusEncryptionManaging> *encryptionManager;
@property (retain, nonatomic) NSObject<SKAStatusReceivingManaging> *statusReceivingManager;
@property (nonatomic) BOOL trafficModeEnabled;
@property (retain, nonatomic) NSObject<SKADatabaseProviding> *databaseProvider;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *idsDevices;

/* class methods */
+ (id)sharedInstance;
+ (id)logger;

/* instance methods */
- (id)init;
- (void)shutdown;
- (void)logState;
- (BOOL)listener:(id)listener shouldAcceptNewConnection:(id)connection;
- (BOOL)_publishingServiceListener:(id)listener shouldAcceptNewConnection:(id)connection;
- (BOOL)_presenceServiceListener:(id)listener shouldAcceptNewConnection:(id)connection;
- (BOOL)_subscriptionServiceListener:(id)listener shouldAcceptNewConnection:(id)connection;
- (void)subscriptionServiceClientWasInvalidated:(id)invalidated;
- (void)publishingServiceClientWasInvalidated:(id)invalidated;
- (void)presenceClientWasInvalidated:(id)invalidated;
- (void)databaseDidReceiveRemoteChangesForChannels:(id)channels;
- (void)service:(id)service didReceiveIncomingMessage:(id)message fromID:(id)id toID:(id)id messageGuid:(id)guid;
- (void)service:(id)service outgoingMessageWithIdentifier:(id)identifier fromID:(id)id toID:(id)id didSendWithSuccess:(BOOL)success;
- (void)networkBecameReachable;
- (void)channelManager:(id)manager didReceiveData:(id)data onChannel:(id)channel identifier:(unsigned long long)identifier dateReceived:(id)received dateExpired:(id)expired;
- (void)channelManager:(id)manager failedToSubscribeToChannel:(id)channel withError:(id)error;
- (void)statusReceivingManager:(id)manager didReceiveStatusUpdate:(id)update onChannel:(id)channel;
- (void)donateReceivedStatusToBiomeOnChannel:(id)channel;
- (id)_senderHandlesForChannel:(id)channel;
- (BOOL)_shouldDonateToBiomeForStatusTypeIdentifier:(id)identifier;
- (void)databaseManager:(id)manager didCreateChannel:(id)channel;
- (void)presenceManager:(id)manager didReceivePresentDevicesUpdateForPresenceIdentifier:(id)identifier;
- (void)presenceManager:(id)manager didCreateChannel:(id)channel;
- (void)presenceManager:(id)manager didRequestToRollChannel:(id)channel;
- (void)invitationManager:(id)manager didReceiveInvitation:(id)invitation forChannel:(id)channel;
- (void)_notifyPresenceClientsIfNeededOfChannelChangeForChannel:(id)channel;
- (void)invitationManager:(id)manager didRevokeInvitationOnChannel:(id)channel;
- (BOOL)_kettleFeatureEnabled;
- (BOOL)_inTextTrafficMode;
- (void)_setupMaintenanceActivity;
- (id)registerIDSDeviceChangedObserver:(id /* block */)observer;
- (void)unregisterIDSDeviceChangedObserver:(id)observer;
@end

#endif /* SKAStatusServer_h */
