//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 25.300.51.0.0
//
#ifndef SKAStatusSubscriptionServiceClient_h
#define SKAStatusSubscriptionServiceClient_h
@import Foundation;

#include "SKAClientConnectionRepresentable-Protocol.h"
#include "SKADatabaseManaging-Protocol.h"
#include "SKAStatusEncryptionManaging-Protocol.h"
#include "SKAStatusSubscriptionManaging-Protocol.h"
#include "SKAStatusSubscriptionServiceClientConnection.h"
#include "SKAStatusSubscriptionServiceClientConnectionLifecycleDelegate-Protocol.h"
#include "SKAStatusSubscriptionServiceClientDelegate-Protocol.h"
#include "SKStatusSubscriptionDaemonProtocol-Protocol.h"

@class NSString;
@protocol OS_dispatch_queue, OS_os_transaction;

@interface SKAStatusSubscriptionServiceClient : NSObject<SKStatusSubscriptionDaemonProtocol, SKAClientConnectionRepresentable, SKAStatusSubscriptionServiceClientConnectionLifecycleDelegate>

@property (retain, nonatomic) SKAStatusSubscriptionServiceClientConnection *clientConnection;
@property (weak, nonatomic) NSObject<SKAStatusSubscriptionServiceClientDelegate> *delegate;
@property (retain, nonatomic) NSObject<SKADatabaseManaging> *databaseManager;
@property (retain, nonatomic) NSObject<SKAStatusSubscriptionManaging> *subscriptionManager;
@property (nonatomic) BOOL accountCheckCompleted;
@property (nonatomic) BOOL accountIsStatusKitCapable;
@property (retain, nonatomic) NSObject<SKAStatusEncryptionManaging> *encryptionManager;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) BOOL trafficModeEnabled;
@property (readonly, copy, nonatomic) NSString *statusTypeIdenfifier;
@property (retain, nonatomic) NSObject<OS_os_transaction> *transaction;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)_missingEntitlmentErrorForStatusTypeIdentifier:(id)identifier;
+ (id)_genericMissingSubscriptionEntitlmentError;
+ (id)_accountNotCapableError;
+ (id)_inTrafficError;
+ (id)_subscriptionIdentifierNotFoundError:(id)error;
+ (id)logger;

/* instance methods */
- (id)initWithXPCConnection:(id)xpcconnection queue:(id)queue delegate:(id)delegate databaseManager:(id)manager subscriptionManager:(id)manager encryptionManager:(id)manager inTrafficMode:(BOOL)mode;
- (void)handleRemoteDatabaseChangeForChannels:(id)channels;
- (void)handleReceivedStatusUpdate:(id)update onChannel:(id)channel;
- (void)handleReceivedInvitationForChannel:(id)channel;
- (id)_subscriptionMetadataForChannel:(id)channel;
- (id)_handlesAssociatedWithChannel:(id)channel;
- (id)_currentStatusForChannel:(id)channel;
- (BOOL)channelMatchesClientStatusTypeIdentifier:(id)identifier;
- (void)subscriptionServiceClientConnectionWasInterrupted:(id)interrupted;
- (void)subscriptionServiceClientConnectionWasInvalidated:(id)invalidated;
- (void)subscriptionMetadataForHandle:(id)handle statusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)allSubscriptionMetadatasForStatusTypeIdentifier:(id)identifier includingPersonalSubscription:(BOOL)subscription completion:(id /* block */)completion;
- (void)allSubscriptionMetadatasWithActiveAssertionsForStatusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)allSubscriptionMetadatasWithActiveSubscriptionsForStatusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)allStatusSubscriptionsWithPersistentSubscriptionAssertionForApplicationIdentifier:(id)identifier statusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)subscriptionMetadataForPersonalSubscriptionWithStatusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)registerForDelegateCallbacksWithStatusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)retainTransientSubscriptionAssertionForSubscriptionIdentifier:(id)identifier statusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)releaseTransientSubscriptionAssertionForSubscriptionIdentifier:(id)identifier statusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)retainPersistentSubscriptionAssertionForSubscriptionIdentifier:(id)identifier statusTypeIdentifier:(id)identifier applicationIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)releasePersistentSubscriptionAssertionForSubscriptionIdentifier:(id)identifier statusTypeIdentifier:(id)identifier applicationIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)deleteSubscriptionWithIdentifier:(id)identifier statusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)subscriptionValidationTokensForHandle:(id)handle statusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)validatePersonalStatusSubscriptionMatchesSubscriptionValidationTokens:(id)tokens fromSender:(id)sender statusTypeIdentifier:(id)identifier completion:(id /* block */)completion;
- (long long)validatePersonalChannel:(id)channel matchesSubscriptionValidationToken:(id)token fromSender:(id)sender;
- (long long)validatePersonalChannel:(id)channel matchesEncryptionValidationToken:(id)token fromSender:(id)sender;
- (BOOL)_validateChannelIsKnownForSubscriptionIdentifier:(id)identifier statusTypeIdentifier:(id)identifier databaseContext:(id)context;
- (void)accountIsStatusKitCapableWithCompletion:(id /* block */)completion;
@end

#endif /* SKAStatusSubscriptionServiceClient_h */
