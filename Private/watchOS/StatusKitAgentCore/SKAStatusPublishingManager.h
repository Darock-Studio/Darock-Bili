//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 25.300.51.0.0
//
#ifndef SKAStatusPublishingManager_h
#define SKAStatusPublishingManager_h
@import Foundation;

#include "SKAAccountProviding-Protocol.h"
#include "SKAChannelManaging-Protocol.h"
#include "SKADatabaseManaging-Protocol.h"
#include "SKAInvitationManaging-Protocol.h"
#include "SKAStatusEncryptionManaging-Protocol.h"
#include "SKAStatusPublishingManaging-Protocol.h"

@class NSString;
@protocol OS_dispatch_queue;

@interface SKAStatusPublishingManager : NSObject<SKAStatusPublishingManaging>

@property (retain, nonatomic) NSObject<SKADatabaseManaging> *databaseManager;
@property (retain, nonatomic) NSObject<SKAChannelManaging> *channelManager;
@property (retain, nonatomic) NSObject<SKAStatusEncryptionManaging> *encryptionManager;
@property (retain, nonatomic) NSObject<SKAAccountProviding> *accountProvider;
@property (retain, nonatomic) NSObject<SKAInvitationManaging> *invitationManager;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *internalWorkQueue;
@property BOOL pendingRequestScheduled;
@property BOOL clientIsRateLimited;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)logger;
+ (id)_noPersonalChannelErrorForStatusTypeIdentifier:(id)identifier;
+ (id)_errorForStatusPublishRequestWithIdentifier:(id)identifier requestedStatusCreationDate:(id)date isOlderThanExistingStatus:(id)status existingStatusCreationDate:(id)date;
+ (id)_errorForDuplicateStatusPublishRequestWithIdentifier:(id)identifier;
+ (id)_errorForRateLimit;

/* instance methods */
- (id)initWithDatabaseManager:(id)manager channelManager:(id)manager accountProvider:(id)provider encryptionManager:(id)manager invitationManager:(id)manager;
- (void)publishStatusRequest:(id)request statusTypeIdentifier:(id)identifier afterTime:(double)time isPendingPublish:(BOOL)publish completion:(id /* block */)completion;
- (void)removePendingPublishRequestsForStatusTypeIdentifier:(id)identifier olderThanRequest:(id)request;
- (void)_publishStatusRequest:(id)request statusTypeIdentifier:(id)identifier afterTime:(double)time isPendingPublish:(BOOL)publish retryCount:(unsigned long long)count completion:(id /* block */)completion;
- (void)publishPendingRequestsWithDelay:(double)delay;
- (void)publishPendingRequestForReason:(long long)reason;
- (BOOL)_shouldAllowPublishForPublishRequest:(id)request onChannel:(id)channel error:(id *)error;
- (BOOL)_shouldClientRateLimit;
- (void)_markPublishAttempt;
- (void)_removePendingPublishRequestsForStatusTypeIdentifier:(id)identifier olderThanRequest:(id)request databaseContext:(id)context;
- (void)ensurePendingPublishRequestExistsWithPublishRequest:(id)request forStatusTypeIdentifier:(id)identifier databaseContext:(id)context;
- (void)findOrCreatePersonalChannelForStatusTypeIdentifier:(id)identifier databaseContext:(id)context completion:(id /* block */)completion;
- (void)createPersonalChannelForStatusTypeIdentifier:(id)identifier databaseContext:(id)context completion:(id /* block */)completion;
- (void)_removePendingPublishRequestWithUniqueIdentifier:(id)identifier databaseContext:(id)context;
- (BOOL)_shouldReauthForError:(id)error;
- (BOOL)_shouldAbandonRequestForError:(id)error;
- (BOOL)_shouldRollChannelForError:(id)error;
- (BOOL)_shouldRetryWithDelayForError:(id)error;
- (double)_pendingDelayTime;
- (double)_rateLimitDelayTime;
- (long long)_maxRetryCount;
- (long long)_maxRapidPublishes;
- (double)_rapidPublishesTimescale;
@end

#endif /* SKAStatusPublishingManager_h */
