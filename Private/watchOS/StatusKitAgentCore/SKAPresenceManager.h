//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 25.300.51.0.0
//
#ifndef SKAPresenceManager_h
#define SKAPresenceManager_h
@import Foundation;

#include "SKAAccountProviding-Protocol.h"
#include "SKAChannelManaging-Protocol.h"
#include "SKADatabaseManaging-Protocol.h"
#include "SKAMessagingProviding-Protocol.h"
#include "SKAPresenceManaging-Protocol.h"
#include "SKAPresenceManagingDelegate-Protocol.h"
#include "SKAStatusSubscriptionManaging-Protocol.h"

@class NSMapTable, NSString;
@protocol OS_dispatch_queue;

@interface SKAPresenceManager : NSObject<SKAPresenceManaging>

@property (retain, nonatomic) NSMapTable *activePresenceAssertionsByClient;
@property (retain, nonatomic) NSMapTable *activeParticipantsByChannel;
@property (retain, nonatomic) NSObject<SKADatabaseManaging> *databaseManager;
@property (retain, nonatomic) NSObject<SKAChannelManaging> *channelManager;
@property (retain, nonatomic) NSObject<SKAAccountProviding> *accountProvider;
@property (retain, nonatomic) NSObject<SKAMessagingProviding> *messagingProvider;
@property (retain, nonatomic) NSObject<SKAStatusSubscriptionManaging> *subscriptionManager;
@property (weak, nonatomic) NSObject<SKAPresenceManagingDelegate> *delegate;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *internalWorkQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *payloadUpdateProcessingQueue;
@property (nonatomic) BOOL presenceEnabledByServer;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *channelFetchQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)_noExistingAssertionError;
+ (id)_noExistingChannelError;
+ (id)_keyGenerationError;
+ (id)_payloadGenerationError;
+ (id)_payloadOversizeError;
+ (id)_presenceDisabledError;
+ (id)_channelCreationTimeoutError;
+ (id)_unexpectedInternalError;
+ (id)logger;
+ (id)oversizeLogger;

/* instance methods */
- (id)initWithDatabaseManager:(id)manager channelManager:(id)manager subscriptionManager:(id)manager accountProvider:(id)provider messagingProvider:(id)provider delegate:(id)delegate;
- (void)retainPresenceAssertionForPresenceIdentifier:(id)identifier withPresencePayload:(id)payload options:(id)options client:(id)client completion:(id /* block */)completion;
- (BOOL)_clientPayload:(id)payload isValidWithError:(id *)error;
- (void)_sendPresenceAssertionMessageForChannel:(id)channel withPayload:(id)payload options:(id)options isRefresh:(BOOL)refresh completion:(id /* block */)completion;
- (void)_sendPollingMessageForChannel:(id)channel completion:(id /* block */)completion;
- (void)_handleBulkUpdateParticipantPayloads:(id)payloads forChannel:(id)channel;
- (void)releasePresenceAssertionForPresenceIdentifier:(id)identifier options:(id)options client:(id)client completion:(id /* block */)completion;
- (void)_sendPresenceDeactivationMessageForChannel:(id)channel options:(id)options completion:(id /* block */)completion;
- (void)releaseAllPresenceAssertionsAssociatedWithClient:(id)client options:(id)options completion:(id /* block */)completion;
- (void)presentDevicesForPresenceIdentifier:(id)identifier isPersonal:(BOOL)personal completion:(id /* block */)completion;
- (void)channelReceivedIncomingPayloadUpdate:(id)update channel:(id)channel withIdentifier:(unsigned long long)identifier;
- (void)_handleIncomingPayloadUpdate:(id)update onChannel:(id)channel withIdentifier:(unsigned long long)identifier;
- (void)findOrCreatePresenceChannelForPresenceIdentifier:(id)identifier options:(id)options databaseContext:(id)context completion:(id /* block */)completion;
- (void)findPresenceChannelForPresenceIdentifier:(id)identifier isPersonal:(BOOL)personal databaseContext:(id)context completion:(id /* block */)completion;
- (void)createPresenceChannelForPresenceIdentifier:(id)identifier options:(id)options databaseContext:(id)context completion:(id /* block */)completion;
- (void)_presentDevicesChangedForChannel:(id)channel;
- (unsigned long long)_currentCheckpointForChannel:(id)channel;
- (void)_setCheckpointForChannel:(id)channel checkpoint:(unsigned long long)checkpoint;
- (BOOL)_addPresenceAssertionForClient:(id)client presenceIdentifier:(id)identifier options:(id)options payload:(id)payload;
- (BOOL)_removePresenceAssertionForClient:(id)client presenceIdentifier:(id)identifier;
- (id)_activePresenceAssertionsForClient:(id)client;
- (BOOL)_addPresentDeviceForChannel:(id)channel presentDevice:(id)device;
- (BOOL)_removePresentDeviceForChannel:(id)channel presentDevice:(id)device;
- (id)_activePresentDevicesForChannel:(id)channel;
- (void)_clearPresentDevicesForChannel:(id)channel;
- (id)_sortAndDedupePresenceIdentifiers:(id)identifiers;
- (void)_recalculateActivityTracking;
- (BOOL)_activePresenceAssertionsExist;
- (id)_activePresenceAssertionForPresenceIdentifier:(id)identifier;
- (id)_currentPayloadForPresenceIdentifier:(id)identifier;
- (void)_findOrCreatePresenceChannelForPresenceIdentifier:(id)identifier options:(id)options databaseContext:(id)context completion:(id /* block */)completion;
- (void)_findPresenceChannelForPresenceIdentifier:(id)identifier isPersonal:(BOOL)personal databaseContext:(id)context completion:(id /* block */)completion;
- (void)_createPresenceChannelForPresenceIdentifier:(id)identifier options:(id)options databaseContext:(id)context completion:(id /* block */)completion;
- (void)_presencePayloadForChannel:(id)channel clientPayload:(id)payload options:(id)options timestamp:(id)timestamp completion:(id /* block */)completion;
- (id)_presentDeviceFromPayload:(id)payload onChannel:(id)channel;
- (id)_mostRecentAssertionTimeForTokenURI:(id)uri onChannel:(id)channel;
- (id)_deviceIdentifierForToken:(id)token;
- (BOOL)_shouldReauthForError:(id)error;
- (void)_rollChannelForCryptoFailureIfAllowed:(id)allowed;
- (BOOL)_shouldReassert;
- (void)_markReassert;
- (BOOL)_shouldCryptoRoll;
- (void)_markCryptoRoll;
- (long long)_reassertResetTimeSeconds;
- (long long)_cryptoRollResetTimeSeconds;
- (long long)_maxPayloadSizeBytes;
@end

#endif /* SKAPresenceManager_h */
