//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1299.2.3.1.0
//
#ifndef _CSStoreAccessContext_h
#define _CSStoreAccessContext_h
@import Foundation;

@protocol {CSStoreAccessContext="_impl"{variant<CSStore2::CSStoreNullAccessContext, CSStore2::CSStoreQueueAccessContext, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext>="__impl_"{__impl<CSStore2::CSStoreNullAccessContext, CSStore2::CSStoreQueueAccessContext, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext>="__data"(__union<std::__variant_detail::_Trait::_Available, 0UL, CSStore2::CSStoreNullAccessContext, CSStore2::CSStoreQueueAccessContext, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext>="__dummy"c"__head"{__alt<0UL, CSStore2::CSStoreNullAccessContext>="__value"{CSStoreNullAccessContext=}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 1UL, CSStore2::CSStoreQueueAccessContext, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext>="__dummy"c"__head"{__alt<1UL, CSStore2::CSStoreQueueAccessContext>="__value"{CSStoreQueueAccessContext="_q"@"NSObject<OS_dispatch_queue>"}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 2UL, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext>="__dummy"c"__head"{__alt<2UL, CSStore2::CSStoreDebugQueueAccessContext>="__value"{CSStoreDebugQueueAccessContext="_q"@"NSObject<OS_dispatch_queue>""_assertQueue"^?"_assertQueueBarrier"^?}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 3UL, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext>="__dummy"c"__head"{__alt<3UL, CSStore2::CSStoreUnfairLockAccessContext>="__value"{CSStoreUnfairLockAccessContext="_lock"^{os_unfair_lock_s}"_writeOK"B}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 4UL, CSStore2::CSStoreSharedReadingAccessContext>="__dummy"c"__head"{__alt<4UL, CSStore2::CSStoreSharedReadingAccessContext>="__value"{CSStoreSharedReadingAccessContext="_lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}"_threads"{unordered_set<_opaque_pthread_t *, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>, std::allocator<_opaque_pthread_t *>>="__table_"{__hash_table<_opaque_pthread_t *, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>, std::allocator<_opaque_pthread_t *>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *>, std::allocator<std::__hash_node<_opaque_pthread_t *, void *>>>="__value_"{__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<_opaque_pthread_t *>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<_opaque_pthread_t *>>="__value_"f}}}}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 5UL>=))))))"__index"I}}};

@interface _CSStoreAccessContext : NSObject {
  /* instance variables */
  struct CSStoreAccessContext { struct variant<CSStore2::CSStoreNullAccessContext, CSStore2::CSStoreQueueAccessContext, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext> { struct __impl<CSStore2::CSStoreNullAccessContext, CSStore2::CSStoreQueueAccessContext, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext> { union __union<std::__variant_detail::_Trait::_Available, 0UL, CSStore2::CSStoreNullAccessContext, CSStore2::CSStoreQueueAccessContext, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext> { char __dummy; struct __alt<0UL, CSStore2::CSStoreNullAccessContext> { struct CSStoreNullAccessContext __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 1UL, CSStore2::CSStoreQueueAccessContext, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext> { char __dummy; struct __alt<1UL, CSStore2::CSStoreQueueAccessContext> { struct CSStoreQueueAccessContext { NSObject<OS_dispatch_queue> *_q; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 2UL, CSStore2::CSStoreDebugQueueAccessContext, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext> { char __dummy; struct __alt<2UL, CSStore2::CSStoreDebugQueueAccessContext> { struct CSStoreDebugQueueAccessContext { NSObject<OS_dispatch_queue> *_q; undefined *_assertQueue; undefined *_assertQueueBarrier; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 3UL, CSStore2::CSStoreUnfairLockAccessContext, CSStore2::CSStoreSharedReadingAccessContext> { char __dummy; struct __alt<3UL, CSStore2::CSStoreUnfairLockAccessContext> { struct CSStoreUnfairLockAccessContext { struct os_unfair_lock_s *_lock; BOOL _writeOK; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 4UL, CSStore2::CSStoreSharedReadingAccessContext> { char __dummy; struct __alt<4UL, CSStore2::CSStoreSharedReadingAccessContext> { struct CSStoreSharedReadingAccessContext { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock; struct unordered_set<_opaque_pthread_t *, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>, std::allocator<_opaque_pthread_t *>> { struct __hash_table<_opaque_pthread_t *, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>, std::allocator<_opaque_pthread_t *>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *>, std::allocator<std::__hash_node<_opaque_pthread_t *, void *>>> { struct __hash_node_base<std::__hash_node<_opaque_pthread_t *, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<_opaque_pthread_t *>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<_opaque_pthread_t *>> { float __value_; } __p3_; } __table_; } _threads; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 5UL> __tail; } __tail; } __tail; } __tail; } __tail; } __data; unsigned int __index; } __impl_; } _impl; } _impl;
}

/* instance methods */
- (id)initForSharedReading;
- (id)description;
@end

#endif /* _CSStoreAccessContext_h */
