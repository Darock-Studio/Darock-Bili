//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1299.2.3.1.0
//
#ifndef _CSStore_h
#define _CSStore_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"
#include "_CSStoreAccessContext.h"

@protocol {Store="dataContainer"@"tableOffsets"{array<unsigned int, 64UL>="__elems_"[64I]}"arrayTable"^{Table}"stringTable"^{Table}"dictionaryTable"^{Table}"enumerationState"{atomic<long long>="__a_"{__cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>>="__a_value"Aq}}"getNSDataCallCount"{atomic<long long>="__a_"{__cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>>="__a_value"Aq}}"pedigree"{Pedigree="family"Q"generationAtCopyTime"{optional<unsigned int>=""(?="__null_state_"c"__val_"I)"__engaged_"B}}"flags"{?="readonly"b1}};

@interface _CSStore : NSObject<NSSecureCoding> {
  /* instance variables */
  struct Store { tableOffsets *dataContainer; struct array<unsigned int, 64UL> { unsigned int x[64] __elems_; } x0; struct Table *arrayTable; struct Table *stringTable; struct Table *dictionaryTable; struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } enumerationState; struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } getNSDataCallCount; struct Pedigree { unsigned long long family; struct optional<unsigned int> { union { char __null_state_; unsigned int __val_; } x0; BOOL __engaged_; } generationAtCopyTime; } pedigree; struct { unsigned int x :1 readonly; } flags; } _store;
  _CSStoreAccessContext *_accessContext;
}

@property (nonatomic) BOOL readOnly;

/* class methods */
+ (void)initialize;
+ (id)new;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)init;
- (id)initByMovingStore:(void *)store;
- (id)initWithError:(id *)error;
- (id)initWithContentsOfURL:(id)url error:(id *)error;
- (void)setAccessContext:(id)context;
- (BOOL)isReadOnly;
- (id)mutableCopyWithZone:(struct _NSZone *)zone error:(id *)error;
- (id)description;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
@end

#endif /* _CSStore_h */
