//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HMDRemoteEventRouterServer_h
#define HMDRemoteEventRouterServer_h
@import Foundation;

#include "HMDEventRouterTimerProvider.h"
#include "HMDRemoteEventRouterServerDataSource-Protocol.h"
#include "HMDRemoteEventRouterServerMessageReceiver.h"
#include "HMEMessageDatagramServerDataSource-Protocol.h"
#include "HMEMessageDatagramServerDelegate-Protocol.h"
#include "HMFLogging-Protocol.h"
#include "HMFMessageReceiver-Protocol.h"
#include "HMMLogEventSubmitting-Protocol.h"

@class HMEMessageDatagramServer, HMFMessageDispatcher, NSMutableArray, NSMutableDictionary, NSNotificationCenter, NSString, NSUUID;
@protocol OS_dispatch_queue, OS_os_log;

@interface HMDRemoteEventRouterServer : NSObject<HMFLogging, HMFMessageReceiver, HMEMessageDatagramServerDataSource, HMEMessageDatagramServerDelegate> {
  /* instance variables */
  NSObject<OS_os_log> *_logger;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  BOOL _isPrimaryResident;
  BOOL _isResidentEventProviding;
  double _diagnosticLastConnectTime;
  NSObject<OS_dispatch_queue> *_workQueue;
  NSUUID *_homeUUID;
  NSUUID *_accessoryUUID;
  NSString *_routerRequestMessageName;
  NSString *_routerUpdateMessageName;
  HMFMessageDispatcher *_messageDispatcher;
  NSNotificationCenter *_notificationCenter;
  HMDEventRouterTimerProvider *_timerProvider;
  HMEMessageDatagramServer *_connectionServer;
  NSObject<HMDRemoteEventRouterServerDataSource> *_dataSource;
  NSMutableDictionary *_accessControls;
  HMDRemoteEventRouterServerMessageReceiver *_accessoryMessageReceiver;
  NSObject<HMMLogEventSubmitting> *_logEventSubmitter;
}

@property (readonly) NSMutableArray *currentConnections;
@property (readonly) NSUUID *residentModeUUID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSUUID *messageTargetUUID;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *messageReceiveQueue;

/* class methods */
+ (id)logCategory;

/* instance methods */
- (id)initWithPrimaryModeUUID:(id)uuid residentModeUUID:(id)uuid queue:(id)queue messageDispatcher:(id)dispatcher dataSource:(id)source notificationCenter:(id)center requestMessageName:(id)name updateMessageName:(id)name subscriptionProvider:(id)provider registrationEventRouter:(id)router storeReadHandle:(id)handle;
- (id)initWithPrimaryModeUUID:(id)uuid residentModeUUID:(id)uuid queue:(id)queue messageDispatcher:(id)dispatcher dataSource:(id)source notificationCenter:(id)center requestMessageName:(id)name updateMessageName:(id)name logCategory:(const char *)category logEventSubmitter:(id)submitter connectionServerFactory:(id /* block */)factory;
- (id)logIdentifier;
- (void)_registerForMessages:(id)messages withHome:(id)home;
- (void)_registerForAccessoryMessages:(id)messages;
- (void)handlePrimaryResidentIsCurrentDeviceChangeNotification:(id)notification;
- (void)handleHomeUserRemovedNotification:(id)notification;
- (id)messageTargetForMode:(long long)mode;
- (void)respondToMessage:(id)message underlyingResponseData:(id)data connection:(id)connection label:(id)label;
- (void)respondToMessage:(id)message underlyingResponseData:(id)data supportsFragmentMessage:(BOOL)message label:(id)label;
- (BOOL)isErrorHMENotAcceptingConnections:(id)connections;
- (void)_handleUserPrivilegeChange:(id)change;
- (void)_handlePrimaryRequestMessage:(id)message;
- (void)_handleRequestMessage:(id)message connectionMode:(long long)mode;
- (void)_handleProtoRequest:(id)request originalMessage:(id)message connectionMode:(long long)mode;
- (id)_underlyingMessageDataFromFragmentMessageData:(id)data error:(id *)error;
- (void)_handleConnectRequest:(id)request originalMessage:(id)message connectionMode:(long long)mode;
- (void)refreshConnections:(id)connections;
- (void)_handleDisconnectRequest:(id)request originalMessage:(id)message;
- (void)_handleChangeRegistrationsRequest:(id)request originalMessage:(id)message;
- (void)_handleKeepAliveRequest:(id)request originalMessage:(id)message;
- (void)_handleFetchEventsRequest:(id)request originalMessage:(id)message;
- (void)submitLogEvent:(id)event error:(id)error;
- (void)submitLogEvent:(id)event;
- (void)sendMessageWithPayloadMessage:(id)message destination:(id)destination messageType:(long long)type completion:(id /* block */)completion;
- (id /* block */)responseHandlerForSendMessageIdentifier:(id)identifier completion:(id /* block */)completion;
- (id)server:(id)server upstreamTopicsForTopic:(id)topic;
- (id)server:(id)server expandedTopicsForTopics:(id)topics;
- (id)server:(id)server forwardingTopicsForTopics:(id)topics;
- (BOOL)server:(id)server isConnectionTerminatingError:(id)error;
- (BOOL)server:(id)server shouldProcessEventsForConnection:(id)connection shouldLogState:(BOOL)state;
- (double)server:(id)server timeoutIntervalForConnection:(id)connection;
- (double)serverDebounceTimeInterval:(id)interval;
- (id)serverTimerProvider:(id)provider;
- (unsigned long long)serverFragmentEventsDataSize:(id)size;
- (BOOL)serverSupportFragmentCachedEvents:(id)events;
- (void)server:(id)server connectionDidConnect:(id)connect;
- (void)server:(id)server connectionDidExpire:(id)expire;
- (void)server:(id)server connectionDidFail:(id)fail;
- (void)server:(id)server sendEvents:(id)events cachedEvents:(id)events connection:(id)connection completion:(id /* block */)completion;
- (void)server:(id)server logMetricsForMessageDatagramFragmentation:(BOOL)fragmentation isFragmented:(BOOL)fragmented;
- (void)server:(id)server logMetricsForEventTopic:(id)topic eventSize:(unsigned long long)size isCached:(BOOL)cached;
- (void)logMetricsForLiveEvents:(id)events cachedEvents:(id)events destinationDevice:(id)device destinationDeviceIdentifier:(id)identifier responseMessageType:(unsigned long long)type;
- (BOOL)shouldAllowEvent:(id)event topic:(id)topic connection:(id)connection;
- (void)configureWithHome:(id)home isPrimaryResident:(BOOL)resident isResidentEventProviding:(BOOL)providing additionalPolicies:(id)policies;
- (id)dumpStateDescription;
- (id)diagnosticInfo;
@end

#endif /* HMDRemoteEventRouterServer_h */
