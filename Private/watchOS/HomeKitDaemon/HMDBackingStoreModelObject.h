//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HMDBackingStoreModelObject_h
#define HMDBackingStoreModelObject_h
@import Foundation;

#include "HMFObject.h"
#include "HMDBackingStoreObjectProtocol-Protocol.h"
#include "HMFLogging-Protocol.h"
#include "NSCopying-Protocol.h"

@class CKRecord, HMFVersion, NSMutableDictionary, NSSet, NSString, NSUUID;
@protocol NSManagedObject<HMDNSManagedObjectBackingStoreModelObjectRepresentable;

@interface HMDBackingStoreModelObject : HMFObject<HMFLogging, NSCopying> {
  /* instance variables */
  NSMutableDictionary *_reserved;
}

@property (readonly, nonatomic) NSManagedObject<HMDNSManagedObjectBackingStoreModelObjectRepresentable> *managedObject;
@property (retain, nonatomic) NSManagedObject<HMDNSManagedObjectBackingStoreModelObjectRepresentable> *managedObject;
@property (retain, nonatomic) HMFVersion *bsoDataVersion;
@property (retain, nonatomic) NSUUID *uuid;
@property (retain, nonatomic) NSUUID *parentUUID;
@property (retain, nonatomic) NSString *bsoType;
@property (retain, nonatomic) CKRecord *bsoRecord;
@property BOOL bsoDataVersionOverride;
@property (nonatomic) unsigned long long objectChangeType;
@property (readonly, @dynamic, nonatomic) NSSet *dependentUUIDs;
@property (weak, nonatomic) NSObject<HMDBackingStoreObjectProtocol> *bsoDelegate;
@property (readonly) unsigned long long bsoLogRowID;
@property (readonly, @dynamic, nonatomic) BOOL isReadOnly;
@property (readonly, @dynamic, nonatomic) BOOL isGenericRepresentation;
@property (readonly, nonatomic) BOOL replayable;
@property (copy, nonatomic) HMFVersion *bsoIgnoredBefore;
@property (readonly, nonatomic) BOOL bsoIgnoreModel;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)fetchByModelID;
+ (id)cd_parentReferenceName;
+ (BOOL)cd_addChild:(id)child excluding:(id)excluding toSet:(id)set error:(id *)error;
+ (BOOL)cd_addChildren:(id)children excluding:(id)excluding toSet:(id)set error:(id *)error;
+ (Class)backedObjectClass;
+ (id)properties;
+ (id)schemaHashRoot;
+ (id)bsoSchemaHash;
+ (id)readonlyBefore;
+ (Class)genericRepresentation;
+ (id)objectFromDictionaryData:(id)data type:(id)type error:(id *)error;
+ (id)objectFromDictionaryData:(id)data error:(id *)error;
+ (id)objectFromData:(id)data encoding:(unsigned long long)encoding error:(id *)error;
+ (id)objectFromData:(id)data encoding:(unsigned long long)encoding rowID:(unsigned long long)id error:(id *)error;
+ (id)objectFromData:(id)data encoding:(unsigned long long)encoding record:(id)record error:(id *)error;
+ (id)objectFromCloud:(id)cloud error:(id *)error;
+ (id)formatValue:(id)value;
+ (id)logCategory;
+ (BOOL)resolveInstanceMethod:(SEL)method;

/* instance methods */
- (id)initWithManagedObject:(id)object changeType:(unsigned long long)type detached:(BOOL)detached error:(id *)error;
- (id)cd_generateValueForModelObjectFromManagedObject:(id)object modelObjectField:(id)field modelFieldInfo:(id)info;
- (BOOL)cd_populateFromManagedObject:(id)object error:(id *)error;
- (id)cd_generateValueForProperty:(id)property managedObjectField:(id)field context:(id)context;
- (id)cd_uuidValueFromStringModelObjectField:(id)field;
- (BOOL)cd_updateManagedObjectInContext:(id)context error:(id *)error;
- (void)cd_populateParentRelationshipInContext:(id)context error:(id *)error;
- (id)cd_fetchParentForManagedObjectUsingParentReferenceName:(id)name error:(id *)error;
- (id)cd_fetchManagedObjectWithError:(id *)error;
- (id)cd_currentManagedObjectInContext:(id)context error:(id *)error;
- (id)cd_childrenExcluding:(id)excluding error:(id *)error;
- (id)convertToLegacyV4;
- (id)typeNameForDebug;
- (id)initWithVersion:(id)version changeType:(unsigned long long)type uuid:(id)uuid parentUUID:(id)uuid;
- (id)initWithObjectChangeType:(unsigned long long)type uuid:(id)uuid parentUUID:(id)uuid;
- (id)initWithUUID:(id)uuid;
- (id)initWithUUID:(id)uuid parentUUID:(id)uuid;
- (id)backedObjectWithParent:(id)parent error:(id *)error;
- (BOOL)_validateType:(id)type error:(id *)error;
- (id)validateType:(id)type path:(id)path;
- (id)prepareFor:(unsigned long long)for;
- (id)encodeAsNSDictionaryFor:(unsigned long long)for error:(id *)error;
- (id)encodeWithError:(id *)error;
- (id)encodeWithEncoding:(unsigned long long)encoding error:(id *)error;
- (id)encodeFor:(unsigned long long)for error:(id *)error;
- (id)encodeWithEncoding:(unsigned long long)encoding for:(unsigned long long)for error:(id *)error;
- (id)encodeForCloud:(id *)cloud;
- (BOOL)isEqual:(id)equal;
- (void)setParentUUIDIfNotNil:(id)nil;
- (id)setProperties;
- (BOOL)propertyWasSet:(id)set;
- (BOOL)isReplayable;
- (BOOL)propertyIsReadOnly:(id)only;
- (BOOL)propertyIsAvailable:(id)available;
- (BOOL)validForStorage;
- (id)merge:(id)merge from:(unsigned long long)from;
- (id)merge:(id)merge;
- (BOOL)merge:(id)merge error:(id *)error;
- (BOOL)diff:(id)diff differingFields:(id *)fields;
- (void)setPropertyIfNotNil:(id)nil named:(id)named;
- (id)defaultValueForPropertyNamed:(id)named isSet:(BOOL *)set;
- (void)dumpWithVerbosity:(BOOL)verbosity prefix:(id)prefix logType:(unsigned char)type;
- (id)debugString:(BOOL)string;
- (id)debugString:(BOOL)string prefix:(id)prefix;
- (void)clearVersionOverride;
- (void)dumpDebug:(id)debug;
- (void)dumpDebug;
- (id)logIdentifier;
- (void)setValue:(id)value forKey:(id)key;
- (id)valueForKey:(id)key;
- (id)copyWithZone:(struct _NSZone *)zone;
@end

#endif /* HMDBackingStoreModelObject_h */
