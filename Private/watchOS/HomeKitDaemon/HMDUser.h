//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HMDUser_h
#define HMDUser_h
@import Foundation;

#include "HMFObject.h"
#include "HMDAccountHandle.h"
#include "HMDAccountIdentifier.h"
#include "HMDAssistantAccessControl.h"
#include "HMDBackingStoreObjectProtocol-Protocol.h"
#include "HMDCloudShareMessenger.h"
#include "HMDCloudShareTrustManager.h"
#include "HMDCloudShareTrustManagerDataSource-Protocol.h"
#include "HMDCloudShareTrustManagerDelegate-Protocol.h"
#include "HMDHome.h"
#include "HMDHomeMessageReceiver-Protocol.h"
#include "HMDPersonSettingsManager.h"
#include "HMDPhotosPersonManager.h"
#include "HMDRemoteEventRouterUserAccessControlProvider-Protocol.h"
#include "HMDSiriMultiUserNewLanguageNotificationManager.h"
#include "HMDUserAccessorySettingsDataController-Protocol.h"
#include "HMDUserDataController.h"
#include "HMDUserDataControllerDataSource-Protocol.h"
#include "HMDUserDataControllerDelegate-Protocol.h"
#include "HMDUserDataSource-Protocol.h"
#include "HMDUserPhotosPersonDataManager.h"
#include "HMDUserSettingsBackingStoreController.h"
#include "HMDUserSettingsBackingStoreControllerDelegate-Protocol.h"
#include "HMDUserSettingsInitialValueProviding-Protocol.h"
#include "HMFDumpState-Protocol.h"
#include "HMFLogging-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class AVOutputDeviceAuthorizedPeer, HAPPairingIdentity, HMBShareUserID, HMFMessageDispatcher, HMPhotosPersonManagerSettings, HMUserPresenceAuthorization, NAFuture, NSData, NSDictionary, NSNumber, NSSet, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface HMDUser : HMFObject<HMDCloudShareTrustManagerDataSource, HMDCloudShareTrustManagerDelegate, HMDUserDataControllerDelegate, HMDUserSettingsBackingStoreControllerDelegate, HMDUserDataControllerDataSource, HMFLogging, HMFDumpState, HMDBackingStoreObjectProtocol, HMDHomeMessageReceiver, HMDRemoteEventRouterUserAccessControlProvider, HMDUserSettingsInitialValueProviding, NSSecureCoding> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  HMDAccountHandle *_accountHandle;
}

@property (readonly, copy) AVOutputDeviceAuthorizedPeer *av_authorizedPeer;
@property (readonly) BOOL hasCameraClipsAccess;
@property (readonly, copy) NSData *nfcIssuerKeyIdentifier;
@property (readonly, copy, nonatomic) NSString *encodingRemoteDisplayName;
@property (retain) HMDAssistantAccessControl *assistantAccessControl;
@property (retain) HMDCloudShareMessenger *shareMessenger;
@property (retain) HMDUserSettingsBackingStoreController *privateBackingStoreController;
@property (retain) HMDPersonSettingsManager *personSettingsManager;
@property BOOL needsiTunesMultiUserRepair;
@property (readonly) NSObject<HMDUserDataSource> *dataSource;
@property (retain) HMDSiriMultiUserNewLanguageNotificationManager *siriMultiUserNewLanguageNotificationManager;
@property (retain) NSObject<HMDUserAccessorySettingsDataController> *accessorySettingsDataController;
@property (retain) NSDictionary *ownerCharacteristicAuthorizationData;
@property (readonly) NSSet *cachedCurrentUserPairingIdentityIdentifiers;
@property (retain, nonatomic) NSNumber *matterCASEAuthenticatedTagID;
@property (readonly) NSObject<OS_dispatch_queue> *queue;
@property (copy) NSUUID *uuid;
@property (retain) HMFMessageDispatcher *messageDispatcher;
@property (retain) HMBShareUserID *cloudShareID;
@property (copy) HMUserPresenceAuthorization *presenceAuthStatus;
@property unsigned long long privilege;
@property BOOL remoteAccessAllowed;
@property unsigned long long camerasAccessLevel;
@property unsigned long long announceAccessLevel;
@property unsigned long long audioAnalysisUserDropInAccessLevel;
@property unsigned long long announceNotificationModeForCurrentDevice;
@property (copy) HAPPairingIdentity *pairingIdentity;
@property (copy) HMDAccountIdentifier *accountIdentifier;
@property (copy) NSString *mergeIdentifier;
@property (readonly, copy, nonatomic) NSUUID *spiClientIdentifier;
@property (retain) HMDCloudShareTrustManager *cloudShareTrustManager;
@property (retain) HMDUserSettingsBackingStoreController *sharedBackingStoreController;
@property (retain) HMDUserPhotosPersonDataManager *photosPersonDataManager;
@property (copy, nonatomic) NSString *userID;
@property (readonly) NSNumber *notificationContextHAPIdentifier;
@property (readonly) NSNumber *notificationContextNFCIdentifier;
@property long long userCloudShareWithOwnerMessagingState;
@property (readonly) BOOL pending;
@property unsigned long long ownerAddSceneButtonPresentedCount;
@property BOOL ownerCompletedSwitchingHomesOnboardingUI;
@property BOOL ownerDismissedAccessCodeOnboarding;
@property BOOL ownerDismissedAccessoryFirmwareUpdateOnboarding;
@property BOOL ownerDismissedAnnounceOnboarding;
@property BOOL ownerDismissedCameraRecordingOnboarding;
@property BOOL ownerDismissedCameraRecordingSetupBanner;
@property BOOL ownerDismissedCameraUpgradeOfferBanner;
@property BOOL ownerDismissedHomeTheaterOnboarding;
@property BOOL ownerDismissedIdentifyVoiceOnboarding;
@property BOOL ownerDismissedIdentifyVoiceSetupBanner;
@property BOOL ownerDismissedNaturalLightingOnboarding;
@property BOOL ownerDismissedTVViewingProfileOnboarding;
@property BOOL ownerDismissedTVViewingProfileSetupBanner;
@property BOOL ownerDismissedUserSplitMediaAccountWarning;
@property BOOL ownerDismissedWalletKeyExpressModeOnboarding;
@property BOOL ownerDismissedWelcomeUI;
@property BOOL ownerHasUserSeenRMVNewLanguageNotification;
@property BOOL allowExplicitContent;
@property BOOL allowiTunesAccount;
@property BOOL dolbyAtmosEnabled;
@property BOOL losslessMusicEnabled;
@property BOOL playbackInfluencesEnabled;
@property BOOL siriIdentifyVoiceEnabled;
@property (readonly) NAFuture *cloudShareIDFuture;
@property (weak) HMDHome *home;
@property (readonly, copy) NSString *displayName;
@property (readonly) BOOL administrator;
@property (readonly) BOOL owner;
@property (readonly) BOOL remoteGateway;
@property (readonly) BOOL currentUser;
@property (readonly) BOOL valid;
@property (readonly) NSUUID *assistantAccessControlModelUUID;
@property (readonly, copy) HMPhotosPersonManagerSettings *photosPersonManagerSettings;
@property (readonly) HMDPhotosPersonManager *photosPersonManager;
@property (readonly) BOOL announceAccessAllowed;
@property (copy) NSString *accessCode;
@property (retain) NSUUID *accessCodeChangedByUserUUID;
@property (retain) HMDUserDataController *userDataController;
@property (readonly, copy) NSString *pairingUsername;
@property (readonly, copy) NSData *publicKey;
@property (readonly) NSNumber *uniqueIDForAccessories;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) NSUUID *userUUID;
@property (readonly) BOOL isRunningOnHomeOwnersDevice;
@property (readonly) BOOL isCurrentUser;
@property (readonly, copy) NSSet *messageReceiverChildren;
@property (readonly, nonatomic) NSUUID *messageTargetUUID;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *messageReceiveQueue;

/* class methods */
+ (unsigned long long)hmmtrUserPrivilegeFromHMDUserPrivilege:(unsigned long long)privilege;
+ (unsigned long long)hmdUserPrivilegeFromHMMTRUserPrivilege:(unsigned long long)privilege;
+ (id)av_authorizedPeerForPairingIdentity:(id)identity isOwner:(BOOL)owner;
+ (id)currentUserWithPrivilege:(unsigned long long)privilege forHome:(id)home forceHH1Key:(BOOL)key;
+ (id)currentUserWithPrivilege:(unsigned long long)privilege forHome:(id)home;
+ (id)ownerWithUserID:(id)id home:(id)home pairingIdentity:(id)identity homeManager:(id)manager;
+ (id)userIDForAccountHandle:(id)handle;
+ (id)UUIDWithUserID:(id)id forHomeIdentifier:(id)identifier uuid:(id)uuid pairingIdentity:(id)identity;
+ (id)privateZoneNameForUserUUID:(id)uuid;
+ (id)sharedZoneNameForUserUUID:(id)uuid;
+ (id)allowedClassesForAnnounceNotificationMode;
+ (id)allowedClassesForSyncData;
+ (id)allLastUserSyncDataArchives;
+ (id)getSyncDataFromLocalDiskWithArchive:(id)archive;
+ (id)logCategory;
+ (BOOL)hasMessageReceiverChildren;
+ (BOOL)supportsSecureCoding;
+ (unsigned long long)privilegeFromDictionary:(id)dictionary;
+ (id)userWithDictionary:(id)dictionary;
+ (id)userWithDictionary:(id)dictionary home:(id)home;
+ (id)userDictionaryWithUserID:(id)id privilege:(unsigned long long)privilege remoteAccessAllowed:(BOOL)allowed cameraAccessLevel:(unsigned long long)level announceAccessAllowed:(id)allowed announceAccessLevel:(unsigned long long)level audioAnalysisUserDropInAccessLevel:(unsigned long long)level;
+ (void)migrateHH1SettingsToHH2ForSharedUserWithUUID:(id)uuid homeUUID:(id)uuid sharedZone:(id)zone backingStoreContext:(id)context;
+ (void)migrateHH1SettingsToHH2ForSharedUserWithUUID:(id)uuid homeUUID:(id)uuid privateZone:(id)zone backingStoreContext:(id)context;
+ (void)_fetchAndMigratePhotosPersonManagerSettingsFromLocalZone:(id)zone managedObjectContext:(id)context rootShareObject:(id)object;
+ (void)_fetchAndMigrateUserListeningHistoryUpdatedControlModelToCoreDataFromLocalZone:(id)zone managedObjectContext:(id)context rootShareObject:(id)object;
+ (void)_fetchAndMigrateMediaContentProfileAccessControlModelToCoreDataFromLocalZone:(id)zone managedObjectContext:(id)context rootShareObject:(id)object;
+ (void)_fetchAndMigrateAssistantAccessControlModelV2ToCoreDataFromLocalZone:(id)zone managedObjectContext:(id)context rootShareObject:(id)object;
+ (void)__findOrCreateCKSharedUserAccessorySettingsForAccessory:(id)accessory usingManagedObjectContext:(id)context rootShareObject:(id)object listeningHistoryEnabled:(id)enabled mediaContentProfileEnabled:(id)enabled personalRequestsEnabled:(id)enabled;
+ (void)_saveSharedUserSettingsToCoreData:(id)data managedObjectContext:(id)context rootShareObject:(id)object;
+ (id)_openZoneWithName:(id)name inDatabase:(id)database;
+ (id)localPrivateZoneForSharedUserUUID:(id)uuid database:(id)database;
+ (id)localSharedZoneForSharedUserUUID:(id)uuid database:(id)database;
+ (id)getSettingsUsingPreOrderTraversal:(id)traversal rootUUID:(id)uuid keyPath:(id)path;
+ (id)appendRootPath:(id)path withSettingPath:(id)path;

/* instance methods */
- (void)_setUuidUnsafely:(id)unsafely;
- (id)sharedSettingValuesByKeyPath;
- (id)privateSettingValuesByKeyPath;
- (id)initWithModelObject:(id)object;
- (id)initWithAccountHandle:(id)handle home:(id)home pairingIdentity:(id)identity privilege:(unsigned long long)privilege;
- (id)initWithAccountHandle:(id)handle home:(id)home pairingIdentity:(id)identity privilege:(unsigned long long)privilege dataSource:(id)source;
- (id)initWithAccountHandle:(id)handle homeUUID:(id)uuid pairingIdentity:(id)identity privilege:(unsigned long long)privilege;
- (id)initWithAccountHandle:(id)handle homeUUID:(id)uuid pairingIdentity:(id)identity privilege:(unsigned long long)privilege dataSource:(id)source;
- (void)dealloc;
- (BOOL)isEqual:(id)equal;
- (BOOL)isAccountEqualWithUser:(id)user;
- (id)shortDescription;
- (id)attributeDescriptions;
- (id)dumpState;
- (BOOL)hasDeviceWithHomeKitVersionGreaterThanVersion:(id)version;
- (void)configureWithHome:(id)home;
- (void)handleUserDataControllerInitialized:(id)initialized;
- (id)privateZoneName;
- (id)sharedZoneName;
- (void)initializeUserSettingsWithHome:(id)home;
- (long long)sharedUserSettingsLogEventBackingStoreControllerRunState;
- (void)_handleCloudShareWithOwnerMessageError;
- (void)recoverUserCloudDataDueToUUIDChangeFromOldUUID:(id)uuid;
- (void)_recoverUserSettingsDueToUUIDChange;
- (void)updateSharedBackingStoreControllerParticipants;
- (void)_recoverTrustManagerDueToUUIDChange;
- (void)unconfigure;
- (void)registerForMessages;
- (void)deregisterForMessages;
- (unsigned long long)allowedRemoteEventAccessUserTypes;
- (unsigned long long)_compatiblePrivilege;
- (BOOL)isAdministrator;
- (BOOL)isOwner;
- (BOOL)isPending;
- (BOOL)updateAdministrator:(BOOL)administrator;
- (id)accountHandle;
- (void)setAccountHandle:(id)handle;
- (void)registerIdentity;
- (void)deregisterIdentity;
- (BOOL)matchingPairingIdentityIdentifier:(id)identifier;
- (void)_handlePairingIdentityRequest:(id)request;
- (void)_handleLegacyPairingIdentityRequest:(id)request;
- (void)_handleShareLookupInfoRequest:(id)request;
- (void)_handleMultiUserSharePayloadRequest:(id)request;
- (void)_sendSecureShareClientPayloadToMostEligibleDevice:(id)device completion:(id /* block */)completion;
- (void)_sendAccountMessage:(id)message payload:(id)payload deviceCapabilities:(id)capabilities multicast:(BOOL)multicast preferPrimary:(BOOL)primary completion:(id /* block */)completion;
- (void)_handleShareClientRepairRequest:(id)request;
- (void)_handleNeedsiTunesMultiUserRepair:(id)repair;
- (id)account;
- (BOOL)requiresMakoSupport;
- (void)__handleAddedAccount:(id)account;
- (void)__handleRemovedAccount:(id)account;
- (BOOL)refreshDisplayName;
- (BOOL)isRemoteAccessAllowed;
- (BOOL)_setRemoteAccessAllowed:(BOOL)allowed;
- (BOOL)isAnnounceAccessAllowed;
- (unsigned long long)defaultAnnounceUserAccessLevel;
- (BOOL)isRemoteGateway;
- (BOOL)isValid;
- (BOOL)isCurrentUserAndOwner;
- (void)handleAssistantAccessControlUpdate:(id)update;
- (void)_handleAssistantAccessControlUpdate:(id)update;
- (void)handleMediaContentProfileAccessControlUpdate:(id)update;
- (void)_handleMediaContentProfileAccessControlUpdate:(id)update;
- (void)removeAccessoriesFromAssistantAccessControlList:(id)list;
- (void)handleRemovedAccessory:(id)accessory;
- (void)_handleAnnounceSettingsUpdate:(id)update;
- (void)updateAnnounceNotificationMode:(unsigned long long)mode;
- (void)_updateAnnounceNotificationMode:(unsigned long long)mode;
- (void)_saveAnnounceSettingsToLocalStore:(unsigned long long)store;
- (void)_updateAnnounceNotificationModeToLocalStore:(unsigned long long)store managedObjectContext:(id)context;
- (void)_readAnnounceNotificationModeFromLocalStore;
- (id)userIDsToMigrateAnnounceSettingsFrom;
- (void)_migrateAnnounceNotificationModeIfNeeded;
- (void)_removeAnnounceNotificationModeFileFromDiskForUserUUID:(id)uuid;
- (id)announceNotificationFileNameForUserUUID:(id)uuid;
- (id)announceNotificationFileName;
- (void)configurePhotosPersonDataManager;
- (void)configurePersonSettingsManager;
- (id)logIdentifier;
- (id)messageDestination;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)ownerPrivateSettingsAsDictionary;
- (id)sharedSettingsAsDictionary;
- (void)transactionObjectUpdated:(id)updated newValues:(id)values message:(id)message;
- (void)_transactionUserUpdated:(id)updated newValues:(id)values message:(id)message;
- (void)handleUpdatedCATForUser;
- (void)_transactionAccessorySettingsUpdated:(id)updated;
- (void)_transactionUserSettingsUpdated:(id)updated;
- (void)_transactionPhotosPersonManagerSettingsUpdated:(id)updated;
- (void)transactionObjectRemoved:(id)removed message:(id)message;
- (void)migrateCloudZone:(id)zone migrationQueue:(id)queue completion:(id /* block */)completion;
- (id)backingStoreObjects:(long long)objects;
- (id)modelObjectWithChangeType:(unsigned long long)type;
- (id)modelObjectWithChangeType:(unsigned long long)type version:(long long)version;
- (void)removeCloudData;
- (id)dictionaryEncoding;
- (id)settingsControllerFollowerKeyPaths:(id)paths;
- (void)didStartBackingStoreController:(id)controller;
- (void)didStartLocalZoneForBackingStoreController:(id)controller;
- (void)didStopBackingStoreController:(id)controller;
- (id)backingStoreController:(id)controller createParticipantManagerForCloudZone:(id)zone;
- (id)ownerForUserSettingsBackingStoreController:(id)controller;
- (void)backingStoreController:(id)controller didUpdatePhotosPersonManagerSettingsModel:(id)model previousPhotosPersonManagerSettingsModel:(id)model;
- (BOOL)userDataController:(id)controller isPersonalRequestCapableAccessoryID:(id)id;
- (BOOL)userDataController:(id)controller isMediaContentProfileCapableAccessoryID:(id)id;
- (void)userDataControllerDidUpdateAssistantAccessControl:(id)control;
- (void)userDataControllerDidUpdateMediaContentProfile:(id)profile;
- (void)postUserSettingsUpdatedNotificationWithReason:(id)reason;
- (id)sharedZoneControllerForUserDataController:(id)controller;
- (id)privateZoneControllerForUserDataController:(id)controller;
- (BOOL)userDataController:(id)controller isAppleMediaAccessory:(id)accessory;
- (BOOL)userDataController:(id)controller isHAPAccessory:(id)hapaccessory;
- (id)setHasUserSeenRMVNewLanguageNotification:(BOOL)notification;
- (void)removeCloudShareID;
- (void)updateCloudShareID:(id)id;
- (id)trustTargetUUID;
- (void)configureCloudShareTrustManager;
- (BOOL)cloudShareTrustManager:(id)manager shouldShareTrustWithUser:(id)user;
- (id)zoneNameForCloudShareTrustManager:(id)manager;
- (id)ownerForCloudShareTrustManager:(id)manager;
- (id)homeForCloudShareTrustManager:(id)manager;
- (BOOL)isOwnerCapableForTrustManager:(id)manager;
- (void)cloudShareTrustManager:(id)manager didFetchOwnerCloudShareID:(id)id;
- (void)didFinishConfiguringForCloudShareTrustManager:(id)manager;
- (void)didRemoveTrustZoneInCloudShareTrustManager:(id)manager;
- (void)cloudShareTrustManager:(id)manager didRemoveUserWithUUID:(id)uuid;
- (void)registerIDSActivityObserver:(id)observer subActivity:(id)activity subjectDevice:(id)device;
- (void)updateIDSActivityObserver:(id)observer;
- (void)deregisterIDSActivityObserver:(id)observer subActivity:(id)activity subjectDevice:(id)device;
- (void)deregisterIDSActivityObserver:(id)observer;
- (id)pushTokensForDevicesObservingSubjectDevice:(id)device subActivity:(id)activity;
- (void)applyConditionalValueUpdateToModels:(id)models;
- (id)allAccessoryUUID;
- (void)setUUID:(id)uuid;
@end

#endif /* HMDUser_h */
