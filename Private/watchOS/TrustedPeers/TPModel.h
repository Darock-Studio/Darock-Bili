//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 61040.64.1.0.0
//
#ifndef TPModel_h
#define TPModel_h
@import Foundation;

@class NSData, NSMutableDictionary, NSMutableSet;
@protocol TPDecrypter;

@interface TPModel : NSObject

@property (retain, nonatomic) NSMutableDictionary *peersByID;
@property (retain, nonatomic) NSMutableDictionary *policiesByVersion;
@property (retain, nonatomic) NSMutableSet *uncheckedVouchers;
@property (retain, nonatomic) NSMutableSet *vouchers;
@property (retain, nonatomic) NSObject<TPDecrypter> *decrypter;
@property (retain, nonatomic) NSData *recoverySigningPubKey;
@property (retain, nonatomic) NSData *recoveryEncryptionPubKey;
@property (retain, nonatomic) NSMutableDictionary *custodianRecoveryKeys;
@property BOOL suppressInitialInfoLogging;

/* class methods */
+ (id)preapprovalsFromKeys:(id)keys;

/* instance methods */
- (id)initWithDecrypter:(id)decrypter;
- (unsigned long long)latestEpochAmongPeerIDs:(id)ids;
- (void)registerPolicyDocument:(id)document;
- (id)policyWithVersion:(unsigned long long)version;
- (id)allPeerIDs;
- (id)allPeers;
- (id)allVouchers;
- (id)recoveryKeyPeerID:(id)id;
- (id)allPolicyVersions;
- (id)allRegisteredPolicyVersions;
- (void)registerPeerWithPermanentInfo:(id)info;
- (void)deletePeerWithID:(id)id;
- (BOOL)hasPeerWithID:(id)id;
- (id)peerWithID:(id)id;
- (id)custodianPeerWithID:(id)id;
- (id)actualPeerWithID:(id)id error:(id *)error;
- (id)allMachineIDs;
- (id)viablePeerCountsByModelID;
- (id)peerCountsByMachineID;
- (BOOL)isRecoveryKeyExcluded:(id)excluded;
- (id)allTrustedPeersWithCurrentRecoveryKey;
- (BOOL)hasPotentiallyTrustedPeerPreapprovingKey:(id)key;
- (BOOL)anyTrustedPeerDistrustsOtherPeer:(id)peer;
- (BOOL)hasPotentiallyTrustedPeerWithSigningKey:(id)key;
- (BOOL)validatePeerWithPreApproval:(id)approval sponsor:(id)sponsor;
- (unsigned long long)statusOfPeerWithID:(id)id;
- (id)getStableInfoForPeerWithID:(id)id;
- (id)getDynamicInfoForPeerWithID:(id)id;
- (int)userViewSyncabilityConsensusAmongTrustedPeers:(id)peers;
- (BOOL)updateStableInfo:(id)info forPeerWithID:(id)id error:(id *)error;
- (id)createStableInfoWithFrozenPolicyVersion:(id)version flexiblePolicyVersion:(id)version policySecrets:(id)secrets syncUserControllableViews:(int)views secureElementIdentity:(id)identity walrusSetting:(id)setting webAccess:(id)access deviceName:(id)name serialNumber:(id)number osVersion:(id)version signingKeyPair:(id)pair recoverySigningPubKey:(id)key recoveryEncryptionPubKey:(id)key isInheritedAccount:(BOOL)account error:(id *)error;
- (BOOL)updateDynamicInfo:(id)info forPeerWithID:(id)id error:(id *)error;
- (unsigned long long)maxClock;
- (id)createDynamicInfoWithIncludedPeerIDs:(id)ids excludedPeerIDs:(id)ids dispositions:(id)dispositions preapprovals:(id)preapprovals signingKeyPair:(id)pair error:(id *)error;
- (BOOL)canTrustCandidate:(id)candidate inEpoch:(unsigned long long)epoch;
- (BOOL)canIntroduceCandidate:(id)candidate withSponsor:(id)sponsor toEpoch:(unsigned long long)epoch underPolicy:(id)policy disposition:(id)disposition;
- (BOOL)checkIntroductionForCandidate:(id)candidate stableInfo:(id)info withSponsorID:(id)id error:(id *)error;
- (id)createVoucherForCandidate:(id)candidate stableInfo:(id)info withSponsorID:(id)id reason:(unsigned long long)reason signingKeyPair:(id)pair error:(id *)error;
- (BOOL)doesVoucherMatchRecoveryKeys:(id)keys;
- (BOOL)verifyVoucherSignature:(id)signature;
- (BOOL)validateVoucherForPeer:(id)peer sponsor:(id)sponsor;
- (void)registerVoucher:(id)voucher;
- (void)checkVouchers;
- (id)considerCandidateID:(id)id withSponsorID:(id)id sponsorPermanentInfo:(id)info toExpandIncludedPeerIDs:(id)ids andExcludedPeerIDs:(id)ids dispositions:(id)dispositions currentMachineIDs:(id)ids forEpoch:(unsigned long long)epoch;
- (void)considerVouchersSponsoredByPeerID:(id)id sponsorPermanentInfo:(id)info toRecursivelyExpandIncludedPeerIDs:(id)ids andExcludedPeerIDs:(id)ids dispositions:(id)dispositions currentMachineIDs:(id)ids forEpoch:(unsigned long long)epoch;
- (void)considerPreapprovalsSponsoredByPeer:(id)peer toRecursivelyExpandIncludedPeerIDs:(id)ids andExcludedPeerIDs:(id)ids dispositions:(id)dispositions currentMachineIDs:(id)ids forEpoch:(unsigned long long)epoch;
- (void)recursivelyExpandIncludedPeerIDs:(id)ids andExcludedPeerIDs:(id)ids dispositions:(id)dispositions withPeersTrustedBySponsorID:(id)id currentMachineIDs:(id)ids forEpoch:(unsigned long long)epoch;
- (id)calculateDynamicInfoForPeerWithID:(id)id addingPeerIDs:(id)ids removingPeerIDs:(id)ids preapprovedKeys:(id)keys signingKeyPair:(id)pair currentMachineIDs:(id)ids error:(id *)error;
- (id)calculateDynamicInfoFromModel:(id)model peer:(id)peer peerPermanentInfo:(id)info peerStableInfo:(id)info startingDynamicInfo:(id)info addingPeerIDs:(id)ids removingPeerIDs:(id)ids preapprovedKeys:(id)keys signingKeyPair:(id)pair currentMachineIDs:(id)ids error:(id *)error;
- (id)filterPeerList:(id)list byMachineIDs:(id)ids dispositions:(id)dispositions;
- (id)peersWithMachineID:(id)id;
- (void)filterPreapprovals:(id)preapprovals forExistingPeers:(id)peers;
- (id)dynamicInfoForJoiningPeerID:(id)id peerPermanentInfo:(id)info peerStableInfo:(id)info sponsorID:(id)id preapprovedKeys:(id)keys signingKeyPair:(id)pair currentMachineIDs:(id)ids error:(id *)error;
- (id)policyForPeerIDs:(id)ids candidatePeerID:(id)id candidateStableInfo:(id)info error:(id *)error;
- (BOOL)considerPolicyFromPeerID:(id)id stableInfo:(id)info secrets:(id)secrets newestPolicyDoc:(id *)doc error:(id *)error;
- (id)getViewsForPeer:(id)peer stableInfo:(id)info error:(id *)error;
- (id)getViewsForCRK:(id)crk donorPermanentInfo:(id)info donorStableInfo:(id)info error:(id *)error;
- (id)getPeerIDsTrustedByPeerWithID:(id)id toAccessView:(id)view error:(id *)error;
- (id)getPeerIDsTrustedByPeerWithDynamicInfo:(id)info toAccessView:(id)view error:(id *)error;
- (id)vectorClock;
- (BOOL)isRecoveryKeyDistrusted:(id)distrusted;
- (BOOL)doesOctagonContainsDistrustedRecoveryKeys;
- (id)bestRecoveryKeyForStableInfo:(id)info dynamicInfo:(id)info vouchers:(id)vouchers;
- (id)bestWalrusForStableInfo:(id)info dynamicInfo:(id)info walrusStableChanges:(id)changes;
- (id)countOfTrustedPeers;
- (id)bestWalrusAcrossTrustedPeers;
- (id)bestWebAccessAcrossTrustedPeers;
- (id)bestWebAccessForStableInfo:(id)info dynamicInfo:(id)info webAccessStableChanges:(id)changes;
- (id)untrustedPeerIDs;
- (id)trustedPeers;
- (id)untrustedPeerIDsFromTrustedPeers;
- (id)peerIDThatTrustsRecoveryKeys:(id)keys canIntroducePeer:(id)peer stableInfo:(id)info;
- (id)peerIDThatTrustsCustodianRecoveryKeys:(id)keys canIntroducePeer:(id)peer stableInfo:(id)info;
- (BOOL)isRecoveryKeyEnrolled;
- (void)removeRecoveryKey;
- (BOOL)isCustodianRecoveryKeyTrusted:(id)trusted;
- (void)setRecoveryKeys:(id)keys;
- (id)recoverySigningPublicKey;
- (id)recoveryEncryptionPublicKey;
- (void)registerCustodianRecoveryKey:(id)key;
- (void)removeCustodianRecoveryKey:(id)key;
- (id)findCustodianRecoveryKeyWithUUID:(id)uuid;
- (id)allCustodianRecoveryKeys;
- (id)allCustodianRecoveryKeyPeerIDs;
- (BOOL)currentStatePossiblyMissingData;
@end

#endif /* TPModel_h */
