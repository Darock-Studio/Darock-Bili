//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 619.2.0.0.0
//
#ifndef AppleSpell_h
#define AppleSpell_h
@import Foundation;

@class BOOL *, NSArray, NSData, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSURL;
@protocol OS_dispatch_queue;

@interface AppleSpell : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_serialQueue;
  void * _proofReaderConnection;
  struct __CFDictionary * _databaseConnections;
  NSMutableDictionary *_languageModelDicts;
  NSMutableDictionary *_lexiconDict;
  NSMutableDictionary *_phraseLexiconDict;
  struct __CFDictionary * _emojiPredictorDict;
  double _referenceResetTimer;
  double _lastWriteLanguageModels;
  double _lastDecayLanguageModels;
  double _lastResetLanguageModels;
  double _lastReleaseLanguageModels;
  double _lastMaintainLanguageModels;
  unsigned long long _languageModelWordCount;
  NSMutableDictionary *_localDictionaryArrays;
  NSMutableArray *_globalDictionaryArray;
  NSString *_lastLanguage;
  NSString *_lastCandidateLanguage;
  NSArray *_userPreferredLanguages;
  NSArray *_userPreferredLatinLanguages;
  NSArray *_userTopLanguages;
  NSArray *_userTransliterationLocalizations;
  NSArray *_userAdditionalEnglishLocalizations;
  NSMutableDictionary *_learnedResponses;
  NSMutableDictionary *_probationaryLearnedResponses;
  NSMutableDictionary *_probationaryLearnedResponseTimes;
  NSMutableArray *_diagnosticInfo;
  NSMutableSet *_foundNames;
  id _foundNamesLexicon;
  id _foundPhrasesLexicon;
  id _supplementalLexicon;
  NSArray *_supplementalWords;
  NSArray *_recipientNames;
  double _lastFindNames;
  NSMutableSet *_foundShortcuts;
  NSMutableDictionary *_foundShortcutsDictionary;
  struct __CFDictionary * _databaseConnectionsByPathAndCode;
  unsigned long long _reserved1;
  double _reserved2;
  NSMutableArray *_reserved3;
  NSMutableDictionary *_reserved4;
  double _reserved5;
  NSMutableArray *_altBundleURLs;
  NSObject<OS_dispatch_queue> *_assetDataBundleSerialQueue;
  NSMutableDictionary *_assetDataBundleURLDictionary;
  NSMutableSet *_updatedDataBundleLanguages;
  NSURL *_updateBundleURL;
  NSMutableDictionary *_languageCounts;
  double _lastLanguageCounts;
  NSMutableDictionary *_userAdaptationDictionary;
  NSData *_lastKeyEventArray;
  unsigned long long * _keyboardHistogram;
  double _lastKeyboardHistogramRecording;
  NSMutableArray *_requestedAssets;
  NSMutableArray *_requestedByCheckerAssets;
  double _lastAssetRequest;
  double _lastInputAnalytics;
  NSMutableArray *_recordedCorrections;
  NSMutableArray *_recordedTICorrections;
  NSMutableDictionary *_characterLanguageModelDictionary;
  NSMutableDictionary *_transformerLanguageModelDictionary;
  NSMutableDictionary *_sentencePieceLanguageModelDictionary;
  double _probationaryInterval;
  NSMutableArray *_guessRequestTimestamps;
  NSString *_previousSingleCompletion;
  BOOL _userPrefersUncheckedLatinLanguage;
  BOOL _userPrefersUncheckedCyrillicLanguage;
  BOOL _hasUpdatedDataBundleLanguages;
  BOOL _shouldClearFoundNames;
  BOOL _automaticTextCompletionCollapsed;
  BOOL _automaticTextCompletionEnabled;
  BOOL _foundNamesProhibited;
  BOOL _supplementalLexiconEnabled;
}

/* class methods */
+ (id)sharedInstance;
+ (void)resetSharedInstance;
+ (id)availableLanguages;

/* instance methods */
- (id)internalStringForKoreanExternalString:(id)string;
- (id)externalStringForKoreanInternalString:(id)string;
- (void)addGuessesForKoreanWord:(id)word includeAdditionalGuesses:(BOOL)guesses toGuesses:(id)guesses;
- (id)_correctionResultForKoreanString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string offset:(unsigned long long)offset tagger:(id)tagger appIdentifier:(id)identifier dictionary:(id)dictionary keyEventArray:(id)array;
- (id)spellServer:(id)server suggestGuessesForKoreanWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string options:(id)options;
- (BOOL)inputStringIsPinyin:(id)pinyin allowPartialLastSyllable:(BOOL)syllable;
- (BOOL)inputStringIsFullOrAbbreviatedPinyin:(id)pinyin;
- (void)_addContextAlternativesForPinyinInputString:(id)string modifications:(id)modifications afterIndex:(unsigned long long)index delta:(long long)delta toArray:(id)array;
- (id)contextAlternativeAnnotatedStringsForPinyinInputString:(id)string;
- (id)contextAlternativeAnnotatedStringsForJyutpingInputString:(id)string;
- (id)englishStringsFromWordBuffer:(char *)buffer length:(unsigned long long)length connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection;
- (id)englishStringFromWordBuffer:(char *)buffer length:(unsigned long long)length connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection;
- (void)addSpecialModifiedPinyinToArray:(id)array inBuffer:(char *)buffer length:(unsigned long long)length atEnd:(BOOL)end;
- (void)addModifiedPinyinToArray:(id)array connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection fromIndex:(unsigned long long)index prevIndex:(unsigned long long)index prevPrevIndex:(unsigned long long)index startingModificationsAt:(unsigned long long)at inBuffer:(char *)buffer length:(unsigned long long)length initialSyllableCount:(unsigned long long)count initialScore:(unsigned long long)score prevScore:(unsigned long long)score prevPrevScore:(unsigned long long)score lastSyllableScore:(unsigned long long)score couldBeAbbreviatedPinyin:(BOOL)pinyin;
- (void)addModifiedPartialPinyinToArray:(id)array connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection fromIndex:(unsigned long long)index prevIndex:(unsigned long long)index prevPrevIndex:(unsigned long long)index prePrevPrevIndex:(unsigned long long)index startingModificationsAt:(unsigned long long)at inBuffer:(char *)buffer length:(unsigned long long)length initialSyllableCount:(unsigned long long)count initialScore:(unsigned long long)score prevScore:(unsigned long long)score prevPrevScore:(unsigned long long)score lastSyllableScore:(unsigned long long)score;
- (id)_primitiveRetainedAlternativesForPinyinInputString:(id)string;
- (unsigned long long)_getSplitIndexes:(unsigned long long *)indexes maxCount:(unsigned long long)count forPinyinInputString:(id)string;
- (id)_pinyinStringByCombiningPinyinString:(id)string withPinyinString:(id)string;
- (id)_retainedAlternativesByCombiningAlternatives:(id)alternatives withAlternatives:(id)alternatives andAddingAlternatives:(id)alternatives;
- (id)_recursiveRetainedAlternativesForPinyinInputString:(id)string depth:(unsigned long long)depth;
- (id)spellServer:(id)server _retainedAlternativesForPinyinInputString:(id)string extended:(BOOL)extended;
- (id)spellServer:(id)server alternativesForPinyinInputString:(id)string;
- (id)spellServer:(id)server extendedAlternativesForPinyinInputString:(id)string;
- (id)spellServer:(id)server _retainedPrefixesForPinyinInputString:(id)string;
- (id)spellServer:(id)server prefixesForPinyinInputString:(id)string;
- (id)spellServer:(id)server _retainedCorrectionsForPinyinInputString:(id)string;
- (id)spellServer:(id)server correctionsForPinyinInputString:(id)string;
- (id)spellServer:(id)server _retainedModificationsForPinyinInputString:(id)string geometryModelData:(id)data;
- (id)spellServer:(id)server _retainedFinalModificationsForPinyinInputString:(id)string geometryModelData:(id)data;
- (id)spellServer:(id)server modificationsForPinyinInputString:(id)string;
- (id)spellServer:(id)server modificationsForPinyinInputString:(id)string geometryModelData:(id)data;
- (id)spellServer:(id)server finalModificationsForPinyinInputString:(id)string;
- (void)_addTwoLetterWordGuessesForWord:(id)word buffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object isCapitalized:(BOOL)capitalized isAllCaps:(BOOL)caps twoLetterWords:(const char *)words candidateList:(id)list;
- (void)_addConnectionGuessesForWord:(id)word buffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection candidateList:(id)list;
- (void)_addAdditionalGuessesForWord:(id)word sender:(id)sender buffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection accents:(const char *)accents isCapitalized:(BOOL)capitalized isAllCaps:(BOOL)caps isAllAlpha:(BOOL)alpha hasLigature:(BOOL)ligature suggestPossessive:(BOOL)possessive checkUser:(BOOL)user checkHyphens:(BOOL)hyphens candidateList:(id)list;
- (void)_addSpaceInsertionGuessesForWord:(id)word sender:(id)sender buffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection isCapitalized:(BOOL)capitalized checkUser:(BOOL)user oneLetterWords:(const char *)words twoLetterWords:(const char *)words candidateList:(id)list;
- (void)addLexiconGuessesForWord:(id)word buffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object minCorrectionLength:(unsigned long long)length minExtendedCorrectionLength:(unsigned long long)length isCapitalized:(BOOL)capitalized stopAfterFreeInsertions:(BOOL)insertions toGuesses:(id)guesses;
- (id)_spellServer:(id)server suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string languageObject:(id)object options:(id)options tagger:(id)tagger errorModel:(id)model guessesDictionaries:(id)dictionaries;
- (id)_spellServer:(id)server suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string languageObject:(id)object options:(id)options;
- (id)spellServer:(id)server suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string inLanguage:(id)language options:(id)options;
- (id)spellServer:(id)server suggestContextualGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string inLanguage:(id)language options:(id)options;
- (id)spellServer:(id)server suggestGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string inLanguage:(id)language options:(id)options errorModel:(id)model;
- (void)_addContextAlternativesForZhuyinInputString:(id)string modifications:(id)modifications afterIndex:(unsigned long long)index delta:(long long)delta toArray:(id)array;
- (id)contextAlternativeAnnotatedStringsForZhuyinInputString:(id)string;
- (id)_modifiedGrammarDescriptionForDescription:(id)description;
- (id)_detailWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range description:(id)description corrections:(id)corrections issueType:(unsigned long long)type;
- (id)_detailWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range description:(id)description corrections:(id)corrections;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_modifiedGrammarRangeForDoubledWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range sentenceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string corrections:(id)corrections;
- (BOOL)_acceptErrorWithRuleType:(unsigned long long)type ruleNumber:(unsigned long long)number grammarRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range sentenceRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string corrections:(id)corrections issueType:(unsigned long long *)type;
- (BOOL)_checkEnglishGrammarInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range indexIntoBuffer:(unsigned long long)buffer bufferLength:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender bufIO:(struct _PR_BUF_IO { char * x0; unsigned char x1; unsigned char x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; struct _PR_LIMITS * x7; struct _PR_PARA_INFO * x8; struct _PR_ERROR * x9; struct _PR_PARSE_INFO * * x10; unsigned char x11; short x12; char x13; char x14; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x15; } *)io retval:(int *)retval errorRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range details:(id *)details;
- (unsigned long long)acceptabilityOfWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object forPrediction:(BOOL)prediction alreadyCapitalized:(BOOL)capitalized depth:(unsigned long long)depth;
- (unsigned long long)acceptabilityOfWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object forPrediction:(BOOL)prediction alreadyCapitalized:(BOOL)capitalized;
- (BOOL)checkNegativeWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object alreadyCapitalized:(BOOL)capitalized;
- (BOOL)checkNegativeWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object;
- (BOOL)checkNoCapAbbreviationWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object;
- (BOOL)validateWordBuffer:(char *)buffer length:(unsigned long long)length connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection;
- (BOOL)validateWordPrefixBuffer:(char *)buffer length:(unsigned long long)length connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection;
- (BOOL)validateAbbreviationOrNumberWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender;
- (BOOL)checkSpecialPrefixesForWordBuffer:(char *)buffer length:(unsigned long long)length;
- (id)stringByRemovingArabicDiacriticsFromString:(id)string;
- (id)stringByReducingArabicAlefVariantsInString:(id)string;
- (id)stringByRemovingHebrewDiacriticsFromString:(id)string;
- (BOOL)validateWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender checkBase:(BOOL)base checkDict:(BOOL)dict checkTemp:(BOOL)temp checkUser:(BOOL)user checkNames:(BOOL)names checkHyphens:(BOOL)hyphens checkIntercaps:(BOOL)intercaps checkOptions:(BOOL)options forCorrection:(BOOL)correction depth:(unsigned long long)depth;
- (BOOL)validateWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender checkBase:(BOOL)base checkDict:(BOOL)dict checkTemp:(BOOL)temp checkUser:(BOOL)user checkNames:(BOOL)names checkHyphens:(BOOL)hyphens checkIntercaps:(BOOL)intercaps checkOptions:(BOOL)options depth:(unsigned long long)depth;
- (BOOL)validateWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender checkBase:(BOOL)base checkDict:(BOOL)dict checkTemp:(BOOL)temp checkNames:(BOOL)names checkHyphens:(BOOL)hyphens checkIntercaps:(BOOL)intercaps checkOptions:(BOOL)options depth:(unsigned long long)depth;
- (BOOL)validateWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender checkBase:(BOOL)base checkDict:(BOOL)dict checkNames:(BOOL)names checkHyphens:(BOOL)hyphens checkIntercaps:(BOOL)intercaps checkOptions:(BOOL)options depth:(unsigned long long)depth;
- (id)_orthographyByModifyingOrthography:(id)orthography withLatinLanguage:(id)language;
- (id)normalizedStringInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)server findMisspelledWordInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range languages:(id)languages topLanguages:(id)languages orthography:(id)orthography checkOrthography:(BOOL)orthography mutableResults:(id)results offset:(unsigned long long)offset autocorrect:(BOOL)autocorrect onlyAtInsertionPoint:(BOOL)point initialCapitalize:(BOOL)capitalize autocapitalize:(BOOL)autocapitalize keyEventArray:(id)array appIdentifier:(id)identifier selectedRangeValue:(id)value parameterBundles:(id)bundles wordCount:(long long *)count countOnly:(BOOL)only appendCorrectionLanguage:(BOOL)language correction:(id *)correction;
- (BOOL)_spellServer:(id)server canChangeCaseOfFirstLetterInString:(id)string toUpperCase:(BOOL)case languageObject:(id)object;
- (unsigned long long)numberOfTurkishSuffixPointsInBuffer:(char *)buffer length:(unsigned long long)length maxSuffixPoints:(unsigned long long)points suffixPoints:(struct { unsigned long long x0; int x1; } *)points;
- (BOOL)testTurkishSuffixationPattern:(id)pattern;
- (void)_checkEnglishArticlesInSentence:(id)sentence buffer:(char *)buffer length:(unsigned long long)length mutableCorrections:(id)corrections;
- (const void *)englishPhraseRoot;
- (void)_checkEnglishPhrasesInSentence:(id)sentence buffer:(char *)buffer length:(unsigned long long)length mutableCorrections:(id)corrections;
- (id)_checkSentence:(id)sentence languageObject:(id)object;
- (void)_checkSentence:(id)sentence languageObject:(id)object mutableCorrections:(id)corrections;
- (void)spellServer:(id)server checkSentenceCorrectionInString:(id)string rangeInParagraph:(struct _NSRange { unsigned long long x0; unsigned long long x1; })paragraph languageObject:(id)object locale:(id)locale tagger:(id)tagger offset:(unsigned long long)offset keyEventArray:(id)array selectedRangeValue:(id)value autocorrect:(BOOL)autocorrect checkGrammar:(BOOL)grammar ignoreTermination:(BOOL)termination mutableResults:(id)results;
- (BOOL)supportSentenceCorrectionForLanguageObject:(id)object appIdentifier:(id)identifier;
- (void)spellServer:(id)server checkSentenceCorrectionInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range languageObject:(id)object offset:(unsigned long long)offset keyEventArray:(id)array selectedRangeValue:(id)value autocorrect:(BOOL)autocorrect checkGrammar:(BOOL)grammar ignoreTermination:(BOOL)termination mutableResults:(id)results;
- (id)potentialSentenceCorrectionsForWord:(id)word languageObject:(id)object;
- (void)enumerateAssetDataItemsForLocale:(id)locale withBlock:(id /* block */)block;
- (id)_lexiconPathForLocalization:(id)localization type:(id)type;
- (id)_lexiconPathForLanguageObject:(id)object type:(id)type;
- (id)_phraseLexiconPathForLanguage:(id)language;
- (id)backgroundLoadingQueue;
- (id)_loadLexiconsForLanguage:(id)language localization:(id)localization onQueue:(id)queue;
- (id)_lexiconsForLanguage:(id)language waitForResult:(BOOL)result;
- (id)_lexiconsForLanguage:(id)language;
- (id)lexiconForLanguage:(id)language;
- (id)_lexiconsForLanguageObject:(id)object;
- (id)lexiconForLanguageObject:(id)object;
- (unsigned long long)loadedLexiconsCountForLanguageObject:(id)object;
- (id)_loadPhraseLexiconsForLanguage:(id)language localization:(id)localization onQueue:(id)queue;
- (id)_phraseLexiconsForLanguage:(id)language waitForResult:(BOOL)result;
- (id)_phraseLexiconsForLanguage:(id)language;
- (void)updateLexiconsForLanguage:(id)language;
- (void)updateLexiconsForLanguageIfNecessary:(id)necessary;
- (void)updateLexiconsForLanguageObject:(id)object;
- (void)updateLexiconsForLanguageObjectIfNecessary:(id)necessary;
- (void)updateAllLexicons;
- (BOOL)validateWord:(id)word inLexicons:(id)lexicons forLanguage:(id)language requiredMetaFlags:(unsigned int)flags alternativeRequiredMetaFlags:(unsigned int)flags prohibitedMetaFlags:(unsigned int)flags caseInsensitive:(BOOL)insensitive;
- (BOOL)validateWord:(id)word inLexiconForLanguage:(id)language;
- (BOOL)validateAdditionalWord:(id)word inLexiconForLanguage:(id)language;
- (BOOL)validateVariantWord:(id)word inLexiconForLanguage:(id)language;
- (BOOL)validateNoCapAbbreviation:(id)abbreviation inLexiconForLanguage:(id)language;
- (BOOL)validateUntilLearnedWord:(id)word inLexiconForLanguage:(id)language;
- (BOOL)validateWord:(id)word inLexiconsForLanguageObject:(id)object requiredMetaFlags:(unsigned int)flags alternativeRequiredMetaFlags:(unsigned int)flags prohibitedMetaFlags:(unsigned int)flags caseInsensitive:(BOOL)insensitive;
- (BOOL)validateWord:(id)word inLexiconForLanguageObject:(id)object;
- (BOOL)validateAdditionalWord:(id)word inLexiconForLanguageObject:(id)object;
- (BOOL)validateVariantWord:(id)word inLexiconForLanguageObject:(id)object;
- (BOOL)validateNoCapAbbreviation:(id)abbreviation inLexiconForLanguageObject:(id)object;
- (BOOL)validateUntilLearnedWord:(id)word inLexiconForLanguageObject:(id)object;
- (BOOL)validateWord:(id)word inLexicon:(id)lexicon;
- (BOOL)getMetaFlagsForWord:(id)word inLexiconForLanguage:(id)language metaFlags:(unsigned int *)flags otherMetaFlags:(unsigned int *)flags;
- (id)phraseMatching:(id)matching inLexiconForLanguage:(id)language;
- (void)enumerateEntriesForWord:(id)word inLexiconForLanguage:(id)language withBlock:(id /* block */)block;
- (void)enumerateCorrectionEntriesForWord:(id)word maxCorrections:(unsigned long long)corrections inLexiconForLanguage:(id)language withBlock:(id /* block */)block;
- (BOOL)getMetaFlagsForWord:(id)word inLexiconForLanguageObject:(id)object metaFlags:(unsigned int *)flags otherMetaFlags:(unsigned int *)flags;
- (id)phraseMatching:(id)matching inLexiconForLanguageObject:(id)object;
- (void)enumerateEntriesForWord:(id)word inLexiconForLanguageObject:(id)object withBlock:(id /* block */)block;
- (void)enumerateCorrectionEntriesForWord:(id)word maxCorrections:(unsigned long long)corrections inLexiconForLanguageObject:(id)object withBlock:(id /* block */)block;
- (id)vietnameseModificationForWord:(id)word;
- (char *)_validatedGuessWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender checkUser:(BOOL)user additionalBuffer:(char *)buffer;
- (void)_addGuessesForWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender minAutocorrectionLength:(unsigned long long)length previousLetter:(unsigned short)letter nextLetter:(unsigned short)letter basicOnly:(BOOL)only toGuesses:(id)guesses;
- (BOOL)_findMatchingRangesForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string keyEventArray:(id)array endingAtIndex:(unsigned long long)index matchingStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range correctableStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range matchingKeyEventRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range firstMisspelledKeyEventIndex:(unsigned long long *)index lastMisspelledKeyEventIndex:(unsigned long long *)index previousBackspaceCount:(unsigned long long *)count;
- (BOOL)findMatchingRangesForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string keyEventArray:(id)array selectedRangeValue:(id)value matchingStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range correctableStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range matchingKeyEventRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range firstMisspelledKeyEventIndex:(unsigned long long *)index lastMisspelledKeyEventIndex:(unsigned long long *)index previousBackspaceCount:(unsigned long long *)count;
- (id)_capitalizationResultForString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string offset:(unsigned long long)offset languageObject:(id)object onlyAtInsertionPoint:(BOOL)point keyEventArray:(id)array selectedRangeValue:(id)value;
- (id)_phraseCapitalizationResultForString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range currentWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string offset:(unsigned long long)offset languageObject:(id)object onlyAtInsertionPoint:(BOOL)point keyEventArray:(id)array selectedRangeValue:(id)value;
- (BOOL)wordIsAlreadyAccented:(id)accented;
- (id)_accentCorrectionResultForString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string offset:(unsigned long long)offset languageObject:(id)object onlyAtInsertionPoint:(BOOL)point capitalize:(BOOL)capitalize keyEventArray:(id)array selectedRangeValue:(id)value;
- (BOOL)_acceptWithoutAccentForString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string languageObject:(id)object;
- (id)_initialCorrectionForString:(id)string lowercaseString:(id)string isFirstSecondCapitalized:(BOOL)capitalized dictionary:(id)dictionary languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection;
- (BOOL)_prohibitCorrectionBasedOnCountsForString:(id)string lowercaseString:(id)string appIdentifier:(id)identifier languageObject:(id)object typologyCorrection:(id)correction;
- (id)_umlautCorrectionForWord:(id)word buffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection typologyCorrection:(id)correction;
- (id)_connectionCorrectionForWord:(id)word buffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection flags:(unsigned long long)flags isCapitalized:(BOOL)capitalized accentCorrectionOnly:(BOOL)only isAbbreviation:(BOOL *)abbreviation trySpaceInsertion:(BOOL *)insertion hasAccentCorrections:(BOOL *)corrections candidateList:(id)list typologyCorrection:(id)correction;
- (id)_spaceInsertionCorrectionForWord:(id)word buffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection flags:(unsigned long long)flags isCapitalized:(BOOL)capitalized typologyCorrection:(id)correction;
- (BOOL)_prohibitCorrectionForLanguageObject:(id)object lastKeyboardLanguageObject:(id)object;
- (BOOL)_permitCorrection:(id)correction languageObject:(id)object flags:(unsigned long long)flags isCapitalized:(BOOL)capitalized typologyCorrection:(id)correction;
- (id)_correctionResultForWord:(id)word replacementRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string offset:(unsigned long long)offset languageObject:(id)object capitalize:(BOOL)capitalize isCapitalized:(BOOL)capitalized isSecondCapitalized:(BOOL)capitalized hasCurlyApostrophe:(BOOL)apostrophe appendCorrectionLanguage:(BOOL)language capitalizationLocale:(id)locale proposedCorrection:(id)correction;
- (id)_correctionResultForString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string offset:(unsigned long long)offset tagger:(id)tagger appIdentifier:(id)identifier dictionary:(id)dictionary languages:(id)languages connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection flags:(unsigned long long)flags keyEventArray:(id)array selectedRangeValue:(id)value parameterBundles:(id)bundles previousLetter:(unsigned short)letter nextLetter:(unsigned short)letter extraMisspellingCount:(unsigned long long)count extraCorrectionCount:(unsigned long long *)count;
- (id)spellServer:(id)server suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string inLanguage:(id)language options:(id)options;
- (id)spellServer:(id)server suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string inLanguage:(id)language options:(id)options;
- (id)spellServer:(id)server suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string inLanguage:(id)language options:(id)options;
- (id)spellServer:(id)server suggestWordWithMinimumLength:(unsigned long long)length maximumLength:(unsigned long long)length language:(id)language;
- (void)personalizeEmojiArray:(id)array;
- (BOOL)noSuggestForCompletion:(id)completion languageObject:(id)object appIdentifier:(id)identifier alreadyCapitalized:(BOOL)capitalized;
- (id)spellServer:(id)server candidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string offset:(unsigned long long)offset types:(unsigned long long)types options:(id)options orthography:(id)orthography;
- (id)taggerForLanguageObject:(id)object string:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)globalDictionaryArray;
- (id)localDictionaryArrayForLanguageObject:(id)object;
- (BOOL)checkWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object index:(unsigned long long)index;
- (BOOL)checkNameWordBuffer:(char *)buffer length:(unsigned long long)length languageObject:(id)object globalOnly:(BOOL)only;
- (id)dictionaryForLanguageObject:(id)object index:(unsigned long long)index;
- (id)autocorrectionDictionaryForLanguageObject:(id)object;
- (id)guessesDictionaryForLanguageObject:(id)object;
- (id)capitalizationDictionaryArrayForLanguageObject:(id)object;
- (id)phraseCorrectionsDictionaryForLanguageObject:(id)object;
- (id)sentenceCorrectionsDictionaryForLanguageObject:(id)object;
- (id)parameterBundleForLanguageObject:(id)object;
- (id)transformerParameterBundleForLanguageObject:(id)object;
- (void)clearCaches;
- (id)sentenceTerminatorCharacterSet;
- (id)_standardizedLanguageModelStringForString:(id)string;
- (unsigned int)_tokenIDForString:(id)string languageModel:(id)model languageObject:(id)object createIfAbsent:(BOOL)absent terminatorTokenID:(unsigned int)id;
- (unsigned int)_tokenIDForString:(id)string languageModel:(id)model languageObject:(id)object terminatorTokenID:(unsigned int)id;
- (id)_stringForTokenIDs:(const unsigned int *)ids tokenCount:(unsigned long long)count entryString:(id)string languageModel:(id)model languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender prefix:(id)prefix capitalized:(BOOL)capitalized;
- (id)_stringForCompletion:(id)completion languageModel:(id)model languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender prefix:(id)prefix capitalized:(BOOL)capitalized;
- (BOOL)shouldBlockWord:(id)word languageObject:(id)object;
- (id)backgroundMaintenanceQueue;
- (unsigned long long)_contextLengthForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range languageObject:(id)object tagger:(id)tagger languageModel:(id)model maxContextLength:(unsigned long long)length context:(unsigned int *)context cleanOffset:(unsigned long long *)offset cleanContextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range lastTokenRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range lastTokenID:(unsigned int *)id;
- (id)languageModelLocalizationForLanguage:(id)language;
- (void)_readLanguageModelParametersFromDefaults;
- (void)_readLanguageModelParametersFromDictionary:(id)dictionary;
- (id)_loadWordLanguageModelForLanguage:(id)language localization:(id)localization appIdentifier:(id)identifier onQueue:(id)queue;
- (id)modelCreationQueue;
- (id)wordLanguageModelForLanguage:(id)language appIdentifier:(id)identifier waitForResult:(BOOL)result;
- (id)wordLanguageModelForLanguageObject:(id)object appIdentifier:(id)identifier waitForResult:(BOOL)result;
- (BOOL)useWordLanguageModelForLanguageObject:(id)object tagger:(id)tagger appIdentifier:(id)identifier;
- (BOOL)useCharacterLanguageModelForLanguageObject:(id)object tagger:(id)tagger appIdentifier:(id)identifier;
- (BOOL)useTransformerLanguageModelForLanguageObject:(id)object tagger:(id)tagger appIdentifier:(id)identifier;
- (BOOL)useSentencePieceLanguageModelForLanguageObject:(id)object tagger:(id)tagger appIdentifier:(id)identifier;
- (void)loadWordLanguageModelForLanguageObject:(id)object;
- (BOOL)useUnigramProbabilityForLanguageObject:(id)object;
- (id)_loadNLPLanguageModelWithType:(long long)type forLanguageObject:(id)object onQueue:(id)queue;
- (id)_NLPLanguageModelWithType:(long long)type forLanguageObject:(id)object waitForResult:(BOOL)result;
- (id)characterLanguageModelForLanguageObject:(id)object waitForResult:(BOOL)result;
- (id)transformerLanguageModelForLanguageObject:(id)object waitForResult:(BOOL)result;
- (id)sentencePieceLanguageModelForLanguageObject:(id)object waitForResult:(BOOL)result;
- (unsigned long long)_resetLanguageModels;
- (void)_releaseLanguageModels;
- (void)resetLanguageModels;
- (void)releaseLanguageModels;
- (void)_addLanguageModelCompletionsForPrefix:(id)prefix languageModel:(id)model languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender capitalized:(BOOL)capitalized candidates:(id)candidates;
- (id)languageModelCompletionsForPartialWord:(id)word languageObject:(id)object sender:(id)sender appIdentifier:(id)identifier;
- (BOOL)_addLanguageModelCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range languageObject:(id)object connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender tagger:(id)tagger appIdentifier:(id)identifier waitForLanguageModel:(BOOL)model allowTransformer:(BOOL)transformer candidates:(id)candidates scoreDictionary:(id)dictionary tryTransliteration:(BOOL *)transliteration;
- (BOOL)_getUnigramProbabilityForString:(id)string languageModel:(id)model probability:(double *)probability;
- (id)_rankedCandidatesForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range candidates:(id)candidates languageObject:(id)object tagger:(id)tagger appIdentifier:(id)identifier allowTransformer:(BOOL)transformer scoreDictionary:(id)dictionary;
- (void)getParameterValue:(double *)value forName:(id)name languageObject:(id)object tagger:(id)tagger appIdentifier:(id)identifier parameterBundles:(id)bundles defaultValue:(double)value;
- (id)_languageModelStateScoresForCandidateList:(id)list languageModel:(id)model state:(id)state language:(id)language tagger:(id)tagger;
- (id)_rankedCandidatesForCandidateList:(id)list languageObject:(id)object tagger:(id)tagger appIdentifier:(id)identifier parameterBundles:(id)bundles;
- (BOOL)_useAlternateLanguageForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range ofString:(id)string languageObject:(id)object tagger:(id)tagger alternateLanguageObject:(id)object alternateTagger:(id)tagger appIdentifier:(id)identifier;
- (float)dynamicScoreForWord:(id)word languageModel:(id)model languageObject:(id)object;
- (float)dynamicScoreForWord:(id)word languageObject:(id)object appIdentifier:(id)identifier;
- (id)assetDataBundleURLsForLanguageObject:(id)object;
- (BOOL)getConditionalProbabilityForWord:(id)word context:(id)context language:(id)language probability:(double *)probability;
- (BOOL)getCharacterModelConditionalProbabilityForString:(id)string context:(id)context language:(id)language probability:(double *)probability;
- (BOOL)getTransformerModelConditionalProbabilityForString:(id)string context:(id)context language:(id)language probability:(double *)probability;
- (void)timeout:(id)timeout;
- (void)resetTimer;
- (id)init;
- (id)dataBundle;
- (id)dataBundlesForLanguageObject:(id)object;
- (void)resetDataBundlesForLanguageObject:(id)object;
- (void)resetDataBundlesForAllLanguages;
- (id)databasePathForLanguageObject:(id)object;
- (void *)databaseConnectionForLanguageObject:(id)object;
- (void)releaseDatabaseConnections;
- (void)addAlternateDataBundleURL:(id)url;
- (void)setUpdateBundleURL:(id)url;
- (void)resetAllLanguageModels;
- (void)releaseAllLanguageModels;
- (void)releaseAllLexicons;
- (void)loadLexiconsAndLanguageModelsForLanguage:(id)language;
- (BOOL)_checkGrammarInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range language:(id)language connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int * x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE * x0[1] struct _PR_FILE * x1; struct _PR_FILE * x2; struct _PR_FILE * x3; struct _PR_FILE * x4; } x12; struct _RULEFILE * x13[1] struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)connection sender:(id)sender bufIO:(struct _PR_BUF_IO { char * x0; unsigned char x1; unsigned char x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; struct _PR_LIMITS * x7; struct _PR_PARA_INFO * x8; struct _PR_ERROR * x9; struct _PR_PARSE_INFO * * x10; unsigned char x11; short x12; char x13; char x14; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x15; } *)io errorRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range details:(id *)details;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)server checkGrammarInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range language:(id)language orthography:(id)orthography mutableResults:(id)results offset:(unsigned long long)offset details:(id *)details;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)server checkGrammarInString:(id)string language:(id)language details:(id *)details;
- (id)spellServer:(id)server checkGrammarInString:(id)string range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range language:(id)language offset:(unsigned long long)offset options:(id)options;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)server findMisspelledWordInString:(id)string language:(id)language wordCount:(long long *)count countOnly:(BOOL)only;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)server findMisspelledWordInString:(id)string language:(id)language wordCount:(long long *)count countOnly:(BOOL)only correction:(id *)correction;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)server findMisspelledWordInString:(id)string languages:(id)languages wordCount:(long long *)count countOnly:(BOOL)only correction:(id *)correction;
- (id)spellServer:(id)server checkString:(id)string offset:(unsigned long long)offset types:(unsigned long long)types options:(id)options orthography:(id)orthography wordCount:(long long *)count;
- (id)spellServer:(id)server generateCandidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string offset:(unsigned long long)offset types:(unsigned long long)types options:(id)options orthography:(id)orthography;
- (id)spellServer:(id)server suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language options:(id)options;
- (id)spellServer:(id)server suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language;
- (id)spellServer:(id)server suggestGuessesForWord:(id)word inLanguage:(id)language;
- (id)spellServer:(id)server suggestContextualGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language options:(id)options;
- (id)spellServer:(id)server suggestGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language options:(id)options errorModel:(id)model;
- (id)spellServer:(id)server suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language options:(id)options;
- (id)spellServer:(id)server suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language;
- (id)spellServer:(id)server suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language options:(id)options;
- (id)spellServer:(id)server suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language;
- (id)spellServer:(id)server suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language options:(id)options;
- (id)spellServer:(id)server suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inString:(id)string language:(id)language;
- (id)spellServer:(id)server suggestWordWithLengthInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range language:(id)language;
- (id)spellServer:(id)server stringForInputString:(id)string language:(id)language;
- (id)spellServer:(id)server alternativesForPinyinInputString:(id)string language:(id)language;
- (id)spellServer:(id)server extendedAlternativesForPinyinInputString:(id)string language:(id)language;
- (id)spellServer:(id)server prefixesForPinyinInputString:(id)string language:(id)language;
- (id)spellServer:(id)server correctionsForPinyinInputString:(id)string language:(id)language;
- (BOOL)spellServer:(id)server canChangeCaseOfFirstLetterInString:(id)string toUpperCase:(BOOL)case language:(id)language;
@end

#endif /* AppleSpell_h */
