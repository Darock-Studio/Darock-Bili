//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1450.2.4.0.0
//
#ifndef SSURLSessionManager_h
#define SSURLSessionManager_h
@import Foundation;

#include "NSCacheDelegate-Protocol.h"
#include "NSURLSessionDataDelegate-Protocol.h"
#include "SSCircularBuffer.h"
#include "SSMetricsController.h"

@class NSArray, NSMapTable, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface SSURLSessionManager : NSObject<NSCacheDelegate, NSURLSessionDataDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_source> *_memoryPressureSource;
  unsigned int _memoryPressureStatus;
  unsigned long long _memoryPressureCachedMaxSize;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *eventQueue;
@property (retain, nonatomic) SSCircularBuffer *httpArchiveBuffer;
@property (retain, nonatomic) SSMetricsController *metricsController;
@property (retain, nonatomic) NSMutableDictionary *requestData;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *requestDataQueue;
@property (retain, nonatomic) NSMutableDictionary *taskMetrics;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *taskMetricsQueue;
@property (retain, nonatomic) NSMutableDictionary *responseData;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *responseDataQueue;
@property (retain, nonatomic) NSMutableDictionary *recordResponseMap;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *recordResponseQueue;
@property (retain, nonatomic) NSMutableDictionary *sendTimingDataMap;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *sendTimingDataQueue;
@property (retain, nonatomic) NSMutableDictionary *sessions;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *sessionsQueue;
@property (retain, nonatomic) NSMapTable *taskDelegates;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *taskDelegatesQueue;
@property (nonatomic) unsigned long long httpArchiveBufferSize;
@property (copy, nonatomic) NSArray *customURLProtocols;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedManager;
+ (id)eventFromTimingData:(id)data task:(id)task;
+ (id)eventFromTimingData:(id)data task:(id)task error:(id)error;
+ (id)eventFromTimingData:(id)data requestProperties:(id)properties task:(id)task error:(id)error;
+ (id)eventFromTimingData:(id)data delegate:(id)delegate task:(id)task error:(id)error;
+ (id)eventFromTimingData:(id)data delegate:(id)delegate session:(id)session task:(id)task error:(id)error;
+ (id)_legacyBagValueForKey:(id)key;
+ (id)_DNSServerIPAddresses;
+ (unsigned long long)_messageSizeFromTask:(id)task isRequest:(BOOL)request delegate:(id)delegate;
+ (id)_responseDateFromTask:(id)task delegate:(id)delegate;
+ (BOOL)_shouldCreateLocalCache;
+ (id)_tidStateForTask:(id)task delegate:(id)delegate;
+ (BOOL)_fetchedFromCache:(id)cache;
+ (id)_fetchNetworkQualityReports;
+ (double)_randomDouble;
+ (BOOL)_shouldCollectNetworkLogs;
+ (id)_bagPerformanceValuesWithDelegate:(id)delegate;
+ (id)_metricsDictionaryWithDelegate:(id)delegate;
+ (id)bagValueForKey:(id)key delegate:(id)delegate type:(unsigned long long)type;
+ (double)_localTimeIntervalToServerTimeInterval:(double)interval;
+ (id)_resolvedIPAddressFromTask:(id)task;
+ (double)_timingDataMetricToServerTimeInterval:(id)interval;

/* instance methods */
- (id)init;
- (void)dealloc;
- (id)dataTaskWithRequest:(id)request delegate:(id)delegate;
- (void)flushHTTPArchiveBuffer;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveData:(id)data;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession task:(id)task didCompleteWithError:(id)error;
- (void)URLSession:(id)urlsession task:(id)task didFinishCollectingMetrics:(id)metrics;
- (void)URLSession:(id)urlsession task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
- (void)URLSession:(id)urlsession task:(id)task needNewBodyStream:(id /* block */)stream;
- (void)URLSession:(id)urlsession task:(id)task willPerformHTTPRedirection:(id)httpredirection newRequest:(id)request completionHandler:(id /* block */)handler;
- (id)_delegateForTask:(id)task;
- (void)_logCacheHitForTask:(id)task metrics:(id)metrics;
- (int)_PIDFromAuditTokenData:(id)data;
- (void)_removeDelegateForTask:(id)task;
- (BOOL)_sendTimingDataForSessionTask:(id)task;
- (id)_sessionWithDelegate:(id)delegate collectTimingData:(BOOL *)data;
- (id)_sessionIDWithDelegate:(id)delegate collectTimingData:(BOOL)data allowsTLSSessionTickets:(BOOL)tickets;
- (id)_sessionConfigurationWithDelegate:(id)delegate collectTimingData:(BOOL)data allowsTLSSessionTickets:(BOOL)tickets;
- (void)_setDelegate:(id)delegate forTask:(id)task;
- (void)_setSendTimingData:(id)data forSessionTask:(id)task;
- (void)_setTaskMetrics:(id)metrics forSessionTask:(id)task;
- (BOOL)_shouldDisableCellularForDelegate:(id)delegate;
- (BOOL)_shouldRequireCelluarForDelegate:(id)delegate;
- (BOOL)_shouldEnableTLSSessionForDelegate:(id)delegate;
- (BOOL)_shouldSetCookiesForDelegate:(id)delegate;
- (id)_taskMetricsForSessionTask:(id)task;
- (id)_URLCacheForDelegate:(id)delegate;
- (id)_URLCacheIDForDelegate:(id)delegate;
- (void)_appendResponseData:(id)data forSessionTask:(id)task;
- (void)_listenForLowMemoryWarning;
- (void)_removeRecordResponseDataForSessionTask:(id)task;
- (void)_removeResponseDataForSessionTask:(id)task;
- (id)_requestDataForSessionTask:(id)task;
- (id)_responseDataForSessionTask:(id)task;
- (id)_saveHTTPArchiveBufferToDiskDecompressed:(BOOL)decompressed;
- (void)_setRequestData:(id)data forSessionTask:(id)task;
- (BOOL)_shouldRecordResponseBodyForDataTask:(id)task;
- (void)_logAPSResultsWithTask:(id)task;
- (void)_setAPSTopicWithTask:(id)task;
- (BOOL)_shouldEnableAPSRWithTask:(id)task;
- (void)_insertEventIntoDatabase:(id)database delegate:(id)delegate;
@end

#endif /* SSURLSessionManager_h */
