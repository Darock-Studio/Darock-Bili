//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1450.2.4.0.0
//
#ifndef SSVPlayActivityController_h
#define SSVPlayActivityController_h
@import Foundation;

#include "SSVPlayActivityTable.h"

@class NSMutableArray, NSMutableDictionary, NSOperationQueue, NSXPCConnection;
@protocol OS_dispatch_queue;

@interface SSVPlayActivityController : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_accessQueue;
  NSOperationQueue *_debugLogOperationQueue;
  NSMutableDictionary *_endpointIdentifierToEndpointRevisionInformation;
  int _endpointRevisionInformationDidChangeNotifyToken;
  BOOL _hasLoadedEndpointRevisionInformation;
  BOOL _hasSetupEndpointRevisionInformationDidChangeNotifyToken;
  BOOL _hasValidEndpointRevisionInformationDidChangeNotifyToken;
  NSMutableArray *_pendingFlushingSessions;
  NSObject<OS_dispatch_queue> *_serialQueue;
  SSVPlayActivityTable *_table;
  NSXPCConnection *_daemonPlayActivityControllerConnection;
}

@property (readonly, nonatomic) unsigned long long writingStyle;

/* class methods */
+ (id)_requiredEndpointIdentifiers;

/* instance methods */
- (id)init;
- (id)initWithWritingStyle:(unsigned long long)style;
- (void)dealloc;
- (void)acquirePendingPlayActivityEventsForEndpointIdentifier:(id)identifier withStoreAccountID:(unsigned long long)id completionHandler:(id /* block */)handler;
- (void)acquirePendingPlayActivityEventsForEndpointIdentifier:(id)identifier withCompletionHandler:(id /* block */)handler;
- (void)completePendingPlayActivityEvents:(id)events forSessionToken:(unsigned long long)token withResult:(unsigned long long)result completionHandler:(id /* block */)handler;
- (void)completePendingPlayActivityEventPersistentIDs:(id)ids forSessionToken:(unsigned long long)token withResult:(unsigned long long)result completionHandler:(id /* block */)handler;
- (void)flushPendingPlayActivityEventsForEndpointIdentifier:(id)identifier withCompletionHandler:(id /* block */)handler;
- (void)getHasPendingPlayEventsForEndpointIdentifier:(id)identifier withCompletionHandler:(id /* block */)handler;
- (void)getRevisionInformationWithCompletionHandler:(id /* block */)handler;
- (void)getPlayActivityEventsFromRevision:(unsigned long long)revision toRevision:(unsigned long long)revision withCompletionHandler:(id /* block */)handler;
- (void)recordPlayActivityEvents:(id)events withCompletionHandler:(id /* block */)handler;
- (void)removeFlushedPlayActivityEventsWithCompletionHandler:(id /* block */)handler;
- (void)removePlayActivityEventsUpToRevision:(unsigned long long)revision withCompletionHandler:(id /* block */)handler;
- (void)setCurrentRevision:(unsigned long long)revision revisionVersionToken:(id)token forEndpointIdentifier:(id)identifier withCompletionHandler:(id /* block */)handler;
- (void)_acquirePendingPlayActivityEventsForEndpointIdentifier:(id)identifier withStoreAccountID:(unsigned long long)id shouldFilterStoreAccountID:(BOOL)id completionHandler:(id /* block */)handler;
- (void)_completePendingPlayEventsWithRevisionIndexSet:(id)set forSessionToken:(unsigned long long)token withResult:(unsigned long long)result completionHandler:(id /* block */)handler;
- (id)_daemonPlayActivityControllerConnection;
- (id)_copyEndpointRevisionInformationForEndpointIdentifier:(id)identifier;
- (void)_getFlushSessionInformationForEndpointIdentifier:(id)identifier shouldAcquire:(BOOL)acquire storeAccountID:(unsigned long long)id shouldFilterStoreAccountID:(BOOL)id withCompletionHandler:(id /* block */)handler;
- (void)_loadEndpointIdentifierInformationIfNeeded;
- (id)_revisionsIndexSetForPlayActivityEvents:(id)events;
- (id)_revisionsIndexSetForPlayActivityEventPersistentIDs:(id)ids;
- (id)_sessionInformationForSessionToken:(unsigned long long)token;
- (BOOL)_setEndpointRevisionInformation:(id)information forEndpointIdentifier:(id)identifier;
- (void)_setupNotifyTokenIfNeeded;
@end

#endif /* SSVPlayActivityController_h */
