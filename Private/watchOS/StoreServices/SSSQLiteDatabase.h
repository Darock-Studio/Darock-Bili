//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1450.2.4.0.0
//
#ifndef SSSQLiteDatabase_h
#define SSSQLiteDatabase_h
@import Foundation;

@class BKSProcessAssertion, BOOL *, NSString;
@protocol OS_dispatch_queue;

@interface SSSQLiteDatabase : NSObject {
  /* instance variables */
  struct sqlite3 * _db;
  NSObject<OS_dispatch_queue> *_dispatchQueue;
  NSString *_databasePath;
  BOOL _readOnly;
  BOOL _shouldAttemptToReopenDB;
  BOOL _isInTransaction;
  NSString *_protectionType;
  struct __CFDictionary * _statementCache;
  BKSProcessAssertion *_taskAssertion;
  long long _taskAssertionCount;
}

@property BOOL takesTaskCompletionAssertions;
@property (copy, nonatomic) id /* block */ setupBlock;

/* class methods */
+ (BOOL)statementDidFinishAfterStepping:(struct sqlite3_stmt *)stepping;
+ (BOOL)statementHasRowAfterStepping:(struct sqlite3_stmt *)stepping;
+ (void)_setTakesTaskCompletionAssertions:(BOOL)assertions;
+ (void)_stepStatement:(struct sqlite3_stmt *)statement hasRow:(BOOL *)row didFinish:(BOOL *)finish isCorrupt:(BOOL *)corrupt;

/* instance methods */
- (id)initWithDatabaseURL:(id)url;
- (id)initWithDatabaseURL:(id)url readOnly:(BOOL)only;
- (id)initWithDatabaseURL:(id)url readOnly:(BOOL)only protectionType:(id)type;
- (void)dealloc;
- (void)accessDatabaseUsingBlock:(id /* block */)block;
- (BOOL)columnName:(id)name existsInTable:(id)table;
- (long long)countChanges;
- (void)dispatchAfter:(unsigned long long)after block:(id /* block */)block;
- (void)dispatchBlockAsync:(id /* block */)async;
- (void)dispatchBlockSync:(id /* block */)sync;
- (BOOL)executeSQL:(id)sql;
- (id)newDispatchSourceWithType:(struct dispatch_source_type_s *)type;
- (void)performTransactionWithBlock:(id /* block */)block;
- (void)prepareStatementForSQL:(id)sql cache:(BOOL)cache usingBlock:(id /* block */)block;
- (BOOL)setUserVersion:(long long)version;
- (BOOL)setUserVersion:(long long)version forDatabase:(id)database;
- (long long)userVersion;
- (long long)userVersionForDatabase:(id)database;
- (void)beginTaskCompletionAssertion;
- (void)endTaskCompletionAssertion;
- (void)expireBackgroundTask;
- (BOOL)statementDidFinishAfterStepping:(struct sqlite3_stmt *)stepping;
- (BOOL)statementHasRowAfterStepping:(struct sqlite3_stmt *)stepping;
- (void)_accessDatabaseUsingBlock:(id /* block */)block;
- (void)_beginTaskCompletionAssertion;
- (int)_closeDatabaseIfOpen;
- (void)_endTaskCompletionAssertion;
- (void)_expireBackgroundTask;
- (id)_openDatabaseIfNotOpen;
- (int)_openFlags;
- (int)_resetAndReopenDatabaseWithPath:(id)path;
- (void)_resetCorruptDatabase;
- (void)_resetDatabaseWithPath:(id)path;
- (struct sqlite3_stmt *)_statementForSQL:(id)sql cache:(BOOL)cache;
@end

#endif /* SSSQLiteDatabase_h */
