//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PLPositionalImageTable_h
#define PLPositionalImageTable_h
@import Foundation;

#include "PLPositionalTable.h"
#include "PLImageFormat.h"
#include "PLThumbPersistenceManager-Protocol.h"

@class NSString;

@interface PLPositionalImageTable : PLPositionalTable<PLThumbPersistenceManager>

@property (nonatomic) BOOL formatIsCropped;
@property (nonatomic) int formatSideLen;
@property (readonly, nonatomic) unsigned long long formatBytesPerPixel;
@property (readonly, nonatomic) unsigned long long formatMaxBytesPerRow;
@property (readonly, nonatomic) PLImageFormat *format;
@property (readonly, nonatomic) NSString *path;
@property (readonly, nonatomic) BOOL isReadOnly;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (unsigned long long)metalPixelFormat;
+ (struct __CFString *)colorSpaceName;

/* instance methods */
- (id)initWithPath:(id)path readOnly:(BOOL)only format:(id)format;
- (id)imageDataWithIdentifier:(id)identifier orIndex:(unsigned long long)index width:(int *)width height:(int *)height bytesPerRow:(int *)row dataWidth:(int *)width dataHeight:(int *)height dataOffset:(int *)offset;
- (struct CGImage *)createImageWithIdentifier:(id)identifier orIndex:(unsigned long long)index;
- (BOOL)usesThumbIdentifiers;
- (BOOL)validateData:(id)data withToken:(id)token;
- (void)preheatDataForThumbnailIndexes:(id)indexes;
- (id)beginThumbnailSafePropertyUpdatesOnAssetThumbnailIdentifier:(id)identifier;
- (void)endThumbnailSafePropertyUpdatesOnAssetThumbnailIdentifier:(id)identifier withToken:(id)token;
- (id)_debugDescription;
- (Class)entriesClass;
- (id)debugImageDataAtIndex:(unsigned long long)index;
- (void)getImageDataOffset:(long long *)offset size:(struct CGSize { double x0; double x1; } *)size bytesPerRow:(unsigned long long *)row fromEntryFooter:(struct PLImageTableEntryFooter_s { struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x0; unsigned int x1; unsigned int x2; int x3; } *)footer;
- (id)readImageEntriesAtIndexes:(id)indexes;
- (BOOL)writeDebugImageAtIndex:(unsigned long long)index toFileURL:(id)url;
- (BOOL)readImageDataAtIndex:(unsigned long long)index intoPoolNode:(struct tagPLPositionalTableMemoryPoolNode { void * x0; struct tagPLPositionalTableMemoryPool * x1; BOOL x2; struct tagPLPositionalTableMemoryPoolNode * x3; } *)node bytesRead:(unsigned long long *)read imageWidth:(int *)width imageHeight:(int *)height imageDataWidth:(int *)width imageDataHeight:(int *)height startingOffset:(long long *)offset bytesPerRow:(unsigned long long *)row uuidBytes:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } *)bytes;
- (struct PLImageTableEntryFooter_s { struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x0; unsigned int x1; unsigned int x2; int x3; } *)tableFooterForIndex:(unsigned long long)index;
@end

#endif /* PLPositionalImageTable_h */
