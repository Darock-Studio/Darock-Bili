//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 101.40.6.0.0
//
#ifndef MSCMSRecipientInfo_h
#define MSCMSRecipientInfo_h
@import Foundation;

#include "MSAlgorithmIdentifier.h"

@class NSArray, NSData, NSNumber;

@interface MSCMSRecipientInfo : NSObject

@property (retain) NSNumber *version;
@property (retain) NSArray *encryptedKeys;
@property (retain) NSData *userKeyingMaterial;
@property (retain) NSArray *algorithmCapabilities;
@property (retain) MSAlgorithmIdentifier *keyEncryptionAlgorithm;
@property (nonatomic) struct __SecCertificate * recipientCertificate;
@property (retain) NSArray *recipientCertificates;
@property (nonatomic) struct __SecCertificate * originator;
@property (retain) NSData *originatorPubKey;

/* class methods */
+ (id)decodeKeyTransRecipientInfo:(struct RecipientInfo { int x0; union { struct KeyTransRecipientInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data { unsigned long long x0; void * x1; } x3; } x0; struct KeyAgreeRecipientInfo { int x0; struct OriginatorIdentifierOrKey { int x0; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x0; void * x1; } x0; struct heim_integer { unsigned long long x0; void * x1; int x2; } x1; } x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x0; struct heim_bit_string { unsigned long long x0; void * x1; } x1; } x2; } x1; } x1; struct heim_base_data * x2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x3; struct RecipientEncryptedKeys { unsigned int x0; struct RecipientEncryptedKey * x1; } x4; } x1; } x1; } *)info certificates:(id)certificates LAContext:(id)lacontext error:(id *)error;
+ (id)decodeKeyAgreeRecipientInfo:(struct RecipientInfo { int x0; union { struct KeyTransRecipientInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data { unsigned long long x0; void * x1; } x3; } x0; struct KeyAgreeRecipientInfo { int x0; struct OriginatorIdentifierOrKey { int x0; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x0; void * x1; } x0; struct heim_integer { unsigned long long x0; void * x1; int x2; } x1; } x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x0; struct heim_bit_string { unsigned long long x0; void * x1; } x1; } x2; } x1; } x1; struct heim_base_data * x2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x3; struct RecipientEncryptedKeys { unsigned int x0; struct RecipientEncryptedKey * x1; } x4; } x1; } x1; } *)info certificates:(id)certificates LAContext:(id)lacontext error:(id *)error;
+ (id)decodeRecipientInfo:(struct RecipientInfo { int x0; union { struct KeyTransRecipientInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data { unsigned long long x0; void * x1; } x3; } x0; struct KeyAgreeRecipientInfo { int x0; struct OriginatorIdentifierOrKey { int x0; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x0; void * x1; } x0; struct heim_integer { unsigned long long x0; void * x1; int x2; } x1; } x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x0; struct heim_bit_string { unsigned long long x0; void * x1; } x1; } x2; } x1; } x1; struct heim_base_data * x2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x3; struct RecipientEncryptedKeys { unsigned int x0; struct RecipientEncryptedKey * x1; } x4; } x1; } x1; } *)info certificates:(id)certificates LAContext:(id)lacontext error:(id *)error;

/* instance methods */
- (id)initWithCertificate:(struct __SecCertificate *)certificate;
- (id)initWithCertificate:(struct __SecCertificate *)certificate legacyKeyWrapAlgorithm:(BOOL)algorithm;
- (id)initWithCertificate:(struct __SecCertificate *)certificate algorithmCapabilities:(id)capabilities;
- (id)initWithCertificate:(struct __SecCertificate *)certificate keyEncryptionAlgorithm:(id)algorithm keyWrapAlgorithm:(id)algorithm;
- (id)initWithEmail:(id)email;
- (id)initWithEmail:(id)email algorithmCapabilities:(id)capabilities;
- (id)initWithEmail:(id)email keyEncryptionAlgorithm:(id)algorithm;
- (BOOL)encodeKeyTransRecipientInfo:(id)info recipientInfo:(struct RecipientInfo { int x0; union { struct KeyTransRecipientInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data { unsigned long long x0; void * x1; } x3; } x0; struct KeyAgreeRecipientInfo { int x0; struct OriginatorIdentifierOrKey { int x0; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x0; void * x1; } x0; struct heim_integer { unsigned long long x0; void * x1; int x2; } x1; } x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x0; struct heim_bit_string { unsigned long long x0; void * x1; } x1; } x2; } x1; } x1; struct heim_base_data * x2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x3; struct RecipientEncryptedKeys { unsigned int x0; struct RecipientEncryptedKey * x1; } x4; } x1; } x1; } *)info error:(id *)error;
- (BOOL)encodeKeyAgreeRecipientInfo:(id)info recipientInfo:(struct RecipientInfo { int x0; union { struct KeyTransRecipientInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data { unsigned long long x0; void * x1; } x3; } x0; struct KeyAgreeRecipientInfo { int x0; struct OriginatorIdentifierOrKey { int x0; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x0; void * x1; } x0; struct heim_integer { unsigned long long x0; void * x1; int x2; } x1; } x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x0; struct heim_bit_string { unsigned long long x0; void * x1; } x1; } x2; } x1; } x1; struct heim_base_data * x2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x3; struct RecipientEncryptedKeys { unsigned int x0; struct RecipientEncryptedKey * x1; } x4; } x1; } x1; } *)info error:(id *)error;
- (void)freeKeyTransRecipientInfo:(const struct RecipientInfo { int x0; union { struct KeyTransRecipientInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data { unsigned long long x0; void * x1; } x3; } x0; struct KeyAgreeRecipientInfo { int x0; struct OriginatorIdentifierOrKey { int x0; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x0; void * x1; } x0; struct heim_integer { unsigned long long x0; void * x1; int x2; } x1; } x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x0; struct heim_bit_string { unsigned long long x0; void * x1; } x1; } x2; } x1; } x1; struct heim_base_data * x2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x3; struct RecipientEncryptedKeys { unsigned int x0; struct RecipientEncryptedKey * x1; } x4; } x1; } x1; } *)info;
- (BOOL)encodeRecipientInfo:(id)info recipientInfo:(struct RecipientInfo { int x0; union { struct KeyTransRecipientInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data { unsigned long long x0; void * x1; } x3; } x0; struct KeyAgreeRecipientInfo { int x0; struct OriginatorIdentifierOrKey { int x0; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x0; void * x1; } x0; struct heim_integer { unsigned long long x0; void * x1; int x2; } x1; } x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x0; struct heim_bit_string { unsigned long long x0; void * x1; } x1; } x2; } x1; } x1; struct heim_base_data * x2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x3; struct RecipientEncryptedKeys { unsigned int x0; struct RecipientEncryptedKey * x1; } x4; } x1; } x1; } *)info error:(id *)error;
- (void)freeRecipientInfo:(const struct RecipientInfo { int x0; union { struct KeyTransRecipientInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data { unsigned long long x0; void * x1; } x3; } x0; struct KeyAgreeRecipientInfo { int x0; struct OriginatorIdentifierOrKey { int x0; union { struct IssuerAndSerialNumber { struct heim_base_data { unsigned long long x0; void * x1; } x0; struct heim_integer { unsigned long long x0; void * x1; int x2; } x1; } x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct OriginatorPublicKey { struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x0; struct heim_bit_string { unsigned long long x0; void * x1; } x1; } x2; } x1; } x1; struct heim_base_data * x2; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x3; struct RecipientEncryptedKeys { unsigned int x0; struct RecipientEncryptedKey * x1; } x4; } x1; } x1; } *)info;
- (id)encryptBulkKey:(id)key;
- (struct __CFData *)keyEncryptionKey:(id)key forEncryption:(BOOL)encryption;
- (id)key;
- (void)dealloc;
@end

#endif /* MSCMSRecipientInfo_h */
