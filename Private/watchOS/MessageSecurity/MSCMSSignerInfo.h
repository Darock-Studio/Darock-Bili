//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 101.40.6.0.0
//
#ifndef MSCMSSignerInfo_h
#define MSCMSSignerInfo_h
@import Foundation;

#include "MSAlgorithmIdentifier.h"
#include "MSCMSMutableAttributeArray.h"
#include "MSCMSSignedData.h"

@class NSArray, NSData, NSNumber;

@interface MSCMSSignerInfo : NSObject

@property struct __SecKey { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; struct __SecKeyDescriptor * x1; void * x2; } * signerPrivKey;
@property struct SignerInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data * x3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x4; struct heim_base_data { unsigned long long x0; void * x1; } x5; struct heim_base_data * x6; } * encodedSignerInfo;
@property struct __SecCertificate * signerCertificate;
@property BOOL useIssuerAndSerialNumber;
@property (retain) MSAlgorithmIdentifier *signatureAlgorithm;
@property (retain) NSData *signedAttrsData;
@property (retain) NSData *unsignedAttrsData;
@property (retain) NSData *identifierData;
@property (retain) NSNumber *version;
@property (weak) MSCMSSignedData *containingSignedData;
@property (retain) MSAlgorithmIdentifier *digestAlgorithm;
@property (readonly) NSArray *certificates;
@property BOOL contentChanged;
@property (readonly) BOOL signatureCalculated;
@property (retain) MSCMSMutableAttributeArray *protectedAttributes;
@property (retain, nonatomic) NSData *signature;
@property (retain) MSCMSMutableAttributeArray *unprotectedAttributes;
@property (retain) NSData *LAContext;

/* class methods */
+ (id)decodeSignerInfo:(struct SignerInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data * x3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x4; struct heim_base_data { unsigned long long x0; void * x1; } x5; struct heim_base_data * x6; } *)info certificates:(id)certificates LAContext:(id)lacontext error:(id *)error;

/* instance methods */
- (id)initWithCertificate:(struct __SecCertificate *)certificate error:(id *)error;
- (id)initWithIdentity:(struct __SecIdentity *)identity error:(id *)error;
- (id)initWithEmail:(id)email LAContext:(id)lacontext error:(id *)error;
- (id)initWithCertificate:(struct __SecCertificate *)certificate signatureAlgorithm:(id)algorithm error:(id *)error;
- (id)initWithIdentity:(struct __SecIdentity *)identity signatureAlgorithm:(id)algorithm useIssuerAndSerialNumber:(BOOL)number error:(id *)error;
- (id)initWithIdentity:(struct __SecIdentity *)identity signatureAlgorithm:(id)algorithm error:(id *)error;
- (id)initWithEmail:(id)email signatureAlgorithm:(id)algorithm LAContext:(id)lacontext error:(id *)error;
- (id)initWithCertificate:(struct __SecCertificate *)certificate recipientsAlgorithmCapabilities:(id)capabilities error:(id *)error;
- (id)initWithIdentity:(struct __SecIdentity *)identity recipientsAlgorithmCapabilities:(id)capabilities error:(id *)error;
- (id)initWithEmail:(id)email recipientsAlgorithmCapabilities:(id)capabilities LAContext:(id)lacontext error:(id *)error;
- (void)dealloc;
- (void)addCounterSignerAttribute:(id)attribute;
- (void)addMultipleSignaturesAttribute;
- (void)addSMIMECapabilitiesAttribute:(id)attribute;
- (void)addSMIMEEncryptionKeyPreferenceAttribute:(id)attribute;
- (void)addProtectedAttribute:(id)attribute;
- (id)calculateSignedAttributesDigest:(id *)digest;
- (BOOL)verifyContentTypeAttribute:(id *)attribute;
- (BOOL)verifyMessageDigestAttribute:(id)attribute error:(id *)error;
- (id)calculateSignerInfoDigest:(id *)digest;
- (BOOL)verifySignature:(id *)signature;
- (id)verifyTime:(id)time;
- (BOOL)verifySignatureAndSignerWithPolicies:(id)policies verifyTime:(id)time anchorCertificates:(id)certificates error:(id *)error;
- (id)calculateSignatureDigestWithAlgorithm:(id)algorithm error:(id *)error;
- (BOOL)verifyCountersignatures:(id *)countersignatures;
- (BOOL)verifyCountersignaturesAndCountersignersWithPolicies:(id)policies verifyTime:(id)time anchorCertificates:(id)certificates error:(id *)error;
- (BOOL)verifyTimestamps:(id *)timestamps;
- (id)getAttributesWithType:(id)type;
- (id)getAttributesWithType:(id)type protectedAttributes:(BOOL)attributes;
- (struct __SecTrust *)createTrustObjectWithPolicies:(id)policies error:(id *)error;
- (struct __SecTrust *)createTrustObjectWithPolicies:(id)policies verifyTime:(id)time anchorCertificates:(id)certificates error:(id *)error;
- (BOOL)sign:(id *)sign;
- (BOOL)createRequiredAttributes:(id *)attributes;
- (BOOL)encodeSignerInfo:(struct SignerInfo { int x0; struct heim_base_data { unsigned long long x0; void * x1; } x1; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x2; struct heim_base_data * x3; struct AlgorithmIdentifier { struct heim_oid { unsigned long long x0; unsigned int * x1; } x0; struct heim_base_data * x1; } x4; struct heim_base_data { unsigned long long x0; void * x1; } x5; struct heim_base_data * x6; } *)info error:(id *)error;
@end

#endif /* MSCMSSignerInfo_h */
