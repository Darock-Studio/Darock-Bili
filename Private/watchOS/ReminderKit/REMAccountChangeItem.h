//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1004.0.0.0.0
//
#ifndef REMAccountChangeItem_h
#define REMAccountChangeItem_h
@import Foundation;

#include "REMAccountCapabilities.h"
#include "REMAccountGroupContextChangeItem.h"
#include "REMAccountPinnedListsContextChangeItem.h"
#include "REMAccountStorage.h"
#include "REMCRMergeableOrderedSet.h"
#include "REMChangedKeysObserver.h"
#include "REMConflictResolving-Protocol.h"
#include "REMExternalSyncMetadataWritableProviding-Protocol.h"
#include "REMManualOrdering.h"
#include "REMObjectID.h"
#include "REMPersonIDProviding-Protocol.h"
#include "REMResolutionTokenMap.h"
#include "REMSaveRequest.h"
#include "REMSaveRequestTrackedValue-Protocol.h"
#include "REMSupportedVersionProviding-Protocol.h"
#include "REMSupportedVersionUpdating-Protocol.h"

@class NSData, NSSet, NSString;

@interface REMAccountChangeItem : NSObject<REMConflictResolving, REMPersonIDProviding, REMSaveRequestTrackedValue, REMExternalSyncMetadataWritableProviding, REMSupportedVersionProviding, REMSupportedVersionUpdating>

@property (retain, nonatomic) REMChangedKeysObserver *changedKeysObserver;
@property (readonly, @dynamic, nonatomic) REMObjectID *remObjectID;
@property (retain, @dynamic, nonatomic) REMObjectID *objectID;
@property (readonly, @dynamic, nonatomic) REMAccountCapabilities *capabilities;
@property (readonly, @dynamic, nonatomic) REMCRMergeableOrderedSet *listIDsMergeableOrdering;
@property (readonly, @dynamic, nonatomic) NSData *listIDsMergeableOrderingData;
@property (retain, @dynamic, nonatomic) REMManualOrdering *pinnedListsManualOrdering;
@property (retain, @dynamic, nonatomic) REMManualOrdering *templatesManualOrdering;
@property (@dynamic, nonatomic) BOOL markedForRemoval;
@property (retain, @dynamic, nonatomic) NSSet *listIDsToUndelete;
@property (retain, @dynamic, nonatomic) NSSet *smartListIDsToUndelete;
@property (retain, @dynamic, nonatomic) NSString *displayName;
@property (@dynamic, nonatomic) BOOL debugSyncDisabled;
@property (@dynamic, nonatomic) BOOL listsDADisplayOrderChanged;
@property (@dynamic, nonatomic) long long type;
@property (readonly, copy, nonatomic) REMAccountStorage *storage;
@property (retain, @dynamic, nonatomic) NSString *name;
@property (readonly, nonatomic) REMAccountPinnedListsContextChangeItem *pinnedListsContext;
@property (@dynamic, nonatomic) BOOL inactive;
@property (@dynamic, nonatomic) BOOL didChooseToMigrate;
@property (@dynamic, nonatomic) BOOL didChooseToMigrateLocally;
@property (@dynamic, nonatomic) BOOL didFinishMigration;
@property (@dynamic, nonatomic) long long persistenceCloudSchemaVersion;
@property (retain, @dynamic, nonatomic) NSString *daConstraintsDescriptionPath;
@property (@dynamic, nonatomic) BOOL daAllowsCalendarAddDeleteModify;
@property (@dynamic, nonatomic) BOOL daSupportsSharedCalendars;
@property (@dynamic, nonatomic) BOOL daWasMigrated;
@property (readonly, nonatomic) REMSaveRequest *saveRequest;
@property (readonly, nonatomic) REMAccountGroupContextChangeItem *groupContext;
@property (retain, @dynamic, nonatomic) REMResolutionTokenMap *resolutionTokenMap;
@property (retain, @dynamic, nonatomic) NSData *resolutionTokenMapData;
@property (copy, @dynamic, nonatomic) NSString *personID;
@property (copy, @dynamic, nonatomic) NSData *personIDSalt;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy, @dynamic, nonatomic) NSString *externalIdentifier;
@property (copy, @dynamic, nonatomic) NSString *externalModificationTag;
@property (copy, @dynamic, nonatomic) NSString *daSyncToken;
@property (copy, @dynamic, nonatomic) NSString *daPushKey;
@property (readonly, @dynamic, nonatomic) long long minimumSupportedVersion;
@property (readonly, @dynamic, nonatomic) long long effectiveMinimumSupportedVersion;

/* class methods */
+ (void)initialize;
+ (id)_emptyListIDsOrderingWithAccountID:(id)id;

/* instance methods */
- (id)initWithSaveRequest:(id)request storage:(id)storage capabilities:(id)capabilities changedKeysObserver:(id)observer;
- (id)initWithSaveRequest:(id)request storage:(id)storage capabilities:(id)capabilities observeInitialValues:(BOOL)values;
- (id)initWithObjectID:(id)id type:(long long)type name:(id)name insertIntoSaveRequest:(id)request;
- (id)shallowCopyWithSaveRequest:(id)request;
- (id)templatesContextChangeItem;
- (id)forwardingTargetForSelector:(SEL)selector;
- (id)valueForUndefinedKey:(id)key;
- (BOOL)respondsToSelector:(SEL)selector;
- (void)setValue:(id)value forUndefinedKey:(id)key;
- (id)resolutionTokenKeyForChangedKey:(id)key;
- (id)changedKeys;
- (id)accountTypeHost;
- (BOOL)isUnsupported;
- (void)addListChangeItem:(id)item;
- (void)insertListChangeItem:(id)item beforeListChangeItem:(id)item;
- (void)insertListChangeItem:(id)item afterListChangeItem:(id)item;
- (void)addSmartListChangeItem:(id)item;
- (void)insertSmartListChangeItem:(id)item beforeSmartListChangeItem:(id)item;
- (void)insertSmartListChangeItem:(id)item afterSmartListChangeItem:(id)item;
- (void)addMergeableOrderingNode:(id)node;
- (void)insertMergeableOrderingNode:(id)node beforeMergeableOrderingNode:(id)node;
- (void)insertMergeableOrderingNode:(id)node afterMergeableOrderingNode:(id)node;
- (void)undeleteListWithID:(id)id usingUndo:(id)undo;
- (void)undeleteSmartListWithID:(id)id usingUndo:(id)undo;
- (void)removeFromStore;
- (id)mergeableOrderingNodesByOrderingMergeableOrderingNodes:(id)nodes;
- (BOOL)canCopyReminderLosslesslyToAccountChangeItem:(id)item;
- (void)lowLevelAddMergeableOrderingNodeIDToOrdering:(id)ordering withParentMergeableOrderingNode:(id)node;
- (id)lowLevelRemoveMergeableOrderingNodeIDFromOrdering:(id)ordering;
- (void)test_lowLevelEditOrderingByMovingListObjectID:(id)id toTarget:(unsigned long long)target;
- (void)insertMergeableOrderingNode:(id)node adjacentToMergeableOrderingNode:(id)node isAfter:(BOOL)after withParentMergeableOrderingNode:(id)node;
- (void)_reassignMergeableOrderingNode:(id)node withParentListChangeItem:(id)item;
- (void)_lowLevelAddMergeableOrderingNodeToOrdering:(id)ordering atIndexOfSibling:(id)sibling isAfter:(BOOL)after withParentMergeableOrderingNode:(id)node;
- (void)_lowLevelApplyUndoToOrdering:(id)ordering;
- (void)_editListIDsOrderingUsingBlock:(id /* block */)block;
@end

#endif /* REMAccountChangeItem_h */
