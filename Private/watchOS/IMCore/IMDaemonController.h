//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1262.300.81.4.10
//
#ifndef IMDaemonController_h
#define IMDaemonController_h
@import Foundation;

#include "IMDaemonControlling-Protocol.h"
#include "IMDaemonControlling_Private-Protocol.h"
#include "IMDaemonListener.h"
#include "IMDaemonProtocol-Protocol.h"
#include "IMDaemonQueryController.h"

@class IMDaemonConnection, IMDistributingProxy, IMMultiplexedDaemonConnection, NSArray, NSDictionary, NSMapTable, NSMutableDictionary, NSString;

@interface IMDaemonController : NSObject<IMDaemonControlling_Private, IMDaemonControlling>

@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int x0; } lock;
@property (readonly, nonatomic) IMDaemonConnection *connection;
@property (readonly, nonatomic) IMDistributingProxy *remoteDaemonProxy;
@property (readonly, nonatomic) NSMapTable *multiplexedConnections;
@property (readonly, nonatomic) NSMutableDictionary *retainedMultiplexedConnections;
@property (readonly, nonatomic) NSDictionary *processContext;
@property (retain, nonatomic) IMMultiplexedDaemonConnection *anonymousMultiplexedConnection;
@property (readonly, nonatomic) unsigned long long processCapabilities;
@property (retain) NSArray *_servicesToAllow;
@property (retain) NSArray *_servicesToDeny;
@property (retain, nonatomic) NSString *listenerID;
@property (weak, nonatomic) id delegate;
@property (nonatomic) BOOL _blocksConnectionAtResume;
@property (readonly, nonatomic) BOOL isConnecting;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL connected;
@property (readonly, nonatomic) NSObject<IMDaemonProtocol> *remoteDaemon;
@property (readonly, nonatomic) NSObject<IMDaemonProtocol> *synchronousRemoteDaemon;
@property (readonly, nonatomic) NSObject<IMDaemonProtocol> *synchronousReplyingRemoteDaemon;
@property (readonly, nonatomic) NSObject<IMDaemonProtocol> *replyingRemoteDaemon;
@property (readonly, nonatomic) IMDaemonQueryController *queryController;
@property (readonly, nonatomic) IMDaemonListener *listener;
@property (readonly, nonatomic) unsigned int capabilities;

/* class methods */
+ (id)sharedController;
+ (id)sharedInstance;
+ (void)_blockUntilSendQueueIsEmpty;

/* instance methods */
- (id)init;
- (void)_connectWithContextChange:(BOOL)change;
- (void)_connectWithCompletion:(id /* block */)completion;
- (void)blockUntilConnected;
- (BOOL)connectToDaemon;
- (BOOL)connectToDaemonWithLaunch:(BOOL)launch;
- (BOOL)connectToDaemonWithLaunch:(BOOL)launch capabilities:(unsigned int)capabilities blockUntilConnected:(BOOL)connected;
- (void)disconnectFromDaemon;
- (void)killDaemon;
- (id)multiplexedConnectionWithLabel:(id)label capabilities:(unsigned long long)capabilities context:(id)context;
- (id)_multiplexedConnectionWithUniqueID:(id)id label:(id)label capabilities:(unsigned long long)capabilities context:(id)context retain:(BOOL)retain;
- (void)_invalidateMultiplexedConnectionWithUniqueID:(id)id;
- (BOOL)_hasMultiplexedConnectionWithUniqueID:(id)id;
- (unsigned long long)_capabilitiesForMultiplexedConnectionWithUniqueID:(id)id;
- (void)_updateAnonymousMultiplexedConnectionWithAddedCapabilities:(unsigned long long)capabilities;
- (void)_capabilitiesDidChange;
- (void)_capabilitiesDidChangeWithContextChange:(BOOL)change;
- (BOOL)addListenerID:(id)id capabilities:(unsigned int)capabilities;
- (unsigned int)capabilitiesForListenerID:(id)id;
- (BOOL)hasListenerForID:(id)id;
- (BOOL)removeListenerID:(id)id;
- (BOOL)setCapabilities:(unsigned int)capabilities forListenerID:(id)id;
- (BOOL)_clientRequiresSynchronousConnectionRescueWithListenerID:(id)id;
- (unsigned long long)_clientCapabilitiesForLegacyClientWithListenerID:(id)id requestedCapabilities:(unsigned long long)capabilities;
- (BOOL)isConnected;
- (void)requestSetup;
- (void)_setServicesToAllow:(id)allow;
- (void)_setServicesToDeny:(id)deny;
- (void)_setListenerID:(id)id;
- (void)sendQueryWithReply:(BOOL)reply query:(id /* block */)query;
- (void)_noteSetupComplete;
- (void)_blockUntilSendQueueIsEmpty;
- (void)_setBlocksConnectionAtResume:(BOOL)resume;
@end

#endif /* IMDaemonController_h */
