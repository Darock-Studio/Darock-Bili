//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.6.0.0
//
#ifndef ML3SpotlightMatchingNameCache_h
#define ML3SpotlightMatchingNameCache_h
@import Foundation;

#include "ML3MusicLibrary.h"

@class NSString;
@protocol {unordered_set<long long, std::hash<long long>, std::equal_to<long long>, std::allocator<long long>>="__table_"{__hash_table<long long, std::hash<long long>, std::equal_to<long long>, std::allocator<long long>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<long long, void *> *>, std::allocator<std::__hash_node<long long, void *>>>="__value_"{__hash_node_base<std::__hash_node<long long, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<long long>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<long long>>="__value_"f}}};

@interface ML3SpotlightMatchingNameCache : NSObject {
  /* instance variables */
  struct unordered_set<long long, std::hash<long long>, std::equal_to<long long>, std::allocator<long long>> { struct __hash_table<long long, std::hash<long long>, std::equal_to<long long>, std::allocator<long long>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<long long, void *> *>, std::allocator<std::__hash_node<long long, void *>>> { struct __hash_node_base<std::__hash_node<long long, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<long long>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<long long>> { float __value_; } __p3_; } __table_; } _matchingSet;
  NSString *_matchString;
  BOOL _idle;
  ML3MusicLibrary *_library;
}

/* class methods */
+ (void)initialize;
+ (void)loadFromLibrary:(id)library namesMatchingString:(id)string cancelHandler:(id /* block */)handler;

/* instance methods */
- (id)_initWithLibrary:(id)library matchString:(id)string cancelHandler:(id /* block */)handler;
- (void)dealloc;
@end

#endif /* ML3SpotlightMatchingNameCache_h */
