//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.6.0.0
//
#ifndef ML3DatabaseConnection_h
#define ML3DatabaseConnection_h
@import Foundation;

#include "ML3DatabaseConnectionDelegate-Protocol.h"
#include "ML3DatabaseConnectionPool.h"
#include "ML3DatabasePrivacyContext.h"
#include "ML3DatabaseStatementCache.h"

@class NSMutableArray, NSString, NSUUID;

@interface ML3DatabaseConnection : NSObject {
  /* instance variables */
  struct sqlite3 * _sqlitedb;
  ML3DatabaseStatementCache *_statementCache;
  unsigned long long _statementsSinceLastCheckpoint;
  unsigned long long _transactionLevel;
  BOOL _nestedTransactionWantsToRollback;
  NSMutableArray *_enqueuedTransactionCommitBlocks;
  ML3DatabaseConnectionPool *_owningPool;
  NSMutableArray *_registeredFunctions;
  NSMutableArray *_registeredModules;
  const void * _iTunesExtensions;
  int _willDeleteDatabaseNotifyToken;
  BOOL _isHandlingIOError;
  BOOL _alreadyAttemptedCorruptionRecovery;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (weak, nonatomic) NSObject<ML3DatabaseConnectionDelegate> *connectionDelegate;
@property (readonly, nonatomic) NSString *databasePath;
@property (readonly, nonatomic) BOOL isOpen;
@property (retain, nonatomic) ML3DatabasePrivacyContext *privacyContext;
@property (nonatomic) BOOL isReadOnly;
@property (nonatomic) unsigned long long journalingMode;
@property (nonatomic) unsigned long long protectionLevel;
@property (readonly, nonatomic) BOOL isInTransaction;
@property (readonly, nonatomic) BOOL transactionMarkedForRollBack;
@property (readonly, nonatomic) NSUUID *currentTransactionID;
@property (readonly, nonatomic) NSUUID *uniqueIdentifier;
@property (nonatomic) BOOL automaticCheckpointingEnabled;
@property (nonatomic) unsigned long long checkpointStatementThreshold;
@property (nonatomic) BOOL logQueryPlans;

/* instance methods */
- (BOOL)schemaAddColumnDefinition:(id)definition toTable:(id)table;
- (BOOL)schemaInsertColumnDefinition:(id)definition intoTable:(id)table atIndex:(unsigned long long)index;
- (BOOL)schemaInsertColumnDefinitions:(id)definitions intoTable:(id)table atIndex:(unsigned long long)index;
- (BOOL)schemaRenameColumn:(id)column inTable:(id)table toNewColumnName:(id)name;
- (BOOL)schemaDeleteColumn:(id)column inTable:(id)table;
- (BOOL)schemaDeleteColumns:(id)columns inTable:(id)table;
- (void)_enumerateTableColumnNamesAndDefinitionsFromTable:(id)table usingBlock:(id /* block */)block;
- (BOOL)_alterTableNamed:(id)named withNewColumnDefinitions:(id)definitions newColumnNames:(id)names oldColumnNames:(id)names;
- (id)init;
- (id)initWithDatabasePath:(id)path;
- (void)dealloc;
- (id)description;
- (id)debugDescription;
- (BOOL)isEqual:(id)equal;
- (void)setReadOnly:(BOOL)only;
- (BOOL)open;
- (BOOL)_openWithFlags:(int)flags;
- (BOOL)close;
- (BOOL)_closeAndFlushTransactionState:(BOOL)state;
- (void)flush;
- (BOOL)databasePathExists;
- (id)executeQuery:(id)query;
- (id)executeQuery:(id)query withParameters:(id)parameters;
- (id)executeQuery:(id)query withParameters:(id)parameters limitProperty:(id)property limitValue:(long long)value;
- (BOOL)tableExists:(id)exists;
- (BOOL)executeUpdate:(id)update;
- (BOOL)executeUpdate:(id)update withParameters:(id)parameters error:(id *)error;
- (BOOL)pushTransaction;
- (BOOL)pushTransactionUsingBehaviorType:(unsigned long long)type;
- (BOOL)popTransactionAndCommit:(BOOL)commit;
- (BOOL)popToRootTransactionAndCommit:(BOOL)commit;
- (BOOL)performTransactionWithBlock:(id /* block */)block;
- (BOOL)performTransactionWithBlock:(id /* block */)block usingBehaviorType:(unsigned long long)type;
- (void)enqueueBlockForTransactionCommit:(id /* block */)commit;
- (BOOL)registerFunctionName:(id)name argumentCount:(int)count block:(id /* block */)block;
- (BOOL)registerFunctionName:(id)name argumentCount:(int)count functionPointer:(undefined *)pointer;
- (BOOL)registerFunctionName:(id)name argumentCount:(int)count functionPointer:(undefined *)pointer userData:(void *)data;
- (BOOL)registerModule:(id)module;
- (BOOL)registerModuleName:(id)name moduleMethods:(struct sqlite3_module { int x0; undefined * x1; undefined * x2; undefined * x3; undefined * x4; undefined * x5; undefined * x6; undefined * x7; undefined * x8; undefined * x9; undefined * x10; undefined * x11; undefined * x12; undefined * x13; undefined * x14; undefined * x15; undefined * x16; undefined * x17; undefined * x18; undefined * x19; undefined * x20; undefined * x21; undefined * x22; undefined * x23; } *)methods;
- (BOOL)removeModuleNamed:(id)named;
- (id)openBlobInTable:(id)table column:(id)column row:(long long)row readOnly:(BOOL)only;
- (long long)lastInsertionRowID;
- (id)sqliteError;
- (BOOL)deleteDatabase;
- (int)checkpointDatabase;
- (id)_owningPool;
- (void)_setOwningPool:(id)pool;
- (struct sqlite3 *)_sqliteHandle;
- (void)_ensureConnectionIsOpen;
- (void)_raiseConnectionClosedException;
- (void)_handleDatabaseCorruption;
- (BOOL)_handleBusyLockWithNumberOfRetries:(int)retries;
- (BOOL)_handleDiskIOError;
- (id)_databaseFilePaths;
- (int)_distrustQueriesDuringBlock:(id /* block */)block;
- (unsigned long long)transactionLevel;
- (void)setTransactionLevel:(unsigned long long)level;
- (BOOL)_alreadyAttemptedCorruptionRecovery;
- (void)_setAlreadyAttemptedCorruptionRecovery:(BOOL)recovery;
- (id)_prepareStatement:(id)statement error:(id *)error;
- (BOOL)_executeStatement:(id)statement withError:(id *)error;
- (void)_internalLogQuery:(id)query withParameters:(id)parameters limitProperty:(id)property limitValue:(long long)value;
- (id)_internalExecuteQuery:(id)query withParameters:(id)parameters limitProperty:(id)property limitValue:(long long)value;
- (BOOL)_internalExecuteUpdate:(id)update withParameters:(id)parameters error:(id *)error;
- (BOOL)_internalBeginTransactionWithBehaviorType:(unsigned long long)type;
- (BOOL)_internalEndTransactionAndCommit:(BOOL)commit;
- (id)_shortDescription;
- (BOOL)_validatePreparedStatement:(id)statement error:(id *)error;
- (id)_registeredModuleNamed:(id)named;
- (BOOL)_databaseFileExists;
- (BOOL)_databaseFilesAreWritable;
- (void)_createDatabaseDirectoryIfNonexistent;
- (void)_createDatabaseFileIfNonexistent;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)operation statementSQL:(id)sql;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)operation statement:(id)statement;
- (void)_logCurrentError;
- (void)_logDatabaseFileDebugInformation;
- (BOOL)_isDeviceMediaLibraryDatabase;
- (void)_finalizeAllStatements;
- (void)_resetUnfinalizedStatements;
- (void)_executeTransactionCommitBlocks:(BOOL)blocks;
- (BOOL)_handleConnectionErrorWhileOpening:(int)opening;
- (BOOL)_handleZombieSQLiteConnection:(struct sqlite3 *)connection;
@end

#endif /* ML3DatabaseConnection_h */
