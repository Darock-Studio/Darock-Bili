//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.6.0.0
//
#ifndef ML3Track_h
#define ML3Track_h
@import Foundation;

#include "ML3Entity.h"

@interface ML3Track : ML3Entity
/* class methods */
+ (id)_normalizedImportChapters:(id)chapters trackPersistentID:(long long)id;
+ (id)flattenedChapterDataWithImportChapters:(id)chapters library:(id)library trackPersistentID:(long long)id;
+ (id)flattenedChapterDataFromSyncInfoDictionaries:(id)dictionaries trackPersistentID:(long long)id;
+ (id)flattenedChapterDataFromDAAPInfoDictionary:(id)dictionary trackPersistentID:(long long)id;
+ (id)importChaptersByParsingAsset:(id)asset;
+ (id)containerQueryWithContainer:(id)container;
+ (id)containerQueryWithContainer:(id)container predicate:(id)predicate;
+ (id)containerQueryWithContainer:(id)container predicate:(id)predicate orderingTerms:(id)terms;
+ (id)orderingTermsForITTGTrackOrder:(unsigned int)order descending:(BOOL)descending;
+ (id)predicateByOptimizingComparisonPredicate:(id)predicate;
+ (void)initialize;
+ (id)databaseTable;
+ (long long)revisionTrackingCode;
+ (id)defaultOrderingTerms;
+ (id)albumsDefaultOrderingTerms;
+ (id)albumsByAlbumArtistDefaultOrderingTerms;
+ (id)genresDefaultOrderingTerms;
+ (id)podcastsDefaultOrderingTerms;
+ (id)artistAllAlbumsDefaultOrderingTerms;
+ (id)artistsDefaultOrderingTerms;
+ (id)albumAllArtistsDefaultOrderingTerms;
+ (id)albumAndArtistDefaultOrderingTerms;
+ (id)composersDefaultOrderingTerms;
+ (id)podcastsEpisodesDefaultOrderingTerms;
+ (id)TVShowEpisodesDefaultOrderingTerms;
+ (id)subselectStatementForProperty:(id)property;
+ (id)subselectPropertyForProperty:(id)property;
+ (id)joinClausesForProperty:(id)property;
+ (id)sectionPropertyForProperty:(id)property;
+ (id)predisambiguatedProperties;
+ (id)allProperties;
+ (id)foreignDatabaseTableForProperty:(id)property;
+ (id)foreignColumnForProperty:(id)property;
+ (id)extraTablesToDelete;
+ (id)extraTablesToInsert;
+ (id)persistentIDColumnForTable:(id)table;
+ (BOOL)libraryContentsChangeForProperty:(id)property;
+ (BOOL)assistantLibraryContentsChangeForProperty:(id)property;
+ (BOOL)libraryDynamicChangeForProperty:(id)property;
+ (BOOL)_writeSyncDeletesToPlistWithLibrary:(id)library forPersistentIDs:(id)ids;
+ (BOOL)deleteFromLibrary:(id)library deletionType:(int)type persistentIDs:(const long long *)ids count:(unsigned long long)count;
+ (BOOL)deleteFromLibrary:(id)library deletionType:(int)type persistentIDs:(const long long *)ids count:(unsigned long long)count usingConnection:(id)connection;
+ (BOOL)removeFromMyLibrary:(id)library deletionType:(int)type persistentIDs:(const long long *)ids count:(unsigned long long)count;
+ (BOOL)trackWithPersistentID:(long long)id existsInLibrary:(id)library;
+ (BOOL)trackWithPersistentID:(long long)id visibleInLibrary:(id)library;
+ (BOOL)trackWithPersistentID:(long long)id existsInLibraryWithConnection:(id)connection;
+ (void)populateSortOrdersOfPropertyValues:(id)values inLibrary:(id)library cachedNameOrders:(id)orders;
+ (id)unsettableProperties;
+ (id)collectionClassesToUpdateBeforeDelete;
+ (BOOL)unlinkRedownloadableAssetsFromLibrary:(id)library persistentIDs:(id)ids;
+ (BOOL)unlinkRedownloadableAssetsFromLibrary:(id)library persistentIDs:(id)ids deletedFileSize:(long long *)size;
+ (BOOL)unlinkRedownloadableAssetsFromLibrary:(id)library persistentIDs:(id)ids deletionType:(int)type deletedFileSize:(long long *)size;
+ (BOOL)unlinkRedownloadableAssetsFromLibrary:(id)library persistentIDs:(id)ids deletionType:(int)type disableKeepLocal:(BOOL)local deletedFileSize:(long long *)size;
+ (BOOL)trackValueAreInTheCloud:(id)cloud;
+ (void)updateAllBookmarkableStoreBookmarkMetadataIdentifiersOnConnection:(id)connection;
+ (BOOL)registerBookmarkMetadataIdentifierFunctionOnConnection:(id)connection;
+ (BOOL)clearLocationFromLibrary:(id)library persistentIDs:(id)ids;
+ (BOOL)clearLocationFromLibrary:(id)library persistentIDs:(id)ids disableKeepLocal:(BOOL)local;
+ (BOOL)clearLocationFromLibrary:(id)library persistentIDs:(id)ids usingConnection:(id)connection;
+ (BOOL)clearLocationFromLibrary:(id)library persistentIDs:(id)ids disableKeepLocal:(BOOL)local usingConnection:(id)connection;
+ (BOOL)clearPlaybackKeysFromLibrary:(id)library persistentIDs:(id)ids;
+ (void)enumeratePathsToDeleteFromLibrary:(id)library persistentIDs:(id)ids usingBlock:(id /* block */)block;
+ (void)enumeratePathsToDeleteFromLibrary:(id)library persistentIDs:(id)ids usingConnection:(id)connection usingBlock:(id /* block */)block;

/* instance methods */
- (id)multiverseIdentifier;
- (id)multiverseIdentifierLibraryOnly:(BOOL)only;
- (id)protocolItem;
- (id)protocolItemForDynamicUpdate;
- (BOOL)populateArtworkCacheWithArtworkData:(id)data;
- (void)populateChapterDataWithImportChapters:(id)chapters;
- (void)populateLocationPropertiesWithPath:(id)path;
- (void)populateLocationPropertiesWithPath:(id)path isProtected:(BOOL)protected;
- (void)populateLocationPropertiesWithPath:(id)path protectionType:(long long)type;
- (void)populateLocationPropertiesWithPath:(id)path protectionType:(long long)type completionBlock:(id /* block */)block;
- (BOOL)_populateLocationPropertiesWithPath:(id)path protectionType:(long long)type fromLibrary:(id)library usingConnection:(id)connection;
- (BOOL)needsVideoSnapshot;
- (void)createVideoSnapshotAtTime:(double)time;
- (id)absoluteFilePath;
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders usingConnection:(id)connection;
- (BOOL)updateIntegrity;
- (id)rawIntegrity;
- (id)chapterTOC;
- (id)artworkTokenAtPlaybackTime:(double)time;
- (void)updateCollectionCloudStatus;
- (void)updateStoreBookmarkMetadataIdentifier;
@end

#endif /* ML3Track_h */
