//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.6.0.0
//
#ifndef ML3MusicLibrary_h
#define ML3MusicLibrary_h
@import Foundation;

#include "ML3AccountCacheDatabase.h"
#include "ML3Container.h"
#include "ML3DatabaseConnectionDelegate-Protocol.h"
#include "ML3DatabaseConnectionPool.h"
#include "ML3DatabaseConnectionPoolDelegate-Protocol.h"
#include "ML3DatabaseMetadata.h"
#include "ML3DatabasePrivacyContext.h"
#include "ML3LibraryNotificationManager.h"
#include "ML3MusicLibraryResourcesManager.h"
#include "NSSecureCoding-Protocol.h"
#include "_MSVAccountInformationProviding-Protocol.h"

@class NSArray, NSDate, NSLock, NSMapTable, NSNumber, NSString;
@protocol ML3MusicLibraryDelegate, OS_dispatch_queue;

@interface ML3MusicLibrary : NSObject<ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate, NSSecureCoding, _MSVAccountInformationProviding> {
  /* instance variables */
  NSLock *_libraryUIDLock;
  NSString *_syncLibraryUID;
  ML3AccountCacheDatabase *_accountCacheDatabase;
  NSMapTable *_optimizedLibraryEntityFilterPredicatesByEntityClass;
  NSMapTable *_optimizedLibraryContainerFilterPredicatesByContainerClass;
  NSMapTable *_optimizedLibraryPublicEntityFilterPredicatesByEntityClass;
  NSMapTable *_optimizedLibraryPublicContainerFilterPredicatesByContainerClass;
  BOOL _isHomeSharingLibraryLoaded;
}

@property (readonly, copy, nonatomic) NSString *artworkDirectory;
@property (readonly, copy, nonatomic) NSString *originalArtworkDirectory;
@property (readonly, copy, nonatomic) NSString *rootArtworkCacheDirectory;
@property (readonly, nonatomic) BOOL supportsUbiquitousPlaybackPositions;
@property (copy, nonatomic) NSNumber *sagaAccountID;
@property (copy, nonatomic) NSNumber *sagaLastKnownActiveLockerAccountDSID;
@property (copy, nonatomic) NSDate *sagaLastGeniusUpdateDate;
@property (copy, nonatomic) NSDate *sagaLastItemPlayDataUploadDate;
@property (copy, nonatomic) NSDate *sagaLastPlaylistPlayDataUploadDate;
@property (copy, nonatomic) NSString *sagaCloudLibraryCUID;
@property (copy, nonatomic) NSString *sagaCloudLibraryTroveID;
@property (copy, nonatomic) NSString *sagaClientFeaturesVersion;
@property (nonatomic) long long sagaDatabaseUserVersion;
@property (nonatomic) long long sagaCloudAddToPlaylistBehavior;
@property (nonatomic) long long sagaCloudFavoriteSongAddToLibraryBehavior;
@property (nonatomic) BOOL sagaNeedsFullUpdate;
@property (nonatomic) BOOL sagaPrefersToMergeWithCloudLibrary;
@property (copy, nonatomic) NSString *storefrontIdentifier;
@property (copy, nonatomic) NSDate *sagaLastLibraryUpdateTime;
@property (copy, nonatomic) NSDate *sagaLastSubscribedContainersUpdateTime;
@property (nonatomic) long long preferredVideoQuality;
@property (nonatomic) long long sagaOnDiskDatabaseRevision;
@property (copy, nonatomic) NSNumber *jaliscoAccountID;
@property (copy, nonatomic) NSDate *jaliscoLastGeniusUpdateDate;
@property (copy, nonatomic) NSString *jaliscoLastSupportedMediaKinds;
@property (readonly, nonatomic) NSArray *jaliscoLastExcludedMediaKinds;
@property (nonatomic) BOOL jaliscoHasCloudGeniusData;
@property (nonatomic) BOOL jaliscoIsMusicGeniusUserEnabled;
@property (nonatomic) BOOL jaliscoNeedsUpdateForTokens;
@property (copy, nonatomic) NSDate *jaliscoLastLibraryUpdateTime;
@property (nonatomic) long long jaliscoOnDiskDatabaseRevision;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *serialQueue;
@property (retain, nonatomic) ML3LibraryNotificationManager *notificationManager;
@property (readonly, nonatomic) struct iPhoneSortKeyBuilder * sortKeyBuilder;
@property (nonatomic) BOOL usingSharedLibraryPath;
@property (nonatomic) BOOL readOnly;
@property (readonly, nonatomic) ML3MusicLibraryResourcesManager *resourcesManager;
@property (weak, nonatomic) NSObject<ML3MusicLibraryDelegate> *delegate;
@property (readonly, nonatomic) ML3DatabaseConnectionPool *connectionPool;
@property (readonly, nonatomic) NSString *databasePath;
@property (readonly, nonatomic) ML3DatabasePrivacyContext *privacyContext;
@property (readonly, nonatomic) NSString *libraryUID;
@property (readonly, nonatomic) long long currentRevision;
@property (readonly, nonatomic) long long currentContentRevision;
@property (nonatomic) long long syncGenerationID;
@property (readonly, nonatomic) long long autoFilledTracksTotalSize;
@property (nonatomic) NSString *syncLibraryID;
@property (readonly, nonatomic) BOOL libraryEmpty;
@property (readonly, nonatomic) ML3Container *currentDevicePurchasesPlaylist;
@property (readonly, nonatomic) ML3Container *currentDevicePlaybackHistoryPlaylist;
@property (readonly, nonatomic) ML3Container *currentDeviceFavoriteSongsPlaylist;
@property (readonly, nonatomic) ML3Container *currentDevicePhotosMemoriesPlaylist;
@property (readonly, nonatomic) ML3DatabaseMetadata *databaseInfo;
@property (readonly, nonatomic) NSArray *localizedSectionIndexTitles;
@property (readonly, nonatomic) NSArray *preferredAudioTracks;
@property (readonly, nonatomic) NSArray *preferredSubtitleTracks;
@property (nonatomic) BOOL isHomeSharingLibrary;
@property (readonly, nonatomic) BOOL mediaRestrictionEnabled;
@property (readonly, nonatomic) BOOL downloadOnAddToLibrary;
@property (nonatomic) BOOL isUnitTesting;
@property (retain, nonatomic) NSArray *libraryEntityFilterPredicates;
@property (retain, nonatomic) NSArray *libraryContainerFilterPredicates;
@property (retain, nonatomic) NSArray *libraryPublicEntityFilterPredicates;
@property (retain, nonatomic) NSArray *libraryPublicContainerFilterPredicates;
@property (readonly, nonatomic) BOOL hasUserPlaylists;
@property (readonly, nonatomic) BOOL hasAddedToLibraryAppleMusicContent;
@property (readonly, nonatomic) BOOL hasUserPlaylistsContainingAppleMusicContent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSString *accountDSID;

/* class methods */
+ (id)jaliscoGetSortedMediaKinds:(id)kinds;
+ (id)databasePathForUnitTest:(id)test withBasePath:(id)path;
+ (id)unitTestableLibraryForTest:(id)test basePath:(id)path setupSQLFilenames:(id)sqlfilenames;
+ (id)mediaFolderPath;
+ (id)mediaFolderPathByAppendingPathComponent:(id)component;
+ (id)allLibraryContainerPaths;
+ (id)libraryPathForContainerPath:(id)path;
+ (id)libraryContainerPath;
+ (id)libraryContainerPathByAppendingPathComponent:(id)component;
+ (id)libraryContainerRelativePath:(id)path;
+ (id)pathForResourceFileOrFolder:(int)folder;
+ (id)pathForResourceFileOrFolder:(int)folder basePath:(id)path relativeToBase:(BOOL)base createParentFolderIfNecessary:(BOOL)necessary;
+ (id)pathForBaseLocationPath:(long long)path;
+ (id)cloudAssetsSharedCacheFolderPath;
+ (id)sortMapSchemaSQL;
+ (id)sortMapNewSchemaSQL;
+ (id)itemSchemaSQL;
+ (id)itemNewSchemaSQL;
+ (id)allSchemaSQL;
+ (id)allPragmaSQL;
+ (id)allTriggersSQL;
+ (id)allTables;
+ (id)indexSchemaSQL;
+ (id)itemIndexSchemaSQL;
+ (int)userVersionUsingConnection:(id)connection;
+ (BOOL)userVersionMatchesSystemUsingConnection:(id)connection;
+ (BOOL)orderingLanguageMatchesSystemUsingConnection:(id)connection;
+ (BOOL)dropIndexesUsingConnection:(id)connection tableNames:(const char *)names;
+ (BOOL)deviceSupportsASTC;
+ (long long)devicePreferredImageFormat;
+ (id)artworkRelativePathFromToken:(id)token;
+ (id)artworkTokenForArtistHeroURL:(id)url;
+ (id)artworkTokenForChapterWithItemPID:(long long)pid retrievalTime:(double)time;
+ (long long)artworkSourceTypeForTrackSource:(int)source;
+ (void)setAutoFilledTracksArePurgeable:(BOOL)purgeable;
+ (BOOL)autoFilledTracksArePurgeable;
+ (void)setShouldOptimizeStorage:(BOOL)storage;
+ (BOOL)shouldOptimizeStorage;
+ (void)setMinimumPurgeableStorage:(long long)storage;
+ (long long)minimumPurgeableStorage;
+ (void)clearCloudAssetSharedCache;
+ (id)globalSerialQueue;
+ (id)_onGlobalQueue_shareableMusicLibraryWithResourcesManager:(id)manager;
+ (id)musicLibraryForUserAccount:(id)account;
+ (id)registeredLibraries;
+ (id)allLibraries;
+ (id)autoupdatingSharedLibrary;
+ (id)autoupdatingSharedLibraryPath;
+ (void)setAutoupdatingSharedLibraryPath:(id)path;
+ (id)musicLibraryPerUserDSID;
+ (id)sharedLibrary;
+ (id)sharedLibraryDatabasePath;
+ (void)setSharedLibraryDatabasePath:(id)path;
+ (void)disableSharedLibrary;
+ (void)disableAutomaticDatabaseValidation;
+ (void)enableAutomaticDatabaseValidation;
+ (BOOL)deviceSupportsMultipleLibraries;
+ (void)setGlobalPrivacyContextWithAuditToken:(struct { unsigned int x0[8] })token;
+ (BOOL)supportsSecureCoding;
+ (id)localizedSectionHeaderForSectionHeader:(id)header;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)header;
+ (id)sectionIndexTitles;
+ (id)sectionIndexTitleForSectionHeader:(id)header;
+ (void)enumerateSortMapTablesUsingBlock:(id /* block */)block;
+ (void)removeOrphanedTracks;
+ (BOOL)updateTrackIntegrityOnConnection:(id)connection;
+ (id)widthLimitedSetValuesQueue;
+ (id)assistantSyncDataChangedNotificationName;
+ (id)distributedToLocalNotificationMapping;

/* instance methods */
- (void)clearJaliscoAccountID;
- (void)clearJaliscoLastGeniusUpdateDate;
- (void)clearJaliscoLastExcludedMediaKinds;
- (void)sortJaliscoLastSupportedMediaKinds;
- (void)updateJaliscoExcludedMediaKindsWith:(id)with excludingMediaKindsInSet:(BOOL)set;
- (BOOL)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)file error:(id *)error;
- (long long)syncIdFromMultiverseId:(id)id;
- (void)clearSagaCloudAccountID;
- (void)clearSagaLastGeniusUpdateDate;
- (void)clearSagaLastItemPlayDataUploadDate;
- (void)clearSagaLastPlaylistPlayDataUploadDate;
- (void)clearSagaCloudLibraryCUID;
- (void)clearSagaCloudLibraryTroveID;
- (void)clearSagaPrefersToMergeWithCloudLibrary;
- (void)clearSagaCloudAddToPlaylistBehavior;
- (void)clearSagaClientFeaturesVersion;
- (void)clearSagaCloudFavoriteSongAddToLibraryBehavior;
- (id)libraryContainerPath;
- (id)libraryContainerPathByAppendingPathComponent:(id)component;
- (id)libraryContainerRelativePath:(id)path;
- (id)pathForResourceFileOrFolder:(int)folder;
- (id)pathForResourceFileOrFolder:(int)folder basePath:(id)path relativeToBase:(BOOL)base createParentFolderIfNecessary:(BOOL)necessary;
- (id)pathForBaseLocationPath:(long long)path;
- (id)mediaFolderPath;
- (id)mediaFolderPathByAppendingPathComponent:(id)component;
- (id)mediaFolderRelativePath:(id)path;
- (id)uppService;
- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)id;
- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)id;
- (id)artworkCacheDirectoryForSize:(struct CGSize { double x0; double x1; })size;
- (id)artworkCacheDirectoryForEffect:(id)effect;
- (BOOL)hasOriginalArtworkForRelativePath:(id)path;
- (BOOL)isArtworkFetchableForPersistentID:(long long)id entityType:(long long)type artworkType:(long long)type artworkSourceType:(long long)type;
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)urgency;
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)urgency includeAutoFilledTracks:(BOOL)tracks;
- (long long)clearPurgeableStorageAmount:(long long)amount withUrgency:(unsigned long long)urgency;
- (long long)clearPurgeableStorageAmount:(long long)amount withUrgency:(unsigned long long)urgency includeAutoFilledTracks:(BOOL)tracks;
- (long long)clearAllRemovedTracks;
- (void)enumeratePurgeableAlbumTracksForUrgency:(unsigned long long)urgency usingBlock:(id /* block */)block;
- (unsigned long long)totalSizeForAllNonCacheTracks;
- (unsigned long long)totalSizeForAllRedownloadableNonCacheTracks;
- (unsigned long long)totalSizeForAllNonRedownloadableTracks;
- (unsigned long long)totalSizeForAllSyncedTracks;
- (unsigned long long)_minimumPurgeableStorageForUrgency:(unsigned long long)urgency;
- (unsigned long long)_totalSizeForTracksPredicate:(id)predicate;
- (BOOL)_shouldPurgeManagedAlbumsTracksForUrgency:(unsigned long long)urgency;
- (BOOL)_unmanagedPurgeShouldPurgeKeepLocalTracksForUrgency:(unsigned long long)urgency;
- (long long)_databaseFileFreeSpace;
- (long long)_cloudAssetsTotalSize;
- (unsigned long long)totalSizeForArtwork;
- (BOOL)_shouldPurgeAllArtworkAtUrgency:(unsigned long long)urgency;
- (unsigned long long)_purgeAllArtwork;
- (unsigned long long)_purgeableArtworkTotalSizeWithUrgency:(unsigned long long)urgency;
- (unsigned long long)_clearPurgeableArtworkOfAmount:(long long)amount withUrgency:(unsigned long long)urgency;
- (unsigned long long)_managedPurgeableTracksTotalSizeWithUrgency:(unsigned long long)urgency;
- (unsigned long long)_managedClearPurgeableTracksOfAmount:(unsigned long long)amount urgency:(unsigned long long)urgency;
- (id)_purgeableItemsPredicateSQLWithUrgency:(unsigned long long)urgency;
- (id)_purgeableNonCachedItemsPredicateSQL;
- (id)_nonPurgeableAlbumsQuerySQLWithUrgency:(unsigned long long)urgency;
- (id)_purgeableAlbumsQuerySQLWithUrgency:(unsigned long long)urgency;
- (void)_enumeratePurgeableStreamedTracksForUrgency:(unsigned long long)urgency usingBlock:(id /* block */)block;
- (void)_enumeratePurgeableAlbumTracksForUrgency:(unsigned long long)urgency usingBlock:(id /* block */)block;
- (long long)_purgeableTracksTotalSizeWithUrgency:(unsigned long long)urgency includeAutoFilledTracks:(BOOL)tracks;
- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)urgency includeAutoFilledTracks:(BOOL)tracks includeCloudAssets:(BOOL)assets usingBlock:(id /* block */)block;
- (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)urgency includeAutoFilledTracks:(BOOL)tracks includeCloudAssets:(BOOL)assets;
- (id)_allKeepLocalPlaylistTracks;
- (id)_notInKeepLocalCollectionPredicate;
- (long long)_clearDatabaseFileFreeSpace;
- (long long)_clearAllCloudAssets;
- (long long)_clearOrphanedAssetsOfAmount:(long long)amount withUrgency:(unsigned long long)urgency;
- (long long)_clearPurgeableTracksOfAmount:(long long)amount withUrgency:(unsigned long long)urgency includeAutoFilledTracks:(BOOL)tracks;
- (long long)_clearPurgeableTracksOfAmount:(long long)amount withUrgency:(unsigned long long)urgency includeCloudAssets:(BOOL)assets includeAutoFilledTracks:(BOOL)tracks;
- (BOOL)updateSystemPlaylistNamesForCurrentLanguageUsingConnection:(id)connection;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (void)_updateSystemPlaylist:(id)playlist withName:(id)name usingConnection:(id)connection;
- (id)albumArtistForEffectiveAlbumArtistName:(id)name;
- (id)composerForComposerName:(id)name;
- (id)genreForGenre:(id)genre;
- (BOOL)updateSortMapOnConnection:(id)connection;
- (BOOL)updateSortMapOnConnection:(id)connection forceUpdateOriginals:(BOOL)originals;
- (BOOL)inTransactionUpdateSortMapOnConnection:(id)connection forceUpdateOriginals:(BOOL)originals;
- (BOOL)inTransactionUpdateSortMapOnConnection:(id)connection forceRebuild:(BOOL)rebuild forceUpdateOriginals:(BOOL)originals;
- (BOOL)inTransactionUpdateSearchMapOnConnection:(id)connection;
- (BOOL)validateSortMapUnicodeVersionOnConnection:(id)connection;
- (struct { long long x0; long long x1; })nameOrderForString:(id)string;
- (id)insertStringsIntoSortMap:(id)map didReSortMap:(BOOL *)map;
- (id)insertStringsIntoSortMap:(id)map;
- (long long)insertStringIntoSortMapNoTransaction:(id)transaction;
- (id)_systemUnicodeVersionData;
- (BOOL)coalesceMismatchedCollectionsUsingConnection:(id)connection;
- (BOOL)_coalesceMismatchedCollectionClass:(Class)class usingConnection:(id)connection;
- (BOOL)coerceValidDatabaseWithError:(id *)error;
- (BOOL)_validateDatabaseUsingConnection:(id)connection error:(id *)error;
- (id)albumForAlbumArtistPersistentID:(long long)id albumName:(id)name feedURL:(id)url seasonNumber:(id)number compilation:(BOOL)compilation;
- (BOOL)repairAlbumArtistRelationshipsWithConnection:(id)connection;
- (id)artistGroupingKeyForArtistName:(id)name seriesName:(id)name;
- (id)artistForArtistName:(id)name seriesName:(id)name;
- (id)initWithClientIdentity:(id)identity forUserAccount:(id)account;
- (id)initWithResourcesManager:(id)manager;
- (id)initWithPath:(id)path;
- (id)initWithPath:(id)path isUnitTesting:(BOOL)testing;
- (id)initWithPath:(id)path readOnly:(BOOL)only populateUnitTestTablesBlock:(id /* block */)block;
- (id)initWithClientIdentity:(id)identity path:(id)path;
- (id)initWithClientIdentity:(id)identity path:(id)path readOnly:(BOOL)only populateUnitTestTablesBlock:(id /* block */)block;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)dealloc;
- (BOOL)isLibraryEmpty;
- (id)libraryEntityFilterPredicatesForEntityClass:(Class)class;
- (id)libraryEntityFilterPredicatesForContainerClass:(Class)class;
- (void)setClientIdentity:(id)identity;
- (void)connectionWillOpenDatabase:(id)database;
- (void)connectionDidOpenDatabase:(id)database;
- (void)connectionWillCloseDatabase:(id)database;
- (void)connectionDidBeginDatabaseTransaction:(id)transaction;
- (void)connection:(id)connection didEndDatabaseTransactionAndCommit:(BOOL)commit;
- (void)connectionDidAccessDatabase:(id)database;
- (void)connectionPool:(id)pool createdNewConnection:(id)connection;
- (id)checkoutReaderConnection;
- (id)checkoutWriterConnection;
- (void)checkInDatabaseConnection:(id)connection;
- (void)reconnectToDatabase;
- (void)databaseConnectionAllowingWrites:(BOOL)writes withBlock:(id /* block */)block;
- (void)performDatabaseTransactionWithBlock:(id /* block */)block;
- (void)performReadOnlyDatabaseTransactionWithBlock:(id /* block */)block;
- (void)performAsyncDatabaseWriteTransactionWithBlock:(id /* block */)block completionBlock:(id /* block */)block;
- (BOOL)isCurrentThreadInTransaction;
- (BOOL)automaticDatabaseValidationDisabled;
- (BOOL)validateDatabase;
- (int)currentDatabaseVersion;
- (BOOL)createIndexes;
- (BOOL)emptyAllTables;
- (BOOL)clearAllGeniusData;
- (BOOL)clearAllCloudKVSData;
- (id)accountCacheDatabase;
- (void)accessSortKeyBuilder:(id /* block */)builder;
- (id)groupingKeyForString:(id)string;
- (id)groupingKeysForStrings:(id)strings;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)index;
- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)index;
- (unsigned long long)unknownSectionIndex;
- (void)notifyContentsDidChange;
- (void)notifyAssistantContentsDidChange;
- (void)notifyEntitiesAddedOrRemoved;
- (void)notifyNonContentsPropertyDidChange;
- (void)notifyInvisiblePropertyDidChange;
- (void)notifyDisplayValuesPropertyDidChange;
- (void)notifySectionsDidChange;
- (void)notifyCloudLibraryAvailabilityDidChange;
- (void)notifyLibraryImportDidFinish;
- (void)notifyKeepLocalStateDidChange;
- (void)saveTrackMetadata;
- (void)saveTrackMetadataSinceRevision:(long long)revision withGrappaID:(unsigned int)id;
- (void)savePlaylists;
- (void)savePlaylistsSinceRevision:(long long)revision withGrappaID:(unsigned int)id;
- (id)getAlbumArtistChanges;
- (id)getAlbumArtistChangesSinceRevision:(long long)revision withGrappaID:(unsigned int)id;
- (id)getAlbumChanges;
- (id)getAlbumChangesSinceRevision:(long long)revision withGrappaID:(unsigned int)id;
- (id)_getPlaylistContentTasteChangesSinceRevision:(long long)revision withGrappaID:(unsigned int)id;
- (BOOL)requiresSchemaOnlyUpdatesOnConnection:(id)connection;
- (BOOL)requiresNonSchemaUpdatesOnConnection:(id)connection;
- (BOOL)updateSortMap;
- (void)enumeratePersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(unsigned long long)code maximumRevisionType:(int)type forMediaTypes:(id)types inUsersLibrary:(BOOL)library usingBlock:(id /* block */)block;
- (void)enumeratePersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(unsigned long long)code maximumRevisionType:(int)type usingBlock:(id /* block */)block;
- (void)enumerateAlbumArtistPersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(unsigned long long)code usingBlock:(id /* block */)block;
- (void)enumerateAlbumPersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(unsigned long long)code usingBlock:(id /* block */)block;
- (void)getChangedPersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(long long)code maximumRevisionType:(int)type usingBlock:(id /* block */)block;
- (BOOL)persistentID:(long long)id changedAfterRevision:(long long)revision revisionTrackingCode:(long long)code;
- (unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)revision revisionTrackingCode:(unsigned long long)code maximumRevisionType:(int)type;
- (void)removeSource:(int)source withCompletionHandler:(id /* block */)handler;
- (void)removeSource:(int)source usingConnection:(id)connection withCompletionHandler:(id /* block */)handler;
- (void)removeTracksWithPersistentIDs:(id)ids fromSource:(int)source withCompletionHandler:(id /* block */)handler;
- (void)removeTracksWithPersistentIDs:(id)ids fromSource:(int)source usingConnection:(id)connection withCompletionHandler:(id /* block */)handler;
- (void)removePlaylistsWithPersistentIDs:(id)ids fromSource:(int)source usingConnection:(id)connection withCompletionHandler:(id /* block */)handler;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)urgency;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)size urgency:(unsigned long long)urgency respectSongMattress:(BOOL)mattress;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)size;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)size urgency:(unsigned long long)urgency;
- (void)autogenerateSupportedSizesForAllOriginalArtworkWithConnection:(id)connection completionHandler:(id /* block */)handler;
- (BOOL)importExistingOriginalArtworkWithArtworkToken:(id)token artworkType:(long long)type sourceType:(long long)type mediaType:(unsigned int)type;
- (BOOL)importOriginalArtworkFromFileURL:(id)url withArtworkToken:(id)token artworkType:(long long)type sourceType:(long long)type mediaType:(unsigned int)type;
- (BOOL)importOriginalArtworkFromImageData:(id)data withArtworkToken:(id)token artworkType:(long long)type sourceType:(long long)type mediaType:(unsigned int)type;
- (BOOL)removeArtworkAssetWithToken:(id)token;
- (BOOL)deleteArtworkToken:(id)token;
- (void)migrateExistingArtworkToken:(id)token newArtworkToken:(id)token newSourceType:(long long)type;
- (void)importArtworkTokenForEntityPersistentID:(long long)id entityType:(long long)type artworkToken:(id)token artworkType:(long long)type sourceType:(long long)type;
- (void)importArtworkTokenForEntityPersistentID:(long long)id entityType:(long long)type artworkToken:(id)token artworkType:(long long)type sourceType:(long long)type usingConnection:(id)connection;
- (void)removeArtworkTokenForEntityPersistentID:(long long)id entityType:(long long)type artworkType:(long long)type sourceType:(long long)type;
- (void)removeArtworkTokenForEntityPersistentID:(long long)id entityType:(long long)type artworkType:(long long)type sourceType:(long long)type usingConnection:(id)connection;
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)id entityType:(long long)type artworkType:(long long)type retrievalTime:(double)time usingConnection:(id)connection;
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)id entityType:(long long)type artworkType:(long long)type retrievalTime:(double)time preserveExistingAvailableToken:(BOOL)token usingConnection:(id)connection;
- (BOOL)isArtworkTokenAvailable:(id)available;
- (void)retrieveBestArtworkTokensForEntityPersistentID:(long long)id entityType:(long long)type artworkType:(long long)type retrievalTime:(double)time completionHandler:(id /* block */)handler;
- (void)enumerateArtworkTokensForEntityPersistentID:(long long)id entityType:(long long)type artworkType:(long long)type usingBlock:(id /* block */)block;
- (BOOL)cleanupArtworkWithOptions:(unsigned long long)options;
- (BOOL)cleanupArtworkWithOptions:(unsigned long long)options usingConnection:(id)connection;
- (void)removeTombstonesForDeletedItems;
- (void)removeOrphanedTracksOnlyInCaches:(BOOL)caches;
- (void)removeItemsWithFamilyAccountID:(unsigned long long)id purchaserAccountID:(unsigned long long)id downloaderAccountID:(unsigned long long)id;
- (id)valueForDatabaseProperty:(id)property;
- (BOOL)setValue:(id)value forDatabaseProperty:(id)property;
- (BOOL)deleteDatabaseProperty:(id)property;
- (void)migratePresignedValidity;
- (BOOL)hasPresignedValidity;
- (BOOL)verifyPresignedValidity;
- (void)deletePresignedValidity;
- (void)updateTrackIntegrity;
- (void)_logDatabaseAccess;
- (BOOL)_insertArtworkRowWithArtworkToken:(id)token artworkType:(long long)type sourceType:(long long)type relativePath:(id)path;
- (BOOL)_insertArtworkRowWithArtworkToken:(id)token artworkType:(long long)type sourceType:(long long)type relativePath:(id)path usingConnection:(id)connection;
- (BOOL)_updateBestArtworkTokensForArtworkToken:(id)token artworkType:(long long)type sourceType:(long long)type preserveExistingAvailableToken:(BOOL)token usingConnection:(id)connection;
- (BOOL)_determineAndUpdateBestArtworkTokensForEntityPersistentID:(long long)id entityType:(long long)type artworkType:(long long)type retrievalTime:(double)time preserveExistingAvailableToken:(BOOL)token usingConnection:(id)connection;
- (id)_allArtworkVariantDirectories;
- (void)_deleteAllArtworkVariantsAtRelativePaths:(id)paths;
- (BOOL)_removeOrphanedArtworkTokensUsingConnection:(id)connection;
- (BOOL)_removeOrphanedArtworkMetadataUsingConnection:(id)connection;
- (BOOL)_removeOrphanedArtworkAssetsUsingConnection:(id)connection;
- (BOOL)_removeInvalidAvailableArtworkTokensUsingConnection:(id)connection;
- (void)_convertOriginalArtworkToDevicePreferredFormatFromSourceURL:(id)url toDestinationURL:(id)url completionHandler:(id /* block */)handler;
- (void)_autogenerateArtworkForRelativePath:(id)path artworkType:(long long)type mediaType:(unsigned int)type completionHandler:(id /* block */)handler;
- (id)_newGeniusDBConnectionAtPath:(id)path;
- (BOOL)_canConfigureMediaLibraryDatabaseConnection:(id)connection;
- (void)_configureMediaLibraryDatabaseConnection:(id)connection;
- (void)_teardownMediaLibraryDatabaseConnection:(id)connection;
- (BOOL)_clearAllRowsFromTables:(id)tables;
- (void)_effectiveSettingsDidChangeNotification:(id)notification;
- (void)_libraryPathDidChangeNotification:(id)notification;
- (void)performDatabasePathChange:(id)change completion:(id /* block */)completion;
- (void)emergencyDisconnectWithCompletion:(id /* block */)completion;
- (void)terminateForFailureToPerformDatabasePathChange;
- (BOOL)_prepareForAccountChange:(id *)change;
- (void)_completeAccountChangeWithPath:(id)path;
- (BOOL)_shouldProcessAccountChanges;
- (void)_closeAndLockCurrentDatabaseConnections;
- (void)_setupNotificationManager;
- (void)_tearDownNotificationManager;
- (void)_postClientNotificationWithDistributedName:(id)name localName:(id)name;
- (struct CGSize { double x0; double x1; })_sizeForColorAnalysisForMediaType:(unsigned int)type artworkType:(long long)type;
- (BOOL)isUsingSharedLibraryPath;
- (BOOL)isReadOnly;
@end

#endif /* ML3MusicLibrary_h */
