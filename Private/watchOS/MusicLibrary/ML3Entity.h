//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.6.0.0
//
#ifndef ML3Entity_h
#define ML3Entity_h
@import Foundation;

#include "ML3MusicLibrary.h"

@interface ML3Entity : NSObject

@property (weak, nonatomic) ML3MusicLibrary *library;
@property (readonly, nonatomic) long long persistentID;
@property (readonly, nonatomic) BOOL existsInLibrary;

/* class methods */
+ (id)aggregateQueryWithUnitQuery:(id)query foreignPersistentIDProperty:(id)idproperty;
+ (id)anyInLibrary:(id)library predicate:(id)predicate;
+ (id)anyInLibrary:(id)library predicate:(id)predicate options:(long long)options;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate orderingProperties:(id)properties;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate orderingProperties:(id)properties usingSections:(BOOL)sections;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate orderingProperties:(id)properties orderingDirectionMappings:(id)mappings usingSections:(BOOL)sections;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate options:(long long)options;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate usingSections:(BOOL)sections;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms propertyToCount:(id)count;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms propertyToCount:(id)count options:(long long)options;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms usingSections:(BOOL)sections;
+ (id)queryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms usingSections:(BOOL)sections options:(long long)options;
+ (id)unrestrictedQueryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms;
+ (id)allItemsQueryWithLibrary:(id)library predicate:(id)predicate orderingTerms:(id)terms usingSections:(BOOL)sections;
+ (id)unrestrictedAllItemsQueryWithlibrary:(id)withlibrary predicate:(id)predicate orderingTerms:(id)terms;
+ (id)predicateIncludingSystemwidePredicatesWithPredicate:(id)predicate library:(id)library options:(long long)options;
+ (BOOL)insertValues:(id)values intoTable:(id)table persistentID:(long long)id library:(id)library;
+ (BOOL)insertValues:(id)values intoTable:(id)table persistentID:(long long)id connection:(id)connection;
+ (id)unsettableProperties;
+ (BOOL)_shouldIncrementRevisionForType:(int)type persistentID:(long long)id usingConnection:(id)connection;
+ (BOOL)incrementRevisionForRevisionTypeContentWithLibrary:(id)library deletionType:(int)type persistentIDs:(id)ids;
+ (BOOL)incrementRevisionForRevisionTypeContentWithConnection:(id)connection deletionType:(int)type persistentIDs:(id)ids;
+ (BOOL)incrementRevisionForRevisionTypeContentWithConnection:(id)connection deletionType:(int)type persistentIDs:(const long long *)ids count:(unsigned long long)count;
+ (BOOL)incrementRevisionWithLibrary:(id)library persistentID:(long long)id deletionType:(int)type revisionType:(int)type;
+ (BOOL)incrementRevisionWithLibrary:(id)library persistentID:(long long)id deletionType:(int)type revisionType:(int)type usingConnection:(id)connection;
+ (BOOL)insertionChangesLibraryContents;
+ (void)enumeratePersistentIDsInLibrary:(id)library matchingPredicate:(id)predicate orderingTerms:(id)terms persistentIDs:(const long long *)ids count:(unsigned long long)count options:(long long)options usingBlock:(id /* block */)block;
+ (id)subselectStatementForProperty:(id)property;
+ (id)subselectPropertyForProperty:(id)property;
+ (id)newSelectAllEntitiesSQLForProperties:(const id *)properties count:(unsigned long long)count predicate:(id)predicate;
+ (id)newSelectSQLForProperties:(const id *)properties count:(unsigned long long)count predicate:(id)predicate;
+ (id)entityURLScheme;
+ (id)entityFromURL:(id)url reason:(id *)reason;
+ (id)entityFromURL:(id)url inLibrary:(id)library;
+ (id)entityFromURL:(id)url inLibrary:(id)library verifyExistence:(BOOL)existence;
+ (id)_entityForURLComponents:(id)urlcomponents inLibrary:(id)library verifyExistence:(BOOL)existence reason:(id *)reason;
+ (id)URLForEntityWithPersistentID:(long long)id libraryUID:(id)uid;
+ (id)defaultFilterPredicates;
+ (id)predicateByOptimizingPredicate:(id)predicate;
+ (id)predicateByOptimizingComparisonPredicate:(id)predicate;
+ (id)joinClausesForProperty:(id)property;
+ (id)newWithPersistentID:(long long)id inLibrary:(id)library;
+ (id)newWithDictionary:(id)dictionary inLibrary:(id)library;
+ (id)newWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;
+ (id)newWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders usingConnection:(id)connection;
+ (id)defaultOrderingTerms;
+ (id)sectionPropertyForProperty:(id)property;
+ (id)foreignDatabaseTableForProperty:(id)property;
+ (id)foreignColumnForProperty:(id)property;
+ (id)foreignPropertyForProperty:(id)property entityClass:(Class)class;
+ (BOOL)propertyIsCountProperty:(id)property;
+ (id)countingQueryForBaseQuery:(id)query countProperty:(id)property forIdentifier:(long long)identifier;
+ (BOOL)setValues:(id)values forProperties:(id)properties forEntityPersistentIDs:(id)ids inLibrary:(id)library usingConnection:(id)connection;
+ (void)_didChangeValueForProperties:(id)properties inLibrary:(id)library;
+ (BOOL)libraryContentsChangeForProperty:(id)property;
+ (BOOL)assistantLibraryContentsChangeForProperty:(id)property;
+ (BOOL)libraryDynamicChangeForProperty:(id)property;
+ (BOOL)_deleteRowForPersistentIDs:(const long long *)ids count:(unsigned long long)count library:(id)library table:(id)table usingColumn:(id)column usingConnection:(id)connection;
+ (BOOL)deleteFromLibrary:(id)library deletionType:(int)type persistentIDs:(const long long *)ids count:(unsigned long long)count;
+ (BOOL)deleteFromLibrary:(id)library deletionType:(int)type persistentIDs:(const long long *)ids count:(unsigned long long)count usingConnection:(id)connection;
+ (BOOL)removeFromMyLibrary:(id)library deletionType:(int)type persistentIDs:(const long long *)ids count:(unsigned long long)count;
+ (id)extraTablesToDelete;
+ (id)extraTablesToInsert;
+ (id)persistentIDColumnForTable:(id)table;
+ (id)collectionClassesToUpdateBeforeDelete;
+ (id)predisambiguatedProperties;
+ (id)allProperties;
+ (void)predisambiguateProperties:(id)properties toDictionary:(id)dictionary;
+ (id)disambiguatedSQLForProperty:(id)property;
+ (id)_createDisambiguatedSQLForProperty:(id)property;
+ (id)disambiguatedSelectSQLForProperty:(id)property;
+ (id)indexableSQLForProperties:(id)properties;
+ (id)orderingSQLForProperties:(id)properties directionality:(id)directionality;
+ (long long)revisionTrackingCode;
+ (void)enumeratePersistentIDsInLibrary:(id)library afterRevision:(long long)revision usingBlock:(id /* block */)block;

/* instance methods */
- (id)initWithPersistentID:(long long)id inLibrary:(id)library;
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders usingConnection:(id)connection;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isEqual:(id)equal;
- (unsigned long long)hash;
- (id)description;
- (BOOL)matchesPredicate:(id)predicate;
- (id)URL;
- (void)getValues:(id *)values forProperties:(const id *)properties count:(unsigned long long)count;
- (id)getValuesForProperties:(id)properties;
- (id)valueForProperty:(id)property;
- (BOOL)setValues:(const id *)values forProperties:(const id *)properties count:(unsigned long long)count;
- (BOOL)setValues:(id)values forProperties:(id)properties;
- (void)setValues:(id)values forProperties:(id)properties async:(BOOL)async withCompletionBlock:(id /* block */)block;
- (BOOL)setValues:(id)values forProperties:(id)properties usingConnection:(id)connection;
- (BOOL)setValuesForPropertiesWithDictionary:(id)dictionary;
- (BOOL)setValue:(id)value forProperty:(id)property;
- (void)didChangeValueForProperties:(id)properties;
- (BOOL)deleteFromLibrary;
- (void)incrementRevision;
@end

#endif /* ML3Entity_h */
