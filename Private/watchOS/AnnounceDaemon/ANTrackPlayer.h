//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 217.20.3.0.0
//
#ifndef ANTrackPlayer_h
#define ANTrackPlayer_h
@import Foundation;

#include "ANAudioSessionManager.h"
#include "ANTrackPlayerDelegate-Protocol.h"

@class ANTimer, AVAudioSession, AVQueuePlayer, NSMutableArray, NSString, NSURL, NSUUID;
@protocol OS_dispatch_queue, OS_os_log;

@interface ANTrackPlayer : NSObject

@property (readonly) NSObject<OS_dispatch_queue> *mainQueue;
@property (nonatomic) unsigned long long playbackState;
@property double interruptionStart;
@property (readonly, nonatomic) unsigned long long options;
@property (readonly, nonatomic) ANAudioSessionManager *audioSessionManager;
@property (nonatomic) BOOL readyToPlay;
@property (retain, nonatomic) ANTimer *interruptionTimer;
@property (retain, nonatomic) ANTimer *playerTimer;
@property (nonatomic) BOOL playbackPending;
@property (copy, nonatomic) id /* block */ handler;
@property (weak) NSObject<ANTrackPlayerDelegate> *delegate;
@property (weak) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, nonatomic) int numberActiveTracks;
@property (readonly, nonatomic) NSString *activelyPlayingAnnouncementID;
@property (retain, nonatomic) AVQueuePlayer *queuePlayer;
@property double silenceBetweenEachTrack;
@property (retain, nonatomic) NSURL *audioFileAtStart;
@property double trimStartTone;
@property (retain, nonatomic) NSURL *audioFileTransition;
@property double trimTransitionTone;
@property double previousSkipGoesToPreviousTrackDelta;
@property (readonly, nonatomic) AVAudioSession *audioSession;
@property (readonly, nonatomic) NSMutableArray *playerItems;
@property (readonly, nonatomic) NSUUID *endpointUUID;
@property (readonly, nonatomic) NSObject<OS_os_log> *log;

/* instance methods */
- (id)initWithOptions:(unsigned long long)options;
- (id)initWithOptions:(unsigned long long)options endpointUUID:(id)uuid;
- (void)dealloc;
- (BOOL)add:(id)add announcementID:(id)id;
- (BOOL)_add:(id)_add announcementID:(id)id trackType:(long long)type;
- (BOOL)_addURL:(id)url announcementID:(id)id trackType:(long long)type;
- (BOOL)_insertAudioBetween;
- (id)prepareToPlay;
- (void)playWithCompletionHandler:(id /* block */)handler;
- (void)_playWithCompletionHandler:(id /* block */)handler;
- (void)_handleReadyToPlayWithCompletionHandler:(id /* block */)handler;
- (void)stopWithCompletionHandler:(id /* block */)handler;
- (void)_stopAndUpdatePlaybackState:(unsigned long long)state;
- (void)end;
- (void)nextWithCompletionHandler:(id /* block */)handler;
- (void)previousWithCompletionHandler:(id /* block */)handler;
- (void)_registerForNotificationsWithAudioSession:(id)session;
- (void)_deregisterForNotificationsWithAudioSession:(id)session;
- (void)_configureAudioSession;
- (void)_callDelegateWithBlock:(id /* block */)block;
- (id)_playerInfoForAVPlayerItem:(id)item;
- (void)_addObserverForPlayer:(id)player;
- (void)_removeObserverForPlayer:(id)player;
- (void)_removeItemObserverForPlayer:(id)player;
- (id)_stringForTimeControlStatus:(long long)status;
- (id)_stringForPlayerStatus:(long long)status;
- (id)_stringForPlayerItemStatus:(long long)status;
- (void)_stopPlaybackAndFailWithItem:(id)item error:(id)error;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)playInternalWithCompletionHandler:(id /* block */)handler;
- (void)stopInternalSync;
- (void)nextInternalSync;
- (void)previousInternalSync;
- (void)handleInterruptionDelay:(double)delay;
- (void)_resumePlaybackAfterInterruptionAtTimeInterval:(double)interval;
- (void)audioSessionMediaServicesLostHandler:(id)handler;
- (void)audioSessionMediaServicesResetHandler:(id)handler;
- (void)_handleInterruptionEndedAndShouldResume:(BOOL)resume;
- (void)audioSessionInterruptionHandler:(id)handler;
- (void)playerRateChangedHandler:(id)handler;
- (void)playerItemPlayedToEndHandler:(id)handler;
@end

#endif /* ANTrackPlayer_h */
