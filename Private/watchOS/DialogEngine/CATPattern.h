//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3302.12.1.0.0
//
#ifndef CATPattern_h
#define CATPattern_h
@import Foundation;

@interface CATPattern : NSObject
/* class methods */
+ (id)patternNameFromType:(unsigned long long)type;
+ (id)segment:(id)segment settings:(id)settings;
+ (void)load:(id)load patternId:(id)id options:(int)options completion:(id /* block */)completion;
+ (void)load:(id)load patternId:(id)id completion:(id /* block */)completion;
+ (id)executeCAT:(id)cat templateDir:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; })dir catId:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; })id patternId:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; })id requestType:(int)type parameters:(id)parameters globals:(id)globals patternContext:(struct shared_ptr<siri::dialogengine::PatternContext> { struct PatternContext * x0; struct __shared_weak_count * x1; })context callback:(id)callback options:(int)options error:(id *)error;
+ (void)execute:(id)execute patternId:(id)id parameters:(id)parameters globals:(id)globals options:(int)options completion:(id /* block */)completion;
+ (void)execute:(id)execute patternId:(id)id parameters:(id)parameters globals:(id)globals callback:(id)callback options:(int)options completion:(id /* block */)completion;
+ (void)execute:(id)execute templateDir:(id)dir patternId:(id)id parameters:(id)parameters globals:(id)globals options:(int)options completion:(id /* block */)completion;
+ (void)execute:(id)execute templateDir:(id)dir patternId:(id)id parameters:(id)parameters globals:(id)globals callback:(id)callback options:(int)options completion:(id /* block */)completion;
@end

#endif /* CATPattern_h */
