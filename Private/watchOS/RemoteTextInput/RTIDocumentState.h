//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 139.203.0.0.0
//
#ifndef RTIDocumentState_h
#define RTIDocumentState_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "RTIColor.h"
#include "RTIDocumentRequest.h"
#include "RTITextStyling.h"

@class BOOL *, NSAttributedString, NSMutableData, TIDocumentState;

@interface RTIDocumentState : NSObject<NSSecureCoding, NSCopying> {
  /* instance variables */
  BOOL _clearCanSuggestOnNextDocumentState;
}

@property (retain, nonatomic) NSMutableData *_documentRects;
@property (readonly, nonatomic) RTIDocumentRequest *request;
@property (retain, nonatomic) TIDocumentState *documentState;
@property (nonatomic) BOOL hasText;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } caretRectInWindow;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } firstSelectionRectInWindow;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } clientFrameInWindow;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } firstSelectionRectInEntitySpace;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } clientFrameInEntitySpace;
@property (nonatomic) BOOL scrolling;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } selectedTextRange;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } markedTextRange;
@property (nonatomic) BOOL originatedFromSource;
@property (nonatomic) BOOL canSuggestSupplementalItemsForCurrentSelection;
@property (copy, nonatomic) NSAttributedString *textCheckingAnnotatedString;
@property (retain, nonatomic) RTITextStyling *autocorrectBubbleStyling;
@property (retain, nonatomic) RTIColor *autocorrectTextColor;
@property (retain, nonatomic) RTIColor *autocorrectTextBackgroundColor;
@property (retain, nonatomic) RTIColor *insertionPointColor;

/* class methods */
+ (BOOL)supportsSecureCoding;
+ (id)documentStateWithRequest:(id)request;

/* instance methods */
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (id)init;
- (id)description;
- (BOOL)isEqual:(id)equal;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })deltaForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct RTIRange { long long x0; long long x1; })deltaRangeForSelection:(struct _NSRange { unsigned long long x0; unsigned long long x1; })selection;
- (void)resetTextRects;
- (void)addTextRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)addTextRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range granularity:(long long)granularity;
- (void)addTextRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range granularity:(long long)granularity isVertical:(BOOL)vertical;
- (void)_enumerateDocumentRectsWithOptions:(unsigned long long)options block:(id /* block */)block;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range actualRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withGranularity:(long long)granularity;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withGranularity:(long long)granularity isVerticalOut:(BOOL *)out;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withGranularity:(long long)granularity isVerticalOut:(BOOL *)out actualRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range;
- (id)rectsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range withGranularity:(long long)granularity;
- (void)enumerateRectsWithOptions:(unsigned long long)options range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range granularity:(long long)granularity block:(id /* block */)block;
- (unsigned long long)characterIndexForPoint:(struct CGPoint { double x0; double x1; })point;
@end

#endif /* RTIDocumentState_h */
