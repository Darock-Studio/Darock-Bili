//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 413.1.0.0.0
//
#ifndef TypistPathUtilities_h
#define TypistPathUtilities_h
@import Foundation;

@interface TypistPathUtilities : NSObject
/* class methods */
+ (id)_jamoShiftsForStructure:(int)structure;
+ (id)getStrokesForJamo:(id)jamo forVariant:(BOOL)variant ofType:(int)type fromPath:(id)path forLocale:(unsigned long long)locale;
+ (id)shiftJamosInSyllable:(id)syllable withPath:(id)path forLocale:(unsigned long long)locale;
+ (BOOL)isKoreanConsonantVariant:(unsigned short)variant;
+ (id)shiftStrokesForJamo:(id)jamo withDirection:(int)direction;
+ (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_determineShiftBasedOnDirection:(int)direction;
+ (double)_dotProduct:(struct CGPoint { double x0; double x1; })product and:(struct CGPoint { double x0; double x1; })and;
+ (struct CGPoint { double x0; double x1; })_subtractPoint:(struct CGPoint { double x0; double x1; })point byPoint:(struct CGPoint { double x0; double x1; })point;
+ (struct CGPoint { double x0; double x1; })_addPoint:(struct CGPoint { double x0; double x1; })point andPoint:(struct CGPoint { double x0; double x1; })point;
+ (struct CGPoint { double x0; double x1; })_scalarMultiplyPoint:(struct CGPoint { double x0; double x1; })point by:(double)by;
+ (struct CGPoint { double x0; double x1; })_reflectPoint:(struct CGPoint { double x0; double x1; })point origin:(struct CGPoint { double x0; double x1; })origin;
+ (struct CGPoint { double x0; double x1; })pointOnCurve:(id)curve atTime:(double)time;
+ (struct CGPoint { double x0; double x1; })pointOnSineCurve:(double)curve withHeight:(double)height withStartPoint:(struct CGPoint { double x0; double x1; })point withEndPoint:(struct CGPoint { double x0; double x1; })point atTime:(double)time;
+ (id)convertCurveDeleteTouchPoints:(struct CGPoint { double x0; double x1; })points endPoint:(struct CGPoint { double x0; double x1; })point curveHeight:(double)height curveDensity:(long long)density tilt:(double)tilt;
+ (id)generatePathArgumentString:(id)string withInterval:(id)interval;
+ (id)convertUIBezierPathToTouchPoints:(id)points;
+ (id)convertSVGStringPathToUIBezierPath:(id)path;
+ (id)convertSVGPaths:(id)svgpaths withTransformation:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformation;
+ (id)convertSingleSVGPaths:(id)svgpaths withTransformation:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformation;
+ (BOOL)_validatePoints:(struct CGPoint { double x0; double x1; })points To:(struct CGPoint { double x0; double x1; })to;
+ (id)_decomposeCharactersWhereNeeded:(id)needed;
+ (id)_decomposeGraphemeIntoSeparateCharactersIfNeeded:(id)needed;
+ (id)_processHangulCharacter:(unsigned short)character withPathMap:(id)map forLocale:(unsigned long long)locale;
+ (id)_processArabicCharacter:(id)character withPathMap:(id)map forLocale:(unsigned long long)locale;
+ (id)_processThaiCharacter:(id)character withPathMap:(id)map forLocale:(unsigned long long)locale;
+ (id)_shiftThaiStrokes:(id)strokes withRatio:(double)ratio ofHeight:(id)height;
+ (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_makeTranslationWithOffset:(double)offset;
+ (int)_mappingRegionToVariantID:(id)id;
+ (id)_processCharacters:(id)characters withPathMap:(id)map forLocale:(int)locale;
+ (double)getWidthOfFirstCharacterInString:(id)string;
+ (id)getPathDataForCharacters:(id)characters withRegion:(id)region isCursive:(BOOL)cursive;
+ (id)getPathData:(id)data fromPathMap:(id)map;
+ (unsigned long long)getTotalWidthForText:(id)text isCursive:(BOOL)cursive withRegion:(id)region fromPathMap:(id)map;
+ (id)getTextClustersFrom:(id)from withRegion:(id)region;
+ (id)_getTextClustersFrom:(id)from forCharacters:(id)characters;
+ (id)_determineWritingStyle:(id)style forCharacters:(id)characters;
+ (int)_getScribbleRuleFromRegion:(id)region;
+ (id)_separateFinalFormCharacters:(id)characters;
+ (id)_separateIsolatedCharacters:(id)characters;
+ (id)_separateUniqueCharacters:(id)characters;
+ (id)_shiftPath:(id)path forCharacters:(id)characters withRule:(int)rule;
+ (id)_getWidthAndHeight:(id)height forCharacters:(id)characters;
+ (id)_connectPath:(id)path forCharacters:(id)characters withRegion:(id)region;
+ (struct sqlite3 *)_openDatabaseFromFile:(id)file;
+ (unsigned long long)_queryDatabase:(struct sqlite3 *)database withSql:(id)sql forRegion:(id)region;
+ (id)_queryHandwritingSourceForCharactersInString:(id)string withRegion:(id)region;
@end

#endif /* TypistPathUtilities_h */
