//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 388.0.0.0.0
//
#ifndef _PASHistogramData_h
#define _PASHistogramData_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"

@protocol {HDGuardedData="scores"{SimdVector<float __attribute__((ext_vector_type(8))), float>="chunks"{vector<float __attribute__((ext_vector_type(8))), (anonymous namespace)::SimdAlignedAllocator<float __attribute__((ext_vector_type(8)))>>="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(8))), (anonymous namespace)::SimdAlignedAllocator<float __attribute__((ext_vector_type(8)))>>="__value_"^}}"count"Q}"abs"{SimdVector<int __attribute__((ext_vector_type(8))), unsigned int>="chunks"{vector<int __attribute__((ext_vector_type(8))), (anonymous namespace)::SimdAlignedAllocator<int __attribute__((ext_vector_type(8)))>>="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<int * __attribute__((ext_vector_type(8))), (anonymous namespace)::SimdAlignedAllocator<int __attribute__((ext_vector_type(8)))>>="__value_"^}}"count"Q}"enumerationInProgress"B}, {unique_ptr<proactive::pas::SynchronizedObject<(anonymous namespace)::HDGuardedData, proactive::pas::detail::RecursiveMutex>, std::default_delete<proactive::pas::SynchronizedObject<(anonymous namespace)::HDGuardedData, proactive::pas::detail::RecursiveMutex>>>="__ptr_"{__compressed_pair<proactive::pas::SynchronizedObject<(anonymous namespace)::HDGuardedData, proactive::pas::detail::RecursiveMutex> *, std::default_delete<proactive::pas::SynchronizedObject<(anonymous namespace)::HDGuardedData, proactive::pas::detail::RecursiveMutex>>>="__value_"^v}};

@interface _PASHistogramData : NSObject<NSSecureCoding> {
  /* instance variables */
  struct HDGuardedData { struct SimdVector<float __attribute__((ext_vector_type(8))), float> { struct vector<float __attribute__((ext_vector_type(8))), (anonymous namespace)::SimdAlignedAllocator<float __attribute__((ext_vector_type(8)))>> { " *__begin_; _ x0; _ x1; e x2; in double x3; _ x4; _ ^; _ x5; e x6; in double x7; _ x8; char x9; a x10; p x11; _ x12; _ {__compressed_pair<float * __attribute__((ext_vector_type(8))), (anonymous namespace)::SimdAlignedAllocator<float __attribute__((ext_vector_type(8)))>>=; _ x13; void x14; a x15; long x16; u x17; e x18; _ x19; " x20; } * x21; } chunks; unsigned long long count; } scores; struct SimdVector<int __attribute__((ext_vector_type(8))), unsigned int> { struct vector<int __attribute__((ext_vector_type(8))), (anonymous namespace)::SimdAlignedAllocator<int __attribute__((ext_vector_type(8)))>> { " *__begin_; _ x0; _ x1; e x2; in double x3; _ x4; _ ^; _ x5; e x6; in double x7; _ x8; char x9; a x10; p x11; _ x12; _ {__compressed_pair<int * __attribute__((ext_vector_type(8))), (anonymous namespace)::SimdAlignedAllocator<int __attribute__((ext_vector_type(8)))>>=; _ x13; void x14; a x15; long x16; u x17; e x18; _ x19; " x20; } * x21; } chunks; unsigned long long count; } abs; BOOL enumerationInProgress; } _private_unsafeGuardedData;
  struct unique_ptr<proactive::pas::SynchronizedObject<(anonymous namespace)::HDGuardedData, proactive::pas::detail::RecursiveMutex>, std::default_delete<proactive::pas::SynchronizedObject<(anonymous namespace)::HDGuardedData, proactive::pas::detail::RecursiveMutex>>> { struct __compressed_pair<proactive::pas::SynchronizedObject<(anonymous namespace)::HDGuardedData, proactive::pas::detail::RecursiveMutex> *, std::default_delete<proactive::pas::SynchronizedObject<(anonymous namespace)::HDGuardedData, proactive::pas::detail::RecursiveMutex>>> { void *__value_; } __ptr_; } _guardedData;
}

/* class methods */
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)init;
- (void)clear;
- (void)add:(float)add a:(unsigned short)a b:(unsigned short)b;
- (float)lookupUnsmoothedA:(unsigned short)a b:(unsigned short)b;
- (float)lookupSmoothedWithBucketCount:(unsigned short)count distanceScale:(float)scale weightScale:(float)scale a:(unsigned short)a b:(unsigned short)b;
- (float)entropyWhereA:(unsigned short)a b:(unsigned short)b;
- (void)enumerate:(id /* block */)enumerate;
- (int)countWhereA:(unsigned short)a b:(unsigned short)b;
- (void)deleteWhereA:(unsigned short)a b:(unsigned short)b;
- (void)decayByFactor:(float)factor;
- (void)decayWithHalfLifeInDays:(float)days;
- (id)aSet;
- (id)bSet;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
@end

#endif /* _PASHistogramData_h */
