//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 388.0.0.0.0
//
#ifndef _PASSqliteStatement_h
#define _PASSqliteStatement_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "_PASSQLColumnMapping.h"

@interface _PASSqliteStatement : NSObject<NSCopying>

@property (readonly, nonatomic) struct sqlite3_stmt * stmt;
@property (readonly, nonatomic) _PASSQLColumnMapping *columnMapping;

/* instance methods */
- (id)initWithStatementPointer:(struct sqlite3_stmt *)pointer;
- (id)initWithStatementPointer:(struct sqlite3_stmt *)pointer columnMapping:(id)mapping;
- (id)init;
- (void)prepareToRunQuery;
- (void)prepareForRowDeserialization;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)description;
- (int)bindNamedParamToNull:(const char *)null;
- (int)bindNamedParam:(const char *)param toNSString:(id)nsstring;
- (int)bindNamedParam:(const char *)param toNonnullNSString:(id)nsstring;
- (int)bindNamedParam:(const char *)param toNSData:(id)nsdata;
- (int)bindNamedParam:(const char *)param toNonnullNSData:(id)nsdata;
- (int)bindNamedParam:(const char *)param toInteger:(long long)integer;
- (int)bindNamedParam:(const char *)param toInt64:(long long)int64;
- (int)bindNamedParam:(const char *)param toInt64AsNSNumber:(id)nsnumber;
- (int)bindNamedParam:(const char *)param toInt64AsNonnullNSNumber:(id)nsnumber;
- (int)bindNamedParam:(const char *)param toDouble:(double)double;
- (int)bindNamedParam:(const char *)param toDoubleAsNSNumber:(id)nsnumber;
- (int)bindNamedParam:(const char *)param toDoubleAsNonnullNSNumber:(id)nsnumber;
- (int)bindNamedParam:(const char *)param toNSNumber:(id)nsnumber;
- (int)bindNamedParam:(const char *)param toNonnullNSNumber:(id)nsnumber;
- (int)bindNamedParam:(const char *)param toNSIndexSet:(id)set;
- (int)bindNamedParam:(const char *)param toNSArray:(id)nsarray;
- (int)bindNamedParam:(const char *)param toNSSet:(id)nsset;
- (int)bindNamedParam:(const char *)param toNSOrderedSet:(id)set;
- (int)bindNamedParam:(const char *)param toNSDictionary:(id)nsdictionary;
- (int)bindNamedParam:(const char *)param toBlock:(id /* block */)block;
- (int)_checkBindStatus:(int)status forIndex:(int)index;
- (int)bindParamToNull:(int)null;
- (int)bindParam:(int)param toNSString:(id)nsstring;
- (int)bindParam:(int)param toNonnullNSString:(id)nsstring;
- (int)bindParam:(int)param toNSData:(id)nsdata;
- (int)bindParam:(int)param toNonnullNSData:(id)nsdata;
- (int)bindParam:(int)param toInteger:(long long)integer;
- (int)bindParam:(int)param toInt64:(long long)int64;
- (int)bindParam:(int)param toInt64AsNSNumber:(id)nsnumber;
- (int)bindParam:(int)param toInt64AsNonnullNSNumber:(id)nsnumber;
- (int)bindParam:(int)param toDouble:(double)double;
- (int)bindParam:(int)param toDoubleAsNSNumber:(id)nsnumber;
- (int)bindParam:(int)param toDoubleAsNonnullNSNumber:(id)nsnumber;
- (int)bindParam:(int)param toNSNumber:(id)nsnumber;
- (int)bindParam:(int)param toNonnullNSNumber:(id)nsnumber;
- (int)_bindParam:(int)param toObjcObject:(id)object sqliteMethodName:(const char *)name;
- (int)bindParam:(int)param toNSIndexSet:(id)set;
- (int)bindParam:(int)param toNSArray:(id)nsarray;
- (int)bindParam:(int)param toNSSet:(id)nsset;
- (int)bindParam:(int)param toNSOrderedSet:(id)set;
- (int)bindParam:(int)param toNSDictionary:(id)nsdictionary;
- (int)bindParam:(int)param toBlock:(id /* block */)block;
- (id)getNSStringForColumn:(int)column;
- (id)nonnullNSStringForColumn:(int)column;
- (id)getNSDataForColumn:(int)column;
- (id)nonnullNSDataForColumn:(int)column;
- (void)accessBlobBytesForColumn:(int)column usingBlock:(id /* block */)block;
- (long long)getIntegerForColumn:(int)column;
- (long long)getInt64ForColumn:(int)column;
- (id)getInt64AsNSNumberForColumn:(int)column;
- (id)int64AsNonnullNSNumberForColumn:(int)column;
- (double)getDoubleForColumn:(int)column;
- (id)getDoubleAsNSNumberForColumn:(int)column;
- (id)doubleAsNonnullNSNumberForColumn:(int)column;
- (id)getNSNumberForColumn:(int)column;
- (id)nonnullNSNumberForColumn:(int)column;
- (BOOL)isColumnNull:(int)null;
- (id)getNSStringForColumnName:(const char *)name table:(const char *)table;
- (id)nonnullNSStringForColumnName:(const char *)name table:(const char *)table;
- (id)getNSDataForColumnName:(const char *)name table:(const char *)table;
- (id)nonnullNSDataForColumnName:(const char *)name table:(const char *)table;
- (void)accessBlobBytesForColumnName:(const char *)name table:(const char *)table usingBlock:(id /* block */)block;
- (long long)getIntegerForColumnName:(const char *)name table:(const char *)table;
- (long long)getInt64ForColumnName:(const char *)name table:(const char *)table;
- (id)getInt64AsNSNumberForColumnName:(const char *)name table:(const char *)table;
- (id)int64AsNonnullNSNumberForColumnName:(const char *)name table:(const char *)table;
- (double)getDoubleForColumnName:(const char *)name table:(const char *)table;
- (id)getDoubleAsNSNumberForColumnName:(const char *)name table:(const char *)table;
- (id)doubleAsNonnullNSNumberForColumnName:(const char *)name table:(const char *)table;
- (id)getNSNumberForColumnName:(const char *)name table:(const char *)table;
- (id)nonnullNSNumberForColumnName:(const char *)name table:(const char *)table;
- (BOOL)isNullForColumnName:(const char *)name table:(const char *)table;
- (id)getNSStringForColumnAlias:(const char *)alias;
- (id)nonnullNSStringForColumnAlias:(const char *)alias;
- (id)getNSDataForColumnAlias:(const char *)alias;
- (id)nonnullNSDataForColumnAlias:(const char *)alias;
- (void)accessBlobBytesForColumnAlias:(const char *)alias usingBlock:(id /* block */)block;
- (long long)getIntegerForColumnAlias:(const char *)alias;
- (long long)getInt64ForColumnAlias:(const char *)alias;
- (id)getInt64AsNSNumberForColumnAlias:(const char *)alias;
- (id)int64AsNonnullNSNumberForColumnAlias:(const char *)alias;
- (double)getDoubleForColumnAlias:(const char *)alias;
- (id)getDoubleAsNSNumberForColumnAlias:(const char *)alias;
- (id)doubleAsNonnullNSNumberForColumnAlias:(const char *)alias;
- (id)getNSNumberForColumnAlias:(const char *)alias;
- (id)nonnullNSNumberForColumnAlias:(const char *)alias;
- (BOOL)isNullForColumnAlias:(const char *)alias;
@end

#endif /* _PASSqliteStatement_h */
