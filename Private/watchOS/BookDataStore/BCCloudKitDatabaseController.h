//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1062.0.0.0.0
//
#ifndef BCCloudKitDatabaseController_h
#define BCCloudKitDatabaseController_h
@import Foundation;

#include "BCCloudDataPrivacyDelegate-Protocol.h"
#include "BCCloudKitConfiguration.h"

@class BUCoalescingCallBlock, CKContainer, CKDatabase, CKRecordID, CKServerChangeToken, NSArray, NSData, NSMapTable, NSMutableDictionary, NSMutableSet, NSString, NSURL;
@protocol OS_dispatch_queue;

@interface BCCloudKitDatabaseController : NSObject<BCCloudDataPrivacyDelegate> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _zoneObserversLock;
}

@property (retain, nonatomic) CKDatabase *database;
@property (retain, nonatomic) CKContainer *container;
@property (copy, nonatomic) NSURL *archiveURL;
@property (copy, nonatomic) NSArray *desiredRecordZoneIDs;
@property (retain, nonatomic) NSMutableSet *changedRecordZoneIDs;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *accessQueue;
@property (retain, nonatomic) BUCoalescingCallBlock *coalescedArchive;
@property (retain, nonatomic) BCCloudKitConfiguration *configuration;
@property (copy, nonatomic) NSString *containerIdentifier;
@property (retain, nonatomic) CKRecordID *userRecordID;
@property (retain, nonatomic) CKServerChangeToken *serverChangeToken;
@property (retain) NSData *recordIDSalt;
@property (retain, nonatomic) NSMutableDictionary *recordZones;
@property (retain, nonatomic) NSMutableDictionary *observers;
@property (retain, nonatomic) NSMapTable *zoneObservers;
@property (retain, nonatomic) NSMutableDictionary *tokenStores;
@property (retain, nonatomic) BUCoalescingCallBlock *coalescedZoneFetch;
@property (nonatomic) BOOL attachedToContainer;
@property (nonatomic) double backOffInterval;
@property (nonatomic) BOOL serverFetchPostponed;
@property (nonatomic) BOOL fetchRecordZoneChangesSuccess;
@property (readonly, copy, nonatomic) NSString *subscriptionID;
@property (nonatomic) BOOL hasSubscription;

/* class methods */
+ (id)encodeRecordSystemFields:(id)fields;
+ (id)decodeRecordFromSystemFields:(id)fields;
+ (void)startInternetConnectionReachabilityNotifier;

/* instance methods */
- (id)initWithConfiguration:(id)configuration archiveURL:(id)url;
- (id)appBundleIdentifier;
- (void)fetchChangesWithCompletion:(id /* block */)completion;
- (void)fetchRecordForRecordID:(id)id completion:(id /* block */)completion;
- (void)willAttachToContainer:(id)container serviceMode:(BOOL)mode completion:(id /* block */)completion;
- (void)connectUserTo:(id)to container:(id)container updateSubscription:(BOOL)subscription completion:(id /* block */)completion subscriptionCompletion:(id /* block */)completion;
- (void)attachToZones:(id)zones completion:(id /* block */)completion;
- (void)detach;
- (void)detachWithError:(id)error completion:(id /* block */)completion;
- (void)getAttached:(id /* block */)attached;
- (void)recordZoneWithName:(id)name completionHandler:(id /* block */)handler;
- (id)saltedAndHashedIDFromLocalID:(id)id;
- (BOOL)establishedSalt;
- (void)invalidateSalt;
- (id)recordNameFromRecordType:(id)type identifier:(id)identifier;
- (void)p_unsubscribeToContainer:(id)container;
- (void)p_subscribeWithCompletion:(id /* block */)completion;
- (void)p_fetchDatabaseChanges:(id /* block */)changes;
- (void)p_createRecordZones:(id)zones completionHandler:(id /* block */)handler;
- (void)p_createRecordIDSaltWithCompletion:(id /* block */)completion;
- (void)p_fetchZoneChanges:(id /* block */)changes;
- (void)p_fetchRecordZoneChangesForRecordZoneIDs:(id)ids completionHandler:(id /* block */)handler;
- (void)p_updateRetryParametersFromFetchZoneChangesOperationError:(id)error;
- (void)p_fetchRecordZoneChanges:(id)changes optionsByRecordZoneID:(id)id completionHandler:(id /* block */)handler;
- (void)p_informObserversOfAttachmentChange;
- (void)p_informObserversOfRecordsChanged:(id)changed;
- (void)p_informObserversOfSaltVersionIdentifierChanged:(id)changed forZones:(id)zones completion:(id /* block */)completion;
- (void)p_informObserversOfRecordsChanged:(id)changed forRecordType:(id)type;
- (void)p_informObserversOfCompletedFetchOfZone:(id)zone;
- (void)p_scheduleArchiveWithCompletion:(id /* block */)completion;
- (void)p_unarchive;
- (id)p_archiveToData;
- (id)p_unarchiveFromData:(id)data;
- (void)_deleteRecordZonesWithIDs:(id)ids qualityOfService:(long long)service completion:(id /* block */)completion;
- (void)zonesUnreadableDueToMissingD2DEncryptionIdentity:(id)identity completion:(id /* block */)completion;
- (void)zonesTemporarilyUnreadableWithError:(id)error completion:(id /* block */)completion;
- (void)zonesDeletedOrReset:(id)reset completion:(id /* block */)completion;
- (void)addObserver:(id)observer recordType:(id)type;
- (void)removeObserver:(id)observer recordType:(id)type;
- (void)removeObserver:(id)observer;
- (void)addObserver:(id)observer zoneID:(id)id;
- (void)registerServerChangeTokenStore:(id)store forZoneID:(id)id;
- (void)unregisterServerChangeTokenStore:(id)store;
- (id)diagnosticDatabaseInfo;
@end

#endif /* BCCloudKitDatabaseController_h */
