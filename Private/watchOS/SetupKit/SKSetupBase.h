//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 730.8.0.0.0
//
#ifndef SKSetupBase_h
#define SKSetupBase_h
@import Foundation;

#include "CULabelable-Protocol.h"
#include "CUMessaging-Protocol.h"
#include "SKConnection.h"
#include "SKDevice.h"
#include "SKStepable-Protocol.h"

@class CUMessageSession, CUMessageSessionServer, NSData, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface SKSetupBase : NSObject<CULabelable, CUMessaging> {
  /* instance variables */
  BOOL _activateCalled;
  BOOL _invalidateCalled;
  BOOL _invalidateDone;
  NSMutableDictionary *_registeredEvents;
  NSMutableDictionary *_registeredRequests;
  int _runState;
  SKConnection *_skCnx;
  NSMutableArray *_stepArray;
  NSObject<SKStepable> *_stepCurrent;
  struct LogCategory { int x0; int x1; char * x2; unsigned int x3; char * x4; char * x5; int x6; struct LogCategory * x7; struct LogOutput * x8; struct LogOutput * x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; char * x14; struct LogCategoryPrivate * x15; } * _ucat;
  struct LogCategory { int x0; int x1; char * x2; unsigned int x3; char * x4; char * x5; int x6; struct LogCategory * x7; struct LogOutput * x8; struct LogOutput * x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; char * x14; struct LogCategoryPrivate * x15; } * _ucatBase;
  CUMessageSessionServer *_messageSessionServer;
}

@property (copy, nonatomic) NSData *authTagOverride;
@property (nonatomic) unsigned int bluetoothUseCase;
@property (nonatomic) unsigned int controlFlags;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (copy, nonatomic) id /* block */ eventHandler;
@property (readonly, nonatomic) CUMessageSession *messageSessionTemplate;
@property (copy, nonatomic) NSString *password;
@property (nonatomic) int passwordType;
@property (copy, nonatomic) id /* block */ passwordTypeChangedHandler;
@property (retain, nonatomic) SKDevice *peerDevice;
@property (nonatomic) BOOL persistentPairing;
@property (copy, nonatomic) NSData *pskData;
@property (nonatomic) BOOL reversePairing;
@property (copy, nonatomic) id /* block */ sendDataHandler;
@property (nonatomic) int setupType;
@property (copy, nonatomic) NSString *label;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithLogCategory:(struct LogCategory { int x0; int x1; char * x2; unsigned int x3; char * x4; char * x5; int x6; struct LogCategory * x7; struct LogOutput * x8; struct LogOutput * x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; char * x14; struct LogCategoryPrivate * x15; } *)category;
- (void)dealloc;
- (id)descriptionWithLevel:(int)level;
- (void)activate;
- (void)_activate;
- (void)invalidate;
- (void)_invalidate;
- (void)_invalidated;
- (void)_completeWithError:(id)error;
- (void)postEvent:(id)event;
- (void)postEventType:(int)type;
- (void)_postEvent:(id)event;
- (void)_prepareSteps;
- (void)reportEvent:(id)event;
- (void)_reportEvent:(id)event;
- (void)reportEventType:(int)type;
- (void)_reportEventType:(int)type;
- (void)receivedData:(id)data;
- (void)_run;
- (void)_connectionStartWithSKConnection:(id)skconnection clientMode:(BOOL)mode completeOnFailure:(BOOL)failure completion:(id /* block */)completion;
- (void)_connectionEnded:(id)ended;
- (void)_pairSetupConfig:(id)config;
- (void)_receivedEventID:(id)id event:(id)event options:(id)options;
- (void)registerEventID:(id)id options:(id)options eventHandler:(id /* block */)handler completionHandler:(id /* block */)handler;
- (void)deregisterEventID:(id)id completionHandler:(id /* block */)handler;
- (void)sendEventID:(id)id eventMessage:(id)message options:(id)options completionHandler:(id /* block */)handler;
- (void)_receivedRequestID:(id)id request:(id)request options:(id)options responseHandler:(id /* block */)handler;
- (void)registerRequestID:(id)id options:(id)options requestHandler:(id /* block */)handler completionHandler:(id /* block */)handler;
- (void)deregisterRequestID:(id)id completionHandler:(id /* block */)handler;
- (void)sendRequestID:(id)id requestMessage:(id)message options:(id)options responseHandler:(id /* block */)handler;
- (void)_setupMessageSession;
- (void)_tearDownMessageSession;
- (void)addStep:(id)step;
- (void)_addStep:(id)step;
- (void)_completedStep:(id)step error:(id)error;
- (void)_invalidateSteps;
- (BOOL)_runSteps;
@end

#endif /* SKSetupBase_h */
