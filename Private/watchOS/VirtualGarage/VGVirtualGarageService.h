//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2298.42.9.28.5
//
#ifndef VGVirtualGarageService_h
#define VGVirtualGarageService_h
@import Foundation;

#include "VGVirtualGarageActions-Protocol.h"
#include "VGVirtualGarageObserver-Protocol.h"

@class GEOObserverHashTable, NSHashTable, NSString, NSXPCConnection, geo_isolater;
@protocol OS_dispatch_queue;

@interface VGVirtualGarageService : NSObject<VGVirtualGarageObserver, VGVirtualGarageActions> {
  /* instance variables */
  NSHashTable *_clients;
  geo_isolater *_clientsIsolater;
  GEOObserverHashTable *_observers;
  NSObject<OS_dispatch_queue> *_callbackQueue;
  NSObject<OS_dispatch_queue> *_connectionQueue;
}

@property (retain, nonatomic) NSXPCConnection *connection;
@property (copy) NSString *activeVehicleIdentifier;

/* class methods */
+ (BOOL)canUseVirtualGarageXPCService;
+ (id)sharedService;

/* instance methods */
- (id)init;
- (void)openForClient:(id)client;
- (void)closeForClient:(id)client;
- (void)_openConnection;
- (void)_closeConnection;
- (void)registerObserver:(id)observer;
- (void)unregisterObserver:(id)observer;
- (void)_clearActiveVehicleIdentifierIfNeeded:(id)needed;
- (id)messageTargetWithErrorReply:(id /* block */)reply;
- (void)virtualGarageAddVehicle:(id)vehicle;
- (void)virtualGarageRemoveVehicle:(id)vehicle;
- (void)virtualGarageGetGarageWithReply:(id /* block */)reply;
- (void)virtualGarageSelectVehicle:(id)vehicle;
- (void)virtualGarageOnboardVehicle:(id)vehicle;
- (void)virtualGarageSaveVehicle:(id)vehicle;
- (void)virtualGarageSetShouldUsePreferredNetworks:(BOOL)networks forVehicle:(id)vehicle;
- (void)virtualGarageStartContinuousUpdatesIfNeeded;
- (void)virtualGarageEndContinuousUpdates;
- (void)virtualGarageSetAssumesFullCharge:(BOOL)charge;
- (void)virtualGarageForceFetchAllVehicles;
- (void)virtualGarageGetListOfUnpairedVehiclesWithReply:(id /* block */)reply;
- (void)virtualGarageGetLatestStateOfVehicleWithIdentifier:(id)identifier syncAcrossDevices:(BOOL)devices withReply:(id /* block */)reply;
- (void)virtualGarageDidUpdate:(id)update;
- (void)virtualGarage:(id)garage didUpdateUnpairedVehicles:(id)vehicles;
@end

#endif /* VGVirtualGarageService_h */
