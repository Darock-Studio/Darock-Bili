//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2298.42.9.28.5
//
#ifndef VGVirtualGarageServer_h
#define VGVirtualGarageServer_h
@import Foundation;

#include "GEOConfigChangeListenerDelegate-Protocol.h"
#include "NSXPCListenerDelegate-Protocol.h"
#include "VGVirtualGarage.h"
#include "VGVirtualGarageActions-Protocol.h"
#include "VGVirtualGarageDelegate-Protocol.h"
#include "VGVirtualGarageObserver-Protocol.h"

@class NSMutableArray, NSString, NSXPCListener;
@protocol OS_dispatch_queue, VGVirtualGaragePersisting;

@interface VGVirtualGarageServer : NSObject<NSXPCListenerDelegate, VGVirtualGarageDelegate, GEOConfigChangeListenerDelegate, VGVirtualGarageActions> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_isolationQueue;
  NSObject<VGVirtualGaragePersisting> *_persister;
}

@property (nonatomic) BOOL hostsVirtualGarage;
@property (retain, nonatomic) VGVirtualGarage *garage;
@property (retain, nonatomic) NSXPCListener *listener;
@property (retain, nonatomic) NSMutableArray *activeConnections;
@property (weak, nonatomic) NSObject<VGVirtualGarageObserver> *observer;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *observerQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedServer;
+ (BOOL)canUseVirtualGarageXPCService;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)startWithPersister:(id)persister;
- (void)stop;
- (void)_cleanUp;
- (void)_setupVirtualGarageHostingIfNeeded;
- (void)valueChangedForGEOConfigKey:(struct { unsigned int x0; void * x1; })key;
- (BOOL)listener:(id)listener shouldAcceptNewConnection:(id)connection;
- (void)virtualGarageDidUpdate:(id)update;
- (void)virtualGarage:(id)garage didUpdateUnpairedVehicles:(id)vehicles;
- (void)virtualGarageAddVehicle:(id)vehicle;
- (void)virtualGarageRemoveVehicle:(id)vehicle;
- (void)virtualGarageSaveVehicle:(id)vehicle;
- (void)virtualGarageSelectVehicle:(id)vehicle;
- (void)virtualGarageOnboardVehicle:(id)vehicle;
- (void)virtualGarageSetShouldUsePreferredNetworks:(BOOL)networks forVehicle:(id)vehicle;
- (void)virtualGarageStartContinuousUpdatesIfNeeded;
- (void)virtualGarageEndContinuousUpdates;
- (void)virtualGarageSetAssumesFullCharge:(BOOL)charge;
- (void)virtualGarageForceFetchAllVehicles;
- (void)virtualGarageGetGarageWithReply:(id /* block */)reply;
- (void)virtualGarageGetListOfUnpairedVehiclesWithReply:(id /* block */)reply;
- (void)virtualGarageGetLatestStateOfVehicleWithIdentifier:(id)identifier syncAcrossDevices:(BOOL)devices withReply:(id /* block */)reply;
@end

#endif /* VGVirtualGarageServer_h */
