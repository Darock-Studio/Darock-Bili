//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef GKSessionInternal_h
#define GKSessionInternal_h
@import Foundation;

#include "GKAutoPeerIDTable.h"
#include "GKConnection.h"
#include "GKList.h"
#include "GKSessionDelegate-Protocol.h"
#include "GKTable.h"
#include "GKVoiceChatSessionListener.h"

@class GKSession, NSString;
@protocol GKSessionPrivateDelegate, [2@"<GKSessionDOOBReceiveHandler>"];

@interface GKSessionInternal : NSObject {
  /* instance variables */
  GKSession *_session;
  unsigned int _pid;
  void * _dataReceiveHandlerContext;
  <GKSessionDOOBReceiveHandler> * _doobReceiveHandler[2];
  void * _doobReceiveHandlerContext[2];
  GKTable *_peerInfoTable;
  GKTable *_peerNameTable;
  GKAutoPeerIDTable *_peerIDTable;
  GKList *_peersAvailable;
  GKList *_peersConnected;
  GKList *_peersForCleanup;
  GKList *_peersPendingIncomingInvitation;
  GKList *_peersPendingOutgoingInvitation;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _lock;
  struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } _delegateLock;
  BOOL _isSearching;
  BOOL _isPublishing;
  BOOL _sessionStarted;
  unsigned int _mode;
  BOOL _isBusy;
  struct _DNSServiceRef_t * _dnsServiceConnection;
  struct _DNSServiceRef_t * _dnsServiceResolveConnection;
  int _sReset;
  struct _DNSServiceRef_t * _serviceBrowser;
  struct _DNSServiceRef_t * _service;
  struct _DNSServiceRef_t * _oldService;
  BOOL _handleEventsRunning;
  BOOL _stopHandlingEvents;
  BOOL _shutdown;
  GKVoiceChatSessionListener *_voiceChatListener;
}

@property (nonatomic) struct OpaqueGCKSession * sessionRef;
@property (nonatomic) struct OpaqueAGPSession * agpSessionRef;
@property (copy, nonatomic) NSString *domain;
@property (copy, nonatomic) NSString *serviceType;
@property (nonatomic) unsigned long long maxPeers;
@property (nonatomic) unsigned long long port;
@property (readonly, retain) GKConnection *connection;
@property (readonly, nonatomic) id dataReceiveHandler;
@property NSObject<GKSessionDelegate> *delegate;
@property (readonly) NSString *sessionID;
@property (readonly) NSString *displayName;
@property (readonly) unsigned int sessionMode;
@property (readonly) NSString *peerID;
@property double disconnectTimeout;
@property BOOL available;
@property NSObject<GKSessionPrivateDelegate> *privateDelegate;
@property BOOL busy;
@property BOOL wifiEnabled;

/* instance methods */
- (void)sendCallbacksToDelegate:(struct { int x0; char * x1; int x2; unsigned int x3; } *)delegate remotePeer:(unsigned int)peer;
- (BOOL)isShuttingDown;
- (id)newNSErrorFromHRESULT:(int)hresult description:(id)description reason:(id)reason;
- (id)newNSErrorFromGKSessionError:(int)error description:(id)description reason:(id)reason;
- (void)printDictionaries;
- (void)setDisplayName:(id)name forPeer:(unsigned int)peer;
- (void)tellDelegate_sessionDidFailWithError:(id)error;
- (void)tellDelegate_didConnectPeer:(id)peer;
- (void)tellDelegate_didDisconnectPeer:(id)peer;
- (void)tellDelegate_isConnectingPeer:(id)peer;
- (void)tellDelegate_peerDidBecomeAvailable:(id)available;
- (void)tellDelegate_peerDidBecomeUnavailable:(id)unavailable;
- (void)tellDelegate_didReceiveBand_RetryICE:(id)ice;
- (void)tellDelegate_didReceiveData:(id)data;
- (void)tellDelegate_gotInvited:(id)invited;
- (void)tellDelegate_connectionRequestToPeerFailed:(id)failed;
- (void)tellDelegate_peerDidBecomeBusy:(id)busy;
- (void)tellDelegate_initiateRelay:(id)relay;
- (void)tellDelegate_updateRelay:(id)relay;
- (void)tellDelegate_networkStatisticsChanged:(id)changed;
- (BOOL)parseServiceName:(const char *)name intoDisplayName:(id *)name pid:(unsigned int *)pid state:(id *)state;
- (id)serviceName;
- (void)stopResolvingAllPeers;
- (void)didPublishWithError:(int)error;
- (void)lock;
- (void)unlock;
- (id)description;
- (id)initWithConnection:(id)connection session:(id)session delegate:(id)delegate;
- (id)initWithSessionID:(id)id displayName:(id)name session:(id)session sessionMode:(unsigned int)mode;
- (void)reset;
- (void)dealloc;
- (id)displayNameForPeer:(id)peer;
- (BOOL)sendAudioData:(id)data toPeers:(id)peers withDataMode:(unsigned int)mode error:(id *)error;
- (BOOL)passesSendDataSanityCheck:(id)check toPeers:(id)peers withDataMode:(unsigned int)mode error:(id *)error;
- (BOOL)sendData:(id)data toPeers:(id)peers withDataMode:(unsigned int)mode error:(id *)error;
- (BOOL)sendData:(id)data toPeers:(id)peers withDataMode:(unsigned int)mode enableOOB:(BOOL)oob error:(id *)error;
- (BOOL)sendDataToAllPeers:(id)peers withDataMode:(unsigned int)mode error:(id *)error;
- (void)receiveDOOB:(id)doob fromPeer:(id)peer inSession:(id)session context:(void *)context;
- (void)setDOOBReceiveHandler:(id)handler withContext:(void *)context inBand:(unsigned int)band;
- (void)setDataReceiveHandler:(id)handler withContext:(void *)context;
- (void)timeoutConnectToPeer:(id)peer;
- (void)connectToPeer:(id)peer withTimeout:(double)timeout;
- (void)cancelConnectToPeer:(id)peer;
- (BOOL)acceptConnectionFromPeer:(id)peer error:(id *)error;
- (void)denyConnectionFromPeer:(id)peer;
- (void)disconnectPeerFromAllPeers:(id)peers;
- (void)disconnectFromAllPeers;
- (BOOL)isAvailable;
- (id)peersWithConnectionState:(unsigned int)state;
- (BOOL)isBusy;
- (void)stopOldService;
- (BOOL)isPeerBusy:(id)busy;
- (void)handleEvents;
- (BOOL)checkDNSConnection;
- (void)publish;
- (BOOL)filterService:(const char *)service withPID:(unsigned int)pid;
- (void)cleanupExAvailablePeers;
- (void)processTXTRecordForPeer:(id)peer txtLen:(unsigned short)len txtRecord:(const void *)record;
- (void)didUpdateTXTRecordForPeer:(id)peer fromIF:(const char *)if txtLen:(unsigned short)len txtRecord:(const void *)record withError:(int)error moreComing:(BOOL)coming;
- (void)didFindService:(const char *)service fromIF:(const char *)if withError:(int)error moreComing:(BOOL)coming;
- (void)didRemoveService:(const char *)service fromIF:(const char *)if withError:(int)error moreComing:(BOOL)coming;
- (void)browse;
- (BOOL)tryConnectToPeer:(id)peer;
- (void)didLookupHostname:(struct _DNSServiceRef_t *)hostname forPeer:(id)peer hostName:(const char *)name address:(const struct sockaddr_in { unsigned char x0; unsigned char x1; unsigned short x2; struct in_addr { unsigned int x0; } x3; char x4[8] } *)address interface:(unsigned int)interface withError:(int)error moreComing:(BOOL)coming;
- (void)didResolveService:(struct _DNSServiceRef_t *)service forPeer:(id)peer hostName:(const char *)name port:(unsigned short)port interface:(unsigned int)interface txtLen:(unsigned short)len txtRecord:(const void *)record withError:(int)error moreComing:(BOOL)coming;
- (id)stringForGCKID:(unsigned int)gckid;
- (id)voiceChatSessionListener;
@end

#endif /* GKSessionInternal_h */
