//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef CDXClient_h
#define CDXClient_h
@import Foundation;

#include "CDXClientDelegate-Protocol.h"

@class NSData, NSError, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface CDXClient : NSObject {
  /* instance variables */
  NSObject<CDXClientDelegate> *delegate_;
  long long holePunchAttemptCount_;
  NSData *preblob_;
  NSMutableDictionary *sessionLookup_;
  NSError *error_;
  int fd_;
  unsigned long long holePunchSID_;
  unsigned long long prevHolePunchSID_;
  NSString *server_;
  unsigned short port_;
  unsigned short localPort_;
  long long restartCount_;
  struct sockaddr_in { unsigned char sin_len; unsigned char sin_family; unsigned short sin_port; struct in_addr { unsigned int s_addr; } sin_addr; char x[8] sin_zero; } cdxaddr_ipv4;
  struct addrinfo { int x0; int x1; int x2; int x3; unsigned int x4; char * x5; struct sockaddr * x6; struct addrinfo * x7; } * cdxMappedIPv4Addr;
  double holePunchInterval_;
  BOOL preblobIsUpToDate_;
  BOOL willReconfigureShortly_;
  struct __SCDynamicStore * scDynamicStore_;
  struct __CFRunLoopSource * scDynamicStoreRunLoopSource_;
  NSObject<OS_dispatch_queue> *queue_;
  NSObject<OS_dispatch_source> *source_;
  NSObject<OS_dispatch_source> *holePunchTimer_;
  id /* block */ preblobCallback_;
  void * padding_[10];
}

@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (copy, nonatomic) id /* block */ preblobCallback;
@property (nonatomic) NSObject<CDXClientDelegate> *delegate;
@property (readonly) NSData *preblob;
@property (readonly, nonatomic) NSError *error;

/* class methods */
+ (id)sharedClient;

/* instance methods */
- (void)sendHolePunch;
- (BOOL)handleHolePunchEvent;
- (void)resetHolepunchTimer;
- (void)handleFDEvent;
- (void)networkDidChange;
- (void)stopListeningOnSockets;
- (void)startListeningOnSockets;
- (id)initWithOptions:(id)options delegate:(id)delegate;
- (const struct sockaddr { unsigned char x0; unsigned char x1; char x2[14] } *)currentSockAddr;
- (unsigned char)currentSockAddrLen;
- (void)mapIPv4AddrToIPv6:(struct sockaddr_in { unsigned char x0; unsigned char x1; unsigned short x2; struct in_addr { unsigned int x0; } x3; char x4[8] } *)ipv6;
- (void)dealloc;
- (void)start;
- (void)restart;
- (void)stopHolePunchTimer;
- (void)invalidate;
- (BOOL)sendRaw:(id)raw;
- (void)invalidateSession:(id)session;
- (id)createSessionWithTicket:(id)ticket sessionKey:(id)key;
@end

#endif /* CDXClient_h */
