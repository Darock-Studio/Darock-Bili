//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2005.6.1.3.2
//
#ifndef GKVoiceChatServicePrivate_h
#define GKVoiceChatServicePrivate_h
@import Foundation;

#include "GKVoiceChatClient-Protocol.h"
#include "GKVoiceChatDictionary.h"
#include "VideoConferenceDelegate-Protocol.h"

@class GKVoiceChatService, NSLock, NSRecursiveLock, VideoConference;

@interface GKVoiceChatServicePrivate : NSObject<VideoConferenceDelegate> {
  /* instance variables */
  unsigned int curCallID;
  GKVoiceChatDictionary *incomingCallDict;
  GKVoiceChatDictionary *outgoingCallDict;
  struct tagCONNRESULT { unsigned int dwCallID; int iResultCount; int iRole; unsigned int dwRemoteCallID; int proto; int bIfRelay; unsigned short wRelayServType; unsigned short wChannelNumber; struct tagIPPORT { int iFlags; char x[16] szIfName; union { unsigned int dwIPv4; unsigned char x[16] abIPv6; } IP; unsigned short wPort; } mbLocal; struct tagIPPORT { int iFlags; char x[16] szIfName; union { unsigned int dwIPv4; unsigned char x[16] abIPv6; } IP; unsigned short wPort; } mbRemote; struct tagIPPORT { int iFlags; char x[16] szIfName; union { unsigned int dwIPv4; unsigned char x[16] abIPv6; } IP; unsigned short wPort; } mbSrc; struct tagIPPORT { int iFlags; char x[16] szIfName; union { unsigned int dwIPv4; unsigned char x[16] abIPv6; } IP; unsigned short wPort; } mbDst; struct tagIPPORT { int iFlags; char x[16] szIfName; union { unsigned int dwIPv4; unsigned char x[16] abIPv6; } IP; unsigned short wPort; } mbRemoteSrc; struct tagIPPORT { int iFlags; char x[16] szIfName; union { unsigned int dwIPv4; unsigned char x[16] abIPv6; } IP; unsigned short wPort; } mbRelayExt; unsigned int dwRTT; int bIfLocalCellularQoS; int bIfRemoteCellularQoS; int iLocalCellTech; int iRemoteCellTech; unsigned short wCellularMTU; int bIfUpgrade; int bIfPrimary; int bIfReplaceOnly; struct tagCONNRESULT *next; int channelID; } currentConnResult;
  NSRecursiveLock *stateLock;
  NSLock *clientLock;
  BOOL forceNoICE;
  VideoConference *conf;
}

@property int state;
@property int chatMode;
@property GKVoiceChatService *wrapperService;
@property (nonatomic) id client;
@property BOOL microphoneMuted;
@property float remoteParticipantVolume;
@property BOOL outputMeteringEnabled;
@property BOOL inputMeteringEnabled;
@property (readonly, nonatomic) float outputMeterLevel;
@property (readonly, nonatomic) float inputMeterLevel;
@property BOOL focus;
@property (nonatomic) void * localVideoLayer;
@property (nonatomic) void * remoteVideoLayer;
@property (readonly) double localFramerate;
@property (readonly) double localBitrate;
@property (readonly) double remoteFramerate;
@property (readonly) double remoteBitrate;
@property (readonly, nonatomic) long long outputAudioPowerSpectrumToken;

/* class methods */
+ (id)defaultVoiceChatService;

/* instance methods */
- (id)init;
- (void)cleanup;
- (void)dealloc;
- (BOOL)startVoiceChatWithParticipantID:(id)id error:(id *)error;
- (void)stopVoiceChatProc:(id)proc;
- (void)stopVoiceChatWithParticipantID:(id)id;
- (BOOL)acceptCallID:(unsigned int)id error:(id *)error;
- (void)denyCallID:(unsigned int)id;
- (void)informClientOfInviteFromParticipant:(id)participant;
- (void)informClientVoiceChatDidStart:(id)start;
- (void)informClientVoiceChatDidStartMainSelector:(id)selector;
- (void)informClientVoiceChatDidNotStart:(id)start;
- (void)informClientVoiceChatDidNotStartMainSelector:(id)selector;
- (void)informClientVoiceChatDidStop:(id)stop;
- (void)resetState;
- (void)receivedData:(id)data fromParticipantID:(id)id;
- (BOOL)inviteIsValid:(id)valid;
- (id)createReplyUsingDictionary:(id)dictionary replyCode:(unsigned long long)code error:(id *)error;
- (id)createInvite:(id *)invite toParticipant:(id)participant callID:(unsigned int *)id;
- (int)startICEConnectionCheck:(id)check isCaller:(BOOL)caller;
- (int)startICEConnectionCheck:(id)check isCaller:(BOOL)caller withCallID:(unsigned int)id;
- (BOOL)getNSError:(id *)nserror code:(long long)code description:(id)description hResult:(int)result;
- (BOOL)getNSError:(id *)nserror code:(long long)code description:(id)description reason:(id)reason;
- (BOOL)isOutputMeteringEnabled;
- (BOOL)isInputMeteringEnabled;
- (BOOL)isMicrophoneMuted;
- (BOOL)isFocus;
- (void)forceNoICE:(BOOL)ice;
- (void)videoConference:(id)conference didStartSession:(BOOL)session withCallID:(unsigned int)id error:(id)error;
- (void)videoConference:(id)conference didStopWithCallID:(unsigned int)id error:(id)error;
- (id)localDisplayNameForCallID:(unsigned int)id;
- (id)remoteDisplayNameForCallID:(unsigned int)id;
@end

#endif /* GKVoiceChatServicePrivate_h */
