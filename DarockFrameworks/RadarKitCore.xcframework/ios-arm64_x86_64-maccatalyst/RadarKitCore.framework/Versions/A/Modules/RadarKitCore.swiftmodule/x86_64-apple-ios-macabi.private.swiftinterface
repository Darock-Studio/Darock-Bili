// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios16.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature SymbolLinkageMarkers -enable-bare-slash-regex -module-name RadarKitCore
import CommonCrypto
import Foundation
import OSLog
@_exported import RadarKitCore
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @objcMembers public class RKCFileFormatter : ObjectiveC.NSObject {
  final public let formattingFile: RadarKitCore.RKCFeedback
  public init(for file: RadarKitCore.RKCFeedback)
  public func content() -> RadarKitCore.RKCFormattedFile
  public func replies() -> [RadarKitCore.RKCFormattedFile]
  @objc deinit
}
@dynamicMemberLookup public struct RKCFormattedFile {
  public let _rawDictionary: [Swift.String : Swift.String]
  public let isInternalHidden: Swift.Bool
  public subscript(dynamicMember member: Swift.String) -> Swift.String? {
    get
  }
  public subscript(key: Swift.String) -> Swift.String? {
    get
  }
  public var allKeysForUser: [Swift.String] {
    get
  }
  public var allKeys: [Swift.String] {
    get
  }
}
postfix operator /
@objc @objcMembers public class RKCFeedbackManager : ObjectiveC.NSObject {
  @objc final public let managingProjectName: Swift.String
  @objc public init(projectName: Swift.String)
  public func getFeedback(byId id: Swift.String) async -> RadarKitCore.RKCFeedback?
  public func newFeedback(_ data: RadarKitCore.NewFeedbackData) async -> Swift.Int?
  @objc @discardableResult
  public func replyFeedback(toId id: Swift.String, withContent content: Swift.String, bySender sender: Swift.String) async -> Swift.Bool
  @objc deinit
}
public struct RKCFeedback : Swift.Identifiable {
  public let id: Swift.String
  public var title: Swift.String
  public var state: RadarKitCore.RKCFileStatus
  public var rawText: Swift.String
  public var _formattedTexts: [Swift.String]
  public var _replies: [[Swift.String]]
  public typealias ID = Swift.String
}
extension RadarKitCore.RKCFeedback {
  public var shouldDisableUserReply: Swift.Bool {
    get
  }
}
public struct NewFeedbackData {
  public var title: Swift.String
  public var content: Swift.String
  public var sender: Swift.String
  public var additionalData: RadarKitCore.NewFeedbackData.AdditionalData
  public var attachments: [RadarKitCore.RKCAttachment]
  public init(title: Swift.String, content: Swift.String, sender: Swift.String, additionalData: RadarKitCore.NewFeedbackData.AdditionalData = .dictionary([:]), attachments: [RadarKitCore.RKCAttachment] = []) throws
  public enum InputError : Swift.Error {
    case emptyTitle
    case multilineTitle
    public static func == (a: RadarKitCore.NewFeedbackData.InputError, b: RadarKitCore.NewFeedbackData.InputError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AdditionalData {
    case dictionary([Swift.String : Swift.String])
    case rawString(Swift.String)
  }
}
public enum RKCFileStatus : Swift.String, Swift.CaseIterable, Swift.Equatable, Swift.Hashable, Swift.Codable {
  case unmarked
  case underInvestigation
  case workAsExpected
  case unableToFix
  case duplicate
  case futureConsideration
  case longTermPlan
  case fixing
  case fixPendingRelease
  case fixCompleted
  case cannotReproduce
  case detailsRequired
  case unrelated
  case undefined
  public init(_rawValue rawValue: Swift.String)
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RadarKitCore.RKCFileStatus]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RadarKitCore.RKCFileStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKCAttachmentManager : ObjectiveC.NSObject {
  @objc public static let shared: RadarKitCore.RKCAttachmentManager
  public func attachImage(_ image: UIKit.UIImage) async -> RadarKitCore.RKCAttachment?
  @objc override dynamic public init()
  @objc deinit
}
public struct RKCAttachment {
}
extension RadarKitCore.NewFeedbackData.InputError : Swift.Equatable {}
extension RadarKitCore.NewFeedbackData.InputError : Swift.Hashable {}
extension RadarKitCore.RKCFileStatus : Swift.RawRepresentable {}
